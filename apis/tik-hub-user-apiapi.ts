// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
// @ts-ignore
import { UserInfoResponseModel } from '../models';
/**
 * TikHubUserAPIApi - axios parameter creator
 * @export
 */
export const TikHubUserAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 根据用户输入的每日请求次数以及端点信息计算最终价格。 ### 参数: - endpoint: 请求的端点，用于查询端点的原始请求单价 - request_per_day: 每日请求次数，用于计算价格，将自动根据阶梯式计费的折扣百分比计算最终价格 ### 计算公式: - 总成本 = ∑ (阶梯内请求次数 * 阶梯折后单价) - 其中，阶梯折后单价 = 基础价格 * (1 - 折扣) ### 详细计算步骤: 1. **初始化总成本**：    总成本=0 2. **遍历每个阶梯**：    * 对于每个阶梯，计算该阶梯内的请求次数。    * 计算该阶梯内的折后单价。    * 计算该阶梯内的总费用，并累加到总成本中。    * 更新剩余的请求次数。 ### 数学表示: > 设有 𝑛 个阶梯，每个阶梯的参数为： * min_rpd𝑖: 第 𝑖 个阶梯的最小请求次数 * max_rpd𝑖: 第 𝑖 个阶梯的最大请求次数 * discount𝑖: 第 𝑖 个阶梯的折扣（百分比形式） * base_price：基础价格 * request_per_day：每日请求次数 > 那么，总成本的计算公式如下： - 总成本 = Σ𝑖=1𝑛（阶梯𝑖中的请求数量 * 阶梯𝑖中的折扣单价） - 其中，阶梯折扣单价 𝑖 = base_price * (1 - 折扣𝑖/100) - 该阶梯中的请求数 𝑖 = min(request_per_day - 累计付费请求数, max_rpd𝑖 - min_rpd𝑖) ### 示例 > 假设有以下定价阶梯： * 第 1 阶梯：0 ≤ rpd < 1000，折扣 0% * 第 2 阶梯：1000 ≤ rpd < 5000，折扣 10% * 第 3 阶梯：5000 ≤ rpd < 10000，折扣 20% * 第 4 阶梯：10000 ≤ rpd < 20000，折扣 30% * 第 5 阶梯：20000 ≤ rpd < 30000，折扣 40% * 第 6 阶梯：30000 ≤ rpd，折扣 50% > 假设基础价格为 0.001 USD，每日请求次数为 12000，则计算过程如下： 1. **第 1 阶梯**（0 ≤ rpd < 1000）：    * 阶梯内请求次数=1000−0=1000    * 阶梯折后单价=0.001×(1−0/100)=0.001    * 总成本=1000×0.001=1 2. **第 2 阶梯**（1000 ≤ rpd < 5000）：    * 阶梯内请求次数=5000−1000=4000    * 阶梯折后单价=0.001×(1−10/100)=0.0009    * 总成本=4000×0.0009=3.6 3. **第 3 阶梯**（5000 ≤ rpd < 10000）：    * 阶梯内请求次数=10000−5000=5000    * 阶梯折后单价=0.001×(1−20/100)=0.0008    * 总成本=5000×0.0008=4 4. **第 4 阶梯**（10000 ≤ rpd < 20000）：    * 阶梯内请求次数=12000−10000=2000    * 阶梯折后单价=0.001×(1−30/100)=0.0007    * 总成本=2000×0.0007=1.4 5. **累加总成本**：    * 总成本=1+3.6+4+1.4=10 ### 返回: - 端点uri - 每日请求次数 - 端点原始请求单价 - 总价格 - 货币单位 - 阶梯式计费的折扣百分比信息  # [English] ### Purpose: - Calculate the final price based on the user\'s input of the number of daily requests and endpoint information. - Price calculation formula: Price = Number of daily requests * (Original request unit price of the endpoint * (1 - discount percentage of tiered billing)) ### Parameters: - endpoint: Requested endpoint, used to query the original request unit price of the endpoint - request_per_day: Number of daily requests, used to calculate the price, the final price will be calculated automatically based on the discount percentage of the tiered billing ### Calculation formula: - Total cost = ∑ (Number of requests in the tier * Discounted unit price in the tier) - Where, Discounted unit price in the tier = Base price * (1 - Discount) ### Detailed calculation steps: 1. **Initialize the total cost**:      Total cost = 0 2. **Traverse each tier**:         * For each tier, calculate the number of requests in the tier.         * Calculate the discounted unit price in the tier.         * Calculate the total cost in the tier and add it to the total cost.         * Update the remaining number of requests. ### Mathematical representation: Suppose there are 𝑛 tiers, and the parameters of each tier are: * min_rpd𝑖: The minimum number of requests in the 𝑖-th tier * max_rpd𝑖: The maximum number of requests in the 𝑖-th tier * discount𝑖: The discount of the 𝑖-th tier (in percentage form) * base_price: Base price * request_per_day: Number of daily requests > Then, the formula for calculating the total cost is as follows: - Total cost = ∑𝑖=1𝑛(Number of requests in the tier 𝑖 * Discounted unit price in the tier 𝑖) - Where, Discounted unit price in the tier 𝑖 = base_price * (1 - discount𝑖/100) - Number of requests in the tier 𝑖 = min(request_per_day - accumulated number of paid requests, max_rpd𝑖 - min_rpd𝑖) ### Example Suppose there are the following pricing tiers: * Tier 1: 0 ≤ rpd < 1000, discount 0% * Tier 2: 1000 ≤ rpd < 5000, discount 10% * Tier 3: 5000 ≤ rpd < 10000, discount 20% * Tier 4: 10000 ≤ rpd < 20000, discount 30% * Tier 5: 20000 ≤ rpd < 30000, discount 40% * Tier 6: 30000 ≤ rpd, discount 50% > Suppose the base price is 0.001 USD and the number of daily requests is 12000, the calculation process is as follows: 1. **Tier 1** (0 ≤ rpd < 1000):      - Number of requests in the tier 1 = 1000 - 0 = 1000      - Discounted unit price in the tier 1 = 0.001 * (1 - 0/100) = 0.001      - Total cost 1 = 1000 * 0.001 = 1 2. **Tier 2** (1000 ≤ rpd < 5000):     - Number of requests in the tier 2 = 5000 - 1000 = 4000     - Discounted unit price in the tier 2 = 0.001 * (1 - 10/100) = 0.0009     - Total cost 2 = 4000 * 0.0009 = 3.6 3. **Tier 3** (5000 ≤ rpd < 10000):     - Number of requests in the tier 3 = 10000 - 5000 = 5000     - Discounted unit price in the tier 3 = 0.001 * (1 - 20/100) = 0.0008     - Total cost 3 = 5000 * 0.0008 = 4 4. **Tier 4** (10000 ≤ rpd < 20000):     - Number of requests in the tier 4 = 12000 - 10000 = 2000     - Discounted unit price in the tier 4 = 0.001 * (1 - 30/100) = 0.0007     - Total cost 4 = 2000 * 0.0007 = 1.4 5. **Accumulated total cost**:     - Total cost = 1 + 3.6 + 4 + 1.4 = 10 ### Return: - Endpoint uri - Number of daily requests - Original request unit price of the endpoint - Total price - Currency unit - Discount percentage information of tiered billing
         * @summary 计算价格/Calculate price
         * @param {string} endpoint 请求的端点/Requested endpoint
         * @param {number} [requestPerDay] 每日请求次数/Request per day
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculatePriceApiV1TikhubUserCalculatePriceGet: async (endpoint: string, requestPerDay?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'endpoint' is not null or undefined
            if (endpoint === null || endpoint === undefined) {
                throw new RequiredError('endpoint','Required parameter endpoint was null or undefined when calling calculatePriceApiV1TikhubUserCalculatePriceGet.');
            }
            const localVarPath = `/api/v1/tikhub/user/calculate_price`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (endpoint !== undefined) {
                localVarQueryParameter['endpoint'] = endpoint;
            }

            if (requestPerDay !== undefined) {
                localVarQueryParameter['request_per_day'] = requestPerDay;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据用户输入的每日请求次数以及端点信息计算最终价格。 ### 参数: - endpoint: 请求的端点，用于查询端点的原始请求单价 - request_per_day: 每日请求次数，用于计算价格，将自动根据阶梯式计费的折扣百分比计算最终价格 ### 计算公式: - 总成本 = ∑ (阶梯内请求次数 * 阶梯折后单价) - 其中，阶梯折后单价 = 基础价格 * (1 - 折扣) ### 详细计算步骤: 1. **初始化总成本**：    总成本=0 2. **遍历每个阶梯**：    * 对于每个阶梯，计算该阶梯内的请求次数。    * 计算该阶梯内的折后单价。    * 计算该阶梯内的总费用，并累加到总成本中。    * 更新剩余的请求次数。 ### 数学表示: > 设有 𝑛 个阶梯，每个阶梯的参数为： * min_rpd𝑖: 第 𝑖 个阶梯的最小请求次数 * max_rpd𝑖: 第 𝑖 个阶梯的最大请求次数 * discount𝑖: 第 𝑖 个阶梯的折扣（百分比形式） * base_price：基础价格 * request_per_day：每日请求次数 > 那么，总成本的计算公式如下： - 总成本 = Σ𝑖=1𝑛（阶梯𝑖中的请求数量 * 阶梯𝑖中的折扣单价） - 其中，阶梯折扣单价 𝑖 = base_price * (1 - 折扣𝑖/100) - 该阶梯中的请求数 𝑖 = min(request_per_day - 累计付费请求数, max_rpd𝑖 - min_rpd𝑖) ### 示例 > 假设有以下定价阶梯： * 第 1 阶梯：0 ≤ rpd < 1000，折扣 0% * 第 2 阶梯：1000 ≤ rpd < 5000，折扣 10% * 第 3 阶梯：5000 ≤ rpd < 10000，折扣 20% * 第 4 阶梯：10000 ≤ rpd < 20000，折扣 30% * 第 5 阶梯：20000 ≤ rpd < 30000，折扣 40% * 第 6 阶梯：30000 ≤ rpd，折扣 50% > 假设基础价格为 0.001 USD，每日请求次数为 12000，则计算过程如下： 1. **第 1 阶梯**（0 ≤ rpd < 1000）：    * 阶梯内请求次数=1000−0=1000    * 阶梯折后单价=0.001×(1−0/100)=0.001    * 总成本=1000×0.001=1 2. **第 2 阶梯**（1000 ≤ rpd < 5000）：    * 阶梯内请求次数=5000−1000=4000    * 阶梯折后单价=0.001×(1−10/100)=0.0009    * 总成本=4000×0.0009=3.6 3. **第 3 阶梯**（5000 ≤ rpd < 10000）：    * 阶梯内请求次数=10000−5000=5000    * 阶梯折后单价=0.001×(1−20/100)=0.0008    * 总成本=5000×0.0008=4 4. **第 4 阶梯**（10000 ≤ rpd < 20000）：    * 阶梯内请求次数=12000−10000=2000    * 阶梯折后单价=0.001×(1−30/100)=0.0007    * 总成本=2000×0.0007=1.4 5. **累加总成本**：    * 总成本=1+3.6+4+1.4=10 ### 返回: - 端点uri - 每日请求次数 - 端点原始请求单价 - 总价格 - 货币单位 - 阶梯式计费的折扣百分比信息  # [English] ### Purpose: - Calculate the final price based on the user\'s input of the number of daily requests and endpoint information. - Price calculation formula: Price = Number of daily requests * (Original request unit price of the endpoint * (1 - discount percentage of tiered billing)) ### Parameters: - endpoint: Requested endpoint, used to query the original request unit price of the endpoint - request_per_day: Number of daily requests, used to calculate the price, the final price will be calculated automatically based on the discount percentage of the tiered billing ### Calculation formula: - Total cost = ∑ (Number of requests in the tier * Discounted unit price in the tier) - Where, Discounted unit price in the tier = Base price * (1 - Discount) ### Detailed calculation steps: 1. **Initialize the total cost**:      Total cost = 0 2. **Traverse each tier**:         * For each tier, calculate the number of requests in the tier.         * Calculate the discounted unit price in the tier.         * Calculate the total cost in the tier and add it to the total cost.         * Update the remaining number of requests. ### Mathematical representation: Suppose there are 𝑛 tiers, and the parameters of each tier are: * min_rpd𝑖: The minimum number of requests in the 𝑖-th tier * max_rpd𝑖: The maximum number of requests in the 𝑖-th tier * discount𝑖: The discount of the 𝑖-th tier (in percentage form) * base_price: Base price * request_per_day: Number of daily requests > Then, the formula for calculating the total cost is as follows: - Total cost = ∑𝑖=1𝑛(Number of requests in the tier 𝑖 * Discounted unit price in the tier 𝑖) - Where, Discounted unit price in the tier 𝑖 = base_price * (1 - discount𝑖/100) - Number of requests in the tier 𝑖 = min(request_per_day - accumulated number of paid requests, max_rpd𝑖 - min_rpd𝑖) ### Example Suppose there are the following pricing tiers: * Tier 1: 0 ≤ rpd < 1000, discount 0% * Tier 2: 1000 ≤ rpd < 5000, discount 10% * Tier 3: 5000 ≤ rpd < 10000, discount 20% * Tier 4: 10000 ≤ rpd < 20000, discount 30% * Tier 5: 20000 ≤ rpd < 30000, discount 40% * Tier 6: 30000 ≤ rpd, discount 50% > Suppose the base price is 0.001 USD and the number of daily requests is 12000, the calculation process is as follows: 1. **Tier 1** (0 ≤ rpd < 1000):      - Number of requests in the tier 1 = 1000 - 0 = 1000      - Discounted unit price in the tier 1 = 0.001 * (1 - 0/100) = 0.001      - Total cost 1 = 1000 * 0.001 = 1 2. **Tier 2** (1000 ≤ rpd < 5000):     - Number of requests in the tier 2 = 5000 - 1000 = 4000     - Discounted unit price in the tier 2 = 0.001 * (1 - 10/100) = 0.0009     - Total cost 2 = 4000 * 0.0009 = 3.6 3. **Tier 3** (5000 ≤ rpd < 10000):     - Number of requests in the tier 3 = 10000 - 5000 = 5000     - Discounted unit price in the tier 3 = 0.001 * (1 - 20/100) = 0.0008     - Total cost 3 = 5000 * 0.0008 = 4 4. **Tier 4** (10000 ≤ rpd < 20000):     - Number of requests in the tier 4 = 12000 - 10000 = 2000     - Discounted unit price in the tier 4 = 0.001 * (1 - 30/100) = 0.0007     - Total cost 4 = 2000 * 0.0007 = 1.4 5. **Accumulated total cost**:     - Total cost = 1 + 3.6 + 4 + 1.4 = 10 ### Return: - Endpoint uri - Number of daily requests - Original request unit price of the endpoint - Total price - Currency unit - Discount percentage information of tiered billing
         * @summary 计算价格/Calculate price
         * @param {string} endpoint 请求的端点/Requested endpoint
         * @param {number} [requestPerDay] 每日请求次数/Request per day
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculatePriceApiV1TikhubUserCalculatePriceGet_1: async (endpoint: string, requestPerDay?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'endpoint' is not null or undefined
            if (endpoint === null || endpoint === undefined) {
                throw new RequiredError('endpoint','Required parameter endpoint was null or undefined when calling calculatePriceApiV1TikhubUserCalculatePriceGet_1.');
            }
            const localVarPath = `/api/v1/tikhub/user/calculate_price`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (endpoint !== undefined) {
                localVarQueryParameter['endpoint'] = endpoint;
            }

            if (requestPerDay !== undefined) {
                localVarQueryParameter['request_per_day'] = requestPerDay;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取所有端点信息 ### 返回: - 所有端点信息  # [English] ### Purpose: - Get all endpoints information ### Return: - All endpoints information
         * @summary 获取所有端点信息/Get all endpoints information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEndpointsInfoApiV1TikhubUserGetAllEndpointsInfoGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tikhub/user/get_all_endpoints_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取所有端点信息 ### 返回: - 所有端点信息  # [English] ### Purpose: - Get all endpoints information ### Return: - All endpoints information
         * @summary 获取所有端点信息/Get all endpoints information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEndpointsInfoApiV1TikhubUserGetAllEndpointsInfoGet_2: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tikhub/user/get_all_endpoints_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取一个端点的信息 ### 参数: - endpoint: 请求的端点 ### 返回: - 端点信息  # [English] ### Purpose: - Get information of an endpoint ### Parameters: - endpoint: Requested endpoint ### Return: - Endpoint information
         * @summary 获取一个端点的信息/Get information of an endpoint
         * @param {string} endpoint 请求的端点/Requested endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEndpointInfoApiV1TikhubUserGetEndpointInfoGet: async (endpoint: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'endpoint' is not null or undefined
            if (endpoint === null || endpoint === undefined) {
                throw new RequiredError('endpoint','Required parameter endpoint was null or undefined when calling getEndpointInfoApiV1TikhubUserGetEndpointInfoGet.');
            }
            const localVarPath = `/api/v1/tikhub/user/get_endpoint_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (endpoint !== undefined) {
                localVarQueryParameter['endpoint'] = endpoint;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取一个端点的信息 ### 参数: - endpoint: 请求的端点 ### 返回: - 端点信息  # [English] ### Purpose: - Get information of an endpoint ### Parameters: - endpoint: Requested endpoint ### Return: - Endpoint information
         * @summary 获取一个端点的信息/Get information of an endpoint
         * @param {string} endpoint 请求的端点/Requested endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEndpointInfoApiV1TikhubUserGetEndpointInfoGet_3: async (endpoint: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'endpoint' is not null or undefined
            if (endpoint === null || endpoint === undefined) {
                throw new RequiredError('endpoint','Required parameter endpoint was null or undefined when calling getEndpointInfoApiV1TikhubUserGetEndpointInfoGet_3.');
            }
            const localVarPath = `/api/v1/tikhub/user/get_endpoint_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (endpoint !== undefined) {
                localVarQueryParameter['endpoint'] = endpoint;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取阶梯式折扣百分比信息 ### 返回: - 阶梯式折扣百分比信息  # [English] ### Purpose: - Get tiered discount percentage information ### Return: - Tiered discount percentage information
         * @summary 获取阶梯式折扣百分比信息/Get tiered discount percentage information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTieredDiscountInfoApiV1TikhubUserGetTieredDiscountInfoGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tikhub/user/get_tiered_discount_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取阶梯式折扣百分比信息 ### 返回: - 阶梯式折扣百分比信息  # [English] ### Purpose: - Get tiered discount percentage information ### Return: - Tiered discount percentage information
         * @summary 获取阶梯式折扣百分比信息/Get tiered discount percentage information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTieredDiscountInfoApiV1TikhubUserGetTieredDiscountInfoGet_4: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tikhub/user/get_tiered_discount_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户每日使用情况。 ### 参数: - 请求头：{\'Authorization\': \'Bearer API Key\'} ### 返回: - 用户每日使用情况  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account daily usage. ### Parameters: - Headers: {\'Authorization\': \'Bearer API Key\'} ### Return: - User daily usage
         * @summary 获取用户每日使用情况/Get user daily usage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDailyUsageApiV1TikhubUserGetUserDailyUsageGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tikhub/user/get_user_daily_usage`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户每日使用情况。 ### 参数: - 请求头：{\'Authorization\': \'Bearer API Key\'} ### 返回: - 用户每日使用情况  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account daily usage. ### Parameters: - Headers: {\'Authorization\': \'Bearer API Key\'} ### Return: - User daily usage
         * @summary 获取用户每日使用情况/Get user daily usage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDailyUsageApiV1TikhubUserGetUserDailyUsageGet_5: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tikhub/user/get_user_daily_usage`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户信息。 ### 参数: - 请求头：{\'Authorization\': \'Bearer API_KEY\'} ### 返回: - 用户信息  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account information. ### Parameters: - Headers: {\'Authorization\': \'Bearer API_KEY\'} ### Return: - User information  # [示例/Example] ```python response = {       \"code\": 200,       \"router\": \"/api/v1/tikhub/user/get_user_info\",       \"api_key_data\": {         \"api_key_name\": \"Develop Test\",         \"api_key_scopes\": [           \"/api/v1/tikhub/user/\"         ],         \"created_at\": \"2024-05-22T06:07:12.495520\",         \"expires_at\": null,         \"api_key_status\": 1       },       \"user_data\": {         \"email\": \"example@example.com\",         \"balance\": 100,         \"free_credit\": 100,         \"email_verified\": true,         \"account_disabled\": false,         \"is_active\": true       }     } ```
         * @summary 获取TikHub用户信息/Get TikHub user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoApiV1TikhubUserGetUserInfoGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tikhub/user/get_user_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户信息。 ### 参数: - 请求头：{\'Authorization\': \'Bearer API_KEY\'} ### 返回: - 用户信息  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account information. ### Parameters: - Headers: {\'Authorization\': \'Bearer API_KEY\'} ### Return: - User information  # [示例/Example] ```python response = {       \"code\": 200,       \"router\": \"/api/v1/tikhub/user/get_user_info\",       \"api_key_data\": {         \"api_key_name\": \"Develop Test\",         \"api_key_scopes\": [           \"/api/v1/tikhub/user/\"         ],         \"created_at\": \"2024-05-22T06:07:12.495520\",         \"expires_at\": null,         \"api_key_status\": 1       },       \"user_data\": {         \"email\": \"example@example.com\",         \"balance\": 100,         \"free_credit\": 100,         \"email_verified\": true,         \"account_disabled\": false,         \"is_active\": true       }     } ```
         * @summary 获取TikHub用户信息/Get TikHub user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoApiV1TikhubUserGetUserInfoGet_6: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tikhub/user/get_user_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TikHubUserAPIApi - functional programming interface
 * @export
 */
export const TikHubUserAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 根据用户输入的每日请求次数以及端点信息计算最终价格。 ### 参数: - endpoint: 请求的端点，用于查询端点的原始请求单价 - request_per_day: 每日请求次数，用于计算价格，将自动根据阶梯式计费的折扣百分比计算最终价格 ### 计算公式: - 总成本 = ∑ (阶梯内请求次数 * 阶梯折后单价) - 其中，阶梯折后单价 = 基础价格 * (1 - 折扣) ### 详细计算步骤: 1. **初始化总成本**：    总成本=0 2. **遍历每个阶梯**：    * 对于每个阶梯，计算该阶梯内的请求次数。    * 计算该阶梯内的折后单价。    * 计算该阶梯内的总费用，并累加到总成本中。    * 更新剩余的请求次数。 ### 数学表示: > 设有 𝑛 个阶梯，每个阶梯的参数为： * min_rpd𝑖: 第 𝑖 个阶梯的最小请求次数 * max_rpd𝑖: 第 𝑖 个阶梯的最大请求次数 * discount𝑖: 第 𝑖 个阶梯的折扣（百分比形式） * base_price：基础价格 * request_per_day：每日请求次数 > 那么，总成本的计算公式如下： - 总成本 = Σ𝑖=1𝑛（阶梯𝑖中的请求数量 * 阶梯𝑖中的折扣单价） - 其中，阶梯折扣单价 𝑖 = base_price * (1 - 折扣𝑖/100) - 该阶梯中的请求数 𝑖 = min(request_per_day - 累计付费请求数, max_rpd𝑖 - min_rpd𝑖) ### 示例 > 假设有以下定价阶梯： * 第 1 阶梯：0 ≤ rpd < 1000，折扣 0% * 第 2 阶梯：1000 ≤ rpd < 5000，折扣 10% * 第 3 阶梯：5000 ≤ rpd < 10000，折扣 20% * 第 4 阶梯：10000 ≤ rpd < 20000，折扣 30% * 第 5 阶梯：20000 ≤ rpd < 30000，折扣 40% * 第 6 阶梯：30000 ≤ rpd，折扣 50% > 假设基础价格为 0.001 USD，每日请求次数为 12000，则计算过程如下： 1. **第 1 阶梯**（0 ≤ rpd < 1000）：    * 阶梯内请求次数=1000−0=1000    * 阶梯折后单价=0.001×(1−0/100)=0.001    * 总成本=1000×0.001=1 2. **第 2 阶梯**（1000 ≤ rpd < 5000）：    * 阶梯内请求次数=5000−1000=4000    * 阶梯折后单价=0.001×(1−10/100)=0.0009    * 总成本=4000×0.0009=3.6 3. **第 3 阶梯**（5000 ≤ rpd < 10000）：    * 阶梯内请求次数=10000−5000=5000    * 阶梯折后单价=0.001×(1−20/100)=0.0008    * 总成本=5000×0.0008=4 4. **第 4 阶梯**（10000 ≤ rpd < 20000）：    * 阶梯内请求次数=12000−10000=2000    * 阶梯折后单价=0.001×(1−30/100)=0.0007    * 总成本=2000×0.0007=1.4 5. **累加总成本**：    * 总成本=1+3.6+4+1.4=10 ### 返回: - 端点uri - 每日请求次数 - 端点原始请求单价 - 总价格 - 货币单位 - 阶梯式计费的折扣百分比信息  # [English] ### Purpose: - Calculate the final price based on the user\'s input of the number of daily requests and endpoint information. - Price calculation formula: Price = Number of daily requests * (Original request unit price of the endpoint * (1 - discount percentage of tiered billing)) ### Parameters: - endpoint: Requested endpoint, used to query the original request unit price of the endpoint - request_per_day: Number of daily requests, used to calculate the price, the final price will be calculated automatically based on the discount percentage of the tiered billing ### Calculation formula: - Total cost = ∑ (Number of requests in the tier * Discounted unit price in the tier) - Where, Discounted unit price in the tier = Base price * (1 - Discount) ### Detailed calculation steps: 1. **Initialize the total cost**:      Total cost = 0 2. **Traverse each tier**:         * For each tier, calculate the number of requests in the tier.         * Calculate the discounted unit price in the tier.         * Calculate the total cost in the tier and add it to the total cost.         * Update the remaining number of requests. ### Mathematical representation: Suppose there are 𝑛 tiers, and the parameters of each tier are: * min_rpd𝑖: The minimum number of requests in the 𝑖-th tier * max_rpd𝑖: The maximum number of requests in the 𝑖-th tier * discount𝑖: The discount of the 𝑖-th tier (in percentage form) * base_price: Base price * request_per_day: Number of daily requests > Then, the formula for calculating the total cost is as follows: - Total cost = ∑𝑖=1𝑛(Number of requests in the tier 𝑖 * Discounted unit price in the tier 𝑖) - Where, Discounted unit price in the tier 𝑖 = base_price * (1 - discount𝑖/100) - Number of requests in the tier 𝑖 = min(request_per_day - accumulated number of paid requests, max_rpd𝑖 - min_rpd𝑖) ### Example Suppose there are the following pricing tiers: * Tier 1: 0 ≤ rpd < 1000, discount 0% * Tier 2: 1000 ≤ rpd < 5000, discount 10% * Tier 3: 5000 ≤ rpd < 10000, discount 20% * Tier 4: 10000 ≤ rpd < 20000, discount 30% * Tier 5: 20000 ≤ rpd < 30000, discount 40% * Tier 6: 30000 ≤ rpd, discount 50% > Suppose the base price is 0.001 USD and the number of daily requests is 12000, the calculation process is as follows: 1. **Tier 1** (0 ≤ rpd < 1000):      - Number of requests in the tier 1 = 1000 - 0 = 1000      - Discounted unit price in the tier 1 = 0.001 * (1 - 0/100) = 0.001      - Total cost 1 = 1000 * 0.001 = 1 2. **Tier 2** (1000 ≤ rpd < 5000):     - Number of requests in the tier 2 = 5000 - 1000 = 4000     - Discounted unit price in the tier 2 = 0.001 * (1 - 10/100) = 0.0009     - Total cost 2 = 4000 * 0.0009 = 3.6 3. **Tier 3** (5000 ≤ rpd < 10000):     - Number of requests in the tier 3 = 10000 - 5000 = 5000     - Discounted unit price in the tier 3 = 0.001 * (1 - 20/100) = 0.0008     - Total cost 3 = 5000 * 0.0008 = 4 4. **Tier 4** (10000 ≤ rpd < 20000):     - Number of requests in the tier 4 = 12000 - 10000 = 2000     - Discounted unit price in the tier 4 = 0.001 * (1 - 30/100) = 0.0007     - Total cost 4 = 2000 * 0.0007 = 1.4 5. **Accumulated total cost**:     - Total cost = 1 + 3.6 + 4 + 1.4 = 10 ### Return: - Endpoint uri - Number of daily requests - Original request unit price of the endpoint - Total price - Currency unit - Discount percentage information of tiered billing
         * @summary 计算价格/Calculate price
         * @param {string} endpoint 请求的端点/Requested endpoint
         * @param {number} [requestPerDay] 每日请求次数/Request per day
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculatePriceApiV1TikhubUserCalculatePriceGet(endpoint: string, requestPerDay?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikHubUserAPIApiAxiosParamCreator(configuration).calculatePriceApiV1TikhubUserCalculatePriceGet(endpoint, requestPerDay, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据用户输入的每日请求次数以及端点信息计算最终价格。 ### 参数: - endpoint: 请求的端点，用于查询端点的原始请求单价 - request_per_day: 每日请求次数，用于计算价格，将自动根据阶梯式计费的折扣百分比计算最终价格 ### 计算公式: - 总成本 = ∑ (阶梯内请求次数 * 阶梯折后单价) - 其中，阶梯折后单价 = 基础价格 * (1 - 折扣) ### 详细计算步骤: 1. **初始化总成本**：    总成本=0 2. **遍历每个阶梯**：    * 对于每个阶梯，计算该阶梯内的请求次数。    * 计算该阶梯内的折后单价。    * 计算该阶梯内的总费用，并累加到总成本中。    * 更新剩余的请求次数。 ### 数学表示: > 设有 𝑛 个阶梯，每个阶梯的参数为： * min_rpd𝑖: 第 𝑖 个阶梯的最小请求次数 * max_rpd𝑖: 第 𝑖 个阶梯的最大请求次数 * discount𝑖: 第 𝑖 个阶梯的折扣（百分比形式） * base_price：基础价格 * request_per_day：每日请求次数 > 那么，总成本的计算公式如下： - 总成本 = Σ𝑖=1𝑛（阶梯𝑖中的请求数量 * 阶梯𝑖中的折扣单价） - 其中，阶梯折扣单价 𝑖 = base_price * (1 - 折扣𝑖/100) - 该阶梯中的请求数 𝑖 = min(request_per_day - 累计付费请求数, max_rpd𝑖 - min_rpd𝑖) ### 示例 > 假设有以下定价阶梯： * 第 1 阶梯：0 ≤ rpd < 1000，折扣 0% * 第 2 阶梯：1000 ≤ rpd < 5000，折扣 10% * 第 3 阶梯：5000 ≤ rpd < 10000，折扣 20% * 第 4 阶梯：10000 ≤ rpd < 20000，折扣 30% * 第 5 阶梯：20000 ≤ rpd < 30000，折扣 40% * 第 6 阶梯：30000 ≤ rpd，折扣 50% > 假设基础价格为 0.001 USD，每日请求次数为 12000，则计算过程如下： 1. **第 1 阶梯**（0 ≤ rpd < 1000）：    * 阶梯内请求次数=1000−0=1000    * 阶梯折后单价=0.001×(1−0/100)=0.001    * 总成本=1000×0.001=1 2. **第 2 阶梯**（1000 ≤ rpd < 5000）：    * 阶梯内请求次数=5000−1000=4000    * 阶梯折后单价=0.001×(1−10/100)=0.0009    * 总成本=4000×0.0009=3.6 3. **第 3 阶梯**（5000 ≤ rpd < 10000）：    * 阶梯内请求次数=10000−5000=5000    * 阶梯折后单价=0.001×(1−20/100)=0.0008    * 总成本=5000×0.0008=4 4. **第 4 阶梯**（10000 ≤ rpd < 20000）：    * 阶梯内请求次数=12000−10000=2000    * 阶梯折后单价=0.001×(1−30/100)=0.0007    * 总成本=2000×0.0007=1.4 5. **累加总成本**：    * 总成本=1+3.6+4+1.4=10 ### 返回: - 端点uri - 每日请求次数 - 端点原始请求单价 - 总价格 - 货币单位 - 阶梯式计费的折扣百分比信息  # [English] ### Purpose: - Calculate the final price based on the user\'s input of the number of daily requests and endpoint information. - Price calculation formula: Price = Number of daily requests * (Original request unit price of the endpoint * (1 - discount percentage of tiered billing)) ### Parameters: - endpoint: Requested endpoint, used to query the original request unit price of the endpoint - request_per_day: Number of daily requests, used to calculate the price, the final price will be calculated automatically based on the discount percentage of the tiered billing ### Calculation formula: - Total cost = ∑ (Number of requests in the tier * Discounted unit price in the tier) - Where, Discounted unit price in the tier = Base price * (1 - Discount) ### Detailed calculation steps: 1. **Initialize the total cost**:      Total cost = 0 2. **Traverse each tier**:         * For each tier, calculate the number of requests in the tier.         * Calculate the discounted unit price in the tier.         * Calculate the total cost in the tier and add it to the total cost.         * Update the remaining number of requests. ### Mathematical representation: Suppose there are 𝑛 tiers, and the parameters of each tier are: * min_rpd𝑖: The minimum number of requests in the 𝑖-th tier * max_rpd𝑖: The maximum number of requests in the 𝑖-th tier * discount𝑖: The discount of the 𝑖-th tier (in percentage form) * base_price: Base price * request_per_day: Number of daily requests > Then, the formula for calculating the total cost is as follows: - Total cost = ∑𝑖=1𝑛(Number of requests in the tier 𝑖 * Discounted unit price in the tier 𝑖) - Where, Discounted unit price in the tier 𝑖 = base_price * (1 - discount𝑖/100) - Number of requests in the tier 𝑖 = min(request_per_day - accumulated number of paid requests, max_rpd𝑖 - min_rpd𝑖) ### Example Suppose there are the following pricing tiers: * Tier 1: 0 ≤ rpd < 1000, discount 0% * Tier 2: 1000 ≤ rpd < 5000, discount 10% * Tier 3: 5000 ≤ rpd < 10000, discount 20% * Tier 4: 10000 ≤ rpd < 20000, discount 30% * Tier 5: 20000 ≤ rpd < 30000, discount 40% * Tier 6: 30000 ≤ rpd, discount 50% > Suppose the base price is 0.001 USD and the number of daily requests is 12000, the calculation process is as follows: 1. **Tier 1** (0 ≤ rpd < 1000):      - Number of requests in the tier 1 = 1000 - 0 = 1000      - Discounted unit price in the tier 1 = 0.001 * (1 - 0/100) = 0.001      - Total cost 1 = 1000 * 0.001 = 1 2. **Tier 2** (1000 ≤ rpd < 5000):     - Number of requests in the tier 2 = 5000 - 1000 = 4000     - Discounted unit price in the tier 2 = 0.001 * (1 - 10/100) = 0.0009     - Total cost 2 = 4000 * 0.0009 = 3.6 3. **Tier 3** (5000 ≤ rpd < 10000):     - Number of requests in the tier 3 = 10000 - 5000 = 5000     - Discounted unit price in the tier 3 = 0.001 * (1 - 20/100) = 0.0008     - Total cost 3 = 5000 * 0.0008 = 4 4. **Tier 4** (10000 ≤ rpd < 20000):     - Number of requests in the tier 4 = 12000 - 10000 = 2000     - Discounted unit price in the tier 4 = 0.001 * (1 - 30/100) = 0.0007     - Total cost 4 = 2000 * 0.0007 = 1.4 5. **Accumulated total cost**:     - Total cost = 1 + 3.6 + 4 + 1.4 = 10 ### Return: - Endpoint uri - Number of daily requests - Original request unit price of the endpoint - Total price - Currency unit - Discount percentage information of tiered billing
         * @summary 计算价格/Calculate price
         * @param {string} endpoint 请求的端点/Requested endpoint
         * @param {number} [requestPerDay] 每日请求次数/Request per day
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async calculatePriceApiV1TikhubUserCalculatePriceGet_1(endpoint: string, requestPerDay?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikHubUserAPIApiAxiosParamCreator(configuration).calculatePriceApiV1TikhubUserCalculatePriceGet_1(endpoint, requestPerDay, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取所有端点信息 ### 返回: - 所有端点信息  # [English] ### Purpose: - Get all endpoints information ### Return: - All endpoints information
         * @summary 获取所有端点信息/Get all endpoints information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEndpointsInfoApiV1TikhubUserGetAllEndpointsInfoGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikHubUserAPIApiAxiosParamCreator(configuration).getAllEndpointsInfoApiV1TikhubUserGetAllEndpointsInfoGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取所有端点信息 ### 返回: - 所有端点信息  # [English] ### Purpose: - Get all endpoints information ### Return: - All endpoints information
         * @summary 获取所有端点信息/Get all endpoints information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllEndpointsInfoApiV1TikhubUserGetAllEndpointsInfoGet_2(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikHubUserAPIApiAxiosParamCreator(configuration).getAllEndpointsInfoApiV1TikhubUserGetAllEndpointsInfoGet_2(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取一个端点的信息 ### 参数: - endpoint: 请求的端点 ### 返回: - 端点信息  # [English] ### Purpose: - Get information of an endpoint ### Parameters: - endpoint: Requested endpoint ### Return: - Endpoint information
         * @summary 获取一个端点的信息/Get information of an endpoint
         * @param {string} endpoint 请求的端点/Requested endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEndpointInfoApiV1TikhubUserGetEndpointInfoGet(endpoint: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikHubUserAPIApiAxiosParamCreator(configuration).getEndpointInfoApiV1TikhubUserGetEndpointInfoGet(endpoint, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取一个端点的信息 ### 参数: - endpoint: 请求的端点 ### 返回: - 端点信息  # [English] ### Purpose: - Get information of an endpoint ### Parameters: - endpoint: Requested endpoint ### Return: - Endpoint information
         * @summary 获取一个端点的信息/Get information of an endpoint
         * @param {string} endpoint 请求的端点/Requested endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEndpointInfoApiV1TikhubUserGetEndpointInfoGet_3(endpoint: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikHubUserAPIApiAxiosParamCreator(configuration).getEndpointInfoApiV1TikhubUserGetEndpointInfoGet_3(endpoint, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取阶梯式折扣百分比信息 ### 返回: - 阶梯式折扣百分比信息  # [English] ### Purpose: - Get tiered discount percentage information ### Return: - Tiered discount percentage information
         * @summary 获取阶梯式折扣百分比信息/Get tiered discount percentage information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTieredDiscountInfoApiV1TikhubUserGetTieredDiscountInfoGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikHubUserAPIApiAxiosParamCreator(configuration).getTieredDiscountInfoApiV1TikhubUserGetTieredDiscountInfoGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取阶梯式折扣百分比信息 ### 返回: - 阶梯式折扣百分比信息  # [English] ### Purpose: - Get tiered discount percentage information ### Return: - Tiered discount percentage information
         * @summary 获取阶梯式折扣百分比信息/Get tiered discount percentage information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTieredDiscountInfoApiV1TikhubUserGetTieredDiscountInfoGet_4(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikHubUserAPIApiAxiosParamCreator(configuration).getTieredDiscountInfoApiV1TikhubUserGetTieredDiscountInfoGet_4(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户每日使用情况。 ### 参数: - 请求头：{\'Authorization\': \'Bearer API Key\'} ### 返回: - 用户每日使用情况  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account daily usage. ### Parameters: - Headers: {\'Authorization\': \'Bearer API Key\'} ### Return: - User daily usage
         * @summary 获取用户每日使用情况/Get user daily usage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserDailyUsageApiV1TikhubUserGetUserDailyUsageGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikHubUserAPIApiAxiosParamCreator(configuration).getUserDailyUsageApiV1TikhubUserGetUserDailyUsageGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户每日使用情况。 ### 参数: - 请求头：{\'Authorization\': \'Bearer API Key\'} ### 返回: - 用户每日使用情况  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account daily usage. ### Parameters: - Headers: {\'Authorization\': \'Bearer API Key\'} ### Return: - User daily usage
         * @summary 获取用户每日使用情况/Get user daily usage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserDailyUsageApiV1TikhubUserGetUserDailyUsageGet_5(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikHubUserAPIApiAxiosParamCreator(configuration).getUserDailyUsageApiV1TikhubUserGetUserDailyUsageGet_5(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户信息。 ### 参数: - 请求头：{\'Authorization\': \'Bearer API_KEY\'} ### 返回: - 用户信息  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account information. ### Parameters: - Headers: {\'Authorization\': \'Bearer API_KEY\'} ### Return: - User information  # [示例/Example] ```python response = {       \"code\": 200,       \"router\": \"/api/v1/tikhub/user/get_user_info\",       \"api_key_data\": {         \"api_key_name\": \"Develop Test\",         \"api_key_scopes\": [           \"/api/v1/tikhub/user/\"         ],         \"created_at\": \"2024-05-22T06:07:12.495520\",         \"expires_at\": null,         \"api_key_status\": 1       },       \"user_data\": {         \"email\": \"example@example.com\",         \"balance\": 100,         \"free_credit\": 100,         \"email_verified\": true,         \"account_disabled\": false,         \"is_active\": true       }     } ```
         * @summary 获取TikHub用户信息/Get TikHub user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfoApiV1TikhubUserGetUserInfoGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfoResponseModel>> {
            const localVarAxiosArgs = await TikHubUserAPIApiAxiosParamCreator(configuration).getUserInfoApiV1TikhubUserGetUserInfoGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户信息。 ### 参数: - 请求头：{\'Authorization\': \'Bearer API_KEY\'} ### 返回: - 用户信息  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account information. ### Parameters: - Headers: {\'Authorization\': \'Bearer API_KEY\'} ### Return: - User information  # [示例/Example] ```python response = {       \"code\": 200,       \"router\": \"/api/v1/tikhub/user/get_user_info\",       \"api_key_data\": {         \"api_key_name\": \"Develop Test\",         \"api_key_scopes\": [           \"/api/v1/tikhub/user/\"         ],         \"created_at\": \"2024-05-22T06:07:12.495520\",         \"expires_at\": null,         \"api_key_status\": 1       },       \"user_data\": {         \"email\": \"example@example.com\",         \"balance\": 100,         \"free_credit\": 100,         \"email_verified\": true,         \"account_disabled\": false,         \"is_active\": true       }     } ```
         * @summary 获取TikHub用户信息/Get TikHub user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfoApiV1TikhubUserGetUserInfoGet_6(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfoResponseModel>> {
            const localVarAxiosArgs = await TikHubUserAPIApiAxiosParamCreator(configuration).getUserInfoApiV1TikhubUserGetUserInfoGet_6(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TikHubUserAPIApi - factory interface
 * @export
 */
export const TikHubUserAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 根据用户输入的每日请求次数以及端点信息计算最终价格。 ### 参数: - endpoint: 请求的端点，用于查询端点的原始请求单价 - request_per_day: 每日请求次数，用于计算价格，将自动根据阶梯式计费的折扣百分比计算最终价格 ### 计算公式: - 总成本 = ∑ (阶梯内请求次数 * 阶梯折后单价) - 其中，阶梯折后单价 = 基础价格 * (1 - 折扣) ### 详细计算步骤: 1. **初始化总成本**：    总成本=0 2. **遍历每个阶梯**：    * 对于每个阶梯，计算该阶梯内的请求次数。    * 计算该阶梯内的折后单价。    * 计算该阶梯内的总费用，并累加到总成本中。    * 更新剩余的请求次数。 ### 数学表示: > 设有 𝑛 个阶梯，每个阶梯的参数为： * min_rpd𝑖: 第 𝑖 个阶梯的最小请求次数 * max_rpd𝑖: 第 𝑖 个阶梯的最大请求次数 * discount𝑖: 第 𝑖 个阶梯的折扣（百分比形式） * base_price：基础价格 * request_per_day：每日请求次数 > 那么，总成本的计算公式如下： - 总成本 = Σ𝑖=1𝑛（阶梯𝑖中的请求数量 * 阶梯𝑖中的折扣单价） - 其中，阶梯折扣单价 𝑖 = base_price * (1 - 折扣𝑖/100) - 该阶梯中的请求数 𝑖 = min(request_per_day - 累计付费请求数, max_rpd𝑖 - min_rpd𝑖) ### 示例 > 假设有以下定价阶梯： * 第 1 阶梯：0 ≤ rpd < 1000，折扣 0% * 第 2 阶梯：1000 ≤ rpd < 5000，折扣 10% * 第 3 阶梯：5000 ≤ rpd < 10000，折扣 20% * 第 4 阶梯：10000 ≤ rpd < 20000，折扣 30% * 第 5 阶梯：20000 ≤ rpd < 30000，折扣 40% * 第 6 阶梯：30000 ≤ rpd，折扣 50% > 假设基础价格为 0.001 USD，每日请求次数为 12000，则计算过程如下： 1. **第 1 阶梯**（0 ≤ rpd < 1000）：    * 阶梯内请求次数=1000−0=1000    * 阶梯折后单价=0.001×(1−0/100)=0.001    * 总成本=1000×0.001=1 2. **第 2 阶梯**（1000 ≤ rpd < 5000）：    * 阶梯内请求次数=5000−1000=4000    * 阶梯折后单价=0.001×(1−10/100)=0.0009    * 总成本=4000×0.0009=3.6 3. **第 3 阶梯**（5000 ≤ rpd < 10000）：    * 阶梯内请求次数=10000−5000=5000    * 阶梯折后单价=0.001×(1−20/100)=0.0008    * 总成本=5000×0.0008=4 4. **第 4 阶梯**（10000 ≤ rpd < 20000）：    * 阶梯内请求次数=12000−10000=2000    * 阶梯折后单价=0.001×(1−30/100)=0.0007    * 总成本=2000×0.0007=1.4 5. **累加总成本**：    * 总成本=1+3.6+4+1.4=10 ### 返回: - 端点uri - 每日请求次数 - 端点原始请求单价 - 总价格 - 货币单位 - 阶梯式计费的折扣百分比信息  # [English] ### Purpose: - Calculate the final price based on the user\'s input of the number of daily requests and endpoint information. - Price calculation formula: Price = Number of daily requests * (Original request unit price of the endpoint * (1 - discount percentage of tiered billing)) ### Parameters: - endpoint: Requested endpoint, used to query the original request unit price of the endpoint - request_per_day: Number of daily requests, used to calculate the price, the final price will be calculated automatically based on the discount percentage of the tiered billing ### Calculation formula: - Total cost = ∑ (Number of requests in the tier * Discounted unit price in the tier) - Where, Discounted unit price in the tier = Base price * (1 - Discount) ### Detailed calculation steps: 1. **Initialize the total cost**:      Total cost = 0 2. **Traverse each tier**:         * For each tier, calculate the number of requests in the tier.         * Calculate the discounted unit price in the tier.         * Calculate the total cost in the tier and add it to the total cost.         * Update the remaining number of requests. ### Mathematical representation: Suppose there are 𝑛 tiers, and the parameters of each tier are: * min_rpd𝑖: The minimum number of requests in the 𝑖-th tier * max_rpd𝑖: The maximum number of requests in the 𝑖-th tier * discount𝑖: The discount of the 𝑖-th tier (in percentage form) * base_price: Base price * request_per_day: Number of daily requests > Then, the formula for calculating the total cost is as follows: - Total cost = ∑𝑖=1𝑛(Number of requests in the tier 𝑖 * Discounted unit price in the tier 𝑖) - Where, Discounted unit price in the tier 𝑖 = base_price * (1 - discount𝑖/100) - Number of requests in the tier 𝑖 = min(request_per_day - accumulated number of paid requests, max_rpd𝑖 - min_rpd𝑖) ### Example Suppose there are the following pricing tiers: * Tier 1: 0 ≤ rpd < 1000, discount 0% * Tier 2: 1000 ≤ rpd < 5000, discount 10% * Tier 3: 5000 ≤ rpd < 10000, discount 20% * Tier 4: 10000 ≤ rpd < 20000, discount 30% * Tier 5: 20000 ≤ rpd < 30000, discount 40% * Tier 6: 30000 ≤ rpd, discount 50% > Suppose the base price is 0.001 USD and the number of daily requests is 12000, the calculation process is as follows: 1. **Tier 1** (0 ≤ rpd < 1000):      - Number of requests in the tier 1 = 1000 - 0 = 1000      - Discounted unit price in the tier 1 = 0.001 * (1 - 0/100) = 0.001      - Total cost 1 = 1000 * 0.001 = 1 2. **Tier 2** (1000 ≤ rpd < 5000):     - Number of requests in the tier 2 = 5000 - 1000 = 4000     - Discounted unit price in the tier 2 = 0.001 * (1 - 10/100) = 0.0009     - Total cost 2 = 4000 * 0.0009 = 3.6 3. **Tier 3** (5000 ≤ rpd < 10000):     - Number of requests in the tier 3 = 10000 - 5000 = 5000     - Discounted unit price in the tier 3 = 0.001 * (1 - 20/100) = 0.0008     - Total cost 3 = 5000 * 0.0008 = 4 4. **Tier 4** (10000 ≤ rpd < 20000):     - Number of requests in the tier 4 = 12000 - 10000 = 2000     - Discounted unit price in the tier 4 = 0.001 * (1 - 30/100) = 0.0007     - Total cost 4 = 2000 * 0.0007 = 1.4 5. **Accumulated total cost**:     - Total cost = 1 + 3.6 + 4 + 1.4 = 10 ### Return: - Endpoint uri - Number of daily requests - Original request unit price of the endpoint - Total price - Currency unit - Discount percentage information of tiered billing
         * @summary 计算价格/Calculate price
         * @param {string} endpoint 请求的端点/Requested endpoint
         * @param {number} [requestPerDay] 每日请求次数/Request per day
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculatePriceApiV1TikhubUserCalculatePriceGet(endpoint: string, requestPerDay?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikHubUserAPIApiFp(configuration).calculatePriceApiV1TikhubUserCalculatePriceGet(endpoint, requestPerDay, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据用户输入的每日请求次数以及端点信息计算最终价格。 ### 参数: - endpoint: 请求的端点，用于查询端点的原始请求单价 - request_per_day: 每日请求次数，用于计算价格，将自动根据阶梯式计费的折扣百分比计算最终价格 ### 计算公式: - 总成本 = ∑ (阶梯内请求次数 * 阶梯折后单价) - 其中，阶梯折后单价 = 基础价格 * (1 - 折扣) ### 详细计算步骤: 1. **初始化总成本**：    总成本=0 2. **遍历每个阶梯**：    * 对于每个阶梯，计算该阶梯内的请求次数。    * 计算该阶梯内的折后单价。    * 计算该阶梯内的总费用，并累加到总成本中。    * 更新剩余的请求次数。 ### 数学表示: > 设有 𝑛 个阶梯，每个阶梯的参数为： * min_rpd𝑖: 第 𝑖 个阶梯的最小请求次数 * max_rpd𝑖: 第 𝑖 个阶梯的最大请求次数 * discount𝑖: 第 𝑖 个阶梯的折扣（百分比形式） * base_price：基础价格 * request_per_day：每日请求次数 > 那么，总成本的计算公式如下： - 总成本 = Σ𝑖=1𝑛（阶梯𝑖中的请求数量 * 阶梯𝑖中的折扣单价） - 其中，阶梯折扣单价 𝑖 = base_price * (1 - 折扣𝑖/100) - 该阶梯中的请求数 𝑖 = min(request_per_day - 累计付费请求数, max_rpd𝑖 - min_rpd𝑖) ### 示例 > 假设有以下定价阶梯： * 第 1 阶梯：0 ≤ rpd < 1000，折扣 0% * 第 2 阶梯：1000 ≤ rpd < 5000，折扣 10% * 第 3 阶梯：5000 ≤ rpd < 10000，折扣 20% * 第 4 阶梯：10000 ≤ rpd < 20000，折扣 30% * 第 5 阶梯：20000 ≤ rpd < 30000，折扣 40% * 第 6 阶梯：30000 ≤ rpd，折扣 50% > 假设基础价格为 0.001 USD，每日请求次数为 12000，则计算过程如下： 1. **第 1 阶梯**（0 ≤ rpd < 1000）：    * 阶梯内请求次数=1000−0=1000    * 阶梯折后单价=0.001×(1−0/100)=0.001    * 总成本=1000×0.001=1 2. **第 2 阶梯**（1000 ≤ rpd < 5000）：    * 阶梯内请求次数=5000−1000=4000    * 阶梯折后单价=0.001×(1−10/100)=0.0009    * 总成本=4000×0.0009=3.6 3. **第 3 阶梯**（5000 ≤ rpd < 10000）：    * 阶梯内请求次数=10000−5000=5000    * 阶梯折后单价=0.001×(1−20/100)=0.0008    * 总成本=5000×0.0008=4 4. **第 4 阶梯**（10000 ≤ rpd < 20000）：    * 阶梯内请求次数=12000−10000=2000    * 阶梯折后单价=0.001×(1−30/100)=0.0007    * 总成本=2000×0.0007=1.4 5. **累加总成本**：    * 总成本=1+3.6+4+1.4=10 ### 返回: - 端点uri - 每日请求次数 - 端点原始请求单价 - 总价格 - 货币单位 - 阶梯式计费的折扣百分比信息  # [English] ### Purpose: - Calculate the final price based on the user\'s input of the number of daily requests and endpoint information. - Price calculation formula: Price = Number of daily requests * (Original request unit price of the endpoint * (1 - discount percentage of tiered billing)) ### Parameters: - endpoint: Requested endpoint, used to query the original request unit price of the endpoint - request_per_day: Number of daily requests, used to calculate the price, the final price will be calculated automatically based on the discount percentage of the tiered billing ### Calculation formula: - Total cost = ∑ (Number of requests in the tier * Discounted unit price in the tier) - Where, Discounted unit price in the tier = Base price * (1 - Discount) ### Detailed calculation steps: 1. **Initialize the total cost**:      Total cost = 0 2. **Traverse each tier**:         * For each tier, calculate the number of requests in the tier.         * Calculate the discounted unit price in the tier.         * Calculate the total cost in the tier and add it to the total cost.         * Update the remaining number of requests. ### Mathematical representation: Suppose there are 𝑛 tiers, and the parameters of each tier are: * min_rpd𝑖: The minimum number of requests in the 𝑖-th tier * max_rpd𝑖: The maximum number of requests in the 𝑖-th tier * discount𝑖: The discount of the 𝑖-th tier (in percentage form) * base_price: Base price * request_per_day: Number of daily requests > Then, the formula for calculating the total cost is as follows: - Total cost = ∑𝑖=1𝑛(Number of requests in the tier 𝑖 * Discounted unit price in the tier 𝑖) - Where, Discounted unit price in the tier 𝑖 = base_price * (1 - discount𝑖/100) - Number of requests in the tier 𝑖 = min(request_per_day - accumulated number of paid requests, max_rpd𝑖 - min_rpd𝑖) ### Example Suppose there are the following pricing tiers: * Tier 1: 0 ≤ rpd < 1000, discount 0% * Tier 2: 1000 ≤ rpd < 5000, discount 10% * Tier 3: 5000 ≤ rpd < 10000, discount 20% * Tier 4: 10000 ≤ rpd < 20000, discount 30% * Tier 5: 20000 ≤ rpd < 30000, discount 40% * Tier 6: 30000 ≤ rpd, discount 50% > Suppose the base price is 0.001 USD and the number of daily requests is 12000, the calculation process is as follows: 1. **Tier 1** (0 ≤ rpd < 1000):      - Number of requests in the tier 1 = 1000 - 0 = 1000      - Discounted unit price in the tier 1 = 0.001 * (1 - 0/100) = 0.001      - Total cost 1 = 1000 * 0.001 = 1 2. **Tier 2** (1000 ≤ rpd < 5000):     - Number of requests in the tier 2 = 5000 - 1000 = 4000     - Discounted unit price in the tier 2 = 0.001 * (1 - 10/100) = 0.0009     - Total cost 2 = 4000 * 0.0009 = 3.6 3. **Tier 3** (5000 ≤ rpd < 10000):     - Number of requests in the tier 3 = 10000 - 5000 = 5000     - Discounted unit price in the tier 3 = 0.001 * (1 - 20/100) = 0.0008     - Total cost 3 = 5000 * 0.0008 = 4 4. **Tier 4** (10000 ≤ rpd < 20000):     - Number of requests in the tier 4 = 12000 - 10000 = 2000     - Discounted unit price in the tier 4 = 0.001 * (1 - 30/100) = 0.0007     - Total cost 4 = 2000 * 0.0007 = 1.4 5. **Accumulated total cost**:     - Total cost = 1 + 3.6 + 4 + 1.4 = 10 ### Return: - Endpoint uri - Number of daily requests - Original request unit price of the endpoint - Total price - Currency unit - Discount percentage information of tiered billing
         * @summary 计算价格/Calculate price
         * @param {string} endpoint 请求的端点/Requested endpoint
         * @param {number} [requestPerDay] 每日请求次数/Request per day
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        calculatePriceApiV1TikhubUserCalculatePriceGet_1(endpoint: string, requestPerDay?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikHubUserAPIApiFp(configuration).calculatePriceApiV1TikhubUserCalculatePriceGet_1(endpoint, requestPerDay, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取所有端点信息 ### 返回: - 所有端点信息  # [English] ### Purpose: - Get all endpoints information ### Return: - All endpoints information
         * @summary 获取所有端点信息/Get all endpoints information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEndpointsInfoApiV1TikhubUserGetAllEndpointsInfoGet(options?: any): AxiosPromise<ResponseModel> {
            return TikHubUserAPIApiFp(configuration).getAllEndpointsInfoApiV1TikhubUserGetAllEndpointsInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取所有端点信息 ### 返回: - 所有端点信息  # [English] ### Purpose: - Get all endpoints information ### Return: - All endpoints information
         * @summary 获取所有端点信息/Get all endpoints information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEndpointsInfoApiV1TikhubUserGetAllEndpointsInfoGet_2(options?: any): AxiosPromise<ResponseModel> {
            return TikHubUserAPIApiFp(configuration).getAllEndpointsInfoApiV1TikhubUserGetAllEndpointsInfoGet_2(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取一个端点的信息 ### 参数: - endpoint: 请求的端点 ### 返回: - 端点信息  # [English] ### Purpose: - Get information of an endpoint ### Parameters: - endpoint: Requested endpoint ### Return: - Endpoint information
         * @summary 获取一个端点的信息/Get information of an endpoint
         * @param {string} endpoint 请求的端点/Requested endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEndpointInfoApiV1TikhubUserGetEndpointInfoGet(endpoint: string, options?: any): AxiosPromise<ResponseModel> {
            return TikHubUserAPIApiFp(configuration).getEndpointInfoApiV1TikhubUserGetEndpointInfoGet(endpoint, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取一个端点的信息 ### 参数: - endpoint: 请求的端点 ### 返回: - 端点信息  # [English] ### Purpose: - Get information of an endpoint ### Parameters: - endpoint: Requested endpoint ### Return: - Endpoint information
         * @summary 获取一个端点的信息/Get information of an endpoint
         * @param {string} endpoint 请求的端点/Requested endpoint
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEndpointInfoApiV1TikhubUserGetEndpointInfoGet_3(endpoint: string, options?: any): AxiosPromise<ResponseModel> {
            return TikHubUserAPIApiFp(configuration).getEndpointInfoApiV1TikhubUserGetEndpointInfoGet_3(endpoint, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取阶梯式折扣百分比信息 ### 返回: - 阶梯式折扣百分比信息  # [English] ### Purpose: - Get tiered discount percentage information ### Return: - Tiered discount percentage information
         * @summary 获取阶梯式折扣百分比信息/Get tiered discount percentage information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTieredDiscountInfoApiV1TikhubUserGetTieredDiscountInfoGet(options?: any): AxiosPromise<ResponseModel> {
            return TikHubUserAPIApiFp(configuration).getTieredDiscountInfoApiV1TikhubUserGetTieredDiscountInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取阶梯式折扣百分比信息 ### 返回: - 阶梯式折扣百分比信息  # [English] ### Purpose: - Get tiered discount percentage information ### Return: - Tiered discount percentage information
         * @summary 获取阶梯式折扣百分比信息/Get tiered discount percentage information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTieredDiscountInfoApiV1TikhubUserGetTieredDiscountInfoGet_4(options?: any): AxiosPromise<ResponseModel> {
            return TikHubUserAPIApiFp(configuration).getTieredDiscountInfoApiV1TikhubUserGetTieredDiscountInfoGet_4(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户每日使用情况。 ### 参数: - 请求头：{\'Authorization\': \'Bearer API Key\'} ### 返回: - 用户每日使用情况  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account daily usage. ### Parameters: - Headers: {\'Authorization\': \'Bearer API Key\'} ### Return: - User daily usage
         * @summary 获取用户每日使用情况/Get user daily usage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDailyUsageApiV1TikhubUserGetUserDailyUsageGet(options?: any): AxiosPromise<ResponseModel> {
            return TikHubUserAPIApiFp(configuration).getUserDailyUsageApiV1TikhubUserGetUserDailyUsageGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户每日使用情况。 ### 参数: - 请求头：{\'Authorization\': \'Bearer API Key\'} ### 返回: - 用户每日使用情况  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account daily usage. ### Parameters: - Headers: {\'Authorization\': \'Bearer API Key\'} ### Return: - User daily usage
         * @summary 获取用户每日使用情况/Get user daily usage
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDailyUsageApiV1TikhubUserGetUserDailyUsageGet_5(options?: any): AxiosPromise<ResponseModel> {
            return TikHubUserAPIApiFp(configuration).getUserDailyUsageApiV1TikhubUserGetUserDailyUsageGet_5(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户信息。 ### 参数: - 请求头：{\'Authorization\': \'Bearer API_KEY\'} ### 返回: - 用户信息  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account information. ### Parameters: - Headers: {\'Authorization\': \'Bearer API_KEY\'} ### Return: - User information  # [示例/Example] ```python response = {       \"code\": 200,       \"router\": \"/api/v1/tikhub/user/get_user_info\",       \"api_key_data\": {         \"api_key_name\": \"Develop Test\",         \"api_key_scopes\": [           \"/api/v1/tikhub/user/\"         ],         \"created_at\": \"2024-05-22T06:07:12.495520\",         \"expires_at\": null,         \"api_key_status\": 1       },       \"user_data\": {         \"email\": \"example@example.com\",         \"balance\": 100,         \"free_credit\": 100,         \"email_verified\": true,         \"account_disabled\": false,         \"is_active\": true       }     } ```
         * @summary 获取TikHub用户信息/Get TikHub user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoApiV1TikhubUserGetUserInfoGet(options?: any): AxiosPromise<UserInfoResponseModel> {
            return TikHubUserAPIApiFp(configuration).getUserInfoApiV1TikhubUserGetUserInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户信息。 ### 参数: - 请求头：{\'Authorization\': \'Bearer API_KEY\'} ### 返回: - 用户信息  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account information. ### Parameters: - Headers: {\'Authorization\': \'Bearer API_KEY\'} ### Return: - User information  # [示例/Example] ```python response = {       \"code\": 200,       \"router\": \"/api/v1/tikhub/user/get_user_info\",       \"api_key_data\": {         \"api_key_name\": \"Develop Test\",         \"api_key_scopes\": [           \"/api/v1/tikhub/user/\"         ],         \"created_at\": \"2024-05-22T06:07:12.495520\",         \"expires_at\": null,         \"api_key_status\": 1       },       \"user_data\": {         \"email\": \"example@example.com\",         \"balance\": 100,         \"free_credit\": 100,         \"email_verified\": true,         \"account_disabled\": false,         \"is_active\": true       }     } ```
         * @summary 获取TikHub用户信息/Get TikHub user info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoApiV1TikhubUserGetUserInfoGet_6(options?: any): AxiosPromise<UserInfoResponseModel> {
            return TikHubUserAPIApiFp(configuration).getUserInfoApiV1TikhubUserGetUserInfoGet_6(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TikHubUserAPIApi - interface
 * @export
 * @interface TikHubUserAPIApi
 */
export interface TikHubUserAPIApiInterface {
    /**
     * # [中文] ### 用途: - 根据用户输入的每日请求次数以及端点信息计算最终价格。 ### 参数: - endpoint: 请求的端点，用于查询端点的原始请求单价 - request_per_day: 每日请求次数，用于计算价格，将自动根据阶梯式计费的折扣百分比计算最终价格 ### 计算公式: - 总成本 = ∑ (阶梯内请求次数 * 阶梯折后单价) - 其中，阶梯折后单价 = 基础价格 * (1 - 折扣) ### 详细计算步骤: 1. **初始化总成本**：    总成本=0 2. **遍历每个阶梯**：    * 对于每个阶梯，计算该阶梯内的请求次数。    * 计算该阶梯内的折后单价。    * 计算该阶梯内的总费用，并累加到总成本中。    * 更新剩余的请求次数。 ### 数学表示: > 设有 𝑛 个阶梯，每个阶梯的参数为： * min_rpd𝑖: 第 𝑖 个阶梯的最小请求次数 * max_rpd𝑖: 第 𝑖 个阶梯的最大请求次数 * discount𝑖: 第 𝑖 个阶梯的折扣（百分比形式） * base_price：基础价格 * request_per_day：每日请求次数 > 那么，总成本的计算公式如下： - 总成本 = Σ𝑖=1𝑛（阶梯𝑖中的请求数量 * 阶梯𝑖中的折扣单价） - 其中，阶梯折扣单价 𝑖 = base_price * (1 - 折扣𝑖/100) - 该阶梯中的请求数 𝑖 = min(request_per_day - 累计付费请求数, max_rpd𝑖 - min_rpd𝑖) ### 示例 > 假设有以下定价阶梯： * 第 1 阶梯：0 ≤ rpd < 1000，折扣 0% * 第 2 阶梯：1000 ≤ rpd < 5000，折扣 10% * 第 3 阶梯：5000 ≤ rpd < 10000，折扣 20% * 第 4 阶梯：10000 ≤ rpd < 20000，折扣 30% * 第 5 阶梯：20000 ≤ rpd < 30000，折扣 40% * 第 6 阶梯：30000 ≤ rpd，折扣 50% > 假设基础价格为 0.001 USD，每日请求次数为 12000，则计算过程如下： 1. **第 1 阶梯**（0 ≤ rpd < 1000）：    * 阶梯内请求次数=1000−0=1000    * 阶梯折后单价=0.001×(1−0/100)=0.001    * 总成本=1000×0.001=1 2. **第 2 阶梯**（1000 ≤ rpd < 5000）：    * 阶梯内请求次数=5000−1000=4000    * 阶梯折后单价=0.001×(1−10/100)=0.0009    * 总成本=4000×0.0009=3.6 3. **第 3 阶梯**（5000 ≤ rpd < 10000）：    * 阶梯内请求次数=10000−5000=5000    * 阶梯折后单价=0.001×(1−20/100)=0.0008    * 总成本=5000×0.0008=4 4. **第 4 阶梯**（10000 ≤ rpd < 20000）：    * 阶梯内请求次数=12000−10000=2000    * 阶梯折后单价=0.001×(1−30/100)=0.0007    * 总成本=2000×0.0007=1.4 5. **累加总成本**：    * 总成本=1+3.6+4+1.4=10 ### 返回: - 端点uri - 每日请求次数 - 端点原始请求单价 - 总价格 - 货币单位 - 阶梯式计费的折扣百分比信息  # [English] ### Purpose: - Calculate the final price based on the user\'s input of the number of daily requests and endpoint information. - Price calculation formula: Price = Number of daily requests * (Original request unit price of the endpoint * (1 - discount percentage of tiered billing)) ### Parameters: - endpoint: Requested endpoint, used to query the original request unit price of the endpoint - request_per_day: Number of daily requests, used to calculate the price, the final price will be calculated automatically based on the discount percentage of the tiered billing ### Calculation formula: - Total cost = ∑ (Number of requests in the tier * Discounted unit price in the tier) - Where, Discounted unit price in the tier = Base price * (1 - Discount) ### Detailed calculation steps: 1. **Initialize the total cost**:      Total cost = 0 2. **Traverse each tier**:         * For each tier, calculate the number of requests in the tier.         * Calculate the discounted unit price in the tier.         * Calculate the total cost in the tier and add it to the total cost.         * Update the remaining number of requests. ### Mathematical representation: Suppose there are 𝑛 tiers, and the parameters of each tier are: * min_rpd𝑖: The minimum number of requests in the 𝑖-th tier * max_rpd𝑖: The maximum number of requests in the 𝑖-th tier * discount𝑖: The discount of the 𝑖-th tier (in percentage form) * base_price: Base price * request_per_day: Number of daily requests > Then, the formula for calculating the total cost is as follows: - Total cost = ∑𝑖=1𝑛(Number of requests in the tier 𝑖 * Discounted unit price in the tier 𝑖) - Where, Discounted unit price in the tier 𝑖 = base_price * (1 - discount𝑖/100) - Number of requests in the tier 𝑖 = min(request_per_day - accumulated number of paid requests, max_rpd𝑖 - min_rpd𝑖) ### Example Suppose there are the following pricing tiers: * Tier 1: 0 ≤ rpd < 1000, discount 0% * Tier 2: 1000 ≤ rpd < 5000, discount 10% * Tier 3: 5000 ≤ rpd < 10000, discount 20% * Tier 4: 10000 ≤ rpd < 20000, discount 30% * Tier 5: 20000 ≤ rpd < 30000, discount 40% * Tier 6: 30000 ≤ rpd, discount 50% > Suppose the base price is 0.001 USD and the number of daily requests is 12000, the calculation process is as follows: 1. **Tier 1** (0 ≤ rpd < 1000):      - Number of requests in the tier 1 = 1000 - 0 = 1000      - Discounted unit price in the tier 1 = 0.001 * (1 - 0/100) = 0.001      - Total cost 1 = 1000 * 0.001 = 1 2. **Tier 2** (1000 ≤ rpd < 5000):     - Number of requests in the tier 2 = 5000 - 1000 = 4000     - Discounted unit price in the tier 2 = 0.001 * (1 - 10/100) = 0.0009     - Total cost 2 = 4000 * 0.0009 = 3.6 3. **Tier 3** (5000 ≤ rpd < 10000):     - Number of requests in the tier 3 = 10000 - 5000 = 5000     - Discounted unit price in the tier 3 = 0.001 * (1 - 20/100) = 0.0008     - Total cost 3 = 5000 * 0.0008 = 4 4. **Tier 4** (10000 ≤ rpd < 20000):     - Number of requests in the tier 4 = 12000 - 10000 = 2000     - Discounted unit price in the tier 4 = 0.001 * (1 - 30/100) = 0.0007     - Total cost 4 = 2000 * 0.0007 = 1.4 5. **Accumulated total cost**:     - Total cost = 1 + 3.6 + 4 + 1.4 = 10 ### Return: - Endpoint uri - Number of daily requests - Original request unit price of the endpoint - Total price - Currency unit - Discount percentage information of tiered billing
     * @summary 计算价格/Calculate price
     * @param {string} endpoint 请求的端点/Requested endpoint
     * @param {number} [requestPerDay] 每日请求次数/Request per day
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApiInterface
     */
    calculatePriceApiV1TikhubUserCalculatePriceGet(endpoint: string, requestPerDay?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据用户输入的每日请求次数以及端点信息计算最终价格。 ### 参数: - endpoint: 请求的端点，用于查询端点的原始请求单价 - request_per_day: 每日请求次数，用于计算价格，将自动根据阶梯式计费的折扣百分比计算最终价格 ### 计算公式: - 总成本 = ∑ (阶梯内请求次数 * 阶梯折后单价) - 其中，阶梯折后单价 = 基础价格 * (1 - 折扣) ### 详细计算步骤: 1. **初始化总成本**：    总成本=0 2. **遍历每个阶梯**：    * 对于每个阶梯，计算该阶梯内的请求次数。    * 计算该阶梯内的折后单价。    * 计算该阶梯内的总费用，并累加到总成本中。    * 更新剩余的请求次数。 ### 数学表示: > 设有 𝑛 个阶梯，每个阶梯的参数为： * min_rpd𝑖: 第 𝑖 个阶梯的最小请求次数 * max_rpd𝑖: 第 𝑖 个阶梯的最大请求次数 * discount𝑖: 第 𝑖 个阶梯的折扣（百分比形式） * base_price：基础价格 * request_per_day：每日请求次数 > 那么，总成本的计算公式如下： - 总成本 = Σ𝑖=1𝑛（阶梯𝑖中的请求数量 * 阶梯𝑖中的折扣单价） - 其中，阶梯折扣单价 𝑖 = base_price * (1 - 折扣𝑖/100) - 该阶梯中的请求数 𝑖 = min(request_per_day - 累计付费请求数, max_rpd𝑖 - min_rpd𝑖) ### 示例 > 假设有以下定价阶梯： * 第 1 阶梯：0 ≤ rpd < 1000，折扣 0% * 第 2 阶梯：1000 ≤ rpd < 5000，折扣 10% * 第 3 阶梯：5000 ≤ rpd < 10000，折扣 20% * 第 4 阶梯：10000 ≤ rpd < 20000，折扣 30% * 第 5 阶梯：20000 ≤ rpd < 30000，折扣 40% * 第 6 阶梯：30000 ≤ rpd，折扣 50% > 假设基础价格为 0.001 USD，每日请求次数为 12000，则计算过程如下： 1. **第 1 阶梯**（0 ≤ rpd < 1000）：    * 阶梯内请求次数=1000−0=1000    * 阶梯折后单价=0.001×(1−0/100)=0.001    * 总成本=1000×0.001=1 2. **第 2 阶梯**（1000 ≤ rpd < 5000）：    * 阶梯内请求次数=5000−1000=4000    * 阶梯折后单价=0.001×(1−10/100)=0.0009    * 总成本=4000×0.0009=3.6 3. **第 3 阶梯**（5000 ≤ rpd < 10000）：    * 阶梯内请求次数=10000−5000=5000    * 阶梯折后单价=0.001×(1−20/100)=0.0008    * 总成本=5000×0.0008=4 4. **第 4 阶梯**（10000 ≤ rpd < 20000）：    * 阶梯内请求次数=12000−10000=2000    * 阶梯折后单价=0.001×(1−30/100)=0.0007    * 总成本=2000×0.0007=1.4 5. **累加总成本**：    * 总成本=1+3.6+4+1.4=10 ### 返回: - 端点uri - 每日请求次数 - 端点原始请求单价 - 总价格 - 货币单位 - 阶梯式计费的折扣百分比信息  # [English] ### Purpose: - Calculate the final price based on the user\'s input of the number of daily requests and endpoint information. - Price calculation formula: Price = Number of daily requests * (Original request unit price of the endpoint * (1 - discount percentage of tiered billing)) ### Parameters: - endpoint: Requested endpoint, used to query the original request unit price of the endpoint - request_per_day: Number of daily requests, used to calculate the price, the final price will be calculated automatically based on the discount percentage of the tiered billing ### Calculation formula: - Total cost = ∑ (Number of requests in the tier * Discounted unit price in the tier) - Where, Discounted unit price in the tier = Base price * (1 - Discount) ### Detailed calculation steps: 1. **Initialize the total cost**:      Total cost = 0 2. **Traverse each tier**:         * For each tier, calculate the number of requests in the tier.         * Calculate the discounted unit price in the tier.         * Calculate the total cost in the tier and add it to the total cost.         * Update the remaining number of requests. ### Mathematical representation: Suppose there are 𝑛 tiers, and the parameters of each tier are: * min_rpd𝑖: The minimum number of requests in the 𝑖-th tier * max_rpd𝑖: The maximum number of requests in the 𝑖-th tier * discount𝑖: The discount of the 𝑖-th tier (in percentage form) * base_price: Base price * request_per_day: Number of daily requests > Then, the formula for calculating the total cost is as follows: - Total cost = ∑𝑖=1𝑛(Number of requests in the tier 𝑖 * Discounted unit price in the tier 𝑖) - Where, Discounted unit price in the tier 𝑖 = base_price * (1 - discount𝑖/100) - Number of requests in the tier 𝑖 = min(request_per_day - accumulated number of paid requests, max_rpd𝑖 - min_rpd𝑖) ### Example Suppose there are the following pricing tiers: * Tier 1: 0 ≤ rpd < 1000, discount 0% * Tier 2: 1000 ≤ rpd < 5000, discount 10% * Tier 3: 5000 ≤ rpd < 10000, discount 20% * Tier 4: 10000 ≤ rpd < 20000, discount 30% * Tier 5: 20000 ≤ rpd < 30000, discount 40% * Tier 6: 30000 ≤ rpd, discount 50% > Suppose the base price is 0.001 USD and the number of daily requests is 12000, the calculation process is as follows: 1. **Tier 1** (0 ≤ rpd < 1000):      - Number of requests in the tier 1 = 1000 - 0 = 1000      - Discounted unit price in the tier 1 = 0.001 * (1 - 0/100) = 0.001      - Total cost 1 = 1000 * 0.001 = 1 2. **Tier 2** (1000 ≤ rpd < 5000):     - Number of requests in the tier 2 = 5000 - 1000 = 4000     - Discounted unit price in the tier 2 = 0.001 * (1 - 10/100) = 0.0009     - Total cost 2 = 4000 * 0.0009 = 3.6 3. **Tier 3** (5000 ≤ rpd < 10000):     - Number of requests in the tier 3 = 10000 - 5000 = 5000     - Discounted unit price in the tier 3 = 0.001 * (1 - 20/100) = 0.0008     - Total cost 3 = 5000 * 0.0008 = 4 4. **Tier 4** (10000 ≤ rpd < 20000):     - Number of requests in the tier 4 = 12000 - 10000 = 2000     - Discounted unit price in the tier 4 = 0.001 * (1 - 30/100) = 0.0007     - Total cost 4 = 2000 * 0.0007 = 1.4 5. **Accumulated total cost**:     - Total cost = 1 + 3.6 + 4 + 1.4 = 10 ### Return: - Endpoint uri - Number of daily requests - Original request unit price of the endpoint - Total price - Currency unit - Discount percentage information of tiered billing
     * @summary 计算价格/Calculate price
     * @param {string} endpoint 请求的端点/Requested endpoint
     * @param {number} [requestPerDay] 每日请求次数/Request per day
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApiInterface
     */
    calculatePriceApiV1TikhubUserCalculatePriceGet_1(endpoint: string, requestPerDay?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取所有端点信息 ### 返回: - 所有端点信息  # [English] ### Purpose: - Get all endpoints information ### Return: - All endpoints information
     * @summary 获取所有端点信息/Get all endpoints information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApiInterface
     */
    getAllEndpointsInfoApiV1TikhubUserGetAllEndpointsInfoGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取所有端点信息 ### 返回: - 所有端点信息  # [English] ### Purpose: - Get all endpoints information ### Return: - All endpoints information
     * @summary 获取所有端点信息/Get all endpoints information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApiInterface
     */
    getAllEndpointsInfoApiV1TikhubUserGetAllEndpointsInfoGet_2(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取一个端点的信息 ### 参数: - endpoint: 请求的端点 ### 返回: - 端点信息  # [English] ### Purpose: - Get information of an endpoint ### Parameters: - endpoint: Requested endpoint ### Return: - Endpoint information
     * @summary 获取一个端点的信息/Get information of an endpoint
     * @param {string} endpoint 请求的端点/Requested endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApiInterface
     */
    getEndpointInfoApiV1TikhubUserGetEndpointInfoGet(endpoint: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取一个端点的信息 ### 参数: - endpoint: 请求的端点 ### 返回: - 端点信息  # [English] ### Purpose: - Get information of an endpoint ### Parameters: - endpoint: Requested endpoint ### Return: - Endpoint information
     * @summary 获取一个端点的信息/Get information of an endpoint
     * @param {string} endpoint 请求的端点/Requested endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApiInterface
     */
    getEndpointInfoApiV1TikhubUserGetEndpointInfoGet_3(endpoint: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取阶梯式折扣百分比信息 ### 返回: - 阶梯式折扣百分比信息  # [English] ### Purpose: - Get tiered discount percentage information ### Return: - Tiered discount percentage information
     * @summary 获取阶梯式折扣百分比信息/Get tiered discount percentage information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApiInterface
     */
    getTieredDiscountInfoApiV1TikhubUserGetTieredDiscountInfoGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取阶梯式折扣百分比信息 ### 返回: - 阶梯式折扣百分比信息  # [English] ### Purpose: - Get tiered discount percentage information ### Return: - Tiered discount percentage information
     * @summary 获取阶梯式折扣百分比信息/Get tiered discount percentage information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApiInterface
     */
    getTieredDiscountInfoApiV1TikhubUserGetTieredDiscountInfoGet_4(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户每日使用情况。 ### 参数: - 请求头：{\'Authorization\': \'Bearer API Key\'} ### 返回: - 用户每日使用情况  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account daily usage. ### Parameters: - Headers: {\'Authorization\': \'Bearer API Key\'} ### Return: - User daily usage
     * @summary 获取用户每日使用情况/Get user daily usage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApiInterface
     */
    getUserDailyUsageApiV1TikhubUserGetUserDailyUsageGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户每日使用情况。 ### 参数: - 请求头：{\'Authorization\': \'Bearer API Key\'} ### 返回: - 用户每日使用情况  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account daily usage. ### Parameters: - Headers: {\'Authorization\': \'Bearer API Key\'} ### Return: - User daily usage
     * @summary 获取用户每日使用情况/Get user daily usage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApiInterface
     */
    getUserDailyUsageApiV1TikhubUserGetUserDailyUsageGet_5(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户信息。 ### 参数: - 请求头：{\'Authorization\': \'Bearer API_KEY\'} ### 返回: - 用户信息  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account information. ### Parameters: - Headers: {\'Authorization\': \'Bearer API_KEY\'} ### Return: - User information  # [示例/Example] ```python response = {       \"code\": 200,       \"router\": \"/api/v1/tikhub/user/get_user_info\",       \"api_key_data\": {         \"api_key_name\": \"Develop Test\",         \"api_key_scopes\": [           \"/api/v1/tikhub/user/\"         ],         \"created_at\": \"2024-05-22T06:07:12.495520\",         \"expires_at\": null,         \"api_key_status\": 1       },       \"user_data\": {         \"email\": \"example@example.com\",         \"balance\": 100,         \"free_credit\": 100,         \"email_verified\": true,         \"account_disabled\": false,         \"is_active\": true       }     } ```
     * @summary 获取TikHub用户信息/Get TikHub user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApiInterface
     */
    getUserInfoApiV1TikhubUserGetUserInfoGet(options?: any): AxiosPromise<UserInfoResponseModel>;

    /**
     * # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户信息。 ### 参数: - 请求头：{\'Authorization\': \'Bearer API_KEY\'} ### 返回: - 用户信息  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account information. ### Parameters: - Headers: {\'Authorization\': \'Bearer API_KEY\'} ### Return: - User information  # [示例/Example] ```python response = {       \"code\": 200,       \"router\": \"/api/v1/tikhub/user/get_user_info\",       \"api_key_data\": {         \"api_key_name\": \"Develop Test\",         \"api_key_scopes\": [           \"/api/v1/tikhub/user/\"         ],         \"created_at\": \"2024-05-22T06:07:12.495520\",         \"expires_at\": null,         \"api_key_status\": 1       },       \"user_data\": {         \"email\": \"example@example.com\",         \"balance\": 100,         \"free_credit\": 100,         \"email_verified\": true,         \"account_disabled\": false,         \"is_active\": true       }     } ```
     * @summary 获取TikHub用户信息/Get TikHub user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApiInterface
     */
    getUserInfoApiV1TikhubUserGetUserInfoGet_6(options?: any): AxiosPromise<UserInfoResponseModel>;

}

/**
 * TikHubUserAPIApi - object-oriented interface
 * @export
 * @class TikHubUserAPIApi
 * @extends {BaseAPI}
 */
export class TikHubUserAPIApi extends BaseAPI implements TikHubUserAPIApiInterface {
    /**
     * # [中文] ### 用途: - 根据用户输入的每日请求次数以及端点信息计算最终价格。 ### 参数: - endpoint: 请求的端点，用于查询端点的原始请求单价 - request_per_day: 每日请求次数，用于计算价格，将自动根据阶梯式计费的折扣百分比计算最终价格 ### 计算公式: - 总成本 = ∑ (阶梯内请求次数 * 阶梯折后单价) - 其中，阶梯折后单价 = 基础价格 * (1 - 折扣) ### 详细计算步骤: 1. **初始化总成本**：    总成本=0 2. **遍历每个阶梯**：    * 对于每个阶梯，计算该阶梯内的请求次数。    * 计算该阶梯内的折后单价。    * 计算该阶梯内的总费用，并累加到总成本中。    * 更新剩余的请求次数。 ### 数学表示: > 设有 𝑛 个阶梯，每个阶梯的参数为： * min_rpd𝑖: 第 𝑖 个阶梯的最小请求次数 * max_rpd𝑖: 第 𝑖 个阶梯的最大请求次数 * discount𝑖: 第 𝑖 个阶梯的折扣（百分比形式） * base_price：基础价格 * request_per_day：每日请求次数 > 那么，总成本的计算公式如下： - 总成本 = Σ𝑖=1𝑛（阶梯𝑖中的请求数量 * 阶梯𝑖中的折扣单价） - 其中，阶梯折扣单价 𝑖 = base_price * (1 - 折扣𝑖/100) - 该阶梯中的请求数 𝑖 = min(request_per_day - 累计付费请求数, max_rpd𝑖 - min_rpd𝑖) ### 示例 > 假设有以下定价阶梯： * 第 1 阶梯：0 ≤ rpd < 1000，折扣 0% * 第 2 阶梯：1000 ≤ rpd < 5000，折扣 10% * 第 3 阶梯：5000 ≤ rpd < 10000，折扣 20% * 第 4 阶梯：10000 ≤ rpd < 20000，折扣 30% * 第 5 阶梯：20000 ≤ rpd < 30000，折扣 40% * 第 6 阶梯：30000 ≤ rpd，折扣 50% > 假设基础价格为 0.001 USD，每日请求次数为 12000，则计算过程如下： 1. **第 1 阶梯**（0 ≤ rpd < 1000）：    * 阶梯内请求次数=1000−0=1000    * 阶梯折后单价=0.001×(1−0/100)=0.001    * 总成本=1000×0.001=1 2. **第 2 阶梯**（1000 ≤ rpd < 5000）：    * 阶梯内请求次数=5000−1000=4000    * 阶梯折后单价=0.001×(1−10/100)=0.0009    * 总成本=4000×0.0009=3.6 3. **第 3 阶梯**（5000 ≤ rpd < 10000）：    * 阶梯内请求次数=10000−5000=5000    * 阶梯折后单价=0.001×(1−20/100)=0.0008    * 总成本=5000×0.0008=4 4. **第 4 阶梯**（10000 ≤ rpd < 20000）：    * 阶梯内请求次数=12000−10000=2000    * 阶梯折后单价=0.001×(1−30/100)=0.0007    * 总成本=2000×0.0007=1.4 5. **累加总成本**：    * 总成本=1+3.6+4+1.4=10 ### 返回: - 端点uri - 每日请求次数 - 端点原始请求单价 - 总价格 - 货币单位 - 阶梯式计费的折扣百分比信息  # [English] ### Purpose: - Calculate the final price based on the user\'s input of the number of daily requests and endpoint information. - Price calculation formula: Price = Number of daily requests * (Original request unit price of the endpoint * (1 - discount percentage of tiered billing)) ### Parameters: - endpoint: Requested endpoint, used to query the original request unit price of the endpoint - request_per_day: Number of daily requests, used to calculate the price, the final price will be calculated automatically based on the discount percentage of the tiered billing ### Calculation formula: - Total cost = ∑ (Number of requests in the tier * Discounted unit price in the tier) - Where, Discounted unit price in the tier = Base price * (1 - Discount) ### Detailed calculation steps: 1. **Initialize the total cost**:      Total cost = 0 2. **Traverse each tier**:         * For each tier, calculate the number of requests in the tier.         * Calculate the discounted unit price in the tier.         * Calculate the total cost in the tier and add it to the total cost.         * Update the remaining number of requests. ### Mathematical representation: Suppose there are 𝑛 tiers, and the parameters of each tier are: * min_rpd𝑖: The minimum number of requests in the 𝑖-th tier * max_rpd𝑖: The maximum number of requests in the 𝑖-th tier * discount𝑖: The discount of the 𝑖-th tier (in percentage form) * base_price: Base price * request_per_day: Number of daily requests > Then, the formula for calculating the total cost is as follows: - Total cost = ∑𝑖=1𝑛(Number of requests in the tier 𝑖 * Discounted unit price in the tier 𝑖) - Where, Discounted unit price in the tier 𝑖 = base_price * (1 - discount𝑖/100) - Number of requests in the tier 𝑖 = min(request_per_day - accumulated number of paid requests, max_rpd𝑖 - min_rpd𝑖) ### Example Suppose there are the following pricing tiers: * Tier 1: 0 ≤ rpd < 1000, discount 0% * Tier 2: 1000 ≤ rpd < 5000, discount 10% * Tier 3: 5000 ≤ rpd < 10000, discount 20% * Tier 4: 10000 ≤ rpd < 20000, discount 30% * Tier 5: 20000 ≤ rpd < 30000, discount 40% * Tier 6: 30000 ≤ rpd, discount 50% > Suppose the base price is 0.001 USD and the number of daily requests is 12000, the calculation process is as follows: 1. **Tier 1** (0 ≤ rpd < 1000):      - Number of requests in the tier 1 = 1000 - 0 = 1000      - Discounted unit price in the tier 1 = 0.001 * (1 - 0/100) = 0.001      - Total cost 1 = 1000 * 0.001 = 1 2. **Tier 2** (1000 ≤ rpd < 5000):     - Number of requests in the tier 2 = 5000 - 1000 = 4000     - Discounted unit price in the tier 2 = 0.001 * (1 - 10/100) = 0.0009     - Total cost 2 = 4000 * 0.0009 = 3.6 3. **Tier 3** (5000 ≤ rpd < 10000):     - Number of requests in the tier 3 = 10000 - 5000 = 5000     - Discounted unit price in the tier 3 = 0.001 * (1 - 20/100) = 0.0008     - Total cost 3 = 5000 * 0.0008 = 4 4. **Tier 4** (10000 ≤ rpd < 20000):     - Number of requests in the tier 4 = 12000 - 10000 = 2000     - Discounted unit price in the tier 4 = 0.001 * (1 - 30/100) = 0.0007     - Total cost 4 = 2000 * 0.0007 = 1.4 5. **Accumulated total cost**:     - Total cost = 1 + 3.6 + 4 + 1.4 = 10 ### Return: - Endpoint uri - Number of daily requests - Original request unit price of the endpoint - Total price - Currency unit - Discount percentage information of tiered billing
     * @summary 计算价格/Calculate price
     * @param {string} endpoint 请求的端点/Requested endpoint
     * @param {number} [requestPerDay] 每日请求次数/Request per day
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApi
     */
    public calculatePriceApiV1TikhubUserCalculatePriceGet(endpoint: string, requestPerDay?: number, options?: any) {
        return TikHubUserAPIApiFp(this.configuration).calculatePriceApiV1TikhubUserCalculatePriceGet(endpoint, requestPerDay, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据用户输入的每日请求次数以及端点信息计算最终价格。 ### 参数: - endpoint: 请求的端点，用于查询端点的原始请求单价 - request_per_day: 每日请求次数，用于计算价格，将自动根据阶梯式计费的折扣百分比计算最终价格 ### 计算公式: - 总成本 = ∑ (阶梯内请求次数 * 阶梯折后单价) - 其中，阶梯折后单价 = 基础价格 * (1 - 折扣) ### 详细计算步骤: 1. **初始化总成本**：    总成本=0 2. **遍历每个阶梯**：    * 对于每个阶梯，计算该阶梯内的请求次数。    * 计算该阶梯内的折后单价。    * 计算该阶梯内的总费用，并累加到总成本中。    * 更新剩余的请求次数。 ### 数学表示: > 设有 𝑛 个阶梯，每个阶梯的参数为： * min_rpd𝑖: 第 𝑖 个阶梯的最小请求次数 * max_rpd𝑖: 第 𝑖 个阶梯的最大请求次数 * discount𝑖: 第 𝑖 个阶梯的折扣（百分比形式） * base_price：基础价格 * request_per_day：每日请求次数 > 那么，总成本的计算公式如下： - 总成本 = Σ𝑖=1𝑛（阶梯𝑖中的请求数量 * 阶梯𝑖中的折扣单价） - 其中，阶梯折扣单价 𝑖 = base_price * (1 - 折扣𝑖/100) - 该阶梯中的请求数 𝑖 = min(request_per_day - 累计付费请求数, max_rpd𝑖 - min_rpd𝑖) ### 示例 > 假设有以下定价阶梯： * 第 1 阶梯：0 ≤ rpd < 1000，折扣 0% * 第 2 阶梯：1000 ≤ rpd < 5000，折扣 10% * 第 3 阶梯：5000 ≤ rpd < 10000，折扣 20% * 第 4 阶梯：10000 ≤ rpd < 20000，折扣 30% * 第 5 阶梯：20000 ≤ rpd < 30000，折扣 40% * 第 6 阶梯：30000 ≤ rpd，折扣 50% > 假设基础价格为 0.001 USD，每日请求次数为 12000，则计算过程如下： 1. **第 1 阶梯**（0 ≤ rpd < 1000）：    * 阶梯内请求次数=1000−0=1000    * 阶梯折后单价=0.001×(1−0/100)=0.001    * 总成本=1000×0.001=1 2. **第 2 阶梯**（1000 ≤ rpd < 5000）：    * 阶梯内请求次数=5000−1000=4000    * 阶梯折后单价=0.001×(1−10/100)=0.0009    * 总成本=4000×0.0009=3.6 3. **第 3 阶梯**（5000 ≤ rpd < 10000）：    * 阶梯内请求次数=10000−5000=5000    * 阶梯折后单价=0.001×(1−20/100)=0.0008    * 总成本=5000×0.0008=4 4. **第 4 阶梯**（10000 ≤ rpd < 20000）：    * 阶梯内请求次数=12000−10000=2000    * 阶梯折后单价=0.001×(1−30/100)=0.0007    * 总成本=2000×0.0007=1.4 5. **累加总成本**：    * 总成本=1+3.6+4+1.4=10 ### 返回: - 端点uri - 每日请求次数 - 端点原始请求单价 - 总价格 - 货币单位 - 阶梯式计费的折扣百分比信息  # [English] ### Purpose: - Calculate the final price based on the user\'s input of the number of daily requests and endpoint information. - Price calculation formula: Price = Number of daily requests * (Original request unit price of the endpoint * (1 - discount percentage of tiered billing)) ### Parameters: - endpoint: Requested endpoint, used to query the original request unit price of the endpoint - request_per_day: Number of daily requests, used to calculate the price, the final price will be calculated automatically based on the discount percentage of the tiered billing ### Calculation formula: - Total cost = ∑ (Number of requests in the tier * Discounted unit price in the tier) - Where, Discounted unit price in the tier = Base price * (1 - Discount) ### Detailed calculation steps: 1. **Initialize the total cost**:      Total cost = 0 2. **Traverse each tier**:         * For each tier, calculate the number of requests in the tier.         * Calculate the discounted unit price in the tier.         * Calculate the total cost in the tier and add it to the total cost.         * Update the remaining number of requests. ### Mathematical representation: Suppose there are 𝑛 tiers, and the parameters of each tier are: * min_rpd𝑖: The minimum number of requests in the 𝑖-th tier * max_rpd𝑖: The maximum number of requests in the 𝑖-th tier * discount𝑖: The discount of the 𝑖-th tier (in percentage form) * base_price: Base price * request_per_day: Number of daily requests > Then, the formula for calculating the total cost is as follows: - Total cost = ∑𝑖=1𝑛(Number of requests in the tier 𝑖 * Discounted unit price in the tier 𝑖) - Where, Discounted unit price in the tier 𝑖 = base_price * (1 - discount𝑖/100) - Number of requests in the tier 𝑖 = min(request_per_day - accumulated number of paid requests, max_rpd𝑖 - min_rpd𝑖) ### Example Suppose there are the following pricing tiers: * Tier 1: 0 ≤ rpd < 1000, discount 0% * Tier 2: 1000 ≤ rpd < 5000, discount 10% * Tier 3: 5000 ≤ rpd < 10000, discount 20% * Tier 4: 10000 ≤ rpd < 20000, discount 30% * Tier 5: 20000 ≤ rpd < 30000, discount 40% * Tier 6: 30000 ≤ rpd, discount 50% > Suppose the base price is 0.001 USD and the number of daily requests is 12000, the calculation process is as follows: 1. **Tier 1** (0 ≤ rpd < 1000):      - Number of requests in the tier 1 = 1000 - 0 = 1000      - Discounted unit price in the tier 1 = 0.001 * (1 - 0/100) = 0.001      - Total cost 1 = 1000 * 0.001 = 1 2. **Tier 2** (1000 ≤ rpd < 5000):     - Number of requests in the tier 2 = 5000 - 1000 = 4000     - Discounted unit price in the tier 2 = 0.001 * (1 - 10/100) = 0.0009     - Total cost 2 = 4000 * 0.0009 = 3.6 3. **Tier 3** (5000 ≤ rpd < 10000):     - Number of requests in the tier 3 = 10000 - 5000 = 5000     - Discounted unit price in the tier 3 = 0.001 * (1 - 20/100) = 0.0008     - Total cost 3 = 5000 * 0.0008 = 4 4. **Tier 4** (10000 ≤ rpd < 20000):     - Number of requests in the tier 4 = 12000 - 10000 = 2000     - Discounted unit price in the tier 4 = 0.001 * (1 - 30/100) = 0.0007     - Total cost 4 = 2000 * 0.0007 = 1.4 5. **Accumulated total cost**:     - Total cost = 1 + 3.6 + 4 + 1.4 = 10 ### Return: - Endpoint uri - Number of daily requests - Original request unit price of the endpoint - Total price - Currency unit - Discount percentage information of tiered billing
     * @summary 计算价格/Calculate price
     * @param {string} endpoint 请求的端点/Requested endpoint
     * @param {number} [requestPerDay] 每日请求次数/Request per day
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApi
     */
    public calculatePriceApiV1TikhubUserCalculatePriceGet_1(endpoint: string, requestPerDay?: number, options?: any) {
        return TikHubUserAPIApiFp(this.configuration).calculatePriceApiV1TikhubUserCalculatePriceGet_1(endpoint, requestPerDay, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取所有端点信息 ### 返回: - 所有端点信息  # [English] ### Purpose: - Get all endpoints information ### Return: - All endpoints information
     * @summary 获取所有端点信息/Get all endpoints information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApi
     */
    public getAllEndpointsInfoApiV1TikhubUserGetAllEndpointsInfoGet(options?: any) {
        return TikHubUserAPIApiFp(this.configuration).getAllEndpointsInfoApiV1TikhubUserGetAllEndpointsInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取所有端点信息 ### 返回: - 所有端点信息  # [English] ### Purpose: - Get all endpoints information ### Return: - All endpoints information
     * @summary 获取所有端点信息/Get all endpoints information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApi
     */
    public getAllEndpointsInfoApiV1TikhubUserGetAllEndpointsInfoGet_2(options?: any) {
        return TikHubUserAPIApiFp(this.configuration).getAllEndpointsInfoApiV1TikhubUserGetAllEndpointsInfoGet_2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取一个端点的信息 ### 参数: - endpoint: 请求的端点 ### 返回: - 端点信息  # [English] ### Purpose: - Get information of an endpoint ### Parameters: - endpoint: Requested endpoint ### Return: - Endpoint information
     * @summary 获取一个端点的信息/Get information of an endpoint
     * @param {string} endpoint 请求的端点/Requested endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApi
     */
    public getEndpointInfoApiV1TikhubUserGetEndpointInfoGet(endpoint: string, options?: any) {
        return TikHubUserAPIApiFp(this.configuration).getEndpointInfoApiV1TikhubUserGetEndpointInfoGet(endpoint, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取一个端点的信息 ### 参数: - endpoint: 请求的端点 ### 返回: - 端点信息  # [English] ### Purpose: - Get information of an endpoint ### Parameters: - endpoint: Requested endpoint ### Return: - Endpoint information
     * @summary 获取一个端点的信息/Get information of an endpoint
     * @param {string} endpoint 请求的端点/Requested endpoint
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApi
     */
    public getEndpointInfoApiV1TikhubUserGetEndpointInfoGet_3(endpoint: string, options?: any) {
        return TikHubUserAPIApiFp(this.configuration).getEndpointInfoApiV1TikhubUserGetEndpointInfoGet_3(endpoint, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取阶梯式折扣百分比信息 ### 返回: - 阶梯式折扣百分比信息  # [English] ### Purpose: - Get tiered discount percentage information ### Return: - Tiered discount percentage information
     * @summary 获取阶梯式折扣百分比信息/Get tiered discount percentage information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApi
     */
    public getTieredDiscountInfoApiV1TikhubUserGetTieredDiscountInfoGet(options?: any) {
        return TikHubUserAPIApiFp(this.configuration).getTieredDiscountInfoApiV1TikhubUserGetTieredDiscountInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取阶梯式折扣百分比信息 ### 返回: - 阶梯式折扣百分比信息  # [English] ### Purpose: - Get tiered discount percentage information ### Return: - Tiered discount percentage information
     * @summary 获取阶梯式折扣百分比信息/Get tiered discount percentage information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApi
     */
    public getTieredDiscountInfoApiV1TikhubUserGetTieredDiscountInfoGet_4(options?: any) {
        return TikHubUserAPIApiFp(this.configuration).getTieredDiscountInfoApiV1TikhubUserGetTieredDiscountInfoGet_4(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户每日使用情况。 ### 参数: - 请求头：{\'Authorization\': \'Bearer API Key\'} ### 返回: - 用户每日使用情况  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account daily usage. ### Parameters: - Headers: {\'Authorization\': \'Bearer API Key\'} ### Return: - User daily usage
     * @summary 获取用户每日使用情况/Get user daily usage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApi
     */
    public getUserDailyUsageApiV1TikhubUserGetUserDailyUsageGet(options?: any) {
        return TikHubUserAPIApiFp(this.configuration).getUserDailyUsageApiV1TikhubUserGetUserDailyUsageGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户每日使用情况。 ### 参数: - 请求头：{\'Authorization\': \'Bearer API Key\'} ### 返回: - 用户每日使用情况  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account daily usage. ### Parameters: - Headers: {\'Authorization\': \'Bearer API Key\'} ### Return: - User daily usage
     * @summary 获取用户每日使用情况/Get user daily usage
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApi
     */
    public getUserDailyUsageApiV1TikhubUserGetUserDailyUsageGet_5(options?: any) {
        return TikHubUserAPIApiFp(this.configuration).getUserDailyUsageApiV1TikhubUserGetUserDailyUsageGet_5(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户信息。 ### 参数: - 请求头：{\'Authorization\': \'Bearer API_KEY\'} ### 返回: - 用户信息  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account information. ### Parameters: - Headers: {\'Authorization\': \'Bearer API_KEY\'} ### Return: - User information  # [示例/Example] ```python response = {       \"code\": 200,       \"router\": \"/api/v1/tikhub/user/get_user_info\",       \"api_key_data\": {         \"api_key_name\": \"Develop Test\",         \"api_key_scopes\": [           \"/api/v1/tikhub/user/\"         ],         \"created_at\": \"2024-05-22T06:07:12.495520\",         \"expires_at\": null,         \"api_key_status\": 1       },       \"user_data\": {         \"email\": \"example@example.com\",         \"balance\": 100,         \"free_credit\": 100,         \"email_verified\": true,         \"account_disabled\": false,         \"is_active\": true       }     } ```
     * @summary 获取TikHub用户信息/Get TikHub user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApi
     */
    public getUserInfoApiV1TikhubUserGetUserInfoGet(options?: any) {
        return TikHubUserAPIApiFp(this.configuration).getUserInfoApiV1TikhubUserGetUserInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 请求头中携带API Key请求此端点可以查询当前账户信息。 ### 参数: - 请求头：{\'Authorization\': \'Bearer API_KEY\'} ### 返回: - 用户信息  # [English] ### Purpose: - Request this endpoint with API Key in the header to query the current account information. ### Parameters: - Headers: {\'Authorization\': \'Bearer API_KEY\'} ### Return: - User information  # [示例/Example] ```python response = {       \"code\": 200,       \"router\": \"/api/v1/tikhub/user/get_user_info\",       \"api_key_data\": {         \"api_key_name\": \"Develop Test\",         \"api_key_scopes\": [           \"/api/v1/tikhub/user/\"         ],         \"created_at\": \"2024-05-22T06:07:12.495520\",         \"expires_at\": null,         \"api_key_status\": 1       },       \"user_data\": {         \"email\": \"example@example.com\",         \"balance\": 100,         \"free_credit\": 100,         \"email_verified\": true,         \"account_disabled\": false,         \"is_active\": true       }     } ```
     * @summary 获取TikHub用户信息/Get TikHub user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikHubUserAPIApi
     */
    public getUserInfoApiV1TikhubUserGetUserInfoGet_6(options?: any) {
        return TikHubUserAPIApiFp(this.configuration).getUserInfoApiV1TikhubUserGetUserInfoGet_6(options).then((request) => request(this.axios, this.basePath));
    }

}
