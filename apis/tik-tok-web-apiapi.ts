// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BodyFetchHomeFeedApiV1TiktokWebFetchHomeFeedPost } from '../models';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
// @ts-ignore
import { UNKNOWN_BASE_TYPE } from '../models';
// @ts-ignore
import { XBogusModel } from '../models';
/**
 * TikTokWebAPIApi - axios parameter creator
 * @export
 */
export const TikTokWebAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
         * @summary 提取直播间弹幕/Extract live room danmaku
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {string} danmakuType 消息类型/Message type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet: async (liveRoomUrl: string, danmakuType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveRoomUrl' is not null or undefined
            if (liveRoomUrl === null || liveRoomUrl === undefined) {
                throw new RequiredError('liveRoomUrl','Required parameter liveRoomUrl was null or undefined when calling douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet.');
            }
            // verify required parameter 'danmakuType' is not null or undefined
            if (danmakuType === null || danmakuType === undefined) {
                throw new RequiredError('danmakuType','Required parameter danmakuType was null or undefined when calling douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/tiktok_live_room`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (liveRoomUrl !== undefined) {
                localVarQueryParameter['live_room_url'] = liveRoomUrl;
            }

            if (danmakuType !== undefined) {
                localVarQueryParameter['danmaku_type'] = danmakuType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
         * @summary 提取直播间弹幕/Extract live room danmaku
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {string} danmakuType 消息类型/Message type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_1: async (liveRoomUrl: string, danmakuType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveRoomUrl' is not null or undefined
            if (liveRoomUrl === null || liveRoomUrl === undefined) {
                throw new RequiredError('liveRoomUrl','Required parameter liveRoomUrl was null or undefined when calling douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_1.');
            }
            // verify required parameter 'danmakuType' is not null or undefined
            if (danmakuType === null || danmakuType === undefined) {
                throw new RequiredError('danmakuType','Required parameter danmakuType was null or undefined when calling douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_1.');
            }
            const localVarPath = `/api/v1/tiktok/web/tiktok_live_room`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (liveRoomUrl !== undefined) {
                localVarQueryParameter['live_room_url'] = liveRoomUrl;
            }

            if (danmakuType !== undefined) {
                localVarQueryParameter['danmaku_type'] = danmakuType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id = \"7381444193462078214\"
         * @summary 直播间开播状态检测/Live room start status check
         * @param {string} roomId 直播间ID/Live room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet: async (roomId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_check_live_alive`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id = \"7381444193462078214\"
         * @summary 直播间开播状态检测/Live room start status check
         * @param {string} roomId 直播间ID/Live room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_2: async (roomId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_2.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_check_live_alive`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取探索作品数据 ### 参数: - categoryType: 作品分类     - 100: 动画与漫画     - 101: 表演     - 102: 美容护理     - 103: 游戏     - 104: 喜剧     - 105: 日常生活     - 106: 家庭     - 107: 情感关系     - 108: 戏剧     - 109: 穿搭     - 110: 对口型     - 111: 美食     - 112: 运动     - 113: 动物     - 114: 社会     - 115: 汽车     - 116: 教育     - 117: 健身和健康     - 118: 科技     - 119: 唱歌跳舞     - 120: 全部 - count: 每页数量 ### 返回: - 作品数据  # [English] ### Purpose: - Get explore video data ### Parameters: - categoryType: Video category     - 100: Animation and comics     - 101: Performance     - 102: Beauty care     - 103: Game     - 104: Comedy     - 105: Daily life     - 106: Family     - 107: Emotional relationship     - 108: Drama     - 109: Dress up     - 110: Dubbing     - 111: Food     - 112: Sports     - 113: Animals     - 114: Society     - 115: Car     - 116: Education     - 117: Fitness and health     - 118: Technology     - 119: Singing and dancing     - 120: All - count: Number per page ### Return: - Video data  # [示例/Example] categoryType = \"120\" count = 16
         * @summary 获取探索作品数据/Get explore video data
         * @param {string} [categoryType] 作品分类/Video category
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchExplorePostApiV1TiktokWebFetchExplorePostGet: async (categoryType?: string, count?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/web/fetch_explore_post`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (categoryType !== undefined) {
                localVarQueryParameter['categoryType'] = categoryType;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取探索作品数据 ### 参数: - categoryType: 作品分类     - 100: 动画与漫画     - 101: 表演     - 102: 美容护理     - 103: 游戏     - 104: 喜剧     - 105: 日常生活     - 106: 家庭     - 107: 情感关系     - 108: 戏剧     - 109: 穿搭     - 110: 对口型     - 111: 美食     - 112: 运动     - 113: 动物     - 114: 社会     - 115: 汽车     - 116: 教育     - 117: 健身和健康     - 118: 科技     - 119: 唱歌跳舞     - 120: 全部 - count: 每页数量 ### 返回: - 作品数据  # [English] ### Purpose: - Get explore video data ### Parameters: - categoryType: Video category     - 100: Animation and comics     - 101: Performance     - 102: Beauty care     - 103: Game     - 104: Comedy     - 105: Daily life     - 106: Family     - 107: Emotional relationship     - 108: Drama     - 109: Dress up     - 110: Dubbing     - 111: Food     - 112: Sports     - 113: Animals     - 114: Society     - 115: Car     - 116: Education     - 117: Fitness and health     - 118: Technology     - 119: Singing and dancing     - 120: All - count: Number per page ### Return: - Video data  # [示例/Example] categoryType = \"120\" count = 16
         * @summary 获取探索作品数据/Get explore video data
         * @param {string} [categoryType] 作品分类/Video category
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchExplorePostApiV1TiktokWebFetchExplorePostGet_3: async (categoryType?: string, count?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/web/fetch_explore_post`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (categoryType !== undefined) {
                localVarQueryParameter['categoryType'] = categoryType;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword = \"TikTok\" offset = 0 search_id = \"\"
         * @summary 获取综合搜索列表/Get general search list
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [offset] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet: async (keyword: string, offset?: number, searchId?: string, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_general_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword = \"TikTok\" offset = 0 search_id = \"\"
         * @summary 获取综合搜索列表/Get general search list
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [offset] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_4: async (keyword: string, offset?: number, searchId?: string, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_4.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_general_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 首页推荐作品 ### 参数: - count: 每页数量 - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 首页推荐作品  # [English] ### Purpose: - Home Feed ### Parameters: - count: Number per page - cookie: User\'s own cookie, optional parameter, used for personalized recommendations of interface return data. ### Return: - Home Feed  # [示例/Example] count = 15 Cookie = \"Your_Cookie\"
         * @summary 首页推荐作品/Home Feed
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeFeedApiV1TiktokWebFetchHomeFeedPost: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/web/fetch_home_feed`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 首页推荐作品 ### 参数: - count: 每页数量 - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 首页推荐作品  # [English] ### Purpose: - Home Feed ### Parameters: - count: Number per page - cookie: User\'s own cookie, optional parameter, used for personalized recommendations of interface return data. ### Return: - Home Feed  # [示例/Example] count = 15 Cookie = \"Your_Cookie\"
         * @summary 首页推荐作品/Home Feed
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeFeedApiV1TiktokWebFetchHomeFeedPost_5: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/web/fetch_home_feed`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag = \"VALORANT\"
         * @summary 获取直播间首页推荐列表/Get live room homepage recommendation list
         * @param {string} relatedLiveTag 相关直播标签/Related live tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet: async (relatedLiveTag: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'relatedLiveTag' is not null or undefined
            if (relatedLiveTag === null || relatedLiveTag === undefined) {
                throw new RequiredError('relatedLiveTag','Required parameter relatedLiveTag was null or undefined when calling fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_live_recommend`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (relatedLiveTag !== undefined) {
                localVarQueryParameter['related_live_tag'] = relatedLiveTag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag = \"VALORANT\"
         * @summary 获取直播间首页推荐列表/Get live room homepage recommendation list
         * @param {string} relatedLiveTag 相关直播标签/Related live tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_6: async (relatedLiveTag: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'relatedLiveTag' is not null or undefined
            if (relatedLiveTag === null || relatedLiveTag === undefined) {
                throw new RequiredError('relatedLiveTag','Required parameter relatedLiveTag was null or undefined when calling fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_6.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_live_recommend`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (relatedLiveTag !== undefined) {
                localVarQueryParameter['related_live_tag'] = relatedLiveTag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id = \"7304809083817774382\" cursor = 0 count = 20 current_region = \"\"
         * @summary 获取作品的评论列表/Get video comments
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {string} [currentRegion] 当前地区/Current region
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentApiV1TiktokWebFetchPostCommentGet: async (awemeId: string, cursor?: number, count?: number, currentRegion?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchPostCommentApiV1TiktokWebFetchPostCommentGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_post_comment`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (currentRegion !== undefined) {
                localVarQueryParameter['current_region'] = currentRegion;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id = \"7304809083817774382\" cursor = 0 count = 20 current_region = \"\"
         * @summary 获取作品的评论列表/Get video comments
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {string} [currentRegion] 当前地区/Current region
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentApiV1TiktokWebFetchPostCommentGet_7: async (awemeId: string, cursor?: number, count?: number, currentRegion?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchPostCommentApiV1TiktokWebFetchPostCommentGet_7.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_post_comment`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (currentRegion !== undefined) {
                localVarQueryParameter['current_region'] = currentRegion;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id = \"7304809083817774382\" comment_id = \"7304877760886588191\" cursor = 0 count = 20 current_region = \"\"
         * @summary 获取作品的评论回复列表/Get video comment replies
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {string} [currentRegion] 当前地区/Current region
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet: async (itemId: string, commentId: string, cursor?: number, count?: number, currentRegion?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_post_comment_reply`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (currentRegion !== undefined) {
                localVarQueryParameter['current_region'] = currentRegion;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id = \"7304809083817774382\" comment_id = \"7304877760886588191\" cursor = 0 count = 20 current_region = \"\"
         * @summary 获取作品的评论回复列表/Get video comment replies
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {string} [currentRegion] 当前地区/Current region
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_8: async (itemId: string, commentId: string, cursor?: number, count?: number, currentRegion?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_8.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_8.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_post_comment_reply`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (currentRegion !== undefined) {
                localVarQueryParameter['current_region'] = currentRegion;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId = \"7339393672959757570\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostDetailApiV1TiktokWebFetchPostDetailGet: async (itemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchPostDetailApiV1TiktokWebFetchPostDetailGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_post_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['itemId'] = itemId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId = \"7339393672959757570\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostDetailApiV1TiktokWebFetchPostDetailGet_9: async (itemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchPostDetailApiV1TiktokWebFetchPostDetailGet_9.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_post_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['itemId'] = itemId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword = \"TikTok\"
         * @summary 搜索关键字推荐/Search keyword suggest
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet: async (keyword: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_search_keyword_suggest`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword = \"TikTok\"
         * @summary 搜索关键字推荐/Search keyword suggest
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_10: async (keyword: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_10.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_search_keyword_suggest`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"
         * @summary 搜索直播/Search live
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [offset] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet: async (keyword: string, count?: number, offset?: number, searchId?: string, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_search_live`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"
         * @summary 搜索直播/Search live
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [offset] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_11: async (keyword: string, count?: number, offset?: number, searchId?: string, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_11.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_search_live`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword = \"TikTok\" cursor = 0 search_id = \"\"
         * @summary 搜索用户/Search user
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchUserApiV1TiktokWebFetchSearchUserGet: async (keyword: string, cursor?: number, searchId?: string, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchUserApiV1TiktokWebFetchSearchUserGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_search_user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword = \"TikTok\" cursor = 0 search_id = \"\"
         * @summary 搜索用户/Search user
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchUserApiV1TiktokWebFetchSearchUserGet_12: async (keyword: string, cursor?: number, searchId?: string, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchUserApiV1TiktokWebFetchSearchUserGet_12.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_search_user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"
         * @summary 搜索视频/Search video
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [offset] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet: async (keyword: string, count?: number, offset?: number, searchId?: string, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_search_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"
         * @summary 搜索视频/Search video
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [offset] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_13: async (keyword: string, count?: number, offset?: number, searchId?: string, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_13.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_search_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name = \"tiktok\"
         * @summary Tag详情/Tag Detail
         * @param {string} tagName Tag名称/Tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTagDetailApiV1TiktokWebFetchTagDetailGet: async (tagName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagName' is not null or undefined
            if (tagName === null || tagName === undefined) {
                throw new RequiredError('tagName','Required parameter tagName was null or undefined when calling fetchTagDetailApiV1TiktokWebFetchTagDetailGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_tag_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (tagName !== undefined) {
                localVarQueryParameter['tag_name'] = tagName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name = \"tiktok\"
         * @summary Tag详情/Tag Detail
         * @param {string} tagName Tag名称/Tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTagDetailApiV1TiktokWebFetchTagDetailGet_14: async (tagName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagName' is not null or undefined
            if (tagName === null || tagName === undefined) {
                throw new RequiredError('tagName','Required parameter tagName was null or undefined when calling fetchTagDetailApiV1TiktokWebFetchTagDetailGet_14.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_tag_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (tagName !== undefined) {
                localVarQueryParameter['tag_name'] = tagName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID = \"7551\" count = 30 cursor = 0
         * @summary Tag作品/Tag Post
         * @param {string} challengeID Tag ID
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTagPostApiV1TiktokWebFetchTagPostGet: async (challengeID: string, count?: number, cursor?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'challengeID' is not null or undefined
            if (challengeID === null || challengeID === undefined) {
                throw new RequiredError('challengeID','Required parameter challengeID was null or undefined when calling fetchTagPostApiV1TiktokWebFetchTagPostGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_tag_post`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (challengeID !== undefined) {
                localVarQueryParameter['challengeID'] = challengeID;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID = \"7551\" count = 30 cursor = 0
         * @summary Tag作品/Tag Post
         * @param {string} challengeID Tag ID
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTagPostApiV1TiktokWebFetchTagPostGet_15: async (challengeID: string, count?: number, cursor?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'challengeID' is not null or undefined
            if (challengeID === null || challengeID === undefined) {
                throw new RequiredError('challengeID','Required parameter challengeID was null or undefined when calling fetchTagPostApiV1TiktokWebFetchTagPostGet_15.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_tag_post`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (challengeID !== undefined) {
                localVarQueryParameter['challengeID'] = challengeID;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url = \"https://www.tiktok.com/@.caseoh_daily/live\"
         * @summary 通过直播链接获取直播间信息/Get live room information via live link
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet: async (liveRoomUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveRoomUrl' is not null or undefined
            if (liveRoomUrl === null || liveRoomUrl === undefined) {
                throw new RequiredError('liveRoomUrl','Required parameter liveRoomUrl was null or undefined when calling fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_tiktok_live_data`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (liveRoomUrl !== undefined) {
                localVarQueryParameter['live_room_url'] = liveRoomUrl;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url = \"https://www.tiktok.com/@.caseoh_daily/live\"
         * @summary 通过直播链接获取直播间信息/Get live room information via live link
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_16: async (liveRoomUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveRoomUrl' is not null or undefined
            if (liveRoomUrl === null || liveRoomUrl === undefined) {
                throw new RequiredError('liveRoomUrl','Required parameter liveRoomUrl was null or undefined when calling fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_16.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_tiktok_live_data`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (liveRoomUrl !== undefined) {
                localVarQueryParameter['live_room_url'] = liveRoomUrl;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取每日热门内容作品数据 ### 返回: - 作品数据  # [English] ### Purpose: - Get daily trending video data ### Return: - Video data  # [示例/Example]
         * @summary 获取每日热门内容作品数据/Get daily trending video data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTrendingPostApiV1TiktokWebFetchTrendingPostGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/web/fetch_trending_post`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取每日热门内容作品数据 ### 返回: - 作品数据  # [English] ### Purpose: - Get daily trending video data ### Return: - Video data  # [示例/Example]
         * @summary 获取每日热门内容作品数据/Get daily trending video data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTrendingPostApiV1TiktokWebFetchTrendingPostGet_17: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/web/fetch_trending_post`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie = \"Your_Cookie\" secUid = \"Your_SecUid\" cursor = 0 count = 30 coverFormat = 2
         * @summary 获取用户的收藏列表/Get user favorites
         * @param {string} cookie 用户cookie/User cookie
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [coverFormat] 封面格式/Cover format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserCollectApiV1TiktokWebFetchUserCollectGet: async (cookie: string, secUid: string, cursor?: number, count?: number, coverFormat?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cookie' is not null or undefined
            if (cookie === null || cookie === undefined) {
                throw new RequiredError('cookie','Required parameter cookie was null or undefined when calling fetchUserCollectApiV1TiktokWebFetchUserCollectGet.');
            }
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchUserCollectApiV1TiktokWebFetchUserCollectGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_user_collect`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['secUid'] = secUid;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (coverFormat !== undefined) {
                localVarQueryParameter['coverFormat'] = coverFormat;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie = \"Your_Cookie\" secUid = \"Your_SecUid\" cursor = 0 count = 30 coverFormat = 2
         * @summary 获取用户的收藏列表/Get user favorites
         * @param {string} cookie 用户cookie/User cookie
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [coverFormat] 封面格式/Cover format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserCollectApiV1TiktokWebFetchUserCollectGet_18: async (cookie: string, secUid: string, cursor?: number, count?: number, coverFormat?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cookie' is not null or undefined
            if (cookie === null || cookie === undefined) {
                throw new RequiredError('cookie','Required parameter cookie was null or undefined when calling fetchUserCollectApiV1TiktokWebFetchUserCollectGet_18.');
            }
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchUserCollectApiV1TiktokWebFetchUserCollectGet_18.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_user_collect`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['secUid'] = secUid;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (coverFormat !== undefined) {
                localVarQueryParameter['coverFormat'] = coverFormat;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0
         * @summary 获取用户的粉丝列表/Get user followers
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [maxCursor] 最大游标/Max cursor
         * @param {number} [minCursor] 最小游标/Min cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFansApiV1TiktokWebFetchUserFansGet: async (secUid: string, count?: number, maxCursor?: number, minCursor?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchUserFansApiV1TiktokWebFetchUserFansGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_user_fans`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['secUid'] = secUid;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['maxCursor'] = maxCursor;
            }

            if (minCursor !== undefined) {
                localVarQueryParameter['minCursor'] = minCursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0
         * @summary 获取用户的粉丝列表/Get user followers
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [maxCursor] 最大游标/Max cursor
         * @param {number} [minCursor] 最小游标/Min cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFansApiV1TiktokWebFetchUserFansGet_19: async (secUid: string, count?: number, maxCursor?: number, minCursor?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchUserFansApiV1TiktokWebFetchUserFansGet_19.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_user_fans`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['secUid'] = secUid;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['maxCursor'] = maxCursor;
            }

            if (minCursor !== undefined) {
                localVarQueryParameter['minCursor'] = minCursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0
         * @summary 获取用户的关注列表/Get user followings
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [maxCursor] 最大游标/Max cursor
         * @param {number} [minCursor] 最小游标/Min cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowApiV1TiktokWebFetchUserFollowGet: async (secUid: string, count?: number, maxCursor?: number, minCursor?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchUserFollowApiV1TiktokWebFetchUserFollowGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_user_follow`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['secUid'] = secUid;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['maxCursor'] = maxCursor;
            }

            if (minCursor !== undefined) {
                localVarQueryParameter['minCursor'] = minCursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0
         * @summary 获取用户的关注列表/Get user followings
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [maxCursor] 最大游标/Max cursor
         * @param {number} [minCursor] 最小游标/Min cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowApiV1TiktokWebFetchUserFollowGet_20: async (secUid: string, count?: number, maxCursor?: number, minCursor?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchUserFollowApiV1TiktokWebFetchUserFollowGet_20.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_user_follow`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['secUid'] = secUid;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['maxCursor'] = maxCursor;
            }

            if (minCursor !== undefined) {
                localVarQueryParameter['minCursor'] = minCursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user\'s like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User likes  # [示例/Example] secUid = \"MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\" cursor = 0 count = 20 coverFormat = 2
         * @summary 获取用户的点赞列表/Get user likes
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [coverFormat] 封面格式/Cover format
         * @param {number} [postItemListRequestType] 排序方式/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeApiV1TiktokWebFetchUserLikeGet: async (secUid: string, cursor?: number, count?: number, coverFormat?: number, postItemListRequestType?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchUserLikeApiV1TiktokWebFetchUserLikeGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_user_like`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['secUid'] = secUid;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (coverFormat !== undefined) {
                localVarQueryParameter['coverFormat'] = coverFormat;
            }

            if (postItemListRequestType !== undefined) {
                localVarQueryParameter['post_item_list_request_type'] = postItemListRequestType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user\'s like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User likes  # [示例/Example] secUid = \"MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\" cursor = 0 count = 20 coverFormat = 2
         * @summary 获取用户的点赞列表/Get user likes
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [coverFormat] 封面格式/Cover format
         * @param {number} [postItemListRequestType] 排序方式/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeApiV1TiktokWebFetchUserLikeGet_21: async (secUid: string, cursor?: number, count?: number, coverFormat?: number, postItemListRequestType?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchUserLikeApiV1TiktokWebFetchUserLikeGet_21.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_user_like`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['secUid'] = secUid;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (coverFormat !== undefined) {
                localVarQueryParameter['coverFormat'] = coverFormat;
            }

            if (postItemListRequestType !== undefined) {
                localVarQueryParameter['post_item_list_request_type'] = postItemListRequestType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId = \"7101538765474106158\" cursor = 0 count = 30
         * @summary 获取用户的合辑列表/Get user mix list
         * @param {string} mixId 合辑id/Mix id
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserMixApiV1TiktokWebFetchUserMixGet: async (mixId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mixId' is not null or undefined
            if (mixId === null || mixId === undefined) {
                throw new RequiredError('mixId','Required parameter mixId was null or undefined when calling fetchUserMixApiV1TiktokWebFetchUserMixGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_user_mix`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (mixId !== undefined) {
                localVarQueryParameter['mixId'] = mixId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId = \"7101538765474106158\" cursor = 0 count = 30
         * @summary 获取用户的合辑列表/Get user mix list
         * @param {string} mixId 合辑id/Mix id
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserMixApiV1TiktokWebFetchUserMixGet_22: async (mixId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mixId' is not null or undefined
            if (mixId === null || mixId === undefined) {
                throw new RequiredError('mixId','Required parameter mixId was null or undefined when calling fetchUserMixApiV1TiktokWebFetchUserMixGet_22.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_user_mix`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (mixId !== undefined) {
                localVarQueryParameter['mixId'] = mixId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 30
         * @summary 获取用户的播放列表/Get user play list
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet: async (secUid: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_user_play_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['secUid'] = secUid;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 30
         * @summary 获取用户的播放列表/Get user play list
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_23: async (secUid: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_23.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_user_play_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['secUid'] = secUid;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User posts  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 20 coverFormat = 2
         * @summary 获取用户的作品列表/Get user posts
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [coverFormat] 封面格式/Cover format
         * @param {number} [postItemListRequestType] 排序方式/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostApiV1TiktokWebFetchUserPostGet: async (secUid: string, cursor?: number, count?: number, coverFormat?: number, postItemListRequestType?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchUserPostApiV1TiktokWebFetchUserPostGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_user_post`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['secUid'] = secUid;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (coverFormat !== undefined) {
                localVarQueryParameter['coverFormat'] = coverFormat;
            }

            if (postItemListRequestType !== undefined) {
                localVarQueryParameter['post_item_list_request_type'] = postItemListRequestType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User posts  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 20 coverFormat = 2
         * @summary 获取用户的作品列表/Get user posts
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [coverFormat] 封面格式/Cover format
         * @param {number} [postItemListRequestType] 排序方式/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostApiV1TiktokWebFetchUserPostGet_24: async (secUid: string, cursor?: number, count?: number, coverFormat?: number, postItemListRequestType?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchUserPostApiV1TiktokWebFetchUserPostGet_24.');
            }
            const localVarPath = `/api/v1/tiktok/web/fetch_user_post`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['secUid'] = secUid;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (coverFormat !== undefined) {
                localVarQueryParameter['coverFormat'] = coverFormat;
            }

            if (postItemListRequestType !== undefined) {
                localVarQueryParameter['post_item_list_request_type'] = postItemListRequestType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user\'s homepage link. ### Return: - User profile  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" uniqueId = \"tiktok\"
         * @summary 获取用户的个人信息/Get user profile
         * @param {string} [uniqueId] 用户uniqueId/User uniqueId
         * @param {string} [secUid] 用户secUid/User secUid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserProfileApiV1TiktokWebFetchUserProfileGet: async (uniqueId?: string, secUid?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/web/fetch_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uniqueId !== undefined) {
                localVarQueryParameter['uniqueId'] = uniqueId;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['secUid'] = secUid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user\'s homepage link. ### Return: - User profile  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" uniqueId = \"tiktok\"
         * @summary 获取用户的个人信息/Get user profile
         * @param {string} [uniqueId] 用户uniqueId/User uniqueId
         * @param {string} [secUid] 用户secUid/User secUid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserProfileApiV1TiktokWebFetchUserProfileGet_25: async (uniqueId?: string, secUid?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/web/fetch_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uniqueId !== undefined) {
                localVarQueryParameter['uniqueId'] = uniqueId;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['secUid'] = secUid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken
         * @summary 生成真实msToken/Generate real msToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/web/generate_real_msToken`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken
         * @summary 生成真实msToken/Generate real msToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet_26: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/web/generate_real_msToken`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie = \"Your_Cookie\"
         * @summary 生成ttwid/Generate ttwid
         * @param {string} cookie 用户cookie/User cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTtwidApiV1TiktokWebGenerateTtwidGet: async (cookie: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cookie' is not null or undefined
            if (cookie === null || cookie === undefined) {
                throw new RequiredError('cookie','Required parameter cookie was null or undefined when calling generateTtwidApiV1TiktokWebGenerateTtwidGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/generate_ttwid`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie = \"Your_Cookie\"
         * @summary 生成ttwid/Generate ttwid
         * @param {string} cookie 用户cookie/User cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTtwidApiV1TiktokWebGenerateTtwidGet_27: async (cookie: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cookie' is not null or undefined
            if (cookie === null || cookie === undefined) {
                throw new RequiredError('cookie','Required parameter cookie was null or undefined when calling generateTtwidApiV1TiktokWebGenerateTtwidGet_27.');
            }
            const localVarPath = `/api/v1/tiktok/web/generate_ttwid`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  ```json {     \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\",     \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" }
         * @summary 生成xbogus/Generate xbogus
         * @param {XBogusModel} [xBogusModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateXbogusApiV1TiktokWebGenerateXbogusPost: async (xBogusModel?: XBogusModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/web/generate_xbogus`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof xBogusModel !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(xBogusModel !== undefined ? xBogusModel : {}) : (xBogusModel || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  ```json {     \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\",     \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" }
         * @summary 生成xbogus/Generate xbogus
         * @param {XBogusModel} [xBogusModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateXbogusApiV1TiktokWebGenerateXbogusPost_28: async (xBogusModel?: XBogusModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/web/generate_xbogus`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof xBogusModel !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(xBogusModel !== undefined ? xBogusModel : {}) : (xBogusModel || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url = [\"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"]
         * @summary 提取列表作品id/Extract list video id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/web/get_all_aweme_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url = [\"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"]
         * @summary 提取列表作品id/Extract list video id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost_29: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/web/get_all_aweme_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持10个链接）、 ### 返回: - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 10 links) ### Return: - If the sec_user_id is successfully obtained, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]
         * @summary 提取列表用户sec_user_id/Extract list user sec_user_id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/web/get_all_sec_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持10个链接）、 ### 返回: - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 10 links) ### Return: - If the sec_user_id is successfully obtained, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]
         * @summary 提取列表用户sec_user_id/Extract list user sec_user_id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost_30: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/web/get_all_sec_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]
         * @summary 获取列表unique_id/Get list unique_id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/web/get_all_unique_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]
         * @summary 获取列表unique_id/Get list unique_id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost_31: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/web/get_all_unique_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"
         * @summary 提取单个作品id/Extract single video id
         * @param {string} url 作品链接/Video link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAwemeIdApiV1TiktokWebGetAwemeIdGet: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling getAwemeIdApiV1TiktokWebGetAwemeIdGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/get_aweme_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"
         * @summary 提取单个作品id/Extract single video id
         * @param {string} url 作品链接/Video link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAwemeIdApiV1TiktokWebGetAwemeIdGet_32: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling getAwemeIdApiV1TiktokWebGetAwemeIdGet_32.');
            }
            const localVarPath = `/api/v1/tiktok/web/get_aweme_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 支持短链接，如：https://vt.tiktok.com/ZSjuyJnWQ/ - 支持长链接，如：https://www.tiktok.com/@maksukaracun/live ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - Support short links, such as: https://vt.tiktok.com/ZSjuyJnWQ/ - Support long links, such as: https://www.tiktok.com/@maksukaracun/live ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url = \"https://www.tiktok.com/@maksukaracun/live\"
         * @summary 根据直播间链接提取直播间ID/Extract live room ID from live room link
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet: async (liveRoomUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveRoomUrl' is not null or undefined
            if (liveRoomUrl === null || liveRoomUrl === undefined) {
                throw new RequiredError('liveRoomUrl','Required parameter liveRoomUrl was null or undefined when calling getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/get_live_room_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (liveRoomUrl !== undefined) {
                localVarQueryParameter['live_room_url'] = liveRoomUrl;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 支持短链接，如：https://vt.tiktok.com/ZSjuyJnWQ/ - 支持长链接，如：https://www.tiktok.com/@maksukaracun/live ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - Support short links, such as: https://vt.tiktok.com/ZSjuyJnWQ/ - Support long links, such as: https://www.tiktok.com/@maksukaracun/live ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url = \"https://www.tiktok.com/@maksukaracun/live\"
         * @summary 根据直播间链接提取直播间ID/Extract live room ID from live room link
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_33: async (liveRoomUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveRoomUrl' is not null or undefined
            if (liveRoomUrl === null || liveRoomUrl === undefined) {
                throw new RequiredError('liveRoomUrl','Required parameter liveRoomUrl was null or undefined when calling getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_33.');
            }
            const localVarPath = `/api/v1/tiktok/web/get_live_room_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (liveRoomUrl !== undefined) {
                localVarQueryParameter['live_room_url'] = liveRoomUrl;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"
         * @summary 提取用户sec_user_id/Extract user sec_user_id
         * @param {string} url 用户主页链接/User homepage link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecUserIdApiV1TiktokWebGetSecUserIdGet: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling getSecUserIdApiV1TiktokWebGetSecUserIdGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/get_sec_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"
         * @summary 提取用户sec_user_id/Extract user sec_user_id
         * @param {string} url 用户主页链接/User homepage link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecUserIdApiV1TiktokWebGetSecUserIdGet_34: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling getSecUserIdApiV1TiktokWebGetSecUserIdGet_34.');
            }
            const localVarPath = `/api/v1/tiktok/web/get_sec_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"
         * @summary 获取用户unique_id/Get user unique_id
         * @param {string} url 用户主页链接/User homepage link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniqueIdApiV1TiktokWebGetUniqueIdGet: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling getUniqueIdApiV1TiktokWebGetUniqueIdGet.');
            }
            const localVarPath = `/api/v1/tiktok/web/get_unique_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"
         * @summary 获取用户unique_id/Get user unique_id
         * @param {string} url 用户主页链接/User homepage link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniqueIdApiV1TiktokWebGetUniqueIdGet_35: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling getUniqueIdApiV1TiktokWebGetUniqueIdGet_35.');
            }
            const localVarPath = `/api/v1/tiktok/web/get_unique_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TikTokWebAPIApi - functional programming interface
 * @export
 */
export const TikTokWebAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
         * @summary 提取直播间弹幕/Extract live room danmaku
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {string} danmakuType 消息类型/Message type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet(liveRoomUrl: string, danmakuType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet(liveRoomUrl, danmakuType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
         * @summary 提取直播间弹幕/Extract live room danmaku
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {string} danmakuType 消息类型/Message type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_1(liveRoomUrl: string, danmakuType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_1(liveRoomUrl, danmakuType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id = \"7381444193462078214\"
         * @summary 直播间开播状态检测/Live room start status check
         * @param {string} roomId 直播间ID/Live room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet(roomId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet(roomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id = \"7381444193462078214\"
         * @summary 直播间开播状态检测/Live room start status check
         * @param {string} roomId 直播间ID/Live room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_2(roomId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_2(roomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取探索作品数据 ### 参数: - categoryType: 作品分类     - 100: 动画与漫画     - 101: 表演     - 102: 美容护理     - 103: 游戏     - 104: 喜剧     - 105: 日常生活     - 106: 家庭     - 107: 情感关系     - 108: 戏剧     - 109: 穿搭     - 110: 对口型     - 111: 美食     - 112: 运动     - 113: 动物     - 114: 社会     - 115: 汽车     - 116: 教育     - 117: 健身和健康     - 118: 科技     - 119: 唱歌跳舞     - 120: 全部 - count: 每页数量 ### 返回: - 作品数据  # [English] ### Purpose: - Get explore video data ### Parameters: - categoryType: Video category     - 100: Animation and comics     - 101: Performance     - 102: Beauty care     - 103: Game     - 104: Comedy     - 105: Daily life     - 106: Family     - 107: Emotional relationship     - 108: Drama     - 109: Dress up     - 110: Dubbing     - 111: Food     - 112: Sports     - 113: Animals     - 114: Society     - 115: Car     - 116: Education     - 117: Fitness and health     - 118: Technology     - 119: Singing and dancing     - 120: All - count: Number per page ### Return: - Video data  # [示例/Example] categoryType = \"120\" count = 16
         * @summary 获取探索作品数据/Get explore video data
         * @param {string} [categoryType] 作品分类/Video category
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchExplorePostApiV1TiktokWebFetchExplorePostGet(categoryType?: string, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchExplorePostApiV1TiktokWebFetchExplorePostGet(categoryType, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取探索作品数据 ### 参数: - categoryType: 作品分类     - 100: 动画与漫画     - 101: 表演     - 102: 美容护理     - 103: 游戏     - 104: 喜剧     - 105: 日常生活     - 106: 家庭     - 107: 情感关系     - 108: 戏剧     - 109: 穿搭     - 110: 对口型     - 111: 美食     - 112: 运动     - 113: 动物     - 114: 社会     - 115: 汽车     - 116: 教育     - 117: 健身和健康     - 118: 科技     - 119: 唱歌跳舞     - 120: 全部 - count: 每页数量 ### 返回: - 作品数据  # [English] ### Purpose: - Get explore video data ### Parameters: - categoryType: Video category     - 100: Animation and comics     - 101: Performance     - 102: Beauty care     - 103: Game     - 104: Comedy     - 105: Daily life     - 106: Family     - 107: Emotional relationship     - 108: Drama     - 109: Dress up     - 110: Dubbing     - 111: Food     - 112: Sports     - 113: Animals     - 114: Society     - 115: Car     - 116: Education     - 117: Fitness and health     - 118: Technology     - 119: Singing and dancing     - 120: All - count: Number per page ### Return: - Video data  # [示例/Example] categoryType = \"120\" count = 16
         * @summary 获取探索作品数据/Get explore video data
         * @param {string} [categoryType] 作品分类/Video category
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchExplorePostApiV1TiktokWebFetchExplorePostGet_3(categoryType?: string, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchExplorePostApiV1TiktokWebFetchExplorePostGet_3(categoryType, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword = \"TikTok\" offset = 0 search_id = \"\"
         * @summary 获取综合搜索列表/Get general search list
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [offset] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet(keyword: string, offset?: number, searchId?: string, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet(keyword, offset, searchId, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword = \"TikTok\" offset = 0 search_id = \"\"
         * @summary 获取综合搜索列表/Get general search list
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [offset] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_4(keyword: string, offset?: number, searchId?: string, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_4(keyword, offset, searchId, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 首页推荐作品 ### 参数: - count: 每页数量 - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 首页推荐作品  # [English] ### Purpose: - Home Feed ### Parameters: - count: Number per page - cookie: User\'s own cookie, optional parameter, used for personalized recommendations of interface return data. ### Return: - Home Feed  # [示例/Example] count = 15 Cookie = \"Your_Cookie\"
         * @summary 首页推荐作品/Home Feed
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHomeFeedApiV1TiktokWebFetchHomeFeedPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchHomeFeedApiV1TiktokWebFetchHomeFeedPost(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 首页推荐作品 ### 参数: - count: 每页数量 - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 首页推荐作品  # [English] ### Purpose: - Home Feed ### Parameters: - count: Number per page - cookie: User\'s own cookie, optional parameter, used for personalized recommendations of interface return data. ### Return: - Home Feed  # [示例/Example] count = 15 Cookie = \"Your_Cookie\"
         * @summary 首页推荐作品/Home Feed
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHomeFeedApiV1TiktokWebFetchHomeFeedPost_5(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchHomeFeedApiV1TiktokWebFetchHomeFeedPost_5(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag = \"VALORANT\"
         * @summary 获取直播间首页推荐列表/Get live room homepage recommendation list
         * @param {string} relatedLiveTag 相关直播标签/Related live tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet(relatedLiveTag: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet(relatedLiveTag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag = \"VALORANT\"
         * @summary 获取直播间首页推荐列表/Get live room homepage recommendation list
         * @param {string} relatedLiveTag 相关直播标签/Related live tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_6(relatedLiveTag: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_6(relatedLiveTag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id = \"7304809083817774382\" cursor = 0 count = 20 current_region = \"\"
         * @summary 获取作品的评论列表/Get video comments
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {string} [currentRegion] 当前地区/Current region
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostCommentApiV1TiktokWebFetchPostCommentGet(awemeId: string, cursor?: number, count?: number, currentRegion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchPostCommentApiV1TiktokWebFetchPostCommentGet(awemeId, cursor, count, currentRegion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id = \"7304809083817774382\" cursor = 0 count = 20 current_region = \"\"
         * @summary 获取作品的评论列表/Get video comments
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {string} [currentRegion] 当前地区/Current region
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostCommentApiV1TiktokWebFetchPostCommentGet_7(awemeId: string, cursor?: number, count?: number, currentRegion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchPostCommentApiV1TiktokWebFetchPostCommentGet_7(awemeId, cursor, count, currentRegion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id = \"7304809083817774382\" comment_id = \"7304877760886588191\" cursor = 0 count = 20 current_region = \"\"
         * @summary 获取作品的评论回复列表/Get video comment replies
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {string} [currentRegion] 当前地区/Current region
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet(itemId: string, commentId: string, cursor?: number, count?: number, currentRegion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet(itemId, commentId, cursor, count, currentRegion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id = \"7304809083817774382\" comment_id = \"7304877760886588191\" cursor = 0 count = 20 current_region = \"\"
         * @summary 获取作品的评论回复列表/Get video comment replies
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {string} [currentRegion] 当前地区/Current region
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_8(itemId: string, commentId: string, cursor?: number, count?: number, currentRegion?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_8(itemId, commentId, cursor, count, currentRegion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId = \"7339393672959757570\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostDetailApiV1TiktokWebFetchPostDetailGet(itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchPostDetailApiV1TiktokWebFetchPostDetailGet(itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId = \"7339393672959757570\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostDetailApiV1TiktokWebFetchPostDetailGet_9(itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchPostDetailApiV1TiktokWebFetchPostDetailGet_9(itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword = \"TikTok\"
         * @summary 搜索关键字推荐/Search keyword suggest
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet(keyword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet(keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword = \"TikTok\"
         * @summary 搜索关键字推荐/Search keyword suggest
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_10(keyword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_10(keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"
         * @summary 搜索直播/Search live
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [offset] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet(keyword: string, count?: number, offset?: number, searchId?: string, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet(keyword, count, offset, searchId, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"
         * @summary 搜索直播/Search live
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [offset] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_11(keyword: string, count?: number, offset?: number, searchId?: string, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_11(keyword, count, offset, searchId, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword = \"TikTok\" cursor = 0 search_id = \"\"
         * @summary 搜索用户/Search user
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchUserApiV1TiktokWebFetchSearchUserGet(keyword: string, cursor?: number, searchId?: string, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchSearchUserApiV1TiktokWebFetchSearchUserGet(keyword, cursor, searchId, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword = \"TikTok\" cursor = 0 search_id = \"\"
         * @summary 搜索用户/Search user
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchUserApiV1TiktokWebFetchSearchUserGet_12(keyword: string, cursor?: number, searchId?: string, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchSearchUserApiV1TiktokWebFetchSearchUserGet_12(keyword, cursor, searchId, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"
         * @summary 搜索视频/Search video
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [offset] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet(keyword: string, count?: number, offset?: number, searchId?: string, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet(keyword, count, offset, searchId, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"
         * @summary 搜索视频/Search video
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [offset] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_13(keyword: string, count?: number, offset?: number, searchId?: string, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_13(keyword, count, offset, searchId, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name = \"tiktok\"
         * @summary Tag详情/Tag Detail
         * @param {string} tagName Tag名称/Tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTagDetailApiV1TiktokWebFetchTagDetailGet(tagName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchTagDetailApiV1TiktokWebFetchTagDetailGet(tagName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name = \"tiktok\"
         * @summary Tag详情/Tag Detail
         * @param {string} tagName Tag名称/Tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTagDetailApiV1TiktokWebFetchTagDetailGet_14(tagName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchTagDetailApiV1TiktokWebFetchTagDetailGet_14(tagName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID = \"7551\" count = 30 cursor = 0
         * @summary Tag作品/Tag Post
         * @param {string} challengeID Tag ID
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTagPostApiV1TiktokWebFetchTagPostGet(challengeID: string, count?: number, cursor?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchTagPostApiV1TiktokWebFetchTagPostGet(challengeID, count, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID = \"7551\" count = 30 cursor = 0
         * @summary Tag作品/Tag Post
         * @param {string} challengeID Tag ID
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTagPostApiV1TiktokWebFetchTagPostGet_15(challengeID: string, count?: number, cursor?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchTagPostApiV1TiktokWebFetchTagPostGet_15(challengeID, count, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url = \"https://www.tiktok.com/@.caseoh_daily/live\"
         * @summary 通过直播链接获取直播间信息/Get live room information via live link
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet(liveRoomUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet(liveRoomUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url = \"https://www.tiktok.com/@.caseoh_daily/live\"
         * @summary 通过直播链接获取直播间信息/Get live room information via live link
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_16(liveRoomUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_16(liveRoomUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取每日热门内容作品数据 ### 返回: - 作品数据  # [English] ### Purpose: - Get daily trending video data ### Return: - Video data  # [示例/Example]
         * @summary 获取每日热门内容作品数据/Get daily trending video data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTrendingPostApiV1TiktokWebFetchTrendingPostGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchTrendingPostApiV1TiktokWebFetchTrendingPostGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取每日热门内容作品数据 ### 返回: - 作品数据  # [English] ### Purpose: - Get daily trending video data ### Return: - Video data  # [示例/Example]
         * @summary 获取每日热门内容作品数据/Get daily trending video data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTrendingPostApiV1TiktokWebFetchTrendingPostGet_17(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchTrendingPostApiV1TiktokWebFetchTrendingPostGet_17(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie = \"Your_Cookie\" secUid = \"Your_SecUid\" cursor = 0 count = 30 coverFormat = 2
         * @summary 获取用户的收藏列表/Get user favorites
         * @param {string} cookie 用户cookie/User cookie
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [coverFormat] 封面格式/Cover format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserCollectApiV1TiktokWebFetchUserCollectGet(cookie: string, secUid: string, cursor?: number, count?: number, coverFormat?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchUserCollectApiV1TiktokWebFetchUserCollectGet(cookie, secUid, cursor, count, coverFormat, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie = \"Your_Cookie\" secUid = \"Your_SecUid\" cursor = 0 count = 30 coverFormat = 2
         * @summary 获取用户的收藏列表/Get user favorites
         * @param {string} cookie 用户cookie/User cookie
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [coverFormat] 封面格式/Cover format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserCollectApiV1TiktokWebFetchUserCollectGet_18(cookie: string, secUid: string, cursor?: number, count?: number, coverFormat?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchUserCollectApiV1TiktokWebFetchUserCollectGet_18(cookie, secUid, cursor, count, coverFormat, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0
         * @summary 获取用户的粉丝列表/Get user followers
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [maxCursor] 最大游标/Max cursor
         * @param {number} [minCursor] 最小游标/Min cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFansApiV1TiktokWebFetchUserFansGet(secUid: string, count?: number, maxCursor?: number, minCursor?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchUserFansApiV1TiktokWebFetchUserFansGet(secUid, count, maxCursor, minCursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0
         * @summary 获取用户的粉丝列表/Get user followers
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [maxCursor] 最大游标/Max cursor
         * @param {number} [minCursor] 最小游标/Min cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFansApiV1TiktokWebFetchUserFansGet_19(secUid: string, count?: number, maxCursor?: number, minCursor?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchUserFansApiV1TiktokWebFetchUserFansGet_19(secUid, count, maxCursor, minCursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0
         * @summary 获取用户的关注列表/Get user followings
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [maxCursor] 最大游标/Max cursor
         * @param {number} [minCursor] 最小游标/Min cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowApiV1TiktokWebFetchUserFollowGet(secUid: string, count?: number, maxCursor?: number, minCursor?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchUserFollowApiV1TiktokWebFetchUserFollowGet(secUid, count, maxCursor, minCursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0
         * @summary 获取用户的关注列表/Get user followings
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [maxCursor] 最大游标/Max cursor
         * @param {number} [minCursor] 最小游标/Min cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowApiV1TiktokWebFetchUserFollowGet_20(secUid: string, count?: number, maxCursor?: number, minCursor?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchUserFollowApiV1TiktokWebFetchUserFollowGet_20(secUid, count, maxCursor, minCursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user\'s like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User likes  # [示例/Example] secUid = \"MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\" cursor = 0 count = 20 coverFormat = 2
         * @summary 获取用户的点赞列表/Get user likes
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [coverFormat] 封面格式/Cover format
         * @param {number} [postItemListRequestType] 排序方式/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLikeApiV1TiktokWebFetchUserLikeGet(secUid: string, cursor?: number, count?: number, coverFormat?: number, postItemListRequestType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchUserLikeApiV1TiktokWebFetchUserLikeGet(secUid, cursor, count, coverFormat, postItemListRequestType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user\'s like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User likes  # [示例/Example] secUid = \"MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\" cursor = 0 count = 20 coverFormat = 2
         * @summary 获取用户的点赞列表/Get user likes
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [coverFormat] 封面格式/Cover format
         * @param {number} [postItemListRequestType] 排序方式/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLikeApiV1TiktokWebFetchUserLikeGet_21(secUid: string, cursor?: number, count?: number, coverFormat?: number, postItemListRequestType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchUserLikeApiV1TiktokWebFetchUserLikeGet_21(secUid, cursor, count, coverFormat, postItemListRequestType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId = \"7101538765474106158\" cursor = 0 count = 30
         * @summary 获取用户的合辑列表/Get user mix list
         * @param {string} mixId 合辑id/Mix id
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserMixApiV1TiktokWebFetchUserMixGet(mixId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchUserMixApiV1TiktokWebFetchUserMixGet(mixId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId = \"7101538765474106158\" cursor = 0 count = 30
         * @summary 获取用户的合辑列表/Get user mix list
         * @param {string} mixId 合辑id/Mix id
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserMixApiV1TiktokWebFetchUserMixGet_22(mixId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchUserMixApiV1TiktokWebFetchUserMixGet_22(mixId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 30
         * @summary 获取用户的播放列表/Get user play list
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet(secUid: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet(secUid, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 30
         * @summary 获取用户的播放列表/Get user play list
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_23(secUid: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_23(secUid, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User posts  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 20 coverFormat = 2
         * @summary 获取用户的作品列表/Get user posts
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [coverFormat] 封面格式/Cover format
         * @param {number} [postItemListRequestType] 排序方式/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostApiV1TiktokWebFetchUserPostGet(secUid: string, cursor?: number, count?: number, coverFormat?: number, postItemListRequestType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchUserPostApiV1TiktokWebFetchUserPostGet(secUid, cursor, count, coverFormat, postItemListRequestType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User posts  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 20 coverFormat = 2
         * @summary 获取用户的作品列表/Get user posts
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [coverFormat] 封面格式/Cover format
         * @param {number} [postItemListRequestType] 排序方式/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostApiV1TiktokWebFetchUserPostGet_24(secUid: string, cursor?: number, count?: number, coverFormat?: number, postItemListRequestType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchUserPostApiV1TiktokWebFetchUserPostGet_24(secUid, cursor, count, coverFormat, postItemListRequestType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user\'s homepage link. ### Return: - User profile  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" uniqueId = \"tiktok\"
         * @summary 获取用户的个人信息/Get user profile
         * @param {string} [uniqueId] 用户uniqueId/User uniqueId
         * @param {string} [secUid] 用户secUid/User secUid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserProfileApiV1TiktokWebFetchUserProfileGet(uniqueId?: string, secUid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchUserProfileApiV1TiktokWebFetchUserProfileGet(uniqueId, secUid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user\'s homepage link. ### Return: - User profile  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" uniqueId = \"tiktok\"
         * @summary 获取用户的个人信息/Get user profile
         * @param {string} [uniqueId] 用户uniqueId/User uniqueId
         * @param {string} [secUid] 用户secUid/User secUid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserProfileApiV1TiktokWebFetchUserProfileGet_25(uniqueId?: string, secUid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).fetchUserProfileApiV1TiktokWebFetchUserProfileGet_25(uniqueId, secUid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken
         * @summary 生成真实msToken/Generate real msToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken
         * @summary 生成真实msToken/Generate real msToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet_26(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet_26(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie = \"Your_Cookie\"
         * @summary 生成ttwid/Generate ttwid
         * @param {string} cookie 用户cookie/User cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateTtwidApiV1TiktokWebGenerateTtwidGet(cookie: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).generateTtwidApiV1TiktokWebGenerateTtwidGet(cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie = \"Your_Cookie\"
         * @summary 生成ttwid/Generate ttwid
         * @param {string} cookie 用户cookie/User cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateTtwidApiV1TiktokWebGenerateTtwidGet_27(cookie: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).generateTtwidApiV1TiktokWebGenerateTtwidGet_27(cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  ```json {     \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\",     \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" }
         * @summary 生成xbogus/Generate xbogus
         * @param {XBogusModel} [xBogusModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateXbogusApiV1TiktokWebGenerateXbogusPost(xBogusModel?: XBogusModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).generateXbogusApiV1TiktokWebGenerateXbogusPost(xBogusModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  ```json {     \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\",     \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" }
         * @summary 生成xbogus/Generate xbogus
         * @param {XBogusModel} [xBogusModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateXbogusApiV1TiktokWebGenerateXbogusPost_28(xBogusModel?: XBogusModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).generateXbogusApiV1TiktokWebGenerateXbogusPost_28(xBogusModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url = [\"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"]
         * @summary 提取列表作品id/Extract list video id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url = [\"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"]
         * @summary 提取列表作品id/Extract list video id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost_29(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost_29(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持10个链接）、 ### 返回: - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 10 links) ### Return: - If the sec_user_id is successfully obtained, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]
         * @summary 提取列表用户sec_user_id/Extract list user sec_user_id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持10个链接）、 ### 返回: - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 10 links) ### Return: - If the sec_user_id is successfully obtained, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]
         * @summary 提取列表用户sec_user_id/Extract list user sec_user_id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost_30(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost_30(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]
         * @summary 获取列表unique_id/Get list unique_id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]
         * @summary 获取列表unique_id/Get list unique_id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost_31(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost_31(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"
         * @summary 提取单个作品id/Extract single video id
         * @param {string} url 作品链接/Video link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAwemeIdApiV1TiktokWebGetAwemeIdGet(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).getAwemeIdApiV1TiktokWebGetAwemeIdGet(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"
         * @summary 提取单个作品id/Extract single video id
         * @param {string} url 作品链接/Video link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAwemeIdApiV1TiktokWebGetAwemeIdGet_32(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).getAwemeIdApiV1TiktokWebGetAwemeIdGet_32(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 支持短链接，如：https://vt.tiktok.com/ZSjuyJnWQ/ - 支持长链接，如：https://www.tiktok.com/@maksukaracun/live ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - Support short links, such as: https://vt.tiktok.com/ZSjuyJnWQ/ - Support long links, such as: https://www.tiktok.com/@maksukaracun/live ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url = \"https://www.tiktok.com/@maksukaracun/live\"
         * @summary 根据直播间链接提取直播间ID/Extract live room ID from live room link
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet(liveRoomUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet(liveRoomUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 支持短链接，如：https://vt.tiktok.com/ZSjuyJnWQ/ - 支持长链接，如：https://www.tiktok.com/@maksukaracun/live ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - Support short links, such as: https://vt.tiktok.com/ZSjuyJnWQ/ - Support long links, such as: https://www.tiktok.com/@maksukaracun/live ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url = \"https://www.tiktok.com/@maksukaracun/live\"
         * @summary 根据直播间链接提取直播间ID/Extract live room ID from live room link
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_33(liveRoomUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_33(liveRoomUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"
         * @summary 提取用户sec_user_id/Extract user sec_user_id
         * @param {string} url 用户主页链接/User homepage link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSecUserIdApiV1TiktokWebGetSecUserIdGet(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).getSecUserIdApiV1TiktokWebGetSecUserIdGet(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"
         * @summary 提取用户sec_user_id/Extract user sec_user_id
         * @param {string} url 用户主页链接/User homepage link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSecUserIdApiV1TiktokWebGetSecUserIdGet_34(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).getSecUserIdApiV1TiktokWebGetSecUserIdGet_34(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"
         * @summary 获取用户unique_id/Get user unique_id
         * @param {string} url 用户主页链接/User homepage link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUniqueIdApiV1TiktokWebGetUniqueIdGet(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).getUniqueIdApiV1TiktokWebGetUniqueIdGet(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"
         * @summary 获取用户unique_id/Get user unique_id
         * @param {string} url 用户主页链接/User homepage link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUniqueIdApiV1TiktokWebGetUniqueIdGet_35(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokWebAPIApiAxiosParamCreator(configuration).getUniqueIdApiV1TiktokWebGetUniqueIdGet_35(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TikTokWebAPIApi - factory interface
 * @export
 */
export const TikTokWebAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
         * @summary 提取直播间弹幕/Extract live room danmaku
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {string} danmakuType 消息类型/Message type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet(liveRoomUrl: string, danmakuType: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet(liveRoomUrl, danmakuType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
         * @summary 提取直播间弹幕/Extract live room danmaku
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {string} danmakuType 消息类型/Message type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_1(liveRoomUrl: string, danmakuType: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_1(liveRoomUrl, danmakuType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id = \"7381444193462078214\"
         * @summary 直播间开播状态检测/Live room start status check
         * @param {string} roomId 直播间ID/Live room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet(roomId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id = \"7381444193462078214\"
         * @summary 直播间开播状态检测/Live room start status check
         * @param {string} roomId 直播间ID/Live room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_2(roomId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_2(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取探索作品数据 ### 参数: - categoryType: 作品分类     - 100: 动画与漫画     - 101: 表演     - 102: 美容护理     - 103: 游戏     - 104: 喜剧     - 105: 日常生活     - 106: 家庭     - 107: 情感关系     - 108: 戏剧     - 109: 穿搭     - 110: 对口型     - 111: 美食     - 112: 运动     - 113: 动物     - 114: 社会     - 115: 汽车     - 116: 教育     - 117: 健身和健康     - 118: 科技     - 119: 唱歌跳舞     - 120: 全部 - count: 每页数量 ### 返回: - 作品数据  # [English] ### Purpose: - Get explore video data ### Parameters: - categoryType: Video category     - 100: Animation and comics     - 101: Performance     - 102: Beauty care     - 103: Game     - 104: Comedy     - 105: Daily life     - 106: Family     - 107: Emotional relationship     - 108: Drama     - 109: Dress up     - 110: Dubbing     - 111: Food     - 112: Sports     - 113: Animals     - 114: Society     - 115: Car     - 116: Education     - 117: Fitness and health     - 118: Technology     - 119: Singing and dancing     - 120: All - count: Number per page ### Return: - Video data  # [示例/Example] categoryType = \"120\" count = 16
         * @summary 获取探索作品数据/Get explore video data
         * @param {string} [categoryType] 作品分类/Video category
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchExplorePostApiV1TiktokWebFetchExplorePostGet(categoryType?: string, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchExplorePostApiV1TiktokWebFetchExplorePostGet(categoryType, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取探索作品数据 ### 参数: - categoryType: 作品分类     - 100: 动画与漫画     - 101: 表演     - 102: 美容护理     - 103: 游戏     - 104: 喜剧     - 105: 日常生活     - 106: 家庭     - 107: 情感关系     - 108: 戏剧     - 109: 穿搭     - 110: 对口型     - 111: 美食     - 112: 运动     - 113: 动物     - 114: 社会     - 115: 汽车     - 116: 教育     - 117: 健身和健康     - 118: 科技     - 119: 唱歌跳舞     - 120: 全部 - count: 每页数量 ### 返回: - 作品数据  # [English] ### Purpose: - Get explore video data ### Parameters: - categoryType: Video category     - 100: Animation and comics     - 101: Performance     - 102: Beauty care     - 103: Game     - 104: Comedy     - 105: Daily life     - 106: Family     - 107: Emotional relationship     - 108: Drama     - 109: Dress up     - 110: Dubbing     - 111: Food     - 112: Sports     - 113: Animals     - 114: Society     - 115: Car     - 116: Education     - 117: Fitness and health     - 118: Technology     - 119: Singing and dancing     - 120: All - count: Number per page ### Return: - Video data  # [示例/Example] categoryType = \"120\" count = 16
         * @summary 获取探索作品数据/Get explore video data
         * @param {string} [categoryType] 作品分类/Video category
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchExplorePostApiV1TiktokWebFetchExplorePostGet_3(categoryType?: string, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchExplorePostApiV1TiktokWebFetchExplorePostGet_3(categoryType, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword = \"TikTok\" offset = 0 search_id = \"\"
         * @summary 获取综合搜索列表/Get general search list
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [offset] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet(keyword: string, offset?: number, searchId?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet(keyword, offset, searchId, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword = \"TikTok\" offset = 0 search_id = \"\"
         * @summary 获取综合搜索列表/Get general search list
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [offset] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_4(keyword: string, offset?: number, searchId?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_4(keyword, offset, searchId, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 首页推荐作品 ### 参数: - count: 每页数量 - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 首页推荐作品  # [English] ### Purpose: - Home Feed ### Parameters: - count: Number per page - cookie: User\'s own cookie, optional parameter, used for personalized recommendations of interface return data. ### Return: - Home Feed  # [示例/Example] count = 15 Cookie = \"Your_Cookie\"
         * @summary 首页推荐作品/Home Feed
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeFeedApiV1TiktokWebFetchHomeFeedPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchHomeFeedApiV1TiktokWebFetchHomeFeedPost(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 首页推荐作品 ### 参数: - count: 每页数量 - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 首页推荐作品  # [English] ### Purpose: - Home Feed ### Parameters: - count: Number per page - cookie: User\'s own cookie, optional parameter, used for personalized recommendations of interface return data. ### Return: - Home Feed  # [示例/Example] count = 15 Cookie = \"Your_Cookie\"
         * @summary 首页推荐作品/Home Feed
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeFeedApiV1TiktokWebFetchHomeFeedPost_5(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchHomeFeedApiV1TiktokWebFetchHomeFeedPost_5(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag = \"VALORANT\"
         * @summary 获取直播间首页推荐列表/Get live room homepage recommendation list
         * @param {string} relatedLiveTag 相关直播标签/Related live tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet(relatedLiveTag: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet(relatedLiveTag, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag = \"VALORANT\"
         * @summary 获取直播间首页推荐列表/Get live room homepage recommendation list
         * @param {string} relatedLiveTag 相关直播标签/Related live tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_6(relatedLiveTag: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_6(relatedLiveTag, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id = \"7304809083817774382\" cursor = 0 count = 20 current_region = \"\"
         * @summary 获取作品的评论列表/Get video comments
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {string} [currentRegion] 当前地区/Current region
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentApiV1TiktokWebFetchPostCommentGet(awemeId: string, cursor?: number, count?: number, currentRegion?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchPostCommentApiV1TiktokWebFetchPostCommentGet(awemeId, cursor, count, currentRegion, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id = \"7304809083817774382\" cursor = 0 count = 20 current_region = \"\"
         * @summary 获取作品的评论列表/Get video comments
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {string} [currentRegion] 当前地区/Current region
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentApiV1TiktokWebFetchPostCommentGet_7(awemeId: string, cursor?: number, count?: number, currentRegion?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchPostCommentApiV1TiktokWebFetchPostCommentGet_7(awemeId, cursor, count, currentRegion, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id = \"7304809083817774382\" comment_id = \"7304877760886588191\" cursor = 0 count = 20 current_region = \"\"
         * @summary 获取作品的评论回复列表/Get video comment replies
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {string} [currentRegion] 当前地区/Current region
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet(itemId: string, commentId: string, cursor?: number, count?: number, currentRegion?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet(itemId, commentId, cursor, count, currentRegion, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id = \"7304809083817774382\" comment_id = \"7304877760886588191\" cursor = 0 count = 20 current_region = \"\"
         * @summary 获取作品的评论回复列表/Get video comment replies
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {string} [currentRegion] 当前地区/Current region
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_8(itemId: string, commentId: string, cursor?: number, count?: number, currentRegion?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_8(itemId, commentId, cursor, count, currentRegion, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId = \"7339393672959757570\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostDetailApiV1TiktokWebFetchPostDetailGet(itemId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchPostDetailApiV1TiktokWebFetchPostDetailGet(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId = \"7339393672959757570\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostDetailApiV1TiktokWebFetchPostDetailGet_9(itemId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchPostDetailApiV1TiktokWebFetchPostDetailGet_9(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword = \"TikTok\"
         * @summary 搜索关键字推荐/Search keyword suggest
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet(keyword: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword = \"TikTok\"
         * @summary 搜索关键字推荐/Search keyword suggest
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_10(keyword: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_10(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"
         * @summary 搜索直播/Search live
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [offset] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet(keyword: string, count?: number, offset?: number, searchId?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet(keyword, count, offset, searchId, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"
         * @summary 搜索直播/Search live
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [offset] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_11(keyword: string, count?: number, offset?: number, searchId?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_11(keyword, count, offset, searchId, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword = \"TikTok\" cursor = 0 search_id = \"\"
         * @summary 搜索用户/Search user
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchUserApiV1TiktokWebFetchSearchUserGet(keyword: string, cursor?: number, searchId?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchSearchUserApiV1TiktokWebFetchSearchUserGet(keyword, cursor, searchId, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword = \"TikTok\" cursor = 0 search_id = \"\"
         * @summary 搜索用户/Search user
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchUserApiV1TiktokWebFetchSearchUserGet_12(keyword: string, cursor?: number, searchId?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchSearchUserApiV1TiktokWebFetchSearchUserGet_12(keyword, cursor, searchId, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"
         * @summary 搜索视频/Search video
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [offset] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet(keyword: string, count?: number, offset?: number, searchId?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet(keyword, count, offset, searchId, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"
         * @summary 搜索视频/Search video
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [offset] 翻页游标/Page cursor
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_13(keyword: string, count?: number, offset?: number, searchId?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_13(keyword, count, offset, searchId, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name = \"tiktok\"
         * @summary Tag详情/Tag Detail
         * @param {string} tagName Tag名称/Tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTagDetailApiV1TiktokWebFetchTagDetailGet(tagName: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchTagDetailApiV1TiktokWebFetchTagDetailGet(tagName, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name = \"tiktok\"
         * @summary Tag详情/Tag Detail
         * @param {string} tagName Tag名称/Tag name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTagDetailApiV1TiktokWebFetchTagDetailGet_14(tagName: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchTagDetailApiV1TiktokWebFetchTagDetailGet_14(tagName, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID = \"7551\" count = 30 cursor = 0
         * @summary Tag作品/Tag Post
         * @param {string} challengeID Tag ID
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTagPostApiV1TiktokWebFetchTagPostGet(challengeID: string, count?: number, cursor?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchTagPostApiV1TiktokWebFetchTagPostGet(challengeID, count, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID = \"7551\" count = 30 cursor = 0
         * @summary Tag作品/Tag Post
         * @param {string} challengeID Tag ID
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTagPostApiV1TiktokWebFetchTagPostGet_15(challengeID: string, count?: number, cursor?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchTagPostApiV1TiktokWebFetchTagPostGet_15(challengeID, count, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url = \"https://www.tiktok.com/@.caseoh_daily/live\"
         * @summary 通过直播链接获取直播间信息/Get live room information via live link
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet(liveRoomUrl: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet(liveRoomUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url = \"https://www.tiktok.com/@.caseoh_daily/live\"
         * @summary 通过直播链接获取直播间信息/Get live room information via live link
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_16(liveRoomUrl: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_16(liveRoomUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取每日热门内容作品数据 ### 返回: - 作品数据  # [English] ### Purpose: - Get daily trending video data ### Return: - Video data  # [示例/Example]
         * @summary 获取每日热门内容作品数据/Get daily trending video data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTrendingPostApiV1TiktokWebFetchTrendingPostGet(options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchTrendingPostApiV1TiktokWebFetchTrendingPostGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取每日热门内容作品数据 ### 返回: - 作品数据  # [English] ### Purpose: - Get daily trending video data ### Return: - Video data  # [示例/Example]
         * @summary 获取每日热门内容作品数据/Get daily trending video data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTrendingPostApiV1TiktokWebFetchTrendingPostGet_17(options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchTrendingPostApiV1TiktokWebFetchTrendingPostGet_17(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie = \"Your_Cookie\" secUid = \"Your_SecUid\" cursor = 0 count = 30 coverFormat = 2
         * @summary 获取用户的收藏列表/Get user favorites
         * @param {string} cookie 用户cookie/User cookie
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [coverFormat] 封面格式/Cover format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserCollectApiV1TiktokWebFetchUserCollectGet(cookie: string, secUid: string, cursor?: number, count?: number, coverFormat?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchUserCollectApiV1TiktokWebFetchUserCollectGet(cookie, secUid, cursor, count, coverFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie = \"Your_Cookie\" secUid = \"Your_SecUid\" cursor = 0 count = 30 coverFormat = 2
         * @summary 获取用户的收藏列表/Get user favorites
         * @param {string} cookie 用户cookie/User cookie
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [coverFormat] 封面格式/Cover format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserCollectApiV1TiktokWebFetchUserCollectGet_18(cookie: string, secUid: string, cursor?: number, count?: number, coverFormat?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchUserCollectApiV1TiktokWebFetchUserCollectGet_18(cookie, secUid, cursor, count, coverFormat, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0
         * @summary 获取用户的粉丝列表/Get user followers
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [maxCursor] 最大游标/Max cursor
         * @param {number} [minCursor] 最小游标/Min cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFansApiV1TiktokWebFetchUserFansGet(secUid: string, count?: number, maxCursor?: number, minCursor?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchUserFansApiV1TiktokWebFetchUserFansGet(secUid, count, maxCursor, minCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0
         * @summary 获取用户的粉丝列表/Get user followers
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [maxCursor] 最大游标/Max cursor
         * @param {number} [minCursor] 最小游标/Min cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFansApiV1TiktokWebFetchUserFansGet_19(secUid: string, count?: number, maxCursor?: number, minCursor?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchUserFansApiV1TiktokWebFetchUserFansGet_19(secUid, count, maxCursor, minCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0
         * @summary 获取用户的关注列表/Get user followings
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [maxCursor] 最大游标/Max cursor
         * @param {number} [minCursor] 最小游标/Min cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowApiV1TiktokWebFetchUserFollowGet(secUid: string, count?: number, maxCursor?: number, minCursor?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchUserFollowApiV1TiktokWebFetchUserFollowGet(secUid, count, maxCursor, minCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0
         * @summary 获取用户的关注列表/Get user followings
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [maxCursor] 最大游标/Max cursor
         * @param {number} [minCursor] 最小游标/Min cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowApiV1TiktokWebFetchUserFollowGet_20(secUid: string, count?: number, maxCursor?: number, minCursor?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchUserFollowApiV1TiktokWebFetchUserFollowGet_20(secUid, count, maxCursor, minCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user\'s like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User likes  # [示例/Example] secUid = \"MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\" cursor = 0 count = 20 coverFormat = 2
         * @summary 获取用户的点赞列表/Get user likes
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [coverFormat] 封面格式/Cover format
         * @param {number} [postItemListRequestType] 排序方式/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeApiV1TiktokWebFetchUserLikeGet(secUid: string, cursor?: number, count?: number, coverFormat?: number, postItemListRequestType?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchUserLikeApiV1TiktokWebFetchUserLikeGet(secUid, cursor, count, coverFormat, postItemListRequestType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user\'s like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User likes  # [示例/Example] secUid = \"MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\" cursor = 0 count = 20 coverFormat = 2
         * @summary 获取用户的点赞列表/Get user likes
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [coverFormat] 封面格式/Cover format
         * @param {number} [postItemListRequestType] 排序方式/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeApiV1TiktokWebFetchUserLikeGet_21(secUid: string, cursor?: number, count?: number, coverFormat?: number, postItemListRequestType?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchUserLikeApiV1TiktokWebFetchUserLikeGet_21(secUid, cursor, count, coverFormat, postItemListRequestType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId = \"7101538765474106158\" cursor = 0 count = 30
         * @summary 获取用户的合辑列表/Get user mix list
         * @param {string} mixId 合辑id/Mix id
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserMixApiV1TiktokWebFetchUserMixGet(mixId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchUserMixApiV1TiktokWebFetchUserMixGet(mixId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId = \"7101538765474106158\" cursor = 0 count = 30
         * @summary 获取用户的合辑列表/Get user mix list
         * @param {string} mixId 合辑id/Mix id
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserMixApiV1TiktokWebFetchUserMixGet_22(mixId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchUserMixApiV1TiktokWebFetchUserMixGet_22(mixId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 30
         * @summary 获取用户的播放列表/Get user play list
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet(secUid: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet(secUid, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 30
         * @summary 获取用户的播放列表/Get user play list
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_23(secUid: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_23(secUid, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User posts  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 20 coverFormat = 2
         * @summary 获取用户的作品列表/Get user posts
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [coverFormat] 封面格式/Cover format
         * @param {number} [postItemListRequestType] 排序方式/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostApiV1TiktokWebFetchUserPostGet(secUid: string, cursor?: number, count?: number, coverFormat?: number, postItemListRequestType?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchUserPostApiV1TiktokWebFetchUserPostGet(secUid, cursor, count, coverFormat, postItemListRequestType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User posts  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 20 coverFormat = 2
         * @summary 获取用户的作品列表/Get user posts
         * @param {string} secUid 用户secUid/User secUid
         * @param {number} [cursor] 翻页游标/Page cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [coverFormat] 封面格式/Cover format
         * @param {number} [postItemListRequestType] 排序方式/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostApiV1TiktokWebFetchUserPostGet_24(secUid: string, cursor?: number, count?: number, coverFormat?: number, postItemListRequestType?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchUserPostApiV1TiktokWebFetchUserPostGet_24(secUid, cursor, count, coverFormat, postItemListRequestType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user\'s homepage link. ### Return: - User profile  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" uniqueId = \"tiktok\"
         * @summary 获取用户的个人信息/Get user profile
         * @param {string} [uniqueId] 用户uniqueId/User uniqueId
         * @param {string} [secUid] 用户secUid/User secUid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserProfileApiV1TiktokWebFetchUserProfileGet(uniqueId?: string, secUid?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchUserProfileApiV1TiktokWebFetchUserProfileGet(uniqueId, secUid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user\'s homepage link. ### Return: - User profile  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" uniqueId = \"tiktok\"
         * @summary 获取用户的个人信息/Get user profile
         * @param {string} [uniqueId] 用户uniqueId/User uniqueId
         * @param {string} [secUid] 用户secUid/User secUid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserProfileApiV1TiktokWebFetchUserProfileGet_25(uniqueId?: string, secUid?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).fetchUserProfileApiV1TiktokWebFetchUserProfileGet_25(uniqueId, secUid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken
         * @summary 生成真实msToken/Generate real msToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet(options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken
         * @summary 生成真实msToken/Generate real msToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet_26(options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet_26(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie = \"Your_Cookie\"
         * @summary 生成ttwid/Generate ttwid
         * @param {string} cookie 用户cookie/User cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTtwidApiV1TiktokWebGenerateTtwidGet(cookie: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).generateTtwidApiV1TiktokWebGenerateTtwidGet(cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie = \"Your_Cookie\"
         * @summary 生成ttwid/Generate ttwid
         * @param {string} cookie 用户cookie/User cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTtwidApiV1TiktokWebGenerateTtwidGet_27(cookie: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).generateTtwidApiV1TiktokWebGenerateTtwidGet_27(cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  ```json {     \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\",     \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" }
         * @summary 生成xbogus/Generate xbogus
         * @param {XBogusModel} [xBogusModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateXbogusApiV1TiktokWebGenerateXbogusPost(xBogusModel?: XBogusModel, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).generateXbogusApiV1TiktokWebGenerateXbogusPost(xBogusModel, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  ```json {     \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\",     \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" }
         * @summary 生成xbogus/Generate xbogus
         * @param {XBogusModel} [xBogusModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateXbogusApiV1TiktokWebGenerateXbogusPost_28(xBogusModel?: XBogusModel, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).generateXbogusApiV1TiktokWebGenerateXbogusPost_28(xBogusModel, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url = [\"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"]
         * @summary 提取列表作品id/Extract list video id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url = [\"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"]
         * @summary 提取列表作品id/Extract list video id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost_29(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost_29(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持10个链接）、 ### 返回: - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 10 links) ### Return: - If the sec_user_id is successfully obtained, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]
         * @summary 提取列表用户sec_user_id/Extract list user sec_user_id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持10个链接）、 ### 返回: - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 10 links) ### Return: - If the sec_user_id is successfully obtained, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]
         * @summary 提取列表用户sec_user_id/Extract list user sec_user_id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost_30(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost_30(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]
         * @summary 获取列表unique_id/Get list unique_id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]
         * @summary 获取列表unique_id/Get list unique_id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost_31(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost_31(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"
         * @summary 提取单个作品id/Extract single video id
         * @param {string} url 作品链接/Video link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAwemeIdApiV1TiktokWebGetAwemeIdGet(url: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).getAwemeIdApiV1TiktokWebGetAwemeIdGet(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"
         * @summary 提取单个作品id/Extract single video id
         * @param {string} url 作品链接/Video link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAwemeIdApiV1TiktokWebGetAwemeIdGet_32(url: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).getAwemeIdApiV1TiktokWebGetAwemeIdGet_32(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 支持短链接，如：https://vt.tiktok.com/ZSjuyJnWQ/ - 支持长链接，如：https://www.tiktok.com/@maksukaracun/live ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - Support short links, such as: https://vt.tiktok.com/ZSjuyJnWQ/ - Support long links, such as: https://www.tiktok.com/@maksukaracun/live ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url = \"https://www.tiktok.com/@maksukaracun/live\"
         * @summary 根据直播间链接提取直播间ID/Extract live room ID from live room link
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet(liveRoomUrl: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet(liveRoomUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 支持短链接，如：https://vt.tiktok.com/ZSjuyJnWQ/ - 支持长链接，如：https://www.tiktok.com/@maksukaracun/live ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - Support short links, such as: https://vt.tiktok.com/ZSjuyJnWQ/ - Support long links, such as: https://www.tiktok.com/@maksukaracun/live ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url = \"https://www.tiktok.com/@maksukaracun/live\"
         * @summary 根据直播间链接提取直播间ID/Extract live room ID from live room link
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_33(liveRoomUrl: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_33(liveRoomUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"
         * @summary 提取用户sec_user_id/Extract user sec_user_id
         * @param {string} url 用户主页链接/User homepage link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecUserIdApiV1TiktokWebGetSecUserIdGet(url: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).getSecUserIdApiV1TiktokWebGetSecUserIdGet(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"
         * @summary 提取用户sec_user_id/Extract user sec_user_id
         * @param {string} url 用户主页链接/User homepage link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecUserIdApiV1TiktokWebGetSecUserIdGet_34(url: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).getSecUserIdApiV1TiktokWebGetSecUserIdGet_34(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"
         * @summary 获取用户unique_id/Get user unique_id
         * @param {string} url 用户主页链接/User homepage link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniqueIdApiV1TiktokWebGetUniqueIdGet(url: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).getUniqueIdApiV1TiktokWebGetUniqueIdGet(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"
         * @summary 获取用户unique_id/Get user unique_id
         * @param {string} url 用户主页链接/User homepage link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUniqueIdApiV1TiktokWebGetUniqueIdGet_35(url: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokWebAPIApiFp(configuration).getUniqueIdApiV1TiktokWebGetUniqueIdGet_35(url, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TikTokWebAPIApi - interface
 * @export
 * @interface TikTokWebAPIApi
 */
export interface TikTokWebAPIApiInterface {
    /**
     * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
     * @summary 提取直播间弹幕/Extract live room danmaku
     * @param {string} liveRoomUrl 直播间链接/Live room link
     * @param {string} danmakuType 消息类型/Message type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet(liveRoomUrl: string, danmakuType: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
     * @summary 提取直播间弹幕/Extract live room danmaku
     * @param {string} liveRoomUrl 直播间链接/Live room link
     * @param {string} danmakuType 消息类型/Message type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_1(liveRoomUrl: string, danmakuType: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id = \"7381444193462078214\"
     * @summary 直播间开播状态检测/Live room start status check
     * @param {string} roomId 直播间ID/Live room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet(roomId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id = \"7381444193462078214\"
     * @summary 直播间开播状态检测/Live room start status check
     * @param {string} roomId 直播间ID/Live room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_2(roomId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取探索作品数据 ### 参数: - categoryType: 作品分类     - 100: 动画与漫画     - 101: 表演     - 102: 美容护理     - 103: 游戏     - 104: 喜剧     - 105: 日常生活     - 106: 家庭     - 107: 情感关系     - 108: 戏剧     - 109: 穿搭     - 110: 对口型     - 111: 美食     - 112: 运动     - 113: 动物     - 114: 社会     - 115: 汽车     - 116: 教育     - 117: 健身和健康     - 118: 科技     - 119: 唱歌跳舞     - 120: 全部 - count: 每页数量 ### 返回: - 作品数据  # [English] ### Purpose: - Get explore video data ### Parameters: - categoryType: Video category     - 100: Animation and comics     - 101: Performance     - 102: Beauty care     - 103: Game     - 104: Comedy     - 105: Daily life     - 106: Family     - 107: Emotional relationship     - 108: Drama     - 109: Dress up     - 110: Dubbing     - 111: Food     - 112: Sports     - 113: Animals     - 114: Society     - 115: Car     - 116: Education     - 117: Fitness and health     - 118: Technology     - 119: Singing and dancing     - 120: All - count: Number per page ### Return: - Video data  # [示例/Example] categoryType = \"120\" count = 16
     * @summary 获取探索作品数据/Get explore video data
     * @param {string} [categoryType] 作品分类/Video category
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchExplorePostApiV1TiktokWebFetchExplorePostGet(categoryType?: string, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取探索作品数据 ### 参数: - categoryType: 作品分类     - 100: 动画与漫画     - 101: 表演     - 102: 美容护理     - 103: 游戏     - 104: 喜剧     - 105: 日常生活     - 106: 家庭     - 107: 情感关系     - 108: 戏剧     - 109: 穿搭     - 110: 对口型     - 111: 美食     - 112: 运动     - 113: 动物     - 114: 社会     - 115: 汽车     - 116: 教育     - 117: 健身和健康     - 118: 科技     - 119: 唱歌跳舞     - 120: 全部 - count: 每页数量 ### 返回: - 作品数据  # [English] ### Purpose: - Get explore video data ### Parameters: - categoryType: Video category     - 100: Animation and comics     - 101: Performance     - 102: Beauty care     - 103: Game     - 104: Comedy     - 105: Daily life     - 106: Family     - 107: Emotional relationship     - 108: Drama     - 109: Dress up     - 110: Dubbing     - 111: Food     - 112: Sports     - 113: Animals     - 114: Society     - 115: Car     - 116: Education     - 117: Fitness and health     - 118: Technology     - 119: Singing and dancing     - 120: All - count: Number per page ### Return: - Video data  # [示例/Example] categoryType = \"120\" count = 16
     * @summary 获取探索作品数据/Get explore video data
     * @param {string} [categoryType] 作品分类/Video category
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchExplorePostApiV1TiktokWebFetchExplorePostGet_3(categoryType?: string, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword = \"TikTok\" offset = 0 search_id = \"\"
     * @summary 获取综合搜索列表/Get general search list
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {number} [offset] 翻页游标/Page cursor
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet(keyword: string, offset?: number, searchId?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword = \"TikTok\" offset = 0 search_id = \"\"
     * @summary 获取综合搜索列表/Get general search list
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {number} [offset] 翻页游标/Page cursor
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_4(keyword: string, offset?: number, searchId?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 首页推荐作品 ### 参数: - count: 每页数量 - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 首页推荐作品  # [English] ### Purpose: - Home Feed ### Parameters: - count: Number per page - cookie: User\'s own cookie, optional parameter, used for personalized recommendations of interface return data. ### Return: - Home Feed  # [示例/Example] count = 15 Cookie = \"Your_Cookie\"
     * @summary 首页推荐作品/Home Feed
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchHomeFeedApiV1TiktokWebFetchHomeFeedPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 首页推荐作品 ### 参数: - count: 每页数量 - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 首页推荐作品  # [English] ### Purpose: - Home Feed ### Parameters: - count: Number per page - cookie: User\'s own cookie, optional parameter, used for personalized recommendations of interface return data. ### Return: - Home Feed  # [示例/Example] count = 15 Cookie = \"Your_Cookie\"
     * @summary 首页推荐作品/Home Feed
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchHomeFeedApiV1TiktokWebFetchHomeFeedPost_5(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag = \"VALORANT\"
     * @summary 获取直播间首页推荐列表/Get live room homepage recommendation list
     * @param {string} relatedLiveTag 相关直播标签/Related live tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet(relatedLiveTag: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag = \"VALORANT\"
     * @summary 获取直播间首页推荐列表/Get live room homepage recommendation list
     * @param {string} relatedLiveTag 相关直播标签/Related live tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_6(relatedLiveTag: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id = \"7304809083817774382\" cursor = 0 count = 20 current_region = \"\"
     * @summary 获取作品的评论列表/Get video comments
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {string} [currentRegion] 当前地区/Current region
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchPostCommentApiV1TiktokWebFetchPostCommentGet(awemeId: string, cursor?: number, count?: number, currentRegion?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id = \"7304809083817774382\" cursor = 0 count = 20 current_region = \"\"
     * @summary 获取作品的评论列表/Get video comments
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {string} [currentRegion] 当前地区/Current region
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchPostCommentApiV1TiktokWebFetchPostCommentGet_7(awemeId: string, cursor?: number, count?: number, currentRegion?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id = \"7304809083817774382\" comment_id = \"7304877760886588191\" cursor = 0 count = 20 current_region = \"\"
     * @summary 获取作品的评论回复列表/Get video comment replies
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {string} [currentRegion] 当前地区/Current region
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet(itemId: string, commentId: string, cursor?: number, count?: number, currentRegion?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id = \"7304809083817774382\" comment_id = \"7304877760886588191\" cursor = 0 count = 20 current_region = \"\"
     * @summary 获取作品的评论回复列表/Get video comment replies
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {string} [currentRegion] 当前地区/Current region
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_8(itemId: string, commentId: string, cursor?: number, count?: number, currentRegion?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId = \"7339393672959757570\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} itemId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchPostDetailApiV1TiktokWebFetchPostDetailGet(itemId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId = \"7339393672959757570\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} itemId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchPostDetailApiV1TiktokWebFetchPostDetailGet_9(itemId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword = \"TikTok\"
     * @summary 搜索关键字推荐/Search keyword suggest
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet(keyword: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword = \"TikTok\"
     * @summary 搜索关键字推荐/Search keyword suggest
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_10(keyword: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"
     * @summary 搜索直播/Search live
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [offset] 翻页游标/Page cursor
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet(keyword: string, count?: number, offset?: number, searchId?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"
     * @summary 搜索直播/Search live
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [offset] 翻页游标/Page cursor
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_11(keyword: string, count?: number, offset?: number, searchId?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword = \"TikTok\" cursor = 0 search_id = \"\"
     * @summary 搜索用户/Search user
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchSearchUserApiV1TiktokWebFetchSearchUserGet(keyword: string, cursor?: number, searchId?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword = \"TikTok\" cursor = 0 search_id = \"\"
     * @summary 搜索用户/Search user
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchSearchUserApiV1TiktokWebFetchSearchUserGet_12(keyword: string, cursor?: number, searchId?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"
     * @summary 搜索视频/Search video
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [offset] 翻页游标/Page cursor
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet(keyword: string, count?: number, offset?: number, searchId?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"
     * @summary 搜索视频/Search video
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [offset] 翻页游标/Page cursor
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_13(keyword: string, count?: number, offset?: number, searchId?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name = \"tiktok\"
     * @summary Tag详情/Tag Detail
     * @param {string} tagName Tag名称/Tag name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchTagDetailApiV1TiktokWebFetchTagDetailGet(tagName: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name = \"tiktok\"
     * @summary Tag详情/Tag Detail
     * @param {string} tagName Tag名称/Tag name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchTagDetailApiV1TiktokWebFetchTagDetailGet_14(tagName: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID = \"7551\" count = 30 cursor = 0
     * @summary Tag作品/Tag Post
     * @param {string} challengeID Tag ID
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchTagPostApiV1TiktokWebFetchTagPostGet(challengeID: string, count?: number, cursor?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID = \"7551\" count = 30 cursor = 0
     * @summary Tag作品/Tag Post
     * @param {string} challengeID Tag ID
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchTagPostApiV1TiktokWebFetchTagPostGet_15(challengeID: string, count?: number, cursor?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url = \"https://www.tiktok.com/@.caseoh_daily/live\"
     * @summary 通过直播链接获取直播间信息/Get live room information via live link
     * @param {string} liveRoomUrl 直播间链接/Live room link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet(liveRoomUrl: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url = \"https://www.tiktok.com/@.caseoh_daily/live\"
     * @summary 通过直播链接获取直播间信息/Get live room information via live link
     * @param {string} liveRoomUrl 直播间链接/Live room link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_16(liveRoomUrl: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取每日热门内容作品数据 ### 返回: - 作品数据  # [English] ### Purpose: - Get daily trending video data ### Return: - Video data  # [示例/Example]
     * @summary 获取每日热门内容作品数据/Get daily trending video data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchTrendingPostApiV1TiktokWebFetchTrendingPostGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取每日热门内容作品数据 ### 返回: - 作品数据  # [English] ### Purpose: - Get daily trending video data ### Return: - Video data  # [示例/Example]
     * @summary 获取每日热门内容作品数据/Get daily trending video data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchTrendingPostApiV1TiktokWebFetchTrendingPostGet_17(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie = \"Your_Cookie\" secUid = \"Your_SecUid\" cursor = 0 count = 30 coverFormat = 2
     * @summary 获取用户的收藏列表/Get user favorites
     * @param {string} cookie 用户cookie/User cookie
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [coverFormat] 封面格式/Cover format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchUserCollectApiV1TiktokWebFetchUserCollectGet(cookie: string, secUid: string, cursor?: number, count?: number, coverFormat?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie = \"Your_Cookie\" secUid = \"Your_SecUid\" cursor = 0 count = 30 coverFormat = 2
     * @summary 获取用户的收藏列表/Get user favorites
     * @param {string} cookie 用户cookie/User cookie
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [coverFormat] 封面格式/Cover format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchUserCollectApiV1TiktokWebFetchUserCollectGet_18(cookie: string, secUid: string, cursor?: number, count?: number, coverFormat?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0
     * @summary 获取用户的粉丝列表/Get user followers
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [maxCursor] 最大游标/Max cursor
     * @param {number} [minCursor] 最小游标/Min cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchUserFansApiV1TiktokWebFetchUserFansGet(secUid: string, count?: number, maxCursor?: number, minCursor?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0
     * @summary 获取用户的粉丝列表/Get user followers
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [maxCursor] 最大游标/Max cursor
     * @param {number} [minCursor] 最小游标/Min cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchUserFansApiV1TiktokWebFetchUserFansGet_19(secUid: string, count?: number, maxCursor?: number, minCursor?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0
     * @summary 获取用户的关注列表/Get user followings
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [maxCursor] 最大游标/Max cursor
     * @param {number} [minCursor] 最小游标/Min cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchUserFollowApiV1TiktokWebFetchUserFollowGet(secUid: string, count?: number, maxCursor?: number, minCursor?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0
     * @summary 获取用户的关注列表/Get user followings
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [maxCursor] 最大游标/Max cursor
     * @param {number} [minCursor] 最小游标/Min cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchUserFollowApiV1TiktokWebFetchUserFollowGet_20(secUid: string, count?: number, maxCursor?: number, minCursor?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user\'s like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User likes  # [示例/Example] secUid = \"MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\" cursor = 0 count = 20 coverFormat = 2
     * @summary 获取用户的点赞列表/Get user likes
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [coverFormat] 封面格式/Cover format
     * @param {number} [postItemListRequestType] 排序方式/Sort type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchUserLikeApiV1TiktokWebFetchUserLikeGet(secUid: string, cursor?: number, count?: number, coverFormat?: number, postItemListRequestType?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user\'s like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User likes  # [示例/Example] secUid = \"MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\" cursor = 0 count = 20 coverFormat = 2
     * @summary 获取用户的点赞列表/Get user likes
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [coverFormat] 封面格式/Cover format
     * @param {number} [postItemListRequestType] 排序方式/Sort type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchUserLikeApiV1TiktokWebFetchUserLikeGet_21(secUid: string, cursor?: number, count?: number, coverFormat?: number, postItemListRequestType?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId = \"7101538765474106158\" cursor = 0 count = 30
     * @summary 获取用户的合辑列表/Get user mix list
     * @param {string} mixId 合辑id/Mix id
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchUserMixApiV1TiktokWebFetchUserMixGet(mixId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId = \"7101538765474106158\" cursor = 0 count = 30
     * @summary 获取用户的合辑列表/Get user mix list
     * @param {string} mixId 合辑id/Mix id
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchUserMixApiV1TiktokWebFetchUserMixGet_22(mixId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 30
     * @summary 获取用户的播放列表/Get user play list
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet(secUid: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 30
     * @summary 获取用户的播放列表/Get user play list
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_23(secUid: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User posts  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 20 coverFormat = 2
     * @summary 获取用户的作品列表/Get user posts
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [coverFormat] 封面格式/Cover format
     * @param {number} [postItemListRequestType] 排序方式/Sort type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchUserPostApiV1TiktokWebFetchUserPostGet(secUid: string, cursor?: number, count?: number, coverFormat?: number, postItemListRequestType?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User posts  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 20 coverFormat = 2
     * @summary 获取用户的作品列表/Get user posts
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [coverFormat] 封面格式/Cover format
     * @param {number} [postItemListRequestType] 排序方式/Sort type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchUserPostApiV1TiktokWebFetchUserPostGet_24(secUid: string, cursor?: number, count?: number, coverFormat?: number, postItemListRequestType?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user\'s homepage link. ### Return: - User profile  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" uniqueId = \"tiktok\"
     * @summary 获取用户的个人信息/Get user profile
     * @param {string} [uniqueId] 用户uniqueId/User uniqueId
     * @param {string} [secUid] 用户secUid/User secUid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchUserProfileApiV1TiktokWebFetchUserProfileGet(uniqueId?: string, secUid?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user\'s homepage link. ### Return: - User profile  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" uniqueId = \"tiktok\"
     * @summary 获取用户的个人信息/Get user profile
     * @param {string} [uniqueId] 用户uniqueId/User uniqueId
     * @param {string} [secUid] 用户secUid/User secUid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    fetchUserProfileApiV1TiktokWebFetchUserProfileGet_25(uniqueId?: string, secUid?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken
     * @summary 生成真实msToken/Generate real msToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken
     * @summary 生成真实msToken/Generate real msToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet_26(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie = \"Your_Cookie\"
     * @summary 生成ttwid/Generate ttwid
     * @param {string} cookie 用户cookie/User cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    generateTtwidApiV1TiktokWebGenerateTtwidGet(cookie: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie = \"Your_Cookie\"
     * @summary 生成ttwid/Generate ttwid
     * @param {string} cookie 用户cookie/User cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    generateTtwidApiV1TiktokWebGenerateTtwidGet_27(cookie: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  ```json {     \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\",     \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" }
     * @summary 生成xbogus/Generate xbogus
     * @param {XBogusModel} [xBogusModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    generateXbogusApiV1TiktokWebGenerateXbogusPost(xBogusModel?: XBogusModel, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  ```json {     \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\",     \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" }
     * @summary 生成xbogus/Generate xbogus
     * @param {XBogusModel} [xBogusModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    generateXbogusApiV1TiktokWebGenerateXbogusPost_28(xBogusModel?: XBogusModel, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url = [\"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"]
     * @summary 提取列表作品id/Extract list video id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url = [\"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"]
     * @summary 提取列表作品id/Extract list video id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost_29(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持10个链接）、 ### 返回: - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 10 links) ### Return: - If the sec_user_id is successfully obtained, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]
     * @summary 提取列表用户sec_user_id/Extract list user sec_user_id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持10个链接）、 ### 返回: - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 10 links) ### Return: - If the sec_user_id is successfully obtained, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]
     * @summary 提取列表用户sec_user_id/Extract list user sec_user_id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost_30(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]
     * @summary 获取列表unique_id/Get list unique_id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]
     * @summary 获取列表unique_id/Get list unique_id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost_31(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"
     * @summary 提取单个作品id/Extract single video id
     * @param {string} url 作品链接/Video link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    getAwemeIdApiV1TiktokWebGetAwemeIdGet(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"
     * @summary 提取单个作品id/Extract single video id
     * @param {string} url 作品链接/Video link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    getAwemeIdApiV1TiktokWebGetAwemeIdGet_32(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 支持短链接，如：https://vt.tiktok.com/ZSjuyJnWQ/ - 支持长链接，如：https://www.tiktok.com/@maksukaracun/live ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - Support short links, such as: https://vt.tiktok.com/ZSjuyJnWQ/ - Support long links, such as: https://www.tiktok.com/@maksukaracun/live ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url = \"https://www.tiktok.com/@maksukaracun/live\"
     * @summary 根据直播间链接提取直播间ID/Extract live room ID from live room link
     * @param {string} liveRoomUrl 直播间链接/Live room link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet(liveRoomUrl: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 支持短链接，如：https://vt.tiktok.com/ZSjuyJnWQ/ - 支持长链接，如：https://www.tiktok.com/@maksukaracun/live ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - Support short links, such as: https://vt.tiktok.com/ZSjuyJnWQ/ - Support long links, such as: https://www.tiktok.com/@maksukaracun/live ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url = \"https://www.tiktok.com/@maksukaracun/live\"
     * @summary 根据直播间链接提取直播间ID/Extract live room ID from live room link
     * @param {string} liveRoomUrl 直播间链接/Live room link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_33(liveRoomUrl: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"
     * @summary 提取用户sec_user_id/Extract user sec_user_id
     * @param {string} url 用户主页链接/User homepage link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    getSecUserIdApiV1TiktokWebGetSecUserIdGet(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"
     * @summary 提取用户sec_user_id/Extract user sec_user_id
     * @param {string} url 用户主页链接/User homepage link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    getSecUserIdApiV1TiktokWebGetSecUserIdGet_34(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"
     * @summary 获取用户unique_id/Get user unique_id
     * @param {string} url 用户主页链接/User homepage link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    getUniqueIdApiV1TiktokWebGetUniqueIdGet(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"
     * @summary 获取用户unique_id/Get user unique_id
     * @param {string} url 用户主页链接/User homepage link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApiInterface
     */
    getUniqueIdApiV1TiktokWebGetUniqueIdGet_35(url: string, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * TikTokWebAPIApi - object-oriented interface
 * @export
 * @class TikTokWebAPIApi
 * @extends {BaseAPI}
 */
export class TikTokWebAPIApi extends BaseAPI implements TikTokWebAPIApiInterface {
    /**
     * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
     * @summary 提取直播间弹幕/Extract live room danmaku
     * @param {string} liveRoomUrl 直播间链接/Live room link
     * @param {string} danmakuType 消息类型/Message type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet(liveRoomUrl: string, danmakuType: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet(liveRoomUrl, danmakuType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastChatMessage: 聊天消息     - WebcastMemberMessage: 成员消息     - WebcastRoomUserSeqMessage: 用户序列消息     - WebcastGiftMessage: 礼物消息     - WebcastSocialMessage: 社交消息     - WebcastLikeMessage: 点赞消息     - WebcastLinkMicFanTicketMethod: 连麦粉丝票方法     - WebcastLinkMicMethod: 连麦方法 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discount. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastChatMessage: Chat message     - WebcastMemberMessage: Member message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastLikeMessage: Like message     - WebcastLinkMicFanTicketMethod: Link Mic Fan Ticket Method     - WebcastLinkMicMethod: Link Mic Method ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
     * @summary 提取直播间弹幕/Extract live room danmaku
     * @param {string} liveRoomUrl 直播间链接/Live room link
     * @param {string} danmakuType 消息类型/Message type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_1(liveRoomUrl: string, danmakuType: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).douyinLiveRoomApiV1TiktokWebTiktokLiveRoomGet_1(liveRoomUrl, danmakuType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id = \"7381444193462078214\"
     * @summary 直播间开播状态检测/Live room start status check
     * @param {string} roomId 直播间ID/Live room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet(roomId: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 直播间开播状态检测 - 如果当前直播间不存在或已下播，则返回空。 ### 参数: - room_id: 直播间ID ### 返回: - 直播间开播状态  # [English] ### Purpose: - Live room start status check - If the current live room does not exist or has ended, it will return empty. ### Parameters: - room_id: Live room ID ### Return: - Live room start status  # [示例/Example] room_id = \"7381444193462078214\"
     * @summary 直播间开播状态检测/Live room start status check
     * @param {string} roomId 直播间ID/Live room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_2(roomId: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchCheckLiveAliveApiV1TiktokWebFetchCheckLiveAliveGet_2(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取探索作品数据 ### 参数: - categoryType: 作品分类     - 100: 动画与漫画     - 101: 表演     - 102: 美容护理     - 103: 游戏     - 104: 喜剧     - 105: 日常生活     - 106: 家庭     - 107: 情感关系     - 108: 戏剧     - 109: 穿搭     - 110: 对口型     - 111: 美食     - 112: 运动     - 113: 动物     - 114: 社会     - 115: 汽车     - 116: 教育     - 117: 健身和健康     - 118: 科技     - 119: 唱歌跳舞     - 120: 全部 - count: 每页数量 ### 返回: - 作品数据  # [English] ### Purpose: - Get explore video data ### Parameters: - categoryType: Video category     - 100: Animation and comics     - 101: Performance     - 102: Beauty care     - 103: Game     - 104: Comedy     - 105: Daily life     - 106: Family     - 107: Emotional relationship     - 108: Drama     - 109: Dress up     - 110: Dubbing     - 111: Food     - 112: Sports     - 113: Animals     - 114: Society     - 115: Car     - 116: Education     - 117: Fitness and health     - 118: Technology     - 119: Singing and dancing     - 120: All - count: Number per page ### Return: - Video data  # [示例/Example] categoryType = \"120\" count = 16
     * @summary 获取探索作品数据/Get explore video data
     * @param {string} [categoryType] 作品分类/Video category
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchExplorePostApiV1TiktokWebFetchExplorePostGet(categoryType?: string, count?: number, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchExplorePostApiV1TiktokWebFetchExplorePostGet(categoryType, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取探索作品数据 ### 参数: - categoryType: 作品分类     - 100: 动画与漫画     - 101: 表演     - 102: 美容护理     - 103: 游戏     - 104: 喜剧     - 105: 日常生活     - 106: 家庭     - 107: 情感关系     - 108: 戏剧     - 109: 穿搭     - 110: 对口型     - 111: 美食     - 112: 运动     - 113: 动物     - 114: 社会     - 115: 汽车     - 116: 教育     - 117: 健身和健康     - 118: 科技     - 119: 唱歌跳舞     - 120: 全部 - count: 每页数量 ### 返回: - 作品数据  # [English] ### Purpose: - Get explore video data ### Parameters: - categoryType: Video category     - 100: Animation and comics     - 101: Performance     - 102: Beauty care     - 103: Game     - 104: Comedy     - 105: Daily life     - 106: Family     - 107: Emotional relationship     - 108: Drama     - 109: Dress up     - 110: Dubbing     - 111: Food     - 112: Sports     - 113: Animals     - 114: Society     - 115: Car     - 116: Education     - 117: Fitness and health     - 118: Technology     - 119: Singing and dancing     - 120: All - count: Number per page ### Return: - Video data  # [示例/Example] categoryType = \"120\" count = 16
     * @summary 获取探索作品数据/Get explore video data
     * @param {string} [categoryType] 作品分类/Video category
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchExplorePostApiV1TiktokWebFetchExplorePostGet_3(categoryType?: string, count?: number, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchExplorePostApiV1TiktokWebFetchExplorePostGet_3(categoryType, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword = \"TikTok\" offset = 0 search_id = \"\"
     * @summary 获取综合搜索列表/Get general search list
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {number} [offset] 翻页游标/Page cursor
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet(keyword: string, offset?: number, searchId?: string, cookie?: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet(keyword, offset, searchId, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取综合搜索列表 ### 参数: - keyword: 搜索关键词 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 综合搜索列表  # [English] ### Purpose: - Get general search list ### Parameters: - keyword: Search keyword - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - General search list  # [示例/Example] keyword = \"TikTok\" offset = 0 search_id = \"\"
     * @summary 获取综合搜索列表/Get general search list
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {number} [offset] 翻页游标/Page cursor
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_4(keyword: string, offset?: number, searchId?: string, cookie?: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchGeneralSearchApiV1TiktokWebFetchGeneralSearchGet_4(keyword, offset, searchId, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 首页推荐作品 ### 参数: - count: 每页数量 - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 首页推荐作品  # [English] ### Purpose: - Home Feed ### Parameters: - count: Number per page - cookie: User\'s own cookie, optional parameter, used for personalized recommendations of interface return data. ### Return: - Home Feed  # [示例/Example] count = 15 Cookie = \"Your_Cookie\"
     * @summary 首页推荐作品/Home Feed
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchHomeFeedApiV1TiktokWebFetchHomeFeedPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchHomeFeedApiV1TiktokWebFetchHomeFeedPost(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 首页推荐作品 ### 参数: - count: 每页数量 - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 首页推荐作品  # [English] ### Purpose: - Home Feed ### Parameters: - count: Number per page - cookie: User\'s own cookie, optional parameter, used for personalized recommendations of interface return data. ### Return: - Home Feed  # [示例/Example] count = 15 Cookie = \"Your_Cookie\"
     * @summary 首页推荐作品/Home Feed
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchHomeFeedApiV1TiktokWebFetchHomeFeedPost_5(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchHomeFeedApiV1TiktokWebFetchHomeFeedPost_5(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag = \"VALORANT\"
     * @summary 获取直播间首页推荐列表/Get live room homepage recommendation list
     * @param {string} relatedLiveTag 相关直播标签/Related live tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet(relatedLiveTag: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet(relatedLiveTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取直播间首页推荐列表 ### 参数: - related_live_tag: 相关直播标签 ### 返回: - 直播间首页推荐列表  # [English] ### Purpose: - Get live room homepage recommendation list ### Parameters: - related_live_tag: Related live tag ### Return: - Live room homepage recommendation list  # [示例/Example] related_live_tag = \"VALORANT\"
     * @summary 获取直播间首页推荐列表/Get live room homepage recommendation list
     * @param {string} relatedLiveTag 相关直播标签/Related live tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_6(relatedLiveTag: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchLiveRecommendApiV1TiktokWebFetchLiveRecommendGet_6(relatedLiveTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id = \"7304809083817774382\" cursor = 0 count = 20 current_region = \"\"
     * @summary 获取作品的评论列表/Get video comments
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {string} [currentRegion] 当前地区/Current region
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchPostCommentApiV1TiktokWebFetchPostCommentGet(awemeId: string, cursor?: number, count?: number, currentRegion?: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchPostCommentApiV1TiktokWebFetchPostCommentGet(awemeId, cursor, count, currentRegion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取作品的评论列表 ### 参数: - aweme_id: 作品id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论列表  # [English] ### Purpose: - Get video comments ### Parameters: - aweme_id: Video id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comments  # [示例/Eample] aweme_id = \"7304809083817774382\" cursor = 0 count = 20 current_region = \"\"
     * @summary 获取作品的评论列表/Get video comments
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {string} [currentRegion] 当前地区/Current region
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchPostCommentApiV1TiktokWebFetchPostCommentGet_7(awemeId: string, cursor?: number, count?: number, currentRegion?: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchPostCommentApiV1TiktokWebFetchPostCommentGet_7(awemeId, cursor, count, currentRegion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id = \"7304809083817774382\" comment_id = \"7304877760886588191\" cursor = 0 count = 20 current_region = \"\"
     * @summary 获取作品的评论回复列表/Get video comment replies
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {string} [currentRegion] 当前地区/Current region
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet(itemId: string, commentId: string, cursor?: number, count?: number, currentRegion?: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet(itemId, commentId, cursor, count, currentRegion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取作品的评论回复列表 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 翻页游标 - count: 每页数量 - current_region: 当前地区，默认为空。 ### 返回: - 作品的评论回复列表  # [English] ### Purpose: - Get video comment replies ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Page cursor - count: Number per page - current_region: Current region, default is empty. ### Return: - Video comment replies  # [示例/Eample] item_id = \"7304809083817774382\" comment_id = \"7304877760886588191\" cursor = 0 count = 20 current_region = \"\"
     * @summary 获取作品的评论回复列表/Get video comment replies
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {string} [currentRegion] 当前地区/Current region
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_8(itemId: string, commentId: string, cursor?: number, count?: number, currentRegion?: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchPostCommentReplyApiV1TiktokWebFetchPostCommentReplyGet_8(itemId, commentId, cursor, count, currentRegion, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId = \"7339393672959757570\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} itemId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchPostDetailApiV1TiktokWebFetchPostDetailGet(itemId: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchPostDetailApiV1TiktokWebFetchPostDetailGet(itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法用于视频下载，只能获取视频数据，访问此接口返回的视频链接会返回HTTP403报错。 - 如果有视频下载需求，请使用 /api/v1/tiktok/app/v2/fetch_one_video 接口。 ### 参数: - itemId: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot be used for video download, it can only get video data, and accessing the video link returned by this interface will return an HTTP403 error. - If you need to download videos, please use the /api/v1/tiktok/app/v2/fetch_one_video interface. ### Parameters: - itemId: Video id ### Return: - Video data  # [示例/Example] itemId = \"7339393672959757570\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} itemId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchPostDetailApiV1TiktokWebFetchPostDetailGet_9(itemId: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchPostDetailApiV1TiktokWebFetchPostDetailGet_9(itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword = \"TikTok\"
     * @summary 搜索关键字推荐/Search keyword suggest
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet(keyword: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索关键字推荐 ### 参数: - keyword: 搜索关键词 ### 返回: - 关键字推荐列表  # [English] ### Purpose: - Search keyword suggest ### Parameters: - keyword: Search keyword ### Return: - Keyword suggest list  # [示例/Example] keyword = \"TikTok\"
     * @summary 搜索关键字推荐/Search keyword suggest
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_10(keyword: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchSearchKeywordSuggestApiV1TiktokWebFetchSearchKeywordSuggestGet_10(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"
     * @summary 搜索直播/Search live
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [offset] 翻页游标/Page cursor
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet(keyword: string, count?: number, offset?: number, searchId?: string, cookie?: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet(keyword, count, offset, searchId, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索直播 ### 参数: - keyword: 搜索关键词 - count: 每页数量 - offset: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 直播列表  # [English] ### Purpose: - Search live ### Parameters: - keyword: Search keyword - count: Number per page - offset: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Live list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"
     * @summary 搜索直播/Search live
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [offset] 翻页游标/Page cursor
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_11(keyword: string, count?: number, offset?: number, searchId?: string, cookie?: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchSearchLiveApiV1TiktokWebFetchSearchLiveGet_11(keyword, count, offset, searchId, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword = \"TikTok\" cursor = 0 search_id = \"\"
     * @summary 搜索用户/Search user
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchSearchUserApiV1TiktokWebFetchSearchUserGet(keyword: string, cursor?: number, searchId?: string, cookie?: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchSearchUserApiV1TiktokWebFetchSearchUserGet(keyword, cursor, searchId, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 用户列表  # [English] ### Purpose: - Search user ### Parameters: - keyword: Search keyword - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - User list  # [示例/Example] keyword = \"TikTok\" cursor = 0 search_id = \"\"
     * @summary 搜索用户/Search user
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchSearchUserApiV1TiktokWebFetchSearchUserGet_12(keyword: string, cursor?: number, searchId?: string, cookie?: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchSearchUserApiV1TiktokWebFetchSearchUserGet_12(keyword, cursor, searchId, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"
     * @summary 搜索视频/Search video
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [offset] 翻页游标/Page cursor
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet(keyword: string, count?: number, offset?: number, searchId?: string, cookie?: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet(keyword, count, offset, searchId, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 搜索关键词 - count: 每页数量，建议保持默认值20。 - cursor: 翻页游标，第一次请求时为0，第二次请求时从上一次请求的返回响应中获取，一般这个值的关键字为offset或者cursor。 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - cookie: 用户cookie(如果你需要使用自己的账号搜索，或者遇到接口报错，可以自行提供cookie，默认不需要提供) ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Search keyword - count: Number per page, it is recommended to keep the default value 20. - cursor: Page cursor, 0 for the first request, need to provide for the second paging, generally the keyword of this value is offset or cursor. - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"20240828035554C02011379EBB6A00E00B\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id - offset: Page cursor - cookie: User cookie (If you need to search with your own account, or encounter an interface error, you can provide the cookie yourself, default is not required) ### Return: - Video list  # [示例/Example] keyword = \"TikTok\" count = 20 offset = 0 search_id = \"\"
     * @summary 搜索视频/Search video
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [offset] 翻页游标/Page cursor
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {string} [cookie] 用户cookie(按需提供)/User cookie(if needed)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_13(keyword: string, count?: number, offset?: number, searchId?: string, cookie?: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchSearchVideoApiV1TiktokWebFetchSearchVideoGet_13(keyword, count, offset, searchId, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name = \"tiktok\"
     * @summary Tag详情/Tag Detail
     * @param {string} tagName Tag名称/Tag name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchTagDetailApiV1TiktokWebFetchTagDetailGet(tagName: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchTagDetailApiV1TiktokWebFetchTagDetailGet(tagName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - Tag详情 ### 参数: - tag_name: Tag名称 ### 返回: - Tag详情  # [English] ### Purpose: - Tag Detail ### Parameters: - tag_name: Tag name ### Return: - Tag Detail  # [示例/Example] tag_name = \"tiktok\"
     * @summary Tag详情/Tag Detail
     * @param {string} tagName Tag名称/Tag name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchTagDetailApiV1TiktokWebFetchTagDetailGet_14(tagName: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchTagDetailApiV1TiktokWebFetchTagDetailGet_14(tagName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID = \"7551\" count = 30 cursor = 0
     * @summary Tag作品/Tag Post
     * @param {string} challengeID Tag ID
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchTagPostApiV1TiktokWebFetchTagPostGet(challengeID: string, count?: number, cursor?: number, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchTagPostApiV1TiktokWebFetchTagPostGet(challengeID, count, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - Tag作品 ### 参数: - challengeID: Tag ID - count: 每页数量 - cursor: 翻页游标 ### 返回: - Tag作品  # [English] ### Purpose: - Tag Post ### Parameters: - challengeID: Tag ID - count: Number per page - cursor: Page cursor ### Return: - Tag Post  # [示例/Example] challengeID = \"7551\" count = 30 cursor = 0
     * @summary Tag作品/Tag Post
     * @param {string} challengeID Tag ID
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchTagPostApiV1TiktokWebFetchTagPostGet_15(challengeID: string, count?: number, cursor?: number, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchTagPostApiV1TiktokWebFetchTagPostGet_15(challengeID, count, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url = \"https://www.tiktok.com/@.caseoh_daily/live\"
     * @summary 通过直播链接获取直播间信息/Get live room information via live link
     * @param {string} liveRoomUrl 直播间链接/Live room link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet(liveRoomUrl: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet(liveRoomUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过直播链接获取直播间信息 - 此接口可获取离线直播间信息 ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间信息  # [English] ### Purpose: - Get live room information via live link - This interface can get offline live room information ### Parameters: - live_room_url: Live room link ### Return: - Live room information  # [示例/Example] live_room_url = \"https://www.tiktok.com/@.caseoh_daily/live\"
     * @summary 通过直播链接获取直播间信息/Get live room information via live link
     * @param {string} liveRoomUrl 直播间链接/Live room link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_16(liveRoomUrl: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchTiktokLiveDataApiV1TiktokWebFetchTiktokLiveDataGet_16(liveRoomUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取每日热门内容作品数据 ### 返回: - 作品数据  # [English] ### Purpose: - Get daily trending video data ### Return: - Video data  # [示例/Example]
     * @summary 获取每日热门内容作品数据/Get daily trending video data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchTrendingPostApiV1TiktokWebFetchTrendingPostGet(options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchTrendingPostApiV1TiktokWebFetchTrendingPostGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取每日热门内容作品数据 ### 返回: - 作品数据  # [English] ### Purpose: - Get daily trending video data ### Return: - Video data  # [示例/Example]
     * @summary 获取每日热门内容作品数据/Get daily trending video data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchTrendingPostApiV1TiktokWebFetchTrendingPostGet_17(options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchTrendingPostApiV1TiktokWebFetchTrendingPostGet_17(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie = \"Your_Cookie\" secUid = \"Your_SecUid\" cursor = 0 count = 30 coverFormat = 2
     * @summary 获取用户的收藏列表/Get user favorites
     * @param {string} cookie 用户cookie/User cookie
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [coverFormat] 封面格式/Cover format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchUserCollectApiV1TiktokWebFetchUserCollectGet(cookie: string, secUid: string, cursor?: number, count?: number, coverFormat?: number, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchUserCollectApiV1TiktokWebFetchUserCollectGet(cookie, secUid, cursor, count, coverFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的收藏列表 - 注意: 该接口目前只能获取自己的收藏列表，需要提供自己账号的cookie。 ### 参数: - cookie: 用户cookie - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 - coverFormat: 封面格式 ### 返回: - 用户的收藏列表  # [English] ### Purpose: - Get user favorites - Note: This interface can currently only get your own favorites list, you need to provide your account cookie. ### Parameters: - cookie: User cookie - secUid: User secUid - cursor: Page cursor - count: Number per page - coverFormat: Cover format ### Return: - User favorites  # [示例/Example] cookie = \"Your_Cookie\" secUid = \"Your_SecUid\" cursor = 0 count = 30 coverFormat = 2
     * @summary 获取用户的收藏列表/Get user favorites
     * @param {string} cookie 用户cookie/User cookie
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [coverFormat] 封面格式/Cover format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchUserCollectApiV1TiktokWebFetchUserCollectGet_18(cookie: string, secUid: string, cursor?: number, count?: number, coverFormat?: number, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchUserCollectApiV1TiktokWebFetchUserCollectGet_18(cookie, secUid, cursor, count, coverFormat, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0
     * @summary 获取用户的粉丝列表/Get user followers
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [maxCursor] 最大游标/Max cursor
     * @param {number} [minCursor] 最小游标/Min cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchUserFansApiV1TiktokWebFetchUserFansGet(secUid: string, count?: number, maxCursor?: number, minCursor?: number, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchUserFansApiV1TiktokWebFetchUserFansGet(secUid, count, maxCursor, minCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的粉丝列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的粉丝列表  # [English] ### Purpose: - Get user followers ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followers  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0
     * @summary 获取用户的粉丝列表/Get user followers
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [maxCursor] 最大游标/Max cursor
     * @param {number} [minCursor] 最小游标/Min cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchUserFansApiV1TiktokWebFetchUserFansGet_19(secUid: string, count?: number, maxCursor?: number, minCursor?: number, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchUserFansApiV1TiktokWebFetchUserFansGet_19(secUid, count, maxCursor, minCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0
     * @summary 获取用户的关注列表/Get user followings
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [maxCursor] 最大游标/Max cursor
     * @param {number} [minCursor] 最小游标/Min cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchUserFollowApiV1TiktokWebFetchUserFollowGet(secUid: string, count?: number, maxCursor?: number, minCursor?: number, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchUserFollowApiV1TiktokWebFetchUserFollowGet(secUid, count, maxCursor, minCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的关注列表 ### 参数: - secUid: 用户secUid - count: 每页数量 - maxCursor: 最大游标 - minCursor: 最小游标 ### 返回: - 用户的关注列表  # [English] ### Purpose: - Get user followings ### Parameters: - secUid: User secUid - count: Number per page - maxCursor: Max cursor - minCursor: Min cursor ### Return: - User followings  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" count = 30 maxCursor = 0 minCursor = 0
     * @summary 获取用户的关注列表/Get user followings
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [maxCursor] 最大游标/Max cursor
     * @param {number} [minCursor] 最小游标/Min cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchUserFollowApiV1TiktokWebFetchUserFollowGet_20(secUid: string, count?: number, maxCursor?: number, minCursor?: number, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchUserFollowApiV1TiktokWebFetchUserFollowGet_20(secUid, count, maxCursor, minCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user\'s like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User likes  # [示例/Example] secUid = \"MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\" cursor = 0 count = 20 coverFormat = 2
     * @summary 获取用户的点赞列表/Get user likes
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [coverFormat] 封面格式/Cover format
     * @param {number} [postItemListRequestType] 排序方式/Sort type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchUserLikeApiV1TiktokWebFetchUserLikeGet(secUid: string, cursor?: number, count?: number, coverFormat?: number, postItemListRequestType?: number, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchUserLikeApiV1TiktokWebFetchUserLikeGet(secUid, cursor, count, coverFormat, postItemListRequestType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的点赞列表 - 注意: 该接口需要用户点赞列表为公开状态 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的点赞列表  # [English] ### Purpose: - Get user likes - Note: This interface requires that the user\'s like list be public ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User likes  # [示例/Example] secUid = \"MS4wLjABAAAAq1iRXNduFZpY301UkVpJ1eQT60_NiWS9QQSeNqmNQEDJp0pOF8cpleNEdiJx5_IU\" cursor = 0 count = 20 coverFormat = 2
     * @summary 获取用户的点赞列表/Get user likes
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [coverFormat] 封面格式/Cover format
     * @param {number} [postItemListRequestType] 排序方式/Sort type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchUserLikeApiV1TiktokWebFetchUserLikeGet_21(secUid: string, cursor?: number, count?: number, coverFormat?: number, postItemListRequestType?: number, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchUserLikeApiV1TiktokWebFetchUserLikeGet_21(secUid, cursor, count, coverFormat, postItemListRequestType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId = \"7101538765474106158\" cursor = 0 count = 30
     * @summary 获取用户的合辑列表/Get user mix list
     * @param {string} mixId 合辑id/Mix id
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchUserMixApiV1TiktokWebFetchUserMixGet(mixId: string, cursor?: number, count?: number, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchUserMixApiV1TiktokWebFetchUserMixGet(mixId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的合辑列表 ### 参数: - mixId: 合辑id - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的合辑列表  # [English] ### Purpose: - Get user mix list ### Parameters: - mixId: Mix id - cursor: Page cursor - count: Number per page ### Return: - User mix list  # [示例/Eample] mixId = \"7101538765474106158\" cursor = 0 count = 30
     * @summary 获取用户的合辑列表/Get user mix list
     * @param {string} mixId 合辑id/Mix id
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchUserMixApiV1TiktokWebFetchUserMixGet_22(mixId: string, cursor?: number, count?: number, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchUserMixApiV1TiktokWebFetchUserMixGet_22(mixId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 30
     * @summary 获取用户的播放列表/Get user play list
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet(secUid: string, cursor?: number, count?: number, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet(secUid, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的播放列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量 ### 返回: - 用户的播放列表  # [English] ### Purpose: - Get user play list ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page ### Return: - User play list  # [示例/Eample] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 30
     * @summary 获取用户的播放列表/Get user play list
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_23(secUid: string, cursor?: number, count?: number, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchUserPlayListApiV1TiktokWebFetchUserPlayListGet_23(secUid, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User posts  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 20 coverFormat = 2
     * @summary 获取用户的作品列表/Get user posts
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [coverFormat] 封面格式/Cover format
     * @param {number} [postItemListRequestType] 排序方式/Sort type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchUserPostApiV1TiktokWebFetchUserPostGet(secUid: string, cursor?: number, count?: number, coverFormat?: number, postItemListRequestType?: number, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchUserPostApiV1TiktokWebFetchUserPostGet(secUid, cursor, count, coverFormat, postItemListRequestType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的作品列表 ### 参数: - secUid: 用户secUid - cursor: 翻页游标 - count: 每页数量，默认为20，不可变更。 - coverFormat: 封面格式 - post_item_list_request_type: 排序方式     - 0：默认排序     - 1：热门排序     - 2：最旧排序 ### 返回: - 用户的作品列表  # [English] ### Purpose: - Get user posts ### Parameters: - secUid: User secUid - cursor: Page cursor - count: Number per page, default is 20, cannot be changed. - coverFormat: Cover format - post_item_list_request_type: Sort type     - 0: Default sort     - 1: Hot sort     - 2: Oldest sort ### Return: - User posts  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" cursor = 0 count = 20 coverFormat = 2
     * @summary 获取用户的作品列表/Get user posts
     * @param {string} secUid 用户secUid/User secUid
     * @param {number} [cursor] 翻页游标/Page cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [coverFormat] 封面格式/Cover format
     * @param {number} [postItemListRequestType] 排序方式/Sort type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchUserPostApiV1TiktokWebFetchUserPostGet_24(secUid: string, cursor?: number, count?: number, coverFormat?: number, postItemListRequestType?: number, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchUserPostApiV1TiktokWebFetchUserPostGet_24(secUid, cursor, count, coverFormat, postItemListRequestType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user\'s homepage link. ### Return: - User profile  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" uniqueId = \"tiktok\"
     * @summary 获取用户的个人信息/Get user profile
     * @param {string} [uniqueId] 用户uniqueId/User uniqueId
     * @param {string} [secUid] 用户secUid/User secUid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchUserProfileApiV1TiktokWebFetchUserProfileGet(uniqueId?: string, secUid?: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchUserProfileApiV1TiktokWebFetchUserProfileGet(uniqueId, secUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的个人信息 ### 参数: - secUid: 用户secUid - uniqueId: 用户uniqueId - secUid和uniqueId至少提供一个, 优先使用uniqueId, 也就是用户主页的链接中的用户名。 ### 返回: - 用户的个人信息  # [English] ### Purpose: - Get user profile ### Parameters: - secUid: User secUid - uniqueId: User uniqueId - At least one of secUid and uniqueId is provided, and uniqueId is preferred, that is, the username in the user\'s homepage link. ### Return: - User profile  # [示例/Example] secUid = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" uniqueId = \"tiktok\"
     * @summary 获取用户的个人信息/Get user profile
     * @param {string} [uniqueId] 用户uniqueId/User uniqueId
     * @param {string} [secUid] 用户secUid/User secUid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public fetchUserProfileApiV1TiktokWebFetchUserProfileGet_25(uniqueId?: string, secUid?: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).fetchUserProfileApiV1TiktokWebFetchUserProfileGet_25(uniqueId, secUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken
     * @summary 生成真实msToken/Generate real msToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet(options?: any) {
        return TikTokWebAPIApiFp(this.configuration).generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成真实msToken ### 返回: - 真实msToken  # [English] ### Purpose: - Generate real msToken ### Return: - Real msToken
     * @summary 生成真实msToken/Generate real msToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet_26(options?: any) {
        return TikTokWebAPIApiFp(this.configuration).generateRealMsTokenApiV1TiktokWebGenerateRealMsTokenGet_26(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie = \"Your_Cookie\"
     * @summary 生成ttwid/Generate ttwid
     * @param {string} cookie 用户cookie/User cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public generateTtwidApiV1TiktokWebGenerateTtwidGet(cookie: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).generateTtwidApiV1TiktokWebGenerateTtwidGet(cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成ttwid ### 参数: - cookie: 用户cookie ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Parameters: - cookie: User cookie ### Return: - ttwid  # [示例/Example] cookie = \"Your_Cookie\"
     * @summary 生成ttwid/Generate ttwid
     * @param {string} cookie 用户cookie/User cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public generateTtwidApiV1TiktokWebGenerateTtwidGet_27(cookie: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).generateTtwidApiV1TiktokWebGenerateTtwidGet_27(cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  ```json {     \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\",     \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" }
     * @summary 生成xbogus/Generate xbogus
     * @param {XBogusModel} [xBogusModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public generateXbogusApiV1TiktokWebGenerateXbogusPost(xBogusModel?: XBogusModel, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).generateXbogusApiV1TiktokWebGenerateXbogusPost(xBogusModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成xbogus ### 参数: - url: 未签名的API URL - user_agent: 用户浏览器User-Agent ### 返回: - xbogus  # [English] ### Purpose: - Generate xbogus ### Parameters: - url: Unsigned API URL - user_agent: User browser User-Agent ### Return: - xbogus  # [示例/Example]  ```json {     \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\",     \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" }
     * @summary 生成xbogus/Generate xbogus
     * @param {XBogusModel} [xBogusModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public generateXbogusApiV1TiktokWebGenerateXbogusPost_28(xBogusModel?: XBogusModel, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).generateXbogusApiV1TiktokWebGenerateXbogusPost_28(xBogusModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url = [\"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"]
     * @summary 提取列表作品id/Extract list video id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost(requestBody?: Array<string>, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 提取列表作品id ### 参数: - url: 作品链接 (最多支持20个链接) ### 返回: - 作品id  # [English] ### Purpose: - Extract list video id ### Parameters: - url: Video link (Support up to 20 links) ### Return: - Video id  # [示例/Example] url = [\"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"]
     * @summary 提取列表作品id/Extract list video id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost_29(requestBody?: Array<string>, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).getAllAwemeIdApiV1TiktokWebGetAllAwemeIdPost_29(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持10个链接）、 ### 返回: - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 10 links) ### Return: - If the sec_user_id is successfully obtained, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]
     * @summary 提取列表用户sec_user_id/Extract list user sec_user_id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost(requestBody?: Array<string>, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接（最多支持10个链接）、 ### 返回: - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link (Support up to 10 links) ### Return: - If the sec_user_id is successfully obtained, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]
     * @summary 提取列表用户sec_user_id/Extract list user sec_user_id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost_30(requestBody?: Array<string>, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).getAllSecUserIdApiV1TiktokWebGetAllSecUserIdPost_30(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]
     * @summary 获取列表unique_id/Get list unique_id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost(requestBody?: Array<string>, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取列表unique_id ### 参数: - url: 用户主页链接 (最多支持20个链接) ### 返回: - unique_id  # [English] ### Purpose: - Get list unique_id ### Parameters: - url: User homepage link (Support up to 20 links) ### Return: - unique_id  # [示例/Example] url = [\"https://www.tiktok.com/@tiktok\"]
     * @summary 获取列表unique_id/Get list unique_id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost_31(requestBody?: Array<string>, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).getAllUniqueIdApiV1TiktokWebGetAllUniqueIdPost_31(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"
     * @summary 提取单个作品id/Extract single video id
     * @param {string} url 作品链接/Video link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public getAwemeIdApiV1TiktokWebGetAwemeIdGet(url: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).getAwemeIdApiV1TiktokWebGetAwemeIdGet(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.tiktok.com/@owlcitymusic/video/7218694761253735723\"
     * @summary 提取单个作品id/Extract single video id
     * @param {string} url 作品链接/Video link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public getAwemeIdApiV1TiktokWebGetAwemeIdGet_32(url: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).getAwemeIdApiV1TiktokWebGetAwemeIdGet_32(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 支持短链接，如：https://vt.tiktok.com/ZSjuyJnWQ/ - 支持长链接，如：https://www.tiktok.com/@maksukaracun/live ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - Support short links, such as: https://vt.tiktok.com/ZSjuyJnWQ/ - Support long links, such as: https://www.tiktok.com/@maksukaracun/live ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url = \"https://www.tiktok.com/@maksukaracun/live\"
     * @summary 根据直播间链接提取直播间ID/Extract live room ID from live room link
     * @param {string} liveRoomUrl 直播间链接/Live room link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet(liveRoomUrl: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet(liveRoomUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据直播间链接提取直播间Room ID - 支持短链接，如：https://vt.tiktok.com/ZSjuyJnWQ/ - 支持长链接，如：https://www.tiktok.com/@maksukaracun/live ### 参数: - live_room_url: 直播间链接 ### 返回: - 直播间Room ID  # [English] ### Purpose: - Extract live room Room ID from live room link - Support short links, such as: https://vt.tiktok.com/ZSjuyJnWQ/ - Support long links, such as: https://www.tiktok.com/@maksukaracun/live ### Parameters: - live_room_url: Live room link ### Return: - Live room Room ID  # [示例/Example] live_room_url = \"https://www.tiktok.com/@maksukaracun/live\"
     * @summary 根据直播间链接提取直播间ID/Extract live room ID from live room link
     * @param {string} liveRoomUrl 直播间链接/Live room link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_33(liveRoomUrl: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).getLiveRoomIdApiV1TiktokWebGetLiveRoomIdGet_33(liveRoomUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"
     * @summary 提取用户sec_user_id/Extract user sec_user_id
     * @param {string} url 用户主页链接/User homepage link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public getSecUserIdApiV1TiktokWebGetSecUserIdGet(url: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).getSecUserIdApiV1TiktokWebGetSecUserIdGet(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 提取列表用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户id  # [English] ### Purpose: - Extract list user id ### Parameters: - url: User homepage link ### Return: - User id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"
     * @summary 提取用户sec_user_id/Extract user sec_user_id
     * @param {string} url 用户主页链接/User homepage link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public getSecUserIdApiV1TiktokWebGetSecUserIdGet_34(url: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).getSecUserIdApiV1TiktokWebGetSecUserIdGet_34(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"
     * @summary 获取用户unique_id/Get user unique_id
     * @param {string} url 用户主页链接/User homepage link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public getUniqueIdApiV1TiktokWebGetUniqueIdGet(url: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).getUniqueIdApiV1TiktokWebGetUniqueIdGet(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户unique_id ### 参数: - url: 用户主页链接 ### 返回: - unique_id  # [English] ### Purpose: - Get user unique_id ### Parameters: - url: User homepage link ### Return: - unique_id  # [示例/Example] url = \"https://www.tiktok.com/@tiktok\"
     * @summary 获取用户unique_id/Get user unique_id
     * @param {string} url 用户主页链接/User homepage link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokWebAPIApi
     */
    public getUniqueIdApiV1TiktokWebGetUniqueIdGet_35(url: string, options?: any) {
        return TikTokWebAPIApiFp(this.configuration).getUniqueIdApiV1TiktokWebGetUniqueIdGet_35(url, options).then((request) => request(this.axios, this.basePath));
    }

}
