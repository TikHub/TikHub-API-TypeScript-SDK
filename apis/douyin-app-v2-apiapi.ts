// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
/**
 * DouyinAppV2APIApi - axios parameter creator
 * @export
 */
export const DouyinAppV2APIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_general_search_result）/Get comprehensive search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_general_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1DouyinAppV2FetchGeneralSearchResultGet: async (keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchGeneralSearchResultApiV1DouyinAppV2FetchGeneralSearchResultGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_general_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_general_search_result）/Get comprehensive search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_general_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1DouyinAppV2FetchGeneralSearchResultGet_1: async (keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchGeneralSearchResultApiV1DouyinAppV2FetchGeneralSearchResultGet_1.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_general_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1DouyinAppV2FetchHashtagDetailGet: async (chId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chId' is not null or undefined
            if (chId === null || chId === undefined) {
                throw new RequiredError('chId','Required parameter chId was null or undefined when calling fetchHashtagDetailApiV1DouyinAppV2FetchHashtagDetailGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_hashtag_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (chId !== undefined) {
                localVarQueryParameter['ch_id'] = chId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1DouyinAppV2FetchHashtagDetailGet_2: async (chId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chId' is not null or undefined
            if (chId === null || chId === undefined) {
                throw new RequiredError('chId','Required parameter chId was null or undefined when calling fetchHashtagDetailApiV1DouyinAppV2FetchHashtagDetailGet_2.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_hashtag_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (chId !== undefined) {
                localVarQueryParameter['ch_id'] = chId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagSearchResultApiV1DouyinAppV2FetchHashtagSearchResultGet: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchHashtagSearchResultApiV1DouyinAppV2FetchHashtagSearchResultGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_hashtag_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagSearchResultApiV1DouyinAppV2FetchHashtagSearchResultGet_3: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchHashtagSearchResultApiV1DouyinAppV2FetchHashtagSearchResultGet_3.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_hashtag_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagVideoListApiV1DouyinAppV2FetchHashtagVideoListGet: async (chId: number, cursor?: number, sortType?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chId' is not null or undefined
            if (chId === null || chId === undefined) {
                throw new RequiredError('chId','Required parameter chId was null or undefined when calling fetchHashtagVideoListApiV1DouyinAppV2FetchHashtagVideoListGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_hashtag_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (chId !== undefined) {
                localVarQueryParameter['ch_id'] = chId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagVideoListApiV1DouyinAppV2FetchHashtagVideoListGet_4: async (chId: number, cursor?: number, sortType?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chId' is not null or undefined
            if (chId === null || chId === undefined) {
                throw new RequiredError('chId','Required parameter chId was null or undefined when calling fetchHashtagVideoListApiV1DouyinAppV2FetchHashtagVideoListGet_4.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_hashtag_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (chId !== undefined) {
                localVarQueryParameter['ch_id'] = chId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
         * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
         * @param {number} categoryId 分类id/Category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchApiV1DouyinAppV2FetchBrandHotSearchListDetailGet: async (categoryId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling fetchHotBrandSearchApiV1DouyinAppV2FetchBrandHotSearchListDetailGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_brand_hot_search_list_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['category_id'] = categoryId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
         * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
         * @param {number} categoryId 分类id/Category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchApiV1DouyinAppV2FetchBrandHotSearchListDetailGet_5: async (categoryId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling fetchHotBrandSearchApiV1DouyinAppV2FetchBrandHotSearchListDetailGet_5.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_brand_hot_search_list_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['category_id'] = categoryId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
         * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchCategoryApiV1DouyinAppV2FetchBrandHotSearchListGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v2/fetch_brand_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
         * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchCategoryApiV1DouyinAppV2FetchBrandHotSearchListGet_6: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v2/fetch_brand_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音热搜榜数据 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data ### Return: - Hot search list data  # [示例/Example] pass
         * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchListApiV1DouyinAppV2FetchHotSearchListGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v2/fetch_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音热搜榜数据 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data ### Return: - Hot search list data  # [示例/Example] pass
         * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchListApiV1DouyinAppV2FetchHotSearchListGet_7: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v2/fetch_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
         * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveHotSearchListApiV1DouyinAppV2FetchLiveHotSearchListGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v2/fetch_live_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
         * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveHotSearchListApiV1DouyinAppV2FetchLiveHotSearchListGet_8: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v2/fetch_live_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicDetailApiV1DouyinAppV2FetchMusicDetailGet: async (musicId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicDetailApiV1DouyinAppV2FetchMusicDetailGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_music_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicDetailApiV1DouyinAppV2FetchMusicDetailGet_9: async (musicId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicDetailApiV1DouyinAppV2FetchMusicDetailGet_9.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_music_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
         * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicHotSearchListApiV1DouyinAppV2FetchMusicHotSearchListGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v2/fetch_music_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
         * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicHotSearchListApiV1DouyinAppV2FetchMusicHotSearchListGet_10: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v2/fetch_music_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicSearchResultApiV1DouyinAppV2FetchMusicSearchResultGet: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchMusicSearchResultApiV1DouyinAppV2FetchMusicSearchResultGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_music_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicSearchResultApiV1DouyinAppV2FetchMusicSearchResultGet_11: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchMusicSearchResultApiV1DouyinAppV2FetchMusicSearchResultGet_11.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_music_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicVideoListApiV1DouyinAppV2FetchMusicVideoListGet: async (musicId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicVideoListApiV1DouyinAppV2FetchMusicVideoListGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_music_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicVideoListApiV1DouyinAppV2FetchMusicVideoListGet_12: async (musicId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicVideoListApiV1DouyinAppV2FetchMusicVideoListGet_12.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_music_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinAppV2FetchOneVideoGet: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchOneVideoApiV1DouyinAppV2FetchOneVideoGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_one_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinAppV2FetchOneVideoGet_13: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchOneVideoApiV1DouyinAppV2FetchOneVideoGet_13.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_one_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1DouyinAppV2FetchOneVideoByShareUrlGet: async (shareUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareUrl' is not null or undefined
            if (shareUrl === null || shareUrl === undefined) {
                throw new RequiredError('shareUrl','Required parameter shareUrl was null or undefined when calling fetchOneVideoByShareUrlApiV1DouyinAppV2FetchOneVideoByShareUrlGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_one_video_by_share_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareUrl !== undefined) {
                localVarQueryParameter['share_url'] = shareUrl;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1DouyinAppV2FetchOneVideoByShareUrlGet_14: async (shareUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareUrl' is not null or undefined
            if (shareUrl === null || shareUrl === undefined) {
                throw new RequiredError('shareUrl','Required parameter shareUrl was null or undefined when calling fetchOneVideoByShareUrlApiV1DouyinAppV2FetchOneVideoByShareUrlGet_14.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_one_video_by_share_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareUrl !== undefined) {
                localVarQueryParameter['share_url'] = shareUrl;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1DouyinAppV2FetchUserLikeVideosGet: async (secUserId: string, maxCursor?: number, counts?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserLikeVideosApiV1DouyinAppV2FetchUserLikeVideosGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_user_like_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (counts !== undefined) {
                localVarQueryParameter['counts'] = counts;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1DouyinAppV2FetchUserLikeVideosGet_15: async (secUserId: string, maxCursor?: number, counts?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserLikeVideosApiV1DouyinAppV2FetchUserLikeVideosGet_15.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_user_like_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (counts !== undefined) {
                localVarQueryParameter['counts'] = counts;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1DouyinAppV2FetchUserPostVideosGet: async (secUserId: string, maxCursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserPostVideosApiV1DouyinAppV2FetchUserPostVideosGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_user_post_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1DouyinAppV2FetchUserPostVideosGet_16: async (secUserId: string, maxCursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserPostVideosApiV1DouyinAppV2FetchUserPostVideosGet_16.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_user_post_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_user_search_result_v2）/Get user search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_user_search_result_v2)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1DouyinAppV2FetchUserSearchResultGet: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchUserSearchResultApiV1DouyinAppV2FetchUserSearchResultGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_user_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_user_search_result_v2）/Get user search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_user_search_result_v2)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1DouyinAppV2FetchUserSearchResultGet_17: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchUserSearchResultApiV1DouyinAppV2FetchUserSearchResultGet_17.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_user_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1DouyinAppV2FetchVideoCommentsGet: async (awemeId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchVideoCommentsApiV1DouyinAppV2FetchVideoCommentsGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_video_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1DouyinAppV2FetchVideoCommentsGet_18: async (awemeId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchVideoCommentsApiV1DouyinAppV2FetchVideoCommentsGet_18.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_video_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1DouyinAppV2FetchVideoCommentRepliesGet: async (itemId: string, commentId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchVideoCommentsReplyApiV1DouyinAppV2FetchVideoCommentRepliesGet.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling fetchVideoCommentsReplyApiV1DouyinAppV2FetchVideoCommentRepliesGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_video_comment_replies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1DouyinAppV2FetchVideoCommentRepliesGet_19: async (itemId: string, commentId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchVideoCommentsReplyApiV1DouyinAppV2FetchVideoCommentRepliesGet_19.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling fetchVideoCommentsReplyApiV1DouyinAppV2FetchVideoCommentRepliesGet_19.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_video_comment_replies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集详情数据 ### 参数: - mix_id: 合集id ### 返回: - 视频合集详情数据  # [English] ### Purpose: - Get Douyin video mix detail data ### Parameters: - mix_id: Mix id ### Return: - Video mix detail data  # [示例/Example] mix_id = \"7302011174286002217\"
         * @summary 获取抖音视频合集详情数据/Get Douyin video mix detail data
         * @param {string} mixId 合集id/Mix id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoMixDetailApiV1DouyinAppV2FetchVideoMixDetailGet: async (mixId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mixId' is not null or undefined
            if (mixId === null || mixId === undefined) {
                throw new RequiredError('mixId','Required parameter mixId was null or undefined when calling fetchVideoMixDetailApiV1DouyinAppV2FetchVideoMixDetailGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_video_mix_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (mixId !== undefined) {
                localVarQueryParameter['mix_id'] = mixId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集详情数据 ### 参数: - mix_id: 合集id ### 返回: - 视频合集详情数据  # [English] ### Purpose: - Get Douyin video mix detail data ### Parameters: - mix_id: Mix id ### Return: - Video mix detail data  # [示例/Example] mix_id = \"7302011174286002217\"
         * @summary 获取抖音视频合集详情数据/Get Douyin video mix detail data
         * @param {string} mixId 合集id/Mix id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoMixDetailApiV1DouyinAppV2FetchVideoMixDetailGet_20: async (mixId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mixId' is not null or undefined
            if (mixId === null || mixId === undefined) {
                throw new RequiredError('mixId','Required parameter mixId was null or undefined when calling fetchVideoMixDetailApiV1DouyinAppV2FetchVideoMixDetailGet_20.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_video_mix_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (mixId !== undefined) {
                localVarQueryParameter['mix_id'] = mixId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集作品列表数据 ### 参数: - mix_id: 合集id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 视频合集作品列表数据  # [English] ### Purpose: - Get Douyin video mix post list data ### Parameters: - mix_id: Mix id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Video mix post list data  # [示例/Example] mix_id = \"7302011174286002217\" cursor = 0 count = 20
         * @summary 获取抖音视频合集作品列表数据/Get Douyin video mix post list data
         * @param {string} mixId 合集id/Mix id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoMixPostListApiV1DouyinAppV2FetchVideoMixPostListGet: async (mixId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mixId' is not null or undefined
            if (mixId === null || mixId === undefined) {
                throw new RequiredError('mixId','Required parameter mixId was null or undefined when calling fetchVideoMixPostListApiV1DouyinAppV2FetchVideoMixPostListGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_video_mix_post_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (mixId !== undefined) {
                localVarQueryParameter['mix_id'] = mixId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集作品列表数据 ### 参数: - mix_id: 合集id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 视频合集作品列表数据  # [English] ### Purpose: - Get Douyin video mix post list data ### Parameters: - mix_id: Mix id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Video mix post list data  # [示例/Example] mix_id = \"7302011174286002217\" cursor = 0 count = 20
         * @summary 获取抖音视频合集作品列表数据/Get Douyin video mix post list data
         * @param {string} mixId 合集id/Mix id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoMixPostListApiV1DouyinAppV2FetchVideoMixPostListGet_21: async (mixId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mixId' is not null or undefined
            if (mixId === null || mixId === undefined) {
                throw new RequiredError('mixId','Required parameter mixId was null or undefined when calling fetchVideoMixPostListApiV1DouyinAppV2FetchVideoMixPostListGet_21.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_video_mix_post_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (mixId !== undefined) {
                localVarQueryParameter['mix_id'] = mixId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_video_search_result）/Get video search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_video_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1DouyinAppV2FetchVideoSearchResultGet: async (keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchVideoSearchResultApiV1DouyinAppV2FetchVideoSearchResultGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_video_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_video_search_result）/Get video search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_video_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1DouyinAppV2FetchVideoSearchResultGet_22: async (keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchVideoSearchResultApiV1DouyinAppV2FetchVideoSearchResultGet_22.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/fetch_video_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音短链接 ### 参数: - url: 抖音链接 ### 返回: - 短链接数据  # [English] ### Purpose: - Generate Douyin short link ### Parameters: - url: Douyin link ### Return: - Short link data  # [示例/Example] url = \"https://www.douyin.com/passport/web/logout/\"
         * @summary 生成抖音短链接/Generate Douyin short link
         * @param {string} url 抖音链接/Douyin link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDouyinShortUrlApiV1DouyinAppV2GenerateDouyinShortUrlGet: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling generateDouyinShortUrlApiV1DouyinAppV2GenerateDouyinShortUrlGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/generate_douyin_short_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音短链接 ### 参数: - url: 抖音链接 ### 返回: - 短链接数据  # [English] ### Purpose: - Generate Douyin short link ### Parameters: - url: Douyin link ### Return: - Short link data  # [示例/Example] url = \"https://www.douyin.com/passport/web/logout/\"
         * @summary 生成抖音短链接/Generate Douyin short link
         * @param {string} url 抖音链接/Douyin link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDouyinShortUrlApiV1DouyinAppV2GenerateDouyinShortUrlGet_23: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling generateDouyinShortUrlApiV1DouyinAppV2GenerateDouyinShortUrlGet_23.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/generate_douyin_short_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音视频分享二维码 ### 参数: - object_id: 作品id ### 返回: - 二维码数据  # [English] ### Purpose: - Generate Douyin video share QR code ### Parameters: - object_id: Video id ### Return: - QR code data  # [示例/Example] object_id = \"7348044435755846962\"
         * @summary 生成抖音视频分享二维码/Generate Douyin video share QR code
         * @param {string} objectId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDouyinVideoShareQrcodeApiV1DouyinAppV2GenerateDouyinVideoShareQrcodeGet: async (objectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError('objectId','Required parameter objectId was null or undefined when calling generateDouyinVideoShareQrcodeApiV1DouyinAppV2GenerateDouyinVideoShareQrcodeGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/generate_douyin_video_share_qrcode`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (objectId !== undefined) {
                localVarQueryParameter['object_id'] = objectId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音视频分享二维码 ### 参数: - object_id: 作品id ### 返回: - 二维码数据  # [English] ### Purpose: - Generate Douyin video share QR code ### Parameters: - object_id: Video id ### Return: - QR code data  # [示例/Example] object_id = \"7348044435755846962\"
         * @summary 生成抖音视频分享二维码/Generate Douyin video share QR code
         * @param {string} objectId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDouyinVideoShareQrcodeApiV1DouyinAppV2GenerateDouyinVideoShareQrcodeGet_24: async (objectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError('objectId','Required parameter objectId was null or undefined when calling generateDouyinVideoShareQrcodeApiV1DouyinAppV2GenerateDouyinVideoShareQrcodeGet_24.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/generate_douyin_video_share_qrcode`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (objectId !== undefined) {
                localVarQueryParameter['object_id'] = objectId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1DouyinAppV2HandlerUserProfileGet: async (secUserId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling handlerUserProfileApiV1DouyinAppV2HandlerUserProfileGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/handler_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1DouyinAppV2HandlerUserProfileGet_25: async (secUserId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling handlerUserProfileApiV1DouyinAppV2HandlerUserProfileGet_25.');
            }
            const localVarPath = `/api/v1/douyin/app/v2/handler_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DouyinAppV2APIApi - functional programming interface
 * @export
 */
export const DouyinAppV2APIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_general_search_result）/Get comprehensive search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_general_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGeneralSearchResultApiV1DouyinAppV2FetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchGeneralSearchResultApiV1DouyinAppV2FetchGeneralSearchResultGet(keyword, offset, count, sortType, publishTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_general_search_result）/Get comprehensive search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_general_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGeneralSearchResultApiV1DouyinAppV2FetchGeneralSearchResultGet_1(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchGeneralSearchResultApiV1DouyinAppV2FetchGeneralSearchResultGet_1(keyword, offset, count, sortType, publishTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagDetailApiV1DouyinAppV2FetchHashtagDetailGet(chId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchHashtagDetailApiV1DouyinAppV2FetchHashtagDetailGet(chId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagDetailApiV1DouyinAppV2FetchHashtagDetailGet_2(chId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchHashtagDetailApiV1DouyinAppV2FetchHashtagDetailGet_2(chId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagSearchResultApiV1DouyinAppV2FetchHashtagSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchHashtagSearchResultApiV1DouyinAppV2FetchHashtagSearchResultGet(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagSearchResultApiV1DouyinAppV2FetchHashtagSearchResultGet_3(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchHashtagSearchResultApiV1DouyinAppV2FetchHashtagSearchResultGet_3(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagVideoListApiV1DouyinAppV2FetchHashtagVideoListGet(chId: number, cursor?: number, sortType?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchHashtagVideoListApiV1DouyinAppV2FetchHashtagVideoListGet(chId, cursor, sortType, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagVideoListApiV1DouyinAppV2FetchHashtagVideoListGet_4(chId: number, cursor?: number, sortType?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchHashtagVideoListApiV1DouyinAppV2FetchHashtagVideoListGet_4(chId, cursor, sortType, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
         * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
         * @param {number} categoryId 分类id/Category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotBrandSearchApiV1DouyinAppV2FetchBrandHotSearchListDetailGet(categoryId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchHotBrandSearchApiV1DouyinAppV2FetchBrandHotSearchListDetailGet(categoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
         * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
         * @param {number} categoryId 分类id/Category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotBrandSearchApiV1DouyinAppV2FetchBrandHotSearchListDetailGet_5(categoryId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchHotBrandSearchApiV1DouyinAppV2FetchBrandHotSearchListDetailGet_5(categoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
         * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotBrandSearchCategoryApiV1DouyinAppV2FetchBrandHotSearchListGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchHotBrandSearchCategoryApiV1DouyinAppV2FetchBrandHotSearchListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
         * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotBrandSearchCategoryApiV1DouyinAppV2FetchBrandHotSearchListGet_6(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchHotBrandSearchCategoryApiV1DouyinAppV2FetchBrandHotSearchListGet_6(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音热搜榜数据 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data ### Return: - Hot search list data  # [示例/Example] pass
         * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotSearchListApiV1DouyinAppV2FetchHotSearchListGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchHotSearchListApiV1DouyinAppV2FetchHotSearchListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音热搜榜数据 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data ### Return: - Hot search list data  # [示例/Example] pass
         * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotSearchListApiV1DouyinAppV2FetchHotSearchListGet_7(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchHotSearchListApiV1DouyinAppV2FetchHotSearchListGet_7(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
         * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveHotSearchListApiV1DouyinAppV2FetchLiveHotSearchListGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchLiveHotSearchListApiV1DouyinAppV2FetchLiveHotSearchListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
         * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveHotSearchListApiV1DouyinAppV2FetchLiveHotSearchListGet_8(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchLiveHotSearchListApiV1DouyinAppV2FetchLiveHotSearchListGet_8(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicDetailApiV1DouyinAppV2FetchMusicDetailGet(musicId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchMusicDetailApiV1DouyinAppV2FetchMusicDetailGet(musicId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicDetailApiV1DouyinAppV2FetchMusicDetailGet_9(musicId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchMusicDetailApiV1DouyinAppV2FetchMusicDetailGet_9(musicId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
         * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicHotSearchListApiV1DouyinAppV2FetchMusicHotSearchListGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchMusicHotSearchListApiV1DouyinAppV2FetchMusicHotSearchListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
         * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicHotSearchListApiV1DouyinAppV2FetchMusicHotSearchListGet_10(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchMusicHotSearchListApiV1DouyinAppV2FetchMusicHotSearchListGet_10(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicSearchResultApiV1DouyinAppV2FetchMusicSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchMusicSearchResultApiV1DouyinAppV2FetchMusicSearchResultGet(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicSearchResultApiV1DouyinAppV2FetchMusicSearchResultGet_11(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchMusicSearchResultApiV1DouyinAppV2FetchMusicSearchResultGet_11(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicVideoListApiV1DouyinAppV2FetchMusicVideoListGet(musicId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchMusicVideoListApiV1DouyinAppV2FetchMusicVideoListGet(musicId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicVideoListApiV1DouyinAppV2FetchMusicVideoListGet_12(musicId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchMusicVideoListApiV1DouyinAppV2FetchMusicVideoListGet_12(musicId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1DouyinAppV2FetchOneVideoGet(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchOneVideoApiV1DouyinAppV2FetchOneVideoGet(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1DouyinAppV2FetchOneVideoGet_13(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchOneVideoApiV1DouyinAppV2FetchOneVideoGet_13(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoByShareUrlApiV1DouyinAppV2FetchOneVideoByShareUrlGet(shareUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchOneVideoByShareUrlApiV1DouyinAppV2FetchOneVideoByShareUrlGet(shareUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoByShareUrlApiV1DouyinAppV2FetchOneVideoByShareUrlGet_14(shareUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchOneVideoByShareUrlApiV1DouyinAppV2FetchOneVideoByShareUrlGet_14(shareUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLikeVideosApiV1DouyinAppV2FetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchUserLikeVideosApiV1DouyinAppV2FetchUserLikeVideosGet(secUserId, maxCursor, counts, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLikeVideosApiV1DouyinAppV2FetchUserLikeVideosGet_15(secUserId: string, maxCursor?: number, counts?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchUserLikeVideosApiV1DouyinAppV2FetchUserLikeVideosGet_15(secUserId, maxCursor, counts, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostVideosApiV1DouyinAppV2FetchUserPostVideosGet(secUserId: string, maxCursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchUserPostVideosApiV1DouyinAppV2FetchUserPostVideosGet(secUserId, maxCursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostVideosApiV1DouyinAppV2FetchUserPostVideosGet_16(secUserId: string, maxCursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchUserPostVideosApiV1DouyinAppV2FetchUserPostVideosGet_16(secUserId, maxCursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_user_search_result_v2）/Get user search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_user_search_result_v2)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserSearchResultApiV1DouyinAppV2FetchUserSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchUserSearchResultApiV1DouyinAppV2FetchUserSearchResultGet(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_user_search_result_v2）/Get user search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_user_search_result_v2)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserSearchResultApiV1DouyinAppV2FetchUserSearchResultGet_17(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchUserSearchResultApiV1DouyinAppV2FetchUserSearchResultGet_17(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsApiV1DouyinAppV2FetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchVideoCommentsApiV1DouyinAppV2FetchVideoCommentsGet(awemeId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsApiV1DouyinAppV2FetchVideoCommentsGet_18(awemeId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchVideoCommentsApiV1DouyinAppV2FetchVideoCommentsGet_18(awemeId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsReplyApiV1DouyinAppV2FetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchVideoCommentsReplyApiV1DouyinAppV2FetchVideoCommentRepliesGet(itemId, commentId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsReplyApiV1DouyinAppV2FetchVideoCommentRepliesGet_19(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchVideoCommentsReplyApiV1DouyinAppV2FetchVideoCommentRepliesGet_19(itemId, commentId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集详情数据 ### 参数: - mix_id: 合集id ### 返回: - 视频合集详情数据  # [English] ### Purpose: - Get Douyin video mix detail data ### Parameters: - mix_id: Mix id ### Return: - Video mix detail data  # [示例/Example] mix_id = \"7302011174286002217\"
         * @summary 获取抖音视频合集详情数据/Get Douyin video mix detail data
         * @param {string} mixId 合集id/Mix id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoMixDetailApiV1DouyinAppV2FetchVideoMixDetailGet(mixId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchVideoMixDetailApiV1DouyinAppV2FetchVideoMixDetailGet(mixId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集详情数据 ### 参数: - mix_id: 合集id ### 返回: - 视频合集详情数据  # [English] ### Purpose: - Get Douyin video mix detail data ### Parameters: - mix_id: Mix id ### Return: - Video mix detail data  # [示例/Example] mix_id = \"7302011174286002217\"
         * @summary 获取抖音视频合集详情数据/Get Douyin video mix detail data
         * @param {string} mixId 合集id/Mix id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoMixDetailApiV1DouyinAppV2FetchVideoMixDetailGet_20(mixId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchVideoMixDetailApiV1DouyinAppV2FetchVideoMixDetailGet_20(mixId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集作品列表数据 ### 参数: - mix_id: 合集id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 视频合集作品列表数据  # [English] ### Purpose: - Get Douyin video mix post list data ### Parameters: - mix_id: Mix id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Video mix post list data  # [示例/Example] mix_id = \"7302011174286002217\" cursor = 0 count = 20
         * @summary 获取抖音视频合集作品列表数据/Get Douyin video mix post list data
         * @param {string} mixId 合集id/Mix id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoMixPostListApiV1DouyinAppV2FetchVideoMixPostListGet(mixId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchVideoMixPostListApiV1DouyinAppV2FetchVideoMixPostListGet(mixId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集作品列表数据 ### 参数: - mix_id: 合集id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 视频合集作品列表数据  # [English] ### Purpose: - Get Douyin video mix post list data ### Parameters: - mix_id: Mix id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Video mix post list data  # [示例/Example] mix_id = \"7302011174286002217\" cursor = 0 count = 20
         * @summary 获取抖音视频合集作品列表数据/Get Douyin video mix post list data
         * @param {string} mixId 合集id/Mix id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoMixPostListApiV1DouyinAppV2FetchVideoMixPostListGet_21(mixId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchVideoMixPostListApiV1DouyinAppV2FetchVideoMixPostListGet_21(mixId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_video_search_result）/Get video search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_video_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoSearchResultApiV1DouyinAppV2FetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchVideoSearchResultApiV1DouyinAppV2FetchVideoSearchResultGet(keyword, offset, count, sortType, publishTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_video_search_result）/Get video search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_video_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoSearchResultApiV1DouyinAppV2FetchVideoSearchResultGet_22(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).fetchVideoSearchResultApiV1DouyinAppV2FetchVideoSearchResultGet_22(keyword, offset, count, sortType, publishTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音短链接 ### 参数: - url: 抖音链接 ### 返回: - 短链接数据  # [English] ### Purpose: - Generate Douyin short link ### Parameters: - url: Douyin link ### Return: - Short link data  # [示例/Example] url = \"https://www.douyin.com/passport/web/logout/\"
         * @summary 生成抖音短链接/Generate Douyin short link
         * @param {string} url 抖音链接/Douyin link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateDouyinShortUrlApiV1DouyinAppV2GenerateDouyinShortUrlGet(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).generateDouyinShortUrlApiV1DouyinAppV2GenerateDouyinShortUrlGet(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音短链接 ### 参数: - url: 抖音链接 ### 返回: - 短链接数据  # [English] ### Purpose: - Generate Douyin short link ### Parameters: - url: Douyin link ### Return: - Short link data  # [示例/Example] url = \"https://www.douyin.com/passport/web/logout/\"
         * @summary 生成抖音短链接/Generate Douyin short link
         * @param {string} url 抖音链接/Douyin link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateDouyinShortUrlApiV1DouyinAppV2GenerateDouyinShortUrlGet_23(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).generateDouyinShortUrlApiV1DouyinAppV2GenerateDouyinShortUrlGet_23(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音视频分享二维码 ### 参数: - object_id: 作品id ### 返回: - 二维码数据  # [English] ### Purpose: - Generate Douyin video share QR code ### Parameters: - object_id: Video id ### Return: - QR code data  # [示例/Example] object_id = \"7348044435755846962\"
         * @summary 生成抖音视频分享二维码/Generate Douyin video share QR code
         * @param {string} objectId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateDouyinVideoShareQrcodeApiV1DouyinAppV2GenerateDouyinVideoShareQrcodeGet(objectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).generateDouyinVideoShareQrcodeApiV1DouyinAppV2GenerateDouyinVideoShareQrcodeGet(objectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音视频分享二维码 ### 参数: - object_id: 作品id ### 返回: - 二维码数据  # [English] ### Purpose: - Generate Douyin video share QR code ### Parameters: - object_id: Video id ### Return: - QR code data  # [示例/Example] object_id = \"7348044435755846962\"
         * @summary 生成抖音视频分享二维码/Generate Douyin video share QR code
         * @param {string} objectId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateDouyinVideoShareQrcodeApiV1DouyinAppV2GenerateDouyinVideoShareQrcodeGet_24(objectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).generateDouyinVideoShareQrcodeApiV1DouyinAppV2GenerateDouyinVideoShareQrcodeGet_24(objectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlerUserProfileApiV1DouyinAppV2HandlerUserProfileGet(secUserId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).handlerUserProfileApiV1DouyinAppV2HandlerUserProfileGet(secUserId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlerUserProfileApiV1DouyinAppV2HandlerUserProfileGet_25(secUserId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV2APIApiAxiosParamCreator(configuration).handlerUserProfileApiV1DouyinAppV2HandlerUserProfileGet_25(secUserId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DouyinAppV2APIApi - factory interface
 * @export
 */
export const DouyinAppV2APIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_general_search_result）/Get comprehensive search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_general_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1DouyinAppV2FetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchGeneralSearchResultApiV1DouyinAppV2FetchGeneralSearchResultGet(keyword, offset, count, sortType, publishTime, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_general_search_result）/Get comprehensive search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_general_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1DouyinAppV2FetchGeneralSearchResultGet_1(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchGeneralSearchResultApiV1DouyinAppV2FetchGeneralSearchResultGet_1(keyword, offset, count, sortType, publishTime, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1DouyinAppV2FetchHashtagDetailGet(chId: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchHashtagDetailApiV1DouyinAppV2FetchHashtagDetailGet(chId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1DouyinAppV2FetchHashtagDetailGet_2(chId: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchHashtagDetailApiV1DouyinAppV2FetchHashtagDetailGet_2(chId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagSearchResultApiV1DouyinAppV2FetchHashtagSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchHashtagSearchResultApiV1DouyinAppV2FetchHashtagSearchResultGet(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagSearchResultApiV1DouyinAppV2FetchHashtagSearchResultGet_3(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchHashtagSearchResultApiV1DouyinAppV2FetchHashtagSearchResultGet_3(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagVideoListApiV1DouyinAppV2FetchHashtagVideoListGet(chId: number, cursor?: number, sortType?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchHashtagVideoListApiV1DouyinAppV2FetchHashtagVideoListGet(chId, cursor, sortType, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagVideoListApiV1DouyinAppV2FetchHashtagVideoListGet_4(chId: number, cursor?: number, sortType?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchHashtagVideoListApiV1DouyinAppV2FetchHashtagVideoListGet_4(chId, cursor, sortType, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
         * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
         * @param {number} categoryId 分类id/Category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchApiV1DouyinAppV2FetchBrandHotSearchListDetailGet(categoryId: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchHotBrandSearchApiV1DouyinAppV2FetchBrandHotSearchListDetailGet(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
         * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
         * @param {number} categoryId 分类id/Category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchApiV1DouyinAppV2FetchBrandHotSearchListDetailGet_5(categoryId: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchHotBrandSearchApiV1DouyinAppV2FetchBrandHotSearchListDetailGet_5(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
         * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchCategoryApiV1DouyinAppV2FetchBrandHotSearchListGet(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchHotBrandSearchCategoryApiV1DouyinAppV2FetchBrandHotSearchListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
         * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchCategoryApiV1DouyinAppV2FetchBrandHotSearchListGet_6(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchHotBrandSearchCategoryApiV1DouyinAppV2FetchBrandHotSearchListGet_6(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音热搜榜数据 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data ### Return: - Hot search list data  # [示例/Example] pass
         * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchListApiV1DouyinAppV2FetchHotSearchListGet(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchHotSearchListApiV1DouyinAppV2FetchHotSearchListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音热搜榜数据 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data ### Return: - Hot search list data  # [示例/Example] pass
         * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchListApiV1DouyinAppV2FetchHotSearchListGet_7(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchHotSearchListApiV1DouyinAppV2FetchHotSearchListGet_7(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
         * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveHotSearchListApiV1DouyinAppV2FetchLiveHotSearchListGet(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchLiveHotSearchListApiV1DouyinAppV2FetchLiveHotSearchListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
         * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveHotSearchListApiV1DouyinAppV2FetchLiveHotSearchListGet_8(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchLiveHotSearchListApiV1DouyinAppV2FetchLiveHotSearchListGet_8(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicDetailApiV1DouyinAppV2FetchMusicDetailGet(musicId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchMusicDetailApiV1DouyinAppV2FetchMusicDetailGet(musicId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicDetailApiV1DouyinAppV2FetchMusicDetailGet_9(musicId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchMusicDetailApiV1DouyinAppV2FetchMusicDetailGet_9(musicId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
         * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicHotSearchListApiV1DouyinAppV2FetchMusicHotSearchListGet(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchMusicHotSearchListApiV1DouyinAppV2FetchMusicHotSearchListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
         * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicHotSearchListApiV1DouyinAppV2FetchMusicHotSearchListGet_10(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchMusicHotSearchListApiV1DouyinAppV2FetchMusicHotSearchListGet_10(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicSearchResultApiV1DouyinAppV2FetchMusicSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchMusicSearchResultApiV1DouyinAppV2FetchMusicSearchResultGet(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicSearchResultApiV1DouyinAppV2FetchMusicSearchResultGet_11(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchMusicSearchResultApiV1DouyinAppV2FetchMusicSearchResultGet_11(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicVideoListApiV1DouyinAppV2FetchMusicVideoListGet(musicId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchMusicVideoListApiV1DouyinAppV2FetchMusicVideoListGet(musicId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicVideoListApiV1DouyinAppV2FetchMusicVideoListGet_12(musicId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchMusicVideoListApiV1DouyinAppV2FetchMusicVideoListGet_12(musicId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinAppV2FetchOneVideoGet(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchOneVideoApiV1DouyinAppV2FetchOneVideoGet(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinAppV2FetchOneVideoGet_13(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchOneVideoApiV1DouyinAppV2FetchOneVideoGet_13(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1DouyinAppV2FetchOneVideoByShareUrlGet(shareUrl: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchOneVideoByShareUrlApiV1DouyinAppV2FetchOneVideoByShareUrlGet(shareUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1DouyinAppV2FetchOneVideoByShareUrlGet_14(shareUrl: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchOneVideoByShareUrlApiV1DouyinAppV2FetchOneVideoByShareUrlGet_14(shareUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1DouyinAppV2FetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchUserLikeVideosApiV1DouyinAppV2FetchUserLikeVideosGet(secUserId, maxCursor, counts, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1DouyinAppV2FetchUserLikeVideosGet_15(secUserId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchUserLikeVideosApiV1DouyinAppV2FetchUserLikeVideosGet_15(secUserId, maxCursor, counts, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1DouyinAppV2FetchUserPostVideosGet(secUserId: string, maxCursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchUserPostVideosApiV1DouyinAppV2FetchUserPostVideosGet(secUserId, maxCursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1DouyinAppV2FetchUserPostVideosGet_16(secUserId: string, maxCursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchUserPostVideosApiV1DouyinAppV2FetchUserPostVideosGet_16(secUserId, maxCursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_user_search_result_v2）/Get user search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_user_search_result_v2)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1DouyinAppV2FetchUserSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchUserSearchResultApiV1DouyinAppV2FetchUserSearchResultGet(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_user_search_result_v2）/Get user search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_user_search_result_v2)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1DouyinAppV2FetchUserSearchResultGet_17(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchUserSearchResultApiV1DouyinAppV2FetchUserSearchResultGet_17(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1DouyinAppV2FetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchVideoCommentsApiV1DouyinAppV2FetchVideoCommentsGet(awemeId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1DouyinAppV2FetchVideoCommentsGet_18(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchVideoCommentsApiV1DouyinAppV2FetchVideoCommentsGet_18(awemeId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1DouyinAppV2FetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchVideoCommentsReplyApiV1DouyinAppV2FetchVideoCommentRepliesGet(itemId, commentId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1DouyinAppV2FetchVideoCommentRepliesGet_19(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchVideoCommentsReplyApiV1DouyinAppV2FetchVideoCommentRepliesGet_19(itemId, commentId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集详情数据 ### 参数: - mix_id: 合集id ### 返回: - 视频合集详情数据  # [English] ### Purpose: - Get Douyin video mix detail data ### Parameters: - mix_id: Mix id ### Return: - Video mix detail data  # [示例/Example] mix_id = \"7302011174286002217\"
         * @summary 获取抖音视频合集详情数据/Get Douyin video mix detail data
         * @param {string} mixId 合集id/Mix id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoMixDetailApiV1DouyinAppV2FetchVideoMixDetailGet(mixId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchVideoMixDetailApiV1DouyinAppV2FetchVideoMixDetailGet(mixId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集详情数据 ### 参数: - mix_id: 合集id ### 返回: - 视频合集详情数据  # [English] ### Purpose: - Get Douyin video mix detail data ### Parameters: - mix_id: Mix id ### Return: - Video mix detail data  # [示例/Example] mix_id = \"7302011174286002217\"
         * @summary 获取抖音视频合集详情数据/Get Douyin video mix detail data
         * @param {string} mixId 合集id/Mix id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoMixDetailApiV1DouyinAppV2FetchVideoMixDetailGet_20(mixId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchVideoMixDetailApiV1DouyinAppV2FetchVideoMixDetailGet_20(mixId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集作品列表数据 ### 参数: - mix_id: 合集id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 视频合集作品列表数据  # [English] ### Purpose: - Get Douyin video mix post list data ### Parameters: - mix_id: Mix id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Video mix post list data  # [示例/Example] mix_id = \"7302011174286002217\" cursor = 0 count = 20
         * @summary 获取抖音视频合集作品列表数据/Get Douyin video mix post list data
         * @param {string} mixId 合集id/Mix id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoMixPostListApiV1DouyinAppV2FetchVideoMixPostListGet(mixId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchVideoMixPostListApiV1DouyinAppV2FetchVideoMixPostListGet(mixId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集作品列表数据 ### 参数: - mix_id: 合集id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 视频合集作品列表数据  # [English] ### Purpose: - Get Douyin video mix post list data ### Parameters: - mix_id: Mix id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Video mix post list data  # [示例/Example] mix_id = \"7302011174286002217\" cursor = 0 count = 20
         * @summary 获取抖音视频合集作品列表数据/Get Douyin video mix post list data
         * @param {string} mixId 合集id/Mix id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoMixPostListApiV1DouyinAppV2FetchVideoMixPostListGet_21(mixId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchVideoMixPostListApiV1DouyinAppV2FetchVideoMixPostListGet_21(mixId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_video_search_result）/Get video search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_video_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1DouyinAppV2FetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchVideoSearchResultApiV1DouyinAppV2FetchVideoSearchResultGet(keyword, offset, count, sortType, publishTime, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_video_search_result）/Get video search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_video_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1DouyinAppV2FetchVideoSearchResultGet_22(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).fetchVideoSearchResultApiV1DouyinAppV2FetchVideoSearchResultGet_22(keyword, offset, count, sortType, publishTime, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成抖音短链接 ### 参数: - url: 抖音链接 ### 返回: - 短链接数据  # [English] ### Purpose: - Generate Douyin short link ### Parameters: - url: Douyin link ### Return: - Short link data  # [示例/Example] url = \"https://www.douyin.com/passport/web/logout/\"
         * @summary 生成抖音短链接/Generate Douyin short link
         * @param {string} url 抖音链接/Douyin link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDouyinShortUrlApiV1DouyinAppV2GenerateDouyinShortUrlGet(url: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).generateDouyinShortUrlApiV1DouyinAppV2GenerateDouyinShortUrlGet(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成抖音短链接 ### 参数: - url: 抖音链接 ### 返回: - 短链接数据  # [English] ### Purpose: - Generate Douyin short link ### Parameters: - url: Douyin link ### Return: - Short link data  # [示例/Example] url = \"https://www.douyin.com/passport/web/logout/\"
         * @summary 生成抖音短链接/Generate Douyin short link
         * @param {string} url 抖音链接/Douyin link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDouyinShortUrlApiV1DouyinAppV2GenerateDouyinShortUrlGet_23(url: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).generateDouyinShortUrlApiV1DouyinAppV2GenerateDouyinShortUrlGet_23(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成抖音视频分享二维码 ### 参数: - object_id: 作品id ### 返回: - 二维码数据  # [English] ### Purpose: - Generate Douyin video share QR code ### Parameters: - object_id: Video id ### Return: - QR code data  # [示例/Example] object_id = \"7348044435755846962\"
         * @summary 生成抖音视频分享二维码/Generate Douyin video share QR code
         * @param {string} objectId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDouyinVideoShareQrcodeApiV1DouyinAppV2GenerateDouyinVideoShareQrcodeGet(objectId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).generateDouyinVideoShareQrcodeApiV1DouyinAppV2GenerateDouyinVideoShareQrcodeGet(objectId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成抖音视频分享二维码 ### 参数: - object_id: 作品id ### 返回: - 二维码数据  # [English] ### Purpose: - Generate Douyin video share QR code ### Parameters: - object_id: Video id ### Return: - QR code data  # [示例/Example] object_id = \"7348044435755846962\"
         * @summary 生成抖音视频分享二维码/Generate Douyin video share QR code
         * @param {string} objectId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDouyinVideoShareQrcodeApiV1DouyinAppV2GenerateDouyinVideoShareQrcodeGet_24(objectId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).generateDouyinVideoShareQrcodeApiV1DouyinAppV2GenerateDouyinVideoShareQrcodeGet_24(objectId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1DouyinAppV2HandlerUserProfileGet(secUserId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).handlerUserProfileApiV1DouyinAppV2HandlerUserProfileGet(secUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1DouyinAppV2HandlerUserProfileGet_25(secUserId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV2APIApiFp(configuration).handlerUserProfileApiV1DouyinAppV2HandlerUserProfileGet_25(secUserId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DouyinAppV2APIApi - interface
 * @export
 * @interface DouyinAppV2APIApi
 */
export interface DouyinAppV2APIApiInterface {
    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_general_search_result）/Get comprehensive search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_general_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchGeneralSearchResultApiV1DouyinAppV2FetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_general_search_result）/Get comprehensive search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_general_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchGeneralSearchResultApiV1DouyinAppV2FetchGeneralSearchResultGet_1(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
     * @summary 获取指定话题的详情数据/Get details of specified hashtag
     * @param {number} chId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchHashtagDetailApiV1DouyinAppV2FetchHashtagDetailGet(chId: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
     * @summary 获取指定话题的详情数据/Get details of specified hashtag
     * @param {number} chId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchHashtagDetailApiV1DouyinAppV2FetchHashtagDetailGet_2(chId: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchHashtagSearchResultApiV1DouyinAppV2FetchHashtagSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchHashtagSearchResultApiV1DouyinAppV2FetchHashtagSearchResultGet_3(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
     * @summary 获取指定话题的作品数据/Get video list of specified hashtag
     * @param {number} chId 话题id/Hashtag id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchHashtagVideoListApiV1DouyinAppV2FetchHashtagVideoListGet(chId: number, cursor?: number, sortType?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
     * @summary 获取指定话题的作品数据/Get video list of specified hashtag
     * @param {number} chId 话题id/Hashtag id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchHashtagVideoListApiV1DouyinAppV2FetchHashtagVideoListGet_4(chId: number, cursor?: number, sortType?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
     * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
     * @param {number} categoryId 分类id/Category id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchHotBrandSearchApiV1DouyinAppV2FetchBrandHotSearchListDetailGet(categoryId: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
     * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
     * @param {number} categoryId 分类id/Category id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchHotBrandSearchApiV1DouyinAppV2FetchBrandHotSearchListDetailGet_5(categoryId: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
     * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchHotBrandSearchCategoryApiV1DouyinAppV2FetchBrandHotSearchListGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
     * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchHotBrandSearchCategoryApiV1DouyinAppV2FetchBrandHotSearchListGet_6(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音热搜榜数据 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data ### Return: - Hot search list data  # [示例/Example] pass
     * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchHotSearchListApiV1DouyinAppV2FetchHotSearchListGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音热搜榜数据 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data ### Return: - Hot search list data  # [示例/Example] pass
     * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchHotSearchListApiV1DouyinAppV2FetchHotSearchListGet_7(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
     * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchLiveHotSearchListApiV1DouyinAppV2FetchLiveHotSearchListGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
     * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchLiveHotSearchListApiV1DouyinAppV2FetchLiveHotSearchListGet_8(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
     * @summary 获取指定音乐的详情数据/Get details of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchMusicDetailApiV1DouyinAppV2FetchMusicDetailGet(musicId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
     * @summary 获取指定音乐的详情数据/Get details of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchMusicDetailApiV1DouyinAppV2FetchMusicDetailGet_9(musicId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
     * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchMusicHotSearchListApiV1DouyinAppV2FetchMusicHotSearchListGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
     * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchMusicHotSearchListApiV1DouyinAppV2FetchMusicHotSearchListGet_10(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchMusicSearchResultApiV1DouyinAppV2FetchMusicSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchMusicSearchResultApiV1DouyinAppV2FetchMusicSearchResultGet_11(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
     * @summary 获取指定音乐的视频列表数据/Get video list of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchMusicVideoListApiV1DouyinAppV2FetchMusicVideoListGet(musicId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
     * @summary 获取指定音乐的视频列表数据/Get video list of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchMusicVideoListApiV1DouyinAppV2FetchMusicVideoListGet_12(musicId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchOneVideoApiV1DouyinAppV2FetchOneVideoGet(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchOneVideoApiV1DouyinAppV2FetchOneVideoGet_13(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchOneVideoByShareUrlApiV1DouyinAppV2FetchOneVideoByShareUrlGet(shareUrl: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchOneVideoByShareUrlApiV1DouyinAppV2FetchOneVideoByShareUrlGet_14(shareUrl: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchUserLikeVideosApiV1DouyinAppV2FetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchUserLikeVideosApiV1DouyinAppV2FetchUserLikeVideosGet_15(secUserId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchUserPostVideosApiV1DouyinAppV2FetchUserPostVideosGet(secUserId: string, maxCursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchUserPostVideosApiV1DouyinAppV2FetchUserPostVideosGet_16(secUserId: string, maxCursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
     * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_user_search_result_v2）/Get user search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_user_search_result_v2)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchUserSearchResultApiV1DouyinAppV2FetchUserSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
     * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_user_search_result_v2）/Get user search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_user_search_result_v2)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchUserSearchResultApiV1DouyinAppV2FetchUserSearchResultGet_17(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchVideoCommentsApiV1DouyinAppV2FetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchVideoCommentsApiV1DouyinAppV2FetchVideoCommentsGet_18(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchVideoCommentsReplyApiV1DouyinAppV2FetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchVideoCommentsReplyApiV1DouyinAppV2FetchVideoCommentRepliesGet_19(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音视频合集详情数据 ### 参数: - mix_id: 合集id ### 返回: - 视频合集详情数据  # [English] ### Purpose: - Get Douyin video mix detail data ### Parameters: - mix_id: Mix id ### Return: - Video mix detail data  # [示例/Example] mix_id = \"7302011174286002217\"
     * @summary 获取抖音视频合集详情数据/Get Douyin video mix detail data
     * @param {string} mixId 合集id/Mix id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchVideoMixDetailApiV1DouyinAppV2FetchVideoMixDetailGet(mixId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音视频合集详情数据 ### 参数: - mix_id: 合集id ### 返回: - 视频合集详情数据  # [English] ### Purpose: - Get Douyin video mix detail data ### Parameters: - mix_id: Mix id ### Return: - Video mix detail data  # [示例/Example] mix_id = \"7302011174286002217\"
     * @summary 获取抖音视频合集详情数据/Get Douyin video mix detail data
     * @param {string} mixId 合集id/Mix id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchVideoMixDetailApiV1DouyinAppV2FetchVideoMixDetailGet_20(mixId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音视频合集作品列表数据 ### 参数: - mix_id: 合集id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 视频合集作品列表数据  # [English] ### Purpose: - Get Douyin video mix post list data ### Parameters: - mix_id: Mix id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Video mix post list data  # [示例/Example] mix_id = \"7302011174286002217\" cursor = 0 count = 20
     * @summary 获取抖音视频合集作品列表数据/Get Douyin video mix post list data
     * @param {string} mixId 合集id/Mix id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchVideoMixPostListApiV1DouyinAppV2FetchVideoMixPostListGet(mixId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音视频合集作品列表数据 ### 参数: - mix_id: 合集id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 视频合集作品列表数据  # [English] ### Purpose: - Get Douyin video mix post list data ### Parameters: - mix_id: Mix id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Video mix post list data  # [示例/Example] mix_id = \"7302011174286002217\" cursor = 0 count = 20
     * @summary 获取抖音视频合集作品列表数据/Get Douyin video mix post list data
     * @param {string} mixId 合集id/Mix id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchVideoMixPostListApiV1DouyinAppV2FetchVideoMixPostListGet_21(mixId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_video_search_result）/Get video search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_video_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchVideoSearchResultApiV1DouyinAppV2FetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_video_search_result）/Get video search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_video_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    fetchVideoSearchResultApiV1DouyinAppV2FetchVideoSearchResultGet_22(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成抖音短链接 ### 参数: - url: 抖音链接 ### 返回: - 短链接数据  # [English] ### Purpose: - Generate Douyin short link ### Parameters: - url: Douyin link ### Return: - Short link data  # [示例/Example] url = \"https://www.douyin.com/passport/web/logout/\"
     * @summary 生成抖音短链接/Generate Douyin short link
     * @param {string} url 抖音链接/Douyin link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    generateDouyinShortUrlApiV1DouyinAppV2GenerateDouyinShortUrlGet(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成抖音短链接 ### 参数: - url: 抖音链接 ### 返回: - 短链接数据  # [English] ### Purpose: - Generate Douyin short link ### Parameters: - url: Douyin link ### Return: - Short link data  # [示例/Example] url = \"https://www.douyin.com/passport/web/logout/\"
     * @summary 生成抖音短链接/Generate Douyin short link
     * @param {string} url 抖音链接/Douyin link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    generateDouyinShortUrlApiV1DouyinAppV2GenerateDouyinShortUrlGet_23(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成抖音视频分享二维码 ### 参数: - object_id: 作品id ### 返回: - 二维码数据  # [English] ### Purpose: - Generate Douyin video share QR code ### Parameters: - object_id: Video id ### Return: - QR code data  # [示例/Example] object_id = \"7348044435755846962\"
     * @summary 生成抖音视频分享二维码/Generate Douyin video share QR code
     * @param {string} objectId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    generateDouyinVideoShareQrcodeApiV1DouyinAppV2GenerateDouyinVideoShareQrcodeGet(objectId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成抖音视频分享二维码 ### 参数: - object_id: 作品id ### 返回: - 二维码数据  # [English] ### Purpose: - Generate Douyin video share QR code ### Parameters: - object_id: Video id ### Return: - QR code data  # [示例/Example] object_id = \"7348044435755846962\"
     * @summary 生成抖音视频分享二维码/Generate Douyin video share QR code
     * @param {string} objectId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    generateDouyinVideoShareQrcodeApiV1DouyinAppV2GenerateDouyinVideoShareQrcodeGet_24(objectId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    handlerUserProfileApiV1DouyinAppV2HandlerUserProfileGet(secUserId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApiInterface
     */
    handlerUserProfileApiV1DouyinAppV2HandlerUserProfileGet_25(secUserId: string, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * DouyinAppV2APIApi - object-oriented interface
 * @export
 * @class DouyinAppV2APIApi
 * @extends {BaseAPI}
 */
export class DouyinAppV2APIApi extends BaseAPI implements DouyinAppV2APIApiInterface {
    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_general_search_result）/Get comprehensive search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_general_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchGeneralSearchResultApiV1DouyinAppV2FetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchGeneralSearchResultApiV1DouyinAppV2FetchGeneralSearchResultGet(keyword, offset, count, sortType, publishTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_general_search_result）/Get comprehensive search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_general_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchGeneralSearchResultApiV1DouyinAppV2FetchGeneralSearchResultGet_1(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchGeneralSearchResultApiV1DouyinAppV2FetchGeneralSearchResultGet_1(keyword, offset, count, sortType, publishTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
     * @summary 获取指定话题的详情数据/Get details of specified hashtag
     * @param {number} chId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchHashtagDetailApiV1DouyinAppV2FetchHashtagDetailGet(chId: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchHashtagDetailApiV1DouyinAppV2FetchHashtagDetailGet(chId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
     * @summary 获取指定话题的详情数据/Get details of specified hashtag
     * @param {number} chId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchHashtagDetailApiV1DouyinAppV2FetchHashtagDetailGet_2(chId: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchHashtagDetailApiV1DouyinAppV2FetchHashtagDetailGet_2(chId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchHashtagSearchResultApiV1DouyinAppV2FetchHashtagSearchResultGet(keyword: string, offset?: number, count?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchHashtagSearchResultApiV1DouyinAppV2FetchHashtagSearchResultGet(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchHashtagSearchResultApiV1DouyinAppV2FetchHashtagSearchResultGet_3(keyword: string, offset?: number, count?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchHashtagSearchResultApiV1DouyinAppV2FetchHashtagSearchResultGet_3(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
     * @summary 获取指定话题的作品数据/Get video list of specified hashtag
     * @param {number} chId 话题id/Hashtag id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchHashtagVideoListApiV1DouyinAppV2FetchHashtagVideoListGet(chId: number, cursor?: number, sortType?: number, count?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchHashtagVideoListApiV1DouyinAppV2FetchHashtagVideoListGet(chId, cursor, sortType, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
     * @summary 获取指定话题的作品数据/Get video list of specified hashtag
     * @param {number} chId 话题id/Hashtag id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchHashtagVideoListApiV1DouyinAppV2FetchHashtagVideoListGet_4(chId: number, cursor?: number, sortType?: number, count?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchHashtagVideoListApiV1DouyinAppV2FetchHashtagVideoListGet_4(chId, cursor, sortType, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
     * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
     * @param {number} categoryId 分类id/Category id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchHotBrandSearchApiV1DouyinAppV2FetchBrandHotSearchListDetailGet(categoryId: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchHotBrandSearchApiV1DouyinAppV2FetchBrandHotSearchListDetailGet(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
     * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
     * @param {number} categoryId 分类id/Category id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchHotBrandSearchApiV1DouyinAppV2FetchBrandHotSearchListDetailGet_5(categoryId: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchHotBrandSearchApiV1DouyinAppV2FetchBrandHotSearchListDetailGet_5(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
     * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchHotBrandSearchCategoryApiV1DouyinAppV2FetchBrandHotSearchListGet(options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchHotBrandSearchCategoryApiV1DouyinAppV2FetchBrandHotSearchListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
     * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchHotBrandSearchCategoryApiV1DouyinAppV2FetchBrandHotSearchListGet_6(options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchHotBrandSearchCategoryApiV1DouyinAppV2FetchBrandHotSearchListGet_6(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音热搜榜数据 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data ### Return: - Hot search list data  # [示例/Example] pass
     * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchHotSearchListApiV1DouyinAppV2FetchHotSearchListGet(options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchHotSearchListApiV1DouyinAppV2FetchHotSearchListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音热搜榜数据 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data ### Return: - Hot search list data  # [示例/Example] pass
     * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchHotSearchListApiV1DouyinAppV2FetchHotSearchListGet_7(options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchHotSearchListApiV1DouyinAppV2FetchHotSearchListGet_7(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
     * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchLiveHotSearchListApiV1DouyinAppV2FetchLiveHotSearchListGet(options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchLiveHotSearchListApiV1DouyinAppV2FetchLiveHotSearchListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
     * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchLiveHotSearchListApiV1DouyinAppV2FetchLiveHotSearchListGet_8(options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchLiveHotSearchListApiV1DouyinAppV2FetchLiveHotSearchListGet_8(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
     * @summary 获取指定音乐的详情数据/Get details of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchMusicDetailApiV1DouyinAppV2FetchMusicDetailGet(musicId: string, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchMusicDetailApiV1DouyinAppV2FetchMusicDetailGet(musicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
     * @summary 获取指定音乐的详情数据/Get details of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchMusicDetailApiV1DouyinAppV2FetchMusicDetailGet_9(musicId: string, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchMusicDetailApiV1DouyinAppV2FetchMusicDetailGet_9(musicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
     * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchMusicHotSearchListApiV1DouyinAppV2FetchMusicHotSearchListGet(options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchMusicHotSearchListApiV1DouyinAppV2FetchMusicHotSearchListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
     * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchMusicHotSearchListApiV1DouyinAppV2FetchMusicHotSearchListGet_10(options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchMusicHotSearchListApiV1DouyinAppV2FetchMusicHotSearchListGet_10(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchMusicSearchResultApiV1DouyinAppV2FetchMusicSearchResultGet(keyword: string, offset?: number, count?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchMusicSearchResultApiV1DouyinAppV2FetchMusicSearchResultGet(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchMusicSearchResultApiV1DouyinAppV2FetchMusicSearchResultGet_11(keyword: string, offset?: number, count?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchMusicSearchResultApiV1DouyinAppV2FetchMusicSearchResultGet_11(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
     * @summary 获取指定音乐的视频列表数据/Get video list of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchMusicVideoListApiV1DouyinAppV2FetchMusicVideoListGet(musicId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchMusicVideoListApiV1DouyinAppV2FetchMusicVideoListGet(musicId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
     * @summary 获取指定音乐的视频列表数据/Get video list of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchMusicVideoListApiV1DouyinAppV2FetchMusicVideoListGet_12(musicId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchMusicVideoListApiV1DouyinAppV2FetchMusicVideoListGet_12(musicId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchOneVideoApiV1DouyinAppV2FetchOneVideoGet(awemeId: string, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchOneVideoApiV1DouyinAppV2FetchOneVideoGet(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchOneVideoApiV1DouyinAppV2FetchOneVideoGet_13(awemeId: string, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchOneVideoApiV1DouyinAppV2FetchOneVideoGet_13(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchOneVideoByShareUrlApiV1DouyinAppV2FetchOneVideoByShareUrlGet(shareUrl: string, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchOneVideoByShareUrlApiV1DouyinAppV2FetchOneVideoByShareUrlGet(shareUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchOneVideoByShareUrlApiV1DouyinAppV2FetchOneVideoByShareUrlGet_14(shareUrl: string, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchOneVideoByShareUrlApiV1DouyinAppV2FetchOneVideoByShareUrlGet_14(shareUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchUserLikeVideosApiV1DouyinAppV2FetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchUserLikeVideosApiV1DouyinAppV2FetchUserLikeVideosGet(secUserId, maxCursor, counts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchUserLikeVideosApiV1DouyinAppV2FetchUserLikeVideosGet_15(secUserId: string, maxCursor?: number, counts?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchUserLikeVideosApiV1DouyinAppV2FetchUserLikeVideosGet_15(secUserId, maxCursor, counts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchUserPostVideosApiV1DouyinAppV2FetchUserPostVideosGet(secUserId: string, maxCursor?: number, count?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchUserPostVideosApiV1DouyinAppV2FetchUserPostVideosGet(secUserId, maxCursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchUserPostVideosApiV1DouyinAppV2FetchUserPostVideosGet_16(secUserId: string, maxCursor?: number, count?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchUserPostVideosApiV1DouyinAppV2FetchUserPostVideosGet_16(secUserId, maxCursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
     * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_user_search_result_v2）/Get user search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_user_search_result_v2)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchUserSearchResultApiV1DouyinAppV2FetchUserSearchResultGet(keyword: string, offset?: number, count?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchUserSearchResultApiV1DouyinAppV2FetchUserSearchResultGet(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
     * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_user_search_result_v2）/Get user search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_user_search_result_v2)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchUserSearchResultApiV1DouyinAppV2FetchUserSearchResultGet_17(keyword: string, offset?: number, count?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchUserSearchResultApiV1DouyinAppV2FetchUserSearchResultGet_17(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchVideoCommentsApiV1DouyinAppV2FetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchVideoCommentsApiV1DouyinAppV2FetchVideoCommentsGet(awemeId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchVideoCommentsApiV1DouyinAppV2FetchVideoCommentsGet_18(awemeId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchVideoCommentsApiV1DouyinAppV2FetchVideoCommentsGet_18(awemeId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchVideoCommentsReplyApiV1DouyinAppV2FetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchVideoCommentsReplyApiV1DouyinAppV2FetchVideoCommentRepliesGet(itemId, commentId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchVideoCommentsReplyApiV1DouyinAppV2FetchVideoCommentRepliesGet_19(itemId: string, commentId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchVideoCommentsReplyApiV1DouyinAppV2FetchVideoCommentRepliesGet_19(itemId, commentId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音视频合集详情数据 ### 参数: - mix_id: 合集id ### 返回: - 视频合集详情数据  # [English] ### Purpose: - Get Douyin video mix detail data ### Parameters: - mix_id: Mix id ### Return: - Video mix detail data  # [示例/Example] mix_id = \"7302011174286002217\"
     * @summary 获取抖音视频合集详情数据/Get Douyin video mix detail data
     * @param {string} mixId 合集id/Mix id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchVideoMixDetailApiV1DouyinAppV2FetchVideoMixDetailGet(mixId: string, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchVideoMixDetailApiV1DouyinAppV2FetchVideoMixDetailGet(mixId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音视频合集详情数据 ### 参数: - mix_id: 合集id ### 返回: - 视频合集详情数据  # [English] ### Purpose: - Get Douyin video mix detail data ### Parameters: - mix_id: Mix id ### Return: - Video mix detail data  # [示例/Example] mix_id = \"7302011174286002217\"
     * @summary 获取抖音视频合集详情数据/Get Douyin video mix detail data
     * @param {string} mixId 合集id/Mix id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchVideoMixDetailApiV1DouyinAppV2FetchVideoMixDetailGet_20(mixId: string, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchVideoMixDetailApiV1DouyinAppV2FetchVideoMixDetailGet_20(mixId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音视频合集作品列表数据 ### 参数: - mix_id: 合集id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 视频合集作品列表数据  # [English] ### Purpose: - Get Douyin video mix post list data ### Parameters: - mix_id: Mix id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Video mix post list data  # [示例/Example] mix_id = \"7302011174286002217\" cursor = 0 count = 20
     * @summary 获取抖音视频合集作品列表数据/Get Douyin video mix post list data
     * @param {string} mixId 合集id/Mix id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchVideoMixPostListApiV1DouyinAppV2FetchVideoMixPostListGet(mixId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchVideoMixPostListApiV1DouyinAppV2FetchVideoMixPostListGet(mixId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音视频合集作品列表数据 ### 参数: - mix_id: 合集id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 视频合集作品列表数据  # [English] ### Purpose: - Get Douyin video mix post list data ### Parameters: - mix_id: Mix id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Video mix post list data  # [示例/Example] mix_id = \"7302011174286002217\" cursor = 0 count = 20
     * @summary 获取抖音视频合集作品列表数据/Get Douyin video mix post list data
     * @param {string} mixId 合集id/Mix id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchVideoMixPostListApiV1DouyinAppV2FetchVideoMixPostListGet_21(mixId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchVideoMixPostListApiV1DouyinAppV2FetchVideoMixPostListGet_21(mixId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_video_search_result）/Get video search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_video_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchVideoSearchResultApiV1DouyinAppV2FetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchVideoSearchResultApiV1DouyinAppV2FetchVideoSearchResultGet(keyword, offset, count, sortType, publishTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_video_search_result）/Get video search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_video_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public fetchVideoSearchResultApiV1DouyinAppV2FetchVideoSearchResultGet_22(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).fetchVideoSearchResultApiV1DouyinAppV2FetchVideoSearchResultGet_22(keyword, offset, count, sortType, publishTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成抖音短链接 ### 参数: - url: 抖音链接 ### 返回: - 短链接数据  # [English] ### Purpose: - Generate Douyin short link ### Parameters: - url: Douyin link ### Return: - Short link data  # [示例/Example] url = \"https://www.douyin.com/passport/web/logout/\"
     * @summary 生成抖音短链接/Generate Douyin short link
     * @param {string} url 抖音链接/Douyin link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public generateDouyinShortUrlApiV1DouyinAppV2GenerateDouyinShortUrlGet(url: string, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).generateDouyinShortUrlApiV1DouyinAppV2GenerateDouyinShortUrlGet(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成抖音短链接 ### 参数: - url: 抖音链接 ### 返回: - 短链接数据  # [English] ### Purpose: - Generate Douyin short link ### Parameters: - url: Douyin link ### Return: - Short link data  # [示例/Example] url = \"https://www.douyin.com/passport/web/logout/\"
     * @summary 生成抖音短链接/Generate Douyin short link
     * @param {string} url 抖音链接/Douyin link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public generateDouyinShortUrlApiV1DouyinAppV2GenerateDouyinShortUrlGet_23(url: string, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).generateDouyinShortUrlApiV1DouyinAppV2GenerateDouyinShortUrlGet_23(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成抖音视频分享二维码 ### 参数: - object_id: 作品id ### 返回: - 二维码数据  # [English] ### Purpose: - Generate Douyin video share QR code ### Parameters: - object_id: Video id ### Return: - QR code data  # [示例/Example] object_id = \"7348044435755846962\"
     * @summary 生成抖音视频分享二维码/Generate Douyin video share QR code
     * @param {string} objectId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public generateDouyinVideoShareQrcodeApiV1DouyinAppV2GenerateDouyinVideoShareQrcodeGet(objectId: string, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).generateDouyinVideoShareQrcodeApiV1DouyinAppV2GenerateDouyinVideoShareQrcodeGet(objectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成抖音视频分享二维码 ### 参数: - object_id: 作品id ### 返回: - 二维码数据  # [English] ### Purpose: - Generate Douyin video share QR code ### Parameters: - object_id: Video id ### Return: - QR code data  # [示例/Example] object_id = \"7348044435755846962\"
     * @summary 生成抖音视频分享二维码/Generate Douyin video share QR code
     * @param {string} objectId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public generateDouyinVideoShareQrcodeApiV1DouyinAppV2GenerateDouyinVideoShareQrcodeGet_24(objectId: string, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).generateDouyinVideoShareQrcodeApiV1DouyinAppV2GenerateDouyinVideoShareQrcodeGet_24(objectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public handlerUserProfileApiV1DouyinAppV2HandlerUserProfileGet(secUserId: string, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).handlerUserProfileApiV1DouyinAppV2HandlerUserProfileGet(secUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV2APIApi
     */
    public handlerUserProfileApiV1DouyinAppV2HandlerUserProfileGet_25(secUserId: string, options?: any) {
        return DouyinAppV2APIApiFp(this.configuration).handlerUserProfileApiV1DouyinAppV2HandlerUserProfileGet_25(secUserId, options).then((request) => request(this.axios, this.basePath));
    }

}
