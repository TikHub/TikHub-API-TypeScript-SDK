// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HealthCheckResponse } from '../models';
/**
 * HealthCheckApi - axios parameter creator
 * @export
 */
export const HealthCheckApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文]  ### 用途说明:  - 检查服务器是否正确响应请求。  ### 参数说明:  - 无参数。  ### 返回结果:  - `status`: 服务器状态，正常为 `ok`。  # [English]  ### Purpose:  - Check if the server responds to requests correctly.  ### Parameter Description:  - No parameters.  ### Return Result:  - `status`: Server status, normal is `ok`.
         * @summary 检查服务器是否正确响应请求 / Check if the server responds to requests correctly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiV1HealthCheckGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/health/check`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文]  ### 用途说明:  - 检查服务器是否正确响应请求。  ### 参数说明:  - 无参数。  ### 返回结果:  - `status`: 服务器状态，正常为 `ok`。  # [English]  ### Purpose:  - Check if the server responds to requests correctly.  ### Parameter Description:  - No parameters.  ### Return Result:  - `status`: Server status, normal is `ok`.
         * @summary 检查服务器是否正确响应请求 / Check if the server responds to requests correctly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiV1HealthCheckGet_1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/health/check`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthCheckApi - functional programming interface
 * @export
 */
export const HealthCheckApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文]  ### 用途说明:  - 检查服务器是否正确响应请求。  ### 参数说明:  - 无参数。  ### 返回结果:  - `status`: 服务器状态，正常为 `ok`。  # [English]  ### Purpose:  - Check if the server responds to requests correctly.  ### Parameter Description:  - No parameters.  ### Return Result:  - `status`: Server status, normal is `ok`.
         * @summary 检查服务器是否正确响应请求 / Check if the server responds to requests correctly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckApiV1HealthCheckGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthCheckResponse>> {
            const localVarAxiosArgs = await HealthCheckApiAxiosParamCreator(configuration).healthCheckApiV1HealthCheckGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文]  ### 用途说明:  - 检查服务器是否正确响应请求。  ### 参数说明:  - 无参数。  ### 返回结果:  - `status`: 服务器状态，正常为 `ok`。  # [English]  ### Purpose:  - Check if the server responds to requests correctly.  ### Parameter Description:  - No parameters.  ### Return Result:  - `status`: Server status, normal is `ok`.
         * @summary 检查服务器是否正确响应请求 / Check if the server responds to requests correctly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheckApiV1HealthCheckGet_1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthCheckResponse>> {
            const localVarAxiosArgs = await HealthCheckApiAxiosParamCreator(configuration).healthCheckApiV1HealthCheckGet_1(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HealthCheckApi - factory interface
 * @export
 */
export const HealthCheckApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文]  ### 用途说明:  - 检查服务器是否正确响应请求。  ### 参数说明:  - 无参数。  ### 返回结果:  - `status`: 服务器状态，正常为 `ok`。  # [English]  ### Purpose:  - Check if the server responds to requests correctly.  ### Parameter Description:  - No parameters.  ### Return Result:  - `status`: Server status, normal is `ok`.
         * @summary 检查服务器是否正确响应请求 / Check if the server responds to requests correctly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiV1HealthCheckGet(options?: any): AxiosPromise<HealthCheckResponse> {
            return HealthCheckApiFp(configuration).healthCheckApiV1HealthCheckGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文]  ### 用途说明:  - 检查服务器是否正确响应请求。  ### 参数说明:  - 无参数。  ### 返回结果:  - `status`: 服务器状态，正常为 `ok`。  # [English]  ### Purpose:  - Check if the server responds to requests correctly.  ### Parameter Description:  - No parameters.  ### Return Result:  - `status`: Server status, normal is `ok`.
         * @summary 检查服务器是否正确响应请求 / Check if the server responds to requests correctly
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheckApiV1HealthCheckGet_1(options?: any): AxiosPromise<HealthCheckResponse> {
            return HealthCheckApiFp(configuration).healthCheckApiV1HealthCheckGet_1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthCheckApi - interface
 * @export
 * @interface HealthCheckApi
 */
export interface HealthCheckApiInterface {
    /**
     * # [中文]  ### 用途说明:  - 检查服务器是否正确响应请求。  ### 参数说明:  - 无参数。  ### 返回结果:  - `status`: 服务器状态，正常为 `ok`。  # [English]  ### Purpose:  - Check if the server responds to requests correctly.  ### Parameter Description:  - No parameters.  ### Return Result:  - `status`: Server status, normal is `ok`.
     * @summary 检查服务器是否正确响应请求 / Check if the server responds to requests correctly
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthCheckApiInterface
     */
    healthCheckApiV1HealthCheckGet(options?: any): AxiosPromise<HealthCheckResponse>;

    /**
     * # [中文]  ### 用途说明:  - 检查服务器是否正确响应请求。  ### 参数说明:  - 无参数。  ### 返回结果:  - `status`: 服务器状态，正常为 `ok`。  # [English]  ### Purpose:  - Check if the server responds to requests correctly.  ### Parameter Description:  - No parameters.  ### Return Result:  - `status`: Server status, normal is `ok`.
     * @summary 检查服务器是否正确响应请求 / Check if the server responds to requests correctly
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthCheckApiInterface
     */
    healthCheckApiV1HealthCheckGet_1(options?: any): AxiosPromise<HealthCheckResponse>;

}

/**
 * HealthCheckApi - object-oriented interface
 * @export
 * @class HealthCheckApi
 * @extends {BaseAPI}
 */
export class HealthCheckApi extends BaseAPI implements HealthCheckApiInterface {
    /**
     * # [中文]  ### 用途说明:  - 检查服务器是否正确响应请求。  ### 参数说明:  - 无参数。  ### 返回结果:  - `status`: 服务器状态，正常为 `ok`。  # [English]  ### Purpose:  - Check if the server responds to requests correctly.  ### Parameter Description:  - No parameters.  ### Return Result:  - `status`: Server status, normal is `ok`.
     * @summary 检查服务器是否正确响应请求 / Check if the server responds to requests correctly
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthCheckApi
     */
    public healthCheckApiV1HealthCheckGet(options?: any) {
        return HealthCheckApiFp(this.configuration).healthCheckApiV1HealthCheckGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文]  ### 用途说明:  - 检查服务器是否正确响应请求。  ### 参数说明:  - 无参数。  ### 返回结果:  - `status`: 服务器状态，正常为 `ok`。  # [English]  ### Purpose:  - Check if the server responds to requests correctly.  ### Parameter Description:  - No parameters.  ### Return Result:  - `status`: Server status, normal is `ok`.
     * @summary 检查服务器是否正确响应请求 / Check if the server responds to requests correctly
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthCheckApi
     */
    public healthCheckApiV1HealthCheckGet_1(options?: any) {
        return HealthCheckApiFp(this.configuration).healthCheckApiV1HealthCheckGet_1(options).then((request) => request(this.axios, this.basePath));
    }

}
