// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
/**
 * YouTubeWebAPIApi - axios parameter creator
 * @export
 */
export const YouTubeWebAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取频道ID。 ### 参数: - channel_name: 频道名称。 ### 返回: - 频道ID。  # [English] ### Purpose: - Get channel ID. ### Parameters: - channel_name: Channel name. ### Returns: - Channel ID.  # [示例/Example] channel_name = \"LinusTechTips\"
         * @summary 获取频道ID/Get channel ID
         * @param {string} channelName 频道名称/Channel name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelIdApiV1YoutubeWebGetChannelIdGet: async (channelName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelName' is not null or undefined
            if (channelName === null || channelName === undefined) {
                throw new RequiredError('channelName','Required parameter channelName was null or undefined when calling getChannelIdApiV1YoutubeWebGetChannelIdGet.');
            }
            const localVarPath = `/api/v1/youtube/web/get_channel_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (channelName !== undefined) {
                localVarQueryParameter['channel_name'] = channelName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取频道ID。 ### 参数: - channel_name: 频道名称。 ### 返回: - 频道ID。  # [English] ### Purpose: - Get channel ID. ### Parameters: - channel_name: Channel name. ### Returns: - Channel ID.  # [示例/Example] channel_name = \"LinusTechTips\"
         * @summary 获取频道ID/Get channel ID
         * @param {string} channelName 频道名称/Channel name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelIdApiV1YoutubeWebGetChannelIdGet_1: async (channelName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelName' is not null or undefined
            if (channelName === null || channelName === undefined) {
                throw new RequiredError('channelName','Required parameter channelName was null or undefined when calling getChannelIdApiV1YoutubeWebGetChannelIdGet_1.');
            }
            const localVarPath = `/api/v1/youtube/web/get_channel_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (channelName !== undefined) {
                localVarQueryParameter['channel_name'] = channelName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取频道信息。 ### 参数: - channel_id: 频道ID。 ### 返回: - 频道信息。  # [English] ### Purpose: - Get channel information. ### Parameters: - channel_id: Channel ID. ### Returns: - Channel information.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
         * @summary 获取频道信息/Get channel information
         * @param {string} channelId 频道ID/Channel ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelInfoApiV1YoutubeWebGetChannelInfoGet: async (channelId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling getChannelInfoApiV1YoutubeWebGetChannelInfoGet.');
            }
            const localVarPath = `/api/v1/youtube/web/get_channel_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取频道信息。 ### 参数: - channel_id: 频道ID。 ### 返回: - 频道信息。  # [English] ### Purpose: - Get channel information. ### Parameters: - channel_id: Channel ID. ### Returns: - Channel information.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
         * @summary 获取频道信息/Get channel information
         * @param {string} channelId 频道ID/Channel ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelInfoApiV1YoutubeWebGetChannelInfoGet_2: async (channelId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling getChannelInfoApiV1YoutubeWebGetChannelInfoGet_2.');
            }
            const localVarPath = `/api/v1/youtube/web/get_channel_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取频道短视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道短视频的令牌。默认为None。 ### 返回: - 频道短视频。  # [English] ### Purpose: - Get channel short videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel short videos. Default is None. ### Returns: - Channel short videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
         * @summary 获取频道短视频/Get channel short videos
         * @param {string} channelId 频道ID/Channel ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelShortVideosApiV1YoutubeWebGetChannelShortVideosGet: async (channelId: string, continuationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling getChannelShortVideosApiV1YoutubeWebGetChannelShortVideosGet.');
            }
            const localVarPath = `/api/v1/youtube/web/get_channel_short_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuation_token'] = continuationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取频道短视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道短视频的令牌。默认为None。 ### 返回: - 频道短视频。  # [English] ### Purpose: - Get channel short videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel short videos. Default is None. ### Returns: - Channel short videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
         * @summary 获取频道短视频/Get channel short videos
         * @param {string} channelId 频道ID/Channel ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelShortVideosApiV1YoutubeWebGetChannelShortVideosGet_3: async (channelId: string, continuationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling getChannelShortVideosApiV1YoutubeWebGetChannelShortVideosGet_3.');
            }
            const localVarPath = `/api/v1/youtube/web/get_channel_short_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuation_token'] = continuationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取频道视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道视频的令牌。默认为None。 ### 返回: - 频道视频。  # [English] ### Purpose: - Get channel videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel videos. Default is None. ### Returns: - Channel videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
         * @summary 获取频道视频/Get channel videos
         * @param {string} channelId 频道ID/Channel ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelVideosApiV1YoutubeWebGetChannelVideosGet: async (channelId: string, continuationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling getChannelVideosApiV1YoutubeWebGetChannelVideosGet.');
            }
            const localVarPath = `/api/v1/youtube/web/get_channel_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuation_token'] = continuationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取频道视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道视频的令牌。默认为None。 ### 返回: - 频道视频。  # [English] ### Purpose: - Get channel videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel videos. Default is None. ### Returns: - Channel videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
         * @summary 获取频道视频/Get channel videos
         * @param {string} channelId 频道ID/Channel ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelVideosApiV1YoutubeWebGetChannelVideosGet_4: async (channelId: string, continuationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling getChannelVideosApiV1YoutubeWebGetChannelVideosGet_4.');
            }
            const localVarPath = `/api/v1/youtube/web/get_channel_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuation_token'] = continuationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据视频ID获取推荐视频数据。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 - continuation_token: 用于继续获取推荐视频的令牌。默认为None。 ### 返回: - 推荐视频数据。  # [English] ### Purpose: - Get related videos by video ID. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching related videos. Default is None. ### Returns: - Related videos.  # [示例/Example] video_id = \"LuIL5JATZsc\"
         * @summary 获取推荐视频/Get related videos
         * @param {string} videoId 视频ID/Video ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelateVideoApiV1YoutubeWebGetRelateVideoGet: async (videoId: string, continuationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            if (videoId === null || videoId === undefined) {
                throw new RequiredError('videoId','Required parameter videoId was null or undefined when calling getRelateVideoApiV1YoutubeWebGetRelateVideoGet.');
            }
            const localVarPath = `/api/v1/youtube/web/get_relate_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (videoId !== undefined) {
                localVarQueryParameter['video_id'] = videoId;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuation_token'] = continuationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据视频ID获取推荐视频数据。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 - continuation_token: 用于继续获取推荐视频的令牌。默认为None。 ### 返回: - 推荐视频数据。  # [English] ### Purpose: - Get related videos by video ID. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching related videos. Default is None. ### Returns: - Related videos.  # [示例/Example] video_id = \"LuIL5JATZsc\"
         * @summary 获取推荐视频/Get related videos
         * @param {string} videoId 视频ID/Video ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelateVideoApiV1YoutubeWebGetRelateVideoGet_5: async (videoId: string, continuationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            if (videoId === null || videoId === undefined) {
                throw new RequiredError('videoId','Required parameter videoId was null or undefined when calling getRelateVideoApiV1YoutubeWebGetRelateVideoGet_5.');
            }
            const localVarPath = `/api/v1/youtube/web/get_relate_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (videoId !== undefined) {
                localVarQueryParameter['video_id'] = videoId;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuation_token'] = continuationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取趋势视频。 ### 参数: - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - section: 类型，默认为Now，可选值为Music, Gaming, Movies。 ### 返回: - 趋势视频。  # [English] ### Purpose: - Get trending videos. ### Parameters: - language_code: Language code, default is en. - country_code: Country code, default is us. - section: Section, default is Now, optional values are Music, Gaming, Movies. ### Returns: - Trending videos.  # [示例/Example]
         * @summary 获取趋势视频/Get trending videos
         * @param {string} [languageCode] 语言代码/Language code
         * @param {string} [countryCode] 国家代码/Country code
         * @param {string} [section] 类型/Section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrendingVideosApiV1YoutubeWebGetTrendingVideosGet: async (languageCode?: string, countryCode?: string, section?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/youtube/web/get_trending_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (languageCode !== undefined) {
                localVarQueryParameter['language_code'] = languageCode;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['country_code'] = countryCode;
            }

            if (section !== undefined) {
                localVarQueryParameter['section'] = section;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取趋势视频。 ### 参数: - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - section: 类型，默认为Now，可选值为Music, Gaming, Movies。 ### 返回: - 趋势视频。  # [English] ### Purpose: - Get trending videos. ### Parameters: - language_code: Language code, default is en. - country_code: Country code, default is us. - section: Section, default is Now, optional values are Music, Gaming, Movies. ### Returns: - Trending videos.  # [示例/Example]
         * @summary 获取趋势视频/Get trending videos
         * @param {string} [languageCode] 语言代码/Language code
         * @param {string} [countryCode] 国家代码/Country code
         * @param {string} [section] 类型/Section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrendingVideosApiV1YoutubeWebGetTrendingVideosGet_6: async (languageCode?: string, countryCode?: string, section?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/youtube/web/get_trending_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (languageCode !== undefined) {
                localVarQueryParameter['language_code'] = languageCode;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['country_code'] = countryCode;
            }

            if (section !== undefined) {
                localVarQueryParameter['section'] = section;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频的评论。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的id就是LuIL5JATZsc。 - continuation_token: 用于继续获取评论的令牌。默认为None。 ### 返回: - 视频评论。  # [English] ### Purpose: - Get comments of a single video. ### Parameters: - id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching comments. Default is None. ### Returns: - Video comments.  # [示例/Example] id = \"LuIL5JATZsc\"
         * @summary 获取视频评论/Get video comments
         * @param {string} videoId 视频ID/Video ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoCommentsApiV1YoutubeWebGetVideoCommentsGet: async (videoId: string, continuationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            if (videoId === null || videoId === undefined) {
                throw new RequiredError('videoId','Required parameter videoId was null or undefined when calling getVideoCommentsApiV1YoutubeWebGetVideoCommentsGet.');
            }
            const localVarPath = `/api/v1/youtube/web/get_video_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (videoId !== undefined) {
                localVarQueryParameter['video_id'] = videoId;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuation_token'] = continuationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频的评论。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的id就是LuIL5JATZsc。 - continuation_token: 用于继续获取评论的令牌。默认为None。 ### 返回: - 视频评论。  # [English] ### Purpose: - Get comments of a single video. ### Parameters: - id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching comments. Default is None. ### Returns: - Video comments.  # [示例/Example] id = \"LuIL5JATZsc\"
         * @summary 获取视频评论/Get video comments
         * @param {string} videoId 视频ID/Video ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoCommentsApiV1YoutubeWebGetVideoCommentsGet_7: async (videoId: string, continuationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            if (videoId === null || videoId === undefined) {
                throw new RequiredError('videoId','Required parameter videoId was null or undefined when calling getVideoCommentsApiV1YoutubeWebGetVideoCommentsGet_7.');
            }
            const localVarPath = `/api/v1/youtube/web/get_video_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (videoId !== undefined) {
                localVarQueryParameter['video_id'] = videoId;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuation_token'] = continuationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频的信息，包括视频下载链接、标题、作者、发布日期、观看次数、点赞次数、不喜欢次数、评论次数、时长、描述等。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频信息。  # [English] ### Purpose: - Get information of a single video, including video download link, title, author, publish date, view count, like count, dislike count, comment count, duration, description, etc. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. ### Returns: - Video information.  # [示例/Example] video_id = \"LuIL5JATZsc\"
         * @summary 获取视频信息/Get video information
         * @param {string} videoId 视频ID/Video ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoInfoApiV1YoutubeWebGetVideoInfoGet: async (videoId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            if (videoId === null || videoId === undefined) {
                throw new RequiredError('videoId','Required parameter videoId was null or undefined when calling getVideoInfoApiV1YoutubeWebGetVideoInfoGet.');
            }
            const localVarPath = `/api/v1/youtube/web/get_video_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (videoId !== undefined) {
                localVarQueryParameter['video_id'] = videoId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频的信息，包括视频下载链接、标题、作者、发布日期、观看次数、点赞次数、不喜欢次数、评论次数、时长、描述等。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频信息。  # [English] ### Purpose: - Get information of a single video, including video download link, title, author, publish date, view count, like count, dislike count, comment count, duration, description, etc. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. ### Returns: - Video information.  # [示例/Example] video_id = \"LuIL5JATZsc\"
         * @summary 获取视频信息/Get video information
         * @param {string} videoId 视频ID/Video ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoInfoApiV1YoutubeWebGetVideoInfoGet_8: async (videoId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            if (videoId === null || videoId === undefined) {
                throw new RequiredError('videoId','Required parameter videoId was null or undefined when calling getVideoInfoApiV1YoutubeWebGetVideoInfoGet_8.');
            }
            const localVarPath = `/api/v1/youtube/web/get_video_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (videoId !== undefined) {
                localVarQueryParameter['video_id'] = videoId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频的字幕。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频字幕。  # [English] ### Purpose: - Get subtitles of a single video. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc.  ### Returns: - Video subtitles.  # [示例/Example] video_id = \"LuIL5JATZsc\"
         * @summary 获取视频字幕/Get video subtitles
         * @param {string} videoId 视频ID/Video ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoSubtitlesApiV1YoutubeWebGetVideoSubtitlesGet: async (videoId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            if (videoId === null || videoId === undefined) {
                throw new RequiredError('videoId','Required parameter videoId was null or undefined when calling getVideoSubtitlesApiV1YoutubeWebGetVideoSubtitlesGet.');
            }
            const localVarPath = `/api/v1/youtube/web/get_video_subtitles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (videoId !== undefined) {
                localVarQueryParameter['video_id'] = videoId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频的字幕。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频字幕。  # [English] ### Purpose: - Get subtitles of a single video. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc.  ### Returns: - Video subtitles.  # [示例/Example] video_id = \"LuIL5JATZsc\"
         * @summary 获取视频字幕/Get video subtitles
         * @param {string} videoId 视频ID/Video ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoSubtitlesApiV1YoutubeWebGetVideoSubtitlesGet_9: async (videoId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoId' is not null or undefined
            if (videoId === null || videoId === undefined) {
                throw new RequiredError('videoId','Required parameter videoId was null or undefined when calling getVideoSubtitlesApiV1YoutubeWebGetVideoSubtitlesGet_9.');
            }
            const localVarPath = `/api/v1/youtube/web/get_video_subtitles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (videoId !== undefined) {
                localVarQueryParameter['video_id'] = videoId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索频道。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search channel. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\" search_query = \"AMD\"
         * @summary 搜索频道/Search channel
         * @param {string} channelId 频道ID/Channel ID
         * @param {string} searchQuery 搜索关键字/Search keyword
         * @param {string} [languageCode] 语言代码/Language code
         * @param {string} [countryCode] 国家代码/Country code
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchChannelApiV1YoutubeWebSearchChannelGet: async (channelId: string, searchQuery: string, languageCode?: string, countryCode?: string, continuationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling searchChannelApiV1YoutubeWebSearchChannelGet.');
            }
            // verify required parameter 'searchQuery' is not null or undefined
            if (searchQuery === null || searchQuery === undefined) {
                throw new RequiredError('searchQuery','Required parameter searchQuery was null or undefined when calling searchChannelApiV1YoutubeWebSearchChannelGet.');
            }
            const localVarPath = `/api/v1/youtube/web/search_channel`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (searchQuery !== undefined) {
                localVarQueryParameter['search_query'] = searchQuery;
            }

            if (languageCode !== undefined) {
                localVarQueryParameter['language_code'] = languageCode;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['country_code'] = countryCode;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuation_token'] = continuationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索频道。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search channel. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\" search_query = \"AMD\"
         * @summary 搜索频道/Search channel
         * @param {string} channelId 频道ID/Channel ID
         * @param {string} searchQuery 搜索关键字/Search keyword
         * @param {string} [languageCode] 语言代码/Language code
         * @param {string} [countryCode] 国家代码/Country code
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchChannelApiV1YoutubeWebSearchChannelGet_10: async (channelId: string, searchQuery: string, languageCode?: string, countryCode?: string, continuationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'channelId' is not null or undefined
            if (channelId === null || channelId === undefined) {
                throw new RequiredError('channelId','Required parameter channelId was null or undefined when calling searchChannelApiV1YoutubeWebSearchChannelGet_10.');
            }
            // verify required parameter 'searchQuery' is not null or undefined
            if (searchQuery === null || searchQuery === undefined) {
                throw new RequiredError('searchQuery','Required parameter searchQuery was null or undefined when calling searchChannelApiV1YoutubeWebSearchChannelGet_10.');
            }
            const localVarPath = `/api/v1/youtube/web/search_channel`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (channelId !== undefined) {
                localVarQueryParameter['channel_id'] = channelId;
            }

            if (searchQuery !== undefined) {
                localVarQueryParameter['search_query'] = searchQuery;
            }

            if (languageCode !== undefined) {
                localVarQueryParameter['language_code'] = languageCode;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['country_code'] = countryCode;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuation_token'] = continuationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索视频。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - order_by: 排序方式，默��为this_month。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search video. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - order_by: Order by, default is this_month. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] search_query = \"Minecraft\"
         * @summary 搜索视频/Search video
         * @param {string} searchQuery 搜索关键字/Search keyword
         * @param {string} [languageCode] 语言代码/Language code
         * @param {string} [orderBy] 排序方式/Order by
         * @param {string} [countryCode] 国家代码/Country code
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVideoApiV1YoutubeWebSearchVideoGet: async (searchQuery: string, languageCode?: string, orderBy?: string, countryCode?: string, continuationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchQuery' is not null or undefined
            if (searchQuery === null || searchQuery === undefined) {
                throw new RequiredError('searchQuery','Required parameter searchQuery was null or undefined when calling searchVideoApiV1YoutubeWebSearchVideoGet.');
            }
            const localVarPath = `/api/v1/youtube/web/search_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (searchQuery !== undefined) {
                localVarQueryParameter['search_query'] = searchQuery;
            }

            if (languageCode !== undefined) {
                localVarQueryParameter['language_code'] = languageCode;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['country_code'] = countryCode;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuation_token'] = continuationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索视频。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - order_by: 排序方式，默��为this_month。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search video. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - order_by: Order by, default is this_month. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] search_query = \"Minecraft\"
         * @summary 搜索视频/Search video
         * @param {string} searchQuery 搜索关键字/Search keyword
         * @param {string} [languageCode] 语言代码/Language code
         * @param {string} [orderBy] 排序方式/Order by
         * @param {string} [countryCode] 国家代码/Country code
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVideoApiV1YoutubeWebSearchVideoGet_11: async (searchQuery: string, languageCode?: string, orderBy?: string, countryCode?: string, continuationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchQuery' is not null or undefined
            if (searchQuery === null || searchQuery === undefined) {
                throw new RequiredError('searchQuery','Required parameter searchQuery was null or undefined when calling searchVideoApiV1YoutubeWebSearchVideoGet_11.');
            }
            const localVarPath = `/api/v1/youtube/web/search_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (searchQuery !== undefined) {
                localVarQueryParameter['search_query'] = searchQuery;
            }

            if (languageCode !== undefined) {
                localVarQueryParameter['language_code'] = languageCode;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (countryCode !== undefined) {
                localVarQueryParameter['country_code'] = countryCode;
            }

            if (continuationToken !== undefined) {
                localVarQueryParameter['continuation_token'] = continuationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * YouTubeWebAPIApi - functional programming interface
 * @export
 */
export const YouTubeWebAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取频道ID。 ### 参数: - channel_name: 频道名称。 ### 返回: - 频道ID。  # [English] ### Purpose: - Get channel ID. ### Parameters: - channel_name: Channel name. ### Returns: - Channel ID.  # [示例/Example] channel_name = \"LinusTechTips\"
         * @summary 获取频道ID/Get channel ID
         * @param {string} channelName 频道名称/Channel name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannelIdApiV1YoutubeWebGetChannelIdGet(channelName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).getChannelIdApiV1YoutubeWebGetChannelIdGet(channelName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取频道ID。 ### 参数: - channel_name: 频道名称。 ### 返回: - 频道ID。  # [English] ### Purpose: - Get channel ID. ### Parameters: - channel_name: Channel name. ### Returns: - Channel ID.  # [示例/Example] channel_name = \"LinusTechTips\"
         * @summary 获取频道ID/Get channel ID
         * @param {string} channelName 频道名称/Channel name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannelIdApiV1YoutubeWebGetChannelIdGet_1(channelName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).getChannelIdApiV1YoutubeWebGetChannelIdGet_1(channelName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取频道信息。 ### 参数: - channel_id: 频道ID。 ### 返回: - 频道信息。  # [English] ### Purpose: - Get channel information. ### Parameters: - channel_id: Channel ID. ### Returns: - Channel information.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
         * @summary 获取频道信息/Get channel information
         * @param {string} channelId 频道ID/Channel ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannelInfoApiV1YoutubeWebGetChannelInfoGet(channelId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).getChannelInfoApiV1YoutubeWebGetChannelInfoGet(channelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取频道信息。 ### 参数: - channel_id: 频道ID。 ### 返回: - 频道信息。  # [English] ### Purpose: - Get channel information. ### Parameters: - channel_id: Channel ID. ### Returns: - Channel information.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
         * @summary 获取频道信息/Get channel information
         * @param {string} channelId 频道ID/Channel ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannelInfoApiV1YoutubeWebGetChannelInfoGet_2(channelId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).getChannelInfoApiV1YoutubeWebGetChannelInfoGet_2(channelId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取频道短视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道短视频的令牌。默认为None。 ### 返回: - 频道短视频。  # [English] ### Purpose: - Get channel short videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel short videos. Default is None. ### Returns: - Channel short videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
         * @summary 获取频道短视频/Get channel short videos
         * @param {string} channelId 频道ID/Channel ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannelShortVideosApiV1YoutubeWebGetChannelShortVideosGet(channelId: string, continuationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).getChannelShortVideosApiV1YoutubeWebGetChannelShortVideosGet(channelId, continuationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取频道短视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道短视频的令牌。默认为None。 ### 返回: - 频道短视频。  # [English] ### Purpose: - Get channel short videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel short videos. Default is None. ### Returns: - Channel short videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
         * @summary 获取频道短视频/Get channel short videos
         * @param {string} channelId 频道ID/Channel ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannelShortVideosApiV1YoutubeWebGetChannelShortVideosGet_3(channelId: string, continuationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).getChannelShortVideosApiV1YoutubeWebGetChannelShortVideosGet_3(channelId, continuationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取频道视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道视频的令牌。默认为None。 ### 返回: - 频道视频。  # [English] ### Purpose: - Get channel videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel videos. Default is None. ### Returns: - Channel videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
         * @summary 获取频道视频/Get channel videos
         * @param {string} channelId 频道ID/Channel ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannelVideosApiV1YoutubeWebGetChannelVideosGet(channelId: string, continuationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).getChannelVideosApiV1YoutubeWebGetChannelVideosGet(channelId, continuationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取频道视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道视频的令牌。默认为None。 ### 返回: - 频道视频。  # [English] ### Purpose: - Get channel videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel videos. Default is None. ### Returns: - Channel videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
         * @summary 获取频道视频/Get channel videos
         * @param {string} channelId 频道ID/Channel ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannelVideosApiV1YoutubeWebGetChannelVideosGet_4(channelId: string, continuationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).getChannelVideosApiV1YoutubeWebGetChannelVideosGet_4(channelId, continuationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据视频ID获取推荐视频数据。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 - continuation_token: 用于继续获取推荐视频的令牌。默认为None。 ### 返回: - 推荐视频数据。  # [English] ### Purpose: - Get related videos by video ID. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching related videos. Default is None. ### Returns: - Related videos.  # [示例/Example] video_id = \"LuIL5JATZsc\"
         * @summary 获取推荐视频/Get related videos
         * @param {string} videoId 视频ID/Video ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelateVideoApiV1YoutubeWebGetRelateVideoGet(videoId: string, continuationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).getRelateVideoApiV1YoutubeWebGetRelateVideoGet(videoId, continuationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据视频ID获取推荐视频数据。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 - continuation_token: 用于继续获取推荐视频的令牌。默认为None。 ### 返回: - 推荐视频数据。  # [English] ### Purpose: - Get related videos by video ID. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching related videos. Default is None. ### Returns: - Related videos.  # [示例/Example] video_id = \"LuIL5JATZsc\"
         * @summary 获取推荐视频/Get related videos
         * @param {string} videoId 视频ID/Video ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRelateVideoApiV1YoutubeWebGetRelateVideoGet_5(videoId: string, continuationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).getRelateVideoApiV1YoutubeWebGetRelateVideoGet_5(videoId, continuationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取趋势视频。 ### 参数: - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - section: 类型，默认为Now，可选值为Music, Gaming, Movies。 ### 返回: - 趋势视频。  # [English] ### Purpose: - Get trending videos. ### Parameters: - language_code: Language code, default is en. - country_code: Country code, default is us. - section: Section, default is Now, optional values are Music, Gaming, Movies. ### Returns: - Trending videos.  # [示例/Example]
         * @summary 获取趋势视频/Get trending videos
         * @param {string} [languageCode] 语言代码/Language code
         * @param {string} [countryCode] 国家代码/Country code
         * @param {string} [section] 类型/Section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrendingVideosApiV1YoutubeWebGetTrendingVideosGet(languageCode?: string, countryCode?: string, section?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).getTrendingVideosApiV1YoutubeWebGetTrendingVideosGet(languageCode, countryCode, section, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取趋势视频。 ### 参数: - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - section: 类型，默认为Now，可选值为Music, Gaming, Movies。 ### 返回: - 趋势视频。  # [English] ### Purpose: - Get trending videos. ### Parameters: - language_code: Language code, default is en. - country_code: Country code, default is us. - section: Section, default is Now, optional values are Music, Gaming, Movies. ### Returns: - Trending videos.  # [示例/Example]
         * @summary 获取趋势视频/Get trending videos
         * @param {string} [languageCode] 语言代码/Language code
         * @param {string} [countryCode] 国家代码/Country code
         * @param {string} [section] 类型/Section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrendingVideosApiV1YoutubeWebGetTrendingVideosGet_6(languageCode?: string, countryCode?: string, section?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).getTrendingVideosApiV1YoutubeWebGetTrendingVideosGet_6(languageCode, countryCode, section, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频的评论。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的id就是LuIL5JATZsc。 - continuation_token: 用于继续获取评论的令牌。默认为None。 ### 返回: - 视频评论。  # [English] ### Purpose: - Get comments of a single video. ### Parameters: - id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching comments. Default is None. ### Returns: - Video comments.  # [示例/Example] id = \"LuIL5JATZsc\"
         * @summary 获取视频评论/Get video comments
         * @param {string} videoId 视频ID/Video ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoCommentsApiV1YoutubeWebGetVideoCommentsGet(videoId: string, continuationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).getVideoCommentsApiV1YoutubeWebGetVideoCommentsGet(videoId, continuationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频的评论。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的id就是LuIL5JATZsc。 - continuation_token: 用于继续获取评论的令牌。默认为None。 ### 返回: - 视频评论。  # [English] ### Purpose: - Get comments of a single video. ### Parameters: - id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching comments. Default is None. ### Returns: - Video comments.  # [示例/Example] id = \"LuIL5JATZsc\"
         * @summary 获取视频评论/Get video comments
         * @param {string} videoId 视频ID/Video ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoCommentsApiV1YoutubeWebGetVideoCommentsGet_7(videoId: string, continuationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).getVideoCommentsApiV1YoutubeWebGetVideoCommentsGet_7(videoId, continuationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频的信息，包括视频下载链接、标题、作者、发布日期、观看次数、点赞次数、不喜欢次数、评论次数、时长、描述等。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频信息。  # [English] ### Purpose: - Get information of a single video, including video download link, title, author, publish date, view count, like count, dislike count, comment count, duration, description, etc. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. ### Returns: - Video information.  # [示例/Example] video_id = \"LuIL5JATZsc\"
         * @summary 获取视频信息/Get video information
         * @param {string} videoId 视频ID/Video ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoInfoApiV1YoutubeWebGetVideoInfoGet(videoId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).getVideoInfoApiV1YoutubeWebGetVideoInfoGet(videoId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频的信息，包括视频下载链接、标题、作者、发布日期、观看次数、点赞次数、不喜欢次数、评论次数、时长、描述等。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频信息。  # [English] ### Purpose: - Get information of a single video, including video download link, title, author, publish date, view count, like count, dislike count, comment count, duration, description, etc. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. ### Returns: - Video information.  # [示例/Example] video_id = \"LuIL5JATZsc\"
         * @summary 获取视频信息/Get video information
         * @param {string} videoId 视频ID/Video ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoInfoApiV1YoutubeWebGetVideoInfoGet_8(videoId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).getVideoInfoApiV1YoutubeWebGetVideoInfoGet_8(videoId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频的字幕。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频字幕。  # [English] ### Purpose: - Get subtitles of a single video. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc.  ### Returns: - Video subtitles.  # [示例/Example] video_id = \"LuIL5JATZsc\"
         * @summary 获取视频字幕/Get video subtitles
         * @param {string} videoId 视频ID/Video ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoSubtitlesApiV1YoutubeWebGetVideoSubtitlesGet(videoId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).getVideoSubtitlesApiV1YoutubeWebGetVideoSubtitlesGet(videoId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频的字幕。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频字幕。  # [English] ### Purpose: - Get subtitles of a single video. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc.  ### Returns: - Video subtitles.  # [示例/Example] video_id = \"LuIL5JATZsc\"
         * @summary 获取视频字幕/Get video subtitles
         * @param {string} videoId 视频ID/Video ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoSubtitlesApiV1YoutubeWebGetVideoSubtitlesGet_9(videoId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).getVideoSubtitlesApiV1YoutubeWebGetVideoSubtitlesGet_9(videoId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索频道。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search channel. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\" search_query = \"AMD\"
         * @summary 搜索频道/Search channel
         * @param {string} channelId 频道ID/Channel ID
         * @param {string} searchQuery 搜索关键字/Search keyword
         * @param {string} [languageCode] 语言代码/Language code
         * @param {string} [countryCode] 国家代码/Country code
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchChannelApiV1YoutubeWebSearchChannelGet(channelId: string, searchQuery: string, languageCode?: string, countryCode?: string, continuationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).searchChannelApiV1YoutubeWebSearchChannelGet(channelId, searchQuery, languageCode, countryCode, continuationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索频道。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search channel. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\" search_query = \"AMD\"
         * @summary 搜索频道/Search channel
         * @param {string} channelId 频道ID/Channel ID
         * @param {string} searchQuery 搜索关键字/Search keyword
         * @param {string} [languageCode] 语言代码/Language code
         * @param {string} [countryCode] 国家代码/Country code
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchChannelApiV1YoutubeWebSearchChannelGet_10(channelId: string, searchQuery: string, languageCode?: string, countryCode?: string, continuationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).searchChannelApiV1YoutubeWebSearchChannelGet_10(channelId, searchQuery, languageCode, countryCode, continuationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索视频。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - order_by: 排序方式，默��为this_month。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search video. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - order_by: Order by, default is this_month. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] search_query = \"Minecraft\"
         * @summary 搜索视频/Search video
         * @param {string} searchQuery 搜索关键字/Search keyword
         * @param {string} [languageCode] 语言代码/Language code
         * @param {string} [orderBy] 排序方式/Order by
         * @param {string} [countryCode] 国家代码/Country code
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchVideoApiV1YoutubeWebSearchVideoGet(searchQuery: string, languageCode?: string, orderBy?: string, countryCode?: string, continuationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).searchVideoApiV1YoutubeWebSearchVideoGet(searchQuery, languageCode, orderBy, countryCode, continuationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索视频。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - order_by: 排序方式，默��为this_month。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search video. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - order_by: Order by, default is this_month. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] search_query = \"Minecraft\"
         * @summary 搜索视频/Search video
         * @param {string} searchQuery 搜索关键字/Search keyword
         * @param {string} [languageCode] 语言代码/Language code
         * @param {string} [orderBy] 排序方式/Order by
         * @param {string} [countryCode] 国家代码/Country code
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchVideoApiV1YoutubeWebSearchVideoGet_11(searchQuery: string, languageCode?: string, orderBy?: string, countryCode?: string, continuationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await YouTubeWebAPIApiAxiosParamCreator(configuration).searchVideoApiV1YoutubeWebSearchVideoGet_11(searchQuery, languageCode, orderBy, countryCode, continuationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * YouTubeWebAPIApi - factory interface
 * @export
 */
export const YouTubeWebAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 获取频道ID。 ### 参数: - channel_name: 频道名称。 ### 返回: - 频道ID。  # [English] ### Purpose: - Get channel ID. ### Parameters: - channel_name: Channel name. ### Returns: - Channel ID.  # [示例/Example] channel_name = \"LinusTechTips\"
         * @summary 获取频道ID/Get channel ID
         * @param {string} channelName 频道名称/Channel name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelIdApiV1YoutubeWebGetChannelIdGet(channelName: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).getChannelIdApiV1YoutubeWebGetChannelIdGet(channelName, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取频道ID。 ### 参数: - channel_name: 频道名称。 ### 返回: - 频道ID。  # [English] ### Purpose: - Get channel ID. ### Parameters: - channel_name: Channel name. ### Returns: - Channel ID.  # [示例/Example] channel_name = \"LinusTechTips\"
         * @summary 获取频道ID/Get channel ID
         * @param {string} channelName 频道名称/Channel name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelIdApiV1YoutubeWebGetChannelIdGet_1(channelName: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).getChannelIdApiV1YoutubeWebGetChannelIdGet_1(channelName, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取频道信息。 ### 参数: - channel_id: 频道ID。 ### 返回: - 频道信息。  # [English] ### Purpose: - Get channel information. ### Parameters: - channel_id: Channel ID. ### Returns: - Channel information.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
         * @summary 获取频道信息/Get channel information
         * @param {string} channelId 频道ID/Channel ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelInfoApiV1YoutubeWebGetChannelInfoGet(channelId: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).getChannelInfoApiV1YoutubeWebGetChannelInfoGet(channelId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取频道信息。 ### 参数: - channel_id: 频道ID。 ### 返回: - 频道信息。  # [English] ### Purpose: - Get channel information. ### Parameters: - channel_id: Channel ID. ### Returns: - Channel information.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
         * @summary 获取频道信息/Get channel information
         * @param {string} channelId 频道ID/Channel ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelInfoApiV1YoutubeWebGetChannelInfoGet_2(channelId: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).getChannelInfoApiV1YoutubeWebGetChannelInfoGet_2(channelId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取频道短视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道短视频的令牌。默认为None。 ### 返回: - 频道短视频。  # [English] ### Purpose: - Get channel short videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel short videos. Default is None. ### Returns: - Channel short videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
         * @summary 获取频道短视频/Get channel short videos
         * @param {string} channelId 频道ID/Channel ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelShortVideosApiV1YoutubeWebGetChannelShortVideosGet(channelId: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).getChannelShortVideosApiV1YoutubeWebGetChannelShortVideosGet(channelId, continuationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取频道短视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道短视频的令牌。默认为None。 ### 返回: - 频道短视频。  # [English] ### Purpose: - Get channel short videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel short videos. Default is None. ### Returns: - Channel short videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
         * @summary 获取频道短视频/Get channel short videos
         * @param {string} channelId 频道ID/Channel ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelShortVideosApiV1YoutubeWebGetChannelShortVideosGet_3(channelId: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).getChannelShortVideosApiV1YoutubeWebGetChannelShortVideosGet_3(channelId, continuationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取频道视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道视频的令牌。默认为None。 ### 返回: - 频道视频。  # [English] ### Purpose: - Get channel videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel videos. Default is None. ### Returns: - Channel videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
         * @summary 获取频道视频/Get channel videos
         * @param {string} channelId 频道ID/Channel ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelVideosApiV1YoutubeWebGetChannelVideosGet(channelId: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).getChannelVideosApiV1YoutubeWebGetChannelVideosGet(channelId, continuationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取频道视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道视频的令牌。默认为None。 ### 返回: - 频道视频。  # [English] ### Purpose: - Get channel videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel videos. Default is None. ### Returns: - Channel videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
         * @summary 获取频道视频/Get channel videos
         * @param {string} channelId 频道ID/Channel ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelVideosApiV1YoutubeWebGetChannelVideosGet_4(channelId: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).getChannelVideosApiV1YoutubeWebGetChannelVideosGet_4(channelId, continuationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据视频ID获取推荐视频数据。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 - continuation_token: 用于继续获取推荐视频的令牌。默认为None。 ### 返回: - 推荐视频数据。  # [English] ### Purpose: - Get related videos by video ID. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching related videos. Default is None. ### Returns: - Related videos.  # [示例/Example] video_id = \"LuIL5JATZsc\"
         * @summary 获取推荐视频/Get related videos
         * @param {string} videoId 视频ID/Video ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelateVideoApiV1YoutubeWebGetRelateVideoGet(videoId: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).getRelateVideoApiV1YoutubeWebGetRelateVideoGet(videoId, continuationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据视频ID获取推荐视频数据。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 - continuation_token: 用于继续获取推荐视频的令牌。默认为None。 ### 返回: - 推荐视频数据。  # [English] ### Purpose: - Get related videos by video ID. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching related videos. Default is None. ### Returns: - Related videos.  # [示例/Example] video_id = \"LuIL5JATZsc\"
         * @summary 获取推荐视频/Get related videos
         * @param {string} videoId 视频ID/Video ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRelateVideoApiV1YoutubeWebGetRelateVideoGet_5(videoId: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).getRelateVideoApiV1YoutubeWebGetRelateVideoGet_5(videoId, continuationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取趋势视频。 ### 参数: - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - section: 类型，默认为Now，可选值为Music, Gaming, Movies。 ### 返回: - 趋势视频。  # [English] ### Purpose: - Get trending videos. ### Parameters: - language_code: Language code, default is en. - country_code: Country code, default is us. - section: Section, default is Now, optional values are Music, Gaming, Movies. ### Returns: - Trending videos.  # [示例/Example]
         * @summary 获取趋势视频/Get trending videos
         * @param {string} [languageCode] 语言代码/Language code
         * @param {string} [countryCode] 国家代码/Country code
         * @param {string} [section] 类型/Section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrendingVideosApiV1YoutubeWebGetTrendingVideosGet(languageCode?: string, countryCode?: string, section?: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).getTrendingVideosApiV1YoutubeWebGetTrendingVideosGet(languageCode, countryCode, section, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取趋势视频。 ### 参数: - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - section: 类型，默认为Now，可选值为Music, Gaming, Movies。 ### 返回: - 趋势视频。  # [English] ### Purpose: - Get trending videos. ### Parameters: - language_code: Language code, default is en. - country_code: Country code, default is us. - section: Section, default is Now, optional values are Music, Gaming, Movies. ### Returns: - Trending videos.  # [示例/Example]
         * @summary 获取趋势视频/Get trending videos
         * @param {string} [languageCode] 语言代码/Language code
         * @param {string} [countryCode] 国家代码/Country code
         * @param {string} [section] 类型/Section
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrendingVideosApiV1YoutubeWebGetTrendingVideosGet_6(languageCode?: string, countryCode?: string, section?: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).getTrendingVideosApiV1YoutubeWebGetTrendingVideosGet_6(languageCode, countryCode, section, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频的评论。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的id就是LuIL5JATZsc。 - continuation_token: 用于继续获取评论的令牌。默认为None。 ### 返回: - 视频评论。  # [English] ### Purpose: - Get comments of a single video. ### Parameters: - id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching comments. Default is None. ### Returns: - Video comments.  # [示例/Example] id = \"LuIL5JATZsc\"
         * @summary 获取视频评论/Get video comments
         * @param {string} videoId 视频ID/Video ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoCommentsApiV1YoutubeWebGetVideoCommentsGet(videoId: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).getVideoCommentsApiV1YoutubeWebGetVideoCommentsGet(videoId, continuationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频的评论。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的id就是LuIL5JATZsc。 - continuation_token: 用于继续获取评论的令牌。默认为None。 ### 返回: - 视频评论。  # [English] ### Purpose: - Get comments of a single video. ### Parameters: - id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching comments. Default is None. ### Returns: - Video comments.  # [示例/Example] id = \"LuIL5JATZsc\"
         * @summary 获取视频评论/Get video comments
         * @param {string} videoId 视频ID/Video ID
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoCommentsApiV1YoutubeWebGetVideoCommentsGet_7(videoId: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).getVideoCommentsApiV1YoutubeWebGetVideoCommentsGet_7(videoId, continuationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频的信息，包括视频下载链接、标题、作者、发布日期、观看次数、点赞次数、不喜欢次数、评论次数、时长、描述等。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频信息。  # [English] ### Purpose: - Get information of a single video, including video download link, title, author, publish date, view count, like count, dislike count, comment count, duration, description, etc. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. ### Returns: - Video information.  # [示例/Example] video_id = \"LuIL5JATZsc\"
         * @summary 获取视频信息/Get video information
         * @param {string} videoId 视频ID/Video ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoInfoApiV1YoutubeWebGetVideoInfoGet(videoId: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).getVideoInfoApiV1YoutubeWebGetVideoInfoGet(videoId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频的信息，包括视频下载链接、标题、作者、发布日期、观看次数、点赞次数、不喜欢次数、评论次数、时长、描述等。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频信息。  # [English] ### Purpose: - Get information of a single video, including video download link, title, author, publish date, view count, like count, dislike count, comment count, duration, description, etc. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. ### Returns: - Video information.  # [示例/Example] video_id = \"LuIL5JATZsc\"
         * @summary 获取视频信息/Get video information
         * @param {string} videoId 视频ID/Video ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoInfoApiV1YoutubeWebGetVideoInfoGet_8(videoId: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).getVideoInfoApiV1YoutubeWebGetVideoInfoGet_8(videoId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频的字幕。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频字幕。  # [English] ### Purpose: - Get subtitles of a single video. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc.  ### Returns: - Video subtitles.  # [示例/Example] video_id = \"LuIL5JATZsc\"
         * @summary 获取视频字幕/Get video subtitles
         * @param {string} videoId 视频ID/Video ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoSubtitlesApiV1YoutubeWebGetVideoSubtitlesGet(videoId: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).getVideoSubtitlesApiV1YoutubeWebGetVideoSubtitlesGet(videoId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频的字幕。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频字幕。  # [English] ### Purpose: - Get subtitles of a single video. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc.  ### Returns: - Video subtitles.  # [示例/Example] video_id = \"LuIL5JATZsc\"
         * @summary 获取视频字幕/Get video subtitles
         * @param {string} videoId 视频ID/Video ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoSubtitlesApiV1YoutubeWebGetVideoSubtitlesGet_9(videoId: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).getVideoSubtitlesApiV1YoutubeWebGetVideoSubtitlesGet_9(videoId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索频道。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search channel. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\" search_query = \"AMD\"
         * @summary 搜索频道/Search channel
         * @param {string} channelId 频道ID/Channel ID
         * @param {string} searchQuery 搜索关键字/Search keyword
         * @param {string} [languageCode] 语言代码/Language code
         * @param {string} [countryCode] 国家代码/Country code
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchChannelApiV1YoutubeWebSearchChannelGet(channelId: string, searchQuery: string, languageCode?: string, countryCode?: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).searchChannelApiV1YoutubeWebSearchChannelGet(channelId, searchQuery, languageCode, countryCode, continuationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索频道。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search channel. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\" search_query = \"AMD\"
         * @summary 搜索频道/Search channel
         * @param {string} channelId 频道ID/Channel ID
         * @param {string} searchQuery 搜索关键字/Search keyword
         * @param {string} [languageCode] 语言代码/Language code
         * @param {string} [countryCode] 国家代码/Country code
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchChannelApiV1YoutubeWebSearchChannelGet_10(channelId: string, searchQuery: string, languageCode?: string, countryCode?: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).searchChannelApiV1YoutubeWebSearchChannelGet_10(channelId, searchQuery, languageCode, countryCode, continuationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索视频。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - order_by: 排序方式，默��为this_month。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search video. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - order_by: Order by, default is this_month. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] search_query = \"Minecraft\"
         * @summary 搜索视频/Search video
         * @param {string} searchQuery 搜索关键字/Search keyword
         * @param {string} [languageCode] 语言代码/Language code
         * @param {string} [orderBy] 排序方式/Order by
         * @param {string} [countryCode] 国家代码/Country code
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVideoApiV1YoutubeWebSearchVideoGet(searchQuery: string, languageCode?: string, orderBy?: string, countryCode?: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).searchVideoApiV1YoutubeWebSearchVideoGet(searchQuery, languageCode, orderBy, countryCode, continuationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索视频。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - order_by: 排序方式，默��为this_month。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search video. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - order_by: Order by, default is this_month. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] search_query = \"Minecraft\"
         * @summary 搜索视频/Search video
         * @param {string} searchQuery 搜索关键字/Search keyword
         * @param {string} [languageCode] 语言代码/Language code
         * @param {string} [orderBy] 排序方式/Order by
         * @param {string} [countryCode] 国家代码/Country code
         * @param {string} [continuationToken] 翻页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVideoApiV1YoutubeWebSearchVideoGet_11(searchQuery: string, languageCode?: string, orderBy?: string, countryCode?: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return YouTubeWebAPIApiFp(configuration).searchVideoApiV1YoutubeWebSearchVideoGet_11(searchQuery, languageCode, orderBy, countryCode, continuationToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * YouTubeWebAPIApi - interface
 * @export
 * @interface YouTubeWebAPIApi
 */
export interface YouTubeWebAPIApiInterface {
    /**
     * # [中文] ### 用途: - 获取频道ID。 ### 参数: - channel_name: 频道名称。 ### 返回: - 频道ID。  # [English] ### Purpose: - Get channel ID. ### Parameters: - channel_name: Channel name. ### Returns: - Channel ID.  # [示例/Example] channel_name = \"LinusTechTips\"
     * @summary 获取频道ID/Get channel ID
     * @param {string} channelName 频道名称/Channel name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    getChannelIdApiV1YoutubeWebGetChannelIdGet(channelName: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取频道ID。 ### 参数: - channel_name: 频道名称。 ### 返回: - 频道ID。  # [English] ### Purpose: - Get channel ID. ### Parameters: - channel_name: Channel name. ### Returns: - Channel ID.  # [示例/Example] channel_name = \"LinusTechTips\"
     * @summary 获取频道ID/Get channel ID
     * @param {string} channelName 频道名称/Channel name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    getChannelIdApiV1YoutubeWebGetChannelIdGet_1(channelName: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取频道信息。 ### 参数: - channel_id: 频道ID。 ### 返回: - 频道信息。  # [English] ### Purpose: - Get channel information. ### Parameters: - channel_id: Channel ID. ### Returns: - Channel information.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
     * @summary 获取频道信息/Get channel information
     * @param {string} channelId 频道ID/Channel ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    getChannelInfoApiV1YoutubeWebGetChannelInfoGet(channelId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取频道信息。 ### 参数: - channel_id: 频道ID。 ### 返回: - 频道信息。  # [English] ### Purpose: - Get channel information. ### Parameters: - channel_id: Channel ID. ### Returns: - Channel information.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
     * @summary 获取频道信息/Get channel information
     * @param {string} channelId 频道ID/Channel ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    getChannelInfoApiV1YoutubeWebGetChannelInfoGet_2(channelId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取频道短视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道短视频的令牌。默认为None。 ### 返回: - 频道短视频。  # [English] ### Purpose: - Get channel short videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel short videos. Default is None. ### Returns: - Channel short videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
     * @summary 获取频道短视频/Get channel short videos
     * @param {string} channelId 频道ID/Channel ID
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    getChannelShortVideosApiV1YoutubeWebGetChannelShortVideosGet(channelId: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取频道短视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道短视频的令牌。默认为None。 ### 返回: - 频道短视频。  # [English] ### Purpose: - Get channel short videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel short videos. Default is None. ### Returns: - Channel short videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
     * @summary 获取频道短视频/Get channel short videos
     * @param {string} channelId 频道ID/Channel ID
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    getChannelShortVideosApiV1YoutubeWebGetChannelShortVideosGet_3(channelId: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取频道视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道视频的令牌。默认为None。 ### 返回: - 频道视频。  # [English] ### Purpose: - Get channel videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel videos. Default is None. ### Returns: - Channel videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
     * @summary 获取频道视频/Get channel videos
     * @param {string} channelId 频道ID/Channel ID
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    getChannelVideosApiV1YoutubeWebGetChannelVideosGet(channelId: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取频道视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道视频的令牌。默认为None。 ### 返回: - 频道视频。  # [English] ### Purpose: - Get channel videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel videos. Default is None. ### Returns: - Channel videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
     * @summary 获取频道视频/Get channel videos
     * @param {string} channelId 频道ID/Channel ID
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    getChannelVideosApiV1YoutubeWebGetChannelVideosGet_4(channelId: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据视频ID获取推荐视频数据。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 - continuation_token: 用于继续获取推荐视频的令牌。默认为None。 ### 返回: - 推荐视频数据。  # [English] ### Purpose: - Get related videos by video ID. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching related videos. Default is None. ### Returns: - Related videos.  # [示例/Example] video_id = \"LuIL5JATZsc\"
     * @summary 获取推荐视频/Get related videos
     * @param {string} videoId 视频ID/Video ID
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    getRelateVideoApiV1YoutubeWebGetRelateVideoGet(videoId: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据视频ID获取推荐视频数据。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 - continuation_token: 用于继续获取推荐视频的令牌。默认为None。 ### 返回: - 推荐视频数据。  # [English] ### Purpose: - Get related videos by video ID. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching related videos. Default is None. ### Returns: - Related videos.  # [示例/Example] video_id = \"LuIL5JATZsc\"
     * @summary 获取推荐视频/Get related videos
     * @param {string} videoId 视频ID/Video ID
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    getRelateVideoApiV1YoutubeWebGetRelateVideoGet_5(videoId: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取趋势视频。 ### 参数: - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - section: 类型，默认为Now，可选值为Music, Gaming, Movies。 ### 返回: - 趋势视频。  # [English] ### Purpose: - Get trending videos. ### Parameters: - language_code: Language code, default is en. - country_code: Country code, default is us. - section: Section, default is Now, optional values are Music, Gaming, Movies. ### Returns: - Trending videos.  # [示例/Example]
     * @summary 获取趋势视频/Get trending videos
     * @param {string} [languageCode] 语言代码/Language code
     * @param {string} [countryCode] 国家代码/Country code
     * @param {string} [section] 类型/Section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    getTrendingVideosApiV1YoutubeWebGetTrendingVideosGet(languageCode?: string, countryCode?: string, section?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取趋势视频。 ### 参数: - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - section: 类型，默认为Now，可选值为Music, Gaming, Movies。 ### 返回: - 趋势视频。  # [English] ### Purpose: - Get trending videos. ### Parameters: - language_code: Language code, default is en. - country_code: Country code, default is us. - section: Section, default is Now, optional values are Music, Gaming, Movies. ### Returns: - Trending videos.  # [示例/Example]
     * @summary 获取趋势视频/Get trending videos
     * @param {string} [languageCode] 语言代码/Language code
     * @param {string} [countryCode] 国家代码/Country code
     * @param {string} [section] 类型/Section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    getTrendingVideosApiV1YoutubeWebGetTrendingVideosGet_6(languageCode?: string, countryCode?: string, section?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频的评论。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的id就是LuIL5JATZsc。 - continuation_token: 用于继续获取评论的令牌。默认为None。 ### 返回: - 视频评论。  # [English] ### Purpose: - Get comments of a single video. ### Parameters: - id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching comments. Default is None. ### Returns: - Video comments.  # [示例/Example] id = \"LuIL5JATZsc\"
     * @summary 获取视频评论/Get video comments
     * @param {string} videoId 视频ID/Video ID
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    getVideoCommentsApiV1YoutubeWebGetVideoCommentsGet(videoId: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频的评论。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的id就是LuIL5JATZsc。 - continuation_token: 用于继续获取评论的令牌。默认为None。 ### 返回: - 视频评论。  # [English] ### Purpose: - Get comments of a single video. ### Parameters: - id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching comments. Default is None. ### Returns: - Video comments.  # [示例/Example] id = \"LuIL5JATZsc\"
     * @summary 获取视频评论/Get video comments
     * @param {string} videoId 视频ID/Video ID
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    getVideoCommentsApiV1YoutubeWebGetVideoCommentsGet_7(videoId: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频的信息，包括视频下载链接、标题、作者、发布日期、观看次数、点赞次数、不喜欢次数、评论次数、时长、描述等。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频信息。  # [English] ### Purpose: - Get information of a single video, including video download link, title, author, publish date, view count, like count, dislike count, comment count, duration, description, etc. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. ### Returns: - Video information.  # [示例/Example] video_id = \"LuIL5JATZsc\"
     * @summary 获取视频信息/Get video information
     * @param {string} videoId 视频ID/Video ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    getVideoInfoApiV1YoutubeWebGetVideoInfoGet(videoId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频的信息，包括视频下载链接、标题、作者、发布日期、观看次数、点赞次数、不喜欢次数、评论次数、时长、描述等。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频信息。  # [English] ### Purpose: - Get information of a single video, including video download link, title, author, publish date, view count, like count, dislike count, comment count, duration, description, etc. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. ### Returns: - Video information.  # [示例/Example] video_id = \"LuIL5JATZsc\"
     * @summary 获取视频信息/Get video information
     * @param {string} videoId 视频ID/Video ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    getVideoInfoApiV1YoutubeWebGetVideoInfoGet_8(videoId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频的字幕。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频字幕。  # [English] ### Purpose: - Get subtitles of a single video. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc.  ### Returns: - Video subtitles.  # [示例/Example] video_id = \"LuIL5JATZsc\"
     * @summary 获取视频字幕/Get video subtitles
     * @param {string} videoId 视频ID/Video ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    getVideoSubtitlesApiV1YoutubeWebGetVideoSubtitlesGet(videoId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频的字幕。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频字幕。  # [English] ### Purpose: - Get subtitles of a single video. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc.  ### Returns: - Video subtitles.  # [示例/Example] video_id = \"LuIL5JATZsc\"
     * @summary 获取视频字幕/Get video subtitles
     * @param {string} videoId 视频ID/Video ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    getVideoSubtitlesApiV1YoutubeWebGetVideoSubtitlesGet_9(videoId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索频道。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search channel. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\" search_query = \"AMD\"
     * @summary 搜索频道/Search channel
     * @param {string} channelId 频道ID/Channel ID
     * @param {string} searchQuery 搜索关键字/Search keyword
     * @param {string} [languageCode] 语言代码/Language code
     * @param {string} [countryCode] 国家代码/Country code
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    searchChannelApiV1YoutubeWebSearchChannelGet(channelId: string, searchQuery: string, languageCode?: string, countryCode?: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索频道。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search channel. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\" search_query = \"AMD\"
     * @summary 搜索频道/Search channel
     * @param {string} channelId 频道ID/Channel ID
     * @param {string} searchQuery 搜索关键字/Search keyword
     * @param {string} [languageCode] 语言代码/Language code
     * @param {string} [countryCode] 国家代码/Country code
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    searchChannelApiV1YoutubeWebSearchChannelGet_10(channelId: string, searchQuery: string, languageCode?: string, countryCode?: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索视频。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - order_by: 排序方式，默��为this_month。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search video. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - order_by: Order by, default is this_month. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] search_query = \"Minecraft\"
     * @summary 搜索视频/Search video
     * @param {string} searchQuery 搜索关键字/Search keyword
     * @param {string} [languageCode] 语言代码/Language code
     * @param {string} [orderBy] 排序方式/Order by
     * @param {string} [countryCode] 国家代码/Country code
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    searchVideoApiV1YoutubeWebSearchVideoGet(searchQuery: string, languageCode?: string, orderBy?: string, countryCode?: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索视频。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - order_by: 排序方式，默��为this_month。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search video. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - order_by: Order by, default is this_month. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] search_query = \"Minecraft\"
     * @summary 搜索视频/Search video
     * @param {string} searchQuery 搜索关键字/Search keyword
     * @param {string} [languageCode] 语言代码/Language code
     * @param {string} [orderBy] 排序方式/Order by
     * @param {string} [countryCode] 国家代码/Country code
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApiInterface
     */
    searchVideoApiV1YoutubeWebSearchVideoGet_11(searchQuery: string, languageCode?: string, orderBy?: string, countryCode?: string, continuationToken?: string, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * YouTubeWebAPIApi - object-oriented interface
 * @export
 * @class YouTubeWebAPIApi
 * @extends {BaseAPI}
 */
export class YouTubeWebAPIApi extends BaseAPI implements YouTubeWebAPIApiInterface {
    /**
     * # [中文] ### 用途: - 获取频道ID。 ### 参数: - channel_name: 频道名称。 ### 返回: - 频道ID。  # [English] ### Purpose: - Get channel ID. ### Parameters: - channel_name: Channel name. ### Returns: - Channel ID.  # [示例/Example] channel_name = \"LinusTechTips\"
     * @summary 获取频道ID/Get channel ID
     * @param {string} channelName 频道名称/Channel name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public getChannelIdApiV1YoutubeWebGetChannelIdGet(channelName: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).getChannelIdApiV1YoutubeWebGetChannelIdGet(channelName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取频道ID。 ### 参数: - channel_name: 频道名称。 ### 返回: - 频道ID。  # [English] ### Purpose: - Get channel ID. ### Parameters: - channel_name: Channel name. ### Returns: - Channel ID.  # [示例/Example] channel_name = \"LinusTechTips\"
     * @summary 获取频道ID/Get channel ID
     * @param {string} channelName 频道名称/Channel name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public getChannelIdApiV1YoutubeWebGetChannelIdGet_1(channelName: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).getChannelIdApiV1YoutubeWebGetChannelIdGet_1(channelName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取频道信息。 ### 参数: - channel_id: 频道ID。 ### 返回: - 频道信息。  # [English] ### Purpose: - Get channel information. ### Parameters: - channel_id: Channel ID. ### Returns: - Channel information.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
     * @summary 获取频道信息/Get channel information
     * @param {string} channelId 频道ID/Channel ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public getChannelInfoApiV1YoutubeWebGetChannelInfoGet(channelId: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).getChannelInfoApiV1YoutubeWebGetChannelInfoGet(channelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取频道信息。 ### 参数: - channel_id: 频道ID。 ### 返回: - 频道信息。  # [English] ### Purpose: - Get channel information. ### Parameters: - channel_id: Channel ID. ### Returns: - Channel information.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
     * @summary 获取频道信息/Get channel information
     * @param {string} channelId 频道ID/Channel ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public getChannelInfoApiV1YoutubeWebGetChannelInfoGet_2(channelId: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).getChannelInfoApiV1YoutubeWebGetChannelInfoGet_2(channelId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取频道短视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道短视频的令牌。默认为None。 ### 返回: - 频道短视频。  # [English] ### Purpose: - Get channel short videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel short videos. Default is None. ### Returns: - Channel short videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
     * @summary 获取频道短视频/Get channel short videos
     * @param {string} channelId 频道ID/Channel ID
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public getChannelShortVideosApiV1YoutubeWebGetChannelShortVideosGet(channelId: string, continuationToken?: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).getChannelShortVideosApiV1YoutubeWebGetChannelShortVideosGet(channelId, continuationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取频道短视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道短视频的令牌。默认为None。 ### 返回: - 频道短视频。  # [English] ### Purpose: - Get channel short videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel short videos. Default is None. ### Returns: - Channel short videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
     * @summary 获取频道短视频/Get channel short videos
     * @param {string} channelId 频道ID/Channel ID
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public getChannelShortVideosApiV1YoutubeWebGetChannelShortVideosGet_3(channelId: string, continuationToken?: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).getChannelShortVideosApiV1YoutubeWebGetChannelShortVideosGet_3(channelId, continuationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取频道视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道视频的令牌。默认为None。 ### 返回: - 频道视频。  # [English] ### Purpose: - Get channel videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel videos. Default is None. ### Returns: - Channel videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
     * @summary 获取频道视频/Get channel videos
     * @param {string} channelId 频道ID/Channel ID
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public getChannelVideosApiV1YoutubeWebGetChannelVideosGet(channelId: string, continuationToken?: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).getChannelVideosApiV1YoutubeWebGetChannelVideosGet(channelId, continuationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取频道视频。 ### 参数: - channel_id: 频道ID。 - continuation_token: 用于继续获取频道视频的令牌。默认为None。 ### 返回: - 频道视频。  # [English] ### Purpose: - Get channel videos. ### Parameters: - channel_id: Channel ID. - continuation_token: Token to continue fetching channel videos. Default is None. ### Returns: - Channel videos.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\"
     * @summary 获取频道视频/Get channel videos
     * @param {string} channelId 频道ID/Channel ID
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public getChannelVideosApiV1YoutubeWebGetChannelVideosGet_4(channelId: string, continuationToken?: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).getChannelVideosApiV1YoutubeWebGetChannelVideosGet_4(channelId, continuationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据视频ID获取推荐视频数据。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 - continuation_token: 用于继续获取推荐视频的令牌。默认为None。 ### 返回: - 推荐视频数据。  # [English] ### Purpose: - Get related videos by video ID. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching related videos. Default is None. ### Returns: - Related videos.  # [示例/Example] video_id = \"LuIL5JATZsc\"
     * @summary 获取推荐视频/Get related videos
     * @param {string} videoId 视频ID/Video ID
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public getRelateVideoApiV1YoutubeWebGetRelateVideoGet(videoId: string, continuationToken?: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).getRelateVideoApiV1YoutubeWebGetRelateVideoGet(videoId, continuationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据视频ID获取推荐视频数据。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 - continuation_token: 用于继续获取推荐视频的令牌。默认为None。 ### 返回: - 推荐视频数据。  # [English] ### Purpose: - Get related videos by video ID. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching related videos. Default is None. ### Returns: - Related videos.  # [示例/Example] video_id = \"LuIL5JATZsc\"
     * @summary 获取推荐视频/Get related videos
     * @param {string} videoId 视频ID/Video ID
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public getRelateVideoApiV1YoutubeWebGetRelateVideoGet_5(videoId: string, continuationToken?: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).getRelateVideoApiV1YoutubeWebGetRelateVideoGet_5(videoId, continuationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取趋势视频。 ### 参数: - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - section: 类型，默认为Now，可选值为Music, Gaming, Movies。 ### 返回: - 趋势视频。  # [English] ### Purpose: - Get trending videos. ### Parameters: - language_code: Language code, default is en. - country_code: Country code, default is us. - section: Section, default is Now, optional values are Music, Gaming, Movies. ### Returns: - Trending videos.  # [示例/Example]
     * @summary 获取趋势视频/Get trending videos
     * @param {string} [languageCode] 语言代码/Language code
     * @param {string} [countryCode] 国家代码/Country code
     * @param {string} [section] 类型/Section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public getTrendingVideosApiV1YoutubeWebGetTrendingVideosGet(languageCode?: string, countryCode?: string, section?: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).getTrendingVideosApiV1YoutubeWebGetTrendingVideosGet(languageCode, countryCode, section, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取趋势视频。 ### 参数: - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - section: 类型，默认为Now，可选值为Music, Gaming, Movies。 ### 返回: - 趋势视频。  # [English] ### Purpose: - Get trending videos. ### Parameters: - language_code: Language code, default is en. - country_code: Country code, default is us. - section: Section, default is Now, optional values are Music, Gaming, Movies. ### Returns: - Trending videos.  # [示例/Example]
     * @summary 获取趋势视频/Get trending videos
     * @param {string} [languageCode] 语言代码/Language code
     * @param {string} [countryCode] 国家代码/Country code
     * @param {string} [section] 类型/Section
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public getTrendingVideosApiV1YoutubeWebGetTrendingVideosGet_6(languageCode?: string, countryCode?: string, section?: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).getTrendingVideosApiV1YoutubeWebGetTrendingVideosGet_6(languageCode, countryCode, section, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频的评论。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的id就是LuIL5JATZsc。 - continuation_token: 用于继续获取评论的令牌。默认为None。 ### 返回: - 视频评论。  # [English] ### Purpose: - Get comments of a single video. ### Parameters: - id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching comments. Default is None. ### Returns: - Video comments.  # [示例/Example] id = \"LuIL5JATZsc\"
     * @summary 获取视频评论/Get video comments
     * @param {string} videoId 视频ID/Video ID
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public getVideoCommentsApiV1YoutubeWebGetVideoCommentsGet(videoId: string, continuationToken?: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).getVideoCommentsApiV1YoutubeWebGetVideoCommentsGet(videoId, continuationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频的评论。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的id就是LuIL5JATZsc。 - continuation_token: 用于继续获取评论的令牌。默认为None。 ### 返回: - 视频评论。  # [English] ### Purpose: - Get comments of a single video. ### Parameters: - id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. - continuation_token: Token to continue fetching comments. Default is None. ### Returns: - Video comments.  # [示例/Example] id = \"LuIL5JATZsc\"
     * @summary 获取视频评论/Get video comments
     * @param {string} videoId 视频ID/Video ID
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public getVideoCommentsApiV1YoutubeWebGetVideoCommentsGet_7(videoId: string, continuationToken?: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).getVideoCommentsApiV1YoutubeWebGetVideoCommentsGet_7(videoId, continuationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频的信息，包括视频下载链接、标题、作者、发布日期、观看次数、点赞次数、不喜欢次数、评论次数、时长、描述等。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频信息。  # [English] ### Purpose: - Get information of a single video, including video download link, title, author, publish date, view count, like count, dislike count, comment count, duration, description, etc. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. ### Returns: - Video information.  # [示例/Example] video_id = \"LuIL5JATZsc\"
     * @summary 获取视频信息/Get video information
     * @param {string} videoId 视频ID/Video ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public getVideoInfoApiV1YoutubeWebGetVideoInfoGet(videoId: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).getVideoInfoApiV1YoutubeWebGetVideoInfoGet(videoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频的信息，包括视频下载链接、标题、作者、发布日期、观看次数、点赞次数、不喜欢次数、评论次数、时长、描述等。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频信息。  # [English] ### Purpose: - Get information of a single video, including video download link, title, author, publish date, view count, like count, dislike count, comment count, duration, description, etc. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc. ### Returns: - Video information.  # [示例/Example] video_id = \"LuIL5JATZsc\"
     * @summary 获取视频信息/Get video information
     * @param {string} videoId 视频ID/Video ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public getVideoInfoApiV1YoutubeWebGetVideoInfoGet_8(videoId: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).getVideoInfoApiV1YoutubeWebGetVideoInfoGet_8(videoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频的字幕。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频字幕。  # [English] ### Purpose: - Get subtitles of a single video. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc.  ### Returns: - Video subtitles.  # [示例/Example] video_id = \"LuIL5JATZsc\"
     * @summary 获取视频字幕/Get video subtitles
     * @param {string} videoId 视频ID/Video ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public getVideoSubtitlesApiV1YoutubeWebGetVideoSubtitlesGet(videoId: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).getVideoSubtitlesApiV1YoutubeWebGetVideoSubtitlesGet(videoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频的字幕。 ### 参数: - video_id: 视频ID，从URL中获取，例如：https://www.youtube.com/watch?v=LuIL5JATZsc，这里的video_id就是LuIL5JATZsc。 ### 返回: - 视频字幕。  # [English] ### Purpose: - Get subtitles of a single video. ### Parameters: - video_id: Video ID, get it from the URL, for example: https://www.youtube.com/watch?v=LuIL5JATZsc, the id is LuIL5JATZsc.  ### Returns: - Video subtitles.  # [示例/Example] video_id = \"LuIL5JATZsc\"
     * @summary 获取视频字幕/Get video subtitles
     * @param {string} videoId 视频ID/Video ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public getVideoSubtitlesApiV1YoutubeWebGetVideoSubtitlesGet_9(videoId: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).getVideoSubtitlesApiV1YoutubeWebGetVideoSubtitlesGet_9(videoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索频道。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search channel. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\" search_query = \"AMD\"
     * @summary 搜索频道/Search channel
     * @param {string} channelId 频道ID/Channel ID
     * @param {string} searchQuery 搜索关键字/Search keyword
     * @param {string} [languageCode] 语言代码/Language code
     * @param {string} [countryCode] 国家代码/Country code
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public searchChannelApiV1YoutubeWebSearchChannelGet(channelId: string, searchQuery: string, languageCode?: string, countryCode?: string, continuationToken?: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).searchChannelApiV1YoutubeWebSearchChannelGet(channelId, searchQuery, languageCode, countryCode, continuationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索频道。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search channel. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] channel_id = \"UCXuqSBlHAE6Xw-yeJA0Tunw\" search_query = \"AMD\"
     * @summary 搜索频道/Search channel
     * @param {string} channelId 频道ID/Channel ID
     * @param {string} searchQuery 搜索关键字/Search keyword
     * @param {string} [languageCode] 语言代码/Language code
     * @param {string} [countryCode] 国家代码/Country code
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public searchChannelApiV1YoutubeWebSearchChannelGet_10(channelId: string, searchQuery: string, languageCode?: string, countryCode?: string, continuationToken?: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).searchChannelApiV1YoutubeWebSearchChannelGet_10(channelId, searchQuery, languageCode, countryCode, continuationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索视频。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - order_by: 排序方式，默��为this_month。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search video. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - order_by: Order by, default is this_month. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] search_query = \"Minecraft\"
     * @summary 搜索视频/Search video
     * @param {string} searchQuery 搜索关键字/Search keyword
     * @param {string} [languageCode] 语言代码/Language code
     * @param {string} [orderBy] 排序方式/Order by
     * @param {string} [countryCode] 国家代码/Country code
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public searchVideoApiV1YoutubeWebSearchVideoGet(searchQuery: string, languageCode?: string, orderBy?: string, countryCode?: string, continuationToken?: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).searchVideoApiV1YoutubeWebSearchVideoGet(searchQuery, languageCode, orderBy, countryCode, continuationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索视频。 ### 参数: - search_query: 搜索关键字。 - language_code: 语言代码，默认为en。 - order_by: 排序方式，默��为this_month。 - country_code: 国家代码，默认为us。 - continuation_token: 用于继续获取搜索结果的令牌。默认为None。 ### 返回: - 搜索结果。  # [English] ### Purpose: - Search video. ### Parameters: - search_query: Search keyword. - language_code: Language code, default is en. - order_by: Order by, default is this_month. - country_code: Country code, default is us. - continuation_token: Token to continue fetching search results. Default is None. ### Returns: - Search results.  # [示例/Example] search_query = \"Minecraft\"
     * @summary 搜索视频/Search video
     * @param {string} searchQuery 搜索关键字/Search keyword
     * @param {string} [languageCode] 语言代码/Language code
     * @param {string} [orderBy] 排序方式/Order by
     * @param {string} [countryCode] 国家代码/Country code
     * @param {string} [continuationToken] 翻页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof YouTubeWebAPIApi
     */
    public searchVideoApiV1YoutubeWebSearchVideoGet_11(searchQuery: string, languageCode?: string, orderBy?: string, countryCode?: string, continuationToken?: string, options?: any) {
        return YouTubeWebAPIApiFp(this.configuration).searchVideoApiV1YoutubeWebSearchVideoGet_11(searchQuery, languageCode, orderBy, countryCode, continuationToken, options).then((request) => request(this.axios, this.basePath));
    }

}
