// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
// @ts-ignore
import { TikTokAppEncryptRequest } from '../models';
// @ts-ignore
import { TikTokAppLoginEncryptDecryptRequest } from '../models';
// @ts-ignore
import { TikTokAppV3ContentTranslate } from '../models';
// @ts-ignore
import { TikTokAppV3HomeFeed } from '../models';
/**
 * TikTokAppV3APIApi - axios parameter creator
 * @export
 */
export const TikTokAppV3APIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 根据视频ID来增加作品的播放数 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - invite_code: 邀请码，此接口需要邀请码才能使用。 ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - invite_code: Invite code, this interface requires an invite code to use. ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type = 0 item_id = \"7419966340443819295\" cookie = None
         * @summary 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
         * @param {number} awemeType 作品类型/Video type
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet: async (awemeType: number, itemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeType' is not null or undefined
            if (awemeType === null || awemeType === undefined) {
                throw new RequiredError('awemeType','Required parameter awemeType was null or undefined when calling addVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling addVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/add_video_play_count`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeType !== undefined) {
                localVarQueryParameter['aweme_type'] = awemeType;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据视频ID来增加作品的播放数 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - invite_code: 邀请码，此接口需要邀请码才能使用。 ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - invite_code: Invite code, this interface requires an invite code to use. ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type = 0 item_id = \"7419966340443819295\" cookie = None
         * @summary 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
         * @param {number} awemeType 作品类型/Video type
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet_1: async (awemeType: number, itemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeType' is not null or undefined
            if (awemeType === null || awemeType === undefined) {
                throw new RequiredError('awemeType','Required parameter awemeType was null or undefined when calling addVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet_1.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling addVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet_1.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/add_video_play_count`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeType !== undefined) {
                localVarQueryParameter['aweme_type'] = awemeType;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 检测直播间是否在线 - 直播间的Room ID可以通过直播间链接从`/api/v1/tiktok/web/get_live_room_id`接口获取 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online - The Room ID of the live room can be obtained from the `/api/v1/tiktok/web/get_live_room_id` interface through the live room link ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"
         * @summary 检测直播间是否在线/Check if live room is online
         * @param {string} roomId 直播间id/Live room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet: async (roomId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/check_live_room_online`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 检测直播间是否在线 - 直播间的Room ID可以通过直播间链接从`/api/v1/tiktok/web/get_live_room_id`接口获取 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online - The Room ID of the live room can be obtained from the `/api/v1/tiktok/web/get_live_room_id` interface through the live room link ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"
         * @summary 检测直播间是否在线/Check if live room is online
         * @param {string} roomId 直播间id/Live room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_2: async (roomId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_2.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/check_live_room_online`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 加密/解密 TikTok APP 登录请求体，用于登录接口的请求体加密和解密。 ### 参数: - username: 用户名，可以是密文或明文。 - password: 密码，可以是密文或明文。 - mode: 模式     - `encrypt`: 加密     - `decrypt`: 解密 ### 返回: - 加密/解密后的请求体  # [English] ### Purpose: - Encrypt/decrypt the TikTok APP login request body, used for encrypting and decrypting the request body of the login interface. ### Parameters: - username: Username, can be ciphertext or plaintext. - password: Password, can be ciphertext or plaintext. - mode: Mode     - `encrypt`: Encrypt     - `decrypt`: Decrypt ### Return: - Encrypted/decrypted request body  # [示例/Example] ```json {     \"username\": \"example_username\",     \"password\": \"example_password\",     \"mode\": \"encrypt\" } ```
         * @summary 加密或解密 TikTok APP 登录请求体/Encrypt or Decrypt TikTok APP login request body
         * @param {TikTokAppLoginEncryptDecryptRequest} [tikTokAppLoginEncryptDecryptRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost: async (tikTokAppLoginEncryptDecryptRequest?: TikTokAppLoginEncryptDecryptRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v3/encrypt_decrypt_login_request`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof tikTokAppLoginEncryptDecryptRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(tikTokAppLoginEncryptDecryptRequest !== undefined ? tikTokAppLoginEncryptDecryptRequest : {}) : (tikTokAppLoginEncryptDecryptRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 加密/解密 TikTok APP 登录请求体，用于登录接口的请求体加密和解密。 ### 参数: - username: 用户名，可以是密文或明文。 - password: 密码，可以是密文或明文。 - mode: 模式     - `encrypt`: 加密     - `decrypt`: 解密 ### 返回: - 加密/解密后的请求体  # [English] ### Purpose: - Encrypt/decrypt the TikTok APP login request body, used for encrypting and decrypting the request body of the login interface. ### Parameters: - username: Username, can be ciphertext or plaintext. - password: Password, can be ciphertext or plaintext. - mode: Mode     - `encrypt`: Encrypt     - `decrypt`: Decrypt ### Return: - Encrypted/decrypted request body  # [示例/Example] ```json {     \"username\": \"example_username\",     \"password\": \"example_password\",     \"mode\": \"encrypt\" } ```
         * @summary 加密或解密 TikTok APP 登录请求体/Encrypt or Decrypt TikTok APP login request body
         * @param {TikTokAppLoginEncryptDecryptRequest} [tikTokAppLoginEncryptDecryptRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost_3: async (tikTokAppLoginEncryptDecryptRequest?: TikTokAppLoginEncryptDecryptRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v3/encrypt_decrypt_login_request`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof tikTokAppLoginEncryptDecryptRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(tikTokAppLoginEncryptDecryptRequest !== undefined ? tikTokAppLoginEncryptDecryptRequest : {}) : (tikTokAppLoginEncryptDecryptRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取内容翻译数据 ### 参数: - trg_lang: 目标语言     - zh-Hans: 简体中文     - zh-Hant: 繁体中文     - en: 英语     - ja: 日语     - ko: 韩语     - fr: 法语     - de: 德语     - ru: 俄语     - es: 西班牙语     - pt: 葡萄牙语     - vi: 越南语     - th: 泰语     - id: 印尼语     - ar: 阿拉伯语     - it: 意大利语     - tr: 土耳其语     - he: 希伯来语     - pl: 波兰语     - nl: 荷兰语     - sv: 瑞典语     - da: 丹麦语     - fi: 芬兰语     - no: 挪威语     - cs: 捷克语     - hu: 匈牙利语 - src_content: 源内容，也就是需要翻译的内容，长度不超过5000个字符，如果超过5000个字符，只会翻译前5000个字符。 ### 返回: - 内容翻译数据  # [English] ### Purpose: - Get content translation data ### Parameters: - trg_lang: Target language     - zh-Hans: Simplified Chinese     - zh-Hant: Traditional Chinese     - en: English     - ja: Japanese     - ko: Korean     - fr: French     - de: German     - ru: Russian     - es: Spanish     - pt: Portuguese     - vi: Vietnamese     - th: Thai     - id: Indonesian     - ar: Arabic     - it: Italian     - tr: Turkish     - he: Hebrew     - pl: Polish     - nl: Dutch     - sv: Swedish     - da: Danish     - fi: Finnish     - no: Norwegian     - cs: Czech     - hu: Hungarian - src_content: Source content, that is, the content that needs to be translated, the length does not exceed 5000 characters, if it exceeds 5000 characters, only the first 5000 characters will be translated. ### Return: - Content translation data  # [示例/Example] trg_lang = \"zh-Hans\" src_content = \"Hello, welcome to TikHub!\"
         * @summary 获取内容翻译数据/Get content translation data
         * @param {TikTokAppV3ContentTranslate} [tikTokAppV3ContentTranslate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost: async (tikTokAppV3ContentTranslate?: TikTokAppV3ContentTranslate, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_content_translate`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof tikTokAppV3ContentTranslate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(tikTokAppV3ContentTranslate !== undefined ? tikTokAppV3ContentTranslate : {}) : (tikTokAppV3ContentTranslate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取内容翻译数据 ### 参数: - trg_lang: 目标语言     - zh-Hans: 简体中文     - zh-Hant: 繁体中文     - en: 英语     - ja: 日语     - ko: 韩语     - fr: 法语     - de: 德语     - ru: 俄语     - es: 西班牙语     - pt: 葡萄牙语     - vi: 越南语     - th: 泰语     - id: 印尼语     - ar: 阿拉伯语     - it: 意大利语     - tr: 土耳其语     - he: 希伯来语     - pl: 波兰语     - nl: 荷兰语     - sv: 瑞典语     - da: 丹麦语     - fi: 芬兰语     - no: 挪威语     - cs: 捷克语     - hu: 匈牙利语 - src_content: 源内容，也就是需要翻译的内容，长度不超过5000个字符，如果超过5000个字符，只会翻译前5000个字符。 ### 返回: - 内容翻译数据  # [English] ### Purpose: - Get content translation data ### Parameters: - trg_lang: Target language     - zh-Hans: Simplified Chinese     - zh-Hant: Traditional Chinese     - en: English     - ja: Japanese     - ko: Korean     - fr: French     - de: German     - ru: Russian     - es: Spanish     - pt: Portuguese     - vi: Vietnamese     - th: Thai     - id: Indonesian     - ar: Arabic     - it: Italian     - tr: Turkish     - he: Hebrew     - pl: Polish     - nl: Dutch     - sv: Swedish     - da: Danish     - fi: Finnish     - no: Norwegian     - cs: Czech     - hu: Hungarian - src_content: Source content, that is, the content that needs to be translated, the length does not exceed 5000 characters, if it exceeds 5000 characters, only the first 5000 characters will be translated. ### Return: - Content translation data  # [示例/Example] trg_lang = \"zh-Hans\" src_content = \"Hello, welcome to TikHub!\"
         * @summary 获取内容翻译数据/Get content translation data
         * @param {TikTokAppV3ContentTranslate} [tikTokAppV3ContentTranslate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_4: async (tikTokAppV3ContentTranslate?: TikTokAppV3ContentTranslate, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_content_translate`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof tikTokAppV3ContentTranslate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(tikTokAppV3ContentTranslate !== undefined ? tikTokAppV3ContentTranslate : {}) : (tikTokAppV3ContentTranslate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取创作者信息，包括创作者的基本信息、粉丝数、橱窗商品数量等信息。 ### 参数: - creator_uid: 创作者uid ### 返回: - 创作者信息  # [English] ### Purpose: - Get creator information, including the creator\'s basic information, number of fans, number of storefront products, etc. ### Parameters: - creator_uid: Creator uid ### Return: - Creator information  # [示例/Example] creator_uid = \"6555451606845243393\"
         * @summary 获取创作者信息/Get creator information
         * @param {string} creatorUid 创作者uid/Creator uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet: async (creatorUid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creatorUid' is not null or undefined
            if (creatorUid === null || creatorUid === undefined) {
                throw new RequiredError('creatorUid','Required parameter creatorUid was null or undefined when calling fetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_creator_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (creatorUid !== undefined) {
                localVarQueryParameter['creator_uid'] = creatorUid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取创作者信息，包括创作者的基本信息、粉丝数、橱窗商品数量等信息。 ### 参数: - creator_uid: 创作者uid ### 返回: - 创作者信息  # [English] ### Purpose: - Get creator information, including the creator\'s basic information, number of fans, number of storefront products, etc. ### Parameters: - creator_uid: Creator uid ### Return: - Creator information  # [示例/Example] creator_uid = \"6555451606845243393\"
         * @summary 获取创作者信息/Get creator information
         * @param {string} creatorUid 创作者uid/Creator uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet_5: async (creatorUid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'creatorUid' is not null or undefined
            if (creatorUid === null || creatorUid === undefined) {
                throw new RequiredError('creatorUid','Required parameter creatorUid was null or undefined when calling fetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet_5.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_creator_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (creatorUid !== undefined) {
                localVarQueryParameter['creator_uid'] = creatorUid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取创作者橱窗商品列表 ### 参数: - kol_id: 创作者的sec_user_id - count: 数量 - next_scroll_param: 翻页参数，第一页为空字符串，后续请求使用上一次请求返回的next_scroll_param值。 ### 返回: - 创作者橱窗商品列表  # [English] ### Purpose: - Get creator showcase product list ### Parameters: - kol_id: Creator\'s sec_user_id - count: Number - next_scroll_param: Page parameter, empty string for the first page, use the next_scroll_param value returned by the last request for subsequent requests. ### Return: - Creator showcase product list  # [示例/Example] kol_id = \"MS4wLjABAAAARujvKaVWqgbVCwuxQghA99TUa5I-4g6jVzMXZd9FJIXSdJwJM47vm4-2T1K3gsux\" count = 20 next_scroll_param = \"\"
         * @summary 获取创作者橱窗商品列表/Get creator showcase product list
         * @param {string} kolId 创作者的sec_user_id/Creator\&#39;s sec_user_id
         * @param {number} [count] 数量/Number
         * @param {string} [nextScrollParam] 翻页参数/Page parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet: async (kolId: string, count?: number, nextScrollParam?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'kolId' is not null or undefined
            if (kolId === null || kolId === undefined) {
                throw new RequiredError('kolId','Required parameter kolId was null or undefined when calling fetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_creator_showcase_product_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (kolId !== undefined) {
                localVarQueryParameter['kol_id'] = kolId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (nextScrollParam !== undefined) {
                localVarQueryParameter['next_scroll_param'] = nextScrollParam;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取创作者橱窗商品列表 ### 参数: - kol_id: 创作者的sec_user_id - count: 数量 - next_scroll_param: 翻页参数，第一页为空字符串，后续请求使用上一次请求返回的next_scroll_param值。 ### 返回: - 创作者橱窗商品列表  # [English] ### Purpose: - Get creator showcase product list ### Parameters: - kol_id: Creator\'s sec_user_id - count: Number - next_scroll_param: Page parameter, empty string for the first page, use the next_scroll_param value returned by the last request for subsequent requests. ### Return: - Creator showcase product list  # [示例/Example] kol_id = \"MS4wLjABAAAARujvKaVWqgbVCwuxQghA99TUa5I-4g6jVzMXZd9FJIXSdJwJM47vm4-2T1K3gsux\" count = 20 next_scroll_param = \"\"
         * @summary 获取创作者橱窗商品列表/Get creator showcase product list
         * @param {string} kolId 创作者的sec_user_id/Creator\&#39;s sec_user_id
         * @param {number} [count] 数量/Number
         * @param {string} [nextScrollParam] 翻页参数/Page parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet_6: async (kolId: string, count?: number, nextScrollParam?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'kolId' is not null or undefined
            if (kolId === null || kolId === undefined) {
                throw new RequiredError('kolId','Required parameter kolId was null or undefined when calling fetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet_6.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_creator_showcase_product_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (kolId !== undefined) {
                localVarQueryParameter['kol_id'] = kolId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (nextScrollParam !== undefined) {
                localVarQueryParameter['next_scroll_param'] = nextScrollParam;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet: async (keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_general_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_7: async (keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_7.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_general_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet: async (chId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chId' is not null or undefined
            if (chId === null || chId === undefined) {
                throw new RequiredError('chId','Required parameter chId was null or undefined when calling fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_hashtag_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (chId !== undefined) {
                localVarQueryParameter['ch_id'] = chId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_8: async (chId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chId' is not null or undefined
            if (chId === null || chId === undefined) {
                throw new RequiredError('chId','Required parameter chId was null or undefined when calling fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_8.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_hashtag_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (chId !== undefined) {
                localVarQueryParameter['ch_id'] = chId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_hashtag_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_9: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_9.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_hashtag_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet: async (chId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chId' is not null or undefined
            if (chId === null || chId === undefined) {
                throw new RequiredError('chId','Required parameter chId was null or undefined when calling fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_hashtag_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (chId !== undefined) {
                localVarQueryParameter['ch_id'] = chId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_10: async (chId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chId' is not null or undefined
            if (chId === null || chId === undefined) {
                throw new RequiredError('chId','Required parameter chId was null or undefined when calling fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_10.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_hashtag_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (chId !== undefined) {
                localVarQueryParameter['ch_id'] = chId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - cookie: User\'s own cookie, optional parameter, used for personalized recommendation of interface returned data. ### Return: - Video recommend data
         * @summary 获取主页视频推荐数据/Get home feed(recommend) video data
         * @param {TikTokAppV3HomeFeed} [tikTokAppV3HomeFeed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost: async (tikTokAppV3HomeFeed?: TikTokAppV3HomeFeed, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_home_feed`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof tikTokAppV3HomeFeed !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(tikTokAppV3HomeFeed !== undefined ? tikTokAppV3HomeFeed : {}) : (tikTokAppV3HomeFeed || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - cookie: User\'s own cookie, optional parameter, used for personalized recommendation of interface returned data. ### Return: - Video recommend data
         * @summary 获取主页视频推荐数据/Get home feed(recommend) video data
         * @param {TikTokAppV3HomeFeed} [tikTokAppV3HomeFeed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost_11: async (tikTokAppV3HomeFeed?: TikTokAppV3HomeFeed, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_home_feed`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof tikTokAppV3HomeFeed !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(tikTokAppV3HomeFeed !== undefined ? tikTokAppV3HomeFeed : {}) : (tikTokAppV3HomeFeed || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播每日榜单数据 ### 参数: - anchor_id: 主播id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的主播id。 - room_id: 直播间id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的id。 - rank_type: 榜单类型     - `0`: 每小时排行榜     - `1`: 每周排行榜     - `5`: 新星排行榜     - `6`: 销售排行榜     - `8`: 每日排行榜     - `10`: 游戏排行榜     - `11`: 每日游戏排行榜     - `12`: 名人堂排行榜     - `13`: 冠军赛排行榜     - `14`: 每日新秀排行榜     - `15`: 人气直播榜     - `16`: D5段位榜     - `20`: 绝地求生排行榜     - `21`: 王者荣耀排行榜     - `22`: Free Fire 排行榜     - `1001`: 联盟竞赛排行榜     - `-1`: 未知排行榜 - region_type: 地区类型，使用默认值即可，具体含义不明。 - gap_interval: 时间间隔，使用默认值代表当天，使用-1代表排名记录。 - cookie: 用户自己的cookie，可选参数，用于接口不可用时使用。 ### 返回: - 直播每日榜单数据  # [English] ### Purpose: - Get live daily rank data ### Parameters: - anchor_id: Anchor id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different anchor ids of different live rooms. - room_id: Live room id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different room ids of different live rooms. - rank_type: Rank type     - `0`: Hourly Rank     - `1`: Weekly Rank     - `5`: Rookie Star Rank     - `6`: Sale Rank     - `8`: Daily Rank     - `10`: Game Rank     - `11`: Daily Game Rank     - `12`: Hall of Fame Rank     - `13`: Champion Tournament Rank     - `14`: Daily Rookie Star Rank     - `15`: Popular Live Stream Rank     - `16`: D5 Level Rank     - `20`: PUBG Rank     - `21`: MLBB Rank     - `22`: Free Fire Rank     - `1001`: League Campaign Rank     - `-1`: Unknown Rank  - region_type: Region type, use the default value, the specific meaning is unknown. - gap_interval: Time interval, use the default value to represent the current day, use -1 to represent the ranking record. - cookie: User\'s own cookie, optional parameter, used when the interface is not available. ### Return: - Live daily rank data
         * @summary 获取直播每日榜单数据/Get live daily rank data
         * @param {string} [anchorId] 主播id/Anchor id
         * @param {string} [roomId] 直播间id/Live room id
         * @param {number} [rankType] 榜单类型/Rank type
         * @param {number} [regionType] 地区类型/Region type
         * @param {number} [gapInterval] 时间间隔/Time interval
         * @param {string} [cookie] 用户自己的cookie/User\&#39;s own cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet: async (anchorId?: string, roomId?: string, rankType?: number, regionType?: number, gapInterval?: number, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_live_daily_rank`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (anchorId !== undefined) {
                localVarQueryParameter['anchor_id'] = anchorId;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }

            if (rankType !== undefined) {
                localVarQueryParameter['rank_type'] = rankType;
            }

            if (regionType !== undefined) {
                localVarQueryParameter['region_type'] = regionType;
            }

            if (gapInterval !== undefined) {
                localVarQueryParameter['gap_interval'] = gapInterval;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播每日榜单数据 ### 参数: - anchor_id: 主播id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的主播id。 - room_id: 直播间id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的id。 - rank_type: 榜单类型     - `0`: 每小时排行榜     - `1`: 每周排行榜     - `5`: 新星排行榜     - `6`: 销售排行榜     - `8`: 每日排行榜     - `10`: 游戏排行榜     - `11`: 每日游戏排行榜     - `12`: 名人堂排行榜     - `13`: 冠军赛排行榜     - `14`: 每日新秀排行榜     - `15`: 人气直播榜     - `16`: D5段位榜     - `20`: 绝地求生排行榜     - `21`: 王者荣耀排行榜     - `22`: Free Fire 排行榜     - `1001`: 联盟竞赛排行榜     - `-1`: 未知排行榜 - region_type: 地区类型，使用默认值即可，具体含义不明。 - gap_interval: 时间间隔，使用默认值代表当天，使用-1代表排名记录。 - cookie: 用户自己的cookie，可选参数，用于接口不可用时使用。 ### 返回: - 直播每日榜单数据  # [English] ### Purpose: - Get live daily rank data ### Parameters: - anchor_id: Anchor id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different anchor ids of different live rooms. - room_id: Live room id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different room ids of different live rooms. - rank_type: Rank type     - `0`: Hourly Rank     - `1`: Weekly Rank     - `5`: Rookie Star Rank     - `6`: Sale Rank     - `8`: Daily Rank     - `10`: Game Rank     - `11`: Daily Game Rank     - `12`: Hall of Fame Rank     - `13`: Champion Tournament Rank     - `14`: Daily Rookie Star Rank     - `15`: Popular Live Stream Rank     - `16`: D5 Level Rank     - `20`: PUBG Rank     - `21`: MLBB Rank     - `22`: Free Fire Rank     - `1001`: League Campaign Rank     - `-1`: Unknown Rank  - region_type: Region type, use the default value, the specific meaning is unknown. - gap_interval: Time interval, use the default value to represent the current day, use -1 to represent the ranking record. - cookie: User\'s own cookie, optional parameter, used when the interface is not available. ### Return: - Live daily rank data
         * @summary 获取直播每日榜单数据/Get live daily rank data
         * @param {string} [anchorId] 主播id/Anchor id
         * @param {string} [roomId] 直播间id/Live room id
         * @param {number} [rankType] 榜单类型/Rank type
         * @param {number} [regionType] 地区类型/Region type
         * @param {number} [gapInterval] 时间间隔/Time interval
         * @param {string} [cookie] 用户自己的cookie/User\&#39;s own cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_12: async (anchorId?: string, roomId?: string, rankType?: number, regionType?: number, gapInterval?: number, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_live_daily_rank`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (anchorId !== undefined) {
                localVarQueryParameter['anchor_id'] = anchorId;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }

            if (rankType !== undefined) {
                localVarQueryParameter['rank_type'] = rankType;
            }

            if (regionType !== undefined) {
                localVarQueryParameter['region_type'] = regionType;
            }

            if (gapInterval !== undefined) {
                localVarQueryParameter['gap_interval'] = gapInterval;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"
         * @summary 获取直播间排行榜数据/Get live room ranking list
         * @param {string} roomId 直播间id/Live room id
         * @param {string} anchorId 主播id/Anchor id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet: async (roomId: string, anchorId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet.');
            }
            // verify required parameter 'anchorId' is not null or undefined
            if (anchorId === null || anchorId === undefined) {
                throw new RequiredError('anchorId','Required parameter anchorId was null or undefined when calling fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_live_ranking_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }

            if (anchorId !== undefined) {
                localVarQueryParameter['anchor_id'] = anchorId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"
         * @summary 获取直播间排行榜数据/Get live room ranking list
         * @param {string} roomId 直播间id/Live room id
         * @param {string} anchorId 主播id/Anchor id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_13: async (roomId: string, anchorId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_13.');
            }
            // verify required parameter 'anchorId' is not null or undefined
            if (anchorId === null || anchorId === undefined) {
                throw new RequiredError('anchorId','Required parameter anchorId was null or undefined when calling fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_13.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_live_ranking_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }

            if (anchorId !== undefined) {
                localVarQueryParameter['anchor_id'] = anchorId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定直播间的数据 ### 参数: - room_id: 直播间id ### 返回: - 直播间数据  # [English] ### Purpose: - Get data of specified live room ### Parameters: - room_id: Live room id ### Return: - Live room data  # [示例/Example] room_id = \"7385461256746060575\"
         * @summary 获取指定直播间的数据/Get data of specified live room
         * @param {string} roomId 直播间id/Live room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet: async (roomId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_live_room_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定直播间的数据 ### 参数: - room_id: 直播间id ### 返回: - 直播间数据  # [English] ### Purpose: - Get data of specified live room ### Parameters: - room_id: Live room id ### Return: - Live room data  # [示例/Example] room_id = \"7385461256746060575\"
         * @summary 获取指定直播间的数据/Get data of specified live room
         * @param {string} roomId 直播间id/Live room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_14: async (roomId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_14.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_live_room_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播间商品列表数据 ### 参数: - room_id: 直播间id，必填参数。 - author_id: 主播id，必填参数。 - page_size: 每页数量，可选参数，默认为15。 - offset: 翻页游标，可选参数，默认为0，每次翻页增加15。 - region: 地区，可选参数，默认为`US`，如果使用其他地区，如：`VN`，请自行携带Cookie，否则无法获取数据。 - cookie: 用户自己的cookie，可选参数，用于爬取除`US`以外的地区数据。 ### 参数获取: - 第一步：使用接口`f\"{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\"`接口获取直播间id（room_id）。 - 第二步：使用接口`f\"{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\"`接口获取直播间信息。 - 第三步：使用第二步返回的JSON数据中使用JSONPATH获取`$.data.data.owner.id_str`字段的值作为主播id（author_id）。 ### 返回: - 直播间商品列表数据  # [English] ### Purpose: - Get live room product list data ### Parameters: - room_id: Live room id, required parameter. - author_id: Anchor id, required parameter. - page_size: Number per page, optional parameter, default is 15. - offset: Page turning cursor, optional parameter, default is 0, increasing by 15 each time. - region: Region, optional parameter, default is `US`, if you use other regions, such as: `VN`, please bring your own Cookie, otherwise you will not be able to get data. - cookie: User\'s own cookie, optional parameter, used to crawl data from regions other than `US`. ### Get Parameters: - Step 1: Use the interface `f\"{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\"` to get the live room id (room_id). - Step 2: Use the interface `f\"{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\"` to get the live room information. - Step 3: Use the JSONPATH in the JSON data returned in the second step to get the value of the field `$.data.data.owner.id_str` as the anchor id (author_id). ### Return: - Live room product list data  # [示例/Example] room_id = \"7420741353250507562\" author_id = \"7408859677050274859\" page_size = 15 offset = 0
         * @summary 获取直播间商品列表数据/Get live room product list data
         * @param {string} roomId 直播间id/Live room id
         * @param {string} authorId 主播id/Anchor id
         * @param {number} [pageSize] 数量/Number
         * @param {number} [offset] 数量/Number
         * @param {string} [region] 地区/Region
         * @param {string} [cookie] 用户自己的cookie/User\&#39;s own cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet: async (roomId: string, authorId: string, pageSize?: number, offset?: number, region?: string, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new RequiredError('authorId','Required parameter authorId was null or undefined when calling fetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_live_room_product_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }

            if (authorId !== undefined) {
                localVarQueryParameter['author_id'] = authorId;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播间商品列表数据 ### 参数: - room_id: 直播间id，必填参数。 - author_id: 主播id，必填参数。 - page_size: 每页数量，可选参数，默认为15。 - offset: 翻页游标，可选参数，默认为0，每次翻页增加15。 - region: 地区，可选参数，默认为`US`，如果使用其他地区，如：`VN`，请自行携带Cookie，否则无法获取数据。 - cookie: 用户自己的cookie，可选参数，用于爬取除`US`以外的地区数据。 ### 参数获取: - 第一步：使用接口`f\"{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\"`接口获取直播间id（room_id）。 - 第二步：使用接口`f\"{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\"`接口获取直播间信息。 - 第三步：使用第二步返回的JSON数据中使用JSONPATH获取`$.data.data.owner.id_str`字段的值作为主播id（author_id）。 ### 返回: - 直播间商品列表数据  # [English] ### Purpose: - Get live room product list data ### Parameters: - room_id: Live room id, required parameter. - author_id: Anchor id, required parameter. - page_size: Number per page, optional parameter, default is 15. - offset: Page turning cursor, optional parameter, default is 0, increasing by 15 each time. - region: Region, optional parameter, default is `US`, if you use other regions, such as: `VN`, please bring your own Cookie, otherwise you will not be able to get data. - cookie: User\'s own cookie, optional parameter, used to crawl data from regions other than `US`. ### Get Parameters: - Step 1: Use the interface `f\"{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\"` to get the live room id (room_id). - Step 2: Use the interface `f\"{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\"` to get the live room information. - Step 3: Use the JSONPATH in the JSON data returned in the second step to get the value of the field `$.data.data.owner.id_str` as the anchor id (author_id). ### Return: - Live room product list data  # [示例/Example] room_id = \"7420741353250507562\" author_id = \"7408859677050274859\" page_size = 15 offset = 0
         * @summary 获取直播间商品列表数据/Get live room product list data
         * @param {string} roomId 直播间id/Live room id
         * @param {string} authorId 主播id/Anchor id
         * @param {number} [pageSize] 数量/Number
         * @param {number} [offset] 数量/Number
         * @param {string} [region] 地区/Region
         * @param {string} [cookie] 用户自己的cookie/User\&#39;s own cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet_15: async (roomId: string, authorId: string, pageSize?: number, offset?: number, region?: string, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet_15.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new RequiredError('authorId','Required parameter authorId was null or undefined when calling fetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet_15.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_live_room_product_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }

            if (authorId !== undefined) {
                localVarQueryParameter['author_id'] = authorId;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (region !== undefined) {
                localVarQueryParameter['region'] = region;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果/Get live search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_live_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果/Get live search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_16: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_16.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_live_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取地点搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 地点搜索结果  # [English] ### Purpose: - Get location search results ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Location search results  # [示例/Example] keyword = \"Shanghai\" offset = 0 count = 20
         * @summary 获取地点搜索结果/Get location search results
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_location_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取地点搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 地点搜索结果  # [English] ### Purpose: - Get location search results ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Location search results  # [示例/Example] keyword = \"Shanghai\" offset = 0 count = 20
         * @summary 获取地点搜索结果/Get location search results
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_17: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_17.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_location_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",     ]
         * @summary 批量获取视频信息/Batch Get Video Information
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_multi_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",     ]
         * @summary 批量获取视频信息/Batch Get Video Information
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_18: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_multi_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",     ]
         * @summary 批量获取视频信息 V2/Batch Get Video Information V2
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_multi_video_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",     ]
         * @summary 批量获取视频信息 V2/Batch Get Video Information V2
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post_19: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_multi_video_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet: async (musicId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_music_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_20: async (musicId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_20.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_music_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_music_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_21: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_21.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_music_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet: async (musicId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_music_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_22: async (musicId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_22.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_music_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_one_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_23: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_23.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_one_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet: async (shareUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareUrl' is not null or undefined
            if (shareUrl === null || shareUrl === undefined) {
                throw new RequiredError('shareUrl','Required parameter shareUrl was null or undefined when calling fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_one_video_by_share_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareUrl !== undefined) {
                localVarQueryParameter['share_url'] = shareUrl;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_24: async (shareUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareUrl' is not null or undefined
            if (shareUrl === null || shareUrl === undefined) {
                throw new RequiredError('shareUrl','Required parameter shareUrl was null or undefined when calling fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_24.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_one_video_by_share_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareUrl !== undefined) {
                localVarQueryParameter['share_url'] = shareUrl;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7463308759842966791\"
         * @summary 获取单个作品数据 V2/Get single video data V2
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_one_video_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7463308759842966791\"
         * @summary 获取单个作品数据 V2/Get single video data V2
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get_25: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get_25.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_one_video_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商品详情数据 - 即将弃用，使用 fetch_product_detail_v2 代替 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据  # [English] ### Purpose: - Get product detail data - Will be deprecated, use fetch_product_detail_v2 instead ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data  # [示例/Example] product_id = \"1729385239712731370\"
         * @summary 获取商品详情数据（即将弃用，使用 fetch_product_detail_v2 代替）/Get product detail data (will be deprecated, use fetch_product_detail_v2 instead)
         * @param {string} productId 商品id/Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet: async (productId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_product_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (productId !== undefined) {
                localVarQueryParameter['product_id'] = productId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商品详情数据 - 即将弃用，使用 fetch_product_detail_v2 代替 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据  # [English] ### Purpose: - Get product detail data - Will be deprecated, use fetch_product_detail_v2 instead ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data  # [示例/Example] product_id = \"1729385239712731370\"
         * @summary 获取商品详情数据（即将弃用，使用 fetch_product_detail_v2 代替）/Get product detail data (will be deprecated, use fetch_product_detail_v2 instead)
         * @param {string} productId 商品id/Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_26: async (productId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_26.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_product_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (productId !== undefined) {
                localVarQueryParameter['product_id'] = productId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商品详情数据V2 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V2  # [English] ### Purpose: - Get product detail data V2 ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V2  # [示例/Example] product_id = \"1729385239712731370\"
         * @summary 获取商品详情数据V2/Get product detail data V2
         * @param {string} productId 商品id/Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get: async (productId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling fetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_product_detail_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (productId !== undefined) {
                localVarQueryParameter['product_id'] = productId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商品详情数据V2 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V2  # [English] ### Purpose: - Get product detail data V2 ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V2  # [示例/Example] product_id = \"1729385239712731370\"
         * @summary 获取商品详情数据V2/Get product detail data V2
         * @param {string} productId 商品id/Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get_27: async (productId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling fetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get_27.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_product_detail_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (productId !== undefined) {
                localVarQueryParameter['product_id'] = productId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商品详情数据V3，如果商品详情数据V2无法获取，可以尝试使用此接口。 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V3  # [English] ### Purpose: - Get product detail data V3, if the product detail data V2 cannot be obtained, you can try using this interface. ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V3  # [示例/Example] product_id = \"1729385239712731370\"
         * @summary 获取商品详情数据V3/Get product detail data V3
         * @param {string} productId 商品id/Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get: async (productId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling fetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_product_detail_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (productId !== undefined) {
                localVarQueryParameter['product_id'] = productId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商品详情数据V3，如果商品详情数据V2无法获取，可以尝试使用此接口。 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V3  # [English] ### Purpose: - Get product detail data V3, if the product detail data V2 cannot be obtained, you can try using this interface. ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V3  # [示例/Example] product_id = \"1729385239712731370\"
         * @summary 获取商品详情数据V3/Get product detail data V3
         * @param {string} productId 商品id/Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get_28: async (productId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling fetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get_28.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_product_detail_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (productId !== undefined) {
                localVarQueryParameter['product_id'] = productId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取商品ID ### 参数: - share_link: 分享链接 ### 返回: - 商品ID  # [English] ### Purpose: - Get Product ID by Share Link ### Parameters: - share_link: Share link ### Return: - Product ID  # [示例/Example] share_link = \"https://www.tiktok.com/t/ZT2A9N1kw/\"
         * @summary 通过分享链接获取商品ID/Get Product ID by Share Link
         * @param {string} shareLink 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet: async (shareLink: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareLink' is not null or undefined
            if (shareLink === null || shareLink === undefined) {
                throw new RequiredError('shareLink','Required parameter shareLink was null or undefined when calling fetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_product_id_by_share_link`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareLink !== undefined) {
                localVarQueryParameter['share_link'] = shareLink;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取商品ID ### 参数: - share_link: 分享链接 ### 返回: - 商品ID  # [English] ### Purpose: - Get Product ID by Share Link ### Parameters: - share_link: Share link ### Return: - Product ID  # [示例/Example] share_link = \"https://www.tiktok.com/t/ZT2A9N1kw/\"
         * @summary 通过分享链接获取商品ID/Get Product ID by Share Link
         * @param {string} shareLink 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet_29: async (shareLink: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareLink' is not null or undefined
            if (shareLink === null || shareLink === undefined) {
                throw new RequiredError('shareLink','Required parameter shareLink was null or undefined when calling fetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet_29.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_product_id_by_share_link`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareLink !== undefined) {
                localVarQueryParameter['share_link'] = shareLink;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商品评价数据 ### 参数: - product_id: 商品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - size: 数量 - filter_id: 筛选条件     - 0: 全部评价     - 1: 1星评价     - 2: 2星评价     - 3: 3星评价     - 4: 4星评价     - 5: 5星评价     - 102: 有图评价     - 104: 已购买的评价 - sort_type: 排序条件     - 1: 相关度     - 2: 从新到旧 ### 返回: - 商品评价数据  # [English] ### Purpose: - Get product review data ### Parameters: - product_id: Product id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - size: Count number - filter_id: Filter condition     - 0: All reviews     - 1: 1-star review     - 2: 2-star review     - 3: 3-star review     - 4: 4-star review     - 5: 5-star review     - 102: Reviews with pictures     - 104: Reviews of purchased products - sort_type: Sorting conditions     - 1: Relevance     - 2: New to old ### Return: - Product review data  # [示例/Example] product_id = \"1729448812983194615\" cursor = 0 size = 10 filter_id = 0 sort_type = 0
         * @summary 获取商品评价数据/Get product review data
         * @param {string} productId 商品id/Product id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [size] 数量/Number
         * @param {number} [filterId] 筛选条件/Filter condition
         * @param {number} [sortType] 排序条件/Sorting conditions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet: async (productId: string, cursor?: number, size?: number, filterId?: number, sortType?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_product_review`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (productId !== undefined) {
                localVarQueryParameter['product_id'] = productId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter_id'] = filterId;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商品评价数据 ### 参数: - product_id: 商品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - size: 数量 - filter_id: 筛选条件     - 0: 全部评价     - 1: 1星评价     - 2: 2星评价     - 3: 3星评价     - 4: 4星评价     - 5: 5星评价     - 102: 有图评价     - 104: 已购买的评价 - sort_type: 排序条件     - 1: 相关度     - 2: 从新到旧 ### 返回: - 商品评价数据  # [English] ### Purpose: - Get product review data ### Parameters: - product_id: Product id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - size: Count number - filter_id: Filter condition     - 0: All reviews     - 1: 1-star review     - 2: 2-star review     - 3: 3-star review     - 4: 4-star review     - 5: 5-star review     - 102: Reviews with pictures     - 104: Reviews of purchased products - sort_type: Sorting conditions     - 1: Relevance     - 2: New to old ### Return: - Product review data  # [示例/Example] product_id = \"1729448812983194615\" cursor = 0 size = 10 filter_id = 0 sort_type = 0
         * @summary 获取商品评价数据/Get product review data
         * @param {string} productId 商品id/Product id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [size] 数量/Number
         * @param {number} [filterId] 筛选条件/Filter condition
         * @param {number} [sortType] 排序条件/Sorting conditions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_30: async (productId: string, cursor?: number, size?: number, filterId?: number, sortType?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_30.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_product_review`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (productId !== undefined) {
                localVarQueryParameter['product_id'] = productId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (filterId !== undefined) {
                localVarQueryParameter['filter_id'] = filterId;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商品搜索结果 ### 参数: - keyword: 关键词 - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 - sort_type: 商品排序条件     - 1: 综合排序     - 2: 销量排序     - 3: 价格从高到低     - 4: 价格从低到高     - 5: 最新发布 - customer_review_four_star: 四星以上评价 - have_discount: 有优惠 - min_price: 最低价格 - max_price: 最高价格 ### 返回: - 商品搜索结果  # [English] ### Purpose: - Get product search results ### Parameters: - keyword: Keyword - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number - sort_type: Product sorting conditions     - 1: Comprehensive sorting     - 2: Sales volume sorting     - 3: Price high to low     - 4: Price low to high     - 5: Latest release - customer_review_four_star: Four-star or more reviews - have_discount: Having discount - min_price: Minimum price - max_price: Maximum price ### Return: - Product search results  # [示例/Example] keyword = \"Cat Toy\" cursor = 0 count = 12 sort_type = 1 customer_review_four_star = False have_discount = False min_price = \"10\" max_price = \"25\"
         * @summary 获取商品搜索结果/Get product search results
         * @param {string} keyword 关键词/Keyword
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 商品排序条件/Product sorting conditions
         * @param {boolean} [customerReviewFourStar] 四星以上评价/Four-star or more reviews
         * @param {boolean} [haveDiscount] 有优惠/Having discount
         * @param {string} [minPrice] 最低价格/Minimum price
         * @param {string} [maxPrice] 最高价格/Maximum price
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet: async (keyword: string, cursor?: number, count?: number, sortType?: number, customerReviewFourStar?: boolean, haveDiscount?: boolean, minPrice?: string, maxPrice?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_product_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (customerReviewFourStar !== undefined) {
                localVarQueryParameter['customer_review_four_star'] = customerReviewFourStar;
            }

            if (haveDiscount !== undefined) {
                localVarQueryParameter['have_discount'] = haveDiscount;
            }

            if (minPrice !== undefined) {
                localVarQueryParameter['min_price'] = minPrice;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['max_price'] = maxPrice;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商品搜索结果 ### 参数: - keyword: 关键词 - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 - sort_type: 商品排序条件     - 1: 综合排序     - 2: 销量排序     - 3: 价格从高到低     - 4: 价格从低到高     - 5: 最新发布 - customer_review_four_star: 四星以上评价 - have_discount: 有优惠 - min_price: 最低价格 - max_price: 最高价格 ### 返回: - 商品搜索结果  # [English] ### Purpose: - Get product search results ### Parameters: - keyword: Keyword - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number - sort_type: Product sorting conditions     - 1: Comprehensive sorting     - 2: Sales volume sorting     - 3: Price high to low     - 4: Price low to high     - 5: Latest release - customer_review_four_star: Four-star or more reviews - have_discount: Having discount - min_price: Minimum price - max_price: Maximum price ### Return: - Product search results  # [示例/Example] keyword = \"Cat Toy\" cursor = 0 count = 12 sort_type = 1 customer_review_four_star = False have_discount = False min_price = \"10\" max_price = \"25\"
         * @summary 获取商品搜索结果/Get product search results
         * @param {string} keyword 关键词/Keyword
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 商品排序条件/Product sorting conditions
         * @param {boolean} [customerReviewFourStar] 四星以上评价/Four-star or more reviews
         * @param {boolean} [haveDiscount] 有优惠/Having discount
         * @param {string} [minPrice] 最低价格/Minimum price
         * @param {string} [maxPrice] 最高价格/Maximum price
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_31: async (keyword: string, cursor?: number, count?: number, sortType?: number, customerReviewFourStar?: boolean, haveDiscount?: boolean, minPrice?: string, maxPrice?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_31.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_product_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (customerReviewFourStar !== undefined) {
                localVarQueryParameter['customer_review_four_star'] = customerReviewFourStar;
            }

            if (haveDiscount !== undefined) {
                localVarQueryParameter['have_discount'] = haveDiscount;
            }

            if (minPrice !== undefined) {
                localVarQueryParameter['min_price'] = minPrice;
            }

            if (maxPrice !== undefined) {
                localVarQueryParameter['max_price'] = maxPrice;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取分享二维码 ### 参数: - object_id: 对象id，当前支持个人主页接口响应中的uid作为参数。 ### 返回: - 二维码图片  # [English] ### Purpose: - Get share QR code ### Parameters: - object_id: Object id, currently supports the uid in the response of the personal homepage interface as a parameter. ### Return: - QR code image  # [示例/Example] url = \"6762244951259661318\"
         * @summary 获取分享二维码/Get share QR code
         * @param {string} objectId 对象id/Object id
         * @param {number} [schemaType] 模式类型/Schema type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet: async (objectId: string, schemaType?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError('objectId','Required parameter objectId was null or undefined when calling fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_share_qr_code`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (objectId !== undefined) {
                localVarQueryParameter['object_id'] = objectId;
            }

            if (schemaType !== undefined) {
                localVarQueryParameter['schema_type'] = schemaType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取分享二维码 ### 参数: - object_id: 对象id，当前支持个人主页接口响应中的uid作为参数。 ### 返回: - 二维码图片  # [English] ### Purpose: - Get share QR code ### Parameters: - object_id: Object id, currently supports the uid in the response of the personal homepage interface as a parameter. ### Return: - QR code image  # [示例/Example] url = \"6762244951259661318\"
         * @summary 获取分享二维码/Get share QR code
         * @param {string} objectId 对象id/Object id
         * @param {number} [schemaType] 模式类型/Schema type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_32: async (objectId: string, schemaType?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError('objectId','Required parameter objectId was null or undefined when calling fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_32.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_share_qr_code`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (objectId !== undefined) {
                localVarQueryParameter['object_id'] = objectId;
            }

            if (schemaType !== undefined) {
                localVarQueryParameter['schema_type'] = schemaType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取分享短链接 ### 参数: - url: 长链接或想要转换的链接 ### 返回: - 短链接  # [English] ### Purpose: - Get share short link ### Parameters: - url: Long link or link to convert ### Return: - Short link  # [示例/Example] url = \"https://www.tiktok.com/passport/web/logout/\"
         * @summary 获取分享短链接/Get share short link
         * @param {string} url 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_share_short_link`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取分享短链接 ### 参数: - url: 长链接或想要转换的链接 ### 返回: - 短链接  # [English] ### Purpose: - Get share short link ### Parameters: - url: Long link or link to convert ### Return: - Short link  # [示例/Example] url = \"https://www.tiktok.com/passport/web/logout/\"
         * @summary 获取分享短链接/Get share short link
         * @param {string} url 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_33: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_33.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_share_short_link`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家主页的商品数据 ### 参数: - page_id: 爬取的商家主页Page id，可以从`fetch_shop_home_page_list`这个接口获取 - seller_id: 商家id,店铺id ### 返回: - 商家主页数据  # [English] ### Purpose: - Get product data of the shop home page ### Parameters: - page_id: Page id of the crawled shop home page, which can be obtained from the interface `fetch_shop_home_page_list` - seller_id: Seller id, shop id ### Return: - Shop home page data  # [示例/Example] page_id = \"7314705727611930410\" seller_id = \"8646929864612614278\"
         * @summary 获取商家主页数据/Get shop home page data
         * @param {string} pageId 爬取的商家主页Page id/Page id of the crawled shop home page
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet: async (pageId: string, sellerId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            if (pageId === null || pageId === undefined) {
                throw new RequiredError('pageId','Required parameter pageId was null or undefined when calling fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet.');
            }
            // verify required parameter 'sellerId' is not null or undefined
            if (sellerId === null || sellerId === undefined) {
                throw new RequiredError('sellerId','Required parameter sellerId was null or undefined when calling fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_shop_home`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (pageId !== undefined) {
                localVarQueryParameter['page_id'] = pageId;
            }

            if (sellerId !== undefined) {
                localVarQueryParameter['seller_id'] = sellerId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家主页的商品数据 ### 参数: - page_id: 爬取的商家主页Page id，可以从`fetch_shop_home_page_list`这个接口获取 - seller_id: 商家id,店铺id ### 返回: - 商家主页数据  # [English] ### Purpose: - Get product data of the shop home page ### Parameters: - page_id: Page id of the crawled shop home page, which can be obtained from the interface `fetch_shop_home_page_list` - seller_id: Seller id, shop id ### Return: - Shop home page data  # [示例/Example] page_id = \"7314705727611930410\" seller_id = \"8646929864612614278\"
         * @summary 获取商家主页数据/Get shop home page data
         * @param {string} pageId 爬取的商家主页Page id/Page id of the crawled shop home page
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_34: async (pageId: string, sellerId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageId' is not null or undefined
            if (pageId === null || pageId === undefined) {
                throw new RequiredError('pageId','Required parameter pageId was null or undefined when calling fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_34.');
            }
            // verify required parameter 'sellerId' is not null or undefined
            if (sellerId === null || sellerId === undefined) {
                throw new RequiredError('sellerId','Required parameter sellerId was null or undefined when calling fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_34.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_shop_home`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (pageId !== undefined) {
                localVarQueryParameter['page_id'] = pageId;
            }

            if (sellerId !== undefined) {
                localVarQueryParameter['seller_id'] = sellerId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家主页Page列表数据, 用于商家主页展示，以及爬取商家主页的商品数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家主页Page列表数据  # [English] ### Purpose: - Get shop home page list data, used for shop home page display, and crawling shop home page product data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop home page list data  # [示例/Example] seller_id = \"8646929864612614278\"
         * @summary 获取商家主页Page列表数据/Get shop home page list data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet: async (sellerId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sellerId' is not null or undefined
            if (sellerId === null || sellerId === undefined) {
                throw new RequiredError('sellerId','Required parameter sellerId was null or undefined when calling fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_shop_home_page_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (sellerId !== undefined) {
                localVarQueryParameter['seller_id'] = sellerId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家主页Page列表数据, 用于商家主页展示，以及爬取商家主页的商品数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家主页Page列表数据  # [English] ### Purpose: - Get shop home page list data, used for shop home page display, and crawling shop home page product data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop home page list data  # [示例/Example] seller_id = \"8646929864612614278\"
         * @summary 获取商家主页Page列表数据/Get shop home page list data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_35: async (sellerId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sellerId' is not null or undefined
            if (sellerId === null || sellerId === undefined) {
                throw new RequiredError('sellerId','Required parameter sellerId was null or undefined when calling fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_35.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_shop_home_page_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (sellerId !== undefined) {
                localVarQueryParameter['seller_id'] = sellerId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取店铺ID ### 参数: - share_link: 分享链接 ### 返回: - 店铺ID  # [English] ### Purpose: - Get Shop ID by Share Link ### Parameters: - share_link: Share link ### Return: - Shop ID  # [示例/Example] share_link = \"https://vt.tiktok.com/ZT2AHoGsE/\"
         * @summary 通过分享链接获取店铺ID/Get Shop ID by Share Link
         * @param {string} shareLink 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet: async (shareLink: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareLink' is not null or undefined
            if (shareLink === null || shareLink === undefined) {
                throw new RequiredError('shareLink','Required parameter shareLink was null or undefined when calling fetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_shop_id_by_share_link`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareLink !== undefined) {
                localVarQueryParameter['share_link'] = shareLink;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取店铺ID ### 参数: - share_link: 分享链接 ### 返回: - 店铺ID  # [English] ### Purpose: - Get Shop ID by Share Link ### Parameters: - share_link: Share link ### Return: - Shop ID  # [示例/Example] share_link = \"https://vt.tiktok.com/ZT2AHoGsE/\"
         * @summary 通过分享链接获取店铺ID/Get Shop ID by Share Link
         * @param {string} shareLink 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet_36: async (shareLink: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareLink' is not null or undefined
            if (shareLink === null || shareLink === undefined) {
                throw new RequiredError('shareLink','Required parameter shareLink was null or undefined when calling fetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet_36.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_shop_id_by_share_link`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareLink !== undefined) {
                localVarQueryParameter['share_link'] = shareLink;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家信息数据 ### 参数: - shop_id: 商家id,店铺id ### 返回: - 商家信息数据  # [English] ### Purpose: - Get shop information data ### Parameters: - shop_id: Seller id, shop id ### Return: - Shop information data  # [示例/Example] shop_id = \"8646942781241463007\"
         * @summary 获取商家信息数据/Get shop information data
         * @param {string} shopId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet: async (shopId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            if (shopId === null || shopId === undefined) {
                throw new RequiredError('shopId','Required parameter shopId was null or undefined when calling fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_shop_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shopId !== undefined) {
                localVarQueryParameter['shop_id'] = shopId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家信息数据 ### 参数: - shop_id: 商家id,店铺id ### 返回: - 商家信息数据  # [English] ### Purpose: - Get shop information data ### Parameters: - shop_id: Seller id, shop id ### Return: - Shop information data  # [示例/Example] shop_id = \"8646942781241463007\"
         * @summary 获取商家信息数据/Get shop information data
         * @param {string} shopId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_37: async (shopId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shopId' is not null or undefined
            if (shopId === null || shopId === undefined) {
                throw new RequiredError('shopId','Required parameter shopId was null or undefined when calling fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_37.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_shop_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shopId !== undefined) {
                localVarQueryParameter['shop_id'] = shopId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家产品分类数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家产品分类数据  # [English] ### Purpose: - Get shop product category data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop product category data  # [示例/Example] seller_id = \"7495294980909468039\"
         * @summary 获取商家产品分类数据/Get shop product category data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet: async (sellerId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sellerId' is not null or undefined
            if (sellerId === null || sellerId === undefined) {
                throw new RequiredError('sellerId','Required parameter sellerId was null or undefined when calling fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_shop_product_category`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (sellerId !== undefined) {
                localVarQueryParameter['seller_id'] = sellerId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家产品分类数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家产品分类数据  # [English] ### Purpose: - Get shop product category data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop product category data  # [示例/Example] seller_id = \"7495294980909468039\"
         * @summary 获取商家产品分类数据/Get shop product category data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_38: async (sellerId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sellerId' is not null or undefined
            if (sellerId === null || sellerId === undefined) {
                throw new RequiredError('sellerId','Required parameter sellerId was null or undefined when calling fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_38.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_shop_product_category`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (sellerId !== undefined) {
                localVarQueryParameter['seller_id'] = sellerId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_params = \"\" page_size = 10 sort_field = 1 sort_order = 0
         * @summary 获取商家商品列表数据/Get shop product list data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {string} [scrollParams] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
         * @param {number} [pageSize] 每页数量/Number per page
         * @param {number} [sortField] 排序字段/Sorting field
         * @param {number} [sortOrder] 排序方式/Sorting method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet: async (sellerId: string, scrollParams?: string, pageSize?: number, sortField?: number, sortOrder?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sellerId' is not null or undefined
            if (sellerId === null || sellerId === undefined) {
                throw new RequiredError('sellerId','Required parameter sellerId was null or undefined when calling fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_shop_product_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (sellerId !== undefined) {
                localVarQueryParameter['seller_id'] = sellerId;
            }

            if (scrollParams !== undefined) {
                localVarQueryParameter['scroll_params'] = scrollParams;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sort_field'] = sortField;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_params = \"\" page_size = 10 sort_field = 1 sort_order = 0
         * @summary 获取商家商品列表数据/Get shop product list data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {string} [scrollParams] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
         * @param {number} [pageSize] 每页数量/Number per page
         * @param {number} [sortField] 排序字段/Sorting field
         * @param {number} [sortOrder] 排序方式/Sorting method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_39: async (sellerId: string, scrollParams?: string, pageSize?: number, sortField?: number, sortOrder?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sellerId' is not null or undefined
            if (sellerId === null || sellerId === undefined) {
                throw new RequiredError('sellerId','Required parameter sellerId was null or undefined when calling fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_39.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_shop_product_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (sellerId !== undefined) {
                localVarQueryParameter['seller_id'] = sellerId;
            }

            if (scrollParams !== undefined) {
                localVarQueryParameter['scroll_params'] = scrollParams;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sort_field'] = sortField;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_params = \"\" page_size = 10 sort_field = 1 sort_order = 0
         * @summary 获取商家商品列表数据 V2/Get shop product list data V2
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {string} [scrollParams] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
         * @param {number} [pageSize] 每页数量/Number per page
         * @param {number} [sortField] 排序字段/Sorting field
         * @param {number} [sortOrder] 排序方式/Sorting method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get: async (sellerId: string, scrollParams?: string, pageSize?: number, sortField?: number, sortOrder?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sellerId' is not null or undefined
            if (sellerId === null || sellerId === undefined) {
                throw new RequiredError('sellerId','Required parameter sellerId was null or undefined when calling fetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_shop_product_list_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (sellerId !== undefined) {
                localVarQueryParameter['seller_id'] = sellerId;
            }

            if (scrollParams !== undefined) {
                localVarQueryParameter['scroll_params'] = scrollParams;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sort_field'] = sortField;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_params = \"\" page_size = 10 sort_field = 1 sort_order = 0
         * @summary 获取商家商品列表数据 V2/Get shop product list data V2
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {string} [scrollParams] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
         * @param {number} [pageSize] 每页数量/Number per page
         * @param {number} [sortField] 排序字段/Sorting field
         * @param {number} [sortOrder] 排序方式/Sorting method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get_40: async (sellerId: string, scrollParams?: string, pageSize?: number, sortField?: number, sortOrder?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sellerId' is not null or undefined
            if (sellerId === null || sellerId === undefined) {
                throw new RequiredError('sellerId','Required parameter sellerId was null or undefined when calling fetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get_40.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_shop_product_list_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (sellerId !== undefined) {
                localVarQueryParameter['seller_id'] = sellerId;
            }

            if (scrollParams !== undefined) {
                localVarQueryParameter['scroll_params'] = scrollParams;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sort_field'] = sortField;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sort_order'] = sortOrder;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家商品推荐数据 ### 参数: - seller_id: 商家id,店铺id - scroll_param: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 ### 返回: - 商家商品推荐数据  # [English] ### Purpose: - Get shop product recommend data ### Parameters: - seller_id: Seller id, shop id - scroll_param: Scroll parameter, used to load more product data - page_size: Number per page ### Return: - Shop product recommend data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_param = \"\" page_size = 10
         * @summary 获取商家商品推荐数据/Get shop product recommend data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {string} [scrollParam] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
         * @param {number} [pageSize] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet: async (sellerId: string, scrollParam?: string, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sellerId' is not null or undefined
            if (sellerId === null || sellerId === undefined) {
                throw new RequiredError('sellerId','Required parameter sellerId was null or undefined when calling fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_shop_product_recommend`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (sellerId !== undefined) {
                localVarQueryParameter['seller_id'] = sellerId;
            }

            if (scrollParam !== undefined) {
                localVarQueryParameter['scroll_param'] = scrollParam;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家商品推荐数据 ### 参数: - seller_id: 商家id,店铺id - scroll_param: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 ### 返回: - 商家商品推荐数据  # [English] ### Purpose: - Get shop product recommend data ### Parameters: - seller_id: Seller id, shop id - scroll_param: Scroll parameter, used to load more product data - page_size: Number per page ### Return: - Shop product recommend data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_param = \"\" page_size = 10
         * @summary 获取商家商品推荐数据/Get shop product recommend data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {string} [scrollParam] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
         * @param {number} [pageSize] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_41: async (sellerId: string, scrollParam?: string, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sellerId' is not null or undefined
            if (sellerId === null || sellerId === undefined) {
                throw new RequiredError('sellerId','Required parameter sellerId was null or undefined when calling fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_41.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_shop_product_recommend`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (sellerId !== undefined) {
                localVarQueryParameter['seller_id'] = sellerId;
            }

            if (scrollParam !== undefined) {
                localVarQueryParameter['scroll_param'] = scrollParam;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的粉丝列表数据/Get follower list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet: async (secUserId: string, count?: number, minTime?: number, pageToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_user_follower_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (minTime !== undefined) {
                localVarQueryParameter['min_time'] = minTime;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的粉丝列表数据/Get follower list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_42: async (secUserId: string, count?: number, minTime?: number, pageToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_42.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_user_follower_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (minTime !== undefined) {
                localVarQueryParameter['min_time'] = minTime;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的关注列表数据/Get following list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet: async (secUserId: string, count?: number, minTime?: number, pageToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_user_following_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (minTime !== undefined) {
                localVarQueryParameter['min_time'] = minTime;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的关注列表数据/Get following list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_43: async (secUserId: string, count?: number, minTime?: number, pageToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_43.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_user_following_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (minTime !== undefined) {
                localVarQueryParameter['min_time'] = minTime;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA-RkTGCGXLuLKRM5Xcuuwm7Mclg51I2ECO1RqOA7mJHuXFz99nztdi077Z2XmYHZV\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet: async (secUserId: string, maxCursor?: number, counts?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_user_like_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (counts !== undefined) {
                localVarQueryParameter['counts'] = counts;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA-RkTGCGXLuLKRM5Xcuuwm7Mclg51I2ECO1RqOA7mJHuXFz99nztdi077Z2XmYHZV\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_44: async (secUserId: string, maxCursor?: number, counts?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_44.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_user_like_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (counts !== undefined) {
                localVarQueryParameter['counts'] = counts;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户音乐列表数据 ### 参数: - sec_uid: 用户sec_uid - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 用户音乐列表数据  # [English] ### Purpose: - Get user music list data ### Parameters: - sec_uid: User sec_uid - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number  # [示例/Example] sec_uid = \"MS4wLjABAAAAqB08cUbXaDWqbD6MCga2RbGTuhfO2EsHayBYx08NDrN7IE3jQuRDNNN6YwyfH6_6\" cursor = 0 count = 10
         * @summary 获取用户音乐列表数据/Get user music list data
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet: async (secUid: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_user_music_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户音乐列表数据 ### 参数: - sec_uid: 用户sec_uid - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 用户音乐列表数据  # [English] ### Purpose: - Get user music list data ### Parameters: - sec_uid: User sec_uid - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number  # [示例/Example] sec_uid = \"MS4wLjABAAAAqB08cUbXaDWqbD6MCga2RbGTuhfO2EsHayBYx08NDrN7IE3jQuRDNNN6YwyfH6_6\" cursor = 0 count = 10
         * @summary 获取用户音乐列表数据/Get user music list data
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_45: async (secUid: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_45.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_user_music_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户作品数据，如果sec_user_id为空，则使用unique_id获取用户作品数据。 - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量，建议保持默认值20。 - sort_type: 排序类型，0-最新，1-热门 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户作品数据，unique_id也是用户的用户名。 - 关于用户ID的参数，优先级为sec_user_id > unique_id，优先级越高速度越快，并且建议只使用sec_user_id获取用户数据。 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id, use sec_user_id to get user video data first, if sec_user_id is empty, use unique_id to get user video data. - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number - sort_type: Sort type, 0-Latest, 1-Hot - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user video data, unique_id is also the user\'s username. - About the parameters of user ID, the priority is sec_user_id > unique_id, the higher the priority, the faster the speed, and it is recommended to use only sec_user_id to get user data. ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20 sort_type = 0 unique_id = \"tiktok\"
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [uniqueId] 用户unique_id/User unique_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [sortType] 排序类型/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet: async (secUserId?: string, uniqueId?: string, maxCursor?: number, count?: number, sortType?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_user_post_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (uniqueId !== undefined) {
                localVarQueryParameter['unique_id'] = uniqueId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户作品数据，如果sec_user_id为空，则使用unique_id获取用户作品数据。 - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量，建议保持默认值20。 - sort_type: 排序类型，0-最新，1-热门 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户作品数据，unique_id也是用户的用户名。 - 关于用户ID的参数，优先级为sec_user_id > unique_id，优先级越高速度越快，并且建议只使用sec_user_id获取用户数据。 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id, use sec_user_id to get user video data first, if sec_user_id is empty, use unique_id to get user video data. - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number - sort_type: Sort type, 0-Latest, 1-Hot - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user video data, unique_id is also the user\'s username. - About the parameters of user ID, the priority is sec_user_id > unique_id, the higher the priority, the faster the speed, and it is recommended to use only sec_user_id to get user data. ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20 sort_type = 0 unique_id = \"tiktok\"
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [uniqueId] 用户unique_id/User unique_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [sortType] 排序类型/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_46: async (secUserId?: string, uniqueId?: string, maxCursor?: number, count?: number, sortType?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_user_post_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (uniqueId !== undefined) {
                localVarQueryParameter['unique_id'] = uniqueId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户转发的作品数据 ### 参数: - user_id: 用户id，可以通过 handler_user_profile 端点获取，响应中的关键字为uid。 - offset: 偏移量 - count: 数量 ### 返回: - 用户转发作品数据  # [English] ### Purpose: - Get user repost video data ### Parameters: - user_id: User id, which can be obtained through the handler_user_profile endpoint, with the keyword uid in the response. - offset: Offset - count: Number ### Return: - User repost video data  # [示例/Example] user_id = 107955 offset = 0 count = 21
         * @summary 获取用户转发的作品数据/Get user repost video data
         * @param {number} userId 用户id/User id
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet: async (userId: number, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_user_repost_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户转发的作品数据 ### 参数: - user_id: 用户id，可以通过 handler_user_profile 端点获取，响应中的关键字为uid。 - offset: 偏移量 - count: 数量 ### 返回: - 用户转发作品数据  # [English] ### Purpose: - Get user repost video data ### Parameters: - user_id: User id, which can be obtained through the handler_user_profile endpoint, with the keyword uid in the response. - offset: Offset - count: Number ### Return: - User repost video data  # [示例/Example] user_id = 107955 offset = 0 count = 21
         * @summary 获取用户转发的作品数据/Get user repost video data
         * @param {number} userId 用户id/User id
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_47: async (userId: number, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_47.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_user_repost_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"
         * @summary 获取指定关键词的用户搜索结果/Get user search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [userSearchFollowerCount] 根据粉丝数排序/Sort by number of followers
         * @param {string} [userSearchProfileType] 根据账号类型排序/Sort by account type
         * @param {string} [userSearchOtherPref] 根据其他偏好排序/Sort by other preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet: async (keyword: string, offset?: number, count?: number, userSearchFollowerCount?: string, userSearchProfileType?: string, userSearchOtherPref?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_user_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (userSearchFollowerCount !== undefined) {
                localVarQueryParameter['user_search_follower_count'] = userSearchFollowerCount;
            }

            if (userSearchProfileType !== undefined) {
                localVarQueryParameter['user_search_profile_type'] = userSearchProfileType;
            }

            if (userSearchOtherPref !== undefined) {
                localVarQueryParameter['user_search_other_pref'] = userSearchOtherPref;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"
         * @summary 获取指定关键词的用户搜索结果/Get user search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [userSearchFollowerCount] 根据粉丝数排序/Sort by number of followers
         * @param {string} [userSearchProfileType] 根据账号类型排序/Sort by account type
         * @param {string} [userSearchOtherPref] 根据其他偏好排序/Sort by other preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_48: async (keyword: string, offset?: number, count?: number, userSearchFollowerCount?: string, userSearchProfileType?: string, userSearchOtherPref?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_48.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_user_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (userSearchFollowerCount !== undefined) {
                localVarQueryParameter['user_search_follower_count'] = userSearchFollowerCount;
            }

            if (userSearchProfileType !== undefined) {
                localVarQueryParameter['user_search_profile_type'] = userSearchProfileType;
            }

            if (userSearchOtherPref !== undefined) {
                localVarQueryParameter['user_search_other_pref'] = userSearchOtherPref;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet: async (awemeId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_video_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_49: async (awemeId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_49.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_video_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet: async (itemId: string, commentId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_video_comment_replies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_50: async (itemId: string, commentId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_50.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_50.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_video_comment_replies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet: async (keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_video_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_51: async (keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_51.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/fetch_video_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户信息。 - user_id: 用户uid，可选参数，纯数字，如果使用请保持sec_user_id以及unique_id为空。 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户信息，unique_id也是用户的用户名，如果使用请保持sec_user_id以及user_id为空。 - 以上参数必须至少填写一个，优先级为sec_user_id > user_id > unique_id，优先级越高速度越快。 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id - user_id: User uid, optional parameter, pure number, if used, please keep sec_user_id and unique_id empty. - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user information, unique_id is also the user\'s username, if used, please keep sec_user_id and user_id empty. - At least one of the above parameters must be filled in, the priority is sec_user_id > user_id > unique_id, the higher the priority, the faster the speed. ### Return: - User information  # [示例/Example] user_id = \"107955\" sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" unique_id = \"tiktok\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} [userId] 用户uid （可选，纯数字）/User uid (optional, pure number)
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [uniqueId] 用户unique_id （用户名）/User unique_id (username)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet: async (userId?: string, secUserId?: string, uniqueId?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v3/handler_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (uniqueId !== undefined) {
                localVarQueryParameter['unique_id'] = uniqueId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户信息。 - user_id: 用户uid，可选参数，纯数字，如果使用请保持sec_user_id以及unique_id为空。 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户信息，unique_id也是用户的用户名，如果使用请保持sec_user_id以及user_id为空。 - 以上参数必须至少填写一个，优先级为sec_user_id > user_id > unique_id，优先级越高速度越快。 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id - user_id: User uid, optional parameter, pure number, if used, please keep sec_user_id and unique_id empty. - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user information, unique_id is also the user\'s username, if used, please keep sec_user_id and user_id empty. - At least one of the above parameters must be filled in, the priority is sec_user_id > user_id > unique_id, the higher the priority, the faster the speed. ### Return: - User information  # [示例/Example] user_id = \"107955\" sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" unique_id = \"tiktok\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} [userId] 用户uid （可选，纯数字）/User uid (optional, pure number)
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [uniqueId] 用户unique_id （用户名）/User unique_id (username)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_52: async (userId?: string, secUserId?: string, uniqueId?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v3/handler_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (uniqueId !== undefined) {
                localVarQueryParameter['unique_id'] = uniqueId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] keyword = \"Evil0ctal\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果/Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result
         * @param {string} keyword 关键词/Keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet: async (keyword: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling openTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/open_tiktok_app_to_keyword_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] keyword = \"Evil0ctal\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果/Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result
         * @param {string} keyword 关键词/Keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet_53: async (keyword: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling openTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet_53.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/open_tiktok_app_to_keyword_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and send private messages to specified users  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid = \"7059867056504407087\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信/Generate TikTok share link, call TikTok APP, and send private messages to specified users
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling openTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/open_tiktok_app_to_send_private_message`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and send private messages to specified users  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid = \"7059867056504407087\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信/Generate TikTok share link, call TikTok APP, and send private messages to specified users
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet_54: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling openTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet_54.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/open_tiktok_app_to_send_private_message`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified user profile  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid = \"7059867056504407087\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页/Generate TikTok share link, call TikTok APP, and jump to the specified user profile
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling openTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/open_tiktok_app_to_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified user profile  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid = \"7059867056504407087\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页/Generate TikTok share link, call TikTok APP, and jump to the specified user profile
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet_55: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling openTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet_55.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/open_tiktok_app_to_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified video  ### Parameters: - aweme_id: Video id - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] aweme_id = \"7440436579409153311\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页/Generate TikTok share link, call TikTok APP, and jump to the specified video details page
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling openTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/open_tiktok_app_to_video_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified video  ### Parameters: - aweme_id: Video id - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] aweme_id = \"7440436579409153311\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页/Generate TikTok share link, call TikTok APP, and jump to the specified video details page
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet_56: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling openTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet_56.');
            }
            const localVarPath = `/api/v1/tiktok/app/v3/open_tiktok_app_to_video_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - TikTok APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，不要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device for TikTok APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, without http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy = \"username:password@ip:port\"  # [响应/Response] ```json {    \"code\":200,    \"router\":\"/api/v1/tiktok/app/v3/register_device\",    \"params\":{       \"proxy\":\"username:password@ip:port\"    },    \"data\":{       \"cookie\":\"install_id=7417331203928426283; store-country-code=us; store-country-code-src=did; store-idc=useast5; ttreq=1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\",       \"id\":\"eyJhYyI6ICJ3aWZpIiwgImNoYW5uZWwiOiAiZ29vZ2xlcGxheSIsICJhaWQiOiAiMTIzMyIsICJhcHBfbmFtZSI6ICJtdXNpY2FsX2x5IiwgInZlcnNpb25fY29kZSI6ICIyNjA2MDIiLCAidmVyc2lvbl9uYW1lIjogIjI2LjYuMiIsICJkZXZpY2VfcGxhdGZvcm0iOiAiYW5kcm9pZCIsICJhYl92ZXJzaW9uIjogIjI2LjYuMiIsICJzc21peCI6ICJhIiwgImRldmljZV90eXBlIjogIlBPVC1MWDQ2IiwgImRldmljZV9icmFuZCI6ICJIVUFXRUkiLCAiZGV2aWNlX21vZGVsIjogIlBPVC1MWDQ2IiwgImxhbmd1YWdlIjogImVuIiwgIm9zX2FwaSI6ICIyOSIsICJvc192ZXJzaW9uIjogIjEwIiwgIm1hbmlmZXN0X3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgInJlc29sdXRpb24iOiAiMTA4MCoyMzQwIiwgImRwaSI6ICI0ODAiLCAidXBkYXRlX3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgImFwcF9za2luIjogIndoaXRlIiwgImFwcF90eXBlIjogIm5vcm1hbCIsICJyZXNpZGVuY2UiOiAiVVMiLCAic3lzX3JlZ2lvbiI6ICJVUyIsICJwYXNzLXJvdXRlIjogIjEiLCAibWNjX21uYyI6ICIzMTAyNjAiLCAicGFzcy1yZWdpb24iOiAiMSIsICJ0aW1lem9uZV9uYW1lIjogIkFtZXJpY2ElMkZOZXdfWW9yayIsICJjYXJyaWVyX3JlZ2lvbl92MiI6ICIzMTAiLCAiY3B1X3N1cHBvcnQ2NCI6ICJ0cnVlIiwgImhvc3RfYWJpIjogImFybTY0LXY4YSIsICJhcHBfbGFuZ3VhZ2UiOiAiZW4iLCAiY2Fycmllcl9yZWdpb24iOiAiVVMiLCAiYWMyIjogIndpZmkiLCAidW9vIjogIjEiLCAib3BfcmVnaW9uIjogIlVTIiwgInRpbWV6b25lX29mZnNldCI6IC0xNDQwMCwgImJ1aWxkX251bWJlciI6ICIyNi42LjIiLCAibG9jYWxlIjogImVuIiwgInJlZ2lvbiI6ICJVUyIsICJvcGVudWRpZCI6ICI0ZTM5NzdlNmJhNWNhZDc0IiwgImNkaWQiOiAiYjFkOTA2YzMtOTYxMy00MWM1LTk4ZjgtZDZhYWJjOTdiMTExIiwgImRldmljZV9pZCI6ICI3NDE3MzMwOTk5MDIzNTAyODkwIiwgImlpZCI6ICI3NDE3MzMxMjAzOTI4NDI2MjgzIiwgInVzZXJfYWdlbnQiOiAiY29tLnpoaWxpYW9hcHAubXVzaWNhbGx5LzIwMjI2MDYwMjAgKExpbnV4OyBVOyBBbmRyb2lkIDEwLjAuMDsgZW47IEhVQVdFSSBQT1QtTFg0NjsgQnVpbGQvT1BSNi4xNzA2MjMuMDE3O3R0LW9rLzMuMTIuMTMuMSkiLCAiY29va2llIjogImluc3RhbGxfaWQ9NzQxNzMzMTIwMzkyODQyNjI4Mzsgc3RvcmUtY291bnRyeS1jb2RlPXVzOyBzdG9yZS1jb3VudHJ5LWNvZGUtc3JjPWRpZDsgc3RvcmUtaWRjPXVzZWFzdDU7IHR0cmVxPTEkODViMWY1YjBiNDBhZWIwZmY3NjU5OGE2YTk0ZmNiMDcwNGIxMGQ3NCIsICJwcm94eSI6ICJodHRwOi8vMTU0LjIwMi4xMDcuMjAyOjMxMjgifQ==\",       \"tiktok_info\":{          \"cdid\":\"b1d906c3-9613-41c5-98f8-d6aabc97b111\",          \"cookie\":\"install_id=7417331203928426283; store-country-code=us; store-country-code-src=did; store-idc=useast5; ttreq=1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\",          \"device_brand\":\"HUAWEI\",          \"device_type\":\"POT-LX46\",          \"did\":\"7417330999023502890\",          \"iid\":\"7417331203928426283\",          \"mcc_mnc\":\"310260\",          \"openudid\":\"4e3977e6ba5cad74\",          \"os_api\":\"29\",          \"os_version\":\"10\",          \"user_agent\":\"okhttp/3.10.0.1\",          \"version_code\":\"260602\",          \"version_name\":\"26.6.2\"       }    } } ```
         * @summary 注册设备信息/Register device information
         * @param {string} [proxy] 代理/Proxy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDeviceApiV1TiktokAppV3RegisterDeviceGet: async (proxy?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v3/register_device`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (proxy !== undefined) {
                localVarQueryParameter['proxy'] = proxy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - TikTok APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，不要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device for TikTok APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, without http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy = \"username:password@ip:port\"  # [响应/Response] ```json {    \"code\":200,    \"router\":\"/api/v1/tiktok/app/v3/register_device\",    \"params\":{       \"proxy\":\"username:password@ip:port\"    },    \"data\":{       \"cookie\":\"install_id=7417331203928426283; store-country-code=us; store-country-code-src=did; store-idc=useast5; ttreq=1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\",       \"id\":\"eyJhYyI6ICJ3aWZpIiwgImNoYW5uZWwiOiAiZ29vZ2xlcGxheSIsICJhaWQiOiAiMTIzMyIsICJhcHBfbmFtZSI6ICJtdXNpY2FsX2x5IiwgInZlcnNpb25fY29kZSI6ICIyNjA2MDIiLCAidmVyc2lvbl9uYW1lIjogIjI2LjYuMiIsICJkZXZpY2VfcGxhdGZvcm0iOiAiYW5kcm9pZCIsICJhYl92ZXJzaW9uIjogIjI2LjYuMiIsICJzc21peCI6ICJhIiwgImRldmljZV90eXBlIjogIlBPVC1MWDQ2IiwgImRldmljZV9icmFuZCI6ICJIVUFXRUkiLCAiZGV2aWNlX21vZGVsIjogIlBPVC1MWDQ2IiwgImxhbmd1YWdlIjogImVuIiwgIm9zX2FwaSI6ICIyOSIsICJvc192ZXJzaW9uIjogIjEwIiwgIm1hbmlmZXN0X3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgInJlc29sdXRpb24iOiAiMTA4MCoyMzQwIiwgImRwaSI6ICI0ODAiLCAidXBkYXRlX3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgImFwcF9za2luIjogIndoaXRlIiwgImFwcF90eXBlIjogIm5vcm1hbCIsICJyZXNpZGVuY2UiOiAiVVMiLCAic3lzX3JlZ2lvbiI6ICJVUyIsICJwYXNzLXJvdXRlIjogIjEiLCAibWNjX21uYyI6ICIzMTAyNjAiLCAicGFzcy1yZWdpb24iOiAiMSIsICJ0aW1lem9uZV9uYW1lIjogIkFtZXJpY2ElMkZOZXdfWW9yayIsICJjYXJyaWVyX3JlZ2lvbl92MiI6ICIzMTAiLCAiY3B1X3N1cHBvcnQ2NCI6ICJ0cnVlIiwgImhvc3RfYWJpIjogImFybTY0LXY4YSIsICJhcHBfbGFuZ3VhZ2UiOiAiZW4iLCAiY2Fycmllcl9yZWdpb24iOiAiVVMiLCAiYWMyIjogIndpZmkiLCAidW9vIjogIjEiLCAib3BfcmVnaW9uIjogIlVTIiwgInRpbWV6b25lX29mZnNldCI6IC0xNDQwMCwgImJ1aWxkX251bWJlciI6ICIyNi42LjIiLCAibG9jYWxlIjogImVuIiwgInJlZ2lvbiI6ICJVUyIsICJvcGVudWRpZCI6ICI0ZTM5NzdlNmJhNWNhZDc0IiwgImNkaWQiOiAiYjFkOTA2YzMtOTYxMy00MWM1LTk4ZjgtZDZhYWJjOTdiMTExIiwgImRldmljZV9pZCI6ICI3NDE3MzMwOTk5MDIzNTAyODkwIiwgImlpZCI6ICI3NDE3MzMxMjAzOTI4NDI2MjgzIiwgInVzZXJfYWdlbnQiOiAiY29tLnpoaWxpYW9hcHAubXVzaWNhbGx5LzIwMjI2MDYwMjAgKExpbnV4OyBVOyBBbmRyb2lkIDEwLjAuMDsgZW47IEhVQVdFSSBQT1QtTFg0NjsgQnVpbGQvT1BSNi4xNzA2MjMuMDE3O3R0LW9rLzMuMTIuMTMuMSkiLCAiY29va2llIjogImluc3RhbGxfaWQ9NzQxNzMzMTIwMzkyODQyNjI4Mzsgc3RvcmUtY291bnRyeS1jb2RlPXVzOyBzdG9yZS1jb3VudHJ5LWNvZGUtc3JjPWRpZDsgc3RvcmUtaWRjPXVzZWFzdDU7IHR0cmVxPTEkODViMWY1YjBiNDBhZWIwZmY3NjU5OGE2YTk0ZmNiMDcwNGIxMGQ3NCIsICJwcm94eSI6ICJodHRwOi8vMTU0LjIwMi4xMDcuMjAyOjMxMjgifQ==\",       \"tiktok_info\":{          \"cdid\":\"b1d906c3-9613-41c5-98f8-d6aabc97b111\",          \"cookie\":\"install_id=7417331203928426283; store-country-code=us; store-country-code-src=did; store-idc=useast5; ttreq=1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\",          \"device_brand\":\"HUAWEI\",          \"device_type\":\"POT-LX46\",          \"did\":\"7417330999023502890\",          \"iid\":\"7417331203928426283\",          \"mcc_mnc\":\"310260\",          \"openudid\":\"4e3977e6ba5cad74\",          \"os_api\":\"29\",          \"os_version\":\"10\",          \"user_agent\":\"okhttp/3.10.0.1\",          \"version_code\":\"260602\",          \"version_name\":\"26.6.2\"       }    } } ```
         * @summary 注册设备信息/Register device information
         * @param {string} [proxy] 代理/Proxy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDeviceApiV1TiktokAppV3RegisterDeviceGet_57: async (proxy?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v3/register_device`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (proxy !== undefined) {
                localVarQueryParameter['proxy'] = proxy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - TikTok APP加密算法，用于生成请求头中的加密参数。 - 生成的加密参数列表：     - `x-ladon`     - `x-khronos`     - `x-argus`     - `x-gorgon` （8404）  ### 参数: - url: 需要加密的完整URL - data: 如果接口是POST请求，请填写POST请求的数据参与加密计算，GET请求时传入空字符串即可。 - device_info: 设备信息，可选参数，如果不填写则使用默认设备信息，设备信息会修改传入的URL中的参数。  ### 返回: - 加密参数列表  # [English] ### Purpose: - TikTok APP encryption algorithm, used to generate encrypted parameters in the request header. - The generated encrypted parameter list:     - `x-ladon`     - `x-khronos`     - `x-argus`     - `x-gorgon` (8404)  ### Parameters: - url: Full URL to be encrypted - data: If the interface is a POST request, please fill in the data of the POST request to participate in the encryption calculation. For GET requests, pass an empty string. - device_info: Device information, optional parameter, if not filled in, the default device information will be used, and the device information will modify the parameters in the URL passed in.  ### Return: - Encrypted parameter list
         * @summary TikTok APP加密算法/TikTok APP encryption algorithm
         * @param {TikTokAppEncryptRequest} [tikTokAppEncryptRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost: async (tikTokAppEncryptRequest?: TikTokAppEncryptRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v3/TTencrypt_algorithm`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof tikTokAppEncryptRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(tikTokAppEncryptRequest !== undefined ? tikTokAppEncryptRequest : {}) : (tikTokAppEncryptRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - TikTok APP加密算法，用于生成请求头中的加密参数。 - 生成的加密参数列表：     - `x-ladon`     - `x-khronos`     - `x-argus`     - `x-gorgon` （8404）  ### 参数: - url: 需要加密的完整URL - data: 如果接口是POST请求，请填写POST请求的数据参与加密计算，GET请求时传入空字符串即可。 - device_info: 设备信息，可选参数，如果不填写则使用默认设备信息，设备信息会修改传入的URL中的参数。  ### 返回: - 加密参数列表  # [English] ### Purpose: - TikTok APP encryption algorithm, used to generate encrypted parameters in the request header. - The generated encrypted parameter list:     - `x-ladon`     - `x-khronos`     - `x-argus`     - `x-gorgon` (8404)  ### Parameters: - url: Full URL to be encrypted - data: If the interface is a POST request, please fill in the data of the POST request to participate in the encryption calculation. For GET requests, pass an empty string. - device_info: Device information, optional parameter, if not filled in, the default device information will be used, and the device information will modify the parameters in the URL passed in.  ### Return: - Encrypted parameter list
         * @summary TikTok APP加密算法/TikTok APP encryption algorithm
         * @param {TikTokAppEncryptRequest} [tikTokAppEncryptRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost_58: async (tikTokAppEncryptRequest?: TikTokAppEncryptRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v3/TTencrypt_algorithm`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof tikTokAppEncryptRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(tikTokAppEncryptRequest !== undefined ? tikTokAppEncryptRequest : {}) : (tikTokAppEncryptRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TikTokAppV3APIApi - functional programming interface
 * @export
 */
export const TikTokAppV3APIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 根据视频ID来增加作品的播放数 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - invite_code: 邀请码，此接口需要邀请码才能使用。 ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - invite_code: Invite code, this interface requires an invite code to use. ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type = 0 item_id = \"7419966340443819295\" cookie = None
         * @summary 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
         * @param {number} awemeType 作品类型/Video type
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet(awemeType: number, itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).addVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet(awemeType, itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据视频ID来增加作品的播放数 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - invite_code: 邀请码，此接口需要邀请码才能使用。 ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - invite_code: Invite code, this interface requires an invite code to use. ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type = 0 item_id = \"7419966340443819295\" cookie = None
         * @summary 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
         * @param {number} awemeType 作品类型/Video type
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet_1(awemeType: number, itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).addVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet_1(awemeType, itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 检测直播间是否在线 - 直播间的Room ID可以通过直播间链接从`/api/v1/tiktok/web/get_live_room_id`接口获取 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online - The Room ID of the live room can be obtained from the `/api/v1/tiktok/web/get_live_room_id` interface through the live room link ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"
         * @summary 检测直播间是否在线/Check if live room is online
         * @param {string} roomId 直播间id/Live room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet(roomId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet(roomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 检测直播间是否在线 - 直播间的Room ID可以通过直播间链接从`/api/v1/tiktok/web/get_live_room_id`接口获取 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online - The Room ID of the live room can be obtained from the `/api/v1/tiktok/web/get_live_room_id` interface through the live room link ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"
         * @summary 检测直播间是否在线/Check if live room is online
         * @param {string} roomId 直播间id/Live room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_2(roomId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_2(roomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 加密/解密 TikTok APP 登录请求体，用于登录接口的请求体加密和解密。 ### 参数: - username: 用户名，可以是密文或明文。 - password: 密码，可以是密文或明文。 - mode: 模式     - `encrypt`: 加密     - `decrypt`: 解密 ### 返回: - 加密/解密后的请求体  # [English] ### Purpose: - Encrypt/decrypt the TikTok APP login request body, used for encrypting and decrypting the request body of the login interface. ### Parameters: - username: Username, can be ciphertext or plaintext. - password: Password, can be ciphertext or plaintext. - mode: Mode     - `encrypt`: Encrypt     - `decrypt`: Decrypt ### Return: - Encrypted/decrypted request body  # [示例/Example] ```json {     \"username\": \"example_username\",     \"password\": \"example_password\",     \"mode\": \"encrypt\" } ```
         * @summary 加密或解密 TikTok APP 登录请求体/Encrypt or Decrypt TikTok APP login request body
         * @param {TikTokAppLoginEncryptDecryptRequest} [tikTokAppLoginEncryptDecryptRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost(tikTokAppLoginEncryptDecryptRequest?: TikTokAppLoginEncryptDecryptRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).encryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost(tikTokAppLoginEncryptDecryptRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 加密/解密 TikTok APP 登录请求体，用于登录接口的请求体加密和解密。 ### 参数: - username: 用户名，可以是密文或明文。 - password: 密码，可以是密文或明文。 - mode: 模式     - `encrypt`: 加密     - `decrypt`: 解密 ### 返回: - 加密/解密后的请求体  # [English] ### Purpose: - Encrypt/decrypt the TikTok APP login request body, used for encrypting and decrypting the request body of the login interface. ### Parameters: - username: Username, can be ciphertext or plaintext. - password: Password, can be ciphertext or plaintext. - mode: Mode     - `encrypt`: Encrypt     - `decrypt`: Decrypt ### Return: - Encrypted/decrypted request body  # [示例/Example] ```json {     \"username\": \"example_username\",     \"password\": \"example_password\",     \"mode\": \"encrypt\" } ```
         * @summary 加密或解密 TikTok APP 登录请求体/Encrypt or Decrypt TikTok APP login request body
         * @param {TikTokAppLoginEncryptDecryptRequest} [tikTokAppLoginEncryptDecryptRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost_3(tikTokAppLoginEncryptDecryptRequest?: TikTokAppLoginEncryptDecryptRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).encryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost_3(tikTokAppLoginEncryptDecryptRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取内容翻译数据 ### 参数: - trg_lang: 目标语言     - zh-Hans: 简体中文     - zh-Hant: 繁体中文     - en: 英语     - ja: 日语     - ko: 韩语     - fr: 法语     - de: 德语     - ru: 俄语     - es: 西班牙语     - pt: 葡萄牙语     - vi: 越南语     - th: 泰语     - id: 印尼语     - ar: 阿拉伯语     - it: 意大利语     - tr: 土耳其语     - he: 希伯来语     - pl: 波兰语     - nl: 荷兰语     - sv: 瑞典语     - da: 丹麦语     - fi: 芬兰语     - no: 挪威语     - cs: 捷克语     - hu: 匈牙利语 - src_content: 源内容，也就是需要翻译的内容，长度不超过5000个字符，如果超过5000个字符，只会翻译前5000个字符。 ### 返回: - 内容翻译数据  # [English] ### Purpose: - Get content translation data ### Parameters: - trg_lang: Target language     - zh-Hans: Simplified Chinese     - zh-Hant: Traditional Chinese     - en: English     - ja: Japanese     - ko: Korean     - fr: French     - de: German     - ru: Russian     - es: Spanish     - pt: Portuguese     - vi: Vietnamese     - th: Thai     - id: Indonesian     - ar: Arabic     - it: Italian     - tr: Turkish     - he: Hebrew     - pl: Polish     - nl: Dutch     - sv: Swedish     - da: Danish     - fi: Finnish     - no: Norwegian     - cs: Czech     - hu: Hungarian - src_content: Source content, that is, the content that needs to be translated, the length does not exceed 5000 characters, if it exceeds 5000 characters, only the first 5000 characters will be translated. ### Return: - Content translation data  # [示例/Example] trg_lang = \"zh-Hans\" src_content = \"Hello, welcome to TikHub!\"
         * @summary 获取内容翻译数据/Get content translation data
         * @param {TikTokAppV3ContentTranslate} [tikTokAppV3ContentTranslate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost(tikTokAppV3ContentTranslate?: TikTokAppV3ContentTranslate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost(tikTokAppV3ContentTranslate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取内容翻译数据 ### 参数: - trg_lang: 目标语言     - zh-Hans: 简体中文     - zh-Hant: 繁体中文     - en: 英语     - ja: 日语     - ko: 韩语     - fr: 法语     - de: 德语     - ru: 俄语     - es: 西班牙语     - pt: 葡萄牙语     - vi: 越南语     - th: 泰语     - id: 印尼语     - ar: 阿拉伯语     - it: 意大利语     - tr: 土耳其语     - he: 希伯来语     - pl: 波兰语     - nl: 荷兰语     - sv: 瑞典语     - da: 丹麦语     - fi: 芬兰语     - no: 挪威语     - cs: 捷克语     - hu: 匈牙利语 - src_content: 源内容，也就是需要翻译的内容，长度不超过5000个字符，如果超过5000个字符，只会翻译前5000个字符。 ### 返回: - 内容翻译数据  # [English] ### Purpose: - Get content translation data ### Parameters: - trg_lang: Target language     - zh-Hans: Simplified Chinese     - zh-Hant: Traditional Chinese     - en: English     - ja: Japanese     - ko: Korean     - fr: French     - de: German     - ru: Russian     - es: Spanish     - pt: Portuguese     - vi: Vietnamese     - th: Thai     - id: Indonesian     - ar: Arabic     - it: Italian     - tr: Turkish     - he: Hebrew     - pl: Polish     - nl: Dutch     - sv: Swedish     - da: Danish     - fi: Finnish     - no: Norwegian     - cs: Czech     - hu: Hungarian - src_content: Source content, that is, the content that needs to be translated, the length does not exceed 5000 characters, if it exceeds 5000 characters, only the first 5000 characters will be translated. ### Return: - Content translation data  # [示例/Example] trg_lang = \"zh-Hans\" src_content = \"Hello, welcome to TikHub!\"
         * @summary 获取内容翻译数据/Get content translation data
         * @param {TikTokAppV3ContentTranslate} [tikTokAppV3ContentTranslate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_4(tikTokAppV3ContentTranslate?: TikTokAppV3ContentTranslate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_4(tikTokAppV3ContentTranslate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取创作者信息，包括创作者的基本信息、粉丝数、橱窗商品数量等信息。 ### 参数: - creator_uid: 创作者uid ### 返回: - 创作者信息  # [English] ### Purpose: - Get creator information, including the creator\'s basic information, number of fans, number of storefront products, etc. ### Parameters: - creator_uid: Creator uid ### Return: - Creator information  # [示例/Example] creator_uid = \"6555451606845243393\"
         * @summary 获取创作者信息/Get creator information
         * @param {string} creatorUid 创作者uid/Creator uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet(creatorUid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet(creatorUid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取创作者信息，包括创作者的基本信息、粉丝数、橱窗商品数量等信息。 ### 参数: - creator_uid: 创作者uid ### 返回: - 创作者信息  # [English] ### Purpose: - Get creator information, including the creator\'s basic information, number of fans, number of storefront products, etc. ### Parameters: - creator_uid: Creator uid ### Return: - Creator information  # [示例/Example] creator_uid = \"6555451606845243393\"
         * @summary 获取创作者信息/Get creator information
         * @param {string} creatorUid 创作者uid/Creator uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet_5(creatorUid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet_5(creatorUid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取创作者橱窗商品列表 ### 参数: - kol_id: 创作者的sec_user_id - count: 数量 - next_scroll_param: 翻页参数，第一页为空字符串，后续请求使用上一次请求返回的next_scroll_param值。 ### 返回: - 创作者橱窗商品列表  # [English] ### Purpose: - Get creator showcase product list ### Parameters: - kol_id: Creator\'s sec_user_id - count: Number - next_scroll_param: Page parameter, empty string for the first page, use the next_scroll_param value returned by the last request for subsequent requests. ### Return: - Creator showcase product list  # [示例/Example] kol_id = \"MS4wLjABAAAARujvKaVWqgbVCwuxQghA99TUa5I-4g6jVzMXZd9FJIXSdJwJM47vm4-2T1K3gsux\" count = 20 next_scroll_param = \"\"
         * @summary 获取创作者橱窗商品列表/Get creator showcase product list
         * @param {string} kolId 创作者的sec_user_id/Creator\&#39;s sec_user_id
         * @param {number} [count] 数量/Number
         * @param {string} [nextScrollParam] 翻页参数/Page parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet(kolId: string, count?: number, nextScrollParam?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet(kolId, count, nextScrollParam, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取创作者橱窗商品列表 ### 参数: - kol_id: 创作者的sec_user_id - count: 数量 - next_scroll_param: 翻页参数，第一页为空字符串，后续请求使用上一次请求返回的next_scroll_param值。 ### 返回: - 创作者橱窗商品列表  # [English] ### Purpose: - Get creator showcase product list ### Parameters: - kol_id: Creator\'s sec_user_id - count: Number - next_scroll_param: Page parameter, empty string for the first page, use the next_scroll_param value returned by the last request for subsequent requests. ### Return: - Creator showcase product list  # [示例/Example] kol_id = \"MS4wLjABAAAARujvKaVWqgbVCwuxQghA99TUa5I-4g6jVzMXZd9FJIXSdJwJM47vm4-2T1K3gsux\" count = 20 next_scroll_param = \"\"
         * @summary 获取创作者橱窗商品列表/Get creator showcase product list
         * @param {string} kolId 创作者的sec_user_id/Creator\&#39;s sec_user_id
         * @param {number} [count] 数量/Number
         * @param {string} [nextScrollParam] 翻页参数/Page parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet_6(kolId: string, count?: number, nextScrollParam?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet_6(kolId, count, nextScrollParam, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet(keyword, offset, count, sortType, publishTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_7(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_7(keyword, offset, count, sortType, publishTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet(chId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet(chId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_8(chId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_8(chId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_9(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_9(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet(chId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet(chId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_10(chId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_10(chId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - cookie: User\'s own cookie, optional parameter, used for personalized recommendation of interface returned data. ### Return: - Video recommend data
         * @summary 获取主页视频推荐数据/Get home feed(recommend) video data
         * @param {TikTokAppV3HomeFeed} [tikTokAppV3HomeFeed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost(tikTokAppV3HomeFeed?: TikTokAppV3HomeFeed, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost(tikTokAppV3HomeFeed, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - cookie: User\'s own cookie, optional parameter, used for personalized recommendation of interface returned data. ### Return: - Video recommend data
         * @summary 获取主页视频推荐数据/Get home feed(recommend) video data
         * @param {TikTokAppV3HomeFeed} [tikTokAppV3HomeFeed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost_11(tikTokAppV3HomeFeed?: TikTokAppV3HomeFeed, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost_11(tikTokAppV3HomeFeed, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播每日榜单数据 ### 参数: - anchor_id: 主播id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的主播id。 - room_id: 直播间id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的id。 - rank_type: 榜单类型     - `0`: 每小时排行榜     - `1`: 每周排行榜     - `5`: 新星排行榜     - `6`: 销售排行榜     - `8`: 每日排行榜     - `10`: 游戏排行榜     - `11`: 每日游戏排行榜     - `12`: 名人堂排行榜     - `13`: 冠军赛排行榜     - `14`: 每日新秀排行榜     - `15`: 人气直播榜     - `16`: D5段位榜     - `20`: 绝地求生排行榜     - `21`: 王者荣耀排行榜     - `22`: Free Fire 排行榜     - `1001`: 联盟竞赛排行榜     - `-1`: 未知排行榜 - region_type: 地区类型，使用默认值即可，具体含义不明。 - gap_interval: 时间间隔，使用默认值代表当天，使用-1代表排名记录。 - cookie: 用户自己的cookie，可选参数，用于接口不可用时使用。 ### 返回: - 直播每日榜单数据  # [English] ### Purpose: - Get live daily rank data ### Parameters: - anchor_id: Anchor id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different anchor ids of different live rooms. - room_id: Live room id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different room ids of different live rooms. - rank_type: Rank type     - `0`: Hourly Rank     - `1`: Weekly Rank     - `5`: Rookie Star Rank     - `6`: Sale Rank     - `8`: Daily Rank     - `10`: Game Rank     - `11`: Daily Game Rank     - `12`: Hall of Fame Rank     - `13`: Champion Tournament Rank     - `14`: Daily Rookie Star Rank     - `15`: Popular Live Stream Rank     - `16`: D5 Level Rank     - `20`: PUBG Rank     - `21`: MLBB Rank     - `22`: Free Fire Rank     - `1001`: League Campaign Rank     - `-1`: Unknown Rank  - region_type: Region type, use the default value, the specific meaning is unknown. - gap_interval: Time interval, use the default value to represent the current day, use -1 to represent the ranking record. - cookie: User\'s own cookie, optional parameter, used when the interface is not available. ### Return: - Live daily rank data
         * @summary 获取直播每日榜单数据/Get live daily rank data
         * @param {string} [anchorId] 主播id/Anchor id
         * @param {string} [roomId] 直播间id/Live room id
         * @param {number} [rankType] 榜单类型/Rank type
         * @param {number} [regionType] 地区类型/Region type
         * @param {number} [gapInterval] 时间间隔/Time interval
         * @param {string} [cookie] 用户自己的cookie/User\&#39;s own cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet(anchorId?: string, roomId?: string, rankType?: number, regionType?: number, gapInterval?: number, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet(anchorId, roomId, rankType, regionType, gapInterval, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播每日榜单数据 ### 参数: - anchor_id: 主播id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的主播id。 - room_id: 直播间id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的id。 - rank_type: 榜单类型     - `0`: 每小时排行榜     - `1`: 每周排行榜     - `5`: 新星排行榜     - `6`: 销售排行榜     - `8`: 每日排行榜     - `10`: 游戏排行榜     - `11`: 每日游戏排行榜     - `12`: 名人堂排行榜     - `13`: 冠军赛排行榜     - `14`: 每日新秀排行榜     - `15`: 人气直播榜     - `16`: D5段位榜     - `20`: 绝地求生排行榜     - `21`: 王者荣耀排行榜     - `22`: Free Fire 排行榜     - `1001`: 联盟竞赛排行榜     - `-1`: 未知排行榜 - region_type: 地区类型，使用默认值即可，具体含义不明。 - gap_interval: 时间间隔，使用默认值代表当天，使用-1代表排名记录。 - cookie: 用户自己的cookie，可选参数，用于接口不可用时使用。 ### 返回: - 直播每日榜单数据  # [English] ### Purpose: - Get live daily rank data ### Parameters: - anchor_id: Anchor id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different anchor ids of different live rooms. - room_id: Live room id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different room ids of different live rooms. - rank_type: Rank type     - `0`: Hourly Rank     - `1`: Weekly Rank     - `5`: Rookie Star Rank     - `6`: Sale Rank     - `8`: Daily Rank     - `10`: Game Rank     - `11`: Daily Game Rank     - `12`: Hall of Fame Rank     - `13`: Champion Tournament Rank     - `14`: Daily Rookie Star Rank     - `15`: Popular Live Stream Rank     - `16`: D5 Level Rank     - `20`: PUBG Rank     - `21`: MLBB Rank     - `22`: Free Fire Rank     - `1001`: League Campaign Rank     - `-1`: Unknown Rank  - region_type: Region type, use the default value, the specific meaning is unknown. - gap_interval: Time interval, use the default value to represent the current day, use -1 to represent the ranking record. - cookie: User\'s own cookie, optional parameter, used when the interface is not available. ### Return: - Live daily rank data
         * @summary 获取直播每日榜单数据/Get live daily rank data
         * @param {string} [anchorId] 主播id/Anchor id
         * @param {string} [roomId] 直播间id/Live room id
         * @param {number} [rankType] 榜单类型/Rank type
         * @param {number} [regionType] 地区类型/Region type
         * @param {number} [gapInterval] 时间间隔/Time interval
         * @param {string} [cookie] 用户自己的cookie/User\&#39;s own cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_12(anchorId?: string, roomId?: string, rankType?: number, regionType?: number, gapInterval?: number, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_12(anchorId, roomId, rankType, regionType, gapInterval, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"
         * @summary 获取直播间排行榜数据/Get live room ranking list
         * @param {string} roomId 直播间id/Live room id
         * @param {string} anchorId 主播id/Anchor id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet(roomId: string, anchorId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet(roomId, anchorId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"
         * @summary 获取直播间排行榜数据/Get live room ranking list
         * @param {string} roomId 直播间id/Live room id
         * @param {string} anchorId 主播id/Anchor id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_13(roomId: string, anchorId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_13(roomId, anchorId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定直播间的数据 ### 参数: - room_id: 直播间id ### 返回: - 直播间数据  # [English] ### Purpose: - Get data of specified live room ### Parameters: - room_id: Live room id ### Return: - Live room data  # [示例/Example] room_id = \"7385461256746060575\"
         * @summary 获取指定直播间的数据/Get data of specified live room
         * @param {string} roomId 直播间id/Live room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet(roomId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet(roomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定直播间的数据 ### 参数: - room_id: 直播间id ### 返回: - 直播间数据  # [English] ### Purpose: - Get data of specified live room ### Parameters: - room_id: Live room id ### Return: - Live room data  # [示例/Example] room_id = \"7385461256746060575\"
         * @summary 获取指定直播间的数据/Get data of specified live room
         * @param {string} roomId 直播间id/Live room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_14(roomId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_14(roomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播间商品列表数据 ### 参数: - room_id: 直播间id，必填参数。 - author_id: 主播id，必填参数。 - page_size: 每页数量，可选参数，默认为15。 - offset: 翻页游标，可选参数，默认为0，每次翻页增加15。 - region: 地区，可选参数，默认为`US`，如果使用其他地区，如：`VN`，请自行携带Cookie，否则无法获取数据。 - cookie: 用户自己的cookie，可选参数，用于爬取除`US`以外的地区数据。 ### 参数获取: - 第一步：使用接口`f\"{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\"`接口获取直播间id（room_id）。 - 第二步：使用接口`f\"{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\"`接口获取直播间信息。 - 第三步：使用第二步返回的JSON数据中使用JSONPATH获取`$.data.data.owner.id_str`字段的值作为主播id（author_id）。 ### 返回: - 直播间商品列表数据  # [English] ### Purpose: - Get live room product list data ### Parameters: - room_id: Live room id, required parameter. - author_id: Anchor id, required parameter. - page_size: Number per page, optional parameter, default is 15. - offset: Page turning cursor, optional parameter, default is 0, increasing by 15 each time. - region: Region, optional parameter, default is `US`, if you use other regions, such as: `VN`, please bring your own Cookie, otherwise you will not be able to get data. - cookie: User\'s own cookie, optional parameter, used to crawl data from regions other than `US`. ### Get Parameters: - Step 1: Use the interface `f\"{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\"` to get the live room id (room_id). - Step 2: Use the interface `f\"{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\"` to get the live room information. - Step 3: Use the JSONPATH in the JSON data returned in the second step to get the value of the field `$.data.data.owner.id_str` as the anchor id (author_id). ### Return: - Live room product list data  # [示例/Example] room_id = \"7420741353250507562\" author_id = \"7408859677050274859\" page_size = 15 offset = 0
         * @summary 获取直播间商品列表数据/Get live room product list data
         * @param {string} roomId 直播间id/Live room id
         * @param {string} authorId 主播id/Anchor id
         * @param {number} [pageSize] 数量/Number
         * @param {number} [offset] 数量/Number
         * @param {string} [region] 地区/Region
         * @param {string} [cookie] 用户自己的cookie/User\&#39;s own cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet(roomId: string, authorId: string, pageSize?: number, offset?: number, region?: string, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet(roomId, authorId, pageSize, offset, region, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播间商品列表数据 ### 参数: - room_id: 直播间id，必填参数。 - author_id: 主播id，必填参数。 - page_size: 每页数量，可选参数，默认为15。 - offset: 翻页游标，可选参数，默认为0，每次翻页增加15。 - region: 地区，可选参数，默认为`US`，如果使用其他地区，如：`VN`，请自行携带Cookie，否则无法获取数据。 - cookie: 用户自己的cookie，可选参数，用于爬取除`US`以外的地区数据。 ### 参数获取: - 第一步：使用接口`f\"{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\"`接口获取直播间id（room_id）。 - 第二步：使用接口`f\"{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\"`接口获取直播间信息。 - 第三步：使用第二步返回的JSON数据中使用JSONPATH获取`$.data.data.owner.id_str`字段的值作为主播id（author_id）。 ### 返回: - 直播间商品列表数据  # [English] ### Purpose: - Get live room product list data ### Parameters: - room_id: Live room id, required parameter. - author_id: Anchor id, required parameter. - page_size: Number per page, optional parameter, default is 15. - offset: Page turning cursor, optional parameter, default is 0, increasing by 15 each time. - region: Region, optional parameter, default is `US`, if you use other regions, such as: `VN`, please bring your own Cookie, otherwise you will not be able to get data. - cookie: User\'s own cookie, optional parameter, used to crawl data from regions other than `US`. ### Get Parameters: - Step 1: Use the interface `f\"{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\"` to get the live room id (room_id). - Step 2: Use the interface `f\"{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\"` to get the live room information. - Step 3: Use the JSONPATH in the JSON data returned in the second step to get the value of the field `$.data.data.owner.id_str` as the anchor id (author_id). ### Return: - Live room product list data  # [示例/Example] room_id = \"7420741353250507562\" author_id = \"7408859677050274859\" page_size = 15 offset = 0
         * @summary 获取直播间商品列表数据/Get live room product list data
         * @param {string} roomId 直播间id/Live room id
         * @param {string} authorId 主播id/Anchor id
         * @param {number} [pageSize] 数量/Number
         * @param {number} [offset] 数量/Number
         * @param {string} [region] 地区/Region
         * @param {string} [cookie] 用户自己的cookie/User\&#39;s own cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet_15(roomId: string, authorId: string, pageSize?: number, offset?: number, region?: string, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet_15(roomId, authorId, pageSize, offset, region, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果/Get live search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果/Get live search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_16(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_16(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取地点搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 地点搜索结果  # [English] ### Purpose: - Get location search results ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Location search results  # [示例/Example] keyword = \"Shanghai\" offset = 0 count = 20
         * @summary 获取地点搜索结果/Get location search results
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取地点搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 地点搜索结果  # [English] ### Purpose: - Get location search results ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Location search results  # [示例/Example] keyword = \"Shanghai\" offset = 0 count = 20
         * @summary 获取地点搜索结果/Get location search results
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_17(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_17(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",     ]
         * @summary 批量获取视频信息/Batch Get Video Information
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",     ]
         * @summary 批量获取视频信息/Batch Get Video Information
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_18(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_18(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",     ]
         * @summary 批量获取视频信息 V2/Batch Get Video Information V2
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",     ]
         * @summary 批量获取视频信息 V2/Batch Get Video Information V2
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post_19(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post_19(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet(musicId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet(musicId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_20(musicId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_20(musicId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_21(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_21(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet(musicId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet(musicId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_22(musicId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_22(musicId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_23(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_23(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet(shareUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet(shareUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_24(shareUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_24(shareUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7463308759842966791\"
         * @summary 获取单个作品数据 V2/Get single video data V2
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7463308759842966791\"
         * @summary 获取单个作品数据 V2/Get single video data V2
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get_25(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get_25(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商品详情数据 - 即将弃用，使用 fetch_product_detail_v2 代替 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据  # [English] ### Purpose: - Get product detail data - Will be deprecated, use fetch_product_detail_v2 instead ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data  # [示例/Example] product_id = \"1729385239712731370\"
         * @summary 获取商品详情数据（即将弃用，使用 fetch_product_detail_v2 代替）/Get product detail data (will be deprecated, use fetch_product_detail_v2 instead)
         * @param {string} productId 商品id/Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet(productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商品详情数据 - 即将弃用，使用 fetch_product_detail_v2 代替 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据  # [English] ### Purpose: - Get product detail data - Will be deprecated, use fetch_product_detail_v2 instead ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data  # [示例/Example] product_id = \"1729385239712731370\"
         * @summary 获取商品详情数据（即将弃用，使用 fetch_product_detail_v2 代替）/Get product detail data (will be deprecated, use fetch_product_detail_v2 instead)
         * @param {string} productId 商品id/Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_26(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_26(productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商品详情数据V2 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V2  # [English] ### Purpose: - Get product detail data V2 ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V2  # [示例/Example] product_id = \"1729385239712731370\"
         * @summary 获取商品详情数据V2/Get product detail data V2
         * @param {string} productId 商品id/Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get(productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商品详情数据V2 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V2  # [English] ### Purpose: - Get product detail data V2 ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V2  # [示例/Example] product_id = \"1729385239712731370\"
         * @summary 获取商品详情数据V2/Get product detail data V2
         * @param {string} productId 商品id/Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get_27(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get_27(productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商品详情数据V3，如果商品详情数据V2无法获取，可以尝试使用此接口。 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V3  # [English] ### Purpose: - Get product detail data V3, if the product detail data V2 cannot be obtained, you can try using this interface. ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V3  # [示例/Example] product_id = \"1729385239712731370\"
         * @summary 获取商品详情数据V3/Get product detail data V3
         * @param {string} productId 商品id/Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get(productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商品详情数据V3，如果商品详情数据V2无法获取，可以尝试使用此接口。 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V3  # [English] ### Purpose: - Get product detail data V3, if the product detail data V2 cannot be obtained, you can try using this interface. ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V3  # [示例/Example] product_id = \"1729385239712731370\"
         * @summary 获取商品详情数据V3/Get product detail data V3
         * @param {string} productId 商品id/Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get_28(productId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get_28(productId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取商品ID ### 参数: - share_link: 分享链接 ### 返回: - 商品ID  # [English] ### Purpose: - Get Product ID by Share Link ### Parameters: - share_link: Share link ### Return: - Product ID  # [示例/Example] share_link = \"https://www.tiktok.com/t/ZT2A9N1kw/\"
         * @summary 通过分享链接获取商品ID/Get Product ID by Share Link
         * @param {string} shareLink 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet(shareLink: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet(shareLink, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取商品ID ### 参数: - share_link: 分享链接 ### 返回: - 商品ID  # [English] ### Purpose: - Get Product ID by Share Link ### Parameters: - share_link: Share link ### Return: - Product ID  # [示例/Example] share_link = \"https://www.tiktok.com/t/ZT2A9N1kw/\"
         * @summary 通过分享链接获取商品ID/Get Product ID by Share Link
         * @param {string} shareLink 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet_29(shareLink: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet_29(shareLink, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商品评价数据 ### 参数: - product_id: 商品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - size: 数量 - filter_id: 筛选条件     - 0: 全部评价     - 1: 1星评价     - 2: 2星评价     - 3: 3星评价     - 4: 4星评价     - 5: 5星评价     - 102: 有图评价     - 104: 已购买的评价 - sort_type: 排序条件     - 1: 相关度     - 2: 从新到旧 ### 返回: - 商品评价数据  # [English] ### Purpose: - Get product review data ### Parameters: - product_id: Product id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - size: Count number - filter_id: Filter condition     - 0: All reviews     - 1: 1-star review     - 2: 2-star review     - 3: 3-star review     - 4: 4-star review     - 5: 5-star review     - 102: Reviews with pictures     - 104: Reviews of purchased products - sort_type: Sorting conditions     - 1: Relevance     - 2: New to old ### Return: - Product review data  # [示例/Example] product_id = \"1729448812983194615\" cursor = 0 size = 10 filter_id = 0 sort_type = 0
         * @summary 获取商品评价数据/Get product review data
         * @param {string} productId 商品id/Product id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [size] 数量/Number
         * @param {number} [filterId] 筛选条件/Filter condition
         * @param {number} [sortType] 排序条件/Sorting conditions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet(productId: string, cursor?: number, size?: number, filterId?: number, sortType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet(productId, cursor, size, filterId, sortType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商品评价数据 ### 参数: - product_id: 商品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - size: 数量 - filter_id: 筛选条件     - 0: 全部评价     - 1: 1星评价     - 2: 2星评价     - 3: 3星评价     - 4: 4星评价     - 5: 5星评价     - 102: 有图评价     - 104: 已购买的评价 - sort_type: 排序条件     - 1: 相关度     - 2: 从新到旧 ### 返回: - 商品评价数据  # [English] ### Purpose: - Get product review data ### Parameters: - product_id: Product id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - size: Count number - filter_id: Filter condition     - 0: All reviews     - 1: 1-star review     - 2: 2-star review     - 3: 3-star review     - 4: 4-star review     - 5: 5-star review     - 102: Reviews with pictures     - 104: Reviews of purchased products - sort_type: Sorting conditions     - 1: Relevance     - 2: New to old ### Return: - Product review data  # [示例/Example] product_id = \"1729448812983194615\" cursor = 0 size = 10 filter_id = 0 sort_type = 0
         * @summary 获取商品评价数据/Get product review data
         * @param {string} productId 商品id/Product id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [size] 数量/Number
         * @param {number} [filterId] 筛选条件/Filter condition
         * @param {number} [sortType] 排序条件/Sorting conditions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_30(productId: string, cursor?: number, size?: number, filterId?: number, sortType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_30(productId, cursor, size, filterId, sortType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商品搜索结果 ### 参数: - keyword: 关键词 - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 - sort_type: 商品排序条件     - 1: 综合排序     - 2: 销量排序     - 3: 价格从高到低     - 4: 价格从低到高     - 5: 最新发布 - customer_review_four_star: 四星以上评价 - have_discount: 有优惠 - min_price: 最低价格 - max_price: 最高价格 ### 返回: - 商品搜索结果  # [English] ### Purpose: - Get product search results ### Parameters: - keyword: Keyword - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number - sort_type: Product sorting conditions     - 1: Comprehensive sorting     - 2: Sales volume sorting     - 3: Price high to low     - 4: Price low to high     - 5: Latest release - customer_review_four_star: Four-star or more reviews - have_discount: Having discount - min_price: Minimum price - max_price: Maximum price ### Return: - Product search results  # [示例/Example] keyword = \"Cat Toy\" cursor = 0 count = 12 sort_type = 1 customer_review_four_star = False have_discount = False min_price = \"10\" max_price = \"25\"
         * @summary 获取商品搜索结果/Get product search results
         * @param {string} keyword 关键词/Keyword
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 商品排序条件/Product sorting conditions
         * @param {boolean} [customerReviewFourStar] 四星以上评价/Four-star or more reviews
         * @param {boolean} [haveDiscount] 有优惠/Having discount
         * @param {string} [minPrice] 最低价格/Minimum price
         * @param {string} [maxPrice] 最高价格/Maximum price
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet(keyword: string, cursor?: number, count?: number, sortType?: number, customerReviewFourStar?: boolean, haveDiscount?: boolean, minPrice?: string, maxPrice?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet(keyword, cursor, count, sortType, customerReviewFourStar, haveDiscount, minPrice, maxPrice, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商品搜索结果 ### 参数: - keyword: 关键词 - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 - sort_type: 商品排序条件     - 1: 综合排序     - 2: 销量排序     - 3: 价格从高到低     - 4: 价格从低到高     - 5: 最新发布 - customer_review_four_star: 四星以上评价 - have_discount: 有优惠 - min_price: 最低价格 - max_price: 最高价格 ### 返回: - 商品搜索结果  # [English] ### Purpose: - Get product search results ### Parameters: - keyword: Keyword - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number - sort_type: Product sorting conditions     - 1: Comprehensive sorting     - 2: Sales volume sorting     - 3: Price high to low     - 4: Price low to high     - 5: Latest release - customer_review_four_star: Four-star or more reviews - have_discount: Having discount - min_price: Minimum price - max_price: Maximum price ### Return: - Product search results  # [示例/Example] keyword = \"Cat Toy\" cursor = 0 count = 12 sort_type = 1 customer_review_four_star = False have_discount = False min_price = \"10\" max_price = \"25\"
         * @summary 获取商品搜索结果/Get product search results
         * @param {string} keyword 关键词/Keyword
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 商品排序条件/Product sorting conditions
         * @param {boolean} [customerReviewFourStar] 四星以上评价/Four-star or more reviews
         * @param {boolean} [haveDiscount] 有优惠/Having discount
         * @param {string} [minPrice] 最低价格/Minimum price
         * @param {string} [maxPrice] 最高价格/Maximum price
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_31(keyword: string, cursor?: number, count?: number, sortType?: number, customerReviewFourStar?: boolean, haveDiscount?: boolean, minPrice?: string, maxPrice?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_31(keyword, cursor, count, sortType, customerReviewFourStar, haveDiscount, minPrice, maxPrice, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取分享二维码 ### 参数: - object_id: 对象id，当前支持个人主页接口响应中的uid作为参数。 ### 返回: - 二维码图片  # [English] ### Purpose: - Get share QR code ### Parameters: - object_id: Object id, currently supports the uid in the response of the personal homepage interface as a parameter. ### Return: - QR code image  # [示例/Example] url = \"6762244951259661318\"
         * @summary 获取分享二维码/Get share QR code
         * @param {string} objectId 对象id/Object id
         * @param {number} [schemaType] 模式类型/Schema type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet(objectId: string, schemaType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet(objectId, schemaType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取分享二维码 ### 参数: - object_id: 对象id，当前支持个人主页接口响应中的uid作为参数。 ### 返回: - 二维码图片  # [English] ### Purpose: - Get share QR code ### Parameters: - object_id: Object id, currently supports the uid in the response of the personal homepage interface as a parameter. ### Return: - QR code image  # [示例/Example] url = \"6762244951259661318\"
         * @summary 获取分享二维码/Get share QR code
         * @param {string} objectId 对象id/Object id
         * @param {number} [schemaType] 模式类型/Schema type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_32(objectId: string, schemaType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_32(objectId, schemaType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取分享短链接 ### 参数: - url: 长链接或想要转换的链接 ### 返回: - 短链接  # [English] ### Purpose: - Get share short link ### Parameters: - url: Long link or link to convert ### Return: - Short link  # [示例/Example] url = \"https://www.tiktok.com/passport/web/logout/\"
         * @summary 获取分享短链接/Get share short link
         * @param {string} url 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取分享短链接 ### 参数: - url: 长链接或想要转换的链接 ### 返回: - 短链接  # [English] ### Purpose: - Get share short link ### Parameters: - url: Long link or link to convert ### Return: - Short link  # [示例/Example] url = \"https://www.tiktok.com/passport/web/logout/\"
         * @summary 获取分享短链接/Get share short link
         * @param {string} url 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_33(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_33(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家主页的商品数据 ### 参数: - page_id: 爬取的商家主页Page id，可以从`fetch_shop_home_page_list`这个接口获取 - seller_id: 商家id,店铺id ### 返回: - 商家主页数据  # [English] ### Purpose: - Get product data of the shop home page ### Parameters: - page_id: Page id of the crawled shop home page, which can be obtained from the interface `fetch_shop_home_page_list` - seller_id: Seller id, shop id ### Return: - Shop home page data  # [示例/Example] page_id = \"7314705727611930410\" seller_id = \"8646929864612614278\"
         * @summary 获取商家主页数据/Get shop home page data
         * @param {string} pageId 爬取的商家主页Page id/Page id of the crawled shop home page
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet(pageId: string, sellerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet(pageId, sellerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家主页的商品数据 ### 参数: - page_id: 爬取的商家主页Page id，可以从`fetch_shop_home_page_list`这个接口获取 - seller_id: 商家id,店铺id ### 返回: - 商家主页数据  # [English] ### Purpose: - Get product data of the shop home page ### Parameters: - page_id: Page id of the crawled shop home page, which can be obtained from the interface `fetch_shop_home_page_list` - seller_id: Seller id, shop id ### Return: - Shop home page data  # [示例/Example] page_id = \"7314705727611930410\" seller_id = \"8646929864612614278\"
         * @summary 获取商家主页数据/Get shop home page data
         * @param {string} pageId 爬取的商家主页Page id/Page id of the crawled shop home page
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_34(pageId: string, sellerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_34(pageId, sellerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家主页Page列表数据, 用于商家主页展示，以及爬取商家主页的商品数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家主页Page列表数据  # [English] ### Purpose: - Get shop home page list data, used for shop home page display, and crawling shop home page product data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop home page list data  # [示例/Example] seller_id = \"8646929864612614278\"
         * @summary 获取商家主页Page列表数据/Get shop home page list data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet(sellerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet(sellerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家主页Page列表数据, 用于商家主页展示，以及爬取商家主页的商品数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家主页Page列表数据  # [English] ### Purpose: - Get shop home page list data, used for shop home page display, and crawling shop home page product data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop home page list data  # [示例/Example] seller_id = \"8646929864612614278\"
         * @summary 获取商家主页Page列表数据/Get shop home page list data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_35(sellerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_35(sellerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取店铺ID ### 参数: - share_link: 分享链接 ### 返回: - 店铺ID  # [English] ### Purpose: - Get Shop ID by Share Link ### Parameters: - share_link: Share link ### Return: - Shop ID  # [示例/Example] share_link = \"https://vt.tiktok.com/ZT2AHoGsE/\"
         * @summary 通过分享链接获取店铺ID/Get Shop ID by Share Link
         * @param {string} shareLink 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet(shareLink: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet(shareLink, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取店铺ID ### 参数: - share_link: 分享链接 ### 返回: - 店铺ID  # [English] ### Purpose: - Get Shop ID by Share Link ### Parameters: - share_link: Share link ### Return: - Shop ID  # [示例/Example] share_link = \"https://vt.tiktok.com/ZT2AHoGsE/\"
         * @summary 通过分享链接获取店铺ID/Get Shop ID by Share Link
         * @param {string} shareLink 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet_36(shareLink: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet_36(shareLink, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家信息数据 ### 参数: - shop_id: 商家id,店铺id ### 返回: - 商家信息数据  # [English] ### Purpose: - Get shop information data ### Parameters: - shop_id: Seller id, shop id ### Return: - Shop information data  # [示例/Example] shop_id = \"8646942781241463007\"
         * @summary 获取商家信息数据/Get shop information data
         * @param {string} shopId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet(shopId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet(shopId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家信息数据 ### 参数: - shop_id: 商家id,店铺id ### 返回: - 商家信息数据  # [English] ### Purpose: - Get shop information data ### Parameters: - shop_id: Seller id, shop id ### Return: - Shop information data  # [示例/Example] shop_id = \"8646942781241463007\"
         * @summary 获取商家信息数据/Get shop information data
         * @param {string} shopId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_37(shopId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_37(shopId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家产品分类数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家产品分类数据  # [English] ### Purpose: - Get shop product category data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop product category data  # [示例/Example] seller_id = \"7495294980909468039\"
         * @summary 获取商家产品分类数据/Get shop product category data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet(sellerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet(sellerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家产品分类数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家产品分类数据  # [English] ### Purpose: - Get shop product category data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop product category data  # [示例/Example] seller_id = \"7495294980909468039\"
         * @summary 获取商家产品分类数据/Get shop product category data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_38(sellerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_38(sellerId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_params = \"\" page_size = 10 sort_field = 1 sort_order = 0
         * @summary 获取商家商品列表数据/Get shop product list data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {string} [scrollParams] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
         * @param {number} [pageSize] 每页数量/Number per page
         * @param {number} [sortField] 排序字段/Sorting field
         * @param {number} [sortOrder] 排序方式/Sorting method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet(sellerId: string, scrollParams?: string, pageSize?: number, sortField?: number, sortOrder?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet(sellerId, scrollParams, pageSize, sortField, sortOrder, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_params = \"\" page_size = 10 sort_field = 1 sort_order = 0
         * @summary 获取商家商品列表数据/Get shop product list data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {string} [scrollParams] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
         * @param {number} [pageSize] 每页数量/Number per page
         * @param {number} [sortField] 排序字段/Sorting field
         * @param {number} [sortOrder] 排序方式/Sorting method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_39(sellerId: string, scrollParams?: string, pageSize?: number, sortField?: number, sortOrder?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_39(sellerId, scrollParams, pageSize, sortField, sortOrder, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_params = \"\" page_size = 10 sort_field = 1 sort_order = 0
         * @summary 获取商家商品列表数据 V2/Get shop product list data V2
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {string} [scrollParams] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
         * @param {number} [pageSize] 每页数量/Number per page
         * @param {number} [sortField] 排序字段/Sorting field
         * @param {number} [sortOrder] 排序方式/Sorting method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get(sellerId: string, scrollParams?: string, pageSize?: number, sortField?: number, sortOrder?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get(sellerId, scrollParams, pageSize, sortField, sortOrder, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_params = \"\" page_size = 10 sort_field = 1 sort_order = 0
         * @summary 获取商家商品列表数据 V2/Get shop product list data V2
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {string} [scrollParams] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
         * @param {number} [pageSize] 每页数量/Number per page
         * @param {number} [sortField] 排序字段/Sorting field
         * @param {number} [sortOrder] 排序方式/Sorting method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get_40(sellerId: string, scrollParams?: string, pageSize?: number, sortField?: number, sortOrder?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get_40(sellerId, scrollParams, pageSize, sortField, sortOrder, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家商品推荐数据 ### 参数: - seller_id: 商家id,店铺id - scroll_param: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 ### 返回: - 商家商品推荐数据  # [English] ### Purpose: - Get shop product recommend data ### Parameters: - seller_id: Seller id, shop id - scroll_param: Scroll parameter, used to load more product data - page_size: Number per page ### Return: - Shop product recommend data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_param = \"\" page_size = 10
         * @summary 获取商家商品推荐数据/Get shop product recommend data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {string} [scrollParam] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
         * @param {number} [pageSize] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet(sellerId: string, scrollParam?: string, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet(sellerId, scrollParam, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取商家商品推荐数据 ### 参数: - seller_id: 商家id,店铺id - scroll_param: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 ### 返回: - 商家商品推荐数据  # [English] ### Purpose: - Get shop product recommend data ### Parameters: - seller_id: Seller id, shop id - scroll_param: Scroll parameter, used to load more product data - page_size: Number per page ### Return: - Shop product recommend data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_param = \"\" page_size = 10
         * @summary 获取商家商品推荐数据/Get shop product recommend data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {string} [scrollParam] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
         * @param {number} [pageSize] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_41(sellerId: string, scrollParam?: string, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_41(sellerId, scrollParam, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的粉丝列表数据/Get follower list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet(secUserId, count, minTime, pageToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的粉丝列表数据/Get follower list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_42(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_42(secUserId, count, minTime, pageToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的关注列表数据/Get following list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet(secUserId, count, minTime, pageToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的关注列表数据/Get following list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_43(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_43(secUserId, count, minTime, pageToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA-RkTGCGXLuLKRM5Xcuuwm7Mclg51I2ECO1RqOA7mJHuXFz99nztdi077Z2XmYHZV\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet(secUserId, maxCursor, counts, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA-RkTGCGXLuLKRM5Xcuuwm7Mclg51I2ECO1RqOA7mJHuXFz99nztdi077Z2XmYHZV\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_44(secUserId: string, maxCursor?: number, counts?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_44(secUserId, maxCursor, counts, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户音乐列表数据 ### 参数: - sec_uid: 用户sec_uid - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 用户音乐列表数据  # [English] ### Purpose: - Get user music list data ### Parameters: - sec_uid: User sec_uid - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number  # [示例/Example] sec_uid = \"MS4wLjABAAAAqB08cUbXaDWqbD6MCga2RbGTuhfO2EsHayBYx08NDrN7IE3jQuRDNNN6YwyfH6_6\" cursor = 0 count = 10
         * @summary 获取用户音乐列表数据/Get user music list data
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet(secUid: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet(secUid, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户音乐列表数据 ### 参数: - sec_uid: 用户sec_uid - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 用户音乐列表数据  # [English] ### Purpose: - Get user music list data ### Parameters: - sec_uid: User sec_uid - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number  # [示例/Example] sec_uid = \"MS4wLjABAAAAqB08cUbXaDWqbD6MCga2RbGTuhfO2EsHayBYx08NDrN7IE3jQuRDNNN6YwyfH6_6\" cursor = 0 count = 10
         * @summary 获取用户音乐列表数据/Get user music list data
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_45(secUid: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_45(secUid, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户作品数据，如果sec_user_id为空，则使用unique_id获取用户作品数据。 - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量，建议保持默认值20。 - sort_type: 排序类型，0-最新，1-热门 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户作品数据，unique_id也是用户的用户名。 - 关于用户ID的参数，优先级为sec_user_id > unique_id，优先级越高速度越快，并且建议只使用sec_user_id获取用户数据。 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id, use sec_user_id to get user video data first, if sec_user_id is empty, use unique_id to get user video data. - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number - sort_type: Sort type, 0-Latest, 1-Hot - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user video data, unique_id is also the user\'s username. - About the parameters of user ID, the priority is sec_user_id > unique_id, the higher the priority, the faster the speed, and it is recommended to use only sec_user_id to get user data. ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20 sort_type = 0 unique_id = \"tiktok\"
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [uniqueId] 用户unique_id/User unique_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [sortType] 排序类型/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet(secUserId?: string, uniqueId?: string, maxCursor?: number, count?: number, sortType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet(secUserId, uniqueId, maxCursor, count, sortType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户作品数据，如果sec_user_id为空，则使用unique_id获取用户作品数据。 - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量，建议保持默认值20。 - sort_type: 排序类型，0-最新，1-热门 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户作品数据，unique_id也是用户的用户名。 - 关于用户ID的参数，优先级为sec_user_id > unique_id，优先级越高速度越快，并且建议只使用sec_user_id获取用户数据。 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id, use sec_user_id to get user video data first, if sec_user_id is empty, use unique_id to get user video data. - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number - sort_type: Sort type, 0-Latest, 1-Hot - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user video data, unique_id is also the user\'s username. - About the parameters of user ID, the priority is sec_user_id > unique_id, the higher the priority, the faster the speed, and it is recommended to use only sec_user_id to get user data. ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20 sort_type = 0 unique_id = \"tiktok\"
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [uniqueId] 用户unique_id/User unique_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [sortType] 排序类型/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_46(secUserId?: string, uniqueId?: string, maxCursor?: number, count?: number, sortType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_46(secUserId, uniqueId, maxCursor, count, sortType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户转发的作品数据 ### 参数: - user_id: 用户id，可以通过 handler_user_profile 端点获取，响应中的关键字为uid。 - offset: 偏移量 - count: 数量 ### 返回: - 用户转发作品数据  # [English] ### Purpose: - Get user repost video data ### Parameters: - user_id: User id, which can be obtained through the handler_user_profile endpoint, with the keyword uid in the response. - offset: Offset - count: Number ### Return: - User repost video data  # [示例/Example] user_id = 107955 offset = 0 count = 21
         * @summary 获取用户转发的作品数据/Get user repost video data
         * @param {number} userId 用户id/User id
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet(userId: number, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet(userId, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户转发的作品数据 ### 参数: - user_id: 用户id，可以通过 handler_user_profile 端点获取，响应中的关键字为uid。 - offset: 偏移量 - count: 数量 ### 返回: - 用户转发作品数据  # [English] ### Purpose: - Get user repost video data ### Parameters: - user_id: User id, which can be obtained through the handler_user_profile endpoint, with the keyword uid in the response. - offset: Offset - count: Number ### Return: - User repost video data  # [示例/Example] user_id = 107955 offset = 0 count = 21
         * @summary 获取用户转发的作品数据/Get user repost video data
         * @param {number} userId 用户id/User id
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_47(userId: number, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_47(userId, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"
         * @summary 获取指定关键词的用户搜索结果/Get user search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [userSearchFollowerCount] 根据粉丝数排序/Sort by number of followers
         * @param {string} [userSearchProfileType] 根据账号类型排序/Sort by account type
         * @param {string} [userSearchOtherPref] 根据其他偏好排序/Sort by other preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet(keyword: string, offset?: number, count?: number, userSearchFollowerCount?: string, userSearchProfileType?: string, userSearchOtherPref?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet(keyword, offset, count, userSearchFollowerCount, userSearchProfileType, userSearchOtherPref, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"
         * @summary 获取指定关键词的用户搜索结果/Get user search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [userSearchFollowerCount] 根据粉丝数排序/Sort by number of followers
         * @param {string} [userSearchProfileType] 根据账号类型排序/Sort by account type
         * @param {string} [userSearchOtherPref] 根据其他偏好排序/Sort by other preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_48(keyword: string, offset?: number, count?: number, userSearchFollowerCount?: string, userSearchProfileType?: string, userSearchOtherPref?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_48(keyword, offset, count, userSearchFollowerCount, userSearchProfileType, userSearchOtherPref, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet(awemeId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_49(awemeId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_49(awemeId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet(itemId, commentId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_50(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_50(itemId, commentId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet(keyword, offset, count, sortType, publishTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_51(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_51(keyword, offset, count, sortType, publishTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户信息。 - user_id: 用户uid，可选参数，纯数字，如果使用请保持sec_user_id以及unique_id为空。 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户信息，unique_id也是用户的用户名，如果使用请保持sec_user_id以及user_id为空。 - 以上参数必须至少填写一个，优先级为sec_user_id > user_id > unique_id，优先级越高速度越快。 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id - user_id: User uid, optional parameter, pure number, if used, please keep sec_user_id and unique_id empty. - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user information, unique_id is also the user\'s username, if used, please keep sec_user_id and user_id empty. - At least one of the above parameters must be filled in, the priority is sec_user_id > user_id > unique_id, the higher the priority, the faster the speed. ### Return: - User information  # [示例/Example] user_id = \"107955\" sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" unique_id = \"tiktok\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} [userId] 用户uid （可选，纯数字）/User uid (optional, pure number)
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [uniqueId] 用户unique_id （用户名）/User unique_id (username)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet(userId?: string, secUserId?: string, uniqueId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet(userId, secUserId, uniqueId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户信息。 - user_id: 用户uid，可选参数，纯数字，如果使用请保持sec_user_id以及unique_id为空。 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户信息，unique_id也是用户的用户名，如果使用请保持sec_user_id以及user_id为空。 - 以上参数必须至少填写一个，优先级为sec_user_id > user_id > unique_id，优先级越高速度越快。 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id - user_id: User uid, optional parameter, pure number, if used, please keep sec_user_id and unique_id empty. - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user information, unique_id is also the user\'s username, if used, please keep sec_user_id and user_id empty. - At least one of the above parameters must be filled in, the priority is sec_user_id > user_id > unique_id, the higher the priority, the faster the speed. ### Return: - User information  # [示例/Example] user_id = \"107955\" sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" unique_id = \"tiktok\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} [userId] 用户uid （可选，纯数字）/User uid (optional, pure number)
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [uniqueId] 用户unique_id （用户名）/User unique_id (username)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_52(userId?: string, secUserId?: string, uniqueId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_52(userId, secUserId, uniqueId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] keyword = \"Evil0ctal\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果/Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result
         * @param {string} keyword 关键词/Keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet(keyword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).openTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet(keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] keyword = \"Evil0ctal\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果/Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result
         * @param {string} keyword 关键词/Keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet_53(keyword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).openTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet_53(keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and send private messages to specified users  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid = \"7059867056504407087\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信/Generate TikTok share link, call TikTok APP, and send private messages to specified users
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).openTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and send private messages to specified users  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid = \"7059867056504407087\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信/Generate TikTok share link, call TikTok APP, and send private messages to specified users
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet_54(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).openTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet_54(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified user profile  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid = \"7059867056504407087\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页/Generate TikTok share link, call TikTok APP, and jump to the specified user profile
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).openTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified user profile  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid = \"7059867056504407087\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页/Generate TikTok share link, call TikTok APP, and jump to the specified user profile
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet_55(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).openTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet_55(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified video  ### Parameters: - aweme_id: Video id - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] aweme_id = \"7440436579409153311\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页/Generate TikTok share link, call TikTok APP, and jump to the specified video details page
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).openTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified video  ### Parameters: - aweme_id: Video id - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] aweme_id = \"7440436579409153311\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页/Generate TikTok share link, call TikTok APP, and jump to the specified video details page
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet_56(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).openTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet_56(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - TikTok APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，不要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device for TikTok APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, without http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy = \"username:password@ip:port\"  # [响应/Response] ```json {    \"code\":200,    \"router\":\"/api/v1/tiktok/app/v3/register_device\",    \"params\":{       \"proxy\":\"username:password@ip:port\"    },    \"data\":{       \"cookie\":\"install_id=7417331203928426283; store-country-code=us; store-country-code-src=did; store-idc=useast5; ttreq=1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\",       \"id\":\"eyJhYyI6ICJ3aWZpIiwgImNoYW5uZWwiOiAiZ29vZ2xlcGxheSIsICJhaWQiOiAiMTIzMyIsICJhcHBfbmFtZSI6ICJtdXNpY2FsX2x5IiwgInZlcnNpb25fY29kZSI6ICIyNjA2MDIiLCAidmVyc2lvbl9uYW1lIjogIjI2LjYuMiIsICJkZXZpY2VfcGxhdGZvcm0iOiAiYW5kcm9pZCIsICJhYl92ZXJzaW9uIjogIjI2LjYuMiIsICJzc21peCI6ICJhIiwgImRldmljZV90eXBlIjogIlBPVC1MWDQ2IiwgImRldmljZV9icmFuZCI6ICJIVUFXRUkiLCAiZGV2aWNlX21vZGVsIjogIlBPVC1MWDQ2IiwgImxhbmd1YWdlIjogImVuIiwgIm9zX2FwaSI6ICIyOSIsICJvc192ZXJzaW9uIjogIjEwIiwgIm1hbmlmZXN0X3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgInJlc29sdXRpb24iOiAiMTA4MCoyMzQwIiwgImRwaSI6ICI0ODAiLCAidXBkYXRlX3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgImFwcF9za2luIjogIndoaXRlIiwgImFwcF90eXBlIjogIm5vcm1hbCIsICJyZXNpZGVuY2UiOiAiVVMiLCAic3lzX3JlZ2lvbiI6ICJVUyIsICJwYXNzLXJvdXRlIjogIjEiLCAibWNjX21uYyI6ICIzMTAyNjAiLCAicGFzcy1yZWdpb24iOiAiMSIsICJ0aW1lem9uZV9uYW1lIjogIkFtZXJpY2ElMkZOZXdfWW9yayIsICJjYXJyaWVyX3JlZ2lvbl92MiI6ICIzMTAiLCAiY3B1X3N1cHBvcnQ2NCI6ICJ0cnVlIiwgImhvc3RfYWJpIjogImFybTY0LXY4YSIsICJhcHBfbGFuZ3VhZ2UiOiAiZW4iLCAiY2Fycmllcl9yZWdpb24iOiAiVVMiLCAiYWMyIjogIndpZmkiLCAidW9vIjogIjEiLCAib3BfcmVnaW9uIjogIlVTIiwgInRpbWV6b25lX29mZnNldCI6IC0xNDQwMCwgImJ1aWxkX251bWJlciI6ICIyNi42LjIiLCAibG9jYWxlIjogImVuIiwgInJlZ2lvbiI6ICJVUyIsICJvcGVudWRpZCI6ICI0ZTM5NzdlNmJhNWNhZDc0IiwgImNkaWQiOiAiYjFkOTA2YzMtOTYxMy00MWM1LTk4ZjgtZDZhYWJjOTdiMTExIiwgImRldmljZV9pZCI6ICI3NDE3MzMwOTk5MDIzNTAyODkwIiwgImlpZCI6ICI3NDE3MzMxMjAzOTI4NDI2MjgzIiwgInVzZXJfYWdlbnQiOiAiY29tLnpoaWxpYW9hcHAubXVzaWNhbGx5LzIwMjI2MDYwMjAgKExpbnV4OyBVOyBBbmRyb2lkIDEwLjAuMDsgZW47IEhVQVdFSSBQT1QtTFg0NjsgQnVpbGQvT1BSNi4xNzA2MjMuMDE3O3R0LW9rLzMuMTIuMTMuMSkiLCAiY29va2llIjogImluc3RhbGxfaWQ9NzQxNzMzMTIwMzkyODQyNjI4Mzsgc3RvcmUtY291bnRyeS1jb2RlPXVzOyBzdG9yZS1jb3VudHJ5LWNvZGUtc3JjPWRpZDsgc3RvcmUtaWRjPXVzZWFzdDU7IHR0cmVxPTEkODViMWY1YjBiNDBhZWIwZmY3NjU5OGE2YTk0ZmNiMDcwNGIxMGQ3NCIsICJwcm94eSI6ICJodHRwOi8vMTU0LjIwMi4xMDcuMjAyOjMxMjgifQ==\",       \"tiktok_info\":{          \"cdid\":\"b1d906c3-9613-41c5-98f8-d6aabc97b111\",          \"cookie\":\"install_id=7417331203928426283; store-country-code=us; store-country-code-src=did; store-idc=useast5; ttreq=1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\",          \"device_brand\":\"HUAWEI\",          \"device_type\":\"POT-LX46\",          \"did\":\"7417330999023502890\",          \"iid\":\"7417331203928426283\",          \"mcc_mnc\":\"310260\",          \"openudid\":\"4e3977e6ba5cad74\",          \"os_api\":\"29\",          \"os_version\":\"10\",          \"user_agent\":\"okhttp/3.10.0.1\",          \"version_code\":\"260602\",          \"version_name\":\"26.6.2\"       }    } } ```
         * @summary 注册设备信息/Register device information
         * @param {string} [proxy] 代理/Proxy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerDeviceApiV1TiktokAppV3RegisterDeviceGet(proxy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).registerDeviceApiV1TiktokAppV3RegisterDeviceGet(proxy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - TikTok APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，不要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device for TikTok APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, without http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy = \"username:password@ip:port\"  # [响应/Response] ```json {    \"code\":200,    \"router\":\"/api/v1/tiktok/app/v3/register_device\",    \"params\":{       \"proxy\":\"username:password@ip:port\"    },    \"data\":{       \"cookie\":\"install_id=7417331203928426283; store-country-code=us; store-country-code-src=did; store-idc=useast5; ttreq=1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\",       \"id\":\"eyJhYyI6ICJ3aWZpIiwgImNoYW5uZWwiOiAiZ29vZ2xlcGxheSIsICJhaWQiOiAiMTIzMyIsICJhcHBfbmFtZSI6ICJtdXNpY2FsX2x5IiwgInZlcnNpb25fY29kZSI6ICIyNjA2MDIiLCAidmVyc2lvbl9uYW1lIjogIjI2LjYuMiIsICJkZXZpY2VfcGxhdGZvcm0iOiAiYW5kcm9pZCIsICJhYl92ZXJzaW9uIjogIjI2LjYuMiIsICJzc21peCI6ICJhIiwgImRldmljZV90eXBlIjogIlBPVC1MWDQ2IiwgImRldmljZV9icmFuZCI6ICJIVUFXRUkiLCAiZGV2aWNlX21vZGVsIjogIlBPVC1MWDQ2IiwgImxhbmd1YWdlIjogImVuIiwgIm9zX2FwaSI6ICIyOSIsICJvc192ZXJzaW9uIjogIjEwIiwgIm1hbmlmZXN0X3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgInJlc29sdXRpb24iOiAiMTA4MCoyMzQwIiwgImRwaSI6ICI0ODAiLCAidXBkYXRlX3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgImFwcF9za2luIjogIndoaXRlIiwgImFwcF90eXBlIjogIm5vcm1hbCIsICJyZXNpZGVuY2UiOiAiVVMiLCAic3lzX3JlZ2lvbiI6ICJVUyIsICJwYXNzLXJvdXRlIjogIjEiLCAibWNjX21uYyI6ICIzMTAyNjAiLCAicGFzcy1yZWdpb24iOiAiMSIsICJ0aW1lem9uZV9uYW1lIjogIkFtZXJpY2ElMkZOZXdfWW9yayIsICJjYXJyaWVyX3JlZ2lvbl92MiI6ICIzMTAiLCAiY3B1X3N1cHBvcnQ2NCI6ICJ0cnVlIiwgImhvc3RfYWJpIjogImFybTY0LXY4YSIsICJhcHBfbGFuZ3VhZ2UiOiAiZW4iLCAiY2Fycmllcl9yZWdpb24iOiAiVVMiLCAiYWMyIjogIndpZmkiLCAidW9vIjogIjEiLCAib3BfcmVnaW9uIjogIlVTIiwgInRpbWV6b25lX29mZnNldCI6IC0xNDQwMCwgImJ1aWxkX251bWJlciI6ICIyNi42LjIiLCAibG9jYWxlIjogImVuIiwgInJlZ2lvbiI6ICJVUyIsICJvcGVudWRpZCI6ICI0ZTM5NzdlNmJhNWNhZDc0IiwgImNkaWQiOiAiYjFkOTA2YzMtOTYxMy00MWM1LTk4ZjgtZDZhYWJjOTdiMTExIiwgImRldmljZV9pZCI6ICI3NDE3MzMwOTk5MDIzNTAyODkwIiwgImlpZCI6ICI3NDE3MzMxMjAzOTI4NDI2MjgzIiwgInVzZXJfYWdlbnQiOiAiY29tLnpoaWxpYW9hcHAubXVzaWNhbGx5LzIwMjI2MDYwMjAgKExpbnV4OyBVOyBBbmRyb2lkIDEwLjAuMDsgZW47IEhVQVdFSSBQT1QtTFg0NjsgQnVpbGQvT1BSNi4xNzA2MjMuMDE3O3R0LW9rLzMuMTIuMTMuMSkiLCAiY29va2llIjogImluc3RhbGxfaWQ9NzQxNzMzMTIwMzkyODQyNjI4Mzsgc3RvcmUtY291bnRyeS1jb2RlPXVzOyBzdG9yZS1jb3VudHJ5LWNvZGUtc3JjPWRpZDsgc3RvcmUtaWRjPXVzZWFzdDU7IHR0cmVxPTEkODViMWY1YjBiNDBhZWIwZmY3NjU5OGE2YTk0ZmNiMDcwNGIxMGQ3NCIsICJwcm94eSI6ICJodHRwOi8vMTU0LjIwMi4xMDcuMjAyOjMxMjgifQ==\",       \"tiktok_info\":{          \"cdid\":\"b1d906c3-9613-41c5-98f8-d6aabc97b111\",          \"cookie\":\"install_id=7417331203928426283; store-country-code=us; store-country-code-src=did; store-idc=useast5; ttreq=1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\",          \"device_brand\":\"HUAWEI\",          \"device_type\":\"POT-LX46\",          \"did\":\"7417330999023502890\",          \"iid\":\"7417331203928426283\",          \"mcc_mnc\":\"310260\",          \"openudid\":\"4e3977e6ba5cad74\",          \"os_api\":\"29\",          \"os_version\":\"10\",          \"user_agent\":\"okhttp/3.10.0.1\",          \"version_code\":\"260602\",          \"version_name\":\"26.6.2\"       }    } } ```
         * @summary 注册设备信息/Register device information
         * @param {string} [proxy] 代理/Proxy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerDeviceApiV1TiktokAppV3RegisterDeviceGet_57(proxy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).registerDeviceApiV1TiktokAppV3RegisterDeviceGet_57(proxy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - TikTok APP加密算法，用于生成请求头中的加密参数。 - 生成的加密参数列表：     - `x-ladon`     - `x-khronos`     - `x-argus`     - `x-gorgon` （8404）  ### 参数: - url: 需要加密的完整URL - data: 如果接口是POST请求，请填写POST请求的数据参与加密计算，GET请求时传入空字符串即可。 - device_info: 设备信息，可选参数，如果不填写则使用默认设备信息，设备信息会修改传入的URL中的参数。  ### 返回: - 加密参数列表  # [English] ### Purpose: - TikTok APP encryption algorithm, used to generate encrypted parameters in the request header. - The generated encrypted parameter list:     - `x-ladon`     - `x-khronos`     - `x-argus`     - `x-gorgon` (8404)  ### Parameters: - url: Full URL to be encrypted - data: If the interface is a POST request, please fill in the data of the POST request to participate in the encryption calculation. For GET requests, pass an empty string. - device_info: Device information, optional parameter, if not filled in, the default device information will be used, and the device information will modify the parameters in the URL passed in.  ### Return: - Encrypted parameter list
         * @summary TikTok APP加密算法/TikTok APP encryption algorithm
         * @param {TikTokAppEncryptRequest} [tikTokAppEncryptRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost(tikTokAppEncryptRequest?: TikTokAppEncryptRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).tTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost(tikTokAppEncryptRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - TikTok APP加密算法，用于生成请求头中的加密参数。 - 生成的加密参数列表：     - `x-ladon`     - `x-khronos`     - `x-argus`     - `x-gorgon` （8404）  ### 参数: - url: 需要加密的完整URL - data: 如果接口是POST请求，请填写POST请求的数据参与加密计算，GET请求时传入空字符串即可。 - device_info: 设备信息，可选参数，如果不填写则使用默认设备信息，设备信息会修改传入的URL中的参数。  ### 返回: - 加密参数列表  # [English] ### Purpose: - TikTok APP encryption algorithm, used to generate encrypted parameters in the request header. - The generated encrypted parameter list:     - `x-ladon`     - `x-khronos`     - `x-argus`     - `x-gorgon` (8404)  ### Parameters: - url: Full URL to be encrypted - data: If the interface is a POST request, please fill in the data of the POST request to participate in the encryption calculation. For GET requests, pass an empty string. - device_info: Device information, optional parameter, if not filled in, the default device information will be used, and the device information will modify the parameters in the URL passed in.  ### Return: - Encrypted parameter list
         * @summary TikTok APP加密算法/TikTok APP encryption algorithm
         * @param {TikTokAppEncryptRequest} [tikTokAppEncryptRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost_58(tikTokAppEncryptRequest?: TikTokAppEncryptRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV3APIApiAxiosParamCreator(configuration).tTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost_58(tikTokAppEncryptRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TikTokAppV3APIApi - factory interface
 * @export
 */
export const TikTokAppV3APIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 根据视频ID来增加作品的播放数 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - invite_code: 邀请码，此接口需要邀请码才能使用。 ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - invite_code: Invite code, this interface requires an invite code to use. ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type = 0 item_id = \"7419966340443819295\" cookie = None
         * @summary 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
         * @param {number} awemeType 作品类型/Video type
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet(awemeType: number, itemId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).addVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet(awemeType, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据视频ID来增加作品的播放数 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - invite_code: 邀请码，此接口需要邀请码才能使用。 ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - invite_code: Invite code, this interface requires an invite code to use. ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type = 0 item_id = \"7419966340443819295\" cookie = None
         * @summary 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
         * @param {number} awemeType 作品类型/Video type
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet_1(awemeType: number, itemId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).addVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet_1(awemeType, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 检测直播间是否在线 - 直播间的Room ID可以通过直播间链接从`/api/v1/tiktok/web/get_live_room_id`接口获取 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online - The Room ID of the live room can be obtained from the `/api/v1/tiktok/web/get_live_room_id` interface through the live room link ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"
         * @summary 检测直播间是否在线/Check if live room is online
         * @param {string} roomId 直播间id/Live room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet(roomId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 检测直播间是否在线 - 直播间的Room ID可以通过直播间链接从`/api/v1/tiktok/web/get_live_room_id`接口获取 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online - The Room ID of the live room can be obtained from the `/api/v1/tiktok/web/get_live_room_id` interface through the live room link ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"
         * @summary 检测直播间是否在线/Check if live room is online
         * @param {string} roomId 直播间id/Live room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_2(roomId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_2(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 加密/解密 TikTok APP 登录请求体，用于登录接口的请求体加密和解密。 ### 参数: - username: 用户名，可以是密文或明文。 - password: 密码，可以是密文或明文。 - mode: 模式     - `encrypt`: 加密     - `decrypt`: 解密 ### 返回: - 加密/解密后的请求体  # [English] ### Purpose: - Encrypt/decrypt the TikTok APP login request body, used for encrypting and decrypting the request body of the login interface. ### Parameters: - username: Username, can be ciphertext or plaintext. - password: Password, can be ciphertext or plaintext. - mode: Mode     - `encrypt`: Encrypt     - `decrypt`: Decrypt ### Return: - Encrypted/decrypted request body  # [示例/Example] ```json {     \"username\": \"example_username\",     \"password\": \"example_password\",     \"mode\": \"encrypt\" } ```
         * @summary 加密或解密 TikTok APP 登录请求体/Encrypt or Decrypt TikTok APP login request body
         * @param {TikTokAppLoginEncryptDecryptRequest} [tikTokAppLoginEncryptDecryptRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost(tikTokAppLoginEncryptDecryptRequest?: TikTokAppLoginEncryptDecryptRequest, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).encryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost(tikTokAppLoginEncryptDecryptRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 加密/解密 TikTok APP 登录请求体，用于登录接口的请求体加密和解密。 ### 参数: - username: 用户名，可以是密文或明文。 - password: 密码，可以是密文或明文。 - mode: 模式     - `encrypt`: 加密     - `decrypt`: 解密 ### 返回: - 加密/解密后的请求体  # [English] ### Purpose: - Encrypt/decrypt the TikTok APP login request body, used for encrypting and decrypting the request body of the login interface. ### Parameters: - username: Username, can be ciphertext or plaintext. - password: Password, can be ciphertext or plaintext. - mode: Mode     - `encrypt`: Encrypt     - `decrypt`: Decrypt ### Return: - Encrypted/decrypted request body  # [示例/Example] ```json {     \"username\": \"example_username\",     \"password\": \"example_password\",     \"mode\": \"encrypt\" } ```
         * @summary 加密或解密 TikTok APP 登录请求体/Encrypt or Decrypt TikTok APP login request body
         * @param {TikTokAppLoginEncryptDecryptRequest} [tikTokAppLoginEncryptDecryptRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost_3(tikTokAppLoginEncryptDecryptRequest?: TikTokAppLoginEncryptDecryptRequest, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).encryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost_3(tikTokAppLoginEncryptDecryptRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取内容翻译数据 ### 参数: - trg_lang: 目标语言     - zh-Hans: 简体中文     - zh-Hant: 繁体中文     - en: 英语     - ja: 日语     - ko: 韩语     - fr: 法语     - de: 德语     - ru: 俄语     - es: 西班牙语     - pt: 葡萄牙语     - vi: 越南语     - th: 泰语     - id: 印尼语     - ar: 阿拉伯语     - it: 意大利语     - tr: 土耳其语     - he: 希伯来语     - pl: 波兰语     - nl: 荷兰语     - sv: 瑞典语     - da: 丹麦语     - fi: 芬兰语     - no: 挪威语     - cs: 捷克语     - hu: 匈牙利语 - src_content: 源内容，也就是需要翻译的内容，长度不超过5000个字符，如果超过5000个字符，只会翻译前5000个字符。 ### 返回: - 内容翻译数据  # [English] ### Purpose: - Get content translation data ### Parameters: - trg_lang: Target language     - zh-Hans: Simplified Chinese     - zh-Hant: Traditional Chinese     - en: English     - ja: Japanese     - ko: Korean     - fr: French     - de: German     - ru: Russian     - es: Spanish     - pt: Portuguese     - vi: Vietnamese     - th: Thai     - id: Indonesian     - ar: Arabic     - it: Italian     - tr: Turkish     - he: Hebrew     - pl: Polish     - nl: Dutch     - sv: Swedish     - da: Danish     - fi: Finnish     - no: Norwegian     - cs: Czech     - hu: Hungarian - src_content: Source content, that is, the content that needs to be translated, the length does not exceed 5000 characters, if it exceeds 5000 characters, only the first 5000 characters will be translated. ### Return: - Content translation data  # [示例/Example] trg_lang = \"zh-Hans\" src_content = \"Hello, welcome to TikHub!\"
         * @summary 获取内容翻译数据/Get content translation data
         * @param {TikTokAppV3ContentTranslate} [tikTokAppV3ContentTranslate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost(tikTokAppV3ContentTranslate?: TikTokAppV3ContentTranslate, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost(tikTokAppV3ContentTranslate, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取内容翻译数据 ### 参数: - trg_lang: 目标语言     - zh-Hans: 简体中文     - zh-Hant: 繁体中文     - en: 英语     - ja: 日语     - ko: 韩语     - fr: 法语     - de: 德语     - ru: 俄语     - es: 西班牙语     - pt: 葡萄牙语     - vi: 越南语     - th: 泰语     - id: 印尼语     - ar: 阿拉伯语     - it: 意大利语     - tr: 土耳其语     - he: 希伯来语     - pl: 波兰语     - nl: 荷兰语     - sv: 瑞典语     - da: 丹麦语     - fi: 芬兰语     - no: 挪威语     - cs: 捷克语     - hu: 匈牙利语 - src_content: 源内容，也就是需要翻译的内容，长度不超过5000个字符，如果超过5000个字符，只会翻译前5000个字符。 ### 返回: - 内容翻译数据  # [English] ### Purpose: - Get content translation data ### Parameters: - trg_lang: Target language     - zh-Hans: Simplified Chinese     - zh-Hant: Traditional Chinese     - en: English     - ja: Japanese     - ko: Korean     - fr: French     - de: German     - ru: Russian     - es: Spanish     - pt: Portuguese     - vi: Vietnamese     - th: Thai     - id: Indonesian     - ar: Arabic     - it: Italian     - tr: Turkish     - he: Hebrew     - pl: Polish     - nl: Dutch     - sv: Swedish     - da: Danish     - fi: Finnish     - no: Norwegian     - cs: Czech     - hu: Hungarian - src_content: Source content, that is, the content that needs to be translated, the length does not exceed 5000 characters, if it exceeds 5000 characters, only the first 5000 characters will be translated. ### Return: - Content translation data  # [示例/Example] trg_lang = \"zh-Hans\" src_content = \"Hello, welcome to TikHub!\"
         * @summary 获取内容翻译数据/Get content translation data
         * @param {TikTokAppV3ContentTranslate} [tikTokAppV3ContentTranslate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_4(tikTokAppV3ContentTranslate?: TikTokAppV3ContentTranslate, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_4(tikTokAppV3ContentTranslate, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取创作者信息，包括创作者的基本信息、粉丝数、橱窗商品数量等信息。 ### 参数: - creator_uid: 创作者uid ### 返回: - 创作者信息  # [English] ### Purpose: - Get creator information, including the creator\'s basic information, number of fans, number of storefront products, etc. ### Parameters: - creator_uid: Creator uid ### Return: - Creator information  # [示例/Example] creator_uid = \"6555451606845243393\"
         * @summary 获取创作者信息/Get creator information
         * @param {string} creatorUid 创作者uid/Creator uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet(creatorUid: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet(creatorUid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取创作者信息，包括创作者的基本信息、粉丝数、橱窗商品数量等信息。 ### 参数: - creator_uid: 创作者uid ### 返回: - 创作者信息  # [English] ### Purpose: - Get creator information, including the creator\'s basic information, number of fans, number of storefront products, etc. ### Parameters: - creator_uid: Creator uid ### Return: - Creator information  # [示例/Example] creator_uid = \"6555451606845243393\"
         * @summary 获取创作者信息/Get creator information
         * @param {string} creatorUid 创作者uid/Creator uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet_5(creatorUid: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet_5(creatorUid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取创作者橱窗商品列表 ### 参数: - kol_id: 创作者的sec_user_id - count: 数量 - next_scroll_param: 翻页参数，第一页为空字符串，后续请求使用上一次请求返回的next_scroll_param值。 ### 返回: - 创作者橱窗商品列表  # [English] ### Purpose: - Get creator showcase product list ### Parameters: - kol_id: Creator\'s sec_user_id - count: Number - next_scroll_param: Page parameter, empty string for the first page, use the next_scroll_param value returned by the last request for subsequent requests. ### Return: - Creator showcase product list  # [示例/Example] kol_id = \"MS4wLjABAAAARujvKaVWqgbVCwuxQghA99TUa5I-4g6jVzMXZd9FJIXSdJwJM47vm4-2T1K3gsux\" count = 20 next_scroll_param = \"\"
         * @summary 获取创作者橱窗商品列表/Get creator showcase product list
         * @param {string} kolId 创作者的sec_user_id/Creator\&#39;s sec_user_id
         * @param {number} [count] 数量/Number
         * @param {string} [nextScrollParam] 翻页参数/Page parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet(kolId: string, count?: number, nextScrollParam?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet(kolId, count, nextScrollParam, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取创作者橱窗商品列表 ### 参数: - kol_id: 创作者的sec_user_id - count: 数量 - next_scroll_param: 翻页参数，第一页为空字符串，后续请求使用上一次请求返回的next_scroll_param值。 ### 返回: - 创作者橱窗商品列表  # [English] ### Purpose: - Get creator showcase product list ### Parameters: - kol_id: Creator\'s sec_user_id - count: Number - next_scroll_param: Page parameter, empty string for the first page, use the next_scroll_param value returned by the last request for subsequent requests. ### Return: - Creator showcase product list  # [示例/Example] kol_id = \"MS4wLjABAAAARujvKaVWqgbVCwuxQghA99TUa5I-4g6jVzMXZd9FJIXSdJwJM47vm4-2T1K3gsux\" count = 20 next_scroll_param = \"\"
         * @summary 获取创作者橱窗商品列表/Get creator showcase product list
         * @param {string} kolId 创作者的sec_user_id/Creator\&#39;s sec_user_id
         * @param {number} [count] 数量/Number
         * @param {string} [nextScrollParam] 翻页参数/Page parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet_6(kolId: string, count?: number, nextScrollParam?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet_6(kolId, count, nextScrollParam, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet(keyword, offset, count, sortType, publishTime, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_7(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_7(keyword, offset, count, sortType, publishTime, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet(chId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet(chId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_8(chId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_8(chId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_9(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_9(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet(chId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet(chId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_10(chId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_10(chId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - cookie: User\'s own cookie, optional parameter, used for personalized recommendation of interface returned data. ### Return: - Video recommend data
         * @summary 获取主页视频推荐数据/Get home feed(recommend) video data
         * @param {TikTokAppV3HomeFeed} [tikTokAppV3HomeFeed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost(tikTokAppV3HomeFeed?: TikTokAppV3HomeFeed, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost(tikTokAppV3HomeFeed, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - cookie: User\'s own cookie, optional parameter, used for personalized recommendation of interface returned data. ### Return: - Video recommend data
         * @summary 获取主页视频推荐数据/Get home feed(recommend) video data
         * @param {TikTokAppV3HomeFeed} [tikTokAppV3HomeFeed] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost_11(tikTokAppV3HomeFeed?: TikTokAppV3HomeFeed, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost_11(tikTokAppV3HomeFeed, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取直播每日榜单数据 ### 参数: - anchor_id: 主播id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的主播id。 - room_id: 直播间id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的id。 - rank_type: 榜单类型     - `0`: 每小时排行榜     - `1`: 每周排行榜     - `5`: 新星排行榜     - `6`: 销售排行榜     - `8`: 每日排行榜     - `10`: 游戏排行榜     - `11`: 每日游戏排行榜     - `12`: 名人堂排行榜     - `13`: 冠军赛排行榜     - `14`: 每日新秀排行榜     - `15`: 人气直播榜     - `16`: D5段位榜     - `20`: 绝地求生排行榜     - `21`: 王者荣耀排行榜     - `22`: Free Fire 排行榜     - `1001`: 联盟竞赛排行榜     - `-1`: 未知排行榜 - region_type: 地区类型，使用默认值即可，具体含义不明。 - gap_interval: 时间间隔，使用默认值代表当天，使用-1代表排名记录。 - cookie: 用户自己的cookie，可选参数，用于接口不可用时使用。 ### 返回: - 直播每日榜单数据  # [English] ### Purpose: - Get live daily rank data ### Parameters: - anchor_id: Anchor id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different anchor ids of different live rooms. - room_id: Live room id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different room ids of different live rooms. - rank_type: Rank type     - `0`: Hourly Rank     - `1`: Weekly Rank     - `5`: Rookie Star Rank     - `6`: Sale Rank     - `8`: Daily Rank     - `10`: Game Rank     - `11`: Daily Game Rank     - `12`: Hall of Fame Rank     - `13`: Champion Tournament Rank     - `14`: Daily Rookie Star Rank     - `15`: Popular Live Stream Rank     - `16`: D5 Level Rank     - `20`: PUBG Rank     - `21`: MLBB Rank     - `22`: Free Fire Rank     - `1001`: League Campaign Rank     - `-1`: Unknown Rank  - region_type: Region type, use the default value, the specific meaning is unknown. - gap_interval: Time interval, use the default value to represent the current day, use -1 to represent the ranking record. - cookie: User\'s own cookie, optional parameter, used when the interface is not available. ### Return: - Live daily rank data
         * @summary 获取直播每日榜单数据/Get live daily rank data
         * @param {string} [anchorId] 主播id/Anchor id
         * @param {string} [roomId] 直播间id/Live room id
         * @param {number} [rankType] 榜单类型/Rank type
         * @param {number} [regionType] 地区类型/Region type
         * @param {number} [gapInterval] 时间间隔/Time interval
         * @param {string} [cookie] 用户自己的cookie/User\&#39;s own cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet(anchorId?: string, roomId?: string, rankType?: number, regionType?: number, gapInterval?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet(anchorId, roomId, rankType, regionType, gapInterval, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取直播每日榜单数据 ### 参数: - anchor_id: 主播id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的主播id。 - room_id: 直播间id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的id。 - rank_type: 榜单类型     - `0`: 每小时排行榜     - `1`: 每周排行榜     - `5`: 新星排行榜     - `6`: 销售排行榜     - `8`: 每日排行榜     - `10`: 游戏排行榜     - `11`: 每日游戏排行榜     - `12`: 名人堂排行榜     - `13`: 冠军赛排行榜     - `14`: 每日新秀排行榜     - `15`: 人气直播榜     - `16`: D5段位榜     - `20`: 绝地求生排行榜     - `21`: 王者荣耀排行榜     - `22`: Free Fire 排行榜     - `1001`: 联盟竞赛排行榜     - `-1`: 未知排行榜 - region_type: 地区类型，使用默认值即可，具体含义不明。 - gap_interval: 时间间隔，使用默认值代表当天，使用-1代表排名记录。 - cookie: 用户自己的cookie，可选参数，用于接口不可用时使用。 ### 返回: - 直播每日榜单数据  # [English] ### Purpose: - Get live daily rank data ### Parameters: - anchor_id: Anchor id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different anchor ids of different live rooms. - room_id: Live room id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different room ids of different live rooms. - rank_type: Rank type     - `0`: Hourly Rank     - `1`: Weekly Rank     - `5`: Rookie Star Rank     - `6`: Sale Rank     - `8`: Daily Rank     - `10`: Game Rank     - `11`: Daily Game Rank     - `12`: Hall of Fame Rank     - `13`: Champion Tournament Rank     - `14`: Daily Rookie Star Rank     - `15`: Popular Live Stream Rank     - `16`: D5 Level Rank     - `20`: PUBG Rank     - `21`: MLBB Rank     - `22`: Free Fire Rank     - `1001`: League Campaign Rank     - `-1`: Unknown Rank  - region_type: Region type, use the default value, the specific meaning is unknown. - gap_interval: Time interval, use the default value to represent the current day, use -1 to represent the ranking record. - cookie: User\'s own cookie, optional parameter, used when the interface is not available. ### Return: - Live daily rank data
         * @summary 获取直播每日榜单数据/Get live daily rank data
         * @param {string} [anchorId] 主播id/Anchor id
         * @param {string} [roomId] 直播间id/Live room id
         * @param {number} [rankType] 榜单类型/Rank type
         * @param {number} [regionType] 地区类型/Region type
         * @param {number} [gapInterval] 时间间隔/Time interval
         * @param {string} [cookie] 用户自己的cookie/User\&#39;s own cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_12(anchorId?: string, roomId?: string, rankType?: number, regionType?: number, gapInterval?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_12(anchorId, roomId, rankType, regionType, gapInterval, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"
         * @summary 获取直播间排行榜数据/Get live room ranking list
         * @param {string} roomId 直播间id/Live room id
         * @param {string} anchorId 主播id/Anchor id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet(roomId: string, anchorId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet(roomId, anchorId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"
         * @summary 获取直播间排行榜数据/Get live room ranking list
         * @param {string} roomId 直播间id/Live room id
         * @param {string} anchorId 主播id/Anchor id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_13(roomId: string, anchorId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_13(roomId, anchorId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定直播间的数据 ### 参数: - room_id: 直播间id ### 返回: - 直播间数据  # [English] ### Purpose: - Get data of specified live room ### Parameters: - room_id: Live room id ### Return: - Live room data  # [示例/Example] room_id = \"7385461256746060575\"
         * @summary 获取指定直播间的数据/Get data of specified live room
         * @param {string} roomId 直播间id/Live room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet(roomId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定直播间的数据 ### 参数: - room_id: 直播间id ### 返回: - 直播间数据  # [English] ### Purpose: - Get data of specified live room ### Parameters: - room_id: Live room id ### Return: - Live room data  # [示例/Example] room_id = \"7385461256746060575\"
         * @summary 获取指定直播间的数据/Get data of specified live room
         * @param {string} roomId 直播间id/Live room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_14(roomId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_14(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取直播间商品列表数据 ### 参数: - room_id: 直播间id，必填参数。 - author_id: 主播id，必填参数。 - page_size: 每页数量，可选参数，默认为15。 - offset: 翻页游标，可选参数，默认为0，每次翻页增加15。 - region: 地区，可选参数，默认为`US`，如果使用其他地区，如：`VN`，请自行携带Cookie，否则无法获取数据。 - cookie: 用户自己的cookie，可选参数，用于爬取除`US`以外的地区数据。 ### 参数获取: - 第一步：使用接口`f\"{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\"`接口获取直播间id（room_id）。 - 第二步：使用接口`f\"{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\"`接口获取直播间信息。 - 第三步：使用第二步返回的JSON数据中使用JSONPATH获取`$.data.data.owner.id_str`字段的值作为主播id（author_id）。 ### 返回: - 直播间商品列表数据  # [English] ### Purpose: - Get live room product list data ### Parameters: - room_id: Live room id, required parameter. - author_id: Anchor id, required parameter. - page_size: Number per page, optional parameter, default is 15. - offset: Page turning cursor, optional parameter, default is 0, increasing by 15 each time. - region: Region, optional parameter, default is `US`, if you use other regions, such as: `VN`, please bring your own Cookie, otherwise you will not be able to get data. - cookie: User\'s own cookie, optional parameter, used to crawl data from regions other than `US`. ### Get Parameters: - Step 1: Use the interface `f\"{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\"` to get the live room id (room_id). - Step 2: Use the interface `f\"{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\"` to get the live room information. - Step 3: Use the JSONPATH in the JSON data returned in the second step to get the value of the field `$.data.data.owner.id_str` as the anchor id (author_id). ### Return: - Live room product list data  # [示例/Example] room_id = \"7420741353250507562\" author_id = \"7408859677050274859\" page_size = 15 offset = 0
         * @summary 获取直播间商品列表数据/Get live room product list data
         * @param {string} roomId 直播间id/Live room id
         * @param {string} authorId 主播id/Anchor id
         * @param {number} [pageSize] 数量/Number
         * @param {number} [offset] 数量/Number
         * @param {string} [region] 地区/Region
         * @param {string} [cookie] 用户自己的cookie/User\&#39;s own cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet(roomId: string, authorId: string, pageSize?: number, offset?: number, region?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet(roomId, authorId, pageSize, offset, region, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取直播间商品列表数据 ### 参数: - room_id: 直播间id，必填参数。 - author_id: 主播id，必填参数。 - page_size: 每页数量，可选参数，默认为15。 - offset: 翻页游标，可选参数，默认为0，每次翻页增加15。 - region: 地区，可选参数，默认为`US`，如果使用其他地区，如：`VN`，请自行携带Cookie，否则无法获取数据。 - cookie: 用户自己的cookie，可选参数，用于爬取除`US`以外的地区数据。 ### 参数获取: - 第一步：使用接口`f\"{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\"`接口获取直播间id（room_id）。 - 第二步：使用接口`f\"{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\"`接口获取直播间信息。 - 第三步：使用第二步返回的JSON数据中使用JSONPATH获取`$.data.data.owner.id_str`字段的值作为主播id（author_id）。 ### 返回: - 直播间商品列表数据  # [English] ### Purpose: - Get live room product list data ### Parameters: - room_id: Live room id, required parameter. - author_id: Anchor id, required parameter. - page_size: Number per page, optional parameter, default is 15. - offset: Page turning cursor, optional parameter, default is 0, increasing by 15 each time. - region: Region, optional parameter, default is `US`, if you use other regions, such as: `VN`, please bring your own Cookie, otherwise you will not be able to get data. - cookie: User\'s own cookie, optional parameter, used to crawl data from regions other than `US`. ### Get Parameters: - Step 1: Use the interface `f\"{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\"` to get the live room id (room_id). - Step 2: Use the interface `f\"{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\"` to get the live room information. - Step 3: Use the JSONPATH in the JSON data returned in the second step to get the value of the field `$.data.data.owner.id_str` as the anchor id (author_id). ### Return: - Live room product list data  # [示例/Example] room_id = \"7420741353250507562\" author_id = \"7408859677050274859\" page_size = 15 offset = 0
         * @summary 获取直播间商品列表数据/Get live room product list data
         * @param {string} roomId 直播间id/Live room id
         * @param {string} authorId 主播id/Anchor id
         * @param {number} [pageSize] 数量/Number
         * @param {number} [offset] 数量/Number
         * @param {string} [region] 地区/Region
         * @param {string} [cookie] 用户自己的cookie/User\&#39;s own cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet_15(roomId: string, authorId: string, pageSize?: number, offset?: number, region?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet_15(roomId, authorId, pageSize, offset, region, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果/Get live search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果/Get live search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_16(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_16(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取地点搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 地点搜索结果  # [English] ### Purpose: - Get location search results ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Location search results  # [示例/Example] keyword = \"Shanghai\" offset = 0 count = 20
         * @summary 获取地点搜索结果/Get location search results
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取地点搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 地点搜索结果  # [English] ### Purpose: - Get location search results ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Location search results  # [示例/Example] keyword = \"Shanghai\" offset = 0 count = 20
         * @summary 获取地点搜索结果/Get location search results
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_17(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_17(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",     ]
         * @summary 批量获取视频信息/Batch Get Video Information
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",     ]
         * @summary 批量获取视频信息/Batch Get Video Information
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_18(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_18(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",     ]
         * @summary 批量获取视频信息 V2/Batch Get Video Information V2
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",     ]
         * @summary 批量获取视频信息 V2/Batch Get Video Information V2
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post_19(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post_19(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet(musicId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet(musicId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_20(musicId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_20(musicId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_21(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_21(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet(musicId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet(musicId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_22(musicId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_22(musicId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_23(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_23(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet(shareUrl: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet(shareUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_24(shareUrl: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_24(shareUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7463308759842966791\"
         * @summary 获取单个作品数据 V2/Get single video data V2
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7463308759842966791\"
         * @summary 获取单个作品数据 V2/Get single video data V2
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get_25(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get_25(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商品详情数据 - 即将弃用，使用 fetch_product_detail_v2 代替 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据  # [English] ### Purpose: - Get product detail data - Will be deprecated, use fetch_product_detail_v2 instead ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data  # [示例/Example] product_id = \"1729385239712731370\"
         * @summary 获取商品详情数据（即将弃用，使用 fetch_product_detail_v2 代替）/Get product detail data (will be deprecated, use fetch_product_detail_v2 instead)
         * @param {string} productId 商品id/Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet(productId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商品详情数据 - 即将弃用，使用 fetch_product_detail_v2 代替 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据  # [English] ### Purpose: - Get product detail data - Will be deprecated, use fetch_product_detail_v2 instead ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data  # [示例/Example] product_id = \"1729385239712731370\"
         * @summary 获取商品详情数据（即将弃用，使用 fetch_product_detail_v2 代替）/Get product detail data (will be deprecated, use fetch_product_detail_v2 instead)
         * @param {string} productId 商品id/Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_26(productId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_26(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商品详情数据V2 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V2  # [English] ### Purpose: - Get product detail data V2 ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V2  # [示例/Example] product_id = \"1729385239712731370\"
         * @summary 获取商品详情数据V2/Get product detail data V2
         * @param {string} productId 商品id/Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get(productId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商品详情数据V2 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V2  # [English] ### Purpose: - Get product detail data V2 ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V2  # [示例/Example] product_id = \"1729385239712731370\"
         * @summary 获取商品详情数据V2/Get product detail data V2
         * @param {string} productId 商品id/Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get_27(productId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get_27(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商品详情数据V3，如果商品详情数据V2无法获取，可以尝试使用此接口。 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V3  # [English] ### Purpose: - Get product detail data V3, if the product detail data V2 cannot be obtained, you can try using this interface. ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V3  # [示例/Example] product_id = \"1729385239712731370\"
         * @summary 获取商品详情数据V3/Get product detail data V3
         * @param {string} productId 商品id/Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get(productId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商品详情数据V3，如果商品详情数据V2无法获取，可以尝试使用此接口。 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V3  # [English] ### Purpose: - Get product detail data V3, if the product detail data V2 cannot be obtained, you can try using this interface. ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V3  # [示例/Example] product_id = \"1729385239712731370\"
         * @summary 获取商品详情数据V3/Get product detail data V3
         * @param {string} productId 商品id/Product id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get_28(productId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get_28(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取商品ID ### 参数: - share_link: 分享链接 ### 返回: - 商品ID  # [English] ### Purpose: - Get Product ID by Share Link ### Parameters: - share_link: Share link ### Return: - Product ID  # [示例/Example] share_link = \"https://www.tiktok.com/t/ZT2A9N1kw/\"
         * @summary 通过分享链接获取商品ID/Get Product ID by Share Link
         * @param {string} shareLink 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet(shareLink: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet(shareLink, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取商品ID ### 参数: - share_link: 分享链接 ### 返回: - 商品ID  # [English] ### Purpose: - Get Product ID by Share Link ### Parameters: - share_link: Share link ### Return: - Product ID  # [示例/Example] share_link = \"https://www.tiktok.com/t/ZT2A9N1kw/\"
         * @summary 通过分享链接获取商品ID/Get Product ID by Share Link
         * @param {string} shareLink 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet_29(shareLink: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet_29(shareLink, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商品评价数据 ### 参数: - product_id: 商品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - size: 数量 - filter_id: 筛选条件     - 0: 全部评价     - 1: 1星评价     - 2: 2星评价     - 3: 3星评价     - 4: 4星评价     - 5: 5星评价     - 102: 有图评价     - 104: 已购买的评价 - sort_type: 排序条件     - 1: 相关度     - 2: 从新到旧 ### 返回: - 商品评价数据  # [English] ### Purpose: - Get product review data ### Parameters: - product_id: Product id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - size: Count number - filter_id: Filter condition     - 0: All reviews     - 1: 1-star review     - 2: 2-star review     - 3: 3-star review     - 4: 4-star review     - 5: 5-star review     - 102: Reviews with pictures     - 104: Reviews of purchased products - sort_type: Sorting conditions     - 1: Relevance     - 2: New to old ### Return: - Product review data  # [示例/Example] product_id = \"1729448812983194615\" cursor = 0 size = 10 filter_id = 0 sort_type = 0
         * @summary 获取商品评价数据/Get product review data
         * @param {string} productId 商品id/Product id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [size] 数量/Number
         * @param {number} [filterId] 筛选条件/Filter condition
         * @param {number} [sortType] 排序条件/Sorting conditions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet(productId: string, cursor?: number, size?: number, filterId?: number, sortType?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet(productId, cursor, size, filterId, sortType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商品评价数据 ### 参数: - product_id: 商品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - size: 数量 - filter_id: 筛选条件     - 0: 全部评价     - 1: 1星评价     - 2: 2星评价     - 3: 3星评价     - 4: 4星评价     - 5: 5星评价     - 102: 有图评价     - 104: 已购买的评价 - sort_type: 排序条件     - 1: 相关度     - 2: 从新到旧 ### 返回: - 商品评价数据  # [English] ### Purpose: - Get product review data ### Parameters: - product_id: Product id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - size: Count number - filter_id: Filter condition     - 0: All reviews     - 1: 1-star review     - 2: 2-star review     - 3: 3-star review     - 4: 4-star review     - 5: 5-star review     - 102: Reviews with pictures     - 104: Reviews of purchased products - sort_type: Sorting conditions     - 1: Relevance     - 2: New to old ### Return: - Product review data  # [示例/Example] product_id = \"1729448812983194615\" cursor = 0 size = 10 filter_id = 0 sort_type = 0
         * @summary 获取商品评价数据/Get product review data
         * @param {string} productId 商品id/Product id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [size] 数量/Number
         * @param {number} [filterId] 筛选条件/Filter condition
         * @param {number} [sortType] 排序条件/Sorting conditions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_30(productId: string, cursor?: number, size?: number, filterId?: number, sortType?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_30(productId, cursor, size, filterId, sortType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商品搜索结果 ### 参数: - keyword: 关键词 - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 - sort_type: 商品排序条件     - 1: 综合排序     - 2: 销量排序     - 3: 价格从高到低     - 4: 价格从低到高     - 5: 最新发布 - customer_review_four_star: 四星以上评价 - have_discount: 有优惠 - min_price: 最低价格 - max_price: 最高价格 ### 返回: - 商品搜索结果  # [English] ### Purpose: - Get product search results ### Parameters: - keyword: Keyword - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number - sort_type: Product sorting conditions     - 1: Comprehensive sorting     - 2: Sales volume sorting     - 3: Price high to low     - 4: Price low to high     - 5: Latest release - customer_review_four_star: Four-star or more reviews - have_discount: Having discount - min_price: Minimum price - max_price: Maximum price ### Return: - Product search results  # [示例/Example] keyword = \"Cat Toy\" cursor = 0 count = 12 sort_type = 1 customer_review_four_star = False have_discount = False min_price = \"10\" max_price = \"25\"
         * @summary 获取商品搜索结果/Get product search results
         * @param {string} keyword 关键词/Keyword
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 商品排序条件/Product sorting conditions
         * @param {boolean} [customerReviewFourStar] 四星以上评价/Four-star or more reviews
         * @param {boolean} [haveDiscount] 有优惠/Having discount
         * @param {string} [minPrice] 最低价格/Minimum price
         * @param {string} [maxPrice] 最高价格/Maximum price
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet(keyword: string, cursor?: number, count?: number, sortType?: number, customerReviewFourStar?: boolean, haveDiscount?: boolean, minPrice?: string, maxPrice?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet(keyword, cursor, count, sortType, customerReviewFourStar, haveDiscount, minPrice, maxPrice, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商品搜索结果 ### 参数: - keyword: 关键词 - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 - sort_type: 商品排序条件     - 1: 综合排序     - 2: 销量排序     - 3: 价格从高到低     - 4: 价格从低到高     - 5: 最新发布 - customer_review_four_star: 四星以上评价 - have_discount: 有优惠 - min_price: 最低价格 - max_price: 最高价格 ### 返回: - 商品搜索结果  # [English] ### Purpose: - Get product search results ### Parameters: - keyword: Keyword - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number - sort_type: Product sorting conditions     - 1: Comprehensive sorting     - 2: Sales volume sorting     - 3: Price high to low     - 4: Price low to high     - 5: Latest release - customer_review_four_star: Four-star or more reviews - have_discount: Having discount - min_price: Minimum price - max_price: Maximum price ### Return: - Product search results  # [示例/Example] keyword = \"Cat Toy\" cursor = 0 count = 12 sort_type = 1 customer_review_four_star = False have_discount = False min_price = \"10\" max_price = \"25\"
         * @summary 获取商品搜索结果/Get product search results
         * @param {string} keyword 关键词/Keyword
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 商品排序条件/Product sorting conditions
         * @param {boolean} [customerReviewFourStar] 四星以上评价/Four-star or more reviews
         * @param {boolean} [haveDiscount] 有优惠/Having discount
         * @param {string} [minPrice] 最低价格/Minimum price
         * @param {string} [maxPrice] 最高价格/Maximum price
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_31(keyword: string, cursor?: number, count?: number, sortType?: number, customerReviewFourStar?: boolean, haveDiscount?: boolean, minPrice?: string, maxPrice?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_31(keyword, cursor, count, sortType, customerReviewFourStar, haveDiscount, minPrice, maxPrice, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取分享二维码 ### 参数: - object_id: 对象id，当前支持个人主页接口响应中的uid作为参数。 ### 返回: - 二维码图片  # [English] ### Purpose: - Get share QR code ### Parameters: - object_id: Object id, currently supports the uid in the response of the personal homepage interface as a parameter. ### Return: - QR code image  # [示例/Example] url = \"6762244951259661318\"
         * @summary 获取分享二维码/Get share QR code
         * @param {string} objectId 对象id/Object id
         * @param {number} [schemaType] 模式类型/Schema type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet(objectId: string, schemaType?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet(objectId, schemaType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取分享二维码 ### 参数: - object_id: 对象id，当前支持个人主页接口响应中的uid作为参数。 ### 返回: - 二维码图片  # [English] ### Purpose: - Get share QR code ### Parameters: - object_id: Object id, currently supports the uid in the response of the personal homepage interface as a parameter. ### Return: - QR code image  # [示例/Example] url = \"6762244951259661318\"
         * @summary 获取分享二维码/Get share QR code
         * @param {string} objectId 对象id/Object id
         * @param {number} [schemaType] 模式类型/Schema type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_32(objectId: string, schemaType?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_32(objectId, schemaType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取分享短链接 ### 参数: - url: 长链接或想要转换的链接 ### 返回: - 短链接  # [English] ### Purpose: - Get share short link ### Parameters: - url: Long link or link to convert ### Return: - Short link  # [示例/Example] url = \"https://www.tiktok.com/passport/web/logout/\"
         * @summary 获取分享短链接/Get share short link
         * @param {string} url 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet(url: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取分享短链接 ### 参数: - url: 长链接或想要转换的链接 ### 返回: - 短链接  # [English] ### Purpose: - Get share short link ### Parameters: - url: Long link or link to convert ### Return: - Short link  # [示例/Example] url = \"https://www.tiktok.com/passport/web/logout/\"
         * @summary 获取分享短链接/Get share short link
         * @param {string} url 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_33(url: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_33(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商家主页的商品数据 ### 参数: - page_id: 爬取的商家主页Page id，可以从`fetch_shop_home_page_list`这个接口获取 - seller_id: 商家id,店铺id ### 返回: - 商家主页数据  # [English] ### Purpose: - Get product data of the shop home page ### Parameters: - page_id: Page id of the crawled shop home page, which can be obtained from the interface `fetch_shop_home_page_list` - seller_id: Seller id, shop id ### Return: - Shop home page data  # [示例/Example] page_id = \"7314705727611930410\" seller_id = \"8646929864612614278\"
         * @summary 获取商家主页数据/Get shop home page data
         * @param {string} pageId 爬取的商家主页Page id/Page id of the crawled shop home page
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet(pageId: string, sellerId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet(pageId, sellerId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商家主页的商品数据 ### 参数: - page_id: 爬取的商家主页Page id，可以从`fetch_shop_home_page_list`这个接口获取 - seller_id: 商家id,店铺id ### 返回: - 商家主页数据  # [English] ### Purpose: - Get product data of the shop home page ### Parameters: - page_id: Page id of the crawled shop home page, which can be obtained from the interface `fetch_shop_home_page_list` - seller_id: Seller id, shop id ### Return: - Shop home page data  # [示例/Example] page_id = \"7314705727611930410\" seller_id = \"8646929864612614278\"
         * @summary 获取商家主页数据/Get shop home page data
         * @param {string} pageId 爬取的商家主页Page id/Page id of the crawled shop home page
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_34(pageId: string, sellerId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_34(pageId, sellerId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商家主页Page列表数据, 用于商家主页展示，以及爬取商家主页的商品数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家主页Page列表数据  # [English] ### Purpose: - Get shop home page list data, used for shop home page display, and crawling shop home page product data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop home page list data  # [示例/Example] seller_id = \"8646929864612614278\"
         * @summary 获取商家主页Page列表数据/Get shop home page list data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet(sellerId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet(sellerId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商家主页Page列表数据, 用于商家主页展示，以及爬取商家主页的商品数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家主页Page列表数据  # [English] ### Purpose: - Get shop home page list data, used for shop home page display, and crawling shop home page product data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop home page list data  # [示例/Example] seller_id = \"8646929864612614278\"
         * @summary 获取商家主页Page列表数据/Get shop home page list data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_35(sellerId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_35(sellerId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取店铺ID ### 参数: - share_link: 分享链接 ### 返回: - 店铺ID  # [English] ### Purpose: - Get Shop ID by Share Link ### Parameters: - share_link: Share link ### Return: - Shop ID  # [示例/Example] share_link = \"https://vt.tiktok.com/ZT2AHoGsE/\"
         * @summary 通过分享链接获取店铺ID/Get Shop ID by Share Link
         * @param {string} shareLink 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet(shareLink: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet(shareLink, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取店铺ID ### 参数: - share_link: 分享链接 ### 返回: - 店铺ID  # [English] ### Purpose: - Get Shop ID by Share Link ### Parameters: - share_link: Share link ### Return: - Shop ID  # [示例/Example] share_link = \"https://vt.tiktok.com/ZT2AHoGsE/\"
         * @summary 通过分享链接获取店铺ID/Get Shop ID by Share Link
         * @param {string} shareLink 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet_36(shareLink: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet_36(shareLink, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商家信息数据 ### 参数: - shop_id: 商家id,店铺id ### 返回: - 商家信息数据  # [English] ### Purpose: - Get shop information data ### Parameters: - shop_id: Seller id, shop id ### Return: - Shop information data  # [示例/Example] shop_id = \"8646942781241463007\"
         * @summary 获取商家信息数据/Get shop information data
         * @param {string} shopId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet(shopId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet(shopId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商家信息数据 ### 参数: - shop_id: 商家id,店铺id ### 返回: - 商家信息数据  # [English] ### Purpose: - Get shop information data ### Parameters: - shop_id: Seller id, shop id ### Return: - Shop information data  # [示例/Example] shop_id = \"8646942781241463007\"
         * @summary 获取商家信息数据/Get shop information data
         * @param {string} shopId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_37(shopId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_37(shopId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商家产品分类数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家产品分类数据  # [English] ### Purpose: - Get shop product category data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop product category data  # [示例/Example] seller_id = \"7495294980909468039\"
         * @summary 获取商家产品分类数据/Get shop product category data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet(sellerId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet(sellerId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商家产品分类数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家产品分类数据  # [English] ### Purpose: - Get shop product category data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop product category data  # [示例/Example] seller_id = \"7495294980909468039\"
         * @summary 获取商家产品分类数据/Get shop product category data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_38(sellerId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_38(sellerId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_params = \"\" page_size = 10 sort_field = 1 sort_order = 0
         * @summary 获取商家商品列表数据/Get shop product list data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {string} [scrollParams] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
         * @param {number} [pageSize] 每页数量/Number per page
         * @param {number} [sortField] 排序字段/Sorting field
         * @param {number} [sortOrder] 排序方式/Sorting method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet(sellerId: string, scrollParams?: string, pageSize?: number, sortField?: number, sortOrder?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet(sellerId, scrollParams, pageSize, sortField, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_params = \"\" page_size = 10 sort_field = 1 sort_order = 0
         * @summary 获取商家商品列表数据/Get shop product list data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {string} [scrollParams] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
         * @param {number} [pageSize] 每页数量/Number per page
         * @param {number} [sortField] 排序字段/Sorting field
         * @param {number} [sortOrder] 排序方式/Sorting method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_39(sellerId: string, scrollParams?: string, pageSize?: number, sortField?: number, sortOrder?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_39(sellerId, scrollParams, pageSize, sortField, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_params = \"\" page_size = 10 sort_field = 1 sort_order = 0
         * @summary 获取商家商品列表数据 V2/Get shop product list data V2
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {string} [scrollParams] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
         * @param {number} [pageSize] 每页数量/Number per page
         * @param {number} [sortField] 排序字段/Sorting field
         * @param {number} [sortOrder] 排序方式/Sorting method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get(sellerId: string, scrollParams?: string, pageSize?: number, sortField?: number, sortOrder?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get(sellerId, scrollParams, pageSize, sortField, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_params = \"\" page_size = 10 sort_field = 1 sort_order = 0
         * @summary 获取商家商品列表数据 V2/Get shop product list data V2
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {string} [scrollParams] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
         * @param {number} [pageSize] 每页数量/Number per page
         * @param {number} [sortField] 排序字段/Sorting field
         * @param {number} [sortOrder] 排序方式/Sorting method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get_40(sellerId: string, scrollParams?: string, pageSize?: number, sortField?: number, sortOrder?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get_40(sellerId, scrollParams, pageSize, sortField, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商家商品推荐数据 ### 参数: - seller_id: 商家id,店铺id - scroll_param: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 ### 返回: - 商家商品推荐数据  # [English] ### Purpose: - Get shop product recommend data ### Parameters: - seller_id: Seller id, shop id - scroll_param: Scroll parameter, used to load more product data - page_size: Number per page ### Return: - Shop product recommend data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_param = \"\" page_size = 10
         * @summary 获取商家商品推荐数据/Get shop product recommend data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {string} [scrollParam] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
         * @param {number} [pageSize] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet(sellerId: string, scrollParam?: string, pageSize?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet(sellerId, scrollParam, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取商家商品推荐数据 ### 参数: - seller_id: 商家id,店铺id - scroll_param: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 ### 返回: - 商家商品推荐数据  # [English] ### Purpose: - Get shop product recommend data ### Parameters: - seller_id: Seller id, shop id - scroll_param: Scroll parameter, used to load more product data - page_size: Number per page ### Return: - Shop product recommend data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_param = \"\" page_size = 10
         * @summary 获取商家商品推荐数据/Get shop product recommend data
         * @param {string} sellerId 商家id,店铺id/Seller id, shop id
         * @param {string} [scrollParam] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
         * @param {number} [pageSize] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_41(sellerId: string, scrollParam?: string, pageSize?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_41(sellerId, scrollParam, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的粉丝列表数据/Get follower list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet(secUserId, count, minTime, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的粉丝列表数据/Get follower list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_42(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_42(secUserId, count, minTime, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的关注列表数据/Get following list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet(secUserId, count, minTime, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的关注列表数据/Get following list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_43(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_43(secUserId, count, minTime, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA-RkTGCGXLuLKRM5Xcuuwm7Mclg51I2ECO1RqOA7mJHuXFz99nztdi077Z2XmYHZV\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet(secUserId, maxCursor, counts, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA-RkTGCGXLuLKRM5Xcuuwm7Mclg51I2ECO1RqOA7mJHuXFz99nztdi077Z2XmYHZV\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_44(secUserId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_44(secUserId, maxCursor, counts, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户音乐列表数据 ### 参数: - sec_uid: 用户sec_uid - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 用户音乐列表数据  # [English] ### Purpose: - Get user music list data ### Parameters: - sec_uid: User sec_uid - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number  # [示例/Example] sec_uid = \"MS4wLjABAAAAqB08cUbXaDWqbD6MCga2RbGTuhfO2EsHayBYx08NDrN7IE3jQuRDNNN6YwyfH6_6\" cursor = 0 count = 10
         * @summary 获取用户音乐列表数据/Get user music list data
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet(secUid: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet(secUid, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户音乐列表数据 ### 参数: - sec_uid: 用户sec_uid - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 用户音乐列表数据  # [English] ### Purpose: - Get user music list data ### Parameters: - sec_uid: User sec_uid - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number  # [示例/Example] sec_uid = \"MS4wLjABAAAAqB08cUbXaDWqbD6MCga2RbGTuhfO2EsHayBYx08NDrN7IE3jQuRDNNN6YwyfH6_6\" cursor = 0 count = 10
         * @summary 获取用户音乐列表数据/Get user music list data
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_45(secUid: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_45(secUid, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户作品数据，如果sec_user_id为空，则使用unique_id获取用户作品数据。 - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量，建议保持默认值20。 - sort_type: 排序类型，0-最新，1-热门 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户作品数据，unique_id也是用户的用户名。 - 关于用户ID的参数，优先级为sec_user_id > unique_id，优先级越高速度越快，并且建议只使用sec_user_id获取用户数据。 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id, use sec_user_id to get user video data first, if sec_user_id is empty, use unique_id to get user video data. - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number - sort_type: Sort type, 0-Latest, 1-Hot - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user video data, unique_id is also the user\'s username. - About the parameters of user ID, the priority is sec_user_id > unique_id, the higher the priority, the faster the speed, and it is recommended to use only sec_user_id to get user data. ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20 sort_type = 0 unique_id = \"tiktok\"
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [uniqueId] 用户unique_id/User unique_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [sortType] 排序类型/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet(secUserId?: string, uniqueId?: string, maxCursor?: number, count?: number, sortType?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet(secUserId, uniqueId, maxCursor, count, sortType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户作品数据，如果sec_user_id为空，则使用unique_id获取用户作品数据。 - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量，建议保持默认值20。 - sort_type: 排序类型，0-最新，1-热门 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户作品数据，unique_id也是用户的用户名。 - 关于用户ID的参数，优先级为sec_user_id > unique_id，优先级越高速度越快，并且建议只使用sec_user_id获取用户数据。 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id, use sec_user_id to get user video data first, if sec_user_id is empty, use unique_id to get user video data. - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number - sort_type: Sort type, 0-Latest, 1-Hot - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user video data, unique_id is also the user\'s username. - About the parameters of user ID, the priority is sec_user_id > unique_id, the higher the priority, the faster the speed, and it is recommended to use only sec_user_id to get user data. ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20 sort_type = 0 unique_id = \"tiktok\"
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [uniqueId] 用户unique_id/User unique_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {number} [sortType] 排序类型/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_46(secUserId?: string, uniqueId?: string, maxCursor?: number, count?: number, sortType?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_46(secUserId, uniqueId, maxCursor, count, sortType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户转发的作品数据 ### 参数: - user_id: 用户id，可以通过 handler_user_profile 端点获取，响应中的关键字为uid。 - offset: 偏移量 - count: 数量 ### 返回: - 用户转发作品数据  # [English] ### Purpose: - Get user repost video data ### Parameters: - user_id: User id, which can be obtained through the handler_user_profile endpoint, with the keyword uid in the response. - offset: Offset - count: Number ### Return: - User repost video data  # [示例/Example] user_id = 107955 offset = 0 count = 21
         * @summary 获取用户转发的作品数据/Get user repost video data
         * @param {number} userId 用户id/User id
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet(userId: number, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet(userId, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户转发的作品数据 ### 参数: - user_id: 用户id，可以通过 handler_user_profile 端点获取，响应中的关键字为uid。 - offset: 偏移量 - count: 数量 ### 返回: - 用户转发作品数据  # [English] ### Purpose: - Get user repost video data ### Parameters: - user_id: User id, which can be obtained through the handler_user_profile endpoint, with the keyword uid in the response. - offset: Offset - count: Number ### Return: - User repost video data  # [示例/Example] user_id = 107955 offset = 0 count = 21
         * @summary 获取用户转发的作品数据/Get user repost video data
         * @param {number} userId 用户id/User id
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_47(userId: number, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_47(userId, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"
         * @summary 获取指定关键词的用户搜索结果/Get user search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [userSearchFollowerCount] 根据粉丝数排序/Sort by number of followers
         * @param {string} [userSearchProfileType] 根据账号类型排序/Sort by account type
         * @param {string} [userSearchOtherPref] 根据其他偏好排序/Sort by other preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet(keyword: string, offset?: number, count?: number, userSearchFollowerCount?: string, userSearchProfileType?: string, userSearchOtherPref?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet(keyword, offset, count, userSearchFollowerCount, userSearchProfileType, userSearchOtherPref, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"
         * @summary 获取指定关键词的用户搜索结果/Get user search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [userSearchFollowerCount] 根据粉丝数排序/Sort by number of followers
         * @param {string} [userSearchProfileType] 根据账号类型排序/Sort by account type
         * @param {string} [userSearchOtherPref] 根据其他偏好排序/Sort by other preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_48(keyword: string, offset?: number, count?: number, userSearchFollowerCount?: string, userSearchProfileType?: string, userSearchOtherPref?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_48(keyword, offset, count, userSearchFollowerCount, userSearchProfileType, userSearchOtherPref, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet(awemeId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_49(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_49(awemeId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet(itemId, commentId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_50(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_50(itemId, commentId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet(keyword, offset, count, sortType, publishTime, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_51(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_51(keyword, offset, count, sortType, publishTime, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户信息。 - user_id: 用户uid，可选参数，纯数字，如果使用请保持sec_user_id以及unique_id为空。 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户信息，unique_id也是用户的用户名，如果使用请保持sec_user_id以及user_id为空。 - 以上参数必须至少填写一个，优先级为sec_user_id > user_id > unique_id，优先级越高速度越快。 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id - user_id: User uid, optional parameter, pure number, if used, please keep sec_user_id and unique_id empty. - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user information, unique_id is also the user\'s username, if used, please keep sec_user_id and user_id empty. - At least one of the above parameters must be filled in, the priority is sec_user_id > user_id > unique_id, the higher the priority, the faster the speed. ### Return: - User information  # [示例/Example] user_id = \"107955\" sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" unique_id = \"tiktok\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} [userId] 用户uid （可选，纯数字）/User uid (optional, pure number)
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [uniqueId] 用户unique_id （用户名）/User unique_id (username)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet(userId?: string, secUserId?: string, uniqueId?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet(userId, secUserId, uniqueId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户信息。 - user_id: 用户uid，可选参数，纯数字，如果使用请保持sec_user_id以及unique_id为空。 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户信息，unique_id也是用户的用户名，如果使用请保持sec_user_id以及user_id为空。 - 以上参数必须至少填写一个，优先级为sec_user_id > user_id > unique_id，优先级越高速度越快。 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id - user_id: User uid, optional parameter, pure number, if used, please keep sec_user_id and unique_id empty. - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user information, unique_id is also the user\'s username, if used, please keep sec_user_id and user_id empty. - At least one of the above parameters must be filled in, the priority is sec_user_id > user_id > unique_id, the higher the priority, the faster the speed. ### Return: - User information  # [示例/Example] user_id = \"107955\" sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" unique_id = \"tiktok\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} [userId] 用户uid （可选，纯数字）/User uid (optional, pure number)
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [uniqueId] 用户unique_id （用户名）/User unique_id (username)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_52(userId?: string, secUserId?: string, uniqueId?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_52(userId, secUserId, uniqueId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] keyword = \"Evil0ctal\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果/Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result
         * @param {string} keyword 关键词/Keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet(keyword: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).openTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] keyword = \"Evil0ctal\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果/Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result
         * @param {string} keyword 关键词/Keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet_53(keyword: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).openTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet_53(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and send private messages to specified users  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid = \"7059867056504407087\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信/Generate TikTok share link, call TikTok APP, and send private messages to specified users
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet(uid: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).openTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and send private messages to specified users  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid = \"7059867056504407087\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信/Generate TikTok share link, call TikTok APP, and send private messages to specified users
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet_54(uid: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).openTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet_54(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified user profile  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid = \"7059867056504407087\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页/Generate TikTok share link, call TikTok APP, and jump to the specified user profile
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet(uid: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).openTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified user profile  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid = \"7059867056504407087\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页/Generate TikTok share link, call TikTok APP, and jump to the specified user profile
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet_55(uid: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).openTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet_55(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified video  ### Parameters: - aweme_id: Video id - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] aweme_id = \"7440436579409153311\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页/Generate TikTok share link, call TikTok APP, and jump to the specified video details page
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).openTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified video  ### Parameters: - aweme_id: Video id - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] aweme_id = \"7440436579409153311\"
         * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页/Generate TikTok share link, call TikTok APP, and jump to the specified video details page
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet_56(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).openTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet_56(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - TikTok APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，不要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device for TikTok APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, without http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy = \"username:password@ip:port\"  # [响应/Response] ```json {    \"code\":200,    \"router\":\"/api/v1/tiktok/app/v3/register_device\",    \"params\":{       \"proxy\":\"username:password@ip:port\"    },    \"data\":{       \"cookie\":\"install_id=7417331203928426283; store-country-code=us; store-country-code-src=did; store-idc=useast5; ttreq=1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\",       \"id\":\"eyJhYyI6ICJ3aWZpIiwgImNoYW5uZWwiOiAiZ29vZ2xlcGxheSIsICJhaWQiOiAiMTIzMyIsICJhcHBfbmFtZSI6ICJtdXNpY2FsX2x5IiwgInZlcnNpb25fY29kZSI6ICIyNjA2MDIiLCAidmVyc2lvbl9uYW1lIjogIjI2LjYuMiIsICJkZXZpY2VfcGxhdGZvcm0iOiAiYW5kcm9pZCIsICJhYl92ZXJzaW9uIjogIjI2LjYuMiIsICJzc21peCI6ICJhIiwgImRldmljZV90eXBlIjogIlBPVC1MWDQ2IiwgImRldmljZV9icmFuZCI6ICJIVUFXRUkiLCAiZGV2aWNlX21vZGVsIjogIlBPVC1MWDQ2IiwgImxhbmd1YWdlIjogImVuIiwgIm9zX2FwaSI6ICIyOSIsICJvc192ZXJzaW9uIjogIjEwIiwgIm1hbmlmZXN0X3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgInJlc29sdXRpb24iOiAiMTA4MCoyMzQwIiwgImRwaSI6ICI0ODAiLCAidXBkYXRlX3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgImFwcF9za2luIjogIndoaXRlIiwgImFwcF90eXBlIjogIm5vcm1hbCIsICJyZXNpZGVuY2UiOiAiVVMiLCAic3lzX3JlZ2lvbiI6ICJVUyIsICJwYXNzLXJvdXRlIjogIjEiLCAibWNjX21uYyI6ICIzMTAyNjAiLCAicGFzcy1yZWdpb24iOiAiMSIsICJ0aW1lem9uZV9uYW1lIjogIkFtZXJpY2ElMkZOZXdfWW9yayIsICJjYXJyaWVyX3JlZ2lvbl92MiI6ICIzMTAiLCAiY3B1X3N1cHBvcnQ2NCI6ICJ0cnVlIiwgImhvc3RfYWJpIjogImFybTY0LXY4YSIsICJhcHBfbGFuZ3VhZ2UiOiAiZW4iLCAiY2Fycmllcl9yZWdpb24iOiAiVVMiLCAiYWMyIjogIndpZmkiLCAidW9vIjogIjEiLCAib3BfcmVnaW9uIjogIlVTIiwgInRpbWV6b25lX29mZnNldCI6IC0xNDQwMCwgImJ1aWxkX251bWJlciI6ICIyNi42LjIiLCAibG9jYWxlIjogImVuIiwgInJlZ2lvbiI6ICJVUyIsICJvcGVudWRpZCI6ICI0ZTM5NzdlNmJhNWNhZDc0IiwgImNkaWQiOiAiYjFkOTA2YzMtOTYxMy00MWM1LTk4ZjgtZDZhYWJjOTdiMTExIiwgImRldmljZV9pZCI6ICI3NDE3MzMwOTk5MDIzNTAyODkwIiwgImlpZCI6ICI3NDE3MzMxMjAzOTI4NDI2MjgzIiwgInVzZXJfYWdlbnQiOiAiY29tLnpoaWxpYW9hcHAubXVzaWNhbGx5LzIwMjI2MDYwMjAgKExpbnV4OyBVOyBBbmRyb2lkIDEwLjAuMDsgZW47IEhVQVdFSSBQT1QtTFg0NjsgQnVpbGQvT1BSNi4xNzA2MjMuMDE3O3R0LW9rLzMuMTIuMTMuMSkiLCAiY29va2llIjogImluc3RhbGxfaWQ9NzQxNzMzMTIwMzkyODQyNjI4Mzsgc3RvcmUtY291bnRyeS1jb2RlPXVzOyBzdG9yZS1jb3VudHJ5LWNvZGUtc3JjPWRpZDsgc3RvcmUtaWRjPXVzZWFzdDU7IHR0cmVxPTEkODViMWY1YjBiNDBhZWIwZmY3NjU5OGE2YTk0ZmNiMDcwNGIxMGQ3NCIsICJwcm94eSI6ICJodHRwOi8vMTU0LjIwMi4xMDcuMjAyOjMxMjgifQ==\",       \"tiktok_info\":{          \"cdid\":\"b1d906c3-9613-41c5-98f8-d6aabc97b111\",          \"cookie\":\"install_id=7417331203928426283; store-country-code=us; store-country-code-src=did; store-idc=useast5; ttreq=1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\",          \"device_brand\":\"HUAWEI\",          \"device_type\":\"POT-LX46\",          \"did\":\"7417330999023502890\",          \"iid\":\"7417331203928426283\",          \"mcc_mnc\":\"310260\",          \"openudid\":\"4e3977e6ba5cad74\",          \"os_api\":\"29\",          \"os_version\":\"10\",          \"user_agent\":\"okhttp/3.10.0.1\",          \"version_code\":\"260602\",          \"version_name\":\"26.6.2\"       }    } } ```
         * @summary 注册设备信息/Register device information
         * @param {string} [proxy] 代理/Proxy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDeviceApiV1TiktokAppV3RegisterDeviceGet(proxy?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).registerDeviceApiV1TiktokAppV3RegisterDeviceGet(proxy, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - TikTok APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，不要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device for TikTok APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, without http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy = \"username:password@ip:port\"  # [响应/Response] ```json {    \"code\":200,    \"router\":\"/api/v1/tiktok/app/v3/register_device\",    \"params\":{       \"proxy\":\"username:password@ip:port\"    },    \"data\":{       \"cookie\":\"install_id=7417331203928426283; store-country-code=us; store-country-code-src=did; store-idc=useast5; ttreq=1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\",       \"id\":\"eyJhYyI6ICJ3aWZpIiwgImNoYW5uZWwiOiAiZ29vZ2xlcGxheSIsICJhaWQiOiAiMTIzMyIsICJhcHBfbmFtZSI6ICJtdXNpY2FsX2x5IiwgInZlcnNpb25fY29kZSI6ICIyNjA2MDIiLCAidmVyc2lvbl9uYW1lIjogIjI2LjYuMiIsICJkZXZpY2VfcGxhdGZvcm0iOiAiYW5kcm9pZCIsICJhYl92ZXJzaW9uIjogIjI2LjYuMiIsICJzc21peCI6ICJhIiwgImRldmljZV90eXBlIjogIlBPVC1MWDQ2IiwgImRldmljZV9icmFuZCI6ICJIVUFXRUkiLCAiZGV2aWNlX21vZGVsIjogIlBPVC1MWDQ2IiwgImxhbmd1YWdlIjogImVuIiwgIm9zX2FwaSI6ICIyOSIsICJvc192ZXJzaW9uIjogIjEwIiwgIm1hbmlmZXN0X3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgInJlc29sdXRpb24iOiAiMTA4MCoyMzQwIiwgImRwaSI6ICI0ODAiLCAidXBkYXRlX3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgImFwcF9za2luIjogIndoaXRlIiwgImFwcF90eXBlIjogIm5vcm1hbCIsICJyZXNpZGVuY2UiOiAiVVMiLCAic3lzX3JlZ2lvbiI6ICJVUyIsICJwYXNzLXJvdXRlIjogIjEiLCAibWNjX21uYyI6ICIzMTAyNjAiLCAicGFzcy1yZWdpb24iOiAiMSIsICJ0aW1lem9uZV9uYW1lIjogIkFtZXJpY2ElMkZOZXdfWW9yayIsICJjYXJyaWVyX3JlZ2lvbl92MiI6ICIzMTAiLCAiY3B1X3N1cHBvcnQ2NCI6ICJ0cnVlIiwgImhvc3RfYWJpIjogImFybTY0LXY4YSIsICJhcHBfbGFuZ3VhZ2UiOiAiZW4iLCAiY2Fycmllcl9yZWdpb24iOiAiVVMiLCAiYWMyIjogIndpZmkiLCAidW9vIjogIjEiLCAib3BfcmVnaW9uIjogIlVTIiwgInRpbWV6b25lX29mZnNldCI6IC0xNDQwMCwgImJ1aWxkX251bWJlciI6ICIyNi42LjIiLCAibG9jYWxlIjogImVuIiwgInJlZ2lvbiI6ICJVUyIsICJvcGVudWRpZCI6ICI0ZTM5NzdlNmJhNWNhZDc0IiwgImNkaWQiOiAiYjFkOTA2YzMtOTYxMy00MWM1LTk4ZjgtZDZhYWJjOTdiMTExIiwgImRldmljZV9pZCI6ICI3NDE3MzMwOTk5MDIzNTAyODkwIiwgImlpZCI6ICI3NDE3MzMxMjAzOTI4NDI2MjgzIiwgInVzZXJfYWdlbnQiOiAiY29tLnpoaWxpYW9hcHAubXVzaWNhbGx5LzIwMjI2MDYwMjAgKExpbnV4OyBVOyBBbmRyb2lkIDEwLjAuMDsgZW47IEhVQVdFSSBQT1QtTFg0NjsgQnVpbGQvT1BSNi4xNzA2MjMuMDE3O3R0LW9rLzMuMTIuMTMuMSkiLCAiY29va2llIjogImluc3RhbGxfaWQ9NzQxNzMzMTIwMzkyODQyNjI4Mzsgc3RvcmUtY291bnRyeS1jb2RlPXVzOyBzdG9yZS1jb3VudHJ5LWNvZGUtc3JjPWRpZDsgc3RvcmUtaWRjPXVzZWFzdDU7IHR0cmVxPTEkODViMWY1YjBiNDBhZWIwZmY3NjU5OGE2YTk0ZmNiMDcwNGIxMGQ3NCIsICJwcm94eSI6ICJodHRwOi8vMTU0LjIwMi4xMDcuMjAyOjMxMjgifQ==\",       \"tiktok_info\":{          \"cdid\":\"b1d906c3-9613-41c5-98f8-d6aabc97b111\",          \"cookie\":\"install_id=7417331203928426283; store-country-code=us; store-country-code-src=did; store-idc=useast5; ttreq=1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\",          \"device_brand\":\"HUAWEI\",          \"device_type\":\"POT-LX46\",          \"did\":\"7417330999023502890\",          \"iid\":\"7417331203928426283\",          \"mcc_mnc\":\"310260\",          \"openudid\":\"4e3977e6ba5cad74\",          \"os_api\":\"29\",          \"os_version\":\"10\",          \"user_agent\":\"okhttp/3.10.0.1\",          \"version_code\":\"260602\",          \"version_name\":\"26.6.2\"       }    } } ```
         * @summary 注册设备信息/Register device information
         * @param {string} [proxy] 代理/Proxy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDeviceApiV1TiktokAppV3RegisterDeviceGet_57(proxy?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).registerDeviceApiV1TiktokAppV3RegisterDeviceGet_57(proxy, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - TikTok APP加密算法，用于生成请求头中的加密参数。 - 生成的加密参数列表：     - `x-ladon`     - `x-khronos`     - `x-argus`     - `x-gorgon` （8404）  ### 参数: - url: 需要加密的完整URL - data: 如果接口是POST请求，请填写POST请求的数据参与加密计算，GET请求时传入空字符串即可。 - device_info: 设备信息，可选参数，如果不填写则使用默认设备信息，设备信息会修改传入的URL中的参数。  ### 返回: - 加密参数列表  # [English] ### Purpose: - TikTok APP encryption algorithm, used to generate encrypted parameters in the request header. - The generated encrypted parameter list:     - `x-ladon`     - `x-khronos`     - `x-argus`     - `x-gorgon` (8404)  ### Parameters: - url: Full URL to be encrypted - data: If the interface is a POST request, please fill in the data of the POST request to participate in the encryption calculation. For GET requests, pass an empty string. - device_info: Device information, optional parameter, if not filled in, the default device information will be used, and the device information will modify the parameters in the URL passed in.  ### Return: - Encrypted parameter list
         * @summary TikTok APP加密算法/TikTok APP encryption algorithm
         * @param {TikTokAppEncryptRequest} [tikTokAppEncryptRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost(tikTokAppEncryptRequest?: TikTokAppEncryptRequest, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).tTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost(tikTokAppEncryptRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - TikTok APP加密算法，用于生成请求头中的加密参数。 - 生成的加密参数列表：     - `x-ladon`     - `x-khronos`     - `x-argus`     - `x-gorgon` （8404）  ### 参数: - url: 需要加密的完整URL - data: 如果接口是POST请求，请填写POST请求的数据参与加密计算，GET请求时传入空字符串即可。 - device_info: 设备信息，可选参数，如果不填写则使用默认设备信息，设备信息会修改传入的URL中的参数。  ### 返回: - 加密参数列表  # [English] ### Purpose: - TikTok APP encryption algorithm, used to generate encrypted parameters in the request header. - The generated encrypted parameter list:     - `x-ladon`     - `x-khronos`     - `x-argus`     - `x-gorgon` (8404)  ### Parameters: - url: Full URL to be encrypted - data: If the interface is a POST request, please fill in the data of the POST request to participate in the encryption calculation. For GET requests, pass an empty string. - device_info: Device information, optional parameter, if not filled in, the default device information will be used, and the device information will modify the parameters in the URL passed in.  ### Return: - Encrypted parameter list
         * @summary TikTok APP加密算法/TikTok APP encryption algorithm
         * @param {TikTokAppEncryptRequest} [tikTokAppEncryptRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost_58(tikTokAppEncryptRequest?: TikTokAppEncryptRequest, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV3APIApiFp(configuration).tTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost_58(tikTokAppEncryptRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TikTokAppV3APIApi - interface
 * @export
 * @interface TikTokAppV3APIApi
 */
export interface TikTokAppV3APIApiInterface {
    /**
     * # [中文] ### 用途: - 根据视频ID来增加作品的播放数 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - invite_code: 邀请码，此接口需要邀请码才能使用。 ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - invite_code: Invite code, this interface requires an invite code to use. ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type = 0 item_id = \"7419966340443819295\" cookie = None
     * @summary 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
     * @param {number} awemeType 作品类型/Video type
     * @param {string} itemId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    addVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet(awemeType: number, itemId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据视频ID来增加作品的播放数 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - invite_code: 邀请码，此接口需要邀请码才能使用。 ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - invite_code: Invite code, this interface requires an invite code to use. ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type = 0 item_id = \"7419966340443819295\" cookie = None
     * @summary 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
     * @param {number} awemeType 作品类型/Video type
     * @param {string} itemId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    addVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet_1(awemeType: number, itemId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 检测直播间是否在线 - 直播间的Room ID可以通过直播间链接从`/api/v1/tiktok/web/get_live_room_id`接口获取 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online - The Room ID of the live room can be obtained from the `/api/v1/tiktok/web/get_live_room_id` interface through the live room link ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"
     * @summary 检测直播间是否在线/Check if live room is online
     * @param {string} roomId 直播间id/Live room id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet(roomId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 检测直播间是否在线 - 直播间的Room ID可以通过直播间链接从`/api/v1/tiktok/web/get_live_room_id`接口获取 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online - The Room ID of the live room can be obtained from the `/api/v1/tiktok/web/get_live_room_id` interface through the live room link ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"
     * @summary 检测直播间是否在线/Check if live room is online
     * @param {string} roomId 直播间id/Live room id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_2(roomId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 加密/解密 TikTok APP 登录请求体，用于登录接口的请求体加密和解密。 ### 参数: - username: 用户名，可以是密文或明文。 - password: 密码，可以是密文或明文。 - mode: 模式     - `encrypt`: 加密     - `decrypt`: 解密 ### 返回: - 加密/解密后的请求体  # [English] ### Purpose: - Encrypt/decrypt the TikTok APP login request body, used for encrypting and decrypting the request body of the login interface. ### Parameters: - username: Username, can be ciphertext or plaintext. - password: Password, can be ciphertext or plaintext. - mode: Mode     - `encrypt`: Encrypt     - `decrypt`: Decrypt ### Return: - Encrypted/decrypted request body  # [示例/Example] ```json {     \"username\": \"example_username\",     \"password\": \"example_password\",     \"mode\": \"encrypt\" } ```
     * @summary 加密或解密 TikTok APP 登录请求体/Encrypt or Decrypt TikTok APP login request body
     * @param {TikTokAppLoginEncryptDecryptRequest} [tikTokAppLoginEncryptDecryptRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    encryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost(tikTokAppLoginEncryptDecryptRequest?: TikTokAppLoginEncryptDecryptRequest, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 加密/解密 TikTok APP 登录请求体，用于登录接口的请求体加密和解密。 ### 参数: - username: 用户名，可以是密文或明文。 - password: 密码，可以是密文或明文。 - mode: 模式     - `encrypt`: 加密     - `decrypt`: 解密 ### 返回: - 加密/解密后的请求体  # [English] ### Purpose: - Encrypt/decrypt the TikTok APP login request body, used for encrypting and decrypting the request body of the login interface. ### Parameters: - username: Username, can be ciphertext or plaintext. - password: Password, can be ciphertext or plaintext. - mode: Mode     - `encrypt`: Encrypt     - `decrypt`: Decrypt ### Return: - Encrypted/decrypted request body  # [示例/Example] ```json {     \"username\": \"example_username\",     \"password\": \"example_password\",     \"mode\": \"encrypt\" } ```
     * @summary 加密或解密 TikTok APP 登录请求体/Encrypt or Decrypt TikTok APP login request body
     * @param {TikTokAppLoginEncryptDecryptRequest} [tikTokAppLoginEncryptDecryptRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    encryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost_3(tikTokAppLoginEncryptDecryptRequest?: TikTokAppLoginEncryptDecryptRequest, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取内容翻译数据 ### 参数: - trg_lang: 目标语言     - zh-Hans: 简体中文     - zh-Hant: 繁体中文     - en: 英语     - ja: 日语     - ko: 韩语     - fr: 法语     - de: 德语     - ru: 俄语     - es: 西班牙语     - pt: 葡萄牙语     - vi: 越南语     - th: 泰语     - id: 印尼语     - ar: 阿拉伯语     - it: 意大利语     - tr: 土耳其语     - he: 希伯来语     - pl: 波兰语     - nl: 荷兰语     - sv: 瑞典语     - da: 丹麦语     - fi: 芬兰语     - no: 挪威语     - cs: 捷克语     - hu: 匈牙利语 - src_content: 源内容，也就是需要翻译的内容，长度不超过5000个字符，如果超过5000个字符，只会翻译前5000个字符。 ### 返回: - 内容翻译数据  # [English] ### Purpose: - Get content translation data ### Parameters: - trg_lang: Target language     - zh-Hans: Simplified Chinese     - zh-Hant: Traditional Chinese     - en: English     - ja: Japanese     - ko: Korean     - fr: French     - de: German     - ru: Russian     - es: Spanish     - pt: Portuguese     - vi: Vietnamese     - th: Thai     - id: Indonesian     - ar: Arabic     - it: Italian     - tr: Turkish     - he: Hebrew     - pl: Polish     - nl: Dutch     - sv: Swedish     - da: Danish     - fi: Finnish     - no: Norwegian     - cs: Czech     - hu: Hungarian - src_content: Source content, that is, the content that needs to be translated, the length does not exceed 5000 characters, if it exceeds 5000 characters, only the first 5000 characters will be translated. ### Return: - Content translation data  # [示例/Example] trg_lang = \"zh-Hans\" src_content = \"Hello, welcome to TikHub!\"
     * @summary 获取内容翻译数据/Get content translation data
     * @param {TikTokAppV3ContentTranslate} [tikTokAppV3ContentTranslate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost(tikTokAppV3ContentTranslate?: TikTokAppV3ContentTranslate, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取内容翻译数据 ### 参数: - trg_lang: 目标语言     - zh-Hans: 简体中文     - zh-Hant: 繁体中文     - en: 英语     - ja: 日语     - ko: 韩语     - fr: 法语     - de: 德语     - ru: 俄语     - es: 西班牙语     - pt: 葡萄牙语     - vi: 越南语     - th: 泰语     - id: 印尼语     - ar: 阿拉伯语     - it: 意大利语     - tr: 土耳其语     - he: 希伯来语     - pl: 波兰语     - nl: 荷兰语     - sv: 瑞典语     - da: 丹麦语     - fi: 芬兰语     - no: 挪威语     - cs: 捷克语     - hu: 匈牙利语 - src_content: 源内容，也就是需要翻译的内容，长度不超过5000个字符，如果超过5000个字符，只会翻译前5000个字符。 ### 返回: - 内容翻译数据  # [English] ### Purpose: - Get content translation data ### Parameters: - trg_lang: Target language     - zh-Hans: Simplified Chinese     - zh-Hant: Traditional Chinese     - en: English     - ja: Japanese     - ko: Korean     - fr: French     - de: German     - ru: Russian     - es: Spanish     - pt: Portuguese     - vi: Vietnamese     - th: Thai     - id: Indonesian     - ar: Arabic     - it: Italian     - tr: Turkish     - he: Hebrew     - pl: Polish     - nl: Dutch     - sv: Swedish     - da: Danish     - fi: Finnish     - no: Norwegian     - cs: Czech     - hu: Hungarian - src_content: Source content, that is, the content that needs to be translated, the length does not exceed 5000 characters, if it exceeds 5000 characters, only the first 5000 characters will be translated. ### Return: - Content translation data  # [示例/Example] trg_lang = \"zh-Hans\" src_content = \"Hello, welcome to TikHub!\"
     * @summary 获取内容翻译数据/Get content translation data
     * @param {TikTokAppV3ContentTranslate} [tikTokAppV3ContentTranslate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_4(tikTokAppV3ContentTranslate?: TikTokAppV3ContentTranslate, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取创作者信息，包括创作者的基本信息、粉丝数、橱窗商品数量等信息。 ### 参数: - creator_uid: 创作者uid ### 返回: - 创作者信息  # [English] ### Purpose: - Get creator information, including the creator\'s basic information, number of fans, number of storefront products, etc. ### Parameters: - creator_uid: Creator uid ### Return: - Creator information  # [示例/Example] creator_uid = \"6555451606845243393\"
     * @summary 获取创作者信息/Get creator information
     * @param {string} creatorUid 创作者uid/Creator uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet(creatorUid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取创作者信息，包括创作者的基本信息、粉丝数、橱窗商品数量等信息。 ### 参数: - creator_uid: 创作者uid ### 返回: - 创作者信息  # [English] ### Purpose: - Get creator information, including the creator\'s basic information, number of fans, number of storefront products, etc. ### Parameters: - creator_uid: Creator uid ### Return: - Creator information  # [示例/Example] creator_uid = \"6555451606845243393\"
     * @summary 获取创作者信息/Get creator information
     * @param {string} creatorUid 创作者uid/Creator uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet_5(creatorUid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取创作者橱窗商品列表 ### 参数: - kol_id: 创作者的sec_user_id - count: 数量 - next_scroll_param: 翻页参数，第一页为空字符串，后续请求使用上一次请求返回的next_scroll_param值。 ### 返回: - 创作者橱窗商品列表  # [English] ### Purpose: - Get creator showcase product list ### Parameters: - kol_id: Creator\'s sec_user_id - count: Number - next_scroll_param: Page parameter, empty string for the first page, use the next_scroll_param value returned by the last request for subsequent requests. ### Return: - Creator showcase product list  # [示例/Example] kol_id = \"MS4wLjABAAAARujvKaVWqgbVCwuxQghA99TUa5I-4g6jVzMXZd9FJIXSdJwJM47vm4-2T1K3gsux\" count = 20 next_scroll_param = \"\"
     * @summary 获取创作者橱窗商品列表/Get creator showcase product list
     * @param {string} kolId 创作者的sec_user_id/Creator\&#39;s sec_user_id
     * @param {number} [count] 数量/Number
     * @param {string} [nextScrollParam] 翻页参数/Page parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet(kolId: string, count?: number, nextScrollParam?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取创作者橱窗商品列表 ### 参数: - kol_id: 创作者的sec_user_id - count: 数量 - next_scroll_param: 翻页参数，第一页为空字符串，后续请求使用上一次请求返回的next_scroll_param值。 ### 返回: - 创作者橱窗商品列表  # [English] ### Purpose: - Get creator showcase product list ### Parameters: - kol_id: Creator\'s sec_user_id - count: Number - next_scroll_param: Page parameter, empty string for the first page, use the next_scroll_param value returned by the last request for subsequent requests. ### Return: - Creator showcase product list  # [示例/Example] kol_id = \"MS4wLjABAAAARujvKaVWqgbVCwuxQghA99TUa5I-4g6jVzMXZd9FJIXSdJwJM47vm4-2T1K3gsux\" count = 20 next_scroll_param = \"\"
     * @summary 获取创作者橱窗商品列表/Get creator showcase product list
     * @param {string} kolId 创作者的sec_user_id/Creator\&#39;s sec_user_id
     * @param {number} [count] 数量/Number
     * @param {string} [nextScrollParam] 翻页参数/Page parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet_6(kolId: string, count?: number, nextScrollParam?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_7(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"
     * @summary 获取指定话题的详情数据/Get details of specified hashtag
     * @param {string} chId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet(chId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"
     * @summary 获取指定话题的详情数据/Get details of specified hashtag
     * @param {string} chId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_8(chId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_9(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10
     * @summary 获取指定话题的作品数据/Get video list of specified hashtag
     * @param {string} chId 话题id/Hashtag id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet(chId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10
     * @summary 获取指定话题的作品数据/Get video list of specified hashtag
     * @param {string} chId 话题id/Hashtag id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_10(chId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - cookie: User\'s own cookie, optional parameter, used for personalized recommendation of interface returned data. ### Return: - Video recommend data
     * @summary 获取主页视频推荐数据/Get home feed(recommend) video data
     * @param {TikTokAppV3HomeFeed} [tikTokAppV3HomeFeed] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost(tikTokAppV3HomeFeed?: TikTokAppV3HomeFeed, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - cookie: User\'s own cookie, optional parameter, used for personalized recommendation of interface returned data. ### Return: - Video recommend data
     * @summary 获取主页视频推荐数据/Get home feed(recommend) video data
     * @param {TikTokAppV3HomeFeed} [tikTokAppV3HomeFeed] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost_11(tikTokAppV3HomeFeed?: TikTokAppV3HomeFeed, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取直播每日榜单数据 ### 参数: - anchor_id: 主播id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的主播id。 - room_id: 直播间id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的id。 - rank_type: 榜单类型     - `0`: 每小时排行榜     - `1`: 每周排行榜     - `5`: 新星排行榜     - `6`: 销售排行榜     - `8`: 每日排行榜     - `10`: 游戏排行榜     - `11`: 每日游戏排行榜     - `12`: 名人堂排行榜     - `13`: 冠军赛排行榜     - `14`: 每日新秀排行榜     - `15`: 人气直播榜     - `16`: D5段位榜     - `20`: 绝地求生排行榜     - `21`: 王者荣耀排行榜     - `22`: Free Fire 排行榜     - `1001`: 联盟竞赛排行榜     - `-1`: 未知排行榜 - region_type: 地区类型，使用默认值即可，具体含义不明。 - gap_interval: 时间间隔，使用默认值代表当天，使用-1代表排名记录。 - cookie: 用户自己的cookie，可选参数，用于接口不可用时使用。 ### 返回: - 直播每日榜单数据  # [English] ### Purpose: - Get live daily rank data ### Parameters: - anchor_id: Anchor id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different anchor ids of different live rooms. - room_id: Live room id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different room ids of different live rooms. - rank_type: Rank type     - `0`: Hourly Rank     - `1`: Weekly Rank     - `5`: Rookie Star Rank     - `6`: Sale Rank     - `8`: Daily Rank     - `10`: Game Rank     - `11`: Daily Game Rank     - `12`: Hall of Fame Rank     - `13`: Champion Tournament Rank     - `14`: Daily Rookie Star Rank     - `15`: Popular Live Stream Rank     - `16`: D5 Level Rank     - `20`: PUBG Rank     - `21`: MLBB Rank     - `22`: Free Fire Rank     - `1001`: League Campaign Rank     - `-1`: Unknown Rank  - region_type: Region type, use the default value, the specific meaning is unknown. - gap_interval: Time interval, use the default value to represent the current day, use -1 to represent the ranking record. - cookie: User\'s own cookie, optional parameter, used when the interface is not available. ### Return: - Live daily rank data
     * @summary 获取直播每日榜单数据/Get live daily rank data
     * @param {string} [anchorId] 主播id/Anchor id
     * @param {string} [roomId] 直播间id/Live room id
     * @param {number} [rankType] 榜单类型/Rank type
     * @param {number} [regionType] 地区类型/Region type
     * @param {number} [gapInterval] 时间间隔/Time interval
     * @param {string} [cookie] 用户自己的cookie/User\&#39;s own cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet(anchorId?: string, roomId?: string, rankType?: number, regionType?: number, gapInterval?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取直播每日榜单数据 ### 参数: - anchor_id: 主播id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的主播id。 - room_id: 直播间id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的id。 - rank_type: 榜单类型     - `0`: 每小时排行榜     - `1`: 每周排行榜     - `5`: 新星排行榜     - `6`: 销售排行榜     - `8`: 每日排行榜     - `10`: 游戏排行榜     - `11`: 每日游戏排行榜     - `12`: 名人堂排行榜     - `13`: 冠军赛排行榜     - `14`: 每日新秀排行榜     - `15`: 人气直播榜     - `16`: D5段位榜     - `20`: 绝地求生排行榜     - `21`: 王者荣耀排行榜     - `22`: Free Fire 排行榜     - `1001`: 联盟竞赛排行榜     - `-1`: 未知排行榜 - region_type: 地区类型，使用默认值即可，具体含义不明。 - gap_interval: 时间间隔，使用默认值代表当天，使用-1代表排名记录。 - cookie: 用户自己的cookie，可选参数，用于接口不可用时使用。 ### 返回: - 直播每日榜单数据  # [English] ### Purpose: - Get live daily rank data ### Parameters: - anchor_id: Anchor id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different anchor ids of different live rooms. - room_id: Live room id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different room ids of different live rooms. - rank_type: Rank type     - `0`: Hourly Rank     - `1`: Weekly Rank     - `5`: Rookie Star Rank     - `6`: Sale Rank     - `8`: Daily Rank     - `10`: Game Rank     - `11`: Daily Game Rank     - `12`: Hall of Fame Rank     - `13`: Champion Tournament Rank     - `14`: Daily Rookie Star Rank     - `15`: Popular Live Stream Rank     - `16`: D5 Level Rank     - `20`: PUBG Rank     - `21`: MLBB Rank     - `22`: Free Fire Rank     - `1001`: League Campaign Rank     - `-1`: Unknown Rank  - region_type: Region type, use the default value, the specific meaning is unknown. - gap_interval: Time interval, use the default value to represent the current day, use -1 to represent the ranking record. - cookie: User\'s own cookie, optional parameter, used when the interface is not available. ### Return: - Live daily rank data
     * @summary 获取直播每日榜单数据/Get live daily rank data
     * @param {string} [anchorId] 主播id/Anchor id
     * @param {string} [roomId] 直播间id/Live room id
     * @param {number} [rankType] 榜单类型/Rank type
     * @param {number} [regionType] 地区类型/Region type
     * @param {number} [gapInterval] 时间间隔/Time interval
     * @param {string} [cookie] 用户自己的cookie/User\&#39;s own cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_12(anchorId?: string, roomId?: string, rankType?: number, regionType?: number, gapInterval?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"
     * @summary 获取直播间排行榜数据/Get live room ranking list
     * @param {string} roomId 直播间id/Live room id
     * @param {string} anchorId 主播id/Anchor id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet(roomId: string, anchorId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"
     * @summary 获取直播间排行榜数据/Get live room ranking list
     * @param {string} roomId 直播间id/Live room id
     * @param {string} anchorId 主播id/Anchor id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_13(roomId: string, anchorId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定直播间的数据 ### 参数: - room_id: 直播间id ### 返回: - 直播间数据  # [English] ### Purpose: - Get data of specified live room ### Parameters: - room_id: Live room id ### Return: - Live room data  # [示例/Example] room_id = \"7385461256746060575\"
     * @summary 获取指定直播间的数据/Get data of specified live room
     * @param {string} roomId 直播间id/Live room id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet(roomId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定直播间的数据 ### 参数: - room_id: 直播间id ### 返回: - 直播间数据  # [English] ### Purpose: - Get data of specified live room ### Parameters: - room_id: Live room id ### Return: - Live room data  # [示例/Example] room_id = \"7385461256746060575\"
     * @summary 获取指定直播间的数据/Get data of specified live room
     * @param {string} roomId 直播间id/Live room id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_14(roomId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取直播间商品列表数据 ### 参数: - room_id: 直播间id，必填参数。 - author_id: 主播id，必填参数。 - page_size: 每页数量，可选参数，默认为15。 - offset: 翻页游标，可选参数，默认为0，每次翻页增加15。 - region: 地区，可选参数，默认为`US`，如果使用其他地区，如：`VN`，请自行携带Cookie，否则无法获取数据。 - cookie: 用户自己的cookie，可选参数，用于爬取除`US`以外的地区数据。 ### 参数获取: - 第一步：使用接口`f\"{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\"`接口获取直播间id（room_id）。 - 第二步：使用接口`f\"{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\"`接口获取直播间信息。 - 第三步：使用第二步返回的JSON数据中使用JSONPATH获取`$.data.data.owner.id_str`字段的值作为主播id（author_id）。 ### 返回: - 直播间商品列表数据  # [English] ### Purpose: - Get live room product list data ### Parameters: - room_id: Live room id, required parameter. - author_id: Anchor id, required parameter. - page_size: Number per page, optional parameter, default is 15. - offset: Page turning cursor, optional parameter, default is 0, increasing by 15 each time. - region: Region, optional parameter, default is `US`, if you use other regions, such as: `VN`, please bring your own Cookie, otherwise you will not be able to get data. - cookie: User\'s own cookie, optional parameter, used to crawl data from regions other than `US`. ### Get Parameters: - Step 1: Use the interface `f\"{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\"` to get the live room id (room_id). - Step 2: Use the interface `f\"{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\"` to get the live room information. - Step 3: Use the JSONPATH in the JSON data returned in the second step to get the value of the field `$.data.data.owner.id_str` as the anchor id (author_id). ### Return: - Live room product list data  # [示例/Example] room_id = \"7420741353250507562\" author_id = \"7408859677050274859\" page_size = 15 offset = 0
     * @summary 获取直播间商品列表数据/Get live room product list data
     * @param {string} roomId 直播间id/Live room id
     * @param {string} authorId 主播id/Anchor id
     * @param {number} [pageSize] 数量/Number
     * @param {number} [offset] 数量/Number
     * @param {string} [region] 地区/Region
     * @param {string} [cookie] 用户自己的cookie/User\&#39;s own cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet(roomId: string, authorId: string, pageSize?: number, offset?: number, region?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取直播间商品列表数据 ### 参数: - room_id: 直播间id，必填参数。 - author_id: 主播id，必填参数。 - page_size: 每页数量，可选参数，默认为15。 - offset: 翻页游标，可选参数，默认为0，每次翻页增加15。 - region: 地区，可选参数，默认为`US`，如果使用其他地区，如：`VN`，请自行携带Cookie，否则无法获取数据。 - cookie: 用户自己的cookie，可选参数，用于爬取除`US`以外的地区数据。 ### 参数获取: - 第一步：使用接口`f\"{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\"`接口获取直播间id（room_id）。 - 第二步：使用接口`f\"{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\"`接口获取直播间信息。 - 第三步：使用第二步返回的JSON数据中使用JSONPATH获取`$.data.data.owner.id_str`字段的值作为主播id（author_id）。 ### 返回: - 直播间商品列表数据  # [English] ### Purpose: - Get live room product list data ### Parameters: - room_id: Live room id, required parameter. - author_id: Anchor id, required parameter. - page_size: Number per page, optional parameter, default is 15. - offset: Page turning cursor, optional parameter, default is 0, increasing by 15 each time. - region: Region, optional parameter, default is `US`, if you use other regions, such as: `VN`, please bring your own Cookie, otherwise you will not be able to get data. - cookie: User\'s own cookie, optional parameter, used to crawl data from regions other than `US`. ### Get Parameters: - Step 1: Use the interface `f\"{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\"` to get the live room id (room_id). - Step 2: Use the interface `f\"{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\"` to get the live room information. - Step 3: Use the JSONPATH in the JSON data returned in the second step to get the value of the field `$.data.data.owner.id_str` as the anchor id (author_id). ### Return: - Live room product list data  # [示例/Example] room_id = \"7420741353250507562\" author_id = \"7408859677050274859\" page_size = 15 offset = 0
     * @summary 获取直播间商品列表数据/Get live room product list data
     * @param {string} roomId 直播间id/Live room id
     * @param {string} authorId 主播id/Anchor id
     * @param {number} [pageSize] 数量/Number
     * @param {number} [offset] 数量/Number
     * @param {string} [region] 地区/Region
     * @param {string} [cookie] 用户自己的cookie/User\&#39;s own cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet_15(roomId: string, authorId: string, pageSize?: number, offset?: number, region?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的直播搜索结果/Get live search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的直播搜索结果/Get live search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_16(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取地点搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 地点搜索结果  # [English] ### Purpose: - Get location search results ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Location search results  # [示例/Example] keyword = \"Shanghai\" offset = 0 count = 20
     * @summary 获取地点搜索结果/Get location search results
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取地点搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 地点搜索结果  # [English] ### Purpose: - Get location search results ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Location search results  # [示例/Example] keyword = \"Shanghai\" offset = 0 count = 20
     * @summary 获取地点搜索结果/Get location search results
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_17(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",     ]
     * @summary 批量获取视频信息/Batch Get Video Information
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",     ]
     * @summary 批量获取视频信息/Batch Get Video Information
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_18(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",     ]
     * @summary 批量获取视频信息 V2/Batch Get Video Information V2
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",     ]
     * @summary 批量获取视频信息 V2/Batch Get Video Information V2
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post_19(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"
     * @summary 获取指定音乐的详情数据/Get details of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet(musicId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"
     * @summary 获取指定音乐的详情数据/Get details of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_20(musicId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_21(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10
     * @summary 获取指定音乐的视频列表数据/Get video list of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet(musicId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10
     * @summary 获取指定音乐的视频列表数据/Get video list of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_22(musicId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_23(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet(shareUrl: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_24(shareUrl: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据 V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7463308759842966791\"
     * @summary 获取单个作品数据 V2/Get single video data V2
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据 V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7463308759842966791\"
     * @summary 获取单个作品数据 V2/Get single video data V2
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get_25(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商品详情数据 - 即将弃用，使用 fetch_product_detail_v2 代替 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据  # [English] ### Purpose: - Get product detail data - Will be deprecated, use fetch_product_detail_v2 instead ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data  # [示例/Example] product_id = \"1729385239712731370\"
     * @summary 获取商品详情数据（即将弃用，使用 fetch_product_detail_v2 代替）/Get product detail data (will be deprecated, use fetch_product_detail_v2 instead)
     * @param {string} productId 商品id/Product id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet(productId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商品详情数据 - 即将弃用，使用 fetch_product_detail_v2 代替 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据  # [English] ### Purpose: - Get product detail data - Will be deprecated, use fetch_product_detail_v2 instead ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data  # [示例/Example] product_id = \"1729385239712731370\"
     * @summary 获取商品详情数据（即将弃用，使用 fetch_product_detail_v2 代替）/Get product detail data (will be deprecated, use fetch_product_detail_v2 instead)
     * @param {string} productId 商品id/Product id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_26(productId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商品详情数据V2 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V2  # [English] ### Purpose: - Get product detail data V2 ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V2  # [示例/Example] product_id = \"1729385239712731370\"
     * @summary 获取商品详情数据V2/Get product detail data V2
     * @param {string} productId 商品id/Product id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get(productId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商品详情数据V2 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V2  # [English] ### Purpose: - Get product detail data V2 ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V2  # [示例/Example] product_id = \"1729385239712731370\"
     * @summary 获取商品详情数据V2/Get product detail data V2
     * @param {string} productId 商品id/Product id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get_27(productId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商品详情数据V3，如果商品详情数据V2无法获取，可以尝试使用此接口。 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V3  # [English] ### Purpose: - Get product detail data V3, if the product detail data V2 cannot be obtained, you can try using this interface. ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V3  # [示例/Example] product_id = \"1729385239712731370\"
     * @summary 获取商品详情数据V3/Get product detail data V3
     * @param {string} productId 商品id/Product id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get(productId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商品详情数据V3，如果商品详情数据V2无法获取，可以尝试使用此接口。 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V3  # [English] ### Purpose: - Get product detail data V3, if the product detail data V2 cannot be obtained, you can try using this interface. ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V3  # [示例/Example] product_id = \"1729385239712731370\"
     * @summary 获取商品详情数据V3/Get product detail data V3
     * @param {string} productId 商品id/Product id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get_28(productId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过分享链接获取商品ID ### 参数: - share_link: 分享链接 ### 返回: - 商品ID  # [English] ### Purpose: - Get Product ID by Share Link ### Parameters: - share_link: Share link ### Return: - Product ID  # [示例/Example] share_link = \"https://www.tiktok.com/t/ZT2A9N1kw/\"
     * @summary 通过分享链接获取商品ID/Get Product ID by Share Link
     * @param {string} shareLink 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet(shareLink: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过分享链接获取商品ID ### 参数: - share_link: 分享链接 ### 返回: - 商品ID  # [English] ### Purpose: - Get Product ID by Share Link ### Parameters: - share_link: Share link ### Return: - Product ID  # [示例/Example] share_link = \"https://www.tiktok.com/t/ZT2A9N1kw/\"
     * @summary 通过分享链接获取商品ID/Get Product ID by Share Link
     * @param {string} shareLink 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet_29(shareLink: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商品评价数据 ### 参数: - product_id: 商品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - size: 数量 - filter_id: 筛选条件     - 0: 全部评价     - 1: 1星评价     - 2: 2星评价     - 3: 3星评价     - 4: 4星评价     - 5: 5星评价     - 102: 有图评价     - 104: 已购买的评价 - sort_type: 排序条件     - 1: 相关度     - 2: 从新到旧 ### 返回: - 商品评价数据  # [English] ### Purpose: - Get product review data ### Parameters: - product_id: Product id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - size: Count number - filter_id: Filter condition     - 0: All reviews     - 1: 1-star review     - 2: 2-star review     - 3: 3-star review     - 4: 4-star review     - 5: 5-star review     - 102: Reviews with pictures     - 104: Reviews of purchased products - sort_type: Sorting conditions     - 1: Relevance     - 2: New to old ### Return: - Product review data  # [示例/Example] product_id = \"1729448812983194615\" cursor = 0 size = 10 filter_id = 0 sort_type = 0
     * @summary 获取商品评价数据/Get product review data
     * @param {string} productId 商品id/Product id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [size] 数量/Number
     * @param {number} [filterId] 筛选条件/Filter condition
     * @param {number} [sortType] 排序条件/Sorting conditions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet(productId: string, cursor?: number, size?: number, filterId?: number, sortType?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商品评价数据 ### 参数: - product_id: 商品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - size: 数量 - filter_id: 筛选条件     - 0: 全部评价     - 1: 1星评价     - 2: 2星评价     - 3: 3星评价     - 4: 4星评价     - 5: 5星评价     - 102: 有图评价     - 104: 已购买的评价 - sort_type: 排序条件     - 1: 相关度     - 2: 从新到旧 ### 返回: - 商品评价数据  # [English] ### Purpose: - Get product review data ### Parameters: - product_id: Product id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - size: Count number - filter_id: Filter condition     - 0: All reviews     - 1: 1-star review     - 2: 2-star review     - 3: 3-star review     - 4: 4-star review     - 5: 5-star review     - 102: Reviews with pictures     - 104: Reviews of purchased products - sort_type: Sorting conditions     - 1: Relevance     - 2: New to old ### Return: - Product review data  # [示例/Example] product_id = \"1729448812983194615\" cursor = 0 size = 10 filter_id = 0 sort_type = 0
     * @summary 获取商品评价数据/Get product review data
     * @param {string} productId 商品id/Product id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [size] 数量/Number
     * @param {number} [filterId] 筛选条件/Filter condition
     * @param {number} [sortType] 排序条件/Sorting conditions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_30(productId: string, cursor?: number, size?: number, filterId?: number, sortType?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商品搜索结果 ### 参数: - keyword: 关键词 - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 - sort_type: 商品排序条件     - 1: 综合排序     - 2: 销量排序     - 3: 价格从高到低     - 4: 价格从低到高     - 5: 最新发布 - customer_review_four_star: 四星以上评价 - have_discount: 有优惠 - min_price: 最低价格 - max_price: 最高价格 ### 返回: - 商品搜索结果  # [English] ### Purpose: - Get product search results ### Parameters: - keyword: Keyword - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number - sort_type: Product sorting conditions     - 1: Comprehensive sorting     - 2: Sales volume sorting     - 3: Price high to low     - 4: Price low to high     - 5: Latest release - customer_review_four_star: Four-star or more reviews - have_discount: Having discount - min_price: Minimum price - max_price: Maximum price ### Return: - Product search results  # [示例/Example] keyword = \"Cat Toy\" cursor = 0 count = 12 sort_type = 1 customer_review_four_star = False have_discount = False min_price = \"10\" max_price = \"25\"
     * @summary 获取商品搜索结果/Get product search results
     * @param {string} keyword 关键词/Keyword
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 商品排序条件/Product sorting conditions
     * @param {boolean} [customerReviewFourStar] 四星以上评价/Four-star or more reviews
     * @param {boolean} [haveDiscount] 有优惠/Having discount
     * @param {string} [minPrice] 最低价格/Minimum price
     * @param {string} [maxPrice] 最高价格/Maximum price
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet(keyword: string, cursor?: number, count?: number, sortType?: number, customerReviewFourStar?: boolean, haveDiscount?: boolean, minPrice?: string, maxPrice?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商品搜索结果 ### 参数: - keyword: 关键词 - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 - sort_type: 商品排序条件     - 1: 综合排序     - 2: 销量排序     - 3: 价格从高到低     - 4: 价格从低到高     - 5: 最新发布 - customer_review_four_star: 四星以上评价 - have_discount: 有优惠 - min_price: 最低价格 - max_price: 最高价格 ### 返回: - 商品搜索结果  # [English] ### Purpose: - Get product search results ### Parameters: - keyword: Keyword - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number - sort_type: Product sorting conditions     - 1: Comprehensive sorting     - 2: Sales volume sorting     - 3: Price high to low     - 4: Price low to high     - 5: Latest release - customer_review_four_star: Four-star or more reviews - have_discount: Having discount - min_price: Minimum price - max_price: Maximum price ### Return: - Product search results  # [示例/Example] keyword = \"Cat Toy\" cursor = 0 count = 12 sort_type = 1 customer_review_four_star = False have_discount = False min_price = \"10\" max_price = \"25\"
     * @summary 获取商品搜索结果/Get product search results
     * @param {string} keyword 关键词/Keyword
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 商品排序条件/Product sorting conditions
     * @param {boolean} [customerReviewFourStar] 四星以上评价/Four-star or more reviews
     * @param {boolean} [haveDiscount] 有优惠/Having discount
     * @param {string} [minPrice] 最低价格/Minimum price
     * @param {string} [maxPrice] 最高价格/Maximum price
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_31(keyword: string, cursor?: number, count?: number, sortType?: number, customerReviewFourStar?: boolean, haveDiscount?: boolean, minPrice?: string, maxPrice?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取分享二维码 ### 参数: - object_id: 对象id，当前支持个人主页接口响应中的uid作为参数。 ### 返回: - 二维码图片  # [English] ### Purpose: - Get share QR code ### Parameters: - object_id: Object id, currently supports the uid in the response of the personal homepage interface as a parameter. ### Return: - QR code image  # [示例/Example] url = \"6762244951259661318\"
     * @summary 获取分享二维码/Get share QR code
     * @param {string} objectId 对象id/Object id
     * @param {number} [schemaType] 模式类型/Schema type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet(objectId: string, schemaType?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取分享二维码 ### 参数: - object_id: 对象id，当前支持个人主页接口响应中的uid作为参数。 ### 返回: - 二维码图片  # [English] ### Purpose: - Get share QR code ### Parameters: - object_id: Object id, currently supports the uid in the response of the personal homepage interface as a parameter. ### Return: - QR code image  # [示例/Example] url = \"6762244951259661318\"
     * @summary 获取分享二维码/Get share QR code
     * @param {string} objectId 对象id/Object id
     * @param {number} [schemaType] 模式类型/Schema type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_32(objectId: string, schemaType?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取分享短链接 ### 参数: - url: 长链接或想要转换的链接 ### 返回: - 短链接  # [English] ### Purpose: - Get share short link ### Parameters: - url: Long link or link to convert ### Return: - Short link  # [示例/Example] url = \"https://www.tiktok.com/passport/web/logout/\"
     * @summary 获取分享短链接/Get share short link
     * @param {string} url 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取分享短链接 ### 参数: - url: 长链接或想要转换的链接 ### 返回: - 短链接  # [English] ### Purpose: - Get share short link ### Parameters: - url: Long link or link to convert ### Return: - Short link  # [示例/Example] url = \"https://www.tiktok.com/passport/web/logout/\"
     * @summary 获取分享短链接/Get share short link
     * @param {string} url 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_33(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商家主页的商品数据 ### 参数: - page_id: 爬取的商家主页Page id，可以从`fetch_shop_home_page_list`这个接口获取 - seller_id: 商家id,店铺id ### 返回: - 商家主页数据  # [English] ### Purpose: - Get product data of the shop home page ### Parameters: - page_id: Page id of the crawled shop home page, which can be obtained from the interface `fetch_shop_home_page_list` - seller_id: Seller id, shop id ### Return: - Shop home page data  # [示例/Example] page_id = \"7314705727611930410\" seller_id = \"8646929864612614278\"
     * @summary 获取商家主页数据/Get shop home page data
     * @param {string} pageId 爬取的商家主页Page id/Page id of the crawled shop home page
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet(pageId: string, sellerId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商家主页的商品数据 ### 参数: - page_id: 爬取的商家主页Page id，可以从`fetch_shop_home_page_list`这个接口获取 - seller_id: 商家id,店铺id ### 返回: - 商家主页数据  # [English] ### Purpose: - Get product data of the shop home page ### Parameters: - page_id: Page id of the crawled shop home page, which can be obtained from the interface `fetch_shop_home_page_list` - seller_id: Seller id, shop id ### Return: - Shop home page data  # [示例/Example] page_id = \"7314705727611930410\" seller_id = \"8646929864612614278\"
     * @summary 获取商家主页数据/Get shop home page data
     * @param {string} pageId 爬取的商家主页Page id/Page id of the crawled shop home page
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_34(pageId: string, sellerId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商家主页Page列表数据, 用于商家主页展示，以及爬取商家主页的商品数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家主页Page列表数据  # [English] ### Purpose: - Get shop home page list data, used for shop home page display, and crawling shop home page product data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop home page list data  # [示例/Example] seller_id = \"8646929864612614278\"
     * @summary 获取商家主页Page列表数据/Get shop home page list data
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet(sellerId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商家主页Page列表数据, 用于商家主页展示，以及爬取商家主页的商品数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家主页Page列表数据  # [English] ### Purpose: - Get shop home page list data, used for shop home page display, and crawling shop home page product data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop home page list data  # [示例/Example] seller_id = \"8646929864612614278\"
     * @summary 获取商家主页Page列表数据/Get shop home page list data
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_35(sellerId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过分享链接获取店铺ID ### 参数: - share_link: 分享链接 ### 返回: - 店铺ID  # [English] ### Purpose: - Get Shop ID by Share Link ### Parameters: - share_link: Share link ### Return: - Shop ID  # [示例/Example] share_link = \"https://vt.tiktok.com/ZT2AHoGsE/\"
     * @summary 通过分享链接获取店铺ID/Get Shop ID by Share Link
     * @param {string} shareLink 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet(shareLink: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过分享链接获取店铺ID ### 参数: - share_link: 分享链接 ### 返回: - 店铺ID  # [English] ### Purpose: - Get Shop ID by Share Link ### Parameters: - share_link: Share link ### Return: - Shop ID  # [示例/Example] share_link = \"https://vt.tiktok.com/ZT2AHoGsE/\"
     * @summary 通过分享链接获取店铺ID/Get Shop ID by Share Link
     * @param {string} shareLink 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet_36(shareLink: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商家信息数据 ### 参数: - shop_id: 商家id,店铺id ### 返回: - 商家信息数据  # [English] ### Purpose: - Get shop information data ### Parameters: - shop_id: Seller id, shop id ### Return: - Shop information data  # [示例/Example] shop_id = \"8646942781241463007\"
     * @summary 获取商家信息数据/Get shop information data
     * @param {string} shopId 商家id,店铺id/Seller id, shop id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet(shopId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商家信息数据 ### 参数: - shop_id: 商家id,店铺id ### 返回: - 商家信息数据  # [English] ### Purpose: - Get shop information data ### Parameters: - shop_id: Seller id, shop id ### Return: - Shop information data  # [示例/Example] shop_id = \"8646942781241463007\"
     * @summary 获取商家信息数据/Get shop information data
     * @param {string} shopId 商家id,店铺id/Seller id, shop id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_37(shopId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商家产品分类数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家产品分类数据  # [English] ### Purpose: - Get shop product category data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop product category data  # [示例/Example] seller_id = \"7495294980909468039\"
     * @summary 获取商家产品分类数据/Get shop product category data
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet(sellerId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商家产品分类数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家产品分类数据  # [English] ### Purpose: - Get shop product category data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop product category data  # [示例/Example] seller_id = \"7495294980909468039\"
     * @summary 获取商家产品分类数据/Get shop product category data
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_38(sellerId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_params = \"\" page_size = 10 sort_field = 1 sort_order = 0
     * @summary 获取商家商品列表数据/Get shop product list data
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {string} [scrollParams] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
     * @param {number} [pageSize] 每页数量/Number per page
     * @param {number} [sortField] 排序字段/Sorting field
     * @param {number} [sortOrder] 排序方式/Sorting method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet(sellerId: string, scrollParams?: string, pageSize?: number, sortField?: number, sortOrder?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_params = \"\" page_size = 10 sort_field = 1 sort_order = 0
     * @summary 获取商家商品列表数据/Get shop product list data
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {string} [scrollParams] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
     * @param {number} [pageSize] 每页数量/Number per page
     * @param {number} [sortField] 排序字段/Sorting field
     * @param {number} [sortOrder] 排序方式/Sorting method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_39(sellerId: string, scrollParams?: string, pageSize?: number, sortField?: number, sortOrder?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_params = \"\" page_size = 10 sort_field = 1 sort_order = 0
     * @summary 获取商家商品列表数据 V2/Get shop product list data V2
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {string} [scrollParams] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
     * @param {number} [pageSize] 每页数量/Number per page
     * @param {number} [sortField] 排序字段/Sorting field
     * @param {number} [sortOrder] 排序方式/Sorting method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get(sellerId: string, scrollParams?: string, pageSize?: number, sortField?: number, sortOrder?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_params = \"\" page_size = 10 sort_field = 1 sort_order = 0
     * @summary 获取商家商品列表数据 V2/Get shop product list data V2
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {string} [scrollParams] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
     * @param {number} [pageSize] 每页数量/Number per page
     * @param {number} [sortField] 排序字段/Sorting field
     * @param {number} [sortOrder] 排序方式/Sorting method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get_40(sellerId: string, scrollParams?: string, pageSize?: number, sortField?: number, sortOrder?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商家商品推荐数据 ### 参数: - seller_id: 商家id,店铺id - scroll_param: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 ### 返回: - 商家商品推荐数据  # [English] ### Purpose: - Get shop product recommend data ### Parameters: - seller_id: Seller id, shop id - scroll_param: Scroll parameter, used to load more product data - page_size: Number per page ### Return: - Shop product recommend data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_param = \"\" page_size = 10
     * @summary 获取商家商品推荐数据/Get shop product recommend data
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {string} [scrollParam] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
     * @param {number} [pageSize] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet(sellerId: string, scrollParam?: string, pageSize?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取商家商品推荐数据 ### 参数: - seller_id: 商家id,店铺id - scroll_param: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 ### 返回: - 商家商品推荐数据  # [English] ### Purpose: - Get shop product recommend data ### Parameters: - seller_id: Seller id, shop id - scroll_param: Scroll parameter, used to load more product data - page_size: Number per page ### Return: - Shop product recommend data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_param = \"\" page_size = 10
     * @summary 获取商家商品推荐数据/Get shop product recommend data
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {string} [scrollParam] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
     * @param {number} [pageSize] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_41(sellerId: string, scrollParam?: string, pageSize?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
     * @summary 获取指定用户的粉丝列表数据/Get follower list of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [count] 数量/Number
     * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
     * @param {string} [pageToken] 翻页token/Page token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
     * @summary 获取指定用户的粉丝列表数据/Get follower list of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [count] 数量/Number
     * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
     * @param {string} [pageToken] 翻页token/Page token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_42(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
     * @summary 获取指定用户的关注列表数据/Get following list of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [count] 数量/Number
     * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
     * @param {string} [pageToken] 翻页token/Page token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
     * @summary 获取指定用户的关注列表数据/Get following list of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [count] 数量/Number
     * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
     * @param {string} [pageToken] 翻页token/Page token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_43(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA-RkTGCGXLuLKRM5Xcuuwm7Mclg51I2ECO1RqOA7mJHuXFz99nztdi077Z2XmYHZV\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA-RkTGCGXLuLKRM5Xcuuwm7Mclg51I2ECO1RqOA7mJHuXFz99nztdi077Z2XmYHZV\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_44(secUserId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户音乐列表数据 ### 参数: - sec_uid: 用户sec_uid - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 用户音乐列表数据  # [English] ### Purpose: - Get user music list data ### Parameters: - sec_uid: User sec_uid - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number  # [示例/Example] sec_uid = \"MS4wLjABAAAAqB08cUbXaDWqbD6MCga2RbGTuhfO2EsHayBYx08NDrN7IE3jQuRDNNN6YwyfH6_6\" cursor = 0 count = 10
     * @summary 获取用户音乐列表数据/Get user music list data
     * @param {string} secUid 用户sec_uid/User sec_uid
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet(secUid: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户音乐列表数据 ### 参数: - sec_uid: 用户sec_uid - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 用户音乐列表数据  # [English] ### Purpose: - Get user music list data ### Parameters: - sec_uid: User sec_uid - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number  # [示例/Example] sec_uid = \"MS4wLjABAAAAqB08cUbXaDWqbD6MCga2RbGTuhfO2EsHayBYx08NDrN7IE3jQuRDNNN6YwyfH6_6\" cursor = 0 count = 10
     * @summary 获取用户音乐列表数据/Get user music list data
     * @param {string} secUid 用户sec_uid/User sec_uid
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_45(secUid: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户作品数据，如果sec_user_id为空，则使用unique_id获取用户作品数据。 - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量，建议保持默认值20。 - sort_type: 排序类型，0-最新，1-热门 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户作品数据，unique_id也是用户的用户名。 - 关于用户ID的参数，优先级为sec_user_id > unique_id，优先级越高速度越快，并且建议只使用sec_user_id获取用户数据。 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id, use sec_user_id to get user video data first, if sec_user_id is empty, use unique_id to get user video data. - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number - sort_type: Sort type, 0-Latest, 1-Hot - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user video data, unique_id is also the user\'s username. - About the parameters of user ID, the priority is sec_user_id > unique_id, the higher the priority, the faster the speed, and it is recommended to use only sec_user_id to get user data. ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20 sort_type = 0 unique_id = \"tiktok\"
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [uniqueId] 用户unique_id/User unique_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [sortType] 排序类型/Sort type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet(secUserId?: string, uniqueId?: string, maxCursor?: number, count?: number, sortType?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户作品数据，如果sec_user_id为空，则使用unique_id获取用户作品数据。 - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量，建议保持默认值20。 - sort_type: 排序类型，0-最新，1-热门 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户作品数据，unique_id也是用户的用户名。 - 关于用户ID的参数，优先级为sec_user_id > unique_id，优先级越高速度越快，并且建议只使用sec_user_id获取用户数据。 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id, use sec_user_id to get user video data first, if sec_user_id is empty, use unique_id to get user video data. - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number - sort_type: Sort type, 0-Latest, 1-Hot - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user video data, unique_id is also the user\'s username. - About the parameters of user ID, the priority is sec_user_id > unique_id, the higher the priority, the faster the speed, and it is recommended to use only sec_user_id to get user data. ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20 sort_type = 0 unique_id = \"tiktok\"
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [uniqueId] 用户unique_id/User unique_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [sortType] 排序类型/Sort type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_46(secUserId?: string, uniqueId?: string, maxCursor?: number, count?: number, sortType?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户转发的作品数据 ### 参数: - user_id: 用户id，可以通过 handler_user_profile 端点获取，响应中的关键字为uid。 - offset: 偏移量 - count: 数量 ### 返回: - 用户转发作品数据  # [English] ### Purpose: - Get user repost video data ### Parameters: - user_id: User id, which can be obtained through the handler_user_profile endpoint, with the keyword uid in the response. - offset: Offset - count: Number ### Return: - User repost video data  # [示例/Example] user_id = 107955 offset = 0 count = 21
     * @summary 获取用户转发的作品数据/Get user repost video data
     * @param {number} userId 用户id/User id
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet(userId: number, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户转发的作品数据 ### 参数: - user_id: 用户id，可以通过 handler_user_profile 端点获取，响应中的关键字为uid。 - offset: 偏移量 - count: 数量 ### 返回: - 用户转发作品数据  # [English] ### Purpose: - Get user repost video data ### Parameters: - user_id: User id, which can be obtained through the handler_user_profile endpoint, with the keyword uid in the response. - offset: Offset - count: Number ### Return: - User repost video data  # [示例/Example] user_id = 107955 offset = 0 count = 21
     * @summary 获取用户转发的作品数据/Get user repost video data
     * @param {number} userId 用户id/User id
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_47(userId: number, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"
     * @summary 获取指定关键词的用户搜索结果/Get user search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [userSearchFollowerCount] 根据粉丝数排序/Sort by number of followers
     * @param {string} [userSearchProfileType] 根据账号类型排序/Sort by account type
     * @param {string} [userSearchOtherPref] 根据其他偏好排序/Sort by other preferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet(keyword: string, offset?: number, count?: number, userSearchFollowerCount?: string, userSearchProfileType?: string, userSearchOtherPref?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"
     * @summary 获取指定关键词的用户搜索结果/Get user search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [userSearchFollowerCount] 根据粉丝数排序/Sort by number of followers
     * @param {string} [userSearchProfileType] 根据账号类型排序/Sort by account type
     * @param {string} [userSearchOtherPref] 根据其他偏好排序/Sort by other preferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_48(keyword: string, offset?: number, count?: number, userSearchFollowerCount?: string, userSearchProfileType?: string, userSearchOtherPref?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_49(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_50(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_51(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户信息。 - user_id: 用户uid，可选参数，纯数字，如果使用请保持sec_user_id以及unique_id为空。 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户信息，unique_id也是用户的用户名，如果使用请保持sec_user_id以及user_id为空。 - 以上参数必须至少填写一个，优先级为sec_user_id > user_id > unique_id，优先级越高速度越快。 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id - user_id: User uid, optional parameter, pure number, if used, please keep sec_user_id and unique_id empty. - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user information, unique_id is also the user\'s username, if used, please keep sec_user_id and user_id empty. - At least one of the above parameters must be filled in, the priority is sec_user_id > user_id > unique_id, the higher the priority, the faster the speed. ### Return: - User information  # [示例/Example] user_id = \"107955\" sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" unique_id = \"tiktok\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} [userId] 用户uid （可选，纯数字）/User uid (optional, pure number)
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [uniqueId] 用户unique_id （用户名）/User unique_id (username)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet(userId?: string, secUserId?: string, uniqueId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户信息。 - user_id: 用户uid，可选参数，纯数字，如果使用请保持sec_user_id以及unique_id为空。 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户信息，unique_id也是用户的用户名，如果使用请保持sec_user_id以及user_id为空。 - 以上参数必须至少填写一个，优先级为sec_user_id > user_id > unique_id，优先级越高速度越快。 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id - user_id: User uid, optional parameter, pure number, if used, please keep sec_user_id and unique_id empty. - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user information, unique_id is also the user\'s username, if used, please keep sec_user_id and user_id empty. - At least one of the above parameters must be filled in, the priority is sec_user_id > user_id > unique_id, the higher the priority, the faster the speed. ### Return: - User information  # [示例/Example] user_id = \"107955\" sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" unique_id = \"tiktok\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} [userId] 用户uid （可选，纯数字）/User uid (optional, pure number)
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [uniqueId] 用户unique_id （用户名）/User unique_id (username)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_52(userId?: string, secUserId?: string, uniqueId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] keyword = \"Evil0ctal\"
     * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果/Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result
     * @param {string} keyword 关键词/Keyword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    openTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet(keyword: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] keyword = \"Evil0ctal\"
     * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果/Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result
     * @param {string} keyword 关键词/Keyword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    openTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet_53(keyword: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and send private messages to specified users  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid = \"7059867056504407087\"
     * @summary 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信/Generate TikTok share link, call TikTok APP, and send private messages to specified users
     * @param {string} uid 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    openTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet(uid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and send private messages to specified users  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid = \"7059867056504407087\"
     * @summary 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信/Generate TikTok share link, call TikTok APP, and send private messages to specified users
     * @param {string} uid 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    openTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet_54(uid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified user profile  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid = \"7059867056504407087\"
     * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页/Generate TikTok share link, call TikTok APP, and jump to the specified user profile
     * @param {string} uid 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    openTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet(uid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified user profile  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid = \"7059867056504407087\"
     * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页/Generate TikTok share link, call TikTok APP, and jump to the specified user profile
     * @param {string} uid 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    openTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet_55(uid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified video  ### Parameters: - aweme_id: Video id - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] aweme_id = \"7440436579409153311\"
     * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页/Generate TikTok share link, call TikTok APP, and jump to the specified video details page
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    openTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified video  ### Parameters: - aweme_id: Video id - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] aweme_id = \"7440436579409153311\"
     * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页/Generate TikTok share link, call TikTok APP, and jump to the specified video details page
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    openTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet_56(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - TikTok APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，不要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device for TikTok APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, without http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy = \"username:password@ip:port\"  # [响应/Response] ```json {    \"code\":200,    \"router\":\"/api/v1/tiktok/app/v3/register_device\",    \"params\":{       \"proxy\":\"username:password@ip:port\"    },    \"data\":{       \"cookie\":\"install_id=7417331203928426283; store-country-code=us; store-country-code-src=did; store-idc=useast5; ttreq=1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\",       \"id\":\"eyJhYyI6ICJ3aWZpIiwgImNoYW5uZWwiOiAiZ29vZ2xlcGxheSIsICJhaWQiOiAiMTIzMyIsICJhcHBfbmFtZSI6ICJtdXNpY2FsX2x5IiwgInZlcnNpb25fY29kZSI6ICIyNjA2MDIiLCAidmVyc2lvbl9uYW1lIjogIjI2LjYuMiIsICJkZXZpY2VfcGxhdGZvcm0iOiAiYW5kcm9pZCIsICJhYl92ZXJzaW9uIjogIjI2LjYuMiIsICJzc21peCI6ICJhIiwgImRldmljZV90eXBlIjogIlBPVC1MWDQ2IiwgImRldmljZV9icmFuZCI6ICJIVUFXRUkiLCAiZGV2aWNlX21vZGVsIjogIlBPVC1MWDQ2IiwgImxhbmd1YWdlIjogImVuIiwgIm9zX2FwaSI6ICIyOSIsICJvc192ZXJzaW9uIjogIjEwIiwgIm1hbmlmZXN0X3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgInJlc29sdXRpb24iOiAiMTA4MCoyMzQwIiwgImRwaSI6ICI0ODAiLCAidXBkYXRlX3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgImFwcF9za2luIjogIndoaXRlIiwgImFwcF90eXBlIjogIm5vcm1hbCIsICJyZXNpZGVuY2UiOiAiVVMiLCAic3lzX3JlZ2lvbiI6ICJVUyIsICJwYXNzLXJvdXRlIjogIjEiLCAibWNjX21uYyI6ICIzMTAyNjAiLCAicGFzcy1yZWdpb24iOiAiMSIsICJ0aW1lem9uZV9uYW1lIjogIkFtZXJpY2ElMkZOZXdfWW9yayIsICJjYXJyaWVyX3JlZ2lvbl92MiI6ICIzMTAiLCAiY3B1X3N1cHBvcnQ2NCI6ICJ0cnVlIiwgImhvc3RfYWJpIjogImFybTY0LXY4YSIsICJhcHBfbGFuZ3VhZ2UiOiAiZW4iLCAiY2Fycmllcl9yZWdpb24iOiAiVVMiLCAiYWMyIjogIndpZmkiLCAidW9vIjogIjEiLCAib3BfcmVnaW9uIjogIlVTIiwgInRpbWV6b25lX29mZnNldCI6IC0xNDQwMCwgImJ1aWxkX251bWJlciI6ICIyNi42LjIiLCAibG9jYWxlIjogImVuIiwgInJlZ2lvbiI6ICJVUyIsICJvcGVudWRpZCI6ICI0ZTM5NzdlNmJhNWNhZDc0IiwgImNkaWQiOiAiYjFkOTA2YzMtOTYxMy00MWM1LTk4ZjgtZDZhYWJjOTdiMTExIiwgImRldmljZV9pZCI6ICI3NDE3MzMwOTk5MDIzNTAyODkwIiwgImlpZCI6ICI3NDE3MzMxMjAzOTI4NDI2MjgzIiwgInVzZXJfYWdlbnQiOiAiY29tLnpoaWxpYW9hcHAubXVzaWNhbGx5LzIwMjI2MDYwMjAgKExpbnV4OyBVOyBBbmRyb2lkIDEwLjAuMDsgZW47IEhVQVdFSSBQT1QtTFg0NjsgQnVpbGQvT1BSNi4xNzA2MjMuMDE3O3R0LW9rLzMuMTIuMTMuMSkiLCAiY29va2llIjogImluc3RhbGxfaWQ9NzQxNzMzMTIwMzkyODQyNjI4Mzsgc3RvcmUtY291bnRyeS1jb2RlPXVzOyBzdG9yZS1jb3VudHJ5LWNvZGUtc3JjPWRpZDsgc3RvcmUtaWRjPXVzZWFzdDU7IHR0cmVxPTEkODViMWY1YjBiNDBhZWIwZmY3NjU5OGE2YTk0ZmNiMDcwNGIxMGQ3NCIsICJwcm94eSI6ICJodHRwOi8vMTU0LjIwMi4xMDcuMjAyOjMxMjgifQ==\",       \"tiktok_info\":{          \"cdid\":\"b1d906c3-9613-41c5-98f8-d6aabc97b111\",          \"cookie\":\"install_id=7417331203928426283; store-country-code=us; store-country-code-src=did; store-idc=useast5; ttreq=1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\",          \"device_brand\":\"HUAWEI\",          \"device_type\":\"POT-LX46\",          \"did\":\"7417330999023502890\",          \"iid\":\"7417331203928426283\",          \"mcc_mnc\":\"310260\",          \"openudid\":\"4e3977e6ba5cad74\",          \"os_api\":\"29\",          \"os_version\":\"10\",          \"user_agent\":\"okhttp/3.10.0.1\",          \"version_code\":\"260602\",          \"version_name\":\"26.6.2\"       }    } } ```
     * @summary 注册设备信息/Register device information
     * @param {string} [proxy] 代理/Proxy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    registerDeviceApiV1TiktokAppV3RegisterDeviceGet(proxy?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - TikTok APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，不要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device for TikTok APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, without http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy = \"username:password@ip:port\"  # [响应/Response] ```json {    \"code\":200,    \"router\":\"/api/v1/tiktok/app/v3/register_device\",    \"params\":{       \"proxy\":\"username:password@ip:port\"    },    \"data\":{       \"cookie\":\"install_id=7417331203928426283; store-country-code=us; store-country-code-src=did; store-idc=useast5; ttreq=1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\",       \"id\":\"eyJhYyI6ICJ3aWZpIiwgImNoYW5uZWwiOiAiZ29vZ2xlcGxheSIsICJhaWQiOiAiMTIzMyIsICJhcHBfbmFtZSI6ICJtdXNpY2FsX2x5IiwgInZlcnNpb25fY29kZSI6ICIyNjA2MDIiLCAidmVyc2lvbl9uYW1lIjogIjI2LjYuMiIsICJkZXZpY2VfcGxhdGZvcm0iOiAiYW5kcm9pZCIsICJhYl92ZXJzaW9uIjogIjI2LjYuMiIsICJzc21peCI6ICJhIiwgImRldmljZV90eXBlIjogIlBPVC1MWDQ2IiwgImRldmljZV9icmFuZCI6ICJIVUFXRUkiLCAiZGV2aWNlX21vZGVsIjogIlBPVC1MWDQ2IiwgImxhbmd1YWdlIjogImVuIiwgIm9zX2FwaSI6ICIyOSIsICJvc192ZXJzaW9uIjogIjEwIiwgIm1hbmlmZXN0X3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgInJlc29sdXRpb24iOiAiMTA4MCoyMzQwIiwgImRwaSI6ICI0ODAiLCAidXBkYXRlX3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgImFwcF9za2luIjogIndoaXRlIiwgImFwcF90eXBlIjogIm5vcm1hbCIsICJyZXNpZGVuY2UiOiAiVVMiLCAic3lzX3JlZ2lvbiI6ICJVUyIsICJwYXNzLXJvdXRlIjogIjEiLCAibWNjX21uYyI6ICIzMTAyNjAiLCAicGFzcy1yZWdpb24iOiAiMSIsICJ0aW1lem9uZV9uYW1lIjogIkFtZXJpY2ElMkZOZXdfWW9yayIsICJjYXJyaWVyX3JlZ2lvbl92MiI6ICIzMTAiLCAiY3B1X3N1cHBvcnQ2NCI6ICJ0cnVlIiwgImhvc3RfYWJpIjogImFybTY0LXY4YSIsICJhcHBfbGFuZ3VhZ2UiOiAiZW4iLCAiY2Fycmllcl9yZWdpb24iOiAiVVMiLCAiYWMyIjogIndpZmkiLCAidW9vIjogIjEiLCAib3BfcmVnaW9uIjogIlVTIiwgInRpbWV6b25lX29mZnNldCI6IC0xNDQwMCwgImJ1aWxkX251bWJlciI6ICIyNi42LjIiLCAibG9jYWxlIjogImVuIiwgInJlZ2lvbiI6ICJVUyIsICJvcGVudWRpZCI6ICI0ZTM5NzdlNmJhNWNhZDc0IiwgImNkaWQiOiAiYjFkOTA2YzMtOTYxMy00MWM1LTk4ZjgtZDZhYWJjOTdiMTExIiwgImRldmljZV9pZCI6ICI3NDE3MzMwOTk5MDIzNTAyODkwIiwgImlpZCI6ICI3NDE3MzMxMjAzOTI4NDI2MjgzIiwgInVzZXJfYWdlbnQiOiAiY29tLnpoaWxpYW9hcHAubXVzaWNhbGx5LzIwMjI2MDYwMjAgKExpbnV4OyBVOyBBbmRyb2lkIDEwLjAuMDsgZW47IEhVQVdFSSBQT1QtTFg0NjsgQnVpbGQvT1BSNi4xNzA2MjMuMDE3O3R0LW9rLzMuMTIuMTMuMSkiLCAiY29va2llIjogImluc3RhbGxfaWQ9NzQxNzMzMTIwMzkyODQyNjI4Mzsgc3RvcmUtY291bnRyeS1jb2RlPXVzOyBzdG9yZS1jb3VudHJ5LWNvZGUtc3JjPWRpZDsgc3RvcmUtaWRjPXVzZWFzdDU7IHR0cmVxPTEkODViMWY1YjBiNDBhZWIwZmY3NjU5OGE2YTk0ZmNiMDcwNGIxMGQ3NCIsICJwcm94eSI6ICJodHRwOi8vMTU0LjIwMi4xMDcuMjAyOjMxMjgifQ==\",       \"tiktok_info\":{          \"cdid\":\"b1d906c3-9613-41c5-98f8-d6aabc97b111\",          \"cookie\":\"install_id=7417331203928426283; store-country-code=us; store-country-code-src=did; store-idc=useast5; ttreq=1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\",          \"device_brand\":\"HUAWEI\",          \"device_type\":\"POT-LX46\",          \"did\":\"7417330999023502890\",          \"iid\":\"7417331203928426283\",          \"mcc_mnc\":\"310260\",          \"openudid\":\"4e3977e6ba5cad74\",          \"os_api\":\"29\",          \"os_version\":\"10\",          \"user_agent\":\"okhttp/3.10.0.1\",          \"version_code\":\"260602\",          \"version_name\":\"26.6.2\"       }    } } ```
     * @summary 注册设备信息/Register device information
     * @param {string} [proxy] 代理/Proxy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    registerDeviceApiV1TiktokAppV3RegisterDeviceGet_57(proxy?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - TikTok APP加密算法，用于生成请求头中的加密参数。 - 生成的加密参数列表：     - `x-ladon`     - `x-khronos`     - `x-argus`     - `x-gorgon` （8404）  ### 参数: - url: 需要加密的完整URL - data: 如果接口是POST请求，请填写POST请求的数据参与加密计算，GET请求时传入空字符串即可。 - device_info: 设备信息，可选参数，如果不填写则使用默认设备信息，设备信息会修改传入的URL中的参数。  ### 返回: - 加密参数列表  # [English] ### Purpose: - TikTok APP encryption algorithm, used to generate encrypted parameters in the request header. - The generated encrypted parameter list:     - `x-ladon`     - `x-khronos`     - `x-argus`     - `x-gorgon` (8404)  ### Parameters: - url: Full URL to be encrypted - data: If the interface is a POST request, please fill in the data of the POST request to participate in the encryption calculation. For GET requests, pass an empty string. - device_info: Device information, optional parameter, if not filled in, the default device information will be used, and the device information will modify the parameters in the URL passed in.  ### Return: - Encrypted parameter list
     * @summary TikTok APP加密算法/TikTok APP encryption algorithm
     * @param {TikTokAppEncryptRequest} [tikTokAppEncryptRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    tTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost(tikTokAppEncryptRequest?: TikTokAppEncryptRequest, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - TikTok APP加密算法，用于生成请求头中的加密参数。 - 生成的加密参数列表：     - `x-ladon`     - `x-khronos`     - `x-argus`     - `x-gorgon` （8404）  ### 参数: - url: 需要加密的完整URL - data: 如果接口是POST请求，请填写POST请求的数据参与加密计算，GET请求时传入空字符串即可。 - device_info: 设备信息，可选参数，如果不填写则使用默认设备信息，设备信息会修改传入的URL中的参数。  ### 返回: - 加密参数列表  # [English] ### Purpose: - TikTok APP encryption algorithm, used to generate encrypted parameters in the request header. - The generated encrypted parameter list:     - `x-ladon`     - `x-khronos`     - `x-argus`     - `x-gorgon` (8404)  ### Parameters: - url: Full URL to be encrypted - data: If the interface is a POST request, please fill in the data of the POST request to participate in the encryption calculation. For GET requests, pass an empty string. - device_info: Device information, optional parameter, if not filled in, the default device information will be used, and the device information will modify the parameters in the URL passed in.  ### Return: - Encrypted parameter list
     * @summary TikTok APP加密算法/TikTok APP encryption algorithm
     * @param {TikTokAppEncryptRequest} [tikTokAppEncryptRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApiInterface
     */
    tTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost_58(tikTokAppEncryptRequest?: TikTokAppEncryptRequest, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * TikTokAppV3APIApi - object-oriented interface
 * @export
 * @class TikTokAppV3APIApi
 * @extends {BaseAPI}
 */
export class TikTokAppV3APIApi extends BaseAPI implements TikTokAppV3APIApiInterface {
    /**
     * # [中文] ### 用途: - 根据视频ID来增加作品的播放数 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - invite_code: 邀请码，此接口需要邀请码才能使用。 ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - invite_code: Invite code, this interface requires an invite code to use. ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type = 0 item_id = \"7419966340443819295\" cookie = None
     * @summary 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
     * @param {number} awemeType 作品类型/Video type
     * @param {string} itemId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public addVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet(awemeType: number, itemId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).addVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet(awemeType, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据视频ID来增加作品的播放数 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - invite_code: 邀请码，此接口需要邀请码才能使用。 ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - invite_code: Invite code, this interface requires an invite code to use. ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type = 0 item_id = \"7419966340443819295\" cookie = None
     * @summary 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
     * @param {number} awemeType 作品类型/Video type
     * @param {string} itemId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public addVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet_1(awemeType: number, itemId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).addVideoPlayCountApiV1TiktokAppV3AddVideoPlayCountGet_1(awemeType, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 检测直播间是否在线 - 直播间的Room ID可以通过直播间链接从`/api/v1/tiktok/web/get_live_room_id`接口获取 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online - The Room ID of the live room can be obtained from the `/api/v1/tiktok/web/get_live_room_id` interface through the live room link ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"
     * @summary 检测直播间是否在线/Check if live room is online
     * @param {string} roomId 直播间id/Live room id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet(roomId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 检测直播间是否在线 - 直播间的Room ID可以通过直播间链接从`/api/v1/tiktok/web/get_live_room_id`接口获取 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online - The Room ID of the live room can be obtained from the `/api/v1/tiktok/web/get_live_room_id` interface through the live room link ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"
     * @summary 检测直播间是否在线/Check if live room is online
     * @param {string} roomId 直播间id/Live room id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_2(roomId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).checkLiveRoomOnlineApiV1TiktokAppV3CheckLiveRoomOnlineGet_2(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 加密/解密 TikTok APP 登录请求体，用于登录接口的请求体加密和解密。 ### 参数: - username: 用户名，可以是密文或明文。 - password: 密码，可以是密文或明文。 - mode: 模式     - `encrypt`: 加密     - `decrypt`: 解密 ### 返回: - 加密/解密后的请求体  # [English] ### Purpose: - Encrypt/decrypt the TikTok APP login request body, used for encrypting and decrypting the request body of the login interface. ### Parameters: - username: Username, can be ciphertext or plaintext. - password: Password, can be ciphertext or plaintext. - mode: Mode     - `encrypt`: Encrypt     - `decrypt`: Decrypt ### Return: - Encrypted/decrypted request body  # [示例/Example] ```json {     \"username\": \"example_username\",     \"password\": \"example_password\",     \"mode\": \"encrypt\" } ```
     * @summary 加密或解密 TikTok APP 登录请求体/Encrypt or Decrypt TikTok APP login request body
     * @param {TikTokAppLoginEncryptDecryptRequest} [tikTokAppLoginEncryptDecryptRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public encryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost(tikTokAppLoginEncryptDecryptRequest?: TikTokAppLoginEncryptDecryptRequest, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).encryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost(tikTokAppLoginEncryptDecryptRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 加密/解密 TikTok APP 登录请求体，用于登录接口的请求体加密和解密。 ### 参数: - username: 用户名，可以是密文或明文。 - password: 密码，可以是密文或明文。 - mode: 模式     - `encrypt`: 加密     - `decrypt`: 解密 ### 返回: - 加密/解密后的请求体  # [English] ### Purpose: - Encrypt/decrypt the TikTok APP login request body, used for encrypting and decrypting the request body of the login interface. ### Parameters: - username: Username, can be ciphertext or plaintext. - password: Password, can be ciphertext or plaintext. - mode: Mode     - `encrypt`: Encrypt     - `decrypt`: Decrypt ### Return: - Encrypted/decrypted request body  # [示例/Example] ```json {     \"username\": \"example_username\",     \"password\": \"example_password\",     \"mode\": \"encrypt\" } ```
     * @summary 加密或解密 TikTok APP 登录请求体/Encrypt or Decrypt TikTok APP login request body
     * @param {TikTokAppLoginEncryptDecryptRequest} [tikTokAppLoginEncryptDecryptRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public encryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost_3(tikTokAppLoginEncryptDecryptRequest?: TikTokAppLoginEncryptDecryptRequest, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).encryptDecryptLoginRequestApiV1TiktokAppV3EncryptDecryptLoginRequestPost_3(tikTokAppLoginEncryptDecryptRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取内容翻译数据 ### 参数: - trg_lang: 目标语言     - zh-Hans: 简体中文     - zh-Hant: 繁体中文     - en: 英语     - ja: 日语     - ko: 韩语     - fr: 法语     - de: 德语     - ru: 俄语     - es: 西班牙语     - pt: 葡萄牙语     - vi: 越南语     - th: 泰语     - id: 印尼语     - ar: 阿拉伯语     - it: 意大利语     - tr: 土耳其语     - he: 希伯来语     - pl: 波兰语     - nl: 荷兰语     - sv: 瑞典语     - da: 丹麦语     - fi: 芬兰语     - no: 挪威语     - cs: 捷克语     - hu: 匈牙利语 - src_content: 源内容，也就是需要翻译的内容，长度不超过5000个字符，如果超过5000个字符，只会翻译前5000个字符。 ### 返回: - 内容翻译数据  # [English] ### Purpose: - Get content translation data ### Parameters: - trg_lang: Target language     - zh-Hans: Simplified Chinese     - zh-Hant: Traditional Chinese     - en: English     - ja: Japanese     - ko: Korean     - fr: French     - de: German     - ru: Russian     - es: Spanish     - pt: Portuguese     - vi: Vietnamese     - th: Thai     - id: Indonesian     - ar: Arabic     - it: Italian     - tr: Turkish     - he: Hebrew     - pl: Polish     - nl: Dutch     - sv: Swedish     - da: Danish     - fi: Finnish     - no: Norwegian     - cs: Czech     - hu: Hungarian - src_content: Source content, that is, the content that needs to be translated, the length does not exceed 5000 characters, if it exceeds 5000 characters, only the first 5000 characters will be translated. ### Return: - Content translation data  # [示例/Example] trg_lang = \"zh-Hans\" src_content = \"Hello, welcome to TikHub!\"
     * @summary 获取内容翻译数据/Get content translation data
     * @param {TikTokAppV3ContentTranslate} [tikTokAppV3ContentTranslate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost(tikTokAppV3ContentTranslate?: TikTokAppV3ContentTranslate, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost(tikTokAppV3ContentTranslate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取内容翻译数据 ### 参数: - trg_lang: 目标语言     - zh-Hans: 简体中文     - zh-Hant: 繁体中文     - en: 英语     - ja: 日语     - ko: 韩语     - fr: 法语     - de: 德语     - ru: 俄语     - es: 西班牙语     - pt: 葡萄牙语     - vi: 越南语     - th: 泰语     - id: 印尼语     - ar: 阿拉伯语     - it: 意大利语     - tr: 土耳其语     - he: 希伯来语     - pl: 波兰语     - nl: 荷兰语     - sv: 瑞典语     - da: 丹麦语     - fi: 芬兰语     - no: 挪威语     - cs: 捷克语     - hu: 匈牙利语 - src_content: 源内容，也就是需要翻译的内容，长度不超过5000个字符，如果超过5000个字符，只会翻译前5000个字符。 ### 返回: - 内容翻译数据  # [English] ### Purpose: - Get content translation data ### Parameters: - trg_lang: Target language     - zh-Hans: Simplified Chinese     - zh-Hant: Traditional Chinese     - en: English     - ja: Japanese     - ko: Korean     - fr: French     - de: German     - ru: Russian     - es: Spanish     - pt: Portuguese     - vi: Vietnamese     - th: Thai     - id: Indonesian     - ar: Arabic     - it: Italian     - tr: Turkish     - he: Hebrew     - pl: Polish     - nl: Dutch     - sv: Swedish     - da: Danish     - fi: Finnish     - no: Norwegian     - cs: Czech     - hu: Hungarian - src_content: Source content, that is, the content that needs to be translated, the length does not exceed 5000 characters, if it exceeds 5000 characters, only the first 5000 characters will be translated. ### Return: - Content translation data  # [示例/Example] trg_lang = \"zh-Hans\" src_content = \"Hello, welcome to TikHub!\"
     * @summary 获取内容翻译数据/Get content translation data
     * @param {TikTokAppV3ContentTranslate} [tikTokAppV3ContentTranslate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_4(tikTokAppV3ContentTranslate?: TikTokAppV3ContentTranslate, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchContentTranslateApiV1TiktokAppV3FetchContentTranslatePost_4(tikTokAppV3ContentTranslate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取创作者信息，包括创作者的基本信息、粉丝数、橱窗商品数量等信息。 ### 参数: - creator_uid: 创作者uid ### 返回: - 创作者信息  # [English] ### Purpose: - Get creator information, including the creator\'s basic information, number of fans, number of storefront products, etc. ### Parameters: - creator_uid: Creator uid ### Return: - Creator information  # [示例/Example] creator_uid = \"6555451606845243393\"
     * @summary 获取创作者信息/Get creator information
     * @param {string} creatorUid 创作者uid/Creator uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet(creatorUid: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet(creatorUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取创作者信息，包括创作者的基本信息、粉丝数、橱窗商品数量等信息。 ### 参数: - creator_uid: 创作者uid ### 返回: - 创作者信息  # [English] ### Purpose: - Get creator information, including the creator\'s basic information, number of fans, number of storefront products, etc. ### Parameters: - creator_uid: Creator uid ### Return: - Creator information  # [示例/Example] creator_uid = \"6555451606845243393\"
     * @summary 获取创作者信息/Get creator information
     * @param {string} creatorUid 创作者uid/Creator uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet_5(creatorUid: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchCreatorInfoApiV1TiktokAppV3FetchCreatorInfoGet_5(creatorUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取创作者橱窗商品列表 ### 参数: - kol_id: 创作者的sec_user_id - count: 数量 - next_scroll_param: 翻页参数，第一页为空字符串，后续请求使用上一次请求返回的next_scroll_param值。 ### 返回: - 创作者橱窗商品列表  # [English] ### Purpose: - Get creator showcase product list ### Parameters: - kol_id: Creator\'s sec_user_id - count: Number - next_scroll_param: Page parameter, empty string for the first page, use the next_scroll_param value returned by the last request for subsequent requests. ### Return: - Creator showcase product list  # [示例/Example] kol_id = \"MS4wLjABAAAARujvKaVWqgbVCwuxQghA99TUa5I-4g6jVzMXZd9FJIXSdJwJM47vm4-2T1K3gsux\" count = 20 next_scroll_param = \"\"
     * @summary 获取创作者橱窗商品列表/Get creator showcase product list
     * @param {string} kolId 创作者的sec_user_id/Creator\&#39;s sec_user_id
     * @param {number} [count] 数量/Number
     * @param {string} [nextScrollParam] 翻页参数/Page parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet(kolId: string, count?: number, nextScrollParam?: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet(kolId, count, nextScrollParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取创作者橱窗商品列表 ### 参数: - kol_id: 创作者的sec_user_id - count: 数量 - next_scroll_param: 翻页参数，第一页为空字符串，后续请求使用上一次请求返回的next_scroll_param值。 ### 返回: - 创作者橱窗商品列表  # [English] ### Purpose: - Get creator showcase product list ### Parameters: - kol_id: Creator\'s sec_user_id - count: Number - next_scroll_param: Page parameter, empty string for the first page, use the next_scroll_param value returned by the last request for subsequent requests. ### Return: - Creator showcase product list  # [示例/Example] kol_id = \"MS4wLjABAAAARujvKaVWqgbVCwuxQghA99TUa5I-4g6jVzMXZd9FJIXSdJwJM47vm4-2T1K3gsux\" count = 20 next_scroll_param = \"\"
     * @summary 获取创作者橱窗商品列表/Get creator showcase product list
     * @param {string} kolId 创作者的sec_user_id/Creator\&#39;s sec_user_id
     * @param {number} [count] 数量/Number
     * @param {string} [nextScrollParam] 翻页参数/Page parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet_6(kolId: string, count?: number, nextScrollParam?: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchCreatorShowcaseProductListApiV1TiktokAppV3FetchCreatorShowcaseProductListGet_6(kolId, count, nextScrollParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet(keyword, offset, count, sortType, publishTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_7(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchGeneralSearchResultApiV1TiktokAppV3FetchGeneralSearchResultGet_7(keyword, offset, count, sortType, publishTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"
     * @summary 获取指定话题的详情数据/Get details of specified hashtag
     * @param {string} chId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet(chId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet(chId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"
     * @summary 获取指定话题的详情数据/Get details of specified hashtag
     * @param {string} chId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_8(chId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchHashtagDetailApiV1TiktokAppV3FetchHashtagDetailGet_8(chId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet(keyword: string, offset?: number, count?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_9(keyword: string, offset?: number, count?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchHashtagSearchResultApiV1TiktokAppV3FetchHashtagSearchResultGet_9(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10
     * @summary 获取指定话题的作品数据/Get video list of specified hashtag
     * @param {string} chId 话题id/Hashtag id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet(chId: string, cursor?: number, count?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet(chId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10
     * @summary 获取指定话题的作品数据/Get video list of specified hashtag
     * @param {string} chId 话题id/Hashtag id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_10(chId: string, cursor?: number, count?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchHashtagVideoListApiV1TiktokAppV3FetchHashtagVideoListGet_10(chId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - cookie: User\'s own cookie, optional parameter, used for personalized recommendation of interface returned data. ### Return: - Video recommend data
     * @summary 获取主页视频推荐数据/Get home feed(recommend) video data
     * @param {TikTokAppV3HomeFeed} [tikTokAppV3HomeFeed] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost(tikTokAppV3HomeFeed?: TikTokAppV3HomeFeed, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost(tikTokAppV3HomeFeed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - cookie: 用户自己的cookie，可选参数，用于接口返回数据的个性化推荐。 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - cookie: User\'s own cookie, optional parameter, used for personalized recommendation of interface returned data. ### Return: - Video recommend data
     * @summary 获取主页视频推荐数据/Get home feed(recommend) video data
     * @param {TikTokAppV3HomeFeed} [tikTokAppV3HomeFeed] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost_11(tikTokAppV3HomeFeed?: TikTokAppV3HomeFeed, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchHomeFeedApiV1TiktokAppV3FetchHomeFeedPost_11(tikTokAppV3HomeFeed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取直播每日榜单数据 ### 参数: - anchor_id: 主播id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的主播id。 - room_id: 直播间id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的id。 - rank_type: 榜单类型     - `0`: 每小时排行榜     - `1`: 每周排行榜     - `5`: 新星排行榜     - `6`: 销售排行榜     - `8`: 每日排行榜     - `10`: 游戏排行榜     - `11`: 每日游戏排行榜     - `12`: 名人堂排行榜     - `13`: 冠军赛排行榜     - `14`: 每日新秀排行榜     - `15`: 人气直播榜     - `16`: D5段位榜     - `20`: 绝地求生排行榜     - `21`: 王者荣耀排行榜     - `22`: Free Fire 排行榜     - `1001`: 联盟竞赛排行榜     - `-1`: 未知排行榜 - region_type: 地区类型，使用默认值即可，具体含义不明。 - gap_interval: 时间间隔，使用默认值代表当天，使用-1代表排名记录。 - cookie: 用户自己的cookie，可选参数，用于接口不可用时使用。 ### 返回: - 直播每日榜单数据  # [English] ### Purpose: - Get live daily rank data ### Parameters: - anchor_id: Anchor id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different anchor ids of different live rooms. - room_id: Live room id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different room ids of different live rooms. - rank_type: Rank type     - `0`: Hourly Rank     - `1`: Weekly Rank     - `5`: Rookie Star Rank     - `6`: Sale Rank     - `8`: Daily Rank     - `10`: Game Rank     - `11`: Daily Game Rank     - `12`: Hall of Fame Rank     - `13`: Champion Tournament Rank     - `14`: Daily Rookie Star Rank     - `15`: Popular Live Stream Rank     - `16`: D5 Level Rank     - `20`: PUBG Rank     - `21`: MLBB Rank     - `22`: Free Fire Rank     - `1001`: League Campaign Rank     - `-1`: Unknown Rank  - region_type: Region type, use the default value, the specific meaning is unknown. - gap_interval: Time interval, use the default value to represent the current day, use -1 to represent the ranking record. - cookie: User\'s own cookie, optional parameter, used when the interface is not available. ### Return: - Live daily rank data
     * @summary 获取直播每日榜单数据/Get live daily rank data
     * @param {string} [anchorId] 主播id/Anchor id
     * @param {string} [roomId] 直播间id/Live room id
     * @param {number} [rankType] 榜单类型/Rank type
     * @param {number} [regionType] 地区类型/Region type
     * @param {number} [gapInterval] 时间间隔/Time interval
     * @param {string} [cookie] 用户自己的cookie/User\&#39;s own cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet(anchorId?: string, roomId?: string, rankType?: number, regionType?: number, gapInterval?: number, cookie?: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet(anchorId, roomId, rankType, regionType, gapInterval, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取直播每日榜单数据 ### 参数: - anchor_id: 主播id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的主播id。 - room_id: 直播间id，可以从直播间信息接口获取，使用默认值即可，该参数会影响返回的数据，你可以尝试不同直播间的id。 - rank_type: 榜单类型     - `0`: 每小时排行榜     - `1`: 每周排行榜     - `5`: 新星排行榜     - `6`: 销售排行榜     - `8`: 每日排行榜     - `10`: 游戏排行榜     - `11`: 每日游戏排行榜     - `12`: 名人堂排行榜     - `13`: 冠军赛排行榜     - `14`: 每日新秀排行榜     - `15`: 人气直播榜     - `16`: D5段位榜     - `20`: 绝地求生排行榜     - `21`: 王者荣耀排行榜     - `22`: Free Fire 排行榜     - `1001`: 联盟竞赛排行榜     - `-1`: 未知排行榜 - region_type: 地区类型，使用默认值即可，具体含义不明。 - gap_interval: 时间间隔，使用默认值代表当天，使用-1代表排名记录。 - cookie: 用户自己的cookie，可选参数，用于接口不可用时使用。 ### 返回: - 直播每日榜单数据  # [English] ### Purpose: - Get live daily rank data ### Parameters: - anchor_id: Anchor id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different anchor ids of different live rooms. - room_id: Live room id, which can be obtained from the live room information interface, use the default value, this parameter will affect the returned data, you can try different room ids of different live rooms. - rank_type: Rank type     - `0`: Hourly Rank     - `1`: Weekly Rank     - `5`: Rookie Star Rank     - `6`: Sale Rank     - `8`: Daily Rank     - `10`: Game Rank     - `11`: Daily Game Rank     - `12`: Hall of Fame Rank     - `13`: Champion Tournament Rank     - `14`: Daily Rookie Star Rank     - `15`: Popular Live Stream Rank     - `16`: D5 Level Rank     - `20`: PUBG Rank     - `21`: MLBB Rank     - `22`: Free Fire Rank     - `1001`: League Campaign Rank     - `-1`: Unknown Rank  - region_type: Region type, use the default value, the specific meaning is unknown. - gap_interval: Time interval, use the default value to represent the current day, use -1 to represent the ranking record. - cookie: User\'s own cookie, optional parameter, used when the interface is not available. ### Return: - Live daily rank data
     * @summary 获取直播每日榜单数据/Get live daily rank data
     * @param {string} [anchorId] 主播id/Anchor id
     * @param {string} [roomId] 直播间id/Live room id
     * @param {number} [rankType] 榜单类型/Rank type
     * @param {number} [regionType] 地区类型/Region type
     * @param {number} [gapInterval] 时间间隔/Time interval
     * @param {string} [cookie] 用户自己的cookie/User\&#39;s own cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_12(anchorId?: string, roomId?: string, rankType?: number, regionType?: number, gapInterval?: number, cookie?: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchLiveDailyRankApiV1TiktokAppV3FetchLiveDailyRankGet_12(anchorId, roomId, rankType, regionType, gapInterval, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"
     * @summary 获取直播间排行榜数据/Get live room ranking list
     * @param {string} roomId 直播间id/Live room id
     * @param {string} anchorId 主播id/Anchor id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet(roomId: string, anchorId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet(roomId, anchorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"
     * @summary 获取直播间排行榜数据/Get live room ranking list
     * @param {string} roomId 直播间id/Live room id
     * @param {string} anchorId 主播id/Anchor id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_13(roomId: string, anchorId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchLiveRankingListApiV1TiktokAppV3FetchLiveRankingListGet_13(roomId, anchorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定直播间的数据 ### 参数: - room_id: 直播间id ### 返回: - 直播间数据  # [English] ### Purpose: - Get data of specified live room ### Parameters: - room_id: Live room id ### Return: - Live room data  # [示例/Example] room_id = \"7385461256746060575\"
     * @summary 获取指定直播间的数据/Get data of specified live room
     * @param {string} roomId 直播间id/Live room id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet(roomId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定直播间的数据 ### 参数: - room_id: 直播间id ### 返回: - 直播间数据  # [English] ### Purpose: - Get data of specified live room ### Parameters: - room_id: Live room id ### Return: - Live room data  # [示例/Example] room_id = \"7385461256746060575\"
     * @summary 获取指定直播间的数据/Get data of specified live room
     * @param {string} roomId 直播间id/Live room id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_14(roomId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchLiveRoomInfoApiV1TiktokAppV3FetchLiveRoomInfoGet_14(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取直播间商品列表数据 ### 参数: - room_id: 直播间id，必填参数。 - author_id: 主播id，必填参数。 - page_size: 每页数量，可选参数，默认为15。 - offset: 翻页游标，可选参数，默认为0，每次翻页增加15。 - region: 地区，可选参数，默认为`US`，如果使用其他地区，如：`VN`，请自行携带Cookie，否则无法获取数据。 - cookie: 用户自己的cookie，可选参数，用于爬取除`US`以外的地区数据。 ### 参数获取: - 第一步：使用接口`f\"{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\"`接口获取直播间id（room_id）。 - 第二步：使用接口`f\"{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\"`接口获取直播间信息。 - 第三步：使用第二步返回的JSON数据中使用JSONPATH获取`$.data.data.owner.id_str`字段的值作为主播id（author_id）。 ### 返回: - 直播间商品列表数据  # [English] ### Purpose: - Get live room product list data ### Parameters: - room_id: Live room id, required parameter. - author_id: Anchor id, required parameter. - page_size: Number per page, optional parameter, default is 15. - offset: Page turning cursor, optional parameter, default is 0, increasing by 15 each time. - region: Region, optional parameter, default is `US`, if you use other regions, such as: `VN`, please bring your own Cookie, otherwise you will not be able to get data. - cookie: User\'s own cookie, optional parameter, used to crawl data from regions other than `US`. ### Get Parameters: - Step 1: Use the interface `f\"{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\"` to get the live room id (room_id). - Step 2: Use the interface `f\"{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\"` to get the live room information. - Step 3: Use the JSONPATH in the JSON data returned in the second step to get the value of the field `$.data.data.owner.id_str` as the anchor id (author_id). ### Return: - Live room product list data  # [示例/Example] room_id = \"7420741353250507562\" author_id = \"7408859677050274859\" page_size = 15 offset = 0
     * @summary 获取直播间商品列表数据/Get live room product list data
     * @param {string} roomId 直播间id/Live room id
     * @param {string} authorId 主播id/Anchor id
     * @param {number} [pageSize] 数量/Number
     * @param {number} [offset] 数量/Number
     * @param {string} [region] 地区/Region
     * @param {string} [cookie] 用户自己的cookie/User\&#39;s own cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet(roomId: string, authorId: string, pageSize?: number, offset?: number, region?: string, cookie?: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet(roomId, authorId, pageSize, offset, region, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取直播间商品列表数据 ### 参数: - room_id: 直播间id，必填参数。 - author_id: 主播id，必填参数。 - page_size: 每页数量，可选参数，默认为15。 - offset: 翻页游标，可选参数，默认为0，每次翻页增加15。 - region: 地区，可选参数，默认为`US`，如果使用其他地区，如：`VN`，请自行携带Cookie，否则无法获取数据。 - cookie: 用户自己的cookie，可选参数，用于爬取除`US`以外的地区数据。 ### 参数获取: - 第一步：使用接口`f\"{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\"`接口获取直播间id（room_id）。 - 第二步：使用接口`f\"{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\"`接口获取直播间信息。 - 第三步：使用第二步返回的JSON数据中使用JSONPATH获取`$.data.data.owner.id_str`字段的值作为主播id（author_id）。 ### 返回: - 直播间商品列表数据  # [English] ### Purpose: - Get live room product list data ### Parameters: - room_id: Live room id, required parameter. - author_id: Anchor id, required parameter. - page_size: Number per page, optional parameter, default is 15. - offset: Page turning cursor, optional parameter, default is 0, increasing by 15 each time. - region: Region, optional parameter, default is `US`, if you use other regions, such as: `VN`, please bring your own Cookie, otherwise you will not be able to get data. - cookie: User\'s own cookie, optional parameter, used to crawl data from regions other than `US`. ### Get Parameters: - Step 1: Use the interface `f\"{TikHub_Domain}/api/v1/tiktok/web/get_live_room_id\"` to get the live room id (room_id). - Step 2: Use the interface `f\"{TikHub_Domain}/api/v1/tiktok/app/v3/fetch_live_room_info\"` to get the live room information. - Step 3: Use the JSONPATH in the JSON data returned in the second step to get the value of the field `$.data.data.owner.id_str` as the anchor id (author_id). ### Return: - Live room product list data  # [示例/Example] room_id = \"7420741353250507562\" author_id = \"7408859677050274859\" page_size = 15 offset = 0
     * @summary 获取直播间商品列表数据/Get live room product list data
     * @param {string} roomId 直播间id/Live room id
     * @param {string} authorId 主播id/Anchor id
     * @param {number} [pageSize] 数量/Number
     * @param {number} [offset] 数量/Number
     * @param {string} [region] 地区/Region
     * @param {string} [cookie] 用户自己的cookie/User\&#39;s own cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet_15(roomId: string, authorId: string, pageSize?: number, offset?: number, region?: string, cookie?: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchLiveRoomProductListApiV1TiktokAppV3FetchLiveRoomProductListGet_15(roomId, authorId, pageSize, offset, region, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的直播搜索结果/Get live search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet(keyword: string, offset?: number, count?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的直播搜索结果/Get live search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_16(keyword: string, offset?: number, count?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchLiveSearchResultApiV1TiktokAppV3FetchLiveSearchResultGet_16(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取地点搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 地点搜索结果  # [English] ### Purpose: - Get location search results ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Location search results  # [示例/Example] keyword = \"Shanghai\" offset = 0 count = 20
     * @summary 获取地点搜索结果/Get location search results
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet(keyword: string, offset?: number, count?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取地点搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 地点搜索结果  # [English] ### Purpose: - Get location search results ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Location search results  # [示例/Example] keyword = \"Shanghai\" offset = 0 count = 20
     * @summary 获取地点搜索结果/Get location search results
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_17(keyword: string, offset?: number, count?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchLocationSearchApiV1TiktokAppV3FetchLocationSearchGet_17(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",     ]
     * @summary 批量获取视频信息/Batch Get Video Information
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost(requestBody?: Array<string>, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",     ]
     * @summary 批量获取视频信息/Batch Get Video Information
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_18(requestBody?: Array<string>, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchMultiVideoApiV1TiktokAppV3FetchMultiVideoPost_18(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",     ]
     * @summary 批量获取视频信息 V2/Batch Get Video Information V2
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post(requestBody?: Array<string>, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",         \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\", \"7339393672959757570\",     ]
     * @summary 批量获取视频信息 V2/Batch Get Video Information V2
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post_19(requestBody?: Array<string>, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchMultiVideoV2ApiV1TiktokAppV3FetchMultiVideoV2Post_19(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"
     * @summary 获取指定音乐的详情数据/Get details of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet(musicId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet(musicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"
     * @summary 获取指定音乐的详情数据/Get details of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_20(musicId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchMusicDetailApiV1TiktokAppV3FetchMusicDetailGet_20(musicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet(keyword: string, offset?: number, count?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_21(keyword: string, offset?: number, count?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchMusicSearchResultApiV1TiktokAppV3FetchMusicSearchResultGet_21(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10
     * @summary 获取指定音乐的视频列表数据/Get video list of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet(musicId: string, cursor?: number, count?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet(musicId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10
     * @summary 获取指定音乐的视频列表数据/Get video list of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_22(musicId: string, cursor?: number, count?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchMusicVideoListApiV1TiktokAppV3FetchMusicVideoListGet_22(musicId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet(awemeId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_23(awemeId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchOneVideoApiV1TiktokAppV3FetchOneVideoGet_23(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet(shareUrl: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet(shareUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_24(shareUrl: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchOneVideoByShareUrlApiV1TiktokAppV3FetchOneVideoByShareUrlGet_24(shareUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据 V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7463308759842966791\"
     * @summary 获取单个作品数据 V2/Get single video data V2
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get(awemeId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据 V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7463308759842966791\"
     * @summary 获取单个作品数据 V2/Get single video data V2
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get_25(awemeId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchOneVideoV2ApiV1TiktokAppV3FetchOneVideoV2Get_25(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商品详情数据 - 即将弃用，使用 fetch_product_detail_v2 代替 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据  # [English] ### Purpose: - Get product detail data - Will be deprecated, use fetch_product_detail_v2 instead ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data  # [示例/Example] product_id = \"1729385239712731370\"
     * @summary 获取商品详情数据（即将弃用，使用 fetch_product_detail_v2 代替）/Get product detail data (will be deprecated, use fetch_product_detail_v2 instead)
     * @param {string} productId 商品id/Product id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet(productId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商品详情数据 - 即将弃用，使用 fetch_product_detail_v2 代替 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据  # [English] ### Purpose: - Get product detail data - Will be deprecated, use fetch_product_detail_v2 instead ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data  # [示例/Example] product_id = \"1729385239712731370\"
     * @summary 获取商品详情数据（即将弃用，使用 fetch_product_detail_v2 代替）/Get product detail data (will be deprecated, use fetch_product_detail_v2 instead)
     * @param {string} productId 商品id/Product id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_26(productId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchProductDetailApiV1TiktokAppV3FetchProductDetailGet_26(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商品详情数据V2 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V2  # [English] ### Purpose: - Get product detail data V2 ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V2  # [示例/Example] product_id = \"1729385239712731370\"
     * @summary 获取商品详情数据V2/Get product detail data V2
     * @param {string} productId 商品id/Product id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get(productId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商品详情数据V2 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V2  # [English] ### Purpose: - Get product detail data V2 ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V2  # [示例/Example] product_id = \"1729385239712731370\"
     * @summary 获取商品详情数据V2/Get product detail data V2
     * @param {string} productId 商品id/Product id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get_27(productId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchProductDetailV2ApiV1TiktokAppV3FetchProductDetailV2Get_27(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商品详情数据V3，如果商品详情数据V2无法获取，可以尝试使用此接口。 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V3  # [English] ### Purpose: - Get product detail data V3, if the product detail data V2 cannot be obtained, you can try using this interface. ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V3  # [示例/Example] product_id = \"1729385239712731370\"
     * @summary 获取商品详情数据V3/Get product detail data V3
     * @param {string} productId 商品id/Product id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get(productId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商品详情数据V3，如果商品详情数据V2无法获取，可以尝试使用此接口。 ### 参数: - product_id: 商品id，有时候需要从product_id_str字段中获取。 ### 返回: - 商品详情数据V3  # [English] ### Purpose: - Get product detail data V3, if the product detail data V2 cannot be obtained, you can try using this interface. ### Parameters: - product_id: Product id, sometimes need to get from the product_id_str field. ### Return: - Product detail data V3  # [示例/Example] product_id = \"1729385239712731370\"
     * @summary 获取商品详情数据V3/Get product detail data V3
     * @param {string} productId 商品id/Product id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get_28(productId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchProductDetailV3ApiV1TiktokAppV3FetchProductDetailV3Get_28(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过分享链接获取商品ID ### 参数: - share_link: 分享链接 ### 返回: - 商品ID  # [English] ### Purpose: - Get Product ID by Share Link ### Parameters: - share_link: Share link ### Return: - Product ID  # [示例/Example] share_link = \"https://www.tiktok.com/t/ZT2A9N1kw/\"
     * @summary 通过分享链接获取商品ID/Get Product ID by Share Link
     * @param {string} shareLink 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet(shareLink: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet(shareLink, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过分享链接获取商品ID ### 参数: - share_link: 分享链接 ### 返回: - 商品ID  # [English] ### Purpose: - Get Product ID by Share Link ### Parameters: - share_link: Share link ### Return: - Product ID  # [示例/Example] share_link = \"https://www.tiktok.com/t/ZT2A9N1kw/\"
     * @summary 通过分享链接获取商品ID/Get Product ID by Share Link
     * @param {string} shareLink 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet_29(shareLink: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchProductIdByShareLinkApiV1TiktokAppV3FetchProductIdByShareLinkGet_29(shareLink, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商品评价数据 ### 参数: - product_id: 商品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - size: 数量 - filter_id: 筛选条件     - 0: 全部评价     - 1: 1星评价     - 2: 2星评价     - 3: 3星评价     - 4: 4星评价     - 5: 5星评价     - 102: 有图评价     - 104: 已购买的评价 - sort_type: 排序条件     - 1: 相关度     - 2: 从新到旧 ### 返回: - 商品评价数据  # [English] ### Purpose: - Get product review data ### Parameters: - product_id: Product id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - size: Count number - filter_id: Filter condition     - 0: All reviews     - 1: 1-star review     - 2: 2-star review     - 3: 3-star review     - 4: 4-star review     - 5: 5-star review     - 102: Reviews with pictures     - 104: Reviews of purchased products - sort_type: Sorting conditions     - 1: Relevance     - 2: New to old ### Return: - Product review data  # [示例/Example] product_id = \"1729448812983194615\" cursor = 0 size = 10 filter_id = 0 sort_type = 0
     * @summary 获取商品评价数据/Get product review data
     * @param {string} productId 商品id/Product id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [size] 数量/Number
     * @param {number} [filterId] 筛选条件/Filter condition
     * @param {number} [sortType] 排序条件/Sorting conditions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet(productId: string, cursor?: number, size?: number, filterId?: number, sortType?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet(productId, cursor, size, filterId, sortType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商品评价数据 ### 参数: - product_id: 商品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - size: 数量 - filter_id: 筛选条件     - 0: 全部评价     - 1: 1星评价     - 2: 2星评价     - 3: 3星评价     - 4: 4星评价     - 5: 5星评价     - 102: 有图评价     - 104: 已购买的评价 - sort_type: 排序条件     - 1: 相关度     - 2: 从新到旧 ### 返回: - 商品评价数据  # [English] ### Purpose: - Get product review data ### Parameters: - product_id: Product id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - size: Count number - filter_id: Filter condition     - 0: All reviews     - 1: 1-star review     - 2: 2-star review     - 3: 3-star review     - 4: 4-star review     - 5: 5-star review     - 102: Reviews with pictures     - 104: Reviews of purchased products - sort_type: Sorting conditions     - 1: Relevance     - 2: New to old ### Return: - Product review data  # [示例/Example] product_id = \"1729448812983194615\" cursor = 0 size = 10 filter_id = 0 sort_type = 0
     * @summary 获取商品评价数据/Get product review data
     * @param {string} productId 商品id/Product id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [size] 数量/Number
     * @param {number} [filterId] 筛选条件/Filter condition
     * @param {number} [sortType] 排序条件/Sorting conditions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_30(productId: string, cursor?: number, size?: number, filterId?: number, sortType?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchProductReviewApiV1TiktokAppV3FetchProductReviewGet_30(productId, cursor, size, filterId, sortType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商品搜索结果 ### 参数: - keyword: 关键词 - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 - sort_type: 商品排序条件     - 1: 综合排序     - 2: 销量排序     - 3: 价格从高到低     - 4: 价格从低到高     - 5: 最新发布 - customer_review_four_star: 四星以上评价 - have_discount: 有优惠 - min_price: 最低价格 - max_price: 最高价格 ### 返回: - 商品搜索结果  # [English] ### Purpose: - Get product search results ### Parameters: - keyword: Keyword - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number - sort_type: Product sorting conditions     - 1: Comprehensive sorting     - 2: Sales volume sorting     - 3: Price high to low     - 4: Price low to high     - 5: Latest release - customer_review_four_star: Four-star or more reviews - have_discount: Having discount - min_price: Minimum price - max_price: Maximum price ### Return: - Product search results  # [示例/Example] keyword = \"Cat Toy\" cursor = 0 count = 12 sort_type = 1 customer_review_four_star = False have_discount = False min_price = \"10\" max_price = \"25\"
     * @summary 获取商品搜索结果/Get product search results
     * @param {string} keyword 关键词/Keyword
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 商品排序条件/Product sorting conditions
     * @param {boolean} [customerReviewFourStar] 四星以上评价/Four-star or more reviews
     * @param {boolean} [haveDiscount] 有优惠/Having discount
     * @param {string} [minPrice] 最低价格/Minimum price
     * @param {string} [maxPrice] 最高价格/Maximum price
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet(keyword: string, cursor?: number, count?: number, sortType?: number, customerReviewFourStar?: boolean, haveDiscount?: boolean, minPrice?: string, maxPrice?: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet(keyword, cursor, count, sortType, customerReviewFourStar, haveDiscount, minPrice, maxPrice, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商品搜索结果 ### 参数: - keyword: 关键词 - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 - sort_type: 商品排序条件     - 1: 综合排序     - 2: 销量排序     - 3: 价格从高到低     - 4: 价格从低到高     - 5: 最新发布 - customer_review_four_star: 四星以上评价 - have_discount: 有优惠 - min_price: 最低价格 - max_price: 最高价格 ### 返回: - 商品搜索结果  # [English] ### Purpose: - Get product search results ### Parameters: - keyword: Keyword - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number - sort_type: Product sorting conditions     - 1: Comprehensive sorting     - 2: Sales volume sorting     - 3: Price high to low     - 4: Price low to high     - 5: Latest release - customer_review_four_star: Four-star or more reviews - have_discount: Having discount - min_price: Minimum price - max_price: Maximum price ### Return: - Product search results  # [示例/Example] keyword = \"Cat Toy\" cursor = 0 count = 12 sort_type = 1 customer_review_four_star = False have_discount = False min_price = \"10\" max_price = \"25\"
     * @summary 获取商品搜索结果/Get product search results
     * @param {string} keyword 关键词/Keyword
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 商品排序条件/Product sorting conditions
     * @param {boolean} [customerReviewFourStar] 四星以上评价/Four-star or more reviews
     * @param {boolean} [haveDiscount] 有优惠/Having discount
     * @param {string} [minPrice] 最低价格/Minimum price
     * @param {string} [maxPrice] 最高价格/Maximum price
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_31(keyword: string, cursor?: number, count?: number, sortType?: number, customerReviewFourStar?: boolean, haveDiscount?: boolean, minPrice?: string, maxPrice?: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchProductSearchApiV1TiktokAppV3FetchProductSearchGet_31(keyword, cursor, count, sortType, customerReviewFourStar, haveDiscount, minPrice, maxPrice, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取分享二维码 ### 参数: - object_id: 对象id，当前支持个人主页接口响应中的uid作为参数。 ### 返回: - 二维码图片  # [English] ### Purpose: - Get share QR code ### Parameters: - object_id: Object id, currently supports the uid in the response of the personal homepage interface as a parameter. ### Return: - QR code image  # [示例/Example] url = \"6762244951259661318\"
     * @summary 获取分享二维码/Get share QR code
     * @param {string} objectId 对象id/Object id
     * @param {number} [schemaType] 模式类型/Schema type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet(objectId: string, schemaType?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet(objectId, schemaType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取分享二维码 ### 参数: - object_id: 对象id，当前支持个人主页接口响应中的uid作为参数。 ### 返回: - 二维码图片  # [English] ### Purpose: - Get share QR code ### Parameters: - object_id: Object id, currently supports the uid in the response of the personal homepage interface as a parameter. ### Return: - QR code image  # [示例/Example] url = \"6762244951259661318\"
     * @summary 获取分享二维码/Get share QR code
     * @param {string} objectId 对象id/Object id
     * @param {number} [schemaType] 模式类型/Schema type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_32(objectId: string, schemaType?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchShareQrCodeApiV1TiktokAppV3FetchShareQrCodeGet_32(objectId, schemaType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取分享短链接 ### 参数: - url: 长链接或想要转换的链接 ### 返回: - 短链接  # [English] ### Purpose: - Get share short link ### Parameters: - url: Long link or link to convert ### Return: - Short link  # [示例/Example] url = \"https://www.tiktok.com/passport/web/logout/\"
     * @summary 获取分享短链接/Get share short link
     * @param {string} url 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet(url: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取分享短链接 ### 参数: - url: 长链接或想要转换的链接 ### 返回: - 短链接  # [English] ### Purpose: - Get share short link ### Parameters: - url: Long link or link to convert ### Return: - Short link  # [示例/Example] url = \"https://www.tiktok.com/passport/web/logout/\"
     * @summary 获取分享短链接/Get share short link
     * @param {string} url 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_33(url: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchShareShortLinkApiV1TiktokAppV3FetchShareShortLinkGet_33(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商家主页的商品数据 ### 参数: - page_id: 爬取的商家主页Page id，可以从`fetch_shop_home_page_list`这个接口获取 - seller_id: 商家id,店铺id ### 返回: - 商家主页数据  # [English] ### Purpose: - Get product data of the shop home page ### Parameters: - page_id: Page id of the crawled shop home page, which can be obtained from the interface `fetch_shop_home_page_list` - seller_id: Seller id, shop id ### Return: - Shop home page data  # [示例/Example] page_id = \"7314705727611930410\" seller_id = \"8646929864612614278\"
     * @summary 获取商家主页数据/Get shop home page data
     * @param {string} pageId 爬取的商家主页Page id/Page id of the crawled shop home page
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet(pageId: string, sellerId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet(pageId, sellerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商家主页的商品数据 ### 参数: - page_id: 爬取的商家主页Page id，可以从`fetch_shop_home_page_list`这个接口获取 - seller_id: 商家id,店铺id ### 返回: - 商家主页数据  # [English] ### Purpose: - Get product data of the shop home page ### Parameters: - page_id: Page id of the crawled shop home page, which can be obtained from the interface `fetch_shop_home_page_list` - seller_id: Seller id, shop id ### Return: - Shop home page data  # [示例/Example] page_id = \"7314705727611930410\" seller_id = \"8646929864612614278\"
     * @summary 获取商家主页数据/Get shop home page data
     * @param {string} pageId 爬取的商家主页Page id/Page id of the crawled shop home page
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_34(pageId: string, sellerId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchShopHomeApiV1TiktokAppV3FetchShopHomeGet_34(pageId, sellerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商家主页Page列表数据, 用于商家主页展示，以及爬取商家主页的商品数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家主页Page列表数据  # [English] ### Purpose: - Get shop home page list data, used for shop home page display, and crawling shop home page product data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop home page list data  # [示例/Example] seller_id = \"8646929864612614278\"
     * @summary 获取商家主页Page列表数据/Get shop home page list data
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet(sellerId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet(sellerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商家主页Page列表数据, 用于商家主页展示，以及爬取商家主页的商品数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家主页Page列表数据  # [English] ### Purpose: - Get shop home page list data, used for shop home page display, and crawling shop home page product data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop home page list data  # [示例/Example] seller_id = \"8646929864612614278\"
     * @summary 获取商家主页Page列表数据/Get shop home page list data
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_35(sellerId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchShopHomePageListApiV1TiktokAppV3FetchShopHomePageListGet_35(sellerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过分享链接获取店铺ID ### 参数: - share_link: 分享链接 ### 返回: - 店铺ID  # [English] ### Purpose: - Get Shop ID by Share Link ### Parameters: - share_link: Share link ### Return: - Shop ID  # [示例/Example] share_link = \"https://vt.tiktok.com/ZT2AHoGsE/\"
     * @summary 通过分享链接获取店铺ID/Get Shop ID by Share Link
     * @param {string} shareLink 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet(shareLink: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet(shareLink, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过分享链接获取店铺ID ### 参数: - share_link: 分享链接 ### 返回: - 店铺ID  # [English] ### Purpose: - Get Shop ID by Share Link ### Parameters: - share_link: Share link ### Return: - Shop ID  # [示例/Example] share_link = \"https://vt.tiktok.com/ZT2AHoGsE/\"
     * @summary 通过分享链接获取店铺ID/Get Shop ID by Share Link
     * @param {string} shareLink 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet_36(shareLink: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchShopIdByShareLinkApiV1TiktokAppV3FetchShopIdByShareLinkGet_36(shareLink, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商家信息数据 ### 参数: - shop_id: 商家id,店铺id ### 返回: - 商家信息数据  # [English] ### Purpose: - Get shop information data ### Parameters: - shop_id: Seller id, shop id ### Return: - Shop information data  # [示例/Example] shop_id = \"8646942781241463007\"
     * @summary 获取商家信息数据/Get shop information data
     * @param {string} shopId 商家id,店铺id/Seller id, shop id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet(shopId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet(shopId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商家信息数据 ### 参数: - shop_id: 商家id,店铺id ### 返回: - 商家信息数据  # [English] ### Purpose: - Get shop information data ### Parameters: - shop_id: Seller id, shop id ### Return: - Shop information data  # [示例/Example] shop_id = \"8646942781241463007\"
     * @summary 获取商家信息数据/Get shop information data
     * @param {string} shopId 商家id,店铺id/Seller id, shop id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_37(shopId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchShopInfoApiV1TiktokAppV3FetchShopInfoGet_37(shopId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商家产品分类数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家产品分类数据  # [English] ### Purpose: - Get shop product category data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop product category data  # [示例/Example] seller_id = \"7495294980909468039\"
     * @summary 获取商家产品分类数据/Get shop product category data
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet(sellerId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet(sellerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商家产品分类数据 ### 参数: - seller_id: 商家id,店铺id ### 返回: - 商家产品分类数据  # [English] ### Purpose: - Get shop product category data ### Parameters: - seller_id: Seller id, shop id ### Return: - Shop product category data  # [示例/Example] seller_id = \"7495294980909468039\"
     * @summary 获取商家产品分类数据/Get shop product category data
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_38(sellerId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchShopProductCategoryApiV1TiktokAppV3FetchShopProductCategoryGet_38(sellerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_params = \"\" page_size = 10 sort_field = 1 sort_order = 0
     * @summary 获取商家商品列表数据/Get shop product list data
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {string} [scrollParams] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
     * @param {number} [pageSize] 每页数量/Number per page
     * @param {number} [sortField] 排序字段/Sorting field
     * @param {number} [sortOrder] 排序方式/Sorting method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet(sellerId: string, scrollParams?: string, pageSize?: number, sortField?: number, sortOrder?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet(sellerId, scrollParams, pageSize, sortField, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_params = \"\" page_size = 10 sort_field = 1 sort_order = 0
     * @summary 获取商家商品列表数据/Get shop product list data
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {string} [scrollParams] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
     * @param {number} [pageSize] 每页数量/Number per page
     * @param {number} [sortField] 排序字段/Sorting field
     * @param {number} [sortOrder] 排序方式/Sorting method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_39(sellerId: string, scrollParams?: string, pageSize?: number, sortField?: number, sortOrder?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchShopProductListApiV1TiktokAppV3FetchShopProductListGet_39(sellerId, scrollParams, pageSize, sortField, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_params = \"\" page_size = 10 sort_field = 1 sort_order = 0
     * @summary 获取商家商品列表数据 V2/Get shop product list data V2
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {string} [scrollParams] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
     * @param {number} [pageSize] 每页数量/Number per page
     * @param {number} [sortField] 排序字段/Sorting field
     * @param {number} [sortOrder] 排序方式/Sorting method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get(sellerId: string, scrollParams?: string, pageSize?: number, sortField?: number, sortOrder?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get(sellerId, scrollParams, pageSize, sortField, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商家商品列表数据 ### 参数: - seller_id: 商家id,店铺id - scroll_params: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 - sort_field: 排序字段     - 1: 综合排序     - 3: 最新发布     - 4: 销量最好     - 5: 价格排序 - sort_order: 排序方式     - 0: 默认价格排序     - 1: 价格从高到低     - 2: 价格从低到高 ### 返回: - 商家商品列表数据  # [English] ### Purpose: - Get shop product list data ### Parameters: - seller_id: Seller id, shop id - scroll_params: Scroll parameter, used to load more product data - page_size: Number per page - sort_field: Sorting field     - 1: Comprehensive sorting     - 3: Latest release     - 4: Best sales     - 5: Price sorting - sort_order: Sorting method     - 0: Default price sorting     - 1: Price high to low     - 2: Price low to high ### Return: - Shop product list data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_params = \"\" page_size = 10 sort_field = 1 sort_order = 0
     * @summary 获取商家商品列表数据 V2/Get shop product list data V2
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {string} [scrollParams] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
     * @param {number} [pageSize] 每页数量/Number per page
     * @param {number} [sortField] 排序字段/Sorting field
     * @param {number} [sortOrder] 排序方式/Sorting method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get_40(sellerId: string, scrollParams?: string, pageSize?: number, sortField?: number, sortOrder?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchShopProductListV2ApiV1TiktokAppV3FetchShopProductListV2Get_40(sellerId, scrollParams, pageSize, sortField, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商家商品推荐数据 ### 参数: - seller_id: 商家id,店铺id - scroll_param: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 ### 返回: - 商家商品推荐数据  # [English] ### Purpose: - Get shop product recommend data ### Parameters: - seller_id: Seller id, shop id - scroll_param: Scroll parameter, used to load more product data - page_size: Number per page ### Return: - Shop product recommend data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_param = \"\" page_size = 10
     * @summary 获取商家商品推荐数据/Get shop product recommend data
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {string} [scrollParam] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
     * @param {number} [pageSize] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet(sellerId: string, scrollParam?: string, pageSize?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet(sellerId, scrollParam, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取商家商品推荐数据 ### 参数: - seller_id: 商家id,店铺id - scroll_param: 滚动参数，用于加载更多商品数据 - page_size: 每页数量 ### 返回: - 商家商品推荐数据  # [English] ### Purpose: - Get shop product recommend data ### Parameters: - seller_id: Seller id, shop id - scroll_param: Scroll parameter, used to load more product data - page_size: Number per page ### Return: - Shop product recommend data  # [示例/Example] seller_id = \"8646929864612614278\" scroll_param = \"\" page_size = 10
     * @summary 获取商家商品推荐数据/Get shop product recommend data
     * @param {string} sellerId 商家id,店铺id/Seller id, shop id
     * @param {string} [scrollParam] 滚动参数，用于加载更多商品数据/Scroll parameter, used to load more product data
     * @param {number} [pageSize] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_41(sellerId: string, scrollParam?: string, pageSize?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchShopProductRecommendApiV1TiktokAppV3FetchShopProductRecommendGet_41(sellerId, scrollParam, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
     * @summary 获取指定用户的粉丝列表数据/Get follower list of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [count] 数量/Number
     * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
     * @param {string} [pageToken] 翻页token/Page token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet(secUserId, count, minTime, pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
     * @summary 获取指定用户的粉丝列表数据/Get follower list of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [count] 数量/Number
     * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
     * @param {string} [pageToken] 翻页token/Page token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_42(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchUserFollowerListApiV1TiktokAppV3FetchUserFollowerListGet_42(secUserId, count, minTime, pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
     * @summary 获取指定用户的关注列表数据/Get following list of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [count] 数量/Number
     * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
     * @param {string} [pageToken] 翻页token/Page token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet(secUserId, count, minTime, pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
     * @summary 获取指定用户的关注列表数据/Get following list of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [count] 数量/Number
     * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
     * @param {string} [pageToken] 翻页token/Page token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_43(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchUserFollowingListApiV1TiktokAppV3FetchUserFollowingListGet_43(secUserId, count, minTime, pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA-RkTGCGXLuLKRM5Xcuuwm7Mclg51I2ECO1RqOA7mJHuXFz99nztdi077Z2XmYHZV\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet(secUserId, maxCursor, counts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA-RkTGCGXLuLKRM5Xcuuwm7Mclg51I2ECO1RqOA7mJHuXFz99nztdi077Z2XmYHZV\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_44(secUserId: string, maxCursor?: number, counts?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchUserLikeVideosApiV1TiktokAppV3FetchUserLikeVideosGet_44(secUserId, maxCursor, counts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户音乐列表数据 ### 参数: - sec_uid: 用户sec_uid - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 用户音乐列表数据  # [English] ### Purpose: - Get user music list data ### Parameters: - sec_uid: User sec_uid - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number  # [示例/Example] sec_uid = \"MS4wLjABAAAAqB08cUbXaDWqbD6MCga2RbGTuhfO2EsHayBYx08NDrN7IE3jQuRDNNN6YwyfH6_6\" cursor = 0 count = 10
     * @summary 获取用户音乐列表数据/Get user music list data
     * @param {string} secUid 用户sec_uid/User sec_uid
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet(secUid: string, cursor?: number, count?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet(secUid, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户音乐列表数据 ### 参数: - sec_uid: 用户sec_uid - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 用户音乐列表数据  # [English] ### Purpose: - Get user music list data ### Parameters: - sec_uid: User sec_uid - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number  # [示例/Example] sec_uid = \"MS4wLjABAAAAqB08cUbXaDWqbD6MCga2RbGTuhfO2EsHayBYx08NDrN7IE3jQuRDNNN6YwyfH6_6\" cursor = 0 count = 10
     * @summary 获取用户音乐列表数据/Get user music list data
     * @param {string} secUid 用户sec_uid/User sec_uid
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_45(secUid: string, cursor?: number, count?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchUserMusicListApiV1TiktokAppV3FetchUserMusicListGet_45(secUid, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户作品数据，如果sec_user_id为空，则使用unique_id获取用户作品数据。 - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量，建议保持默认值20。 - sort_type: 排序类型，0-最新，1-热门 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户作品数据，unique_id也是用户的用户名。 - 关于用户ID的参数，优先级为sec_user_id > unique_id，优先级越高速度越快，并且建议只使用sec_user_id获取用户数据。 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id, use sec_user_id to get user video data first, if sec_user_id is empty, use unique_id to get user video data. - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number - sort_type: Sort type, 0-Latest, 1-Hot - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user video data, unique_id is also the user\'s username. - About the parameters of user ID, the priority is sec_user_id > unique_id, the higher the priority, the faster the speed, and it is recommended to use only sec_user_id to get user data. ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20 sort_type = 0 unique_id = \"tiktok\"
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [uniqueId] 用户unique_id/User unique_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [sortType] 排序类型/Sort type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet(secUserId?: string, uniqueId?: string, maxCursor?: number, count?: number, sortType?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet(secUserId, uniqueId, maxCursor, count, sortType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户作品数据，如果sec_user_id为空，则使用unique_id获取用户作品数据。 - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量，建议保持默认值20。 - sort_type: 排序类型，0-最新，1-热门 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户作品数据，unique_id也是用户的用户名。 - 关于用户ID的参数，优先级为sec_user_id > unique_id，优先级越高速度越快，并且建议只使用sec_user_id获取用户数据。 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id, use sec_user_id to get user video data first, if sec_user_id is empty, use unique_id to get user video data. - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number - sort_type: Sort type, 0-Latest, 1-Hot - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user video data, unique_id is also the user\'s username. - About the parameters of user ID, the priority is sec_user_id > unique_id, the higher the priority, the faster the speed, and it is recommended to use only sec_user_id to get user data. ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20 sort_type = 0 unique_id = \"tiktok\"
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [uniqueId] 用户unique_id/User unique_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {number} [sortType] 排序类型/Sort type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_46(secUserId?: string, uniqueId?: string, maxCursor?: number, count?: number, sortType?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchUserPostVideosApiV1TiktokAppV3FetchUserPostVideosGet_46(secUserId, uniqueId, maxCursor, count, sortType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户转发的作品数据 ### 参数: - user_id: 用户id，可以通过 handler_user_profile 端点获取，响应中的关键字为uid。 - offset: 偏移量 - count: 数量 ### 返回: - 用户转发作品数据  # [English] ### Purpose: - Get user repost video data ### Parameters: - user_id: User id, which can be obtained through the handler_user_profile endpoint, with the keyword uid in the response. - offset: Offset - count: Number ### Return: - User repost video data  # [示例/Example] user_id = 107955 offset = 0 count = 21
     * @summary 获取用户转发的作品数据/Get user repost video data
     * @param {number} userId 用户id/User id
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet(userId: number, offset?: number, count?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet(userId, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户转发的作品数据 ### 参数: - user_id: 用户id，可以通过 handler_user_profile 端点获取，响应中的关键字为uid。 - offset: 偏移量 - count: 数量 ### 返回: - 用户转发作品数据  # [English] ### Purpose: - Get user repost video data ### Parameters: - user_id: User id, which can be obtained through the handler_user_profile endpoint, with the keyword uid in the response. - offset: Offset - count: Number ### Return: - User repost video data  # [示例/Example] user_id = 107955 offset = 0 count = 21
     * @summary 获取用户转发的作品数据/Get user repost video data
     * @param {number} userId 用户id/User id
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_47(userId: number, offset?: number, count?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchUserRepostVideosApiV1TiktokAppV3FetchUserRepostVideosGet_47(userId, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"
     * @summary 获取指定关键词的用户搜索结果/Get user search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [userSearchFollowerCount] 根据粉丝数排序/Sort by number of followers
     * @param {string} [userSearchProfileType] 根据账号类型排序/Sort by account type
     * @param {string} [userSearchOtherPref] 根据其他偏好排序/Sort by other preferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet(keyword: string, offset?: number, count?: number, userSearchFollowerCount?: string, userSearchProfileType?: string, userSearchOtherPref?: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet(keyword, offset, count, userSearchFollowerCount, userSearchProfileType, userSearchOtherPref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"
     * @summary 获取指定关键词的用户搜索结果/Get user search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [userSearchFollowerCount] 根据粉丝数排序/Sort by number of followers
     * @param {string} [userSearchProfileType] 根据账号类型排序/Sort by account type
     * @param {string} [userSearchOtherPref] 根据其他偏好排序/Sort by other preferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_48(keyword: string, offset?: number, count?: number, userSearchFollowerCount?: string, userSearchProfileType?: string, userSearchOtherPref?: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchUserSearchResultApiV1TiktokAppV3FetchUserSearchResultGet_48(keyword, offset, count, userSearchFollowerCount, userSearchProfileType, userSearchOtherPref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet(awemeId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_49(awemeId: string, cursor?: number, count?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchVideoCommentsApiV1TiktokAppV3FetchVideoCommentsGet_49(awemeId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet(itemId, commentId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_50(itemId: string, commentId: string, cursor?: number, count?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchVideoCommentsReplyApiV1TiktokAppV3FetchVideoCommentRepliesGet_50(itemId, commentId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet(keyword, offset, count, sortType, publishTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_51(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).fetchVideoSearchResultApiV1TiktokAppV3FetchVideoSearchResultGet_51(keyword, offset, count, sortType, publishTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户信息。 - user_id: 用户uid，可选参数，纯数字，如果使用请保持sec_user_id以及unique_id为空。 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户信息，unique_id也是用户的用户名，如果使用请保持sec_user_id以及user_id为空。 - 以上参数必须至少填写一个，优先级为sec_user_id > user_id > unique_id，优先级越高速度越快。 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id - user_id: User uid, optional parameter, pure number, if used, please keep sec_user_id and unique_id empty. - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user information, unique_id is also the user\'s username, if used, please keep sec_user_id and user_id empty. - At least one of the above parameters must be filled in, the priority is sec_user_id > user_id > unique_id, the higher the priority, the faster the speed. ### Return: - User information  # [示例/Example] user_id = \"107955\" sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" unique_id = \"tiktok\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} [userId] 用户uid （可选，纯数字）/User uid (optional, pure number)
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [uniqueId] 用户unique_id （用户名）/User unique_id (username)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet(userId?: string, secUserId?: string, uniqueId?: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet(userId, secUserId, uniqueId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id，优先使用sec_user_id获取用户信息。 - user_id: 用户uid，可选参数，纯数字，如果使用请保持sec_user_id以及unique_id为空。 - unique_id: 用户unique_id，可选参数，如果sec_user_id为空，则使用unique_id获取用户信息，unique_id也是用户的用户名，如果使用请保持sec_user_id以及user_id为空。 - 以上参数必须至少填写一个，优先级为sec_user_id > user_id > unique_id，优先级越高速度越快。 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id - user_id: User uid, optional parameter, pure number, if used, please keep sec_user_id and unique_id empty. - unique_id: User unique_id, optional parameter, if sec_user_id is empty, use unique_id to get user information, unique_id is also the user\'s username, if used, please keep sec_user_id and user_id empty. - At least one of the above parameters must be filled in, the priority is sec_user_id > user_id > unique_id, the higher the priority, the faster the speed. ### Return: - User information  # [示例/Example] user_id = \"107955\" sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\" unique_id = \"tiktok\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} [userId] 用户uid （可选，纯数字）/User uid (optional, pure number)
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [uniqueId] 用户unique_id （用户名）/User unique_id (username)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_52(userId?: string, secUserId?: string, uniqueId?: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).handlerUserProfileApiV1TiktokAppV3HandlerUserProfileGet_52(userId, secUserId, uniqueId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] keyword = \"Evil0ctal\"
     * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果/Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result
     * @param {string} keyword 关键词/Keyword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public openTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet(keyword: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).openTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] keyword = \"Evil0ctal\"
     * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定关键词搜索结果/Generate TikTok share link, call TikTok APP, and jump to the specified keyword search result
     * @param {string} keyword 关键词/Keyword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public openTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet_53(keyword: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).openTiktokAppToKeywordSearchApiV1TiktokAppV3OpenTiktokAppToKeywordSearchGet_53(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and send private messages to specified users  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid = \"7059867056504407087\"
     * @summary 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信/Generate TikTok share link, call TikTok APP, and send private messages to specified users
     * @param {string} uid 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public openTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet(uid: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).openTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and send private messages to specified users  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid = \"7059867056504407087\"
     * @summary 生成TikTok分享链接，唤起TikTok APP，给指定用户发送私信/Generate TikTok share link, call TikTok APP, and send private messages to specified users
     * @param {string} uid 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public openTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet_54(uid: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).openTiktokAppToSendPrivateMessageApiV1TiktokAppV3OpenTiktokAppToSendPrivateMessageGet_54(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified user profile  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid = \"7059867056504407087\"
     * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页/Generate TikTok share link, call TikTok APP, and jump to the specified user profile
     * @param {string} uid 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public openTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet(uid: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).openTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页。  ### 参数: - uid: 用户id，从用户主页接口中获取。 - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified user profile  ### Parameters: - uid: User id, obtained from the user profile interface. - Note: If you cannot jump, please make sure that the APP is running in the background.  ### Return: - Share link  # [示例/Example] uid = \"7059867056504407087\"
     * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定用户主页/Generate TikTok share link, call TikTok APP, and jump to the specified user profile
     * @param {string} uid 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public openTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet_55(uid: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).openTiktokAppToUserProfileApiV1TiktokAppV3OpenTiktokAppToUserProfileGet_55(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified video  ### Parameters: - aweme_id: Video id - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] aweme_id = \"7440436579409153311\"
     * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页/Generate TikTok share link, call TikTok APP, and jump to the specified video details page
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public openTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet(awemeId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).openTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id - 注意: 如果未能跳转，请确保APP已经在后台运行。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate TikTok share link, call TikTok APP, and jump to the specified video  ### Parameters: - aweme_id: Video id - Note: If you cannot jump, please make sure that the APP is running in the background  ### Return: - Share link  # [示例/Example] aweme_id = \"7440436579409153311\"
     * @summary 生成TikTok分享链接，唤起TikTok APP，跳转指定作品详情页/Generate TikTok share link, call TikTok APP, and jump to the specified video details page
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public openTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet_56(awemeId: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).openTiktokAppToVideoDetailApiV1TiktokAppV3OpenTiktokAppToVideoDetailGet_56(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - TikTok APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，不要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device for TikTok APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, without http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy = \"username:password@ip:port\"  # [响应/Response] ```json {    \"code\":200,    \"router\":\"/api/v1/tiktok/app/v3/register_device\",    \"params\":{       \"proxy\":\"username:password@ip:port\"    },    \"data\":{       \"cookie\":\"install_id=7417331203928426283; store-country-code=us; store-country-code-src=did; store-idc=useast5; ttreq=1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\",       \"id\":\"eyJhYyI6ICJ3aWZpIiwgImNoYW5uZWwiOiAiZ29vZ2xlcGxheSIsICJhaWQiOiAiMTIzMyIsICJhcHBfbmFtZSI6ICJtdXNpY2FsX2x5IiwgInZlcnNpb25fY29kZSI6ICIyNjA2MDIiLCAidmVyc2lvbl9uYW1lIjogIjI2LjYuMiIsICJkZXZpY2VfcGxhdGZvcm0iOiAiYW5kcm9pZCIsICJhYl92ZXJzaW9uIjogIjI2LjYuMiIsICJzc21peCI6ICJhIiwgImRldmljZV90eXBlIjogIlBPVC1MWDQ2IiwgImRldmljZV9icmFuZCI6ICJIVUFXRUkiLCAiZGV2aWNlX21vZGVsIjogIlBPVC1MWDQ2IiwgImxhbmd1YWdlIjogImVuIiwgIm9zX2FwaSI6ICIyOSIsICJvc192ZXJzaW9uIjogIjEwIiwgIm1hbmlmZXN0X3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgInJlc29sdXRpb24iOiAiMTA4MCoyMzQwIiwgImRwaSI6ICI0ODAiLCAidXBkYXRlX3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgImFwcF9za2luIjogIndoaXRlIiwgImFwcF90eXBlIjogIm5vcm1hbCIsICJyZXNpZGVuY2UiOiAiVVMiLCAic3lzX3JlZ2lvbiI6ICJVUyIsICJwYXNzLXJvdXRlIjogIjEiLCAibWNjX21uYyI6ICIzMTAyNjAiLCAicGFzcy1yZWdpb24iOiAiMSIsICJ0aW1lem9uZV9uYW1lIjogIkFtZXJpY2ElMkZOZXdfWW9yayIsICJjYXJyaWVyX3JlZ2lvbl92MiI6ICIzMTAiLCAiY3B1X3N1cHBvcnQ2NCI6ICJ0cnVlIiwgImhvc3RfYWJpIjogImFybTY0LXY4YSIsICJhcHBfbGFuZ3VhZ2UiOiAiZW4iLCAiY2Fycmllcl9yZWdpb24iOiAiVVMiLCAiYWMyIjogIndpZmkiLCAidW9vIjogIjEiLCAib3BfcmVnaW9uIjogIlVTIiwgInRpbWV6b25lX29mZnNldCI6IC0xNDQwMCwgImJ1aWxkX251bWJlciI6ICIyNi42LjIiLCAibG9jYWxlIjogImVuIiwgInJlZ2lvbiI6ICJVUyIsICJvcGVudWRpZCI6ICI0ZTM5NzdlNmJhNWNhZDc0IiwgImNkaWQiOiAiYjFkOTA2YzMtOTYxMy00MWM1LTk4ZjgtZDZhYWJjOTdiMTExIiwgImRldmljZV9pZCI6ICI3NDE3MzMwOTk5MDIzNTAyODkwIiwgImlpZCI6ICI3NDE3MzMxMjAzOTI4NDI2MjgzIiwgInVzZXJfYWdlbnQiOiAiY29tLnpoaWxpYW9hcHAubXVzaWNhbGx5LzIwMjI2MDYwMjAgKExpbnV4OyBVOyBBbmRyb2lkIDEwLjAuMDsgZW47IEhVQVdFSSBQT1QtTFg0NjsgQnVpbGQvT1BSNi4xNzA2MjMuMDE3O3R0LW9rLzMuMTIuMTMuMSkiLCAiY29va2llIjogImluc3RhbGxfaWQ9NzQxNzMzMTIwMzkyODQyNjI4Mzsgc3RvcmUtY291bnRyeS1jb2RlPXVzOyBzdG9yZS1jb3VudHJ5LWNvZGUtc3JjPWRpZDsgc3RvcmUtaWRjPXVzZWFzdDU7IHR0cmVxPTEkODViMWY1YjBiNDBhZWIwZmY3NjU5OGE2YTk0ZmNiMDcwNGIxMGQ3NCIsICJwcm94eSI6ICJodHRwOi8vMTU0LjIwMi4xMDcuMjAyOjMxMjgifQ==\",       \"tiktok_info\":{          \"cdid\":\"b1d906c3-9613-41c5-98f8-d6aabc97b111\",          \"cookie\":\"install_id=7417331203928426283; store-country-code=us; store-country-code-src=did; store-idc=useast5; ttreq=1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\",          \"device_brand\":\"HUAWEI\",          \"device_type\":\"POT-LX46\",          \"did\":\"7417330999023502890\",          \"iid\":\"7417331203928426283\",          \"mcc_mnc\":\"310260\",          \"openudid\":\"4e3977e6ba5cad74\",          \"os_api\":\"29\",          \"os_version\":\"10\",          \"user_agent\":\"okhttp/3.10.0.1\",          \"version_code\":\"260602\",          \"version_name\":\"26.6.2\"       }    } } ```
     * @summary 注册设备信息/Register device information
     * @param {string} [proxy] 代理/Proxy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public registerDeviceApiV1TiktokAppV3RegisterDeviceGet(proxy?: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).registerDeviceApiV1TiktokAppV3RegisterDeviceGet(proxy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - TikTok APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，不要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device for TikTok APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, without http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy = \"username:password@ip:port\"  # [响应/Response] ```json {    \"code\":200,    \"router\":\"/api/v1/tiktok/app/v3/register_device\",    \"params\":{       \"proxy\":\"username:password@ip:port\"    },    \"data\":{       \"cookie\":\"install_id=7417331203928426283; store-country-code=us; store-country-code-src=did; store-idc=useast5; ttreq=1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\",       \"id\":\"eyJhYyI6ICJ3aWZpIiwgImNoYW5uZWwiOiAiZ29vZ2xlcGxheSIsICJhaWQiOiAiMTIzMyIsICJhcHBfbmFtZSI6ICJtdXNpY2FsX2x5IiwgInZlcnNpb25fY29kZSI6ICIyNjA2MDIiLCAidmVyc2lvbl9uYW1lIjogIjI2LjYuMiIsICJkZXZpY2VfcGxhdGZvcm0iOiAiYW5kcm9pZCIsICJhYl92ZXJzaW9uIjogIjI2LjYuMiIsICJzc21peCI6ICJhIiwgImRldmljZV90eXBlIjogIlBPVC1MWDQ2IiwgImRldmljZV9icmFuZCI6ICJIVUFXRUkiLCAiZGV2aWNlX21vZGVsIjogIlBPVC1MWDQ2IiwgImxhbmd1YWdlIjogImVuIiwgIm9zX2FwaSI6ICIyOSIsICJvc192ZXJzaW9uIjogIjEwIiwgIm1hbmlmZXN0X3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgInJlc29sdXRpb24iOiAiMTA4MCoyMzQwIiwgImRwaSI6ICI0ODAiLCAidXBkYXRlX3ZlcnNpb25fY29kZSI6ICIyMDIyNjA2MDIwIiwgImFwcF9za2luIjogIndoaXRlIiwgImFwcF90eXBlIjogIm5vcm1hbCIsICJyZXNpZGVuY2UiOiAiVVMiLCAic3lzX3JlZ2lvbiI6ICJVUyIsICJwYXNzLXJvdXRlIjogIjEiLCAibWNjX21uYyI6ICIzMTAyNjAiLCAicGFzcy1yZWdpb24iOiAiMSIsICJ0aW1lem9uZV9uYW1lIjogIkFtZXJpY2ElMkZOZXdfWW9yayIsICJjYXJyaWVyX3JlZ2lvbl92MiI6ICIzMTAiLCAiY3B1X3N1cHBvcnQ2NCI6ICJ0cnVlIiwgImhvc3RfYWJpIjogImFybTY0LXY4YSIsICJhcHBfbGFuZ3VhZ2UiOiAiZW4iLCAiY2Fycmllcl9yZWdpb24iOiAiVVMiLCAiYWMyIjogIndpZmkiLCAidW9vIjogIjEiLCAib3BfcmVnaW9uIjogIlVTIiwgInRpbWV6b25lX29mZnNldCI6IC0xNDQwMCwgImJ1aWxkX251bWJlciI6ICIyNi42LjIiLCAibG9jYWxlIjogImVuIiwgInJlZ2lvbiI6ICJVUyIsICJvcGVudWRpZCI6ICI0ZTM5NzdlNmJhNWNhZDc0IiwgImNkaWQiOiAiYjFkOTA2YzMtOTYxMy00MWM1LTk4ZjgtZDZhYWJjOTdiMTExIiwgImRldmljZV9pZCI6ICI3NDE3MzMwOTk5MDIzNTAyODkwIiwgImlpZCI6ICI3NDE3MzMxMjAzOTI4NDI2MjgzIiwgInVzZXJfYWdlbnQiOiAiY29tLnpoaWxpYW9hcHAubXVzaWNhbGx5LzIwMjI2MDYwMjAgKExpbnV4OyBVOyBBbmRyb2lkIDEwLjAuMDsgZW47IEhVQVdFSSBQT1QtTFg0NjsgQnVpbGQvT1BSNi4xNzA2MjMuMDE3O3R0LW9rLzMuMTIuMTMuMSkiLCAiY29va2llIjogImluc3RhbGxfaWQ9NzQxNzMzMTIwMzkyODQyNjI4Mzsgc3RvcmUtY291bnRyeS1jb2RlPXVzOyBzdG9yZS1jb3VudHJ5LWNvZGUtc3JjPWRpZDsgc3RvcmUtaWRjPXVzZWFzdDU7IHR0cmVxPTEkODViMWY1YjBiNDBhZWIwZmY3NjU5OGE2YTk0ZmNiMDcwNGIxMGQ3NCIsICJwcm94eSI6ICJodHRwOi8vMTU0LjIwMi4xMDcuMjAyOjMxMjgifQ==\",       \"tiktok_info\":{          \"cdid\":\"b1d906c3-9613-41c5-98f8-d6aabc97b111\",          \"cookie\":\"install_id=7417331203928426283; store-country-code=us; store-country-code-src=did; store-idc=useast5; ttreq=1$85b1f5b0b40aeb0ff76598a6a94fcb0704b10d74\",          \"device_brand\":\"HUAWEI\",          \"device_type\":\"POT-LX46\",          \"did\":\"7417330999023502890\",          \"iid\":\"7417331203928426283\",          \"mcc_mnc\":\"310260\",          \"openudid\":\"4e3977e6ba5cad74\",          \"os_api\":\"29\",          \"os_version\":\"10\",          \"user_agent\":\"okhttp/3.10.0.1\",          \"version_code\":\"260602\",          \"version_name\":\"26.6.2\"       }    } } ```
     * @summary 注册设备信息/Register device information
     * @param {string} [proxy] 代理/Proxy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public registerDeviceApiV1TiktokAppV3RegisterDeviceGet_57(proxy?: string, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).registerDeviceApiV1TiktokAppV3RegisterDeviceGet_57(proxy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - TikTok APP加密算法，用于生成请求头中的加密参数。 - 生成的加密参数列表：     - `x-ladon`     - `x-khronos`     - `x-argus`     - `x-gorgon` （8404）  ### 参数: - url: 需要加密的完整URL - data: 如果接口是POST请求，请填写POST请求的数据参与加密计算，GET请求时传入空字符串即可。 - device_info: 设备信息，可选参数，如果不填写则使用默认设备信息，设备信息会修改传入的URL中的参数。  ### 返回: - 加密参数列表  # [English] ### Purpose: - TikTok APP encryption algorithm, used to generate encrypted parameters in the request header. - The generated encrypted parameter list:     - `x-ladon`     - `x-khronos`     - `x-argus`     - `x-gorgon` (8404)  ### Parameters: - url: Full URL to be encrypted - data: If the interface is a POST request, please fill in the data of the POST request to participate in the encryption calculation. For GET requests, pass an empty string. - device_info: Device information, optional parameter, if not filled in, the default device information will be used, and the device information will modify the parameters in the URL passed in.  ### Return: - Encrypted parameter list
     * @summary TikTok APP加密算法/TikTok APP encryption algorithm
     * @param {TikTokAppEncryptRequest} [tikTokAppEncryptRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public tTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost(tikTokAppEncryptRequest?: TikTokAppEncryptRequest, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).tTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost(tikTokAppEncryptRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - TikTok APP加密算法，用于生成请求头中的加密参数。 - 生成的加密参数列表：     - `x-ladon`     - `x-khronos`     - `x-argus`     - `x-gorgon` （8404）  ### 参数: - url: 需要加密的完整URL - data: 如果接口是POST请求，请填写POST请求的数据参与加密计算，GET请求时传入空字符串即可。 - device_info: 设备信息，可选参数，如果不填写则使用默认设备信息，设备信息会修改传入的URL中的参数。  ### 返回: - 加密参数列表  # [English] ### Purpose: - TikTok APP encryption algorithm, used to generate encrypted parameters in the request header. - The generated encrypted parameter list:     - `x-ladon`     - `x-khronos`     - `x-argus`     - `x-gorgon` (8404)  ### Parameters: - url: Full URL to be encrypted - data: If the interface is a POST request, please fill in the data of the POST request to participate in the encryption calculation. For GET requests, pass an empty string. - device_info: Device information, optional parameter, if not filled in, the default device information will be used, and the device information will modify the parameters in the URL passed in.  ### Return: - Encrypted parameter list
     * @summary TikTok APP加密算法/TikTok APP encryption algorithm
     * @param {TikTokAppEncryptRequest} [tikTokAppEncryptRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV3APIApi
     */
    public tTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost_58(tikTokAppEncryptRequest?: TikTokAppEncryptRequest, options?: any) {
        return TikTokAppV3APIApiFp(this.configuration).tTencryptAlgorithmApiV1TiktokAppV3TTencryptAlgorithmPost_58(tikTokAppEncryptRequest, options).then((request) => request(this.axios, this.basePath));
    }

}
