// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
/**
 * BilibiliWebAPIApi - axios parameter creator
 * @export
 */
export const BilibiliWebAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取所有直播分区列表 ### 参数: ### 返回: - 所有直播分区列表  # [English] ### Purpose: - Get a list of all live areas ### Parameters: ### Return: - list of all live areas  # [示例/Example]
         * @summary 获取所有直播分区列表/Get a list of all live areas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchAllLiveAreasGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/bilibili/web/fetch_all_live_areas`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取所有直播分区列表 ### 参数: ### 返回: - 所有直播分区列表  # [English] ### Purpose: - Get a list of all live areas ### Parameters: ### Return: - list of all live areas  # [示例/Example]
         * @summary 获取所有直播分区列表/Get a list of all live areas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchAllLiveAreasGet_1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/bilibili/web/fetch_all_live_areas`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - uid: 用户UID ### 返回: - 用户收藏夹信息  # [English] ### Purpose: - Get user collection folders ### Parameters: - uid: User UID ### Return: - user collection folders  # [示例/Example] uid = \"178360345\"
         * @summary 获取用户所有收藏夹信息/Get user collection folders
         * @param {string} uid 用户UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchCollectFoldersGet: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchCollectFoldersApiV1BilibiliWebFetchCollectFoldersGet.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_collect_folders`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - uid: 用户UID ### 返回: - 用户收藏夹信息  # [English] ### Purpose: - Get user collection folders ### Parameters: - uid: User UID ### Return: - user collection folders  # [示例/Example] uid = \"178360345\"
         * @summary 获取用户所有收藏夹信息/Get user collection folders
         * @param {string} uid 用户UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchCollectFoldersGet_2: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchCollectFoldersApiV1BilibiliWebFetchCollectFoldersGet_2.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_collect_folders`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取综合热门视频信息 ### 参数: - pn: 页码 ### 返回: - 综合热门视频信息  # [English] ### Purpose: - Get comprehensive popular video information ### Parameters: - pn: Page number ### Return: - comprehensive popular video information  # [示例/Example] pn = 1
         * @summary 获取综合热门视频信息/Get comprehensive popular video information
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchComPopularGet: async (pn?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/bilibili/web/fetch_com_popular`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (pn !== undefined) {
                localVarQueryParameter['pn'] = pn;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取综合热门视频信息 ### 参数: - pn: 页码 ### 返回: - 综合热门视频信息  # [English] ### Purpose: - Get comprehensive popular video information ### Parameters: - pn: Page number ### Return: - comprehensive popular video information  # [示例/Example] pn = 1
         * @summary 获取综合热门视频信息/Get comprehensive popular video information
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchComPopularGet_3: async (pn?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/bilibili/web/fetch_com_popular`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (pn !== undefined) {
                localVarQueryParameter['pn'] = pn;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取视频下指定评论的回复 ### 参数: - bv_id: 作品id - pn: 页码 - rpid: 回复id ### 返回: - 指定评论的回复数据  # [English] ### Purpose: - Get reply to the specified comment ### Parameters: - bv_id: Video id - pn: Page number - rpid: Reply id ### Return: - Reply of the specified comment  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1 rpid = \"237109455120\"
         * @summary 获取视频下指定评论的回复/Get reply to the specified comment
         * @param {string} bvId 作品id/Video id
         * @param {string} rpid 回复id/Reply id
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet: async (bvId: string, rpid: string, pn?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bvId' is not null or undefined
            if (bvId === null || bvId === undefined) {
                throw new RequiredError('bvId','Required parameter bvId was null or undefined when calling fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet.');
            }
            // verify required parameter 'rpid' is not null or undefined
            if (rpid === null || rpid === undefined) {
                throw new RequiredError('rpid','Required parameter rpid was null or undefined when calling fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_comment_reply`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (bvId !== undefined) {
                localVarQueryParameter['bv_id'] = bvId;
            }

            if (pn !== undefined) {
                localVarQueryParameter['pn'] = pn;
            }

            if (rpid !== undefined) {
                localVarQueryParameter['rpid'] = rpid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取视频下指定评论的回复 ### 参数: - bv_id: 作品id - pn: 页码 - rpid: 回复id ### 返回: - 指定评论的回复数据  # [English] ### Purpose: - Get reply to the specified comment ### Parameters: - bv_id: Video id - pn: Page number - rpid: Reply id ### Return: - Reply of the specified comment  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1 rpid = \"237109455120\"
         * @summary 获取视频下指定评论的回复/Get reply to the specified comment
         * @param {string} bvId 作品id/Video id
         * @param {string} rpid 回复id/Reply id
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet_4: async (bvId: string, rpid: string, pn?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bvId' is not null or undefined
            if (bvId === null || bvId === undefined) {
                throw new RequiredError('bvId','Required parameter bvId was null or undefined when calling fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet_4.');
            }
            // verify required parameter 'rpid' is not null or undefined
            if (rpid === null || rpid === undefined) {
                throw new RequiredError('rpid','Required parameter rpid was null or undefined when calling fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet_4.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_comment_reply`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (bvId !== undefined) {
                localVarQueryParameter['bv_id'] = bvId;
            }

            if (pn !== undefined) {
                localVarQueryParameter['pn'] = pn;
            }

            if (rpid !== undefined) {
                localVarQueryParameter['rpid'] = rpid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定直播间信息 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间信息  # [English] ### Purpose: - Get information of specified live room ### Parameters: - room_id: Live room ID ### Return: - information of specified live room  # [示例/Example] room_id = \"22816111\"
         * @summary 获取指定直播间信息/Get information of specified live room
         * @param {string} roomId 直播间ID/Live room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchLiveRoomDetailGet: async (roomId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchCollectFoldersApiV1BilibiliWebFetchLiveRoomDetailGet.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_live_room_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定直播间信息 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间信息  # [English] ### Purpose: - Get information of specified live room ### Parameters: - room_id: Live room ID ### Return: - information of specified live room  # [示例/Example] room_id = \"22816111\"
         * @summary 获取指定直播间信息/Get information of specified live room
         * @param {string} roomId 直播间ID/Live room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchLiveRoomDetailGet_5: async (roomId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchCollectFoldersApiV1BilibiliWebFetchLiveRoomDetailGet_5.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_live_room_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定分区正在直播的主播 ### 参数: - area_id: 直播分区id - pn: 页码 ### 返回: - 指定分区正在直播的主播  # [English] ### Purpose: - Get live streamers of specified live area ### Parameters: - area_id: Live area ID - pn: Page number ### Return: - live streamers of specified live area  # [示例/Example] area_id = \"9\" pn = 1
         * @summary 获取指定分区正在直播的主播/Get live streamers of specified live area
         * @param {string} areaId 直播分区id/Live area ID
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchLiveStreamersGet: async (areaId: string, pn?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'areaId' is not null or undefined
            if (areaId === null || areaId === undefined) {
                throw new RequiredError('areaId','Required parameter areaId was null or undefined when calling fetchCollectFoldersApiV1BilibiliWebFetchLiveStreamersGet.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_live_streamers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (areaId !== undefined) {
                localVarQueryParameter['area_id'] = areaId;
            }

            if (pn !== undefined) {
                localVarQueryParameter['pn'] = pn;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定分区正在直播的主播 ### 参数: - area_id: 直播分区id - pn: 页码 ### 返回: - 指定分区正在直播的主播  # [English] ### Purpose: - Get live streamers of specified live area ### Parameters: - area_id: Live area ID - pn: Page number ### Return: - live streamers of specified live area  # [示例/Example] area_id = \"9\" pn = 1
         * @summary 获取指定分区正在直播的主播/Get live streamers of specified live area
         * @param {string} areaId 直播分区id/Live area ID
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchLiveStreamersGet_6: async (areaId: string, pn?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'areaId' is not null or undefined
            if (areaId === null || areaId === undefined) {
                throw new RequiredError('areaId','Required parameter areaId was null or undefined when calling fetchCollectFoldersApiV1BilibiliWebFetchLiveStreamersGet_6.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_live_streamers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (areaId !== undefined) {
                localVarQueryParameter['area_id'] = areaId;
            }

            if (pn !== undefined) {
                localVarQueryParameter['pn'] = pn;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定直播间视频流 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间视频流  # [English] ### Purpose: - Get live video data of specified room ### Parameters: - room_id: Live room ID ### Return: - live video data of specified room  # [示例/Example] room_id = \"1815229528\"
         * @summary 获取直播间视频流/Get live video data of specified room
         * @param {string} roomId 直播间ID/Live room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchLiveVideosGet: async (roomId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchCollectFoldersApiV1BilibiliWebFetchLiveVideosGet.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_live_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定直播间视频流 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间视频流  # [English] ### Purpose: - Get live video data of specified room ### Parameters: - room_id: Live room ID ### Return: - live video data of specified room  # [示例/Example] room_id = \"1815229528\"
         * @summary 获取直播间视频流/Get live video data of specified room
         * @param {string} roomId 直播间ID/Live room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchLiveVideosGet_7: async (roomId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchCollectFoldersApiV1BilibiliWebFetchLiveVideosGet_7.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_live_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户动态 ### 参数: - uid: 用户UID - offset: 开始索引 ### 返回: - 指定用户动态数据  # [English] ### Purpose: - Get dynamic information of specified user ### Parameters: - uid: User UID - offset: offset ### Return: - dynamic information of specified user  # [示例/Example] uid = \"178360345\" offset = \"953154282154098691\"
         * @summary 获取指定用户动态/Get dynamic information of specified user
         * @param {string} uid 用户UID
         * @param {string} [offset] 开始索引/offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchUserDynamicGet: async (uid: string, offset?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchCollectFoldersApiV1BilibiliWebFetchUserDynamicGet.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_user_dynamic`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户动态 ### 参数: - uid: 用户UID - offset: 开始索引 ### 返回: - 指定用户动态数据  # [English] ### Purpose: - Get dynamic information of specified user ### Parameters: - uid: User UID - offset: offset ### Return: - dynamic information of specified user  # [示例/Example] uid = \"178360345\" offset = \"953154282154098691\"
         * @summary 获取指定用户动态/Get dynamic information of specified user
         * @param {string} uid 用户UID
         * @param {string} [offset] 开始索引/offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchUserDynamicGet_8: async (uid: string, offset?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchCollectFoldersApiV1BilibiliWebFetchUserDynamicGet_8.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_user_dynamic`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - uid: 用户UID ### 返回: - 指定用户的个人信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - uid: User UID ### Return: - information of specified user  # [示例/Example] uid = \"178360345\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} uid 用户UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchUserProfileGet: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchCollectFoldersApiV1BilibiliWebFetchUserProfileGet.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - uid: 用户UID ### 返回: - 指定用户的个人信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - uid: User UID ### Return: - information of specified user  # [示例/Example] uid = \"178360345\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} uid 用户UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchUserProfileGet_9: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchCollectFoldersApiV1BilibiliWebFetchUserProfileGet_9.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论 ### 参数: - bv_id: 作品id - pn: 页码 ### 返回: - 指定视频的评论数据  # [English] ### Purpose: - Get comments on the specified video ### Parameters: - bv_id: Video id - pn: Page number ### Return: - comments of the specified video  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1
         * @summary 获取指定视频的评论/Get comments on the specified video
         * @param {string} bvId 作品id/Video id
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchVideoCommentsGet: async (bvId: string, pn?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bvId' is not null or undefined
            if (bvId === null || bvId === undefined) {
                throw new RequiredError('bvId','Required parameter bvId was null or undefined when calling fetchCollectFoldersApiV1BilibiliWebFetchVideoCommentsGet.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_video_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (bvId !== undefined) {
                localVarQueryParameter['bv_id'] = bvId;
            }

            if (pn !== undefined) {
                localVarQueryParameter['pn'] = pn;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论 ### 参数: - bv_id: 作品id - pn: 页码 ### 返回: - 指定视频的评论数据  # [English] ### Purpose: - Get comments on the specified video ### Parameters: - bv_id: Video id - pn: Page number ### Return: - comments of the specified video  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1
         * @summary 获取指定视频的评论/Get comments on the specified video
         * @param {string} bvId 作品id/Video id
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchVideoCommentsGet_10: async (bvId: string, pn?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bvId' is not null or undefined
            if (bvId === null || bvId === undefined) {
                throw new RequiredError('bvId','Required parameter bvId was null or undefined when calling fetchCollectFoldersApiV1BilibiliWebFetchVideoCommentsGet_10.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_video_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (bvId !== undefined) {
                localVarQueryParameter['bv_id'] = bvId;
            }

            if (pn !== undefined) {
                localVarQueryParameter['pn'] = pn;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取综合搜索信息 ### 参数: - keyword: 搜索关键词 - order: 排序方式     - totalrank 综合排序     - click 最多播放     - pubdate 最新发布     - dm 最多弹幕     - stow 最多收藏 - page: 页码 - page_size: 每页数量 ### 返回: - 综合搜索信息  # [English] ### Purpose: - Get general search data ### Parameters: - keyword: Search keyword - order: Order method     - totalrank Comprehensive sorting     - click Most played     - pubdate Latest release     - dm Most barrage     - stow Most collection - page: Page number - page_size: Number per page ### Return: - General search data  # [示例/Example] keyword = \"火影忍者\" order = \"totalrank\" page = 1 page_size = 42
         * @summary 获取综合搜索信息/Get general search data
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {string} order 排序方式/Order method
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet: async (keyword: string, order: string, page: number, pageSize: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet.');
            }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order','Required parameter order was null or undefined when calling fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_general_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取综合搜索信息 ### 参数: - keyword: 搜索关键词 - order: 排序方式     - totalrank 综合排序     - click 最多播放     - pubdate 最新发布     - dm 最多弹幕     - stow 最多收藏 - page: 页码 - page_size: 每页数量 ### 返回: - 综合搜索信息  # [English] ### Purpose: - Get general search data ### Parameters: - keyword: Search keyword - order: Order method     - totalrank Comprehensive sorting     - click Most played     - pubdate Latest release     - dm Most barrage     - stow Most collection - page: Page number - page_size: Number per page ### Return: - General search data  # [示例/Example] keyword = \"火影忍者\" order = \"totalrank\" page = 1 page_size = 42
         * @summary 获取综合搜索信息/Get general search data
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {string} order 排序方式/Order method
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet_11: async (keyword: string, order: string, page: number, pageSize: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet_11.');
            }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order','Required parameter order was null or undefined when calling fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet_11.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet_11.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet_11.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_general_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取热门搜索信息 ### 参数: - limit: 返回数量 ### 返回: - 热门搜索信息 ### 说明: - limit默认为10，上限为50  # [English] ### Purpose: - Get hot search data ### Parameters: - limit: Return number ### Return: - Hot search data ### Note: - limit default is 10, maximum is 50  # [示例/Example] limit = 10
         * @summary 获取热门搜索信息/Get hot search data
         * @param {string} limit 返回数量/Return number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchApiV1BilibiliWebFetchHotSearchGet: async (limit: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling fetchHotSearchApiV1BilibiliWebFetchHotSearchGet.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_hot_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取热门搜索信息 ### 参数: - limit: 返回数量 ### 返回: - 热门搜索信息 ### 说明: - limit默认为10，上限为50  # [English] ### Purpose: - Get hot search data ### Parameters: - limit: Return number ### Return: - Hot search data ### Note: - limit default is 10, maximum is 50  # [示例/Example] limit = 10
         * @summary 获取热门搜索信息/Get hot search data
         * @param {string} limit 返回数量/Return number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchApiV1BilibiliWebFetchHotSearchGet_12: async (limit: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling fetchHotSearchApiV1BilibiliWebFetchHotSearchGet_12.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_hot_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过bv号获得视频aid号 ### 参数: - bv_id: 作品id ### 返回: - 视频aid号  # [English] ### Purpose: - Generate aid by bvid ### Parameters: - bv_id: Video id ### Return: - Video aid  # [示例/Example] bv_id = \"BV1M1421t7hT\"
         * @summary 通过bv号获得视频aid号/Generate aid by bvid
         * @param {string} bvId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1BilibiliWebBvToAidGet: async (bvId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bvId' is not null or undefined
            if (bvId === null || bvId === undefined) {
                throw new RequiredError('bvId','Required parameter bvId was null or undefined when calling fetchOneVideoApiV1BilibiliWebBvToAidGet.');
            }
            const localVarPath = `/api/v1/bilibili/web/bv_to_aid`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (bvId !== undefined) {
                localVarQueryParameter['bv_id'] = bvId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过bv号获得视频aid号 ### 参数: - bv_id: 作品id ### 返回: - 视频aid号  # [English] ### Purpose: - Generate aid by bvid ### Parameters: - bv_id: Video id ### Return: - Video aid  # [示例/Example] bv_id = \"BV1M1421t7hT\"
         * @summary 通过bv号获得视频aid号/Generate aid by bvid
         * @param {string} bvId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1BilibiliWebBvToAidGet_13: async (bvId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bvId' is not null or undefined
            if (bvId === null || bvId === undefined) {
                throw new RequiredError('bvId','Required parameter bvId was null or undefined when calling fetchOneVideoApiV1BilibiliWebBvToAidGet_13.');
            }
            const localVarPath = `/api/v1/bilibili/web/bv_to_aid`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (bvId !== undefined) {
                localVarQueryParameter['bv_id'] = bvId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频详情信息 ### 参数: - bv_id: 作品id ### 返回: - 视频详情信息  # [English] ### Purpose: - Get single video data ### Parameters: - bv_id: Video id ### Return: - Video data  # [示例/Example] bv_id = \"BV1M1421t7hT\"
         * @summary 获取单个视频详情信息/Get single video data
         * @param {string} bvId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1BilibiliWebFetchOneVideoGet: async (bvId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bvId' is not null or undefined
            if (bvId === null || bvId === undefined) {
                throw new RequiredError('bvId','Required parameter bvId was null or undefined when calling fetchOneVideoApiV1BilibiliWebFetchOneVideoGet.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_one_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (bvId !== undefined) {
                localVarQueryParameter['bv_id'] = bvId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频详情信息 ### 参数: - bv_id: 作品id ### 返回: - 视频详情信息  # [English] ### Purpose: - Get single video data ### Parameters: - bv_id: Video id ### Return: - Video data  # [示例/Example] bv_id = \"BV1M1421t7hT\"
         * @summary 获取单个视频详情信息/Get single video data
         * @param {string} bvId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1BilibiliWebFetchOneVideoGet_14: async (bvId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bvId' is not null or undefined
            if (bvId === null || bvId === undefined) {
                throw new RequiredError('bvId','Required parameter bvId was null or undefined when calling fetchOneVideoApiV1BilibiliWebFetchOneVideoGet_14.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_one_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (bvId !== undefined) {
                localVarQueryParameter['bv_id'] = bvId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取视频实时弹幕 ### 参数: - cid: 作品cid ### 返回: - 视频实时弹幕  # [English] ### Purpose: - Get Video Danmaku ### Parameters: - cid: Video cid ### Return: - Video Danmaku  # [示例/Example] cid = \"1639235405\"
         * @summary 获取视频实时弹幕/Get Video Danmaku
         * @param {string} cid 作品cid/Video cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1BilibiliWebFetchVideoDanmakuGet: async (cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling fetchOneVideoApiV1BilibiliWebFetchVideoDanmakuGet.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_video_danmaku`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取视频实时弹幕 ### 参数: - cid: 作品cid ### 返回: - 视频实时弹幕  # [English] ### Purpose: - Get Video Danmaku ### Parameters: - cid: Video cid ### Return: - Video Danmaku  # [示例/Example] cid = \"1639235405\"
         * @summary 获取视频实时弹幕/Get Video Danmaku
         * @param {string} cid 作品cid/Video cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1BilibiliWebFetchVideoDanmakuGet_15: async (cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling fetchOneVideoApiV1BilibiliWebFetchVideoDanmakuGet_15.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_video_danmaku`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过bv号获得视频分p信息 ### 参数: - bv_id: 作品id ### 返回: - 视频分p信息  # [English] ### Purpose: - Get Video Parts By bvid ### Parameters: - bv_id: Video id ### Return: - Video Parts  # [示例/Example] bv_id = \"BV1vf421i7hV\"
         * @summary 通过bv号获得视频分p信息/Get Video Parts By bvid
         * @param {string} bvId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1BilibiliWebFetchVideoPartsGet: async (bvId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bvId' is not null or undefined
            if (bvId === null || bvId === undefined) {
                throw new RequiredError('bvId','Required parameter bvId was null or undefined when calling fetchOneVideoApiV1BilibiliWebFetchVideoPartsGet.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_video_parts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (bvId !== undefined) {
                localVarQueryParameter['bv_id'] = bvId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过bv号获得视频分p信息 ### 参数: - bv_id: 作品id ### 返回: - 视频分p信息  # [English] ### Purpose: - Get Video Parts By bvid ### Parameters: - bv_id: Video id ### Return: - Video Parts  # [示例/Example] bv_id = \"BV1vf421i7hV\"
         * @summary 通过bv号获得视频分p信息/Get Video Parts By bvid
         * @param {string} bvId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1BilibiliWebFetchVideoPartsGet_16: async (bvId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bvId' is not null or undefined
            if (bvId === null || bvId === undefined) {
                throw new RequiredError('bvId','Required parameter bvId was null or undefined when calling fetchOneVideoApiV1BilibiliWebFetchVideoPartsGet_16.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_video_parts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (bvId !== undefined) {
                localVarQueryParameter['bv_id'] = bvId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取视频流地址 ### 参数: - bv_id: 作品id - cid: 作品cid ### 返回: - 视频流地址  # [English] ### Purpose: - Get video playurl ### Parameters: - bv_id: Video id - cid: Video cid ### Return: - Video playurl  # [示例/Example] bv_id = \"BV1y7411Q7Eq\" cid = \"171776208\"
         * @summary 获取视频流地址/Get video playurl
         * @param {string} bvId 作品id/Video id
         * @param {string} cid 作品cid/Video cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet: async (bvId: string, cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bvId' is not null or undefined
            if (bvId === null || bvId === undefined) {
                throw new RequiredError('bvId','Required parameter bvId was null or undefined when calling fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_video_playurl`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (bvId !== undefined) {
                localVarQueryParameter['bv_id'] = bvId;
            }

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取视频流地址 ### 参数: - bv_id: 作品id - cid: 作品cid ### 返回: - 视频流地址  # [English] ### Purpose: - Get video playurl ### Parameters: - bv_id: Video id - cid: Video cid ### Return: - Video playurl  # [示例/Example] bv_id = \"BV1y7411Q7Eq\" cid = \"171776208\"
         * @summary 获取视频流地址/Get video playurl
         * @param {string} bvId 作品id/Video id
         * @param {string} cid 作品cid/Video cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet_17: async (bvId: string, cid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bvId' is not null or undefined
            if (bvId === null || bvId === undefined) {
                throw new RequiredError('bvId','Required parameter bvId was null or undefined when calling fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet_17.');
            }
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet_17.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_video_playurl`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (bvId !== undefined) {
                localVarQueryParameter['bv_id'] = bvId;
            }

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频详情信息V2 ### 参数: - a_id: 作品id - c_id: 作品cid ### 返回: - 视频详情信息V2  # [English] ### Purpose: - Get single video data V2 ### Parameters: - a_id: Video id - c_id: Video cid ### Return: - Video data V2  # [示例/Example] a_id = \"114006081739452\" c_id = \"28400484458\"
         * @summary 获取单个视频详情信息V2/Get single video data V2
         * @param {string} aId 作品id/Video id
         * @param {string} cId 作品cid/Video cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get: async (aId: string, cId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'aId' is not null or undefined
            if (aId === null || aId === undefined) {
                throw new RequiredError('aId','Required parameter aId was null or undefined when calling fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get.');
            }
            // verify required parameter 'cId' is not null or undefined
            if (cId === null || cId === undefined) {
                throw new RequiredError('cId','Required parameter cId was null or undefined when calling fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_one_video_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (aId !== undefined) {
                localVarQueryParameter['a_id'] = aId;
            }

            if (cId !== undefined) {
                localVarQueryParameter['c_id'] = cId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频详情信息V2 ### 参数: - a_id: 作品id - c_id: 作品cid ### 返回: - 视频详情信息V2  # [English] ### Purpose: - Get single video data V2 ### Parameters: - a_id: Video id - c_id: Video cid ### Return: - Video data V2  # [示例/Example] a_id = \"114006081739452\" c_id = \"28400484458\"
         * @summary 获取单个视频详情信息V2/Get single video data V2
         * @param {string} aId 作品id/Video id
         * @param {string} cId 作品cid/Video cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get_18: async (aId: string, cId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'aId' is not null or undefined
            if (aId === null || aId === undefined) {
                throw new RequiredError('aId','Required parameter aId was null or undefined when calling fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get_18.');
            }
            // verify required parameter 'cId' is not null or undefined
            if (cId === null || cId === undefined) {
                throw new RequiredError('cId','Required parameter cId was null or undefined when calling fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get_18.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_one_video_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (aId !== undefined) {
                localVarQueryParameter['a_id'] = aId;
            }

            if (cId !== undefined) {
                localVarQueryParameter['c_id'] = cId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定收藏夹内视频数据 ### 参数: - folder_id: 用户UID - pn: 页码 ### 返回: - 指定收藏夹内视频数据  # [English] ### Purpose: - Gets video data from a collection folder ### Parameters: - folder_id: collection folder id - pn: Page number ### Return: - video data from collection folder  # [示例/Example] folder_id = \"1756059545\" pn = 1
         * @summary 获取指定收藏夹内视频数据/Gets video data from a collection folder
         * @param {string} folderId 收藏夹id/collection folder id
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserCollectionVideosApiV1BilibiliWebFetchUserCollectionVideosGet: async (folderId: string, pn?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            if (folderId === null || folderId === undefined) {
                throw new RequiredError('folderId','Required parameter folderId was null or undefined when calling fetchUserCollectionVideosApiV1BilibiliWebFetchUserCollectionVideosGet.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_user_collection_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (folderId !== undefined) {
                localVarQueryParameter['folder_id'] = folderId;
            }

            if (pn !== undefined) {
                localVarQueryParameter['pn'] = pn;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定收藏夹内视频数据 ### 参数: - folder_id: 用户UID - pn: 页码 ### 返回: - 指定收藏夹内视频数据  # [English] ### Purpose: - Gets video data from a collection folder ### Parameters: - folder_id: collection folder id - pn: Page number ### Return: - video data from collection folder  # [示例/Example] folder_id = \"1756059545\" pn = 1
         * @summary 获取指定收藏夹内视频数据/Gets video data from a collection folder
         * @param {string} folderId 收藏夹id/collection folder id
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserCollectionVideosApiV1BilibiliWebFetchUserCollectionVideosGet_19: async (folderId: string, pn?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'folderId' is not null or undefined
            if (folderId === null || folderId === undefined) {
                throw new RequiredError('folderId','Required parameter folderId was null or undefined when calling fetchUserCollectionVideosApiV1BilibiliWebFetchUserCollectionVideosGet_19.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_user_collection_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (folderId !== undefined) {
                localVarQueryParameter['folder_id'] = folderId;
            }

            if (pn !== undefined) {
                localVarQueryParameter['pn'] = pn;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户发布的视频数据 ### 参数: - uid: 用户UID - pn: 页码 ### 返回: - 用户发布的视频数据  # [English] ### Purpose: - Get user post video data ### Parameters: - uid: User UID - pn: Page number ### Return: - User posted video data  # [示例/Example] uid = \"178360345\" pn = 1
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} uid 用户UID
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1BilibiliWebFetchUserPostVideosGet: async (uid: string, pn?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserPostVideosApiV1BilibiliWebFetchUserPostVideosGet.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_user_post_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (pn !== undefined) {
                localVarQueryParameter['pn'] = pn;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户发布的视频数据 ### 参数: - uid: 用户UID - pn: 页码 ### 返回: - 用户发布的视频数据  # [English] ### Purpose: - Get user post video data ### Parameters: - uid: User UID - pn: Page number ### Return: - User posted video data  # [示例/Example] uid = \"178360345\" pn = 1
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} uid 用户UID
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1BilibiliWebFetchUserPostVideosGet_20: async (uid: string, pn?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserPostVideosApiV1BilibiliWebFetchUserPostVideosGet_20.');
            }
            const localVarPath = `/api/v1/bilibili/web/fetch_user_post_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (pn !== undefined) {
                localVarQueryParameter['pn'] = pn;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BilibiliWebAPIApi - functional programming interface
 * @export
 */
export const BilibiliWebAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取所有直播分区列表 ### 参数: ### 返回: - 所有直播分区列表  # [English] ### Purpose: - Get a list of all live areas ### Parameters: ### Return: - list of all live areas  # [示例/Example]
         * @summary 获取所有直播分区列表/Get a list of all live areas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCollectFoldersApiV1BilibiliWebFetchAllLiveAreasGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchCollectFoldersApiV1BilibiliWebFetchAllLiveAreasGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取所有直播分区列表 ### 参数: ### 返回: - 所有直播分区列表  # [English] ### Purpose: - Get a list of all live areas ### Parameters: ### Return: - list of all live areas  # [示例/Example]
         * @summary 获取所有直播分区列表/Get a list of all live areas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCollectFoldersApiV1BilibiliWebFetchAllLiveAreasGet_1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchCollectFoldersApiV1BilibiliWebFetchAllLiveAreasGet_1(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - uid: 用户UID ### 返回: - 用户收藏夹信息  # [English] ### Purpose: - Get user collection folders ### Parameters: - uid: User UID ### Return: - user collection folders  # [示例/Example] uid = \"178360345\"
         * @summary 获取用户所有收藏夹信息/Get user collection folders
         * @param {string} uid 用户UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCollectFoldersApiV1BilibiliWebFetchCollectFoldersGet(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchCollectFoldersApiV1BilibiliWebFetchCollectFoldersGet(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - uid: 用户UID ### 返回: - 用户收藏夹信息  # [English] ### Purpose: - Get user collection folders ### Parameters: - uid: User UID ### Return: - user collection folders  # [示例/Example] uid = \"178360345\"
         * @summary 获取用户所有收藏夹信息/Get user collection folders
         * @param {string} uid 用户UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCollectFoldersApiV1BilibiliWebFetchCollectFoldersGet_2(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchCollectFoldersApiV1BilibiliWebFetchCollectFoldersGet_2(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取综合热门视频信息 ### 参数: - pn: 页码 ### 返回: - 综合热门视频信息  # [English] ### Purpose: - Get comprehensive popular video information ### Parameters: - pn: Page number ### Return: - comprehensive popular video information  # [示例/Example] pn = 1
         * @summary 获取综合热门视频信息/Get comprehensive popular video information
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCollectFoldersApiV1BilibiliWebFetchComPopularGet(pn?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchCollectFoldersApiV1BilibiliWebFetchComPopularGet(pn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取综合热门视频信息 ### 参数: - pn: 页码 ### 返回: - 综合热门视频信息  # [English] ### Purpose: - Get comprehensive popular video information ### Parameters: - pn: Page number ### Return: - comprehensive popular video information  # [示例/Example] pn = 1
         * @summary 获取综合热门视频信息/Get comprehensive popular video information
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCollectFoldersApiV1BilibiliWebFetchComPopularGet_3(pn?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchCollectFoldersApiV1BilibiliWebFetchComPopularGet_3(pn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取视频下指定评论的回复 ### 参数: - bv_id: 作品id - pn: 页码 - rpid: 回复id ### 返回: - 指定评论的回复数据  # [English] ### Purpose: - Get reply to the specified comment ### Parameters: - bv_id: Video id - pn: Page number - rpid: Reply id ### Return: - Reply of the specified comment  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1 rpid = \"237109455120\"
         * @summary 获取视频下指定评论的回复/Get reply to the specified comment
         * @param {string} bvId 作品id/Video id
         * @param {string} rpid 回复id/Reply id
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet(bvId: string, rpid: string, pn?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet(bvId, rpid, pn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取视频下指定评论的回复 ### 参数: - bv_id: 作品id - pn: 页码 - rpid: 回复id ### 返回: - 指定评论的回复数据  # [English] ### Purpose: - Get reply to the specified comment ### Parameters: - bv_id: Video id - pn: Page number - rpid: Reply id ### Return: - Reply of the specified comment  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1 rpid = \"237109455120\"
         * @summary 获取视频下指定评论的回复/Get reply to the specified comment
         * @param {string} bvId 作品id/Video id
         * @param {string} rpid 回复id/Reply id
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet_4(bvId: string, rpid: string, pn?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet_4(bvId, rpid, pn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定直播间信息 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间信息  # [English] ### Purpose: - Get information of specified live room ### Parameters: - room_id: Live room ID ### Return: - information of specified live room  # [示例/Example] room_id = \"22816111\"
         * @summary 获取指定直播间信息/Get information of specified live room
         * @param {string} roomId 直播间ID/Live room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCollectFoldersApiV1BilibiliWebFetchLiveRoomDetailGet(roomId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchCollectFoldersApiV1BilibiliWebFetchLiveRoomDetailGet(roomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定直播间信息 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间信息  # [English] ### Purpose: - Get information of specified live room ### Parameters: - room_id: Live room ID ### Return: - information of specified live room  # [示例/Example] room_id = \"22816111\"
         * @summary 获取指定直播间信息/Get information of specified live room
         * @param {string} roomId 直播间ID/Live room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCollectFoldersApiV1BilibiliWebFetchLiveRoomDetailGet_5(roomId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchCollectFoldersApiV1BilibiliWebFetchLiveRoomDetailGet_5(roomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定分区正在直播的主播 ### 参数: - area_id: 直播分区id - pn: 页码 ### 返回: - 指定分区正在直播的主播  # [English] ### Purpose: - Get live streamers of specified live area ### Parameters: - area_id: Live area ID - pn: Page number ### Return: - live streamers of specified live area  # [示例/Example] area_id = \"9\" pn = 1
         * @summary 获取指定分区正在直播的主播/Get live streamers of specified live area
         * @param {string} areaId 直播分区id/Live area ID
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCollectFoldersApiV1BilibiliWebFetchLiveStreamersGet(areaId: string, pn?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchCollectFoldersApiV1BilibiliWebFetchLiveStreamersGet(areaId, pn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定分区正在直播的主播 ### 参数: - area_id: 直播分区id - pn: 页码 ### 返回: - 指定分区正在直播的主播  # [English] ### Purpose: - Get live streamers of specified live area ### Parameters: - area_id: Live area ID - pn: Page number ### Return: - live streamers of specified live area  # [示例/Example] area_id = \"9\" pn = 1
         * @summary 获取指定分区正在直播的主播/Get live streamers of specified live area
         * @param {string} areaId 直播分区id/Live area ID
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCollectFoldersApiV1BilibiliWebFetchLiveStreamersGet_6(areaId: string, pn?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchCollectFoldersApiV1BilibiliWebFetchLiveStreamersGet_6(areaId, pn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定直播间视频流 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间视频流  # [English] ### Purpose: - Get live video data of specified room ### Parameters: - room_id: Live room ID ### Return: - live video data of specified room  # [示例/Example] room_id = \"1815229528\"
         * @summary 获取直播间视频流/Get live video data of specified room
         * @param {string} roomId 直播间ID/Live room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCollectFoldersApiV1BilibiliWebFetchLiveVideosGet(roomId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchCollectFoldersApiV1BilibiliWebFetchLiveVideosGet(roomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定直播间视频流 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间视频流  # [English] ### Purpose: - Get live video data of specified room ### Parameters: - room_id: Live room ID ### Return: - live video data of specified room  # [示例/Example] room_id = \"1815229528\"
         * @summary 获取直播间视频流/Get live video data of specified room
         * @param {string} roomId 直播间ID/Live room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCollectFoldersApiV1BilibiliWebFetchLiveVideosGet_7(roomId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchCollectFoldersApiV1BilibiliWebFetchLiveVideosGet_7(roomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户动态 ### 参数: - uid: 用户UID - offset: 开始索引 ### 返回: - 指定用户动态数据  # [English] ### Purpose: - Get dynamic information of specified user ### Parameters: - uid: User UID - offset: offset ### Return: - dynamic information of specified user  # [示例/Example] uid = \"178360345\" offset = \"953154282154098691\"
         * @summary 获取指定用户动态/Get dynamic information of specified user
         * @param {string} uid 用户UID
         * @param {string} [offset] 开始索引/offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCollectFoldersApiV1BilibiliWebFetchUserDynamicGet(uid: string, offset?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchCollectFoldersApiV1BilibiliWebFetchUserDynamicGet(uid, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户动态 ### 参数: - uid: 用户UID - offset: 开始索引 ### 返回: - 指定用户动态数据  # [English] ### Purpose: - Get dynamic information of specified user ### Parameters: - uid: User UID - offset: offset ### Return: - dynamic information of specified user  # [示例/Example] uid = \"178360345\" offset = \"953154282154098691\"
         * @summary 获取指定用户动态/Get dynamic information of specified user
         * @param {string} uid 用户UID
         * @param {string} [offset] 开始索引/offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCollectFoldersApiV1BilibiliWebFetchUserDynamicGet_8(uid: string, offset?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchCollectFoldersApiV1BilibiliWebFetchUserDynamicGet_8(uid, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - uid: 用户UID ### 返回: - 指定用户的个人信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - uid: User UID ### Return: - information of specified user  # [示例/Example] uid = \"178360345\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} uid 用户UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCollectFoldersApiV1BilibiliWebFetchUserProfileGet(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchCollectFoldersApiV1BilibiliWebFetchUserProfileGet(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - uid: 用户UID ### 返回: - 指定用户的个人信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - uid: User UID ### Return: - information of specified user  # [示例/Example] uid = \"178360345\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} uid 用户UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCollectFoldersApiV1BilibiliWebFetchUserProfileGet_9(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchCollectFoldersApiV1BilibiliWebFetchUserProfileGet_9(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论 ### 参数: - bv_id: 作品id - pn: 页码 ### 返回: - 指定视频的评论数据  # [English] ### Purpose: - Get comments on the specified video ### Parameters: - bv_id: Video id - pn: Page number ### Return: - comments of the specified video  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1
         * @summary 获取指定视频的评论/Get comments on the specified video
         * @param {string} bvId 作品id/Video id
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCollectFoldersApiV1BilibiliWebFetchVideoCommentsGet(bvId: string, pn?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchCollectFoldersApiV1BilibiliWebFetchVideoCommentsGet(bvId, pn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论 ### 参数: - bv_id: 作品id - pn: 页码 ### 返回: - 指定视频的评论数据  # [English] ### Purpose: - Get comments on the specified video ### Parameters: - bv_id: Video id - pn: Page number ### Return: - comments of the specified video  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1
         * @summary 获取指定视频的评论/Get comments on the specified video
         * @param {string} bvId 作品id/Video id
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCollectFoldersApiV1BilibiliWebFetchVideoCommentsGet_10(bvId: string, pn?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchCollectFoldersApiV1BilibiliWebFetchVideoCommentsGet_10(bvId, pn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取综合搜索信息 ### 参数: - keyword: 搜索关键词 - order: 排序方式     - totalrank 综合排序     - click 最多播放     - pubdate 最新发布     - dm 最多弹幕     - stow 最多收藏 - page: 页码 - page_size: 每页数量 ### 返回: - 综合搜索信息  # [English] ### Purpose: - Get general search data ### Parameters: - keyword: Search keyword - order: Order method     - totalrank Comprehensive sorting     - click Most played     - pubdate Latest release     - dm Most barrage     - stow Most collection - page: Page number - page_size: Number per page ### Return: - General search data  # [示例/Example] keyword = \"火影忍者\" order = \"totalrank\" page = 1 page_size = 42
         * @summary 获取综合搜索信息/Get general search data
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {string} order 排序方式/Order method
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet(keyword: string, order: string, page: number, pageSize: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet(keyword, order, page, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取综合搜索信息 ### 参数: - keyword: 搜索关键词 - order: 排序方式     - totalrank 综合排序     - click 最多播放     - pubdate 最新发布     - dm 最多弹幕     - stow 最多收藏 - page: 页码 - page_size: 每页数量 ### 返回: - 综合搜索信息  # [English] ### Purpose: - Get general search data ### Parameters: - keyword: Search keyword - order: Order method     - totalrank Comprehensive sorting     - click Most played     - pubdate Latest release     - dm Most barrage     - stow Most collection - page: Page number - page_size: Number per page ### Return: - General search data  # [示例/Example] keyword = \"火影忍者\" order = \"totalrank\" page = 1 page_size = 42
         * @summary 获取综合搜索信息/Get general search data
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {string} order 排序方式/Order method
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet_11(keyword: string, order: string, page: number, pageSize: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet_11(keyword, order, page, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取热门搜索信息 ### 参数: - limit: 返回数量 ### 返回: - 热门搜索信息 ### 说明: - limit默认为10，上限为50  # [English] ### Purpose: - Get hot search data ### Parameters: - limit: Return number ### Return: - Hot search data ### Note: - limit default is 10, maximum is 50  # [示例/Example] limit = 10
         * @summary 获取热门搜索信息/Get hot search data
         * @param {string} limit 返回数量/Return number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotSearchApiV1BilibiliWebFetchHotSearchGet(limit: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchHotSearchApiV1BilibiliWebFetchHotSearchGet(limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取热门搜索信息 ### 参数: - limit: 返回数量 ### 返回: - 热门搜索信息 ### 说明: - limit默认为10，上限为50  # [English] ### Purpose: - Get hot search data ### Parameters: - limit: Return number ### Return: - Hot search data ### Note: - limit default is 10, maximum is 50  # [示例/Example] limit = 10
         * @summary 获取热门搜索信息/Get hot search data
         * @param {string} limit 返回数量/Return number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotSearchApiV1BilibiliWebFetchHotSearchGet_12(limit: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchHotSearchApiV1BilibiliWebFetchHotSearchGet_12(limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过bv号获得视频aid号 ### 参数: - bv_id: 作品id ### 返回: - 视频aid号  # [English] ### Purpose: - Generate aid by bvid ### Parameters: - bv_id: Video id ### Return: - Video aid  # [示例/Example] bv_id = \"BV1M1421t7hT\"
         * @summary 通过bv号获得视频aid号/Generate aid by bvid
         * @param {string} bvId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1BilibiliWebBvToAidGet(bvId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchOneVideoApiV1BilibiliWebBvToAidGet(bvId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过bv号获得视频aid号 ### 参数: - bv_id: 作品id ### 返回: - 视频aid号  # [English] ### Purpose: - Generate aid by bvid ### Parameters: - bv_id: Video id ### Return: - Video aid  # [示例/Example] bv_id = \"BV1M1421t7hT\"
         * @summary 通过bv号获得视频aid号/Generate aid by bvid
         * @param {string} bvId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1BilibiliWebBvToAidGet_13(bvId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchOneVideoApiV1BilibiliWebBvToAidGet_13(bvId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频详情信息 ### 参数: - bv_id: 作品id ### 返回: - 视频详情信息  # [English] ### Purpose: - Get single video data ### Parameters: - bv_id: Video id ### Return: - Video data  # [示例/Example] bv_id = \"BV1M1421t7hT\"
         * @summary 获取单个视频详情信息/Get single video data
         * @param {string} bvId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1BilibiliWebFetchOneVideoGet(bvId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchOneVideoApiV1BilibiliWebFetchOneVideoGet(bvId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频详情信息 ### 参数: - bv_id: 作品id ### 返回: - 视频详情信息  # [English] ### Purpose: - Get single video data ### Parameters: - bv_id: Video id ### Return: - Video data  # [示例/Example] bv_id = \"BV1M1421t7hT\"
         * @summary 获取单个视频详情信息/Get single video data
         * @param {string} bvId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1BilibiliWebFetchOneVideoGet_14(bvId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchOneVideoApiV1BilibiliWebFetchOneVideoGet_14(bvId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取视频实时弹幕 ### 参数: - cid: 作品cid ### 返回: - 视频实时弹幕  # [English] ### Purpose: - Get Video Danmaku ### Parameters: - cid: Video cid ### Return: - Video Danmaku  # [示例/Example] cid = \"1639235405\"
         * @summary 获取视频实时弹幕/Get Video Danmaku
         * @param {string} cid 作品cid/Video cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1BilibiliWebFetchVideoDanmakuGet(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchOneVideoApiV1BilibiliWebFetchVideoDanmakuGet(cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取视频实时弹幕 ### 参数: - cid: 作品cid ### 返回: - 视频实时弹幕  # [English] ### Purpose: - Get Video Danmaku ### Parameters: - cid: Video cid ### Return: - Video Danmaku  # [示例/Example] cid = \"1639235405\"
         * @summary 获取视频实时弹幕/Get Video Danmaku
         * @param {string} cid 作品cid/Video cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1BilibiliWebFetchVideoDanmakuGet_15(cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchOneVideoApiV1BilibiliWebFetchVideoDanmakuGet_15(cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过bv号获得视频分p信息 ### 参数: - bv_id: 作品id ### 返回: - 视频分p信息  # [English] ### Purpose: - Get Video Parts By bvid ### Parameters: - bv_id: Video id ### Return: - Video Parts  # [示例/Example] bv_id = \"BV1vf421i7hV\"
         * @summary 通过bv号获得视频分p信息/Get Video Parts By bvid
         * @param {string} bvId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1BilibiliWebFetchVideoPartsGet(bvId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchOneVideoApiV1BilibiliWebFetchVideoPartsGet(bvId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过bv号获得视频分p信息 ### 参数: - bv_id: 作品id ### 返回: - 视频分p信息  # [English] ### Purpose: - Get Video Parts By bvid ### Parameters: - bv_id: Video id ### Return: - Video Parts  # [示例/Example] bv_id = \"BV1vf421i7hV\"
         * @summary 通过bv号获得视频分p信息/Get Video Parts By bvid
         * @param {string} bvId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1BilibiliWebFetchVideoPartsGet_16(bvId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchOneVideoApiV1BilibiliWebFetchVideoPartsGet_16(bvId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取视频流地址 ### 参数: - bv_id: 作品id - cid: 作品cid ### 返回: - 视频流地址  # [English] ### Purpose: - Get video playurl ### Parameters: - bv_id: Video id - cid: Video cid ### Return: - Video playurl  # [示例/Example] bv_id = \"BV1y7411Q7Eq\" cid = \"171776208\"
         * @summary 获取视频流地址/Get video playurl
         * @param {string} bvId 作品id/Video id
         * @param {string} cid 作品cid/Video cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet(bvId: string, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet(bvId, cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取视频流地址 ### 参数: - bv_id: 作品id - cid: 作品cid ### 返回: - 视频流地址  # [English] ### Purpose: - Get video playurl ### Parameters: - bv_id: Video id - cid: Video cid ### Return: - Video playurl  # [示例/Example] bv_id = \"BV1y7411Q7Eq\" cid = \"171776208\"
         * @summary 获取视频流地址/Get video playurl
         * @param {string} bvId 作品id/Video id
         * @param {string} cid 作品cid/Video cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet_17(bvId: string, cid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet_17(bvId, cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频详情信息V2 ### 参数: - a_id: 作品id - c_id: 作品cid ### 返回: - 视频详情信息V2  # [English] ### Purpose: - Get single video data V2 ### Parameters: - a_id: Video id - c_id: Video cid ### Return: - Video data V2  # [示例/Example] a_id = \"114006081739452\" c_id = \"28400484458\"
         * @summary 获取单个视频详情信息V2/Get single video data V2
         * @param {string} aId 作品id/Video id
         * @param {string} cId 作品cid/Video cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get(aId: string, cId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get(aId, cId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频详情信息V2 ### 参数: - a_id: 作品id - c_id: 作品cid ### 返回: - 视频详情信息V2  # [English] ### Purpose: - Get single video data V2 ### Parameters: - a_id: Video id - c_id: Video cid ### Return: - Video data V2  # [示例/Example] a_id = \"114006081739452\" c_id = \"28400484458\"
         * @summary 获取单个视频详情信息V2/Get single video data V2
         * @param {string} aId 作品id/Video id
         * @param {string} cId 作品cid/Video cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get_18(aId: string, cId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get_18(aId, cId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定收藏夹内视频数据 ### 参数: - folder_id: 用户UID - pn: 页码 ### 返回: - 指定收藏夹内视频数据  # [English] ### Purpose: - Gets video data from a collection folder ### Parameters: - folder_id: collection folder id - pn: Page number ### Return: - video data from collection folder  # [示例/Example] folder_id = \"1756059545\" pn = 1
         * @summary 获取指定收藏夹内视频数据/Gets video data from a collection folder
         * @param {string} folderId 收藏夹id/collection folder id
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserCollectionVideosApiV1BilibiliWebFetchUserCollectionVideosGet(folderId: string, pn?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchUserCollectionVideosApiV1BilibiliWebFetchUserCollectionVideosGet(folderId, pn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定收藏夹内视频数据 ### 参数: - folder_id: 用户UID - pn: 页码 ### 返回: - 指定收藏夹内视频数据  # [English] ### Purpose: - Gets video data from a collection folder ### Parameters: - folder_id: collection folder id - pn: Page number ### Return: - video data from collection folder  # [示例/Example] folder_id = \"1756059545\" pn = 1
         * @summary 获取指定收藏夹内视频数据/Gets video data from a collection folder
         * @param {string} folderId 收藏夹id/collection folder id
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserCollectionVideosApiV1BilibiliWebFetchUserCollectionVideosGet_19(folderId: string, pn?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchUserCollectionVideosApiV1BilibiliWebFetchUserCollectionVideosGet_19(folderId, pn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户发布的视频数据 ### 参数: - uid: 用户UID - pn: 页码 ### 返回: - 用户发布的视频数据  # [English] ### Purpose: - Get user post video data ### Parameters: - uid: User UID - pn: Page number ### Return: - User posted video data  # [示例/Example] uid = \"178360345\" pn = 1
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} uid 用户UID
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostVideosApiV1BilibiliWebFetchUserPostVideosGet(uid: string, pn?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchUserPostVideosApiV1BilibiliWebFetchUserPostVideosGet(uid, pn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户发布的视频数据 ### 参数: - uid: 用户UID - pn: 页码 ### 返回: - 用户发布的视频数据  # [English] ### Purpose: - Get user post video data ### Parameters: - uid: User UID - pn: Page number ### Return: - User posted video data  # [示例/Example] uid = \"178360345\" pn = 1
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} uid 用户UID
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostVideosApiV1BilibiliWebFetchUserPostVideosGet_20(uid: string, pn?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await BilibiliWebAPIApiAxiosParamCreator(configuration).fetchUserPostVideosApiV1BilibiliWebFetchUserPostVideosGet_20(uid, pn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BilibiliWebAPIApi - factory interface
 * @export
 */
export const BilibiliWebAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 获取所有直播分区列表 ### 参数: ### 返回: - 所有直播分区列表  # [English] ### Purpose: - Get a list of all live areas ### Parameters: ### Return: - list of all live areas  # [示例/Example]
         * @summary 获取所有直播分区列表/Get a list of all live areas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchAllLiveAreasGet(options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchCollectFoldersApiV1BilibiliWebFetchAllLiveAreasGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取所有直播分区列表 ### 参数: ### 返回: - 所有直播分区列表  # [English] ### Purpose: - Get a list of all live areas ### Parameters: ### Return: - list of all live areas  # [示例/Example]
         * @summary 获取所有直播分区列表/Get a list of all live areas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchAllLiveAreasGet_1(options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchCollectFoldersApiV1BilibiliWebFetchAllLiveAreasGet_1(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - uid: 用户UID ### 返回: - 用户收藏夹信息  # [English] ### Purpose: - Get user collection folders ### Parameters: - uid: User UID ### Return: - user collection folders  # [示例/Example] uid = \"178360345\"
         * @summary 获取用户所有收藏夹信息/Get user collection folders
         * @param {string} uid 用户UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchCollectFoldersGet(uid: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchCollectFoldersApiV1BilibiliWebFetchCollectFoldersGet(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - uid: 用户UID ### 返回: - 用户收藏夹信息  # [English] ### Purpose: - Get user collection folders ### Parameters: - uid: User UID ### Return: - user collection folders  # [示例/Example] uid = \"178360345\"
         * @summary 获取用户所有收藏夹信息/Get user collection folders
         * @param {string} uid 用户UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchCollectFoldersGet_2(uid: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchCollectFoldersApiV1BilibiliWebFetchCollectFoldersGet_2(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取综合热门视频信息 ### 参数: - pn: 页码 ### 返回: - 综合热门视频信息  # [English] ### Purpose: - Get comprehensive popular video information ### Parameters: - pn: Page number ### Return: - comprehensive popular video information  # [示例/Example] pn = 1
         * @summary 获取综合热门视频信息/Get comprehensive popular video information
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchComPopularGet(pn?: number, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchCollectFoldersApiV1BilibiliWebFetchComPopularGet(pn, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取综合热门视频信息 ### 参数: - pn: 页码 ### 返回: - 综合热门视频信息  # [English] ### Purpose: - Get comprehensive popular video information ### Parameters: - pn: Page number ### Return: - comprehensive popular video information  # [示例/Example] pn = 1
         * @summary 获取综合热门视频信息/Get comprehensive popular video information
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchComPopularGet_3(pn?: number, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchCollectFoldersApiV1BilibiliWebFetchComPopularGet_3(pn, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取视频下指定评论的回复 ### 参数: - bv_id: 作品id - pn: 页码 - rpid: 回复id ### 返回: - 指定评论的回复数据  # [English] ### Purpose: - Get reply to the specified comment ### Parameters: - bv_id: Video id - pn: Page number - rpid: Reply id ### Return: - Reply of the specified comment  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1 rpid = \"237109455120\"
         * @summary 获取视频下指定评论的回复/Get reply to the specified comment
         * @param {string} bvId 作品id/Video id
         * @param {string} rpid 回复id/Reply id
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet(bvId: string, rpid: string, pn?: number, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet(bvId, rpid, pn, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取视频下指定评论的回复 ### 参数: - bv_id: 作品id - pn: 页码 - rpid: 回复id ### 返回: - 指定评论的回复数据  # [English] ### Purpose: - Get reply to the specified comment ### Parameters: - bv_id: Video id - pn: Page number - rpid: Reply id ### Return: - Reply of the specified comment  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1 rpid = \"237109455120\"
         * @summary 获取视频下指定评论的回复/Get reply to the specified comment
         * @param {string} bvId 作品id/Video id
         * @param {string} rpid 回复id/Reply id
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet_4(bvId: string, rpid: string, pn?: number, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet_4(bvId, rpid, pn, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定直播间信息 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间信息  # [English] ### Purpose: - Get information of specified live room ### Parameters: - room_id: Live room ID ### Return: - information of specified live room  # [示例/Example] room_id = \"22816111\"
         * @summary 获取指定直播间信息/Get information of specified live room
         * @param {string} roomId 直播间ID/Live room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchLiveRoomDetailGet(roomId: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchCollectFoldersApiV1BilibiliWebFetchLiveRoomDetailGet(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定直播间信息 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间信息  # [English] ### Purpose: - Get information of specified live room ### Parameters: - room_id: Live room ID ### Return: - information of specified live room  # [示例/Example] room_id = \"22816111\"
         * @summary 获取指定直播间信息/Get information of specified live room
         * @param {string} roomId 直播间ID/Live room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchLiveRoomDetailGet_5(roomId: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchCollectFoldersApiV1BilibiliWebFetchLiveRoomDetailGet_5(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定分区正在直播的主播 ### 参数: - area_id: 直播分区id - pn: 页码 ### 返回: - 指定分区正在直播的主播  # [English] ### Purpose: - Get live streamers of specified live area ### Parameters: - area_id: Live area ID - pn: Page number ### Return: - live streamers of specified live area  # [示例/Example] area_id = \"9\" pn = 1
         * @summary 获取指定分区正在直播的主播/Get live streamers of specified live area
         * @param {string} areaId 直播分区id/Live area ID
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchLiveStreamersGet(areaId: string, pn?: number, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchCollectFoldersApiV1BilibiliWebFetchLiveStreamersGet(areaId, pn, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定分区正在直播的主播 ### 参数: - area_id: 直播分区id - pn: 页码 ### 返回: - 指定分区正在直播的主播  # [English] ### Purpose: - Get live streamers of specified live area ### Parameters: - area_id: Live area ID - pn: Page number ### Return: - live streamers of specified live area  # [示例/Example] area_id = \"9\" pn = 1
         * @summary 获取指定分区正在直播的主播/Get live streamers of specified live area
         * @param {string} areaId 直播分区id/Live area ID
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchLiveStreamersGet_6(areaId: string, pn?: number, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchCollectFoldersApiV1BilibiliWebFetchLiveStreamersGet_6(areaId, pn, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定直播间视频流 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间视频流  # [English] ### Purpose: - Get live video data of specified room ### Parameters: - room_id: Live room ID ### Return: - live video data of specified room  # [示例/Example] room_id = \"1815229528\"
         * @summary 获取直播间视频流/Get live video data of specified room
         * @param {string} roomId 直播间ID/Live room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchLiveVideosGet(roomId: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchCollectFoldersApiV1BilibiliWebFetchLiveVideosGet(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定直播间视频流 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间视频流  # [English] ### Purpose: - Get live video data of specified room ### Parameters: - room_id: Live room ID ### Return: - live video data of specified room  # [示例/Example] room_id = \"1815229528\"
         * @summary 获取直播间视频流/Get live video data of specified room
         * @param {string} roomId 直播间ID/Live room ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchLiveVideosGet_7(roomId: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchCollectFoldersApiV1BilibiliWebFetchLiveVideosGet_7(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户动态 ### 参数: - uid: 用户UID - offset: 开始索引 ### 返回: - 指定用户动态数据  # [English] ### Purpose: - Get dynamic information of specified user ### Parameters: - uid: User UID - offset: offset ### Return: - dynamic information of specified user  # [示例/Example] uid = \"178360345\" offset = \"953154282154098691\"
         * @summary 获取指定用户动态/Get dynamic information of specified user
         * @param {string} uid 用户UID
         * @param {string} [offset] 开始索引/offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchUserDynamicGet(uid: string, offset?: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchCollectFoldersApiV1BilibiliWebFetchUserDynamicGet(uid, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户动态 ### 参数: - uid: 用户UID - offset: 开始索引 ### 返回: - 指定用户动态数据  # [English] ### Purpose: - Get dynamic information of specified user ### Parameters: - uid: User UID - offset: offset ### Return: - dynamic information of specified user  # [示例/Example] uid = \"178360345\" offset = \"953154282154098691\"
         * @summary 获取指定用户动态/Get dynamic information of specified user
         * @param {string} uid 用户UID
         * @param {string} [offset] 开始索引/offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchUserDynamicGet_8(uid: string, offset?: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchCollectFoldersApiV1BilibiliWebFetchUserDynamicGet_8(uid, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - uid: 用户UID ### 返回: - 指定用户的个人信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - uid: User UID ### Return: - information of specified user  # [示例/Example] uid = \"178360345\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} uid 用户UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchUserProfileGet(uid: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchCollectFoldersApiV1BilibiliWebFetchUserProfileGet(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - uid: 用户UID ### 返回: - 指定用户的个人信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - uid: User UID ### Return: - information of specified user  # [示例/Example] uid = \"178360345\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} uid 用户UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchUserProfileGet_9(uid: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchCollectFoldersApiV1BilibiliWebFetchUserProfileGet_9(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论 ### 参数: - bv_id: 作品id - pn: 页码 ### 返回: - 指定视频的评论数据  # [English] ### Purpose: - Get comments on the specified video ### Parameters: - bv_id: Video id - pn: Page number ### Return: - comments of the specified video  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1
         * @summary 获取指定视频的评论/Get comments on the specified video
         * @param {string} bvId 作品id/Video id
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchVideoCommentsGet(bvId: string, pn?: number, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchCollectFoldersApiV1BilibiliWebFetchVideoCommentsGet(bvId, pn, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论 ### 参数: - bv_id: 作品id - pn: 页码 ### 返回: - 指定视频的评论数据  # [English] ### Purpose: - Get comments on the specified video ### Parameters: - bv_id: Video id - pn: Page number ### Return: - comments of the specified video  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1
         * @summary 获取指定视频的评论/Get comments on the specified video
         * @param {string} bvId 作品id/Video id
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCollectFoldersApiV1BilibiliWebFetchVideoCommentsGet_10(bvId: string, pn?: number, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchCollectFoldersApiV1BilibiliWebFetchVideoCommentsGet_10(bvId, pn, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取综合搜索信息 ### 参数: - keyword: 搜索关键词 - order: 排序方式     - totalrank 综合排序     - click 最多播放     - pubdate 最新发布     - dm 最多弹幕     - stow 最多收藏 - page: 页码 - page_size: 每页数量 ### 返回: - 综合搜索信息  # [English] ### Purpose: - Get general search data ### Parameters: - keyword: Search keyword - order: Order method     - totalrank Comprehensive sorting     - click Most played     - pubdate Latest release     - dm Most barrage     - stow Most collection - page: Page number - page_size: Number per page ### Return: - General search data  # [示例/Example] keyword = \"火影忍者\" order = \"totalrank\" page = 1 page_size = 42
         * @summary 获取综合搜索信息/Get general search data
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {string} order 排序方式/Order method
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet(keyword: string, order: string, page: number, pageSize: number, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet(keyword, order, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取综合搜索信息 ### 参数: - keyword: 搜索关键词 - order: 排序方式     - totalrank 综合排序     - click 最多播放     - pubdate 最新发布     - dm 最多弹幕     - stow 最多收藏 - page: 页码 - page_size: 每页数量 ### 返回: - 综合搜索信息  # [English] ### Purpose: - Get general search data ### Parameters: - keyword: Search keyword - order: Order method     - totalrank Comprehensive sorting     - click Most played     - pubdate Latest release     - dm Most barrage     - stow Most collection - page: Page number - page_size: Number per page ### Return: - General search data  # [示例/Example] keyword = \"火影忍者\" order = \"totalrank\" page = 1 page_size = 42
         * @summary 获取综合搜索信息/Get general search data
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {string} order 排序方式/Order method
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet_11(keyword: string, order: string, page: number, pageSize: number, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet_11(keyword, order, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取热门搜索信息 ### 参数: - limit: 返回数量 ### 返回: - 热门搜索信息 ### 说明: - limit默认为10，上限为50  # [English] ### Purpose: - Get hot search data ### Parameters: - limit: Return number ### Return: - Hot search data ### Note: - limit default is 10, maximum is 50  # [示例/Example] limit = 10
         * @summary 获取热门搜索信息/Get hot search data
         * @param {string} limit 返回数量/Return number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchApiV1BilibiliWebFetchHotSearchGet(limit: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchHotSearchApiV1BilibiliWebFetchHotSearchGet(limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取热门搜索信息 ### 参数: - limit: 返回数量 ### 返回: - 热门搜索信息 ### 说明: - limit默认为10，上限为50  # [English] ### Purpose: - Get hot search data ### Parameters: - limit: Return number ### Return: - Hot search data ### Note: - limit default is 10, maximum is 50  # [示例/Example] limit = 10
         * @summary 获取热门搜索信息/Get hot search data
         * @param {string} limit 返回数量/Return number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchApiV1BilibiliWebFetchHotSearchGet_12(limit: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchHotSearchApiV1BilibiliWebFetchHotSearchGet_12(limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过bv号获得视频aid号 ### 参数: - bv_id: 作品id ### 返回: - 视频aid号  # [English] ### Purpose: - Generate aid by bvid ### Parameters: - bv_id: Video id ### Return: - Video aid  # [示例/Example] bv_id = \"BV1M1421t7hT\"
         * @summary 通过bv号获得视频aid号/Generate aid by bvid
         * @param {string} bvId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1BilibiliWebBvToAidGet(bvId: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchOneVideoApiV1BilibiliWebBvToAidGet(bvId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过bv号获得视频aid号 ### 参数: - bv_id: 作品id ### 返回: - 视频aid号  # [English] ### Purpose: - Generate aid by bvid ### Parameters: - bv_id: Video id ### Return: - Video aid  # [示例/Example] bv_id = \"BV1M1421t7hT\"
         * @summary 通过bv号获得视频aid号/Generate aid by bvid
         * @param {string} bvId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1BilibiliWebBvToAidGet_13(bvId: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchOneVideoApiV1BilibiliWebBvToAidGet_13(bvId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频详情信息 ### 参数: - bv_id: 作品id ### 返回: - 视频详情信息  # [English] ### Purpose: - Get single video data ### Parameters: - bv_id: Video id ### Return: - Video data  # [示例/Example] bv_id = \"BV1M1421t7hT\"
         * @summary 获取单个视频详情信息/Get single video data
         * @param {string} bvId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1BilibiliWebFetchOneVideoGet(bvId: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchOneVideoApiV1BilibiliWebFetchOneVideoGet(bvId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频详情信息 ### 参数: - bv_id: 作品id ### 返回: - 视频详情信息  # [English] ### Purpose: - Get single video data ### Parameters: - bv_id: Video id ### Return: - Video data  # [示例/Example] bv_id = \"BV1M1421t7hT\"
         * @summary 获取单个视频详情信息/Get single video data
         * @param {string} bvId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1BilibiliWebFetchOneVideoGet_14(bvId: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchOneVideoApiV1BilibiliWebFetchOneVideoGet_14(bvId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取视频实时弹幕 ### 参数: - cid: 作品cid ### 返回: - 视频实时弹幕  # [English] ### Purpose: - Get Video Danmaku ### Parameters: - cid: Video cid ### Return: - Video Danmaku  # [示例/Example] cid = \"1639235405\"
         * @summary 获取视频实时弹幕/Get Video Danmaku
         * @param {string} cid 作品cid/Video cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1BilibiliWebFetchVideoDanmakuGet(cid: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchOneVideoApiV1BilibiliWebFetchVideoDanmakuGet(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取视频实时弹幕 ### 参数: - cid: 作品cid ### 返回: - 视频实时弹幕  # [English] ### Purpose: - Get Video Danmaku ### Parameters: - cid: Video cid ### Return: - Video Danmaku  # [示例/Example] cid = \"1639235405\"
         * @summary 获取视频实时弹幕/Get Video Danmaku
         * @param {string} cid 作品cid/Video cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1BilibiliWebFetchVideoDanmakuGet_15(cid: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchOneVideoApiV1BilibiliWebFetchVideoDanmakuGet_15(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过bv号获得视频分p信息 ### 参数: - bv_id: 作品id ### 返回: - 视频分p信息  # [English] ### Purpose: - Get Video Parts By bvid ### Parameters: - bv_id: Video id ### Return: - Video Parts  # [示例/Example] bv_id = \"BV1vf421i7hV\"
         * @summary 通过bv号获得视频分p信息/Get Video Parts By bvid
         * @param {string} bvId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1BilibiliWebFetchVideoPartsGet(bvId: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchOneVideoApiV1BilibiliWebFetchVideoPartsGet(bvId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过bv号获得视频分p信息 ### 参数: - bv_id: 作品id ### 返回: - 视频分p信息  # [English] ### Purpose: - Get Video Parts By bvid ### Parameters: - bv_id: Video id ### Return: - Video Parts  # [示例/Example] bv_id = \"BV1vf421i7hV\"
         * @summary 通过bv号获得视频分p信息/Get Video Parts By bvid
         * @param {string} bvId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1BilibiliWebFetchVideoPartsGet_16(bvId: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchOneVideoApiV1BilibiliWebFetchVideoPartsGet_16(bvId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取视频流地址 ### 参数: - bv_id: 作品id - cid: 作品cid ### 返回: - 视频流地址  # [English] ### Purpose: - Get video playurl ### Parameters: - bv_id: Video id - cid: Video cid ### Return: - Video playurl  # [示例/Example] bv_id = \"BV1y7411Q7Eq\" cid = \"171776208\"
         * @summary 获取视频流地址/Get video playurl
         * @param {string} bvId 作品id/Video id
         * @param {string} cid 作品cid/Video cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet(bvId: string, cid: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet(bvId, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取视频流地址 ### 参数: - bv_id: 作品id - cid: 作品cid ### 返回: - 视频流地址  # [English] ### Purpose: - Get video playurl ### Parameters: - bv_id: Video id - cid: Video cid ### Return: - Video playurl  # [示例/Example] bv_id = \"BV1y7411Q7Eq\" cid = \"171776208\"
         * @summary 获取视频流地址/Get video playurl
         * @param {string} bvId 作品id/Video id
         * @param {string} cid 作品cid/Video cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet_17(bvId: string, cid: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet_17(bvId, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频详情信息V2 ### 参数: - a_id: 作品id - c_id: 作品cid ### 返回: - 视频详情信息V2  # [English] ### Purpose: - Get single video data V2 ### Parameters: - a_id: Video id - c_id: Video cid ### Return: - Video data V2  # [示例/Example] a_id = \"114006081739452\" c_id = \"28400484458\"
         * @summary 获取单个视频详情信息V2/Get single video data V2
         * @param {string} aId 作品id/Video id
         * @param {string} cId 作品cid/Video cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get(aId: string, cId: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get(aId, cId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频详情信息V2 ### 参数: - a_id: 作品id - c_id: 作品cid ### 返回: - 视频详情信息V2  # [English] ### Purpose: - Get single video data V2 ### Parameters: - a_id: Video id - c_id: Video cid ### Return: - Video data V2  # [示例/Example] a_id = \"114006081739452\" c_id = \"28400484458\"
         * @summary 获取单个视频详情信息V2/Get single video data V2
         * @param {string} aId 作品id/Video id
         * @param {string} cId 作品cid/Video cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get_18(aId: string, cId: string, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get_18(aId, cId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定收藏夹内视频数据 ### 参数: - folder_id: 用户UID - pn: 页码 ### 返回: - 指定收藏夹内视频数据  # [English] ### Purpose: - Gets video data from a collection folder ### Parameters: - folder_id: collection folder id - pn: Page number ### Return: - video data from collection folder  # [示例/Example] folder_id = \"1756059545\" pn = 1
         * @summary 获取指定收藏夹内视频数据/Gets video data from a collection folder
         * @param {string} folderId 收藏夹id/collection folder id
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserCollectionVideosApiV1BilibiliWebFetchUserCollectionVideosGet(folderId: string, pn?: number, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchUserCollectionVideosApiV1BilibiliWebFetchUserCollectionVideosGet(folderId, pn, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定收藏夹内视频数据 ### 参数: - folder_id: 用户UID - pn: 页码 ### 返回: - 指定收藏夹内视频数据  # [English] ### Purpose: - Gets video data from a collection folder ### Parameters: - folder_id: collection folder id - pn: Page number ### Return: - video data from collection folder  # [示例/Example] folder_id = \"1756059545\" pn = 1
         * @summary 获取指定收藏夹内视频数据/Gets video data from a collection folder
         * @param {string} folderId 收藏夹id/collection folder id
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserCollectionVideosApiV1BilibiliWebFetchUserCollectionVideosGet_19(folderId: string, pn?: number, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchUserCollectionVideosApiV1BilibiliWebFetchUserCollectionVideosGet_19(folderId, pn, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户发布的视频数据 ### 参数: - uid: 用户UID - pn: 页码 ### 返回: - 用户发布的视频数据  # [English] ### Purpose: - Get user post video data ### Parameters: - uid: User UID - pn: Page number ### Return: - User posted video data  # [示例/Example] uid = \"178360345\" pn = 1
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} uid 用户UID
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1BilibiliWebFetchUserPostVideosGet(uid: string, pn?: number, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchUserPostVideosApiV1BilibiliWebFetchUserPostVideosGet(uid, pn, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户发布的视频数据 ### 参数: - uid: 用户UID - pn: 页码 ### 返回: - 用户发布的视频数据  # [English] ### Purpose: - Get user post video data ### Parameters: - uid: User UID - pn: Page number ### Return: - User posted video data  # [示例/Example] uid = \"178360345\" pn = 1
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} uid 用户UID
         * @param {number} [pn] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1BilibiliWebFetchUserPostVideosGet_20(uid: string, pn?: number, options?: any): AxiosPromise<ResponseModel> {
            return BilibiliWebAPIApiFp(configuration).fetchUserPostVideosApiV1BilibiliWebFetchUserPostVideosGet_20(uid, pn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BilibiliWebAPIApi - interface
 * @export
 * @interface BilibiliWebAPIApi
 */
export interface BilibiliWebAPIApiInterface {
    /**
     * # [中文] ### 用途: - 获取所有直播分区列表 ### 参数: ### 返回: - 所有直播分区列表  # [English] ### Purpose: - Get a list of all live areas ### Parameters: ### Return: - list of all live areas  # [示例/Example]
     * @summary 获取所有直播分区列表/Get a list of all live areas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchCollectFoldersApiV1BilibiliWebFetchAllLiveAreasGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取所有直播分区列表 ### 参数: ### 返回: - 所有直播分区列表  # [English] ### Purpose: - Get a list of all live areas ### Parameters: ### Return: - list of all live areas  # [示例/Example]
     * @summary 获取所有直播分区列表/Get a list of all live areas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchCollectFoldersApiV1BilibiliWebFetchAllLiveAreasGet_1(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - uid: 用户UID ### 返回: - 用户收藏夹信息  # [English] ### Purpose: - Get user collection folders ### Parameters: - uid: User UID ### Return: - user collection folders  # [示例/Example] uid = \"178360345\"
     * @summary 获取用户所有收藏夹信息/Get user collection folders
     * @param {string} uid 用户UID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchCollectFoldersApiV1BilibiliWebFetchCollectFoldersGet(uid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - uid: 用户UID ### 返回: - 用户收藏夹信息  # [English] ### Purpose: - Get user collection folders ### Parameters: - uid: User UID ### Return: - user collection folders  # [示例/Example] uid = \"178360345\"
     * @summary 获取用户所有收藏夹信息/Get user collection folders
     * @param {string} uid 用户UID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchCollectFoldersApiV1BilibiliWebFetchCollectFoldersGet_2(uid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取综合热门视频信息 ### 参数: - pn: 页码 ### 返回: - 综合热门视频信息  # [English] ### Purpose: - Get comprehensive popular video information ### Parameters: - pn: Page number ### Return: - comprehensive popular video information  # [示例/Example] pn = 1
     * @summary 获取综合热门视频信息/Get comprehensive popular video information
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchCollectFoldersApiV1BilibiliWebFetchComPopularGet(pn?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取综合热门视频信息 ### 参数: - pn: 页码 ### 返回: - 综合热门视频信息  # [English] ### Purpose: - Get comprehensive popular video information ### Parameters: - pn: Page number ### Return: - comprehensive popular video information  # [示例/Example] pn = 1
     * @summary 获取综合热门视频信息/Get comprehensive popular video information
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchCollectFoldersApiV1BilibiliWebFetchComPopularGet_3(pn?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取视频下指定评论的回复 ### 参数: - bv_id: 作品id - pn: 页码 - rpid: 回复id ### 返回: - 指定评论的回复数据  # [English] ### Purpose: - Get reply to the specified comment ### Parameters: - bv_id: Video id - pn: Page number - rpid: Reply id ### Return: - Reply of the specified comment  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1 rpid = \"237109455120\"
     * @summary 获取视频下指定评论的回复/Get reply to the specified comment
     * @param {string} bvId 作品id/Video id
     * @param {string} rpid 回复id/Reply id
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet(bvId: string, rpid: string, pn?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取视频下指定评论的回复 ### 参数: - bv_id: 作品id - pn: 页码 - rpid: 回复id ### 返回: - 指定评论的回复数据  # [English] ### Purpose: - Get reply to the specified comment ### Parameters: - bv_id: Video id - pn: Page number - rpid: Reply id ### Return: - Reply of the specified comment  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1 rpid = \"237109455120\"
     * @summary 获取视频下指定评论的回复/Get reply to the specified comment
     * @param {string} bvId 作品id/Video id
     * @param {string} rpid 回复id/Reply id
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet_4(bvId: string, rpid: string, pn?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定直播间信息 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间信息  # [English] ### Purpose: - Get information of specified live room ### Parameters: - room_id: Live room ID ### Return: - information of specified live room  # [示例/Example] room_id = \"22816111\"
     * @summary 获取指定直播间信息/Get information of specified live room
     * @param {string} roomId 直播间ID/Live room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchCollectFoldersApiV1BilibiliWebFetchLiveRoomDetailGet(roomId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定直播间信息 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间信息  # [English] ### Purpose: - Get information of specified live room ### Parameters: - room_id: Live room ID ### Return: - information of specified live room  # [示例/Example] room_id = \"22816111\"
     * @summary 获取指定直播间信息/Get information of specified live room
     * @param {string} roomId 直播间ID/Live room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchCollectFoldersApiV1BilibiliWebFetchLiveRoomDetailGet_5(roomId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定分区正在直播的主播 ### 参数: - area_id: 直播分区id - pn: 页码 ### 返回: - 指定分区正在直播的主播  # [English] ### Purpose: - Get live streamers of specified live area ### Parameters: - area_id: Live area ID - pn: Page number ### Return: - live streamers of specified live area  # [示例/Example] area_id = \"9\" pn = 1
     * @summary 获取指定分区正在直播的主播/Get live streamers of specified live area
     * @param {string} areaId 直播分区id/Live area ID
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchCollectFoldersApiV1BilibiliWebFetchLiveStreamersGet(areaId: string, pn?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定分区正在直播的主播 ### 参数: - area_id: 直播分区id - pn: 页码 ### 返回: - 指定分区正在直播的主播  # [English] ### Purpose: - Get live streamers of specified live area ### Parameters: - area_id: Live area ID - pn: Page number ### Return: - live streamers of specified live area  # [示例/Example] area_id = \"9\" pn = 1
     * @summary 获取指定分区正在直播的主播/Get live streamers of specified live area
     * @param {string} areaId 直播分区id/Live area ID
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchCollectFoldersApiV1BilibiliWebFetchLiveStreamersGet_6(areaId: string, pn?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定直播间视频流 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间视频流  # [English] ### Purpose: - Get live video data of specified room ### Parameters: - room_id: Live room ID ### Return: - live video data of specified room  # [示例/Example] room_id = \"1815229528\"
     * @summary 获取直播间视频流/Get live video data of specified room
     * @param {string} roomId 直播间ID/Live room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchCollectFoldersApiV1BilibiliWebFetchLiveVideosGet(roomId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定直播间视频流 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间视频流  # [English] ### Purpose: - Get live video data of specified room ### Parameters: - room_id: Live room ID ### Return: - live video data of specified room  # [示例/Example] room_id = \"1815229528\"
     * @summary 获取直播间视频流/Get live video data of specified room
     * @param {string} roomId 直播间ID/Live room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchCollectFoldersApiV1BilibiliWebFetchLiveVideosGet_7(roomId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户动态 ### 参数: - uid: 用户UID - offset: 开始索引 ### 返回: - 指定用户动态数据  # [English] ### Purpose: - Get dynamic information of specified user ### Parameters: - uid: User UID - offset: offset ### Return: - dynamic information of specified user  # [示例/Example] uid = \"178360345\" offset = \"953154282154098691\"
     * @summary 获取指定用户动态/Get dynamic information of specified user
     * @param {string} uid 用户UID
     * @param {string} [offset] 开始索引/offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchCollectFoldersApiV1BilibiliWebFetchUserDynamicGet(uid: string, offset?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户动态 ### 参数: - uid: 用户UID - offset: 开始索引 ### 返回: - 指定用户动态数据  # [English] ### Purpose: - Get dynamic information of specified user ### Parameters: - uid: User UID - offset: offset ### Return: - dynamic information of specified user  # [示例/Example] uid = \"178360345\" offset = \"953154282154098691\"
     * @summary 获取指定用户动态/Get dynamic information of specified user
     * @param {string} uid 用户UID
     * @param {string} [offset] 开始索引/offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchCollectFoldersApiV1BilibiliWebFetchUserDynamicGet_8(uid: string, offset?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - uid: 用户UID ### 返回: - 指定用户的个人信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - uid: User UID ### Return: - information of specified user  # [示例/Example] uid = \"178360345\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} uid 用户UID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchCollectFoldersApiV1BilibiliWebFetchUserProfileGet(uid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - uid: 用户UID ### 返回: - 指定用户的个人信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - uid: User UID ### Return: - information of specified user  # [示例/Example] uid = \"178360345\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} uid 用户UID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchCollectFoldersApiV1BilibiliWebFetchUserProfileGet_9(uid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定视频的评论 ### 参数: - bv_id: 作品id - pn: 页码 ### 返回: - 指定视频的评论数据  # [English] ### Purpose: - Get comments on the specified video ### Parameters: - bv_id: Video id - pn: Page number ### Return: - comments of the specified video  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1
     * @summary 获取指定视频的评论/Get comments on the specified video
     * @param {string} bvId 作品id/Video id
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchCollectFoldersApiV1BilibiliWebFetchVideoCommentsGet(bvId: string, pn?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定视频的评论 ### 参数: - bv_id: 作品id - pn: 页码 ### 返回: - 指定视频的评论数据  # [English] ### Purpose: - Get comments on the specified video ### Parameters: - bv_id: Video id - pn: Page number ### Return: - comments of the specified video  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1
     * @summary 获取指定视频的评论/Get comments on the specified video
     * @param {string} bvId 作品id/Video id
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchCollectFoldersApiV1BilibiliWebFetchVideoCommentsGet_10(bvId: string, pn?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取综合搜索信息 ### 参数: - keyword: 搜索关键词 - order: 排序方式     - totalrank 综合排序     - click 最多播放     - pubdate 最新发布     - dm 最多弹幕     - stow 最多收藏 - page: 页码 - page_size: 每页数量 ### 返回: - 综合搜索信息  # [English] ### Purpose: - Get general search data ### Parameters: - keyword: Search keyword - order: Order method     - totalrank Comprehensive sorting     - click Most played     - pubdate Latest release     - dm Most barrage     - stow Most collection - page: Page number - page_size: Number per page ### Return: - General search data  # [示例/Example] keyword = \"火影忍者\" order = \"totalrank\" page = 1 page_size = 42
     * @summary 获取综合搜索信息/Get general search data
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {string} order 排序方式/Order method
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet(keyword: string, order: string, page: number, pageSize: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取综合搜索信息 ### 参数: - keyword: 搜索关键词 - order: 排序方式     - totalrank 综合排序     - click 最多播放     - pubdate 最新发布     - dm 最多弹幕     - stow 最多收藏 - page: 页码 - page_size: 每页数量 ### 返回: - 综合搜索信息  # [English] ### Purpose: - Get general search data ### Parameters: - keyword: Search keyword - order: Order method     - totalrank Comprehensive sorting     - click Most played     - pubdate Latest release     - dm Most barrage     - stow Most collection - page: Page number - page_size: Number per page ### Return: - General search data  # [示例/Example] keyword = \"火影忍者\" order = \"totalrank\" page = 1 page_size = 42
     * @summary 获取综合搜索信息/Get general search data
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {string} order 排序方式/Order method
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet_11(keyword: string, order: string, page: number, pageSize: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取热门搜索信息 ### 参数: - limit: 返回数量 ### 返回: - 热门搜索信息 ### 说明: - limit默认为10，上限为50  # [English] ### Purpose: - Get hot search data ### Parameters: - limit: Return number ### Return: - Hot search data ### Note: - limit default is 10, maximum is 50  # [示例/Example] limit = 10
     * @summary 获取热门搜索信息/Get hot search data
     * @param {string} limit 返回数量/Return number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchHotSearchApiV1BilibiliWebFetchHotSearchGet(limit: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取热门搜索信息 ### 参数: - limit: 返回数量 ### 返回: - 热门搜索信息 ### 说明: - limit默认为10，上限为50  # [English] ### Purpose: - Get hot search data ### Parameters: - limit: Return number ### Return: - Hot search data ### Note: - limit default is 10, maximum is 50  # [示例/Example] limit = 10
     * @summary 获取热门搜索信息/Get hot search data
     * @param {string} limit 返回数量/Return number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchHotSearchApiV1BilibiliWebFetchHotSearchGet_12(limit: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过bv号获得视频aid号 ### 参数: - bv_id: 作品id ### 返回: - 视频aid号  # [English] ### Purpose: - Generate aid by bvid ### Parameters: - bv_id: Video id ### Return: - Video aid  # [示例/Example] bv_id = \"BV1M1421t7hT\"
     * @summary 通过bv号获得视频aid号/Generate aid by bvid
     * @param {string} bvId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchOneVideoApiV1BilibiliWebBvToAidGet(bvId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过bv号获得视频aid号 ### 参数: - bv_id: 作品id ### 返回: - 视频aid号  # [English] ### Purpose: - Generate aid by bvid ### Parameters: - bv_id: Video id ### Return: - Video aid  # [示例/Example] bv_id = \"BV1M1421t7hT\"
     * @summary 通过bv号获得视频aid号/Generate aid by bvid
     * @param {string} bvId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchOneVideoApiV1BilibiliWebBvToAidGet_13(bvId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频详情信息 ### 参数: - bv_id: 作品id ### 返回: - 视频详情信息  # [English] ### Purpose: - Get single video data ### Parameters: - bv_id: Video id ### Return: - Video data  # [示例/Example] bv_id = \"BV1M1421t7hT\"
     * @summary 获取单个视频详情信息/Get single video data
     * @param {string} bvId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchOneVideoApiV1BilibiliWebFetchOneVideoGet(bvId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频详情信息 ### 参数: - bv_id: 作品id ### 返回: - 视频详情信息  # [English] ### Purpose: - Get single video data ### Parameters: - bv_id: Video id ### Return: - Video data  # [示例/Example] bv_id = \"BV1M1421t7hT\"
     * @summary 获取单个视频详情信息/Get single video data
     * @param {string} bvId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchOneVideoApiV1BilibiliWebFetchOneVideoGet_14(bvId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取视频实时弹幕 ### 参数: - cid: 作品cid ### 返回: - 视频实时弹幕  # [English] ### Purpose: - Get Video Danmaku ### Parameters: - cid: Video cid ### Return: - Video Danmaku  # [示例/Example] cid = \"1639235405\"
     * @summary 获取视频实时弹幕/Get Video Danmaku
     * @param {string} cid 作品cid/Video cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchOneVideoApiV1BilibiliWebFetchVideoDanmakuGet(cid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取视频实时弹幕 ### 参数: - cid: 作品cid ### 返回: - 视频实时弹幕  # [English] ### Purpose: - Get Video Danmaku ### Parameters: - cid: Video cid ### Return: - Video Danmaku  # [示例/Example] cid = \"1639235405\"
     * @summary 获取视频实时弹幕/Get Video Danmaku
     * @param {string} cid 作品cid/Video cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchOneVideoApiV1BilibiliWebFetchVideoDanmakuGet_15(cid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过bv号获得视频分p信息 ### 参数: - bv_id: 作品id ### 返回: - 视频分p信息  # [English] ### Purpose: - Get Video Parts By bvid ### Parameters: - bv_id: Video id ### Return: - Video Parts  # [示例/Example] bv_id = \"BV1vf421i7hV\"
     * @summary 通过bv号获得视频分p信息/Get Video Parts By bvid
     * @param {string} bvId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchOneVideoApiV1BilibiliWebFetchVideoPartsGet(bvId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过bv号获得视频分p信息 ### 参数: - bv_id: 作品id ### 返回: - 视频分p信息  # [English] ### Purpose: - Get Video Parts By bvid ### Parameters: - bv_id: Video id ### Return: - Video Parts  # [示例/Example] bv_id = \"BV1vf421i7hV\"
     * @summary 通过bv号获得视频分p信息/Get Video Parts By bvid
     * @param {string} bvId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchOneVideoApiV1BilibiliWebFetchVideoPartsGet_16(bvId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取视频流地址 ### 参数: - bv_id: 作品id - cid: 作品cid ### 返回: - 视频流地址  # [English] ### Purpose: - Get video playurl ### Parameters: - bv_id: Video id - cid: Video cid ### Return: - Video playurl  # [示例/Example] bv_id = \"BV1y7411Q7Eq\" cid = \"171776208\"
     * @summary 获取视频流地址/Get video playurl
     * @param {string} bvId 作品id/Video id
     * @param {string} cid 作品cid/Video cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet(bvId: string, cid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取视频流地址 ### 参数: - bv_id: 作品id - cid: 作品cid ### 返回: - 视频流地址  # [English] ### Purpose: - Get video playurl ### Parameters: - bv_id: Video id - cid: Video cid ### Return: - Video playurl  # [示例/Example] bv_id = \"BV1y7411Q7Eq\" cid = \"171776208\"
     * @summary 获取视频流地址/Get video playurl
     * @param {string} bvId 作品id/Video id
     * @param {string} cid 作品cid/Video cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet_17(bvId: string, cid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频详情信息V2 ### 参数: - a_id: 作品id - c_id: 作品cid ### 返回: - 视频详情信息V2  # [English] ### Purpose: - Get single video data V2 ### Parameters: - a_id: Video id - c_id: Video cid ### Return: - Video data V2  # [示例/Example] a_id = \"114006081739452\" c_id = \"28400484458\"
     * @summary 获取单个视频详情信息V2/Get single video data V2
     * @param {string} aId 作品id/Video id
     * @param {string} cId 作品cid/Video cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get(aId: string, cId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频详情信息V2 ### 参数: - a_id: 作品id - c_id: 作品cid ### 返回: - 视频详情信息V2  # [English] ### Purpose: - Get single video data V2 ### Parameters: - a_id: Video id - c_id: Video cid ### Return: - Video data V2  # [示例/Example] a_id = \"114006081739452\" c_id = \"28400484458\"
     * @summary 获取单个视频详情信息V2/Get single video data V2
     * @param {string} aId 作品id/Video id
     * @param {string} cId 作品cid/Video cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get_18(aId: string, cId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定收藏夹内视频数据 ### 参数: - folder_id: 用户UID - pn: 页码 ### 返回: - 指定收藏夹内视频数据  # [English] ### Purpose: - Gets video data from a collection folder ### Parameters: - folder_id: collection folder id - pn: Page number ### Return: - video data from collection folder  # [示例/Example] folder_id = \"1756059545\" pn = 1
     * @summary 获取指定收藏夹内视频数据/Gets video data from a collection folder
     * @param {string} folderId 收藏夹id/collection folder id
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchUserCollectionVideosApiV1BilibiliWebFetchUserCollectionVideosGet(folderId: string, pn?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定收藏夹内视频数据 ### 参数: - folder_id: 用户UID - pn: 页码 ### 返回: - 指定收藏夹内视频数据  # [English] ### Purpose: - Gets video data from a collection folder ### Parameters: - folder_id: collection folder id - pn: Page number ### Return: - video data from collection folder  # [示例/Example] folder_id = \"1756059545\" pn = 1
     * @summary 获取指定收藏夹内视频数据/Gets video data from a collection folder
     * @param {string} folderId 收藏夹id/collection folder id
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchUserCollectionVideosApiV1BilibiliWebFetchUserCollectionVideosGet_19(folderId: string, pn?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户发布的视频数据 ### 参数: - uid: 用户UID - pn: 页码 ### 返回: - 用户发布的视频数据  # [English] ### Purpose: - Get user post video data ### Parameters: - uid: User UID - pn: Page number ### Return: - User posted video data  # [示例/Example] uid = \"178360345\" pn = 1
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} uid 用户UID
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchUserPostVideosApiV1BilibiliWebFetchUserPostVideosGet(uid: string, pn?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户发布的视频数据 ### 参数: - uid: 用户UID - pn: 页码 ### 返回: - 用户发布的视频数据  # [English] ### Purpose: - Get user post video data ### Parameters: - uid: User UID - pn: Page number ### Return: - User posted video data  # [示例/Example] uid = \"178360345\" pn = 1
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} uid 用户UID
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApiInterface
     */
    fetchUserPostVideosApiV1BilibiliWebFetchUserPostVideosGet_20(uid: string, pn?: number, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * BilibiliWebAPIApi - object-oriented interface
 * @export
 * @class BilibiliWebAPIApi
 * @extends {BaseAPI}
 */
export class BilibiliWebAPIApi extends BaseAPI implements BilibiliWebAPIApiInterface {
    /**
     * # [中文] ### 用途: - 获取所有直播分区列表 ### 参数: ### 返回: - 所有直播分区列表  # [English] ### Purpose: - Get a list of all live areas ### Parameters: ### Return: - list of all live areas  # [示例/Example]
     * @summary 获取所有直播分区列表/Get a list of all live areas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchCollectFoldersApiV1BilibiliWebFetchAllLiveAreasGet(options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchCollectFoldersApiV1BilibiliWebFetchAllLiveAreasGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取所有直播分区列表 ### 参数: ### 返回: - 所有直播分区列表  # [English] ### Purpose: - Get a list of all live areas ### Parameters: ### Return: - list of all live areas  # [示例/Example]
     * @summary 获取所有直播分区列表/Get a list of all live areas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchCollectFoldersApiV1BilibiliWebFetchAllLiveAreasGet_1(options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchCollectFoldersApiV1BilibiliWebFetchAllLiveAreasGet_1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - uid: 用户UID ### 返回: - 用户收藏夹信息  # [English] ### Purpose: - Get user collection folders ### Parameters: - uid: User UID ### Return: - user collection folders  # [示例/Example] uid = \"178360345\"
     * @summary 获取用户所有收藏夹信息/Get user collection folders
     * @param {string} uid 用户UID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchCollectFoldersApiV1BilibiliWebFetchCollectFoldersGet(uid: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchCollectFoldersApiV1BilibiliWebFetchCollectFoldersGet(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - uid: 用户UID ### 返回: - 用户收藏夹信息  # [English] ### Purpose: - Get user collection folders ### Parameters: - uid: User UID ### Return: - user collection folders  # [示例/Example] uid = \"178360345\"
     * @summary 获取用户所有收藏夹信息/Get user collection folders
     * @param {string} uid 用户UID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchCollectFoldersApiV1BilibiliWebFetchCollectFoldersGet_2(uid: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchCollectFoldersApiV1BilibiliWebFetchCollectFoldersGet_2(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取综合热门视频信息 ### 参数: - pn: 页码 ### 返回: - 综合热门视频信息  # [English] ### Purpose: - Get comprehensive popular video information ### Parameters: - pn: Page number ### Return: - comprehensive popular video information  # [示例/Example] pn = 1
     * @summary 获取综合热门视频信息/Get comprehensive popular video information
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchCollectFoldersApiV1BilibiliWebFetchComPopularGet(pn?: number, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchCollectFoldersApiV1BilibiliWebFetchComPopularGet(pn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取综合热门视频信息 ### 参数: - pn: 页码 ### 返回: - 综合热门视频信息  # [English] ### Purpose: - Get comprehensive popular video information ### Parameters: - pn: Page number ### Return: - comprehensive popular video information  # [示例/Example] pn = 1
     * @summary 获取综合热门视频信息/Get comprehensive popular video information
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchCollectFoldersApiV1BilibiliWebFetchComPopularGet_3(pn?: number, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchCollectFoldersApiV1BilibiliWebFetchComPopularGet_3(pn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取视频下指定评论的回复 ### 参数: - bv_id: 作品id - pn: 页码 - rpid: 回复id ### 返回: - 指定评论的回复数据  # [English] ### Purpose: - Get reply to the specified comment ### Parameters: - bv_id: Video id - pn: Page number - rpid: Reply id ### Return: - Reply of the specified comment  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1 rpid = \"237109455120\"
     * @summary 获取视频下指定评论的回复/Get reply to the specified comment
     * @param {string} bvId 作品id/Video id
     * @param {string} rpid 回复id/Reply id
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet(bvId: string, rpid: string, pn?: number, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet(bvId, rpid, pn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取视频下指定评论的回复 ### 参数: - bv_id: 作品id - pn: 页码 - rpid: 回复id ### 返回: - 指定评论的回复数据  # [English] ### Purpose: - Get reply to the specified comment ### Parameters: - bv_id: Video id - pn: Page number - rpid: Reply id ### Return: - Reply of the specified comment  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1 rpid = \"237109455120\"
     * @summary 获取视频下指定评论的回复/Get reply to the specified comment
     * @param {string} bvId 作品id/Video id
     * @param {string} rpid 回复id/Reply id
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet_4(bvId: string, rpid: string, pn?: number, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchCollectFoldersApiV1BilibiliWebFetchCommentReplyGet_4(bvId, rpid, pn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定直播间信息 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间信息  # [English] ### Purpose: - Get information of specified live room ### Parameters: - room_id: Live room ID ### Return: - information of specified live room  # [示例/Example] room_id = \"22816111\"
     * @summary 获取指定直播间信息/Get information of specified live room
     * @param {string} roomId 直播间ID/Live room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchCollectFoldersApiV1BilibiliWebFetchLiveRoomDetailGet(roomId: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchCollectFoldersApiV1BilibiliWebFetchLiveRoomDetailGet(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定直播间信息 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间信息  # [English] ### Purpose: - Get information of specified live room ### Parameters: - room_id: Live room ID ### Return: - information of specified live room  # [示例/Example] room_id = \"22816111\"
     * @summary 获取指定直播间信息/Get information of specified live room
     * @param {string} roomId 直播间ID/Live room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchCollectFoldersApiV1BilibiliWebFetchLiveRoomDetailGet_5(roomId: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchCollectFoldersApiV1BilibiliWebFetchLiveRoomDetailGet_5(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定分区正在直播的主播 ### 参数: - area_id: 直播分区id - pn: 页码 ### 返回: - 指定分区正在直播的主播  # [English] ### Purpose: - Get live streamers of specified live area ### Parameters: - area_id: Live area ID - pn: Page number ### Return: - live streamers of specified live area  # [示例/Example] area_id = \"9\" pn = 1
     * @summary 获取指定分区正在直播的主播/Get live streamers of specified live area
     * @param {string} areaId 直播分区id/Live area ID
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchCollectFoldersApiV1BilibiliWebFetchLiveStreamersGet(areaId: string, pn?: number, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchCollectFoldersApiV1BilibiliWebFetchLiveStreamersGet(areaId, pn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定分区正在直播的主播 ### 参数: - area_id: 直播分区id - pn: 页码 ### 返回: - 指定分区正在直播的主播  # [English] ### Purpose: - Get live streamers of specified live area ### Parameters: - area_id: Live area ID - pn: Page number ### Return: - live streamers of specified live area  # [示例/Example] area_id = \"9\" pn = 1
     * @summary 获取指定分区正在直播的主播/Get live streamers of specified live area
     * @param {string} areaId 直播分区id/Live area ID
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchCollectFoldersApiV1BilibiliWebFetchLiveStreamersGet_6(areaId: string, pn?: number, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchCollectFoldersApiV1BilibiliWebFetchLiveStreamersGet_6(areaId, pn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定直播间视频流 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间视频流  # [English] ### Purpose: - Get live video data of specified room ### Parameters: - room_id: Live room ID ### Return: - live video data of specified room  # [示例/Example] room_id = \"1815229528\"
     * @summary 获取直播间视频流/Get live video data of specified room
     * @param {string} roomId 直播间ID/Live room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchCollectFoldersApiV1BilibiliWebFetchLiveVideosGet(roomId: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchCollectFoldersApiV1BilibiliWebFetchLiveVideosGet(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定直播间视频流 ### 参数: - room_id: 直播间ID ### 返回: - 指定直播间视频流  # [English] ### Purpose: - Get live video data of specified room ### Parameters: - room_id: Live room ID ### Return: - live video data of specified room  # [示例/Example] room_id = \"1815229528\"
     * @summary 获取直播间视频流/Get live video data of specified room
     * @param {string} roomId 直播间ID/Live room ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchCollectFoldersApiV1BilibiliWebFetchLiveVideosGet_7(roomId: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchCollectFoldersApiV1BilibiliWebFetchLiveVideosGet_7(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户动态 ### 参数: - uid: 用户UID - offset: 开始索引 ### 返回: - 指定用户动态数据  # [English] ### Purpose: - Get dynamic information of specified user ### Parameters: - uid: User UID - offset: offset ### Return: - dynamic information of specified user  # [示例/Example] uid = \"178360345\" offset = \"953154282154098691\"
     * @summary 获取指定用户动态/Get dynamic information of specified user
     * @param {string} uid 用户UID
     * @param {string} [offset] 开始索引/offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchCollectFoldersApiV1BilibiliWebFetchUserDynamicGet(uid: string, offset?: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchCollectFoldersApiV1BilibiliWebFetchUserDynamicGet(uid, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户动态 ### 参数: - uid: 用户UID - offset: 开始索引 ### 返回: - 指定用户动态数据  # [English] ### Purpose: - Get dynamic information of specified user ### Parameters: - uid: User UID - offset: offset ### Return: - dynamic information of specified user  # [示例/Example] uid = \"178360345\" offset = \"953154282154098691\"
     * @summary 获取指定用户动态/Get dynamic information of specified user
     * @param {string} uid 用户UID
     * @param {string} [offset] 开始索引/offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchCollectFoldersApiV1BilibiliWebFetchUserDynamicGet_8(uid: string, offset?: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchCollectFoldersApiV1BilibiliWebFetchUserDynamicGet_8(uid, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - uid: 用户UID ### 返回: - 指定用户的个人信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - uid: User UID ### Return: - information of specified user  # [示例/Example] uid = \"178360345\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} uid 用户UID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchCollectFoldersApiV1BilibiliWebFetchUserProfileGet(uid: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchCollectFoldersApiV1BilibiliWebFetchUserProfileGet(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - uid: 用户UID ### 返回: - 指定用户的个人信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - uid: User UID ### Return: - information of specified user  # [示例/Example] uid = \"178360345\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} uid 用户UID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchCollectFoldersApiV1BilibiliWebFetchUserProfileGet_9(uid: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchCollectFoldersApiV1BilibiliWebFetchUserProfileGet_9(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定视频的评论 ### 参数: - bv_id: 作品id - pn: 页码 ### 返回: - 指定视频的评论数据  # [English] ### Purpose: - Get comments on the specified video ### Parameters: - bv_id: Video id - pn: Page number ### Return: - comments of the specified video  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1
     * @summary 获取指定视频的评论/Get comments on the specified video
     * @param {string} bvId 作品id/Video id
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchCollectFoldersApiV1BilibiliWebFetchVideoCommentsGet(bvId: string, pn?: number, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchCollectFoldersApiV1BilibiliWebFetchVideoCommentsGet(bvId, pn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定视频的评论 ### 参数: - bv_id: 作品id - pn: 页码 ### 返回: - 指定视频的评论数据  # [English] ### Purpose: - Get comments on the specified video ### Parameters: - bv_id: Video id - pn: Page number ### Return: - comments of the specified video  # [示例/Example] bv_id = \"BV1M1421t7hT\" pn = 1
     * @summary 获取指定视频的评论/Get comments on the specified video
     * @param {string} bvId 作品id/Video id
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchCollectFoldersApiV1BilibiliWebFetchVideoCommentsGet_10(bvId: string, pn?: number, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchCollectFoldersApiV1BilibiliWebFetchVideoCommentsGet_10(bvId, pn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取综合搜索信息 ### 参数: - keyword: 搜索关键词 - order: 排序方式     - totalrank 综合排序     - click 最多播放     - pubdate 最新发布     - dm 最多弹幕     - stow 最多收藏 - page: 页码 - page_size: 每页数量 ### 返回: - 综合搜索信息  # [English] ### Purpose: - Get general search data ### Parameters: - keyword: Search keyword - order: Order method     - totalrank Comprehensive sorting     - click Most played     - pubdate Latest release     - dm Most barrage     - stow Most collection - page: Page number - page_size: Number per page ### Return: - General search data  # [示例/Example] keyword = \"火影忍者\" order = \"totalrank\" page = 1 page_size = 42
     * @summary 获取综合搜索信息/Get general search data
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {string} order 排序方式/Order method
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet(keyword: string, order: string, page: number, pageSize: number, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet(keyword, order, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取综合搜索信息 ### 参数: - keyword: 搜索关键词 - order: 排序方式     - totalrank 综合排序     - click 最多播放     - pubdate 最新发布     - dm 最多弹幕     - stow 最多收藏 - page: 页码 - page_size: 每页数量 ### 返回: - 综合搜索信息  # [English] ### Purpose: - Get general search data ### Parameters: - keyword: Search keyword - order: Order method     - totalrank Comprehensive sorting     - click Most played     - pubdate Latest release     - dm Most barrage     - stow Most collection - page: Page number - page_size: Number per page ### Return: - General search data  # [示例/Example] keyword = \"火影忍者\" order = \"totalrank\" page = 1 page_size = 42
     * @summary 获取综合搜索信息/Get general search data
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {string} order 排序方式/Order method
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet_11(keyword: string, order: string, page: number, pageSize: number, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchGeneralSearchApiV1BilibiliWebFetchGeneralSearchGet_11(keyword, order, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取热门搜索信息 ### 参数: - limit: 返回数量 ### 返回: - 热门搜索信息 ### 说明: - limit默认为10，上限为50  # [English] ### Purpose: - Get hot search data ### Parameters: - limit: Return number ### Return: - Hot search data ### Note: - limit default is 10, maximum is 50  # [示例/Example] limit = 10
     * @summary 获取热门搜索信息/Get hot search data
     * @param {string} limit 返回数量/Return number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchHotSearchApiV1BilibiliWebFetchHotSearchGet(limit: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchHotSearchApiV1BilibiliWebFetchHotSearchGet(limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取热门搜索信息 ### 参数: - limit: 返回数量 ### 返回: - 热门搜索信息 ### 说明: - limit默认为10，上限为50  # [English] ### Purpose: - Get hot search data ### Parameters: - limit: Return number ### Return: - Hot search data ### Note: - limit default is 10, maximum is 50  # [示例/Example] limit = 10
     * @summary 获取热门搜索信息/Get hot search data
     * @param {string} limit 返回数量/Return number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchHotSearchApiV1BilibiliWebFetchHotSearchGet_12(limit: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchHotSearchApiV1BilibiliWebFetchHotSearchGet_12(limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过bv号获得视频aid号 ### 参数: - bv_id: 作品id ### 返回: - 视频aid号  # [English] ### Purpose: - Generate aid by bvid ### Parameters: - bv_id: Video id ### Return: - Video aid  # [示例/Example] bv_id = \"BV1M1421t7hT\"
     * @summary 通过bv号获得视频aid号/Generate aid by bvid
     * @param {string} bvId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchOneVideoApiV1BilibiliWebBvToAidGet(bvId: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchOneVideoApiV1BilibiliWebBvToAidGet(bvId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过bv号获得视频aid号 ### 参数: - bv_id: 作品id ### 返回: - 视频aid号  # [English] ### Purpose: - Generate aid by bvid ### Parameters: - bv_id: Video id ### Return: - Video aid  # [示例/Example] bv_id = \"BV1M1421t7hT\"
     * @summary 通过bv号获得视频aid号/Generate aid by bvid
     * @param {string} bvId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchOneVideoApiV1BilibiliWebBvToAidGet_13(bvId: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchOneVideoApiV1BilibiliWebBvToAidGet_13(bvId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频详情信息 ### 参数: - bv_id: 作品id ### 返回: - 视频详情信息  # [English] ### Purpose: - Get single video data ### Parameters: - bv_id: Video id ### Return: - Video data  # [示例/Example] bv_id = \"BV1M1421t7hT\"
     * @summary 获取单个视频详情信息/Get single video data
     * @param {string} bvId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchOneVideoApiV1BilibiliWebFetchOneVideoGet(bvId: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchOneVideoApiV1BilibiliWebFetchOneVideoGet(bvId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频详情信息 ### 参数: - bv_id: 作品id ### 返回: - 视频详情信息  # [English] ### Purpose: - Get single video data ### Parameters: - bv_id: Video id ### Return: - Video data  # [示例/Example] bv_id = \"BV1M1421t7hT\"
     * @summary 获取单个视频详情信息/Get single video data
     * @param {string} bvId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchOneVideoApiV1BilibiliWebFetchOneVideoGet_14(bvId: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchOneVideoApiV1BilibiliWebFetchOneVideoGet_14(bvId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取视频实时弹幕 ### 参数: - cid: 作品cid ### 返回: - 视频实时弹幕  # [English] ### Purpose: - Get Video Danmaku ### Parameters: - cid: Video cid ### Return: - Video Danmaku  # [示例/Example] cid = \"1639235405\"
     * @summary 获取视频实时弹幕/Get Video Danmaku
     * @param {string} cid 作品cid/Video cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchOneVideoApiV1BilibiliWebFetchVideoDanmakuGet(cid: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchOneVideoApiV1BilibiliWebFetchVideoDanmakuGet(cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取视频实时弹幕 ### 参数: - cid: 作品cid ### 返回: - 视频实时弹幕  # [English] ### Purpose: - Get Video Danmaku ### Parameters: - cid: Video cid ### Return: - Video Danmaku  # [示例/Example] cid = \"1639235405\"
     * @summary 获取视频实时弹幕/Get Video Danmaku
     * @param {string} cid 作品cid/Video cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchOneVideoApiV1BilibiliWebFetchVideoDanmakuGet_15(cid: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchOneVideoApiV1BilibiliWebFetchVideoDanmakuGet_15(cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过bv号获得视频分p信息 ### 参数: - bv_id: 作品id ### 返回: - 视频分p信息  # [English] ### Purpose: - Get Video Parts By bvid ### Parameters: - bv_id: Video id ### Return: - Video Parts  # [示例/Example] bv_id = \"BV1vf421i7hV\"
     * @summary 通过bv号获得视频分p信息/Get Video Parts By bvid
     * @param {string} bvId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchOneVideoApiV1BilibiliWebFetchVideoPartsGet(bvId: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchOneVideoApiV1BilibiliWebFetchVideoPartsGet(bvId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过bv号获得视频分p信息 ### 参数: - bv_id: 作品id ### 返回: - 视频分p信息  # [English] ### Purpose: - Get Video Parts By bvid ### Parameters: - bv_id: Video id ### Return: - Video Parts  # [示例/Example] bv_id = \"BV1vf421i7hV\"
     * @summary 通过bv号获得视频分p信息/Get Video Parts By bvid
     * @param {string} bvId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchOneVideoApiV1BilibiliWebFetchVideoPartsGet_16(bvId: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchOneVideoApiV1BilibiliWebFetchVideoPartsGet_16(bvId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取视频流地址 ### 参数: - bv_id: 作品id - cid: 作品cid ### 返回: - 视频流地址  # [English] ### Purpose: - Get video playurl ### Parameters: - bv_id: Video id - cid: Video cid ### Return: - Video playurl  # [示例/Example] bv_id = \"BV1y7411Q7Eq\" cid = \"171776208\"
     * @summary 获取视频流地址/Get video playurl
     * @param {string} bvId 作品id/Video id
     * @param {string} cid 作品cid/Video cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet(bvId: string, cid: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet(bvId, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取视频流地址 ### 参数: - bv_id: 作品id - cid: 作品cid ### 返回: - 视频流地址  # [English] ### Purpose: - Get video playurl ### Parameters: - bv_id: Video id - cid: Video cid ### Return: - Video playurl  # [示例/Example] bv_id = \"BV1y7411Q7Eq\" cid = \"171776208\"
     * @summary 获取视频流地址/Get video playurl
     * @param {string} bvId 作品id/Video id
     * @param {string} cid 作品cid/Video cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet_17(bvId: string, cid: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchOneVideoApiV1BilibiliWebFetchVideoPlayurlGet_17(bvId, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频详情信息V2 ### 参数: - a_id: 作品id - c_id: 作品cid ### 返回: - 视频详情信息V2  # [English] ### Purpose: - Get single video data V2 ### Parameters: - a_id: Video id - c_id: Video cid ### Return: - Video data V2  # [示例/Example] a_id = \"114006081739452\" c_id = \"28400484458\"
     * @summary 获取单个视频详情信息V2/Get single video data V2
     * @param {string} aId 作品id/Video id
     * @param {string} cId 作品cid/Video cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get(aId: string, cId: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get(aId, cId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频详情信息V2 ### 参数: - a_id: 作品id - c_id: 作品cid ### 返回: - 视频详情信息V2  # [English] ### Purpose: - Get single video data V2 ### Parameters: - a_id: Video id - c_id: Video cid ### Return: - Video data V2  # [示例/Example] a_id = \"114006081739452\" c_id = \"28400484458\"
     * @summary 获取单个视频详情信息V2/Get single video data V2
     * @param {string} aId 作品id/Video id
     * @param {string} cId 作品cid/Video cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get_18(aId: string, cId: string, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchOneVideoV2ApiV1BilibiliWebFetchOneVideoV2Get_18(aId, cId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定收藏夹内视频数据 ### 参数: - folder_id: 用户UID - pn: 页码 ### 返回: - 指定收藏夹内视频数据  # [English] ### Purpose: - Gets video data from a collection folder ### Parameters: - folder_id: collection folder id - pn: Page number ### Return: - video data from collection folder  # [示例/Example] folder_id = \"1756059545\" pn = 1
     * @summary 获取指定收藏夹内视频数据/Gets video data from a collection folder
     * @param {string} folderId 收藏夹id/collection folder id
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchUserCollectionVideosApiV1BilibiliWebFetchUserCollectionVideosGet(folderId: string, pn?: number, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchUserCollectionVideosApiV1BilibiliWebFetchUserCollectionVideosGet(folderId, pn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定收藏夹内视频数据 ### 参数: - folder_id: 用户UID - pn: 页码 ### 返回: - 指定收藏夹内视频数据  # [English] ### Purpose: - Gets video data from a collection folder ### Parameters: - folder_id: collection folder id - pn: Page number ### Return: - video data from collection folder  # [示例/Example] folder_id = \"1756059545\" pn = 1
     * @summary 获取指定收藏夹内视频数据/Gets video data from a collection folder
     * @param {string} folderId 收藏夹id/collection folder id
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchUserCollectionVideosApiV1BilibiliWebFetchUserCollectionVideosGet_19(folderId: string, pn?: number, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchUserCollectionVideosApiV1BilibiliWebFetchUserCollectionVideosGet_19(folderId, pn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户发布的视频数据 ### 参数: - uid: 用户UID - pn: 页码 ### 返回: - 用户发布的视频数据  # [English] ### Purpose: - Get user post video data ### Parameters: - uid: User UID - pn: Page number ### Return: - User posted video data  # [示例/Example] uid = \"178360345\" pn = 1
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} uid 用户UID
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchUserPostVideosApiV1BilibiliWebFetchUserPostVideosGet(uid: string, pn?: number, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchUserPostVideosApiV1BilibiliWebFetchUserPostVideosGet(uid, pn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户发布的视频数据 ### 参数: - uid: 用户UID - pn: 页码 ### 返回: - 用户发布的视频数据  # [English] ### Purpose: - Get user post video data ### Parameters: - uid: User UID - pn: Page number ### Return: - User posted video data  # [示例/Example] uid = \"178360345\" pn = 1
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} uid 用户UID
     * @param {number} [pn] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BilibiliWebAPIApi
     */
    public fetchUserPostVideosApiV1BilibiliWebFetchUserPostVideosGet_20(uid: string, pn?: number, options?: any) {
        return BilibiliWebAPIApiFp(this.configuration).fetchUserPostVideosApiV1BilibiliWebFetchUserPostVideosGet_20(uid, pn, options).then((request) => request(this.axios, this.basePath));
    }

}
