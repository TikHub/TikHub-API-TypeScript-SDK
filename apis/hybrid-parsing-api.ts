// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
/**
 * HybridParsingApi - axios parameter creator
 * @export
 */
export const HybridParsingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"
         * @summary 混合解析单一视频接口/Hybrid parsing single video endpoint
         * @param {string} url 
         * @param {boolean} [minimal] 是否返回最小数据/Whether to return minimal data
         * @param {boolean} [base64Url] 是否Base64编码提交URL/Base64 encoding URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hybridParsingSingleVideoApiV1HybridVideoDataGet: async (url: string, minimal?: boolean, base64Url?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling hybridParsingSingleVideoApiV1HybridVideoDataGet.');
            }
            const localVarPath = `/api/v1/hybrid/video_data`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (minimal !== undefined) {
                localVarQueryParameter['minimal'] = minimal;
            }

            if (base64Url !== undefined) {
                localVarQueryParameter['base64_url'] = base64Url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"
         * @summary 混合解析单一视频接口/Hybrid parsing single video endpoint
         * @param {string} url 
         * @param {boolean} [minimal] 是否返回最小数据/Whether to return minimal data
         * @param {boolean} [base64Url] 是否Base64编码提交URL/Base64 encoding URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hybridParsingSingleVideoApiV1HybridVideoDataGet_1: async (url: string, minimal?: boolean, base64Url?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling hybridParsingSingleVideoApiV1HybridVideoDataGet_1.');
            }
            const localVarPath = `/api/v1/hybrid/video_data`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (minimal !== undefined) {
                localVarQueryParameter['minimal'] = minimal;
            }

            if (base64Url !== undefined) {
                localVarQueryParameter['base64_url'] = base64Url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"
         * @summary 混合解析单一视频接口/Hybrid parsing single video endpoint
         * @param {string} url 
         * @param {boolean} [minimal] 是否返回最小数据/Whether to return minimal data
         * @param {boolean} [base64Url] 是否Base64编码提交URL/Base64 encoding URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hybridParsingSingleVideoApiV1HybridVideoDataGet_2: async (url: string, minimal?: boolean, base64Url?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling hybridParsingSingleVideoApiV1HybridVideoDataGet_2.');
            }
            const localVarPath = `/api/v1/hybrid/video_data`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (minimal !== undefined) {
                localVarQueryParameter['minimal'] = minimal;
            }

            if (base64Url !== undefined) {
                localVarQueryParameter['base64_url'] = base64Url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HybridParsingApi - functional programming interface
 * @export
 */
export const HybridParsingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"
         * @summary 混合解析单一视频接口/Hybrid parsing single video endpoint
         * @param {string} url 
         * @param {boolean} [minimal] 是否返回最小数据/Whether to return minimal data
         * @param {boolean} [base64Url] 是否Base64编码提交URL/Base64 encoding URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hybridParsingSingleVideoApiV1HybridVideoDataGet(url: string, minimal?: boolean, base64Url?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await HybridParsingApiAxiosParamCreator(configuration).hybridParsingSingleVideoApiV1HybridVideoDataGet(url, minimal, base64Url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"
         * @summary 混合解析单一视频接口/Hybrid parsing single video endpoint
         * @param {string} url 
         * @param {boolean} [minimal] 是否返回最小数据/Whether to return minimal data
         * @param {boolean} [base64Url] 是否Base64编码提交URL/Base64 encoding URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hybridParsingSingleVideoApiV1HybridVideoDataGet_1(url: string, minimal?: boolean, base64Url?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await HybridParsingApiAxiosParamCreator(configuration).hybridParsingSingleVideoApiV1HybridVideoDataGet_1(url, minimal, base64Url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"
         * @summary 混合解析单一视频接口/Hybrid parsing single video endpoint
         * @param {string} url 
         * @param {boolean} [minimal] 是否返回最小数据/Whether to return minimal data
         * @param {boolean} [base64Url] 是否Base64编码提交URL/Base64 encoding URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hybridParsingSingleVideoApiV1HybridVideoDataGet_2(url: string, minimal?: boolean, base64Url?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await HybridParsingApiAxiosParamCreator(configuration).hybridParsingSingleVideoApiV1HybridVideoDataGet_2(url, minimal, base64Url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * HybridParsingApi - factory interface
 * @export
 */
export const HybridParsingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"
         * @summary 混合解析单一视频接口/Hybrid parsing single video endpoint
         * @param {string} url 
         * @param {boolean} [minimal] 是否返回最小数据/Whether to return minimal data
         * @param {boolean} [base64Url] 是否Base64编码提交URL/Base64 encoding URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hybridParsingSingleVideoApiV1HybridVideoDataGet(url: string, minimal?: boolean, base64Url?: boolean, options?: any): AxiosPromise<ResponseModel> {
            return HybridParsingApiFp(configuration).hybridParsingSingleVideoApiV1HybridVideoDataGet(url, minimal, base64Url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"
         * @summary 混合解析单一视频接口/Hybrid parsing single video endpoint
         * @param {string} url 
         * @param {boolean} [minimal] 是否返回最小数据/Whether to return minimal data
         * @param {boolean} [base64Url] 是否Base64编码提交URL/Base64 encoding URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hybridParsingSingleVideoApiV1HybridVideoDataGet_1(url: string, minimal?: boolean, base64Url?: boolean, options?: any): AxiosPromise<ResponseModel> {
            return HybridParsingApiFp(configuration).hybridParsingSingleVideoApiV1HybridVideoDataGet_1(url, minimal, base64Url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"
         * @summary 混合解析单一视频接口/Hybrid parsing single video endpoint
         * @param {string} url 
         * @param {boolean} [minimal] 是否返回最小数据/Whether to return minimal data
         * @param {boolean} [base64Url] 是否Base64编码提交URL/Base64 encoding URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hybridParsingSingleVideoApiV1HybridVideoDataGet_2(url: string, minimal?: boolean, base64Url?: boolean, options?: any): AxiosPromise<ResponseModel> {
            return HybridParsingApiFp(configuration).hybridParsingSingleVideoApiV1HybridVideoDataGet_2(url, minimal, base64Url, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HybridParsingApi - interface
 * @export
 * @interface HybridParsingApi
 */
export interface HybridParsingApiInterface {
    /**
     * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"
     * @summary 混合解析单一视频接口/Hybrid parsing single video endpoint
     * @param {string} url 
     * @param {boolean} [minimal] 是否返回最小数据/Whether to return minimal data
     * @param {boolean} [base64Url] 是否Base64编码提交URL/Base64 encoding URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HybridParsingApiInterface
     */
    hybridParsingSingleVideoApiV1HybridVideoDataGet(url: string, minimal?: boolean, base64Url?: boolean, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"
     * @summary 混合解析单一视频接口/Hybrid parsing single video endpoint
     * @param {string} url 
     * @param {boolean} [minimal] 是否返回最小数据/Whether to return minimal data
     * @param {boolean} [base64Url] 是否Base64编码提交URL/Base64 encoding URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HybridParsingApiInterface
     */
    hybridParsingSingleVideoApiV1HybridVideoDataGet_1(url: string, minimal?: boolean, base64Url?: boolean, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"
     * @summary 混合解析单一视频接口/Hybrid parsing single video endpoint
     * @param {string} url 
     * @param {boolean} [minimal] 是否返回最小数据/Whether to return minimal data
     * @param {boolean} [base64Url] 是否Base64编码提交URL/Base64 encoding URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HybridParsingApiInterface
     */
    hybridParsingSingleVideoApiV1HybridVideoDataGet_2(url: string, minimal?: boolean, base64Url?: boolean, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * HybridParsingApi - object-oriented interface
 * @export
 * @class HybridParsingApi
 * @extends {BaseAPI}
 */
export class HybridParsingApi extends BaseAPI implements HybridParsingApiInterface {
    /**
     * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"
     * @summary 混合解析单一视频接口/Hybrid parsing single video endpoint
     * @param {string} url 
     * @param {boolean} [minimal] 是否返回最小数据/Whether to return minimal data
     * @param {boolean} [base64Url] 是否Base64编码提交URL/Base64 encoding URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HybridParsingApi
     */
    public hybridParsingSingleVideoApiV1HybridVideoDataGet(url: string, minimal?: boolean, base64Url?: boolean, options?: any) {
        return HybridParsingApiFp(this.configuration).hybridParsingSingleVideoApiV1HybridVideoDataGet(url, minimal, base64Url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"
     * @summary 混合解析单一视频接口/Hybrid parsing single video endpoint
     * @param {string} url 
     * @param {boolean} [minimal] 是否返回最小数据/Whether to return minimal data
     * @param {boolean} [base64Url] 是否Base64编码提交URL/Base64 encoding URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HybridParsingApi
     */
    public hybridParsingSingleVideoApiV1HybridVideoDataGet_1(url: string, minimal?: boolean, base64Url?: boolean, options?: any) {
        return HybridParsingApiFp(this.configuration).hybridParsingSingleVideoApiV1HybridVideoDataGet_1(url, minimal, base64Url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 该接口用于解析抖音/TikTok单一视频的数据。 ### 参数: - `url`: 视频链接、分享链接、分享文本。 ### 返回: - `data`: 视频数据。  # [English] ### Purpose: - This endpoint is used to parse data of a single Douyin/TikTok video. ### Parameters: - `url`: Video link, share link, or share text. ### Returns: - `data`: Video data.  # [Example] url = \"https://v.douyin.com/L4FJNR3/\"
     * @summary 混合解析单一视频接口/Hybrid parsing single video endpoint
     * @param {string} url 
     * @param {boolean} [minimal] 是否返回最小数据/Whether to return minimal data
     * @param {boolean} [base64Url] 是否Base64编码提交URL/Base64 encoding URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HybridParsingApi
     */
    public hybridParsingSingleVideoApiV1HybridVideoDataGet_2(url: string, minimal?: boolean, base64Url?: boolean, options?: any) {
        return HybridParsingApiFp(this.configuration).hybridParsingSingleVideoApiV1HybridVideoDataGet_2(url, minimal, base64Url, options).then((request) => request(this.axios, this.basePath));
    }

}
