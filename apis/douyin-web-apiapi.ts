// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ABogusModel } from '../models';
// @ts-ignore
import { ChallengePostRequest } from '../models';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
// @ts-ignore
import { SearchChallengeRequest } from '../models';
// @ts-ignore
import { XBogusModel } from '../models';
/**
 * DouyinWebAPIApi - axios parameter creator
 * @export
 */
export const DouyinWebAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastRoomMessage：直播间消息     - WebcastLikeMessage：点赞消息     - WebcastMemberMessage：成员消息     - WebcastChatMessage：聊天消息     - WebcastGiftMessage：礼物消息     - WebcastSocialMessage：社交消息     - WebcastRoomUserSeqMessage：用户序列消息     - WebcastUpdateFanTicketMessage：更新粉丝消息     - WebcastCommonTextMessage：常规文本消息     - WebcastMatchAgainstScoreMessage：比赛得分消息     - WebcastFansclubMessage：粉丝俱乐部消息     - WebcastRanklistHourEntranceMessage：排行榜小时入口消息     - WebcastRoomStatsMessage：直播间统计消息     - WebcastLiveShoppingMessage: 直播购物消息     - WebcastLiveEcomGeneralMessage: 直播电商通用消息     - WebcastProductChangeMessage: 直播商品变更消息     - WebcastRoomStreamAdaptationMessage: 直播间流适配消息     - WebcastNotifyEffectMessage: 通知效果消息     - WebcastLightGiftMessage: 亮礼物消息     - WebcastProfitInteractionScoreMessage: 收益互动分消息     - WebcastRoomRankMessage: 直播间排行消息 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discounts. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastRoomMessage: Live room message     - WebcastLikeMessage: Like message     - WebcastMemberMessage: Member message     - WebcastChatMessage: Chat message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastUpdateFanTicketMessage: Update fan message     - WebcastCommonTextMessage: Common text message     - WebcastMatchAgainstScoreMessage: Match score message     - WebcastFansclubMessage: Fans club message     - WebcastRanklistHourEntranceMessage: Ranking list hour entrance message     - WebcastRoomStatsMessage: Live room statistics message     - WebcastLiveShoppingMessage: Live shopping message     - WebcastLiveEcomGeneralMessage: Live e-commerce general message     - WebcastProductChangeMessage: Live product change message     - WebcastRoomStreamAdaptationMessage: Live room stream adaptation message     - WebcastNotifyEffectMessage: Notification effect message     - WebcastLightGiftMessage: Light gift message     - WebcastProfitInteractionScoreMessage: Profit interaction score message     - WebcastRoomRankMessage: Live room ranking message ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
         * @summary 提取直播间弹幕/Extract live room danmaku
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {string} danmakuType 消息类型/Message type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet: async (liveRoomUrl: string, danmakuType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveRoomUrl' is not null or undefined
            if (liveRoomUrl === null || liveRoomUrl === undefined) {
                throw new RequiredError('liveRoomUrl','Required parameter liveRoomUrl was null or undefined when calling douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet.');
            }
            // verify required parameter 'danmakuType' is not null or undefined
            if (danmakuType === null || danmakuType === undefined) {
                throw new RequiredError('danmakuType','Required parameter danmakuType was null or undefined when calling douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet.');
            }
            const localVarPath = `/api/v1/douyin/web/douyin_live_room`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (liveRoomUrl !== undefined) {
                localVarQueryParameter['live_room_url'] = liveRoomUrl;
            }

            if (danmakuType !== undefined) {
                localVarQueryParameter['danmaku_type'] = danmakuType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastRoomMessage：直播间消息     - WebcastLikeMessage：点赞消息     - WebcastMemberMessage：成员消息     - WebcastChatMessage：聊天消息     - WebcastGiftMessage：礼物消息     - WebcastSocialMessage：社交消息     - WebcastRoomUserSeqMessage：用户序列消息     - WebcastUpdateFanTicketMessage：更新粉丝消息     - WebcastCommonTextMessage：常规文本消息     - WebcastMatchAgainstScoreMessage：比赛得分消息     - WebcastFansclubMessage：粉丝俱乐部消息     - WebcastRanklistHourEntranceMessage：排行榜小时入口消息     - WebcastRoomStatsMessage：直播间统计消息     - WebcastLiveShoppingMessage: 直播购物消息     - WebcastLiveEcomGeneralMessage: 直播电商通用消息     - WebcastProductChangeMessage: 直播商品变更消息     - WebcastRoomStreamAdaptationMessage: 直播间流适配消息     - WebcastNotifyEffectMessage: 通知效果消息     - WebcastLightGiftMessage: 亮礼物消息     - WebcastProfitInteractionScoreMessage: 收益互动分消息     - WebcastRoomRankMessage: 直播间排行消息 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discounts. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastRoomMessage: Live room message     - WebcastLikeMessage: Like message     - WebcastMemberMessage: Member message     - WebcastChatMessage: Chat message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastUpdateFanTicketMessage: Update fan message     - WebcastCommonTextMessage: Common text message     - WebcastMatchAgainstScoreMessage: Match score message     - WebcastFansclubMessage: Fans club message     - WebcastRanklistHourEntranceMessage: Ranking list hour entrance message     - WebcastRoomStatsMessage: Live room statistics message     - WebcastLiveShoppingMessage: Live shopping message     - WebcastLiveEcomGeneralMessage: Live e-commerce general message     - WebcastProductChangeMessage: Live product change message     - WebcastRoomStreamAdaptationMessage: Live room stream adaptation message     - WebcastNotifyEffectMessage: Notification effect message     - WebcastLightGiftMessage: Light gift message     - WebcastProfitInteractionScoreMessage: Profit interaction score message     - WebcastRoomRankMessage: Live room ranking message ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
         * @summary 提取直播间弹幕/Extract live room danmaku
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {string} danmakuType 消息类型/Message type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet_1: async (liveRoomUrl: string, danmakuType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'liveRoomUrl' is not null or undefined
            if (liveRoomUrl === null || liveRoomUrl === undefined) {
                throw new RequiredError('liveRoomUrl','Required parameter liveRoomUrl was null or undefined when calling douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet_1.');
            }
            // verify required parameter 'danmakuType' is not null or undefined
            if (danmakuType === null || danmakuType === undefined) {
                throw new RequiredError('danmakuType','Required parameter danmakuType was null or undefined when calling douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet_1.');
            }
            const localVarPath = `/api/v1/douyin/web/douyin_live_room`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (liveRoomUrl !== undefined) {
                localVarQueryParameter['live_room_url'] = liveRoomUrl;
            }

            if (danmakuType !== undefined) {
                localVarQueryParameter['danmaku_type'] = danmakuType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音热点分类 ### 参数: - billboard_type: 热点类型     - rise: 上升热点榜分类     - city: 同城热点榜分类     - total: 热点总榜分类 ### 返回: - 热点分类数据  # [English] ### Purpose: - Douyin Billboard Categories ### Parameters: - billboard_type: Hotspot type     - rise: Rising hot spot list category     - city: City hot spot list category     - total: Total hot spot list category ### Return: - Hotspot category data
         * @summary 抖音热点分类/Douyin Billboard Categories
         * @param {string} billboardType 热点类型/Hotspot type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet: async (billboardType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'billboardType' is not null or undefined
            if (billboardType === null || billboardType === undefined) {
                throw new RequiredError('billboardType','Required parameter billboardType was null or undefined when calling fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_billboard_categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (billboardType !== undefined) {
                localVarQueryParameter['billboard_type'] = billboardType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音热点分类 ### 参数: - billboard_type: 热点类型     - rise: 上升热点榜分类     - city: 同城热点榜分类     - total: 热点总榜分类 ### 返回: - 热点分类数据  # [English] ### Purpose: - Douyin Billboard Categories ### Parameters: - billboard_type: Hotspot type     - rise: Rising hot spot list category     - city: City hot spot list category     - total: Total hot spot list category ### Return: - Hotspot category data
         * @summary 抖音热点分类/Douyin Billboard Categories
         * @param {string} billboardType 热点类型/Hotspot type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet_2: async (billboardType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'billboardType' is not null or undefined
            if (billboardType === null || billboardType === undefined) {
                throw new RequiredError('billboardType','Required parameter billboardType was null or undefined when calling fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet_2.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_billboard_categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (billboardType !== undefined) {
                localVarQueryParameter['billboard_type'] = billboardType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音榜单相关视频 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_id: 分类ID ### 返回: - 相关视频数据  # [English] ### Purpose: - Douyin Billboard Related Videos ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_id: Category ID ### Return: - Related video data
         * @summary 抖音榜单相关视频/Douyin Billboard Related Videos
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceId 分类ID/Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet: async (page: number, pageSize: number, sentenceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet.');
            }
            // verify required parameter 'sentenceId' is not null or undefined
            if (sentenceId === null || sentenceId === undefined) {
                throw new RequiredError('sentenceId','Required parameter sentenceId was null or undefined when calling fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_billboard_related_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sentenceId !== undefined) {
                localVarQueryParameter['sentence_id'] = sentenceId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音榜单相关视频 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_id: 分类ID ### 返回: - 相关视频数据  # [English] ### Purpose: - Douyin Billboard Related Videos ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_id: Category ID ### Return: - Related video data
         * @summary 抖音榜单相关视频/Douyin Billboard Related Videos
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceId 分类ID/Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet_3: async (page: number, pageSize: number, sentenceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet_3.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet_3.');
            }
            // verify required parameter 'sentenceId' is not null or undefined
            if (sentenceId === null || sentenceId === undefined) {
                throw new RequiredError('sentenceId','Required parameter sentenceId was null or undefined when calling fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet_3.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_billboard_related_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sentenceId !== undefined) {
                localVarQueryParameter['sentence_id'] = sentenceId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 二次元作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 二次元作品数据  # [English] ### Purpose: - Cartoon Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Cartoon Video data
         * @summary 二次元作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet: async (count: number, refreshIndex?: number, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_cartoon_aweme`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (refreshIndex !== undefined) {
                localVarQueryParameter['refresh_index'] = refreshIndex;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 二次元作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 二次元作品数据  # [English] ### Purpose: - Cartoon Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Cartoon Video data
         * @summary 二次元作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet_4: async (count: number, refreshIndex?: number, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet_4.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_cartoon_aweme`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (refreshIndex !== undefined) {
                localVarQueryParameter['refresh_index'] = refreshIndex;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 美食作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 美食作品数据  # [English] ### Purpose: - Food Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Food Video data
         * @summary 美食作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet: async (count: number, refreshIndex?: number, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_food_aweme`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (refreshIndex !== undefined) {
                localVarQueryParameter['refresh_index'] = refreshIndex;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 美食作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 美食作品数据  # [English] ### Purpose: - Food Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Food Video data
         * @summary 美食作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet_5: async (count: number, refreshIndex?: number, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet_5.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_food_aweme`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (refreshIndex !== undefined) {
                localVarQueryParameter['refresh_index'] = refreshIndex;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 音乐作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 音乐作品数据  # [English] ### Purpose: - Music Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Music Video data
         * @summary 音乐作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet: async (count: number, refreshIndex?: number, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_music_aweme`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (refreshIndex !== undefined) {
                localVarQueryParameter['refresh_index'] = refreshIndex;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 音乐作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 音乐作品数据  # [English] ### Purpose: - Music Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Music Video data
         * @summary 音乐作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet_6: async (count: number, refreshIndex?: number, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet_6.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_music_aweme`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (refreshIndex !== undefined) {
                localVarQueryParameter['refresh_index'] = refreshIndex;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 话题作品 ### 参数: - challenge_id: 话题id - sort_type: 排序类型     - 0:综合排序 1:最热排序 2:最新排序 - cursor: 游标 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题作品  # [English] ### Purpose: - Challenge Posts ### Parameters: - challenge_id: Challenge id - sort_type: Sort type     - 0: Comprehensive sorting 1: Hottest sorting 2: Latest sorting - cursor: Cursor - count: Number - cookie: User provided Cookie, used to get more data ### Return: - Challenge Posts  # [示例/Example] challenge_id = \"1750525814851611\" sort_type = 0 offset = 0 cursor = 0 count = 20
         * @summary 话题作品/Challenge Posts
         * @param {ChallengePostRequest} [challengePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchChallengePostsApiV1DouyinWebFetchChallengePostsPost: async (challengePostRequest?: ChallengePostRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/fetch_challenge_posts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof challengePostRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(challengePostRequest !== undefined ? challengePostRequest : {}) : (challengePostRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 话题作品 ### 参数: - challenge_id: 话题id - sort_type: 排序类型     - 0:综合排序 1:最热排序 2:最新排序 - cursor: 游标 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题作品  # [English] ### Purpose: - Challenge Posts ### Parameters: - challenge_id: Challenge id - sort_type: Sort type     - 0: Comprehensive sorting 1: Hottest sorting 2: Latest sorting - cursor: Cursor - count: Number - cookie: User provided Cookie, used to get more data ### Return: - Challenge Posts  # [示例/Example] challenge_id = \"1750525814851611\" sort_type = 0 offset = 0 cursor = 0 count = 20
         * @summary 话题作品/Challenge Posts
         * @param {ChallengePostRequest} [challengePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchChallengePostsApiV1DouyinWebFetchChallengePostsPost_7: async (challengePostRequest?: ChallengePostRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/fetch_challenge_posts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof challengePostRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(challengePostRequest !== undefined ? challengePostRequest : {}) : (challengePostRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音同城热点榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 - city_code: 城市代码，默认为110000(北京)     - 110000: 北京     - 更多城市代码请参考城市列表接口     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin City Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change - city_code: City code, default is 110000     - 110000: Beijing     - For more city codes, please refer to the city list interface     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### Return: - Hotspot list data
         * @summary 抖音同城热点榜单/Douyin City Hot List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceTag 分类标签/Category tag
         * @param {string} order 排序方式/Sorting method
         * @param {string} cityCode 城市代码/City code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCityHotListApiV1DouyinWebFetchCityHotListGet: async (page: number, pageSize: number, sentenceTag: string, order: string, cityCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchCityHotListApiV1DouyinWebFetchCityHotListGet.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchCityHotListApiV1DouyinWebFetchCityHotListGet.');
            }
            // verify required parameter 'sentenceTag' is not null or undefined
            if (sentenceTag === null || sentenceTag === undefined) {
                throw new RequiredError('sentenceTag','Required parameter sentenceTag was null or undefined when calling fetchCityHotListApiV1DouyinWebFetchCityHotListGet.');
            }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order','Required parameter order was null or undefined when calling fetchCityHotListApiV1DouyinWebFetchCityHotListGet.');
            }
            // verify required parameter 'cityCode' is not null or undefined
            if (cityCode === null || cityCode === undefined) {
                throw new RequiredError('cityCode','Required parameter cityCode was null or undefined when calling fetchCityHotListApiV1DouyinWebFetchCityHotListGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_city_hot_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sentenceTag !== undefined) {
                localVarQueryParameter['sentence_tag'] = sentenceTag;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (cityCode !== undefined) {
                localVarQueryParameter['city_code'] = cityCode;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音同城热点榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 - city_code: 城市代码，默认为110000(北京)     - 110000: 北京     - 更多城市代码请参考城市列表接口     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin City Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change - city_code: City code, default is 110000     - 110000: Beijing     - For more city codes, please refer to the city list interface     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### Return: - Hotspot list data
         * @summary 抖音同城热点榜单/Douyin City Hot List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceTag 分类标签/Category tag
         * @param {string} order 排序方式/Sorting method
         * @param {string} cityCode 城市代码/City code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCityHotListApiV1DouyinWebFetchCityHotListGet_8: async (page: number, pageSize: number, sentenceTag: string, order: string, cityCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchCityHotListApiV1DouyinWebFetchCityHotListGet_8.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchCityHotListApiV1DouyinWebFetchCityHotListGet_8.');
            }
            // verify required parameter 'sentenceTag' is not null or undefined
            if (sentenceTag === null || sentenceTag === undefined) {
                throw new RequiredError('sentenceTag','Required parameter sentenceTag was null or undefined when calling fetchCityHotListApiV1DouyinWebFetchCityHotListGet_8.');
            }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order','Required parameter order was null or undefined when calling fetchCityHotListApiV1DouyinWebFetchCityHotListGet_8.');
            }
            // verify required parameter 'cityCode' is not null or undefined
            if (cityCode === null || cityCode === undefined) {
                throw new RequiredError('cityCode','Required parameter cityCode was null or undefined when calling fetchCityHotListApiV1DouyinWebFetchCityHotListGet_8.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_city_hot_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sentenceTag !== undefined) {
                localVarQueryParameter['sentence_tag'] = sentenceTag;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (cityCode !== undefined) {
                localVarQueryParameter['city_code'] = cityCode;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音城市列表以及城市ID ### 返回: - 城市列表数据  # [English] ### Purpose: - Douyin City List and City ID ### Return: - City list data
         * @summary 抖音城市列表/Douyin City List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCityListApiV1DouyinWebFetchCityListGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/fetch_city_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音城市列表以及城市ID ### 返回: - 城市列表数据  # [English] ### Purpose: - Douyin City List and City ID ### Return: - City list data
         * @summary 抖音城市列表/Douyin City List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCityListApiV1DouyinWebFetchCityListGet_9: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/fetch_city_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音Web的游客Cookie - 可以用于爬取抖音Web的数据，如用户作品、合辑作品等。 - 可以固定身份避免部分接口重复数据。 - 请注意：游客Cookie无法爬取所有数据，有一定的限制。 - 可以配合开源项目使用此接口实现抖音Web的数据爬取。 ### 参数: - user_agent: 用户浏览器代理 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get the guest Cookie of Douyin Web - Can be used to crawl data of Douyin Web, such as user videos, mix videos, etc. - Can fix identity to avoid duplicate data for some interfaces. - Please note: Guest Cookie cannot crawl all data, there are certain restrictions. - Can be used with open source projects to implement data crawling of Douyin Web using this interface. ### Parameters: - user_agent: User browser agent ### Return: - Guest Cookie  # [示例/Example] user_agent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\"
         * @summary 获取抖音Web的游客Cookie/Get the guest Cookie of Douyin Web
         * @param {string} userAgent 用户浏览器代理/User browser agent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet: async (userAgent: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userAgent' is not null or undefined
            if (userAgent === null || userAgent === undefined) {
                throw new RequiredError('userAgent','Required parameter userAgent was null or undefined when calling fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_douyin_web_guest_cookie`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userAgent !== undefined) {
                localVarQueryParameter['user_agent'] = userAgent;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音Web的游客Cookie - 可以用于爬取抖音Web的数据，如用户作品、合辑作品等。 - 可以固定身份避免部分接口重复数据。 - 请注意：游客Cookie无法爬取所有数据，有一定的限制。 - 可以配合开源项目使用此接口实现抖音Web的数据爬取。 ### 参数: - user_agent: 用户浏览器代理 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get the guest Cookie of Douyin Web - Can be used to crawl data of Douyin Web, such as user videos, mix videos, etc. - Can fix identity to avoid duplicate data for some interfaces. - Please note: Guest Cookie cannot crawl all data, there are certain restrictions. - Can be used with open source projects to implement data crawling of Douyin Web using this interface. ### Parameters: - user_agent: User browser agent ### Return: - Guest Cookie  # [示例/Example] user_agent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\"
         * @summary 获取抖音Web的游客Cookie/Get the guest Cookie of Douyin Web
         * @param {string} userAgent 用户浏览器代理/User browser agent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet_10: async (userAgent: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userAgent' is not null or undefined
            if (userAgent === null || userAgent === undefined) {
                throw new RequiredError('userAgent','Required parameter userAgent was null or undefined when calling fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet_10.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_douyin_web_guest_cookie`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userAgent !== undefined) {
                localVarQueryParameter['user_agent'] = userAgent;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 游戏作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Game Video data
         * @summary 游戏作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet: async (count: number, refreshIndex?: number, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_game_aweme`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (refreshIndex !== undefined) {
                localVarQueryParameter['refresh_index'] = refreshIndex;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 游戏作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Game Video data
         * @summary 游戏作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet_11: async (count: number, refreshIndex?: number, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet_11.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_game_aweme`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (refreshIndex !== undefined) {
                localVarQueryParameter['refresh_index'] = refreshIndex;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 -search_range: 0:不限 1:最近看过 2:还未看过 3:关注的人 -content_type: 0:不限 1:视频 2:图集 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - search_range: 0: Unlimited 1: Recently viewed 2: Not yet viewed 3: Followed - content_type: 0: Unlimited 1: Video 2: Album - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"
         * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {string} [searchRange] 搜索范围/Search range
         * @param {string} [contentType] 内容类型/Content type
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet: async (keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, searchRange?: string, contentType?: string, searchId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_general_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }

            if (filterDuration !== undefined) {
                localVarQueryParameter['filter_duration'] = filterDuration;
            }

            if (searchRange !== undefined) {
                localVarQueryParameter['search_range'] = searchRange;
            }

            if (contentType !== undefined) {
                localVarQueryParameter['content_type'] = contentType;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 -search_range: 0:不限 1:最近看过 2:还未看过 3:关注的人 -content_type: 0:不限 1:视频 2:图集 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - search_range: 0: Unlimited 1: Recently viewed 2: Not yet viewed 3: Followed - content_type: 0: Unlimited 1: Video 2: Album - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"
         * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {string} [searchRange] 搜索范围/Search range
         * @param {string} [contentType] 内容类型/Content type
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet_12: async (keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, searchRange?: string, contentType?: string, searchId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet_12.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_general_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }

            if (filterDuration !== undefined) {
                localVarQueryParameter['filter_duration'] = filterDuration;
            }

            if (searchRange !== undefined) {
                localVarQueryParameter['search_range'] = searchRange;
            }

            if (contentType !== undefined) {
                localVarQueryParameter['content_type'] = contentType;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取首页推荐数据 ### 参数: - count: 数量，默认为10，建议保持不变。 - refresh_index: 翻页索引，默认为0，然后每次增加1用于翻页。 ### 返回: - Feed数据  # [English] ### Purpose: - Get home feed data ### Parameters: - count: Number, default is 10, it is recommended to keep it unchanged. - refresh_index: Paging index, default is 0, then increase by 1 each time for paging. ### Return: - Feed data  # [示例/Example] count = 10 refresh_index = 0
         * @summary 获取首页推荐数据/Get home feed data
         * @param {number} [count] 数量/Number
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeFeedApiV1DouyinWebFetchHomeFeedGet: async (count?: number, refreshIndex?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/fetch_home_feed`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (refreshIndex !== undefined) {
                localVarQueryParameter['refresh_index'] = refreshIndex;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取首页推荐数据 ### 参数: - count: 数量，默认为10，建议保持不变。 - refresh_index: 翻页索引，默认为0，然后每次增加1用于翻页。 ### 返回: - Feed数据  # [English] ### Purpose: - Get home feed data ### Parameters: - count: Number, default is 10, it is recommended to keep it unchanged. - refresh_index: Paging index, default is 0, then increase by 1 each time for paging. ### Return: - Feed data  # [示例/Example] count = 10 refresh_index = 0
         * @summary 获取首页推荐数据/Get home feed data
         * @param {number} [count] 数量/Number
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeFeedApiV1DouyinWebFetchHomeFeedGet_13: async (count?: number, refreshIndex?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/fetch_home_feed`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (refreshIndex !== undefined) {
                localVarQueryParameter['refresh_index'] = refreshIndex;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音热点总榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty ### Return: - Hotspot list data
         * @summary 抖音热点总榜单/Douyin Hot List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceTag 分类标签/Category tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotListApiV1DouyinWebFetchHotListGet: async (page: number, pageSize: number, sentenceTag: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchHotListApiV1DouyinWebFetchHotListGet.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchHotListApiV1DouyinWebFetchHotListGet.');
            }
            // verify required parameter 'sentenceTag' is not null or undefined
            if (sentenceTag === null || sentenceTag === undefined) {
                throw new RequiredError('sentenceTag','Required parameter sentenceTag was null or undefined when calling fetchHotListApiV1DouyinWebFetchHotListGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_hot_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sentenceTag !== undefined) {
                localVarQueryParameter['sentence_tag'] = sentenceTag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音热点总榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty ### Return: - Hotspot list data
         * @summary 抖音热点总榜单/Douyin Hot List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceTag 分类标签/Category tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotListApiV1DouyinWebFetchHotListGet_14: async (page: number, pageSize: number, sentenceTag: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchHotListApiV1DouyinWebFetchHotListGet_14.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchHotListApiV1DouyinWebFetchHotListGet_14.');
            }
            // verify required parameter 'sentenceTag' is not null or undefined
            if (sentenceTag === null || sentenceTag === undefined) {
                throw new RequiredError('sentenceTag','Required parameter sentenceTag was null or undefined when calling fetchHotListApiV1DouyinWebFetchHotListGet_14.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_hot_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sentenceTag !== undefined) {
                localVarQueryParameter['sentence_tag'] = sentenceTag;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音热榜数据 ### 返回: - 热榜数据  # [English] ### Purpose: - Get Douyin hot search results ### Return: - Hot search results
         * @summary 获取抖音热榜数据/Get Douyin hot search results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/fetch_hot_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音热榜数据 ### 返回: - 热榜数据  # [English] ### Purpose: - Get Douyin hot search results ### Return: - Hot search results
         * @summary 获取抖音热榜数据/Get Douyin hot search results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet_15: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/fetch_hot_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 知识作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Knowledge Video data
         * @summary 知识作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet: async (count: number, refreshIndex?: number, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_knowledge_aweme`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (refreshIndex !== undefined) {
                localVarQueryParameter['refresh_index'] = refreshIndex;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 知识作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Knowledge Video data
         * @summary 知识作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet_16: async (count: number, refreshIndex?: number, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet_16.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_knowledge_aweme`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (refreshIndex !== undefined) {
                localVarQueryParameter['refresh_index'] = refreshIndex;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播间送礼用户排行榜 ### 参数: - room_id: 直播间room_id - rank_type: 排行类型，默认为30不用修改。 ### 返回: - 排行榜数据  # [English] ### Purpose: - Get live room gift user ranking ### Parameters: - room_id: Room room_id - rank_type: Leaderboard type, default is 30, no need to modify. ### Return: - Leaderboard data  # [示例/Example] room_id = \"7356585666190461731\" rank_type = 30
         * @summary 获取直播间送礼用户排行榜/Get live room gift user ranking
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {number} [rankType] 排行类型/Leaderboard type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet: async (roomId: string, rankType?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_live_gift_ranking`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }

            if (rankType !== undefined) {
                localVarQueryParameter['rank_type'] = rankType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播间送礼用户排行榜 ### 参数: - room_id: 直播间room_id - rank_type: 排行类型，默认为30不用修改。 ### 返回: - 排行榜数据  # [English] ### Purpose: - Get live room gift user ranking ### Parameters: - room_id: Room room_id - rank_type: Leaderboard type, default is 30, no need to modify. ### Return: - Leaderboard data  # [示例/Example] room_id = \"7356585666190461731\" rank_type = 30
         * @summary 获取直播间送礼用户排行榜/Get live room gift user ranking
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {number} [rankType] 排行类型/Leaderboard type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet_17: async (roomId: string, rankType?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet_17.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_live_gift_ranking`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }

            if (rankType !== undefined) {
                localVarQueryParameter['rank_type'] = rankType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音直播间商品信息 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie，如获取失败请手动过一次验证码) - room_id: 直播间room_id - author_id: 作者id - limit: 数量 ### 返回: - 商品信息  # [English] ### Purpose: - Douyin live room product information ### Parameters: - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie, if the acquisition fails, please manually pass the captcha code once) - room_id: Room room_id - author_id: Author id - limit: Number ### Return: - Product information  # [示例/Example] cookie = \"YOUR_COOKIE\" room_id = \"7356742011975715619\" author_id = \"2207432981615527\" limit = 20
         * @summary 抖音直播间商品信息/Douyin live room product information
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {string} authorId 作者id/Author id
         * @param {number} [limit] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet: async (roomId: string, authorId: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new RequiredError('authorId','Required parameter authorId was null or undefined when calling fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_live_room_product_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }

            if (authorId !== undefined) {
                localVarQueryParameter['author_id'] = authorId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音直播间商品信息 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie，如获取失败请手动过一次验证码) - room_id: 直播间room_id - author_id: 作者id - limit: 数量 ### 返回: - 商品信息  # [English] ### Purpose: - Douyin live room product information ### Parameters: - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie, if the acquisition fails, please manually pass the captcha code once) - room_id: Room room_id - author_id: Author id - limit: Number ### Return: - Product information  # [示例/Example] cookie = \"YOUR_COOKIE\" room_id = \"7356742011975715619\" author_id = \"2207432981615527\" limit = 20
         * @summary 抖音直播间商品信息/Douyin live room product information
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {string} authorId 作者id/Author id
         * @param {number} [limit] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_18: async (roomId: string, authorId: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_18.');
            }
            // verify required parameter 'authorId' is not null or undefined
            if (authorId === null || authorId === undefined) {
                throw new RequiredError('authorId','Required parameter authorId was null or undefined when calling fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_18.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_live_room_product_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }

            if (authorId !== undefined) {
                localVarQueryParameter['author_id'] = authorId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果/Get live search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet: async (keyword: string, offset?: number, count?: number, searchId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_live_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果/Get live search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet_19: async (keyword: string, offset?: number, count?: number, searchId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet_19.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_live_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持50个视频，此接口收费固定价格为0.001$ * 50 = 0.05$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持50个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 50 videos at a time, this interface charges a fixed price of 0.001$ * 50 = 0.05$ each time. ### Parameters: - aweme_ids: List of video ids, up to 50 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\"]
         * @summary 批量获取视频信息/Batch Get Video Information
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMultiVideoApiV1DouyinWebFetchMultiVideoPost: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/fetch_multi_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持50个视频，此接口收费固定价格为0.001$ * 50 = 0.05$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持50个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 50 videos at a time, this interface charges a fixed price of 0.001$ * 50 = 0.05$ each time. ### Parameters: - aweme_ids: List of video ids, up to 50 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\"]
         * @summary 批量获取视频信息/Batch Get Video Information
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMultiVideoApiV1DouyinWebFetchMultiVideoPost_20: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/fetch_multi_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法保障稳定性，如果有爬取单一视频需求，请使用下面的接口。 - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot guarantee stability. If you need to crawl a single video, please use the following interface. - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据，此接口即将废弃，请使用APP接口/Get single video data, this endpoint will be deprecated soon, please use APP endpoint
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinWebFetchOneVideoGet: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchOneVideoApiV1DouyinWebFetchOneVideoGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_one_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法保障稳定性，如果有爬取单一视频需求，请使用下面的接口。 - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot guarantee stability. If you need to crawl a single video, please use the following interface. - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据，此接口即将废弃，请使用APP接口/Get single video data, this endpoint will be deprecated soon, please use APP endpoint
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinWebFetchOneVideoGet_21: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchOneVideoApiV1DouyinWebFetchOneVideoGet_21.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_one_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据 V2/Get single video data V2
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_one_video_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据 V2/Get single video data V2
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get_22: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get_22.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_one_video_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet: async (shareUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareUrl' is not null or undefined
            if (shareUrl === null || shareUrl === undefined) {
                throw new RequiredError('shareUrl','Required parameter shareUrl was null or undefined when calling fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_one_video_by_share_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareUrl !== undefined) {
                localVarQueryParameter['share_url'] = shareUrl;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet_23: async (shareUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareUrl' is not null or undefined
            if (shareUrl === null || shareUrl === undefined) {
                throw new RequiredError('shareUrl','Required parameter shareUrl was null or undefined when calling fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet_23.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_one_video_by_share_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareUrl !== undefined) {
                localVarQueryParameter['share_url'] = shareUrl;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品视频弹幕数据 ### 参数: - item_id: 作品id - duration: 视频总时长 - end_time: 结束时间 - start_time: 开始时间 ### 返回: - 视频弹幕数据  # [English] ### Purpose: - Get single video danmaku data ### Parameters: - item_id: Video id - duration: Video total duration - end_time: End time - start_time: Start time ### Return: - Video danmaku data  # [示例/Example] item_id = \"7355433624046472498\" duration = 15134 end_time = 15133 start_time = 0
         * @summary 获取单个作品视频弹幕数据/Get single video danmaku data
         * @param {string} itemId 作品id/Video id
         * @param {number} duration 视频总时长/Video total duration
         * @param {number} endTime 结束时间/End time
         * @param {number} startTime 开始时间/Start time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet: async (itemId: string, duration: number, endTime: number, startTime: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet.');
            }
            // verify required parameter 'duration' is not null or undefined
            if (duration === null || duration === undefined) {
                throw new RequiredError('duration','Required parameter duration was null or undefined when calling fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet.');
            }
            // verify required parameter 'endTime' is not null or undefined
            if (endTime === null || endTime === undefined) {
                throw new RequiredError('endTime','Required parameter endTime was null or undefined when calling fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet.');
            }
            // verify required parameter 'startTime' is not null or undefined
            if (startTime === null || startTime === undefined) {
                throw new RequiredError('startTime','Required parameter startTime was null or undefined when calling fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_one_video_danmaku`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品视频弹幕数据 ### 参数: - item_id: 作品id - duration: 视频总时长 - end_time: 结束时间 - start_time: 开始时间 ### 返回: - 视频弹幕数据  # [English] ### Purpose: - Get single video danmaku data ### Parameters: - item_id: Video id - duration: Video total duration - end_time: End time - start_time: Start time ### Return: - Video danmaku data  # [示例/Example] item_id = \"7355433624046472498\" duration = 15134 end_time = 15133 start_time = 0
         * @summary 获取单个作品视频弹幕数据/Get single video danmaku data
         * @param {string} itemId 作品id/Video id
         * @param {number} duration 视频总时长/Video total duration
         * @param {number} endTime 结束时间/End time
         * @param {number} startTime 开始时间/Start time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet_24: async (itemId: string, duration: number, endTime: number, startTime: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet_24.');
            }
            // verify required parameter 'duration' is not null or undefined
            if (duration === null || duration === undefined) {
                throw new RequiredError('duration','Required parameter duration was null or undefined when calling fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet_24.');
            }
            // verify required parameter 'endTime' is not null or undefined
            if (endTime === null || endTime === undefined) {
                throw new RequiredError('endTime','Required parameter endTime was null or undefined when calling fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet_24.');
            }
            // verify required parameter 'startTime' is not null or undefined
            if (startTime === null || startTime === undefined) {
                throw new RequiredError('startTime','Required parameter startTime was null or undefined when calling fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet_24.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_one_video_danmaku`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音实时挑战榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 ### 返回: - 挑战榜数据  # [English] ### Purpose: - Douyin Real-time Challenge List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 ### Return: - Challenge list data
         * @summary 抖音实时挑战榜单/Douyin Real-time Challenge List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet: async (page: number, pageSize: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_real_time_challenge_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音实时挑战榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 ### 返回: - 挑战榜数据  # [English] ### Purpose: - Douyin Real-time Challenge List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 ### Return: - Challenge list data
         * @summary 抖音实时挑战榜单/Douyin Real-time Challenge List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet_25: async (page: number, pageSize: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet_25.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet_25.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_real_time_challenge_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音实时上升热点榜 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Real-time Rising Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change ### Return: - Hotspot list data
         * @summary 抖音实时上升热点榜/Douyin Real-time Rising Hot List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceTag 分类标签/Category tag
         * @param {string} order 排序方式/Sorting method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet: async (page: number, pageSize: number, sentenceTag: string, order: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet.');
            }
            // verify required parameter 'sentenceTag' is not null or undefined
            if (sentenceTag === null || sentenceTag === undefined) {
                throw new RequiredError('sentenceTag','Required parameter sentenceTag was null or undefined when calling fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet.');
            }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order','Required parameter order was null or undefined when calling fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_real_time_rising_hot_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sentenceTag !== undefined) {
                localVarQueryParameter['sentence_tag'] = sentenceTag;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音实时上升热点榜 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Real-time Rising Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change ### Return: - Hotspot list data
         * @summary 抖音实时上升热点榜/Douyin Real-time Rising Hot List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceTag 分类标签/Category tag
         * @param {string} order 排序方式/Sorting method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet_26: async (page: number, pageSize: number, sentenceTag: string, order: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet_26.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet_26.');
            }
            // verify required parameter 'sentenceTag' is not null or undefined
            if (sentenceTag === null || sentenceTag === undefined) {
                throw new RequiredError('sentenceTag','Required parameter sentenceTag was null or undefined when calling fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet_26.');
            }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order','Required parameter order was null or undefined when calling fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet_26.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_real_time_rising_hot_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sentenceTag !== undefined) {
                localVarQueryParameter['sentence_tag'] = sentenceTag;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取相关作品推荐数据 ### 参数: - aweme_id: 作品id - refresh_index: 翻页索引，默认为1，然后每次增加1用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 作品数据  # [English] ### Purpose: - Get related posts recommendation data ### Parameters: - aweme_id: Video id - refresh_index: Paging index, default is 1, then increase by 1 each time for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Video data  # [示例/Example] aweme_id = \"7393365489105358132\" refresh_index = 1 count = 20
         * @summary 获取相关作品推荐数据/Get related posts recommendation data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet: async (awemeId: string, refreshIndex?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_related_posts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (refreshIndex !== undefined) {
                localVarQueryParameter['refresh_index'] = refreshIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取相关作品推荐数据 ### 参数: - aweme_id: 作品id - refresh_index: 翻页索引，默认为1，然后每次增加1用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 作品数据  # [English] ### Purpose: - Get related posts recommendation data ### Parameters: - aweme_id: Video id - refresh_index: Paging index, default is 1, then increase by 1 each time for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Video data  # [示例/Example] aweme_id = \"7393365489105358132\" refresh_index = 1 count = 20
         * @summary 获取相关作品推荐数据/Get related posts recommendation data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet_27: async (awemeId: string, refreshIndex?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet_27.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_related_posts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (refreshIndex !== undefined) {
                localVarQueryParameter['refresh_index'] = refreshIndex;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索话题，此接口不带Cookie请求时只能获取到前30条数据，建议自行提供Cookie获取更多数据。 - Cookie获取方式：打开网页抖音，登录后，按F12打开开发者工具，点击Network，刷新页面，找到第一个请求，复制Cookie。 ### 参数: - keyword: 关键词 - cursor: 偏移量 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Search Challenge, when this interface is requested without Cookie, only the first 30 data can be obtained, it is recommended to provide Cookie to get more data. - Cookie acquisition method: Open the Douyin webpage, log in, press F12 to open the developer tool, click Network, refresh the page, find the first request, copy the Cookie. ### Parameters: - keyword: Keyword - cursor: Offset - count: Number - cookie: User provided Cookie, used to get more data. ### Return: - Challenge search results  # [示例/Example] keyword = \"动漫\" cursor = 0 count = 20
         * @summary 搜索话题/Search Challenge
         * @param {SearchChallengeRequest} [searchChallengeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost: async (searchChallengeRequest?: SearchChallengeRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/fetch_search_challenge`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof searchChallengeRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(searchChallengeRequest !== undefined ? searchChallengeRequest : {}) : (searchChallengeRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索话题，此接口不带Cookie请求时只能获取到前30条数据，建议自行提供Cookie获取更多数据。 - Cookie获取方式：打开网页抖音，登录后，按F12打开开发者工具，点击Network，刷新页面，找到第一个请求，复制Cookie。 ### 参数: - keyword: 关键词 - cursor: 偏移量 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Search Challenge, when this interface is requested without Cookie, only the first 30 data can be obtained, it is recommended to provide Cookie to get more data. - Cookie acquisition method: Open the Douyin webpage, log in, press F12 to open the developer tool, click Network, refresh the page, find the first request, copy the Cookie. ### Parameters: - keyword: Keyword - cursor: Offset - count: Number - cookie: User provided Cookie, used to get more data. ### Return: - Challenge search results  # [示例/Example] keyword = \"动漫\" cursor = 0 count = 20
         * @summary 搜索话题/Search Challenge
         * @param {SearchChallengeRequest} [searchChallengeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost_28: async (searchChallengeRequest?: SearchChallengeRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/fetch_search_challenge`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof searchChallengeRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(searchChallengeRequest !== undefined ? searchChallengeRequest : {}) : (searchChallengeRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 短剧作品 ### 参数: - offset: 页码，默认为0 - count: 每页数量，默认为16 - content_type: 子类型，默认为0     - 0: 热榜     - 101: 甜宠     - 102: 搞笑     - 104: 正能量     - 105: 成长     - 106: 悬疑     - 109: 家庭     - 110: 都市     - 112: 奇幻     - 113: 玄幻     - 114: 职场     - 115: 青春     - 116: 古装     - 117: 动作     - 119: 逆袭     - 124: 其他 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie ### 返回: - 短剧作品数据  # [English] ### Purpose: - Series Video ### Parameters: - offset: Page number, default is 0 - count: Number per page, default is 16 - content_type: Subtype, default is 0     - 0: Hot list     - 101: Sweet pet     - 102: Funny     - 104: Positive energy     - 105: Growth     - 106: Suspense     - 109: Family     - 110: Urban     - 112: Fantasy     - 113: Fantasy     - 114: Workplace     - 115: Youth     - 116: Ancient costume     - 117: Action     - 119: Counterattack     - 124: Other - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Series Video data
         * @summary 短剧作品/Series Video
         * @param {number} offset 页码/Page number
         * @param {number} count 每页数量/Number per page
         * @param {number} contentType 短剧类型/Subtype
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet: async (offset: number, count: number, contentType: number, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'offset' is not null or undefined
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet.');
            }
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_series_aweme`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (contentType !== undefined) {
                localVarQueryParameter['content_type'] = contentType;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 短剧作品 ### 参数: - offset: 页码，默认为0 - count: 每页数量，默认为16 - content_type: 子类型，默认为0     - 0: 热榜     - 101: 甜宠     - 102: 搞笑     - 104: 正能量     - 105: 成长     - 106: 悬疑     - 109: 家庭     - 110: 都市     - 112: 奇幻     - 113: 玄幻     - 114: 职场     - 115: 青春     - 116: 古装     - 117: 动作     - 119: 逆袭     - 124: 其他 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie ### 返回: - 短剧作品数据  # [English] ### Purpose: - Series Video ### Parameters: - offset: Page number, default is 0 - count: Number per page, default is 16 - content_type: Subtype, default is 0     - 0: Hot list     - 101: Sweet pet     - 102: Funny     - 104: Positive energy     - 105: Growth     - 106: Suspense     - 109: Family     - 110: Urban     - 112: Fantasy     - 113: Fantasy     - 114: Workplace     - 115: Youth     - 116: Ancient costume     - 117: Action     - 119: Counterattack     - 124: Other - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Series Video data
         * @summary 短剧作品/Series Video
         * @param {number} offset 页码/Page number
         * @param {number} count 每页数量/Number per page
         * @param {number} contentType 短剧类型/Subtype
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_29: async (offset: number, count: number, contentType: number, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'offset' is not null or undefined
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_29.');
            }
            // verify required parameter 'count' is not null or undefined
            if (count === null || count === undefined) {
                throw new RequiredError('count','Required parameter count was null or undefined when calling fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_29.');
            }
            // verify required parameter 'contentType' is not null or undefined
            if (contentType === null || contentType === undefined) {
                throw new RequiredError('contentType','Required parameter contentType was null or undefined when calling fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_29.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_series_aweme`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (contentType !== undefined) {
                localVarQueryParameter['content_type'] = contentType;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection video data ### Parameters: - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie) - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] cookie = \"YOUR_COOKIE\" max_cursor = 0 counts = 20
         * @summary 获取用户收藏作品数据/Get user collection video data
         * @param {string} cookie 用户网页版抖音Cookie/Your web version of Douyin Cookie
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet: async (cookie: string, maxCursor?: number, counts?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cookie' is not null or undefined
            if (cookie === null || cookie === undefined) {
                throw new RequiredError('cookie','Required parameter cookie was null or undefined when calling fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_collection_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (counts !== undefined) {
                localVarQueryParameter['counts'] = counts;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection video data ### Parameters: - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie) - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] cookie = \"YOUR_COOKIE\" max_cursor = 0 counts = 20
         * @summary 获取用户收藏作品数据/Get user collection video data
         * @param {string} cookie 用户网页版抖音Cookie/Your web version of Douyin Cookie
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet_30: async (cookie: string, maxCursor?: number, counts?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cookie' is not null or undefined
            if (cookie === null || cookie === undefined) {
                throw new RequiredError('cookie','Required parameter cookie was null or undefined when calling fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet_30.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_collection_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (counts !== undefined) {
                localVarQueryParameter['counts'] = counts;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户收藏夹数据 ### 参数: - collects_id: 收藏夹id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection data ### Parameters: - collects_id: Collection id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] collects_id = \"\" max_cursor = 0 counts = 20
         * @summary 获取用户收藏夹数据/Get user collection data
         * @param {string} collectsId 收藏夹id/Collection id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet: async (collectsId: string, maxCursor?: number, counts?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectsId' is not null or undefined
            if (collectsId === null || collectsId === undefined) {
                throw new RequiredError('collectsId','Required parameter collectsId was null or undefined when calling fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_collects_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (collectsId !== undefined) {
                localVarQueryParameter['collects_id'] = collectsId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (counts !== undefined) {
                localVarQueryParameter['counts'] = counts;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户收藏夹数据 ### 参数: - collects_id: 收藏夹id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection data ### Parameters: - collects_id: Collection id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] collects_id = \"\" max_cursor = 0 counts = 20
         * @summary 获取用户收藏夹数据/Get user collection data
         * @param {string} collectsId 收藏夹id/Collection id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet_31: async (collectsId: string, maxCursor?: number, counts?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectsId' is not null or undefined
            if (collectsId === null || collectsId === undefined) {
                throw new RequiredError('collectsId','Required parameter collectsId was null or undefined when calling fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet_31.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_collects_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (collectsId !== undefined) {
                localVarQueryParameter['collects_id'] = collectsId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (counts !== undefined) {
                localVarQueryParameter['counts'] = counts;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音用户粉丝兴趣 ### 参数: - sec_uid: 用户sec_uid - interest_type: 兴趣类型，默认为search     - similar_author: 粉丝感兴趣同类型作者     - interest_topic: 粉丝近3天感兴趣的话题     - search: 粉丝近3天搜索词 ### 返回: - 用户粉丝兴趣数据  # [English] ### Purpose: - Douyin User Fans Interest ### Parameters: - sec_uid: Sec_uid of user - interest_type: Interest type, default is search     - similar_author: Fans interested in the same type of author     - interest_topic: Topics that fans are interested in the last 3 days     - search: Search terms for fans in the last 3 days ### Return: - User fans interest data
         * @summary 抖音用户粉丝兴趣/Douyin User Fans Interest
         * @param {string} secUid 用户sec_uid/Sec_uid of user
         * @param {string} interestType 兴趣类型/Interest type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet: async (secUid: string, interestType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet.');
            }
            // verify required parameter 'interestType' is not null or undefined
            if (interestType === null || interestType === undefined) {
                throw new RequiredError('interestType','Required parameter interestType was null or undefined when calling fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_fans_interest`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }

            if (interestType !== undefined) {
                localVarQueryParameter['interest_type'] = interestType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音用户粉丝兴趣 ### 参数: - sec_uid: 用户sec_uid - interest_type: 兴趣类型，默认为search     - similar_author: 粉丝感兴趣同类型作者     - interest_topic: 粉丝近3天感兴趣的话题     - search: 粉丝近3天搜索词 ### 返回: - 用户粉丝兴趣数据  # [English] ### Purpose: - Douyin User Fans Interest ### Parameters: - sec_uid: Sec_uid of user - interest_type: Interest type, default is search     - similar_author: Fans interested in the same type of author     - interest_topic: Topics that fans are interested in the last 3 days     - search: Search terms for fans in the last 3 days ### Return: - User fans interest data
         * @summary 抖音用户粉丝兴趣/Douyin User Fans Interest
         * @param {string} secUid 用户sec_uid/Sec_uid of user
         * @param {string} interestType 兴趣类型/Interest type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet_32: async (secUid: string, interestType: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet_32.');
            }
            // verify required parameter 'interestType' is not null or undefined
            if (interestType === null || interestType === undefined) {
                throw new RequiredError('interestType','Required parameter interestType was null or undefined when calling fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet_32.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_fans_interest`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }

            if (interestType !== undefined) {
                localVarQueryParameter['interest_type'] = interestType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。  ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2
         * @summary 获取用户粉丝列表/Get user fans list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {number} [sourceType] 来源类型/Source type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFansListApiV1DouyinWebFetchUserFansListGet: async (secUserId?: string, maxTime?: string, count?: number, sourceType?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/fetch_user_fans_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxTime !== undefined) {
                localVarQueryParameter['max_time'] = maxTime;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sourceType !== undefined) {
                localVarQueryParameter['source_type'] = sourceType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。  ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2
         * @summary 获取用户粉丝列表/Get user fans list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {number} [sourceType] 来源类型/Source type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFansListApiV1DouyinWebFetchUserFansListGet_33: async (secUserId?: string, maxTime?: string, count?: number, sourceType?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/fetch_user_fans_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxTime !== undefined) {
                localVarQueryParameter['max_time'] = maxTime;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sourceType !== undefined) {
                localVarQueryParameter['source_type'] = sourceType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音用户粉丝画像 ### 参数: - sec_uid: 用户sec_uid - option: 选项，默认为1     - 1: 粉丝手机价格分布     - 2: 粉丝性别分布     - 3: 粉丝年龄分布     - 4: 粉丝地域分布(省份)     - 5: 粉丝地域分布（城市）     - 6: 粉丝城市等级分布     - 7: 粉丝手机品牌分布     - 8: 粉丝兴趣 ### 返回: - 用户粉丝画像数据  # [English] ### Purpose: - Douyin User Fans Portrait ### Parameters: - sec_uid: Sec_uid of user - option: Option, default is 1     - 1: Fans mobile phone price distribution     - 2: Fans gender distribution     - 3: Fans age distribution     - 4: Fans regional distribution (province)     - 5: Fans regional distribution (city)     - 6: Fans city level distribution     - 7: Fans mobile phone brand distribution     - 8: Fans interests ### Return: - User fans portrait data
         * @summary 抖音用户粉丝画像/Douyin User Fans Portrait
         * @param {string} secUid 用户sec_uid/Sec_uid of user
         * @param {string} [option] 选项/Option
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet: async (secUid: string, option?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_fans_portrait`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }

            if (option !== undefined) {
                localVarQueryParameter['option'] = option;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音用户粉丝画像 ### 参数: - sec_uid: 用户sec_uid - option: 选项，默认为1     - 1: 粉丝手机价格分布     - 2: 粉丝性别分布     - 3: 粉丝年龄分布     - 4: 粉丝地域分布(省份)     - 5: 粉丝地域分布（城市）     - 6: 粉丝城市等级分布     - 7: 粉丝手机品牌分布     - 8: 粉丝兴趣 ### 返回: - 用户粉丝画像数据  # [English] ### Purpose: - Douyin User Fans Portrait ### Parameters: - sec_uid: Sec_uid of user - option: Option, default is 1     - 1: Fans mobile phone price distribution     - 2: Fans gender distribution     - 3: Fans age distribution     - 4: Fans regional distribution (province)     - 5: Fans regional distribution (city)     - 6: Fans city level distribution     - 7: Fans mobile phone brand distribution     - 8: Fans interests ### Return: - User fans portrait data
         * @summary 抖音用户粉丝画像/Douyin User Fans Portrait
         * @param {string} secUid 用户sec_uid/Sec_uid of user
         * @param {string} [option] 选项/Option
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet_34: async (secUid: string, option?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet_34.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_fans_portrait`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }

            if (option !== undefined) {
                localVarQueryParameter['option'] = option;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2
         * @summary 获取用户关注列表/Get user following list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {number} [sourceType] 来源类型/Source type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet: async (secUserId?: string, maxTime?: string, count?: number, sourceType?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/fetch_user_following_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxTime !== undefined) {
                localVarQueryParameter['max_time'] = maxTime;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sourceType !== undefined) {
                localVarQueryParameter['source_type'] = sourceType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2
         * @summary 获取用户关注列表/Get user following list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {number} [sourceType] 来源类型/Source type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet_35: async (secUserId?: string, maxTime?: string, count?: number, sourceType?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/fetch_user_following_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxTime !== undefined) {
                localVarQueryParameter['max_time'] = maxTime;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sourceType !== undefined) {
                localVarQueryParameter['source_type'] = sourceType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标 - count: 最大数量 - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor - count: Maximum count number - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {string} [cookie] 用户网页版抖音Cookie/Your web version of Douyin Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet: async (secUserId: string, maxCursor?: number, counts?: number, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_like_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (counts !== undefined) {
                localVarQueryParameter['counts'] = counts;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标 - count: 最大数量 - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor - count: Maximum count number - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {string} [cookie] 用户网页版抖音Cookie/Your web version of Douyin Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet_36: async (secUserId: string, maxCursor?: number, counts?: number, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet_36.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_like_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (counts !== undefined) {
                localVarQueryParameter['counts'] = counts;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 使用UID获取用户开播信息 ### 参数: - uid: 用户UID ### 返回: - 用户开播信息，包含room_id与live_status  # [English] ### Purpose: - Get user live information by UID ### Parameters: - uid: User UID ### Return: - User live information, including room_id and live_status  # [示例/Example] uid = \"3081254195702747\"
         * @summary 使用UID获取用户开播信息/Get user live information by UID
         * @param {string} uid 用户UID/User UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_live_info_by_uid`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 使用UID获取用户开播信息 ### 参数: - uid: 用户UID ### 返回: - 用户开播信息，包含room_id与live_status  # [English] ### Purpose: - Get user live information by UID ### Parameters: - uid: User UID ### Return: - User live information, including room_id and live_status  # [示例/Example] uid = \"3081254195702747\"
         * @summary 使用UID获取用户开播信息/Get user live information by UID
         * @param {string} uid 用户UID/User UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet_37: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet_37.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_live_info_by_uid`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户直播流数据 ### 参数: - webcast_id: 直播间 webcast_id - 获取方法：     - 假设你的直播间链接为：https://www.douyin.com/root/live/376034101029     - 那么直播间webcast_id为：376034101029     - webcast_id为直播间链接的最后一段数字，与room_id不同。 ### 返回: - 直播流数据  # [English] ### Purpose: - Get user live video data ### Parameters: - webcast_id: Room webcast_id - Acquisition method:     - Assuming your live room link is: https://www.douyin.com/root/live/376034101029     - Then the live room webcast_id is: 376034101029     - The webcast_id is the last number of the live room link, which is different from the room_id. ### Return: - Live stream data  # [示例/Example] webcast_id = \"376034101029\"
         * @summary 获取用户直播流数据/Get user live video data
         * @param {string} webcastId 直播间webcast_id/Room webcast_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet: async (webcastId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'webcastId' is not null or undefined
            if (webcastId === null || webcastId === undefined) {
                throw new RequiredError('webcastId','Required parameter webcastId was null or undefined when calling fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_live_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (webcastId !== undefined) {
                localVarQueryParameter['webcast_id'] = webcastId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户直播流数据 ### 参数: - webcast_id: 直播间 webcast_id - 获取方法：     - 假设你的直播间链接为：https://www.douyin.com/root/live/376034101029     - 那么直播间webcast_id为：376034101029     - webcast_id为直播间链接的最后一段数字，与room_id不同。 ### 返回: - 直播流数据  # [English] ### Purpose: - Get user live video data ### Parameters: - webcast_id: Room webcast_id - Acquisition method:     - Assuming your live room link is: https://www.douyin.com/root/live/376034101029     - Then the live room webcast_id is: 376034101029     - The webcast_id is the last number of the live room link, which is different from the room_id. ### Return: - Live stream data  # [示例/Example] webcast_id = \"376034101029\"
         * @summary 获取用户直播流数据/Get user live video data
         * @param {string} webcastId 直播间webcast_id/Room webcast_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet_38: async (webcastId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'webcastId' is not null or undefined
            if (webcastId === null || webcastId === undefined) {
                throw new RequiredError('webcastId','Required parameter webcastId was null or undefined when calling fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet_38.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_live_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (webcastId !== undefined) {
                localVarQueryParameter['webcast_id'] = webcastId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的直播流数据 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Get live video data of specified user ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7318296342189919011\"
         * @summary 获取指定用户的直播流数据/Get live video data of specified user
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet: async (roomId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_live_videos_by_room_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的直播流数据 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Get live video data of specified user ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7318296342189919011\"
         * @summary 获取指定用户的直播流数据/Get live video data of specified user
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet_39: async (roomId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet_39.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_live_videos_by_room_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的直播流数据V2 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Gets the live stream data of the specified user V2 ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7462723839303093032\"
         * @summary 获取指定用户的直播流数据V2/Gets the live stream data of the specified user V2
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get: async (roomId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_live_videos_by_room_id_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的直播流数据V2 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Gets the live stream data of the specified user V2 ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7462723839303093032\"
         * @summary 获取指定用户的直播流数据V2/Gets the live stream data of the specified user V2
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get_40: async (roomId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get_40.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_live_videos_by_room_id_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过sec_uid获取指定用户的直播流数据 ### 参数: - sec_uid: 用户sec_uid，也叫 sec_user_id，可以在用户主页链接中找到。 ### 返回: - 直播流数据  # [English] ### Purpose - Get live video data of specified user by sec_uid ### Parameters - sec_uid: User sec_uid, also called sec_user_id, can be found in the user\'s homepage link. ### Return - Live stream data  # [示例/Example] sec_uid = \"MS4wLjABAAAAAIKOBr_x6p2fPVKOAhqG8LrC1lwwdWChifKEsl-TXFS-kGSGqpMBRexJdzoAfvUF\"
         * @summary 通过sec_uid获取指定用户的直播流数据/Get live video data of specified user by sec_uid
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet: async (secUid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_live_videos_by_sec_uid`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过sec_uid获取指定用户的直播流数据 ### 参数: - sec_uid: 用户sec_uid，也叫 sec_user_id，可以在用户主页链接中找到。 ### 返回: - 直播流数据  # [English] ### Purpose - Get live video data of specified user by sec_uid ### Parameters - sec_uid: User sec_uid, also called sec_user_id, can be found in the user\'s homepage link. ### Return - Live stream data  # [示例/Example] sec_uid = \"MS4wLjABAAAAAIKOBr_x6p2fPVKOAhqG8LrC1lwwdWChifKEsl-TXFS-kGSGqpMBRexJdzoAfvUF\"
         * @summary 通过sec_uid获取指定用户的直播流数据/Get live video data of specified user by sec_uid
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet_41: async (secUid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet_41.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_live_videos_by_sec_uid`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户合辑作品数据 ### 参数: - mix_id: 合辑id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user mix video data ### Parameters: - mix_id: Mix id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] url = https://www.douyin.com/collection/7348687990509553679 mix_id = \"7348687990509553679\" max_cursor = 0 counts = 20
         * @summary 获取用户合辑作品数据/Get user mix video data
         * @param {string} mixId 合辑id/Mix id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet: async (mixId: string, maxCursor?: number, counts?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mixId' is not null or undefined
            if (mixId === null || mixId === undefined) {
                throw new RequiredError('mixId','Required parameter mixId was null or undefined when calling fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_mix_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (mixId !== undefined) {
                localVarQueryParameter['mix_id'] = mixId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (counts !== undefined) {
                localVarQueryParameter['counts'] = counts;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户合辑作品数据 ### 参数: - mix_id: 合辑id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user mix video data ### Parameters: - mix_id: Mix id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] url = https://www.douyin.com/collection/7348687990509553679 mix_id = \"7348687990509553679\" max_cursor = 0 counts = 20
         * @summary 获取用户合辑作品数据/Get user mix video data
         * @param {string} mixId 合辑id/Mix id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet_42: async (mixId: string, maxCursor?: number, counts?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mixId' is not null or undefined
            if (mixId === null || mixId === undefined) {
                throw new RequiredError('mixId','Required parameter mixId was null or undefined when calling fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet_42.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_mix_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (mixId !== undefined) {
                localVarQueryParameter['mix_id'] = mixId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (counts !== undefined) {
                localVarQueryParameter['counts'] = counts;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 - 注意：请尽量使用APP的接口而不是WEB的接口，因为WEB的接口可能会被不稳定。 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 翻页游标，第一次请求传0，然后每次请求传上一次请求返回的max_cursor进行翻页。 - count: 最大数量，建议不要超过20 - filter_type: 过滤类型，可选参数如下：     - 0: 默认排序     - 3: 热度排序 - cookie: 用户网页版抖音Cookie(此接口可以接受用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data - Note: Please try to use the APP interface instead of the WEB API, because the WEB API may be unstable. ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Paging cursor, pass 0 for the first request, and then pass the max_cursor returned by the previous request for paging each time. - count: Maximum count number, it is recommended not to exceed 20 - filter_type: Filter type, optional parameters are as follows:     - 0: Default sorting     - 3: Sort by popularity - cookie: User\'s web version of Douyin Cookie (This interface can accept users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = \"0\" counts = 20 filter_type = \"0\"
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {string} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {string} [filterType] 过滤类型/Filter type
         * @param {string} [cookie] 用户网页版抖音Cookie/Your web version of Douyin Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet: async (secUserId: string, maxCursor?: string, count?: number, filterType?: string, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_post_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (filterType !== undefined) {
                localVarQueryParameter['filter_type'] = filterType;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 - 注意：请尽量使用APP的接口而不是WEB的接口，因为WEB的接口可能会被不稳定。 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 翻页游标，第一次请求传0，然后每次请求传上一次请求返回的max_cursor进行翻页。 - count: 最大数量，建议不要超过20 - filter_type: 过滤类型，可选参数如下：     - 0: 默认排序     - 3: 热度排序 - cookie: 用户网页版抖音Cookie(此接口可以接受用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data - Note: Please try to use the APP interface instead of the WEB API, because the WEB API may be unstable. ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Paging cursor, pass 0 for the first request, and then pass the max_cursor returned by the previous request for paging each time. - count: Maximum count number, it is recommended not to exceed 20 - filter_type: Filter type, optional parameters are as follows:     - 0: Default sorting     - 3: Sort by popularity - cookie: User\'s web version of Douyin Cookie (This interface can accept users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = \"0\" counts = 20 filter_type = \"0\"
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {string} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {string} [filterType] 过滤类型/Filter type
         * @param {string} [cookie] 用户网页版抖音Cookie/Your web version of Douyin Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet_43: async (secUserId: string, maxCursor?: string, count?: number, filterType?: string, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet_43.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_post_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (filterType !== undefined) {
                localVarQueryParameter['filter_type'] = filterType;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 使用Short ID获取用户信息 ### 参数: - short_id: 用户Short ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by Short ID ### Parameters: - short_id: User Short ID ### Return: - User information  # [示例/Example] short_id = \"114131058\"
         * @summary 使用Short ID获取用户信息/Get user information by Short ID
         * @param {string} shortId 用户Short ID/User Short ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet: async (shortId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shortId' is not null or undefined
            if (shortId === null || shortId === undefined) {
                throw new RequiredError('shortId','Required parameter shortId was null or undefined when calling fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_profile_by_short_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shortId !== undefined) {
                localVarQueryParameter['short_id'] = shortId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 使用Short ID获取用户信息 ### 参数: - short_id: 用户Short ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by Short ID ### Parameters: - short_id: User Short ID ### Return: - User information  # [示例/Example] short_id = \"114131058\"
         * @summary 使用Short ID获取用户信息/Get user information by Short ID
         * @param {string} shortId 用户Short ID/User Short ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet_44: async (shortId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shortId' is not null or undefined
            if (shortId === null || shortId === undefined) {
                throw new RequiredError('shortId','Required parameter shortId was null or undefined when calling fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet_44.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_profile_by_short_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shortId !== undefined) {
                localVarQueryParameter['short_id'] = shortId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 使用UID获取用户信息 ### 参数: - uid: 用户UID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by UID ### Parameters: - uid: User UID ### Return: - User information  # [示例/Example] uid = \"68141954464\"
         * @summary 使用UID获取用户信息/Get user information by UID
         * @param {string} uid 用户UID/User UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_profile_by_uid`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 使用UID获取用户信息 ### 参数: - uid: 用户UID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by UID ### Parameters: - uid: User UID ### Return: - User information  # [示例/Example] uid = \"68141954464\"
         * @summary 使用UID获取用户信息/Get user information by UID
         * @param {string} uid 用户UID/User UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet_45: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet_45.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_profile_by_uid`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20 douyin_user_fans = \"\" douyin_user_type = \"\" search_id = \"\"
         * @summary 获取指定关键词的用户搜索结果(已废弃，使用V2或V3接口代替)/Get user search results of specified keywords (deprecated, use V2 or V3 interface instead)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [douyinUserFans] 粉丝数/Fans
         * @param {string} [douyinUserType] 用户类型/User type
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet: async (keyword: string, offset?: number, count?: number, douyinUserFans?: string, douyinUserType?: string, searchId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (douyinUserFans !== undefined) {
                localVarQueryParameter['douyin_user_fans'] = douyinUserFans;
            }

            if (douyinUserType !== undefined) {
                localVarQueryParameter['douyin_user_type'] = douyinUserType;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20 douyin_user_fans = \"\" douyin_user_type = \"\" search_id = \"\"
         * @summary 获取指定关键词的用户搜索结果(已废弃，使用V2或V3接口代替)/Get user search results of specified keywords (deprecated, use V2 or V3 interface instead)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [douyinUserFans] 粉丝数/Fans
         * @param {string} [douyinUserType] 用户类型/User type
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet_46: async (keyword: string, offset?: number, count?: number, douyinUserFans?: string, douyinUserType?: string, searchId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet_46.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (douyinUserFans !== undefined) {
                localVarQueryParameter['douyin_user_fans'] = douyinUserFans;
            }

            if (douyinUserType !== undefined) {
                localVarQueryParameter['douyin_user_type'] = douyinUserType;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V2 ### 参数: - keyword: 关键词 - cursor: 游标，第一次请求时为0，后续从返回数据中获取，用于翻页。 ### 返回: - 用户搜索结果V2  # [English] ### Purpose: - Get user search results of specified keywords V2 ### Parameters: - keyword: Keyword - cursor: Cursor, 0 for the first request, get from the returned data later, used for paging. ### Return: - User search results V2  # [示例/Example] keyword = \"中华娘\" cursor = 0
         * @summary 获取指定关键词的用户搜索结果V2/Get user search results of specified keywords V2
         * @param {string} keyword 关键词/Keyword
         * @param {number} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get: async (keyword: string, cursor?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_search_result_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V2 ### 参数: - keyword: 关键词 - cursor: 游标，第一次请求时为0，后续从返回数据中获取，用于翻页。 ### 返回: - 用户搜索结果V2  # [English] ### Purpose: - Get user search results of specified keywords V2 ### Parameters: - keyword: Keyword - cursor: Cursor, 0 for the first request, get from the returned data later, used for paging. ### Return: - User search results V2  # [示例/Example] keyword = \"中华娘\" cursor = 0
         * @summary 获取指定关键词的用户搜索结果V2/Get user search results of specified keywords V2
         * @param {string} keyword 关键词/Keyword
         * @param {number} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get_47: async (keyword: string, cursor?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get_47.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_search_result_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V3 ### 参数: - keyword: 关键词 - cursor: 偏移量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords V3 ### Parameters: - keyword: Keyword - cursor: Offset - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"中华娘\" cursor = \"0\" douyin_user_fans = \"\" douyin_user_type = \"\"
         * @summary 获取指定关键词的用户搜索结果V3/Get user search results of specified keywords V3
         * @param {string} keyword 关键词/Keyword
         * @param {string} [cursor] 游标/Cursor
         * @param {string} [douyinUserType] 用户类型/User type
         * @param {string} [douyinUserFans] 粉丝数/Fans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get: async (keyword: string, cursor?: string, douyinUserType?: string, douyinUserFans?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_search_result_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (douyinUserType !== undefined) {
                localVarQueryParameter['douyin_user_type'] = douyinUserType;
            }

            if (douyinUserFans !== undefined) {
                localVarQueryParameter['douyin_user_fans'] = douyinUserFans;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V3 ### 参数: - keyword: 关键词 - cursor: 偏移量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords V3 ### Parameters: - keyword: Keyword - cursor: Offset - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"中华娘\" cursor = \"0\" douyin_user_fans = \"\" douyin_user_type = \"\"
         * @summary 获取指定关键词的用户搜索结果V3/Get user search results of specified keywords V3
         * @param {string} keyword 关键词/Keyword
         * @param {string} [cursor] 游标/Cursor
         * @param {string} [douyinUserType] 用户类型/User type
         * @param {string} [douyinUserFans] 粉丝数/Fans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get_48: async (keyword: string, cursor?: string, douyinUserType?: string, douyinUserFans?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get_48.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_user_search_result_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (douyinUserType !== undefined) {
                localVarQueryParameter['douyin_user_type'] = douyinUserType;
            }

            if (douyinUserFans !== undefined) {
                localVarQueryParameter['douyin_user_fans'] = douyinUserFans;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音视频榜单 ### 参数: - date: 日期，默认为24     - 1: 一小时内     - 24: 一天内     - 72: 3天内     - 168: 7天内 - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sub_type: 子类型，默认为1001     - 1001: 视频总榜     - 1002: 低粉爆款     - 1003: 高完播率     - 1004: 高涨粉率     - 1005: 高点赞率 ### 返回: - 视频榜单数据  # [English] ### Purpose: - Douyin Video Billboard ### Parameters: - date: Date, default is 24     - 1: Within an hour     - 24: Within a day     - 72: Within 3 days     - 168: Within 7 days - page: Page number, default is 1 - page_size: Number per page, default is 10 - sub_type: Subtype, default is 1001     - 1001: Total video list     - 1002: Low fans explosion     - 1003: High completion rate     - 1004: High increase rate     - 1005: High like rate ### Return: - Video billboard data
         * @summary 抖音视频榜单/Douyin Video Billboard
         * @param {number} date 日期/Date
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {number} subType 子类型/Subtype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet: async (date: number, page: number, pageSize: number, subType: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            if (date === null || date === undefined) {
                throw new RequiredError('date','Required parameter date was null or undefined when calling fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet.');
            }
            // verify required parameter 'subType' is not null or undefined
            if (subType === null || subType === undefined) {
                throw new RequiredError('subType','Required parameter subType was null or undefined when calling fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_video_billboard`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (subType !== undefined) {
                localVarQueryParameter['sub_type'] = subType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音视频榜单 ### 参数: - date: 日期，默认为24     - 1: 一小时内     - 24: 一天内     - 72: 3天内     - 168: 7天内 - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sub_type: 子类型，默认为1001     - 1001: 视频总榜     - 1002: 低粉爆款     - 1003: 高完播率     - 1004: 高涨粉率     - 1005: 高点赞率 ### 返回: - 视频榜单数据  # [English] ### Purpose: - Douyin Video Billboard ### Parameters: - date: Date, default is 24     - 1: Within an hour     - 24: Within a day     - 72: Within 3 days     - 168: Within 7 days - page: Page number, default is 1 - page_size: Number per page, default is 10 - sub_type: Subtype, default is 1001     - 1001: Total video list     - 1002: Low fans explosion     - 1003: High completion rate     - 1004: High increase rate     - 1005: High like rate ### Return: - Video billboard data
         * @summary 抖音视频榜单/Douyin Video Billboard
         * @param {number} date 日期/Date
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {number} subType 子类型/Subtype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet_49: async (date: number, page: number, pageSize: number, subType: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'date' is not null or undefined
            if (date === null || date === undefined) {
                throw new RequiredError('date','Required parameter date was null or undefined when calling fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet_49.');
            }
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet_49.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet_49.');
            }
            // verify required parameter 'subType' is not null or undefined
            if (subType === null || subType === undefined) {
                throw new RequiredError('subType','Required parameter subType was null or undefined when calling fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet_49.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_video_billboard`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = date;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (subType !== undefined) {
                localVarQueryParameter['sub_type'] = subType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音视频频道数据 - https://www.douyin.com/channel/300205 ### 参数: - tag_id: 标签id，从URL中获取 - count: 数量 - refresh_index: 刷新索引 ### 返回: - 视频频道数据  # [English] ### Purpose: - Douyin video channel data - https://www.douyin.com/channel/300205 ### Parameters: - tag_id: Tag id, get from the URL - count: Number - refresh_index: Refresh index ### Return: - Video channel data  # [示例/Example] tag_id = 300203 count = 10 refresh_index = 1
         * @summary 抖音视频频道数据/Douyin video channel data
         * @param {number} tagId 标签id/Tag id
         * @param {number} [count] 数量/Number
         * @param {number} [refreshIndex] 刷新索引/Refresh index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet: async (tagId: number, count?: number, refreshIndex?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            if (tagId === null || tagId === undefined) {
                throw new RequiredError('tagId','Required parameter tagId was null or undefined when calling fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_video_channel_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (tagId !== undefined) {
                localVarQueryParameter['tag_id'] = tagId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (refreshIndex !== undefined) {
                localVarQueryParameter['refresh_index'] = refreshIndex;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音视频频道数据 - https://www.douyin.com/channel/300205 ### 参数: - tag_id: 标签id，从URL中获取 - count: 数量 - refresh_index: 刷新索引 ### 返回: - 视频频道数据  # [English] ### Purpose: - Douyin video channel data - https://www.douyin.com/channel/300205 ### Parameters: - tag_id: Tag id, get from the URL - count: Number - refresh_index: Refresh index ### Return: - Video channel data  # [示例/Example] tag_id = 300203 count = 10 refresh_index = 1
         * @summary 抖音视频频道数据/Douyin video channel data
         * @param {number} tagId 标签id/Tag id
         * @param {number} [count] 数量/Number
         * @param {number} [refreshIndex] 刷新索引/Refresh index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet_50: async (tagId: number, count?: number, refreshIndex?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagId' is not null or undefined
            if (tagId === null || tagId === undefined) {
                throw new RequiredError('tagId','Required parameter tagId was null or undefined when calling fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet_50.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_video_channel_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (tagId !== undefined) {
                localVarQueryParameter['tag_id'] = tagId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (refreshIndex !== undefined) {
                localVarQueryParameter['refresh_index'] = refreshIndex;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet: async (awemeId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_video_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet_51: async (awemeId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet_51.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_video_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet: async (itemId: string, commentId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_video_comment_replies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_52: async (itemId: string, commentId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_52.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_52.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_video_comment_replies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: 获取视频新增粉丝数量 ### 参数: - aweme_id: 作品id ### 返回: - 新增粉丝数量  # [English] ### Purpose: Get video new fans count ### Parameters: - aweme_id: Video id ### Return: - New Fans count  # [示例/Example] aweme_id = \"7429296623961853234\"
         * @summary 获取视频新增粉丝数量/Get video new fans count
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_video_fans_add_count`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: 获取视频新增粉丝数量 ### 参数: - aweme_id: 作品id ### 返回: - 新增粉丝数量  # [English] ### Purpose: Get video new fans count ### Parameters: - aweme_id: Video id ### Return: - New Fans count  # [示例/Example] aweme_id = \"7429296623961853234\"
         * @summary 获取视频新增粉丝数量/Get video new fans count
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet_53: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet_53.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_video_fans_add_count`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音视频点赞观众画像 ### 参数: - aweme_id: 视频aweme_id - option: 选项，默认为1     - 1: 观众手机价格分布     - 2: 观众性别分布     - 3: 观众年龄分布     - 4: 观众地域分布(省份)     - 5: 观众地域分布(城市)     - 6: 观众城市等级分布     - 7: 观众手机品牌分布  ### 返回: - 视频点赞观众画像数据  # [English] ### Purpose: - Douyin Video Like Viewer Portrait ### Parameters: - aweme_id: Aweme_id of video - option: Option, default is 1     - 1: Distribution of audience mobile phone prices     - 2: Distribution of audience gender     - 3: Distribution of audience age     - 4: Distribution of audience region (province)     - 5: Distribution of audience region (city)     - 6: Distribution of audience city level     - 7: Distribution of audience mobile phone brands ### Return: - Video like viewer portrait data
         * @summary 抖音视频点赞观众画像/Douyin Video Like Viewer Portrait
         * @param {string} awemeId 视频aweme_id/Aweme_id of video
         * @param {string} option 选项/Option
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet: async (awemeId: string, option: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet.');
            }
            // verify required parameter 'option' is not null or undefined
            if (option === null || option === undefined) {
                throw new RequiredError('option','Required parameter option was null or undefined when calling fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_video_like_portrait`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (option !== undefined) {
                localVarQueryParameter['option'] = option;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音视频点赞观众画像 ### 参数: - aweme_id: 视频aweme_id - option: 选项，默认为1     - 1: 观众手机价格分布     - 2: 观众性别分布     - 3: 观众年龄分布     - 4: 观众地域分布(省份)     - 5: 观众地域分布(城市)     - 6: 观众城市等级分布     - 7: 观众手机品牌分布  ### 返回: - 视频点赞观众画像数据  # [English] ### Purpose: - Douyin Video Like Viewer Portrait ### Parameters: - aweme_id: Aweme_id of video - option: Option, default is 1     - 1: Distribution of audience mobile phone prices     - 2: Distribution of audience gender     - 3: Distribution of audience age     - 4: Distribution of audience region (province)     - 5: Distribution of audience region (city)     - 6: Distribution of audience city level     - 7: Distribution of audience mobile phone brands ### Return: - Video like viewer portrait data
         * @summary 抖音视频点赞观众画像/Douyin Video Like Viewer Portrait
         * @param {string} awemeId 视频aweme_id/Aweme_id of video
         * @param {string} option 选项/Option
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet_54: async (awemeId: string, option: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet_54.');
            }
            // verify required parameter 'option' is not null or undefined
            if (option === null || option === undefined) {
                throw new RequiredError('option','Required parameter option was null or undefined when calling fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet_54.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_video_like_portrait`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (option !== undefined) {
                localVarQueryParameter['option'] = option;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求时为0，后续从返回数据中获取，用于翻页。     - 例如: offset = 10     - JSON Path-1 : $.data.cursor - count: 数量，默认为10，建议保持不变。 - sort_type:     - 0:综合排序     - 1:最多点赞     - 2:最新发布 - publish_time:     - 0:不限     - 1:最近一天     - 7:最近一周     - 180:最近半年 - filter_duration:     - 0:不限 0-1:1分钟以内     - 1-5:1-5分钟     - 5-10000:5分钟以上 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset, 0 for the first request, get from the returned data later, used for paging.     - For example: offset = 10     - JSON Path-1 : $.data.cursor - count: Number, default is 10, it is recommended to keep it unchanged. - sort_type:     - 0: Comprehensive sorting     - 1: Most likes     - 2: Latest release - publish_time:     - 0: Unlimited     - 1: Last day     - 7: Last week     - 180: Last half year - filter_duration:     - 0: Unlimited     - 0-1: Within 1 minute     - 1-5: 1-5 minutes     - 5-10000: More than 5 minutes - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results  # [示例/Example] keyword = \"游戏\" offset = 0 count = 10 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" search_id = \"\"
         * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet: async (keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, searchId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_video_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }

            if (filterDuration !== undefined) {
                localVarQueryParameter['filter_duration'] = filterDuration;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求时为0，后续从返回数据中获取，用于翻页。     - 例如: offset = 10     - JSON Path-1 : $.data.cursor - count: 数量，默认为10，建议保持不变。 - sort_type:     - 0:综合排序     - 1:最多点赞     - 2:最新发布 - publish_time:     - 0:不限     - 1:最近一天     - 7:最近一周     - 180:最近半年 - filter_duration:     - 0:不限 0-1:1分钟以内     - 1-5:1-5分钟     - 5-10000:5分钟以上 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset, 0 for the first request, get from the returned data later, used for paging.     - For example: offset = 10     - JSON Path-1 : $.data.cursor - count: Number, default is 10, it is recommended to keep it unchanged. - sort_type:     - 0: Comprehensive sorting     - 1: Most likes     - 2: Latest release - publish_time:     - 0: Unlimited     - 1: Last day     - 7: Last week     - 180: Last half year - filter_duration:     - 0: Unlimited     - 0-1: Within 1 minute     - 1-5: 1-5 minutes     - 5-10000: More than 5 minutes - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results  # [示例/Example] keyword = \"游戏\" offset = 0 count = 10 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" search_id = \"\"
         * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet_55: async (keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, searchId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet_55.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_video_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }

            if (filterDuration !== undefined) {
                localVarQueryParameter['filter_duration'] = filterDuration;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"
         * @summary 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
         * @param {string} keyword 关键词/Keyword
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {number} [page] 页码/Page
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get: async (keyword: string, sortType?: string, publishTime?: string, filterDuration?: string, page?: number, searchId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_video_search_result_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }

            if (filterDuration !== undefined) {
                localVarQueryParameter['filter_duration'] = filterDuration;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"
         * @summary 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
         * @param {string} keyword 关键词/Keyword
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {number} [page] 页码/Page
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get_56: async (keyword: string, sortType?: string, publishTime?: string, filterDuration?: string, page?: number, searchId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get_56.');
            }
            const localVarPath = `/api/v1/douyin/web/fetch_video_search_result_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }

            if (filterDuration !== undefined) {
                localVarQueryParameter['filter_duration'] = filterDuration;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 使用接口网址生成A-Bogus参数，提交的URL不能带有a_bogus参数，同时a_bogus参数与请求头中的User-Agent有关，需要一起提交和请求。 ### 参数: - url: API链接，请去除url中的原本的a_boogus参数(如有)。 - data: 请求载荷，只有在POST请求中才需要提交，GET请求中使用空字符串即可。 - user_agent: user-agent，需要提交你请求头中的User-Agent，该值参与a_bogus参数的计算。 - index_0: 加密明文列表的第一个值，无特殊要求，默认为0，不要随意修改。 - index_1: 加密明文列表的第二个值，无特殊要求，默认为1，不要随意修改。 - index_2: 加密明文列表的第三个值，无特殊要求，默认为14，不要随意修改。 ### 返回: - A-Bogus参数  # [English] ### Purpose: - Generate A-Bogus parameter using API URL, the submitted URL cannot contain the original a_boogus parameter, and the a_bogus parameter is related to the User-Agent in the request header, which needs to be submitted and requested together. ### Parameters: - url: API link, please remove the original a_boogus parameter from the url (if any). - data: Request payload, only need to submit in POST request, use an empty string in GET request. - user_agent: user-agent, you need to submit the User-Agent in your request header, which is involved in the calculation of the a_bogus parameter. - index_0: The first value of the encrypted plaintext list, no special requirements, the default is 0, do not modify it at will. - index_1: The second value of the encrypted plaintext list, no special requirements, the default is 1, do not modify it at will. - index_2: The third value of the encrypted plaintext list, no special requirements, the default is 14, do not modify it at will. ### Return: - A-Bogus parameter  # [示例/Example] ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/general/search/single/?device_platform=webapp&aid=6383&channel=channel_pc_web&search_channel=aweme_general&enable_history=1&keyword=%E4%B8%AD%E5%8D%8E%E5%A8%98&search_source=normal_search&query_correct_type=1&is_filter_search=0&from_group_id=7346905902554844468&offset=0&count=15&need_filter_settings=1&pc_client_type=1&version_code=190600&version_name=19.6.0&cookie_enabled=true&screen_width=1280&screen_height=800&browser_language=zh-CN&browser_platform=Win32&browser_name=Firefox&browser_version=124.0&browser_online=true&engine_name=Gecko&engine_version=124.0&os_name=Windows&os_version=10&cpu_core_num=16&device_memory=&platform=PC&webid=7348962975497324070&msToken=YCTVM6YGmjFdIpQAN9ykXLBXiSiuHdZkOkEQWTeqVOHBEPmOcM0lNwE0Kd9vgHPMPigSndZDHfAq9k-6lDmH3Jqz6mHHxmn-BzQjmLMIfLIPgirgnOixM9x4PwgcNQ%3D%3D\", \"data\": \"\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\", \"index_0\": 0, \"index_1\": 1, \"index_2\": 14 } ```
         * @summary 使用接口网址生成A-Bogus参数/Generate A-Bogus parameter using API URL
         * @param {ABogusModel} [aBogusModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateABogusApiV1DouyinWebGenerateABogusPost: async (aBogusModel?: ABogusModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/generate_a_bogus`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof aBogusModel !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(aBogusModel !== undefined ? aBogusModel : {}) : (aBogusModel || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 使用接口网址生成A-Bogus参数，提交的URL不能带有a_bogus参数，同时a_bogus参数与请求头中的User-Agent有关，需要一起提交和请求。 ### 参数: - url: API链接，请去除url中的原本的a_boogus参数(如有)。 - data: 请求载荷，只有在POST请求中才需要提交，GET请求中使用空字符串即可。 - user_agent: user-agent，需要提交你请求头中的User-Agent，该值参与a_bogus参数的计算。 - index_0: 加密明文列表的第一个值，无特殊要求，默认为0，不要随意修改。 - index_1: 加密明文列表的第二个值，无特殊要求，默认为1，不要随意修改。 - index_2: 加密明文列表的第三个值，无特殊要求，默认为14，不要随意修改。 ### 返回: - A-Bogus参数  # [English] ### Purpose: - Generate A-Bogus parameter using API URL, the submitted URL cannot contain the original a_boogus parameter, and the a_bogus parameter is related to the User-Agent in the request header, which needs to be submitted and requested together. ### Parameters: - url: API link, please remove the original a_boogus parameter from the url (if any). - data: Request payload, only need to submit in POST request, use an empty string in GET request. - user_agent: user-agent, you need to submit the User-Agent in your request header, which is involved in the calculation of the a_bogus parameter. - index_0: The first value of the encrypted plaintext list, no special requirements, the default is 0, do not modify it at will. - index_1: The second value of the encrypted plaintext list, no special requirements, the default is 1, do not modify it at will. - index_2: The third value of the encrypted plaintext list, no special requirements, the default is 14, do not modify it at will. ### Return: - A-Bogus parameter  # [示例/Example] ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/general/search/single/?device_platform=webapp&aid=6383&channel=channel_pc_web&search_channel=aweme_general&enable_history=1&keyword=%E4%B8%AD%E5%8D%8E%E5%A8%98&search_source=normal_search&query_correct_type=1&is_filter_search=0&from_group_id=7346905902554844468&offset=0&count=15&need_filter_settings=1&pc_client_type=1&version_code=190600&version_name=19.6.0&cookie_enabled=true&screen_width=1280&screen_height=800&browser_language=zh-CN&browser_platform=Win32&browser_name=Firefox&browser_version=124.0&browser_online=true&engine_name=Gecko&engine_version=124.0&os_name=Windows&os_version=10&cpu_core_num=16&device_memory=&platform=PC&webid=7348962975497324070&msToken=YCTVM6YGmjFdIpQAN9ykXLBXiSiuHdZkOkEQWTeqVOHBEPmOcM0lNwE0Kd9vgHPMPigSndZDHfAq9k-6lDmH3Jqz6mHHxmn-BzQjmLMIfLIPgirgnOixM9x4PwgcNQ%3D%3D\", \"data\": \"\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\", \"index_0\": 0, \"index_1\": 1, \"index_2\": 14 } ```
         * @summary 使用接口网址生成A-Bogus参数/Generate A-Bogus parameter using API URL
         * @param {ABogusModel} [aBogusModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateABogusApiV1DouyinWebGenerateABogusPost_57: async (aBogusModel?: ABogusModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/generate_a_bogus`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof aBogusModel !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(aBogusModel !== undefined ? aBogusModel : {}) : (aBogusModel || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成真实msToken ### 返回: - msToken  # [English] ### Purpose: - Generate real msToken ### Return: - msToken
         * @summary 生成真实msToken/Generate real msToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/generate_real_msToken`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成真实msToken ### 返回: - msToken  # [English] ### Purpose: - Generate real msToken ### Return: - msToken
         * @summary 生成真实msToken/Generate real msToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet_58: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/generate_real_msToken`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成s_v_web_id ### 返回: - s_v_web_id  # [English] ### Purpose: - Generate s_v_web_id ### Return: - s_v_web_id
         * @summary 生成s_v_web_id/Generate s_v_web_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSVWebIdApiV1DouyinWebGenerateSVWebIdGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/generate_s_v_web_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成s_v_web_id ### 返回: - s_v_web_id  # [English] ### Purpose: - Generate s_v_web_id ### Return: - s_v_web_id
         * @summary 生成s_v_web_id/Generate s_v_web_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSVWebIdApiV1DouyinWebGenerateSVWebIdGet_59: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/generate_s_v_web_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成ttwid ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Return: - ttwid
         * @summary 生成ttwid/Generate ttwid
         * @param {string} [userAgent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTtwidApiV1DouyinWebGenerateTtwidGet: async (userAgent?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/generate_ttwid`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userAgent !== undefined) {
                localVarQueryParameter['user_agent'] = userAgent;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成ttwid ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Return: - ttwid
         * @summary 生成ttwid/Generate ttwid
         * @param {string} [userAgent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTtwidApiV1DouyinWebGenerateTtwidGet_60: async (userAgent?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/generate_ttwid`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userAgent !== undefined) {
                localVarQueryParameter['user_agent'] = userAgent;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成verify_fp ### 返回: - verify_fp  # [English] ### Purpose: - Generate verify_fp ### Return: - verify_fp
         * @summary 生成verify_fp/Generate verify_fp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateVerifyFpApiV1DouyinWebGenerateVerifyFpGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/generate_verify_fp`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成verify_fp ### 返回: - verify_fp  # [English] ### Purpose: - Generate verify_fp ### Return: - verify_fp
         * @summary 生成verify_fp/Generate verify_fp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateVerifyFpApiV1DouyinWebGenerateVerifyFpGet_61: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/generate_verify_fp`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 使用接口网址生成X-Bogus参数 ### 参数: - url: 接口网址  # [English] ### Purpose: - Generate X-Bogus parameter using API URL ### Parameters: - url: API URL  # [示例/Example]  ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" } ```
         * @summary 使用接口网址生成X-Bogus参数/Generate X-Bogus parameter using API URL
         * @param {XBogusModel} [xBogusModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateXBogusApiV1DouyinWebGenerateXBogusPost: async (xBogusModel?: XBogusModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/generate_x_bogus`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof xBogusModel !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(xBogusModel !== undefined ? xBogusModel : {}) : (xBogusModel || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 使用接口网址生成X-Bogus参数 ### 参数: - url: 接口网址  # [English] ### Purpose: - Generate X-Bogus parameter using API URL ### Parameters: - url: API URL  # [示例/Example]  ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" } ```
         * @summary 使用接口网址生成X-Bogus参数/Generate X-Bogus parameter using API URL
         * @param {XBogusModel} [xBogusModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateXBogusApiV1DouyinWebGenerateXBogusPost_62: async (xBogusModel?: XBogusModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/generate_x_bogus`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof xBogusModel !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(xBogusModel !== undefined ? xBogusModel : {}) : (xBogusModel || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文]  ### 用途:  - 提取列表作品id（最多支持20个链接）  ### 参数:  - url: 作品链接列表  ### 返回:  - 作品id列表   # [English]  ### Purpose:  - Extract list video id (supports up to 20 links)  ### Parameters:  - url: Video link list  ### Return:  - Video id list   # [示例/Example]  ```json  { \"urls\":[     \"0.53 02/26 I@v.sE Fus:/ 你别太帅了郑润泽# 现场版live # 音乐节 # 郑润泽  https://v.douyin.com/iRNBho6u/ 复制此链接，打开Dou音搜索，直接观看视频!\",     \"https://v.douyin.com/iRNBho6u/\",     \"https://www.iesdouyin.com/share/video/7298145681699622182/?region=CN&mid=7298145762238565171&u_code=l1j9bkbd&did=MS4wLjABAAAAtqpCx0hpOERbdSzQdjRZw-wFPxaqdbAzsKDmbJMUI3KWlMGQHC-n6dXAqa-dM2EP&iid=MS4wLjABAAAANwkJuWIRFOzg5uCpDRpMj4OX-QryoDgn-yYlXQnRwQQ&with_sec_did=1&titleType=title&share_sign=05kGlqGmR4_IwCX.ZGk6xuL0osNA..5ur7b0jbOx6cc-&share_version=170400&ts=1699262937&from_aid=6383&from_ssr=1&from=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182?previous_page=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182\",  ]  }  ```
         * @summary 提取列表作品id/Extract list video id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/get_all_aweme_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文]  ### 用途:  - 提取列表作品id（最多支持20个链接）  ### 参数:  - url: 作品链接列表  ### 返回:  - 作品id列表   # [English]  ### Purpose:  - Extract list video id (supports up to 20 links)  ### Parameters:  - url: Video link list  ### Return:  - Video id list   # [示例/Example]  ```json  { \"urls\":[     \"0.53 02/26 I@v.sE Fus:/ 你别太帅了郑润泽# 现场版live # 音乐节 # 郑润泽  https://v.douyin.com/iRNBho6u/ 复制此链接，打开Dou音搜索，直接观看视频!\",     \"https://v.douyin.com/iRNBho6u/\",     \"https://www.iesdouyin.com/share/video/7298145681699622182/?region=CN&mid=7298145762238565171&u_code=l1j9bkbd&did=MS4wLjABAAAAtqpCx0hpOERbdSzQdjRZw-wFPxaqdbAzsKDmbJMUI3KWlMGQHC-n6dXAqa-dM2EP&iid=MS4wLjABAAAANwkJuWIRFOzg5uCpDRpMj4OX-QryoDgn-yYlXQnRwQQ&with_sec_did=1&titleType=title&share_sign=05kGlqGmR4_IwCX.ZGk6xuL0osNA..5ur7b0jbOx6cc-&share_version=170400&ts=1699262937&from_aid=6383&from_ssr=1&from=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182?previous_page=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182\",  ]  }  ```
         * @summary 提取列表作品id/Extract list video id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost_63: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/get_all_aweme_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文]  ### 用途:  - 提取列表用户id  ### 参数:  - url: 用户主页链接列表（最多支持10个链接）  ### 返回:  - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。   # [English]  ### Purpose:  - Extract list user id  ### Parameters:  - url: User homepage link list (supports up to 10 links)  ### Return:  - If the sec_user_id is successfully obtained from the link, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.   # [示例/Example]  ```json  { \"urls\":[    \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE?vid=7285950278132616463\",    \"https://www.douyin.com/user/MS4wLjABAAAAVsneOf144eGDFf8Xp9QNb1VW6ovXnNT5SqJBhJfe8KQBKWKDTWK5Hh-_i9mJzb8C\",    \"长按复制此条消息，打开抖音搜索，查看TA的更多作品。 https://v.douyin.com/idFqvUms/\",    \"https://v.douyin.com/idFqvUms/\"     ]  }  ```
         * @summary 提取列表用户id/Extract list user id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/get_all_sec_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文]  ### 用途:  - 提取列表用户id  ### 参数:  - url: 用户主页链接列表（最多支持10个链接）  ### 返回:  - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。   # [English]  ### Purpose:  - Extract list user id  ### Parameters:  - url: User homepage link list (supports up to 10 links)  ### Return:  - If the sec_user_id is successfully obtained from the link, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.   # [示例/Example]  ```json  { \"urls\":[    \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE?vid=7285950278132616463\",    \"https://www.douyin.com/user/MS4wLjABAAAAVsneOf144eGDFf8Xp9QNb1VW6ovXnNT5SqJBhJfe8KQBKWKDTWK5Hh-_i9mJzb8C\",    \"长按复制此条消息，打开抖音搜索，查看TA的更多作品。 https://v.douyin.com/idFqvUms/\",    \"https://v.douyin.com/idFqvUms/\"     ]  }  ```
         * @summary 提取列表用户id/Extract list user id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost_64: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/get_all_sec_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接列表（最多支持20个链接） ### 返回: - 直播间号列表  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link list (supports up to 20 links) ### Return: - Room id list  # [示例/Example] ```json {   \"urls\": [         \"https://live.douyin.com/775841227732\",         \"https://live.douyin.com/775841227732?room_id=7318296342189919011&enter_from_merge=web_share_link&enter_method=web_share_link&previous_page=app_code_link\",         \'https://webcast.amemv.com/douyin/webcast/reflow/7318296342189919011?u_code=l1j9bkbd&did=MS4wLjABAAAAEs86TBQPNwAo-RGrcxWyCdwKhI66AK3Pqf3ieo6HaxI&iid=MS4wLjABAAAA0ptpM-zzoliLEeyvWOCUt-_dQza4uSjlIvbtIazXnCY&with_sec_did=1&use_link_command=1&ecom_share_track_params=&extra_params={\"from_request_id\":\"20231230162057EC005772A8EAA0199906\",\"im_channel_invite_id\":\"0\"}&user_id=3644207898042206&liveId=7318296342189919011&from=share&style=share&enter_method=click_share&roomId=7318296342189919011&activity_info={}\',         \"6i- Q@x.Sl 03/23 【醒子8ke的直播间】  点击打开👉https://v.douyin.com/i8tBR7hX/  或长按复制此条消息，打开抖音，看TA直播\",         \"https://v.douyin.com/i8tBR7hX/\",         ] } ```
         * @summary 提取列表直播间号/Extract list webcast id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/get_all_webcast_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接列表（最多支持20个链接） ### 返回: - 直播间号列表  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link list (supports up to 20 links) ### Return: - Room id list  # [示例/Example] ```json {   \"urls\": [         \"https://live.douyin.com/775841227732\",         \"https://live.douyin.com/775841227732?room_id=7318296342189919011&enter_from_merge=web_share_link&enter_method=web_share_link&previous_page=app_code_link\",         \'https://webcast.amemv.com/douyin/webcast/reflow/7318296342189919011?u_code=l1j9bkbd&did=MS4wLjABAAAAEs86TBQPNwAo-RGrcxWyCdwKhI66AK3Pqf3ieo6HaxI&iid=MS4wLjABAAAA0ptpM-zzoliLEeyvWOCUt-_dQza4uSjlIvbtIazXnCY&with_sec_did=1&use_link_command=1&ecom_share_track_params=&extra_params={\"from_request_id\":\"20231230162057EC005772A8EAA0199906\",\"im_channel_invite_id\":\"0\"}&user_id=3644207898042206&liveId=7318296342189919011&from=share&style=share&enter_method=click_share&roomId=7318296342189919011&activity_info={}\',         \"6i- Q@x.Sl 03/23 【醒子8ke的直播间】  点击打开👉https://v.douyin.com/i8tBR7hX/  或长按复制此条消息，打开抖音，看TA直播\",         \"https://v.douyin.com/i8tBR7hX/\",         ] } ```
         * @summary 提取列表直播间号/Extract list webcast id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost_65: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/web/get_all_webcast_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.douyin.com/video/7298145681699622182\"
         * @summary 提取单个作品id/Extract single video id
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAwemeIdApiV1DouyinWebGetAwemeIdGet: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling getAwemeIdApiV1DouyinWebGetAwemeIdGet.');
            }
            const localVarPath = `/api/v1/douyin/web/get_aweme_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.douyin.com/video/7298145681699622182\"
         * @summary 提取单个作品id/Extract single video id
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAwemeIdApiV1DouyinWebGetAwemeIdGet_66: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling getAwemeIdApiV1DouyinWebGetAwemeIdGet_66.');
            }
            const localVarPath = `/api/v1/douyin/web/get_aweme_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 提取单个用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户sec_user_id  # [English] ### Purpose: - Extract single user id ### Parameters: - url: User homepage link ### Return: - User sec_user_id  # [示例/Example] url = \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\"
         * @summary 提取单个用户id/Extract single user id
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecUserIdApiV1DouyinWebGetSecUserIdGet: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling getSecUserIdApiV1DouyinWebGetSecUserIdGet.');
            }
            const localVarPath = `/api/v1/douyin/web/get_sec_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 提取单个用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户sec_user_id  # [English] ### Purpose: - Extract single user id ### Parameters: - url: User homepage link ### Return: - User sec_user_id  # [示例/Example] url = \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\"
         * @summary 提取单个用户id/Extract single user id
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecUserIdApiV1DouyinWebGetSecUserIdGet_67: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling getSecUserIdApiV1DouyinWebGetSecUserIdGet_67.');
            }
            const localVarPath = `/api/v1/douyin/web/get_sec_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接 ### 返回: - 直播间号  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link ### Return: - Room id  # [示例/Example] url = \"https://live.douyin.com/775841227732\"
         * @summary 提取直播间号/Extract webcast id
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebcastIdApiV1DouyinWebGetWebcastIdGet: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling getWebcastIdApiV1DouyinWebGetWebcastIdGet.');
            }
            const localVarPath = `/api/v1/douyin/web/get_webcast_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接 ### 返回: - 直播间号  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link ### Return: - Room id  # [示例/Example] url = \"https://live.douyin.com/775841227732\"
         * @summary 提取直播间号/Extract webcast id
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebcastIdApiV1DouyinWebGetWebcastIdGet_68: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling getWebcastIdApiV1DouyinWebGetWebcastIdGet_68.');
            }
            const localVarPath = `/api/v1/douyin/web/get_webcast_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 根据sec_user_id获取指定用户的信息/Get information of specified user by sec_user_id
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1DouyinWebHandlerUserProfileGet: async (secUserId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling handlerUserProfileApiV1DouyinWebHandlerUserProfileGet.');
            }
            const localVarPath = `/api/v1/douyin/web/handler_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 根据sec_user_id获取指定用户的信息/Get information of specified user by sec_user_id
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1DouyinWebHandlerUserProfileGet_69: async (secUserId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling handlerUserProfileApiV1DouyinWebHandlerUserProfileGet_69.');
            }
            const localVarPath = `/api/v1/douyin/web/handler_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据抖音号获取指定用户的信息 ### 参数: - unique_id: 用户unique_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - unique_id: User unique_id ### Return: - User information  # [示例/Example] unique_id = \"TheChief\"
         * @summary 根据抖音号获取指定用户的信息/Get information of specified user by unique_id
         * @param {string} uniqueId 用户unique_id/User unique_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get: async (uniqueId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uniqueId' is not null or undefined
            if (uniqueId === null || uniqueId === undefined) {
                throw new RequiredError('uniqueId','Required parameter uniqueId was null or undefined when calling handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get.');
            }
            const localVarPath = `/api/v1/douyin/web/handler_user_profile_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uniqueId !== undefined) {
                localVarQueryParameter['unique_id'] = uniqueId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据抖音号获取指定用户的信息 ### 参数: - unique_id: 用户unique_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - unique_id: User unique_id ### Return: - User information  # [示例/Example] unique_id = \"TheChief\"
         * @summary 根据抖音号获取指定用户的信息/Get information of specified user by unique_id
         * @param {string} uniqueId 用户unique_id/User unique_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get_70: async (uniqueId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uniqueId' is not null or undefined
            if (uniqueId === null || uniqueId === undefined) {
                throw new RequiredError('uniqueId','Required parameter uniqueId was null or undefined when calling handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get_70.');
            }
            const localVarPath = `/api/v1/douyin/web/handler_user_profile_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uniqueId !== undefined) {
                localVarQueryParameter['unique_id'] = uniqueId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据抖音uid获取指定用户的信息 ### 参数: - uid: 用户uid，也就是抖音号的short_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - uid: User uid, which is the short_id of the Douyin number ### Return: - User information  # [示例/Example] uid = \"1673937488185292\"
         * @summary 根据抖音uid获取指定用户的信息/Get information of specified user by uid
         * @param {string} uid 用户uid(short_id)/User uid(short_id)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get.');
            }
            const localVarPath = `/api/v1/douyin/web/handler_user_profile_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据抖音uid获取指定用户的信息 ### 参数: - uid: 用户uid，也就是抖音号的short_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - uid: User uid, which is the short_id of the Douyin number ### Return: - User information  # [示例/Example] uid = \"1673937488185292\"
         * @summary 根据抖音uid获取指定用户的信息/Get information of specified user by uid
         * @param {string} uid 用户uid(short_id)/User uid(short_id)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get_71: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get_71.');
            }
            const localVarPath = `/api/v1/douyin/web/handler_user_profile_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息，包含性别，年龄，直播等级，直播间牌子 ### 说明： - 性别：1为男，2为女，0为未知，在live_user字段中。 - 年龄：在user字段中，-1为未知。  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information, including gender, age, live level, live room brand ### Description: - gender: 1 male, 2 female, 0 unknown, in the live_user field. - age: in the user field, -1 unknown.  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 根据sec_user_id获取指定用户的信息（性别，年龄，直播等级、牌子）/Get information of specified user by sec_user_id (gender, age, live level、brand)
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get: async (secUserId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get.');
            }
            const localVarPath = `/api/v1/douyin/web/handler_user_profile_v4`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息，包含性别，年龄，直播等级，直播间牌子 ### 说明： - 性别：1为男，2为女，0为未知，在live_user字段中。 - 年龄：在user字段中，-1为未知。  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information, including gender, age, live level, live room brand ### Description: - gender: 1 male, 2 female, 0 unknown, in the live_user field. - age: in the user field, -1 unknown.  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 根据sec_user_id获取指定用户的信息（性别，年龄，直播等级、牌子）/Get information of specified user by sec_user_id (gender, age, live level、brand)
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get_72: async (secUserId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get_72.');
            }
            const localVarPath = `/api/v1/douyin/web/handler_user_profile_v4`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 直播间号转房间号 ### 参数: - webcast_id: 直播间号 ### 返回: - 房间号  # [English] ### Purpose: - Webcast id to room id ### Parameters: - webcast_id: Webcast id ### Return: - Room id  # [示例/Example] \"webcast_id = \"775841227732\"
         * @summary 直播间号转房间号/Webcast id to room id
         * @param {string} webcastId 直播间号/Webcast id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet: async (webcastId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'webcastId' is not null or undefined
            if (webcastId === null || webcastId === undefined) {
                throw new RequiredError('webcastId','Required parameter webcastId was null or undefined when calling webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet.');
            }
            const localVarPath = `/api/v1/douyin/web/webcast_id_2_room_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (webcastId !== undefined) {
                localVarQueryParameter['webcast_id'] = webcastId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 直播间号转房间号 ### 参数: - webcast_id: 直播间号 ### 返回: - 房间号  # [English] ### Purpose: - Webcast id to room id ### Parameters: - webcast_id: Webcast id ### Return: - Room id  # [示例/Example] \"webcast_id = \"775841227732\"
         * @summary 直播间号转房间号/Webcast id to room id
         * @param {string} webcastId 直播间号/Webcast id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet_73: async (webcastId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'webcastId' is not null or undefined
            if (webcastId === null || webcastId === undefined) {
                throw new RequiredError('webcastId','Required parameter webcastId was null or undefined when calling webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet_73.');
            }
            const localVarPath = `/api/v1/douyin/web/webcast_id_2_room_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (webcastId !== undefined) {
                localVarQueryParameter['webcast_id'] = webcastId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DouyinWebAPIApi - functional programming interface
 * @export
 */
export const DouyinWebAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastRoomMessage：直播间消息     - WebcastLikeMessage：点赞消息     - WebcastMemberMessage：成员消息     - WebcastChatMessage：聊天消息     - WebcastGiftMessage：礼物消息     - WebcastSocialMessage：社交消息     - WebcastRoomUserSeqMessage：用户序列消息     - WebcastUpdateFanTicketMessage：更新粉丝消息     - WebcastCommonTextMessage：常规文本消息     - WebcastMatchAgainstScoreMessage：比赛得分消息     - WebcastFansclubMessage：粉丝俱乐部消息     - WebcastRanklistHourEntranceMessage：排行榜小时入口消息     - WebcastRoomStatsMessage：直播间统计消息     - WebcastLiveShoppingMessage: 直播购物消息     - WebcastLiveEcomGeneralMessage: 直播电商通用消息     - WebcastProductChangeMessage: 直播商品变更消息     - WebcastRoomStreamAdaptationMessage: 直播间流适配消息     - WebcastNotifyEffectMessage: 通知效果消息     - WebcastLightGiftMessage: 亮礼物消息     - WebcastProfitInteractionScoreMessage: 收益互动分消息     - WebcastRoomRankMessage: 直播间排行消息 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discounts. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastRoomMessage: Live room message     - WebcastLikeMessage: Like message     - WebcastMemberMessage: Member message     - WebcastChatMessage: Chat message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastUpdateFanTicketMessage: Update fan message     - WebcastCommonTextMessage: Common text message     - WebcastMatchAgainstScoreMessage: Match score message     - WebcastFansclubMessage: Fans club message     - WebcastRanklistHourEntranceMessage: Ranking list hour entrance message     - WebcastRoomStatsMessage: Live room statistics message     - WebcastLiveShoppingMessage: Live shopping message     - WebcastLiveEcomGeneralMessage: Live e-commerce general message     - WebcastProductChangeMessage: Live product change message     - WebcastRoomStreamAdaptationMessage: Live room stream adaptation message     - WebcastNotifyEffectMessage: Notification effect message     - WebcastLightGiftMessage: Light gift message     - WebcastProfitInteractionScoreMessage: Profit interaction score message     - WebcastRoomRankMessage: Live room ranking message ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
         * @summary 提取直播间弹幕/Extract live room danmaku
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {string} danmakuType 消息类型/Message type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet(liveRoomUrl: string, danmakuType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet(liveRoomUrl, danmakuType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastRoomMessage：直播间消息     - WebcastLikeMessage：点赞消息     - WebcastMemberMessage：成员消息     - WebcastChatMessage：聊天消息     - WebcastGiftMessage：礼物消息     - WebcastSocialMessage：社交消息     - WebcastRoomUserSeqMessage：用户序列消息     - WebcastUpdateFanTicketMessage：更新粉丝消息     - WebcastCommonTextMessage：常规文本消息     - WebcastMatchAgainstScoreMessage：比赛得分消息     - WebcastFansclubMessage：粉丝俱乐部消息     - WebcastRanklistHourEntranceMessage：排行榜小时入口消息     - WebcastRoomStatsMessage：直播间统计消息     - WebcastLiveShoppingMessage: 直播购物消息     - WebcastLiveEcomGeneralMessage: 直播电商通用消息     - WebcastProductChangeMessage: 直播商品变更消息     - WebcastRoomStreamAdaptationMessage: 直播间流适配消息     - WebcastNotifyEffectMessage: 通知效果消息     - WebcastLightGiftMessage: 亮礼物消息     - WebcastProfitInteractionScoreMessage: 收益互动分消息     - WebcastRoomRankMessage: 直播间排行消息 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discounts. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastRoomMessage: Live room message     - WebcastLikeMessage: Like message     - WebcastMemberMessage: Member message     - WebcastChatMessage: Chat message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastUpdateFanTicketMessage: Update fan message     - WebcastCommonTextMessage: Common text message     - WebcastMatchAgainstScoreMessage: Match score message     - WebcastFansclubMessage: Fans club message     - WebcastRanklistHourEntranceMessage: Ranking list hour entrance message     - WebcastRoomStatsMessage: Live room statistics message     - WebcastLiveShoppingMessage: Live shopping message     - WebcastLiveEcomGeneralMessage: Live e-commerce general message     - WebcastProductChangeMessage: Live product change message     - WebcastRoomStreamAdaptationMessage: Live room stream adaptation message     - WebcastNotifyEffectMessage: Notification effect message     - WebcastLightGiftMessage: Light gift message     - WebcastProfitInteractionScoreMessage: Profit interaction score message     - WebcastRoomRankMessage: Live room ranking message ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
         * @summary 提取直播间弹幕/Extract live room danmaku
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {string} danmakuType 消息类型/Message type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet_1(liveRoomUrl: string, danmakuType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet_1(liveRoomUrl, danmakuType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音热点分类 ### 参数: - billboard_type: 热点类型     - rise: 上升热点榜分类     - city: 同城热点榜分类     - total: 热点总榜分类 ### 返回: - 热点分类数据  # [English] ### Purpose: - Douyin Billboard Categories ### Parameters: - billboard_type: Hotspot type     - rise: Rising hot spot list category     - city: City hot spot list category     - total: Total hot spot list category ### Return: - Hotspot category data
         * @summary 抖音热点分类/Douyin Billboard Categories
         * @param {string} billboardType 热点类型/Hotspot type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet(billboardType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet(billboardType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音热点分类 ### 参数: - billboard_type: 热点类型     - rise: 上升热点榜分类     - city: 同城热点榜分类     - total: 热点总榜分类 ### 返回: - 热点分类数据  # [English] ### Purpose: - Douyin Billboard Categories ### Parameters: - billboard_type: Hotspot type     - rise: Rising hot spot list category     - city: City hot spot list category     - total: Total hot spot list category ### Return: - Hotspot category data
         * @summary 抖音热点分类/Douyin Billboard Categories
         * @param {string} billboardType 热点类型/Hotspot type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet_2(billboardType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet_2(billboardType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音榜单相关视频 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_id: 分类ID ### 返回: - 相关视频数据  # [English] ### Purpose: - Douyin Billboard Related Videos ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_id: Category ID ### Return: - Related video data
         * @summary 抖音榜单相关视频/Douyin Billboard Related Videos
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceId 分类ID/Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet(page: number, pageSize: number, sentenceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet(page, pageSize, sentenceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音榜单相关视频 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_id: 分类ID ### 返回: - 相关视频数据  # [English] ### Purpose: - Douyin Billboard Related Videos ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_id: Category ID ### Return: - Related video data
         * @summary 抖音榜单相关视频/Douyin Billboard Related Videos
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceId 分类ID/Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet_3(page: number, pageSize: number, sentenceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet_3(page, pageSize, sentenceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 二次元作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 二次元作品数据  # [English] ### Purpose: - Cartoon Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Cartoon Video data
         * @summary 二次元作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet(count: number, refreshIndex?: number, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet(count, refreshIndex, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 二次元作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 二次元作品数据  # [English] ### Purpose: - Cartoon Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Cartoon Video data
         * @summary 二次元作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet_4(count: number, refreshIndex?: number, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet_4(count, refreshIndex, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 美食作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 美食作品数据  # [English] ### Purpose: - Food Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Food Video data
         * @summary 美食作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet(count: number, refreshIndex?: number, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet(count, refreshIndex, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 美食作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 美食作品数据  # [English] ### Purpose: - Food Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Food Video data
         * @summary 美食作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet_5(count: number, refreshIndex?: number, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet_5(count, refreshIndex, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 音乐作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 音乐作品数据  # [English] ### Purpose: - Music Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Music Video data
         * @summary 音乐作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet(count: number, refreshIndex?: number, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet(count, refreshIndex, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 音乐作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 音乐作品数据  # [English] ### Purpose: - Music Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Music Video data
         * @summary 音乐作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet_6(count: number, refreshIndex?: number, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet_6(count, refreshIndex, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 话题作品 ### 参数: - challenge_id: 话题id - sort_type: 排序类型     - 0:综合排序 1:最热排序 2:最新排序 - cursor: 游标 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题作品  # [English] ### Purpose: - Challenge Posts ### Parameters: - challenge_id: Challenge id - sort_type: Sort type     - 0: Comprehensive sorting 1: Hottest sorting 2: Latest sorting - cursor: Cursor - count: Number - cookie: User provided Cookie, used to get more data ### Return: - Challenge Posts  # [示例/Example] challenge_id = \"1750525814851611\" sort_type = 0 offset = 0 cursor = 0 count = 20
         * @summary 话题作品/Challenge Posts
         * @param {ChallengePostRequest} [challengePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchChallengePostsApiV1DouyinWebFetchChallengePostsPost(challengePostRequest?: ChallengePostRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchChallengePostsApiV1DouyinWebFetchChallengePostsPost(challengePostRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 话题作品 ### 参数: - challenge_id: 话题id - sort_type: 排序类型     - 0:综合排序 1:最热排序 2:最新排序 - cursor: 游标 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题作品  # [English] ### Purpose: - Challenge Posts ### Parameters: - challenge_id: Challenge id - sort_type: Sort type     - 0: Comprehensive sorting 1: Hottest sorting 2: Latest sorting - cursor: Cursor - count: Number - cookie: User provided Cookie, used to get more data ### Return: - Challenge Posts  # [示例/Example] challenge_id = \"1750525814851611\" sort_type = 0 offset = 0 cursor = 0 count = 20
         * @summary 话题作品/Challenge Posts
         * @param {ChallengePostRequest} [challengePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchChallengePostsApiV1DouyinWebFetchChallengePostsPost_7(challengePostRequest?: ChallengePostRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchChallengePostsApiV1DouyinWebFetchChallengePostsPost_7(challengePostRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音同城热点榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 - city_code: 城市代码，默认为110000(北京)     - 110000: 北京     - 更多城市代码请参考城市列表接口     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin City Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change - city_code: City code, default is 110000     - 110000: Beijing     - For more city codes, please refer to the city list interface     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### Return: - Hotspot list data
         * @summary 抖音同城热点榜单/Douyin City Hot List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceTag 分类标签/Category tag
         * @param {string} order 排序方式/Sorting method
         * @param {string} cityCode 城市代码/City code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCityHotListApiV1DouyinWebFetchCityHotListGet(page: number, pageSize: number, sentenceTag: string, order: string, cityCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchCityHotListApiV1DouyinWebFetchCityHotListGet(page, pageSize, sentenceTag, order, cityCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音同城热点榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 - city_code: 城市代码，默认为110000(北京)     - 110000: 北京     - 更多城市代码请参考城市列表接口     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin City Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change - city_code: City code, default is 110000     - 110000: Beijing     - For more city codes, please refer to the city list interface     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### Return: - Hotspot list data
         * @summary 抖音同城热点榜单/Douyin City Hot List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceTag 分类标签/Category tag
         * @param {string} order 排序方式/Sorting method
         * @param {string} cityCode 城市代码/City code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCityHotListApiV1DouyinWebFetchCityHotListGet_8(page: number, pageSize: number, sentenceTag: string, order: string, cityCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchCityHotListApiV1DouyinWebFetchCityHotListGet_8(page, pageSize, sentenceTag, order, cityCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音城市列表以及城市ID ### 返回: - 城市列表数据  # [English] ### Purpose: - Douyin City List and City ID ### Return: - City list data
         * @summary 抖音城市列表/Douyin City List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCityListApiV1DouyinWebFetchCityListGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchCityListApiV1DouyinWebFetchCityListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音城市列表以及城市ID ### 返回: - 城市列表数据  # [English] ### Purpose: - Douyin City List and City ID ### Return: - City list data
         * @summary 抖音城市列表/Douyin City List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCityListApiV1DouyinWebFetchCityListGet_9(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchCityListApiV1DouyinWebFetchCityListGet_9(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音Web的游客Cookie - 可以用于爬取抖音Web的数据，如用户作品、合辑作品等。 - 可以固定身份避免部分接口重复数据。 - 请注意：游客Cookie无法爬取所有数据，有一定的限制。 - 可以配合开源项目使用此接口实现抖音Web的数据爬取。 ### 参数: - user_agent: 用户浏览器代理 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get the guest Cookie of Douyin Web - Can be used to crawl data of Douyin Web, such as user videos, mix videos, etc. - Can fix identity to avoid duplicate data for some interfaces. - Please note: Guest Cookie cannot crawl all data, there are certain restrictions. - Can be used with open source projects to implement data crawling of Douyin Web using this interface. ### Parameters: - user_agent: User browser agent ### Return: - Guest Cookie  # [示例/Example] user_agent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\"
         * @summary 获取抖音Web的游客Cookie/Get the guest Cookie of Douyin Web
         * @param {string} userAgent 用户浏览器代理/User browser agent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet(userAgent: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet(userAgent, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音Web的游客Cookie - 可以用于爬取抖音Web的数据，如用户作品、合辑作品等。 - 可以固定身份避免部分接口重复数据。 - 请注意：游客Cookie无法爬取所有数据，有一定的限制。 - 可以配合开源项目使用此接口实现抖音Web的数据爬取。 ### 参数: - user_agent: 用户浏览器代理 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get the guest Cookie of Douyin Web - Can be used to crawl data of Douyin Web, such as user videos, mix videos, etc. - Can fix identity to avoid duplicate data for some interfaces. - Please note: Guest Cookie cannot crawl all data, there are certain restrictions. - Can be used with open source projects to implement data crawling of Douyin Web using this interface. ### Parameters: - user_agent: User browser agent ### Return: - Guest Cookie  # [示例/Example] user_agent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\"
         * @summary 获取抖音Web的游客Cookie/Get the guest Cookie of Douyin Web
         * @param {string} userAgent 用户浏览器代理/User browser agent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet_10(userAgent: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet_10(userAgent, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 游戏作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Game Video data
         * @summary 游戏作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet(count: number, refreshIndex?: number, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet(count, refreshIndex, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 游戏作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Game Video data
         * @summary 游戏作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet_11(count: number, refreshIndex?: number, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet_11(count, refreshIndex, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 -search_range: 0:不限 1:最近看过 2:还未看过 3:关注的人 -content_type: 0:不限 1:视频 2:图集 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - search_range: 0: Unlimited 1: Recently viewed 2: Not yet viewed 3: Followed - content_type: 0: Unlimited 1: Video 2: Album - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"
         * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {string} [searchRange] 搜索范围/Search range
         * @param {string} [contentType] 内容类型/Content type
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, searchRange?: string, contentType?: string, searchId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet(keyword, offset, count, sortType, publishTime, filterDuration, searchRange, contentType, searchId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 -search_range: 0:不限 1:最近看过 2:还未看过 3:关注的人 -content_type: 0:不限 1:视频 2:图集 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - search_range: 0: Unlimited 1: Recently viewed 2: Not yet viewed 3: Followed - content_type: 0: Unlimited 1: Video 2: Album - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"
         * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {string} [searchRange] 搜索范围/Search range
         * @param {string} [contentType] 内容类型/Content type
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet_12(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, searchRange?: string, contentType?: string, searchId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet_12(keyword, offset, count, sortType, publishTime, filterDuration, searchRange, contentType, searchId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取首页推荐数据 ### 参数: - count: 数量，默认为10，建议保持不变。 - refresh_index: 翻页索引，默认为0，然后每次增加1用于翻页。 ### 返回: - Feed数据  # [English] ### Purpose: - Get home feed data ### Parameters: - count: Number, default is 10, it is recommended to keep it unchanged. - refresh_index: Paging index, default is 0, then increase by 1 each time for paging. ### Return: - Feed data  # [示例/Example] count = 10 refresh_index = 0
         * @summary 获取首页推荐数据/Get home feed data
         * @param {number} [count] 数量/Number
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHomeFeedApiV1DouyinWebFetchHomeFeedGet(count?: number, refreshIndex?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchHomeFeedApiV1DouyinWebFetchHomeFeedGet(count, refreshIndex, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取首页推荐数据 ### 参数: - count: 数量，默认为10，建议保持不变。 - refresh_index: 翻页索引，默认为0，然后每次增加1用于翻页。 ### 返回: - Feed数据  # [English] ### Purpose: - Get home feed data ### Parameters: - count: Number, default is 10, it is recommended to keep it unchanged. - refresh_index: Paging index, default is 0, then increase by 1 each time for paging. ### Return: - Feed data  # [示例/Example] count = 10 refresh_index = 0
         * @summary 获取首页推荐数据/Get home feed data
         * @param {number} [count] 数量/Number
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHomeFeedApiV1DouyinWebFetchHomeFeedGet_13(count?: number, refreshIndex?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchHomeFeedApiV1DouyinWebFetchHomeFeedGet_13(count, refreshIndex, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音热点总榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty ### Return: - Hotspot list data
         * @summary 抖音热点总榜单/Douyin Hot List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceTag 分类标签/Category tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotListApiV1DouyinWebFetchHotListGet(page: number, pageSize: number, sentenceTag: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchHotListApiV1DouyinWebFetchHotListGet(page, pageSize, sentenceTag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音热点总榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty ### Return: - Hotspot list data
         * @summary 抖音热点总榜单/Douyin Hot List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceTag 分类标签/Category tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotListApiV1DouyinWebFetchHotListGet_14(page: number, pageSize: number, sentenceTag: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchHotListApiV1DouyinWebFetchHotListGet_14(page, pageSize, sentenceTag, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音热榜数据 ### 返回: - 热榜数据  # [English] ### Purpose: - Get Douyin hot search results ### Return: - Hot search results
         * @summary 获取抖音热榜数据/Get Douyin hot search results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音热榜数据 ### 返回: - 热榜数据  # [English] ### Purpose: - Get Douyin hot search results ### Return: - Hot search results
         * @summary 获取抖音热榜数据/Get Douyin hot search results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet_15(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet_15(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 知识作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Knowledge Video data
         * @summary 知识作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet(count: number, refreshIndex?: number, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet(count, refreshIndex, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 知识作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Knowledge Video data
         * @summary 知识作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet_16(count: number, refreshIndex?: number, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet_16(count, refreshIndex, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播间送礼用户排行榜 ### 参数: - room_id: 直播间room_id - rank_type: 排行类型，默认为30不用修改。 ### 返回: - 排行榜数据  # [English] ### Purpose: - Get live room gift user ranking ### Parameters: - room_id: Room room_id - rank_type: Leaderboard type, default is 30, no need to modify. ### Return: - Leaderboard data  # [示例/Example] room_id = \"7356585666190461731\" rank_type = 30
         * @summary 获取直播间送礼用户排行榜/Get live room gift user ranking
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {number} [rankType] 排行类型/Leaderboard type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet(roomId: string, rankType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet(roomId, rankType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播间送礼用户排行榜 ### 参数: - room_id: 直播间room_id - rank_type: 排行类型，默认为30不用修改。 ### 返回: - 排行榜数据  # [English] ### Purpose: - Get live room gift user ranking ### Parameters: - room_id: Room room_id - rank_type: Leaderboard type, default is 30, no need to modify. ### Return: - Leaderboard data  # [示例/Example] room_id = \"7356585666190461731\" rank_type = 30
         * @summary 获取直播间送礼用户排行榜/Get live room gift user ranking
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {number} [rankType] 排行类型/Leaderboard type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet_17(roomId: string, rankType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet_17(roomId, rankType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音直播间商品信息 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie，如获取失败请手动过一次验证码) - room_id: 直播间room_id - author_id: 作者id - limit: 数量 ### 返回: - 商品信息  # [English] ### Purpose: - Douyin live room product information ### Parameters: - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie, if the acquisition fails, please manually pass the captcha code once) - room_id: Room room_id - author_id: Author id - limit: Number ### Return: - Product information  # [示例/Example] cookie = \"YOUR_COOKIE\" room_id = \"7356742011975715619\" author_id = \"2207432981615527\" limit = 20
         * @summary 抖音直播间商品信息/Douyin live room product information
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {string} authorId 作者id/Author id
         * @param {number} [limit] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet(roomId: string, authorId: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet(roomId, authorId, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音直播间商品信息 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie，如获取失败请手动过一次验证码) - room_id: 直播间room_id - author_id: 作者id - limit: 数量 ### 返回: - 商品信息  # [English] ### Purpose: - Douyin live room product information ### Parameters: - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie, if the acquisition fails, please manually pass the captcha code once) - room_id: Room room_id - author_id: Author id - limit: Number ### Return: - Product information  # [示例/Example] cookie = \"YOUR_COOKIE\" room_id = \"7356742011975715619\" author_id = \"2207432981615527\" limit = 20
         * @summary 抖音直播间商品信息/Douyin live room product information
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {string} authorId 作者id/Author id
         * @param {number} [limit] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_18(roomId: string, authorId: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_18(roomId, authorId, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果/Get live search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet(keyword: string, offset?: number, count?: number, searchId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet(keyword, offset, count, searchId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果/Get live search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet_19(keyword: string, offset?: number, count?: number, searchId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet_19(keyword, offset, count, searchId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持50个视频，此接口收费固定价格为0.001$ * 50 = 0.05$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持50个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 50 videos at a time, this interface charges a fixed price of 0.001$ * 50 = 0.05$ each time. ### Parameters: - aweme_ids: List of video ids, up to 50 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\"]
         * @summary 批量获取视频信息/Batch Get Video Information
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMultiVideoApiV1DouyinWebFetchMultiVideoPost(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchMultiVideoApiV1DouyinWebFetchMultiVideoPost(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持50个视频，此接口收费固定价格为0.001$ * 50 = 0.05$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持50个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 50 videos at a time, this interface charges a fixed price of 0.001$ * 50 = 0.05$ each time. ### Parameters: - aweme_ids: List of video ids, up to 50 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\"]
         * @summary 批量获取视频信息/Batch Get Video Information
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMultiVideoApiV1DouyinWebFetchMultiVideoPost_20(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchMultiVideoApiV1DouyinWebFetchMultiVideoPost_20(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法保障稳定性，如果有爬取单一视频需求，请使用下面的接口。 - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot guarantee stability. If you need to crawl a single video, please use the following interface. - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据，此接口即将废弃，请使用APP接口/Get single video data, this endpoint will be deprecated soon, please use APP endpoint
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1DouyinWebFetchOneVideoGet(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchOneVideoApiV1DouyinWebFetchOneVideoGet(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法保障稳定性，如果有爬取单一视频需求，请使用下面的接口。 - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot guarantee stability. If you need to crawl a single video, please use the following interface. - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据，此接口即将废弃，请使用APP接口/Get single video data, this endpoint will be deprecated soon, please use APP endpoint
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1DouyinWebFetchOneVideoGet_21(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchOneVideoApiV1DouyinWebFetchOneVideoGet_21(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据 V2/Get single video data V2
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据 V2/Get single video data V2
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get_22(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get_22(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet(shareUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet(shareUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet_23(shareUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet_23(shareUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品视频弹幕数据 ### 参数: - item_id: 作品id - duration: 视频总时长 - end_time: 结束时间 - start_time: 开始时间 ### 返回: - 视频弹幕数据  # [English] ### Purpose: - Get single video danmaku data ### Parameters: - item_id: Video id - duration: Video total duration - end_time: End time - start_time: Start time ### Return: - Video danmaku data  # [示例/Example] item_id = \"7355433624046472498\" duration = 15134 end_time = 15133 start_time = 0
         * @summary 获取单个作品视频弹幕数据/Get single video danmaku data
         * @param {string} itemId 作品id/Video id
         * @param {number} duration 视频总时长/Video total duration
         * @param {number} endTime 结束时间/End time
         * @param {number} startTime 开始时间/Start time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet(itemId: string, duration: number, endTime: number, startTime: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet(itemId, duration, endTime, startTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品视频弹幕数据 ### 参数: - item_id: 作品id - duration: 视频总时长 - end_time: 结束时间 - start_time: 开始时间 ### 返回: - 视频弹幕数据  # [English] ### Purpose: - Get single video danmaku data ### Parameters: - item_id: Video id - duration: Video total duration - end_time: End time - start_time: Start time ### Return: - Video danmaku data  # [示例/Example] item_id = \"7355433624046472498\" duration = 15134 end_time = 15133 start_time = 0
         * @summary 获取单个作品视频弹幕数据/Get single video danmaku data
         * @param {string} itemId 作品id/Video id
         * @param {number} duration 视频总时长/Video total duration
         * @param {number} endTime 结束时间/End time
         * @param {number} startTime 开始时间/Start time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet_24(itemId: string, duration: number, endTime: number, startTime: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet_24(itemId, duration, endTime, startTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音实时挑战榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 ### 返回: - 挑战榜数据  # [English] ### Purpose: - Douyin Real-time Challenge List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 ### Return: - Challenge list data
         * @summary 抖音实时挑战榜单/Douyin Real-time Challenge List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet(page: number, pageSize: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet(page, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音实时挑战榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 ### 返回: - 挑战榜数据  # [English] ### Purpose: - Douyin Real-time Challenge List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 ### Return: - Challenge list data
         * @summary 抖音实时挑战榜单/Douyin Real-time Challenge List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet_25(page: number, pageSize: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet_25(page, pageSize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音实时上升热点榜 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Real-time Rising Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change ### Return: - Hotspot list data
         * @summary 抖音实时上升热点榜/Douyin Real-time Rising Hot List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceTag 分类标签/Category tag
         * @param {string} order 排序方式/Sorting method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet(page: number, pageSize: number, sentenceTag: string, order: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet(page, pageSize, sentenceTag, order, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音实时上升热点榜 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Real-time Rising Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change ### Return: - Hotspot list data
         * @summary 抖音实时上升热点榜/Douyin Real-time Rising Hot List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceTag 分类标签/Category tag
         * @param {string} order 排序方式/Sorting method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet_26(page: number, pageSize: number, sentenceTag: string, order: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet_26(page, pageSize, sentenceTag, order, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取相关作品推荐数据 ### 参数: - aweme_id: 作品id - refresh_index: 翻页索引，默认为1，然后每次增加1用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 作品数据  # [English] ### Purpose: - Get related posts recommendation data ### Parameters: - aweme_id: Video id - refresh_index: Paging index, default is 1, then increase by 1 each time for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Video data  # [示例/Example] aweme_id = \"7393365489105358132\" refresh_index = 1 count = 20
         * @summary 获取相关作品推荐数据/Get related posts recommendation data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet(awemeId: string, refreshIndex?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet(awemeId, refreshIndex, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取相关作品推荐数据 ### 参数: - aweme_id: 作品id - refresh_index: 翻页索引，默认为1，然后每次增加1用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 作品数据  # [English] ### Purpose: - Get related posts recommendation data ### Parameters: - aweme_id: Video id - refresh_index: Paging index, default is 1, then increase by 1 each time for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Video data  # [示例/Example] aweme_id = \"7393365489105358132\" refresh_index = 1 count = 20
         * @summary 获取相关作品推荐数据/Get related posts recommendation data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet_27(awemeId: string, refreshIndex?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet_27(awemeId, refreshIndex, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索话题，此接口不带Cookie请求时只能获取到前30条数据，建议自行提供Cookie获取更多数据。 - Cookie获取方式：打开网页抖音，登录后，按F12打开开发者工具，点击Network，刷新页面，找到第一个请求，复制Cookie。 ### 参数: - keyword: 关键词 - cursor: 偏移量 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Search Challenge, when this interface is requested without Cookie, only the first 30 data can be obtained, it is recommended to provide Cookie to get more data. - Cookie acquisition method: Open the Douyin webpage, log in, press F12 to open the developer tool, click Network, refresh the page, find the first request, copy the Cookie. ### Parameters: - keyword: Keyword - cursor: Offset - count: Number - cookie: User provided Cookie, used to get more data. ### Return: - Challenge search results  # [示例/Example] keyword = \"动漫\" cursor = 0 count = 20
         * @summary 搜索话题/Search Challenge
         * @param {SearchChallengeRequest} [searchChallengeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost(searchChallengeRequest?: SearchChallengeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost(searchChallengeRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索话题，此接口不带Cookie请求时只能获取到前30条数据，建议自行提供Cookie获取更多数据。 - Cookie获取方式：打开网页抖音，登录后，按F12打开开发者工具，点击Network，刷新页面，找到第一个请求，复制Cookie。 ### 参数: - keyword: 关键词 - cursor: 偏移量 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Search Challenge, when this interface is requested without Cookie, only the first 30 data can be obtained, it is recommended to provide Cookie to get more data. - Cookie acquisition method: Open the Douyin webpage, log in, press F12 to open the developer tool, click Network, refresh the page, find the first request, copy the Cookie. ### Parameters: - keyword: Keyword - cursor: Offset - count: Number - cookie: User provided Cookie, used to get more data. ### Return: - Challenge search results  # [示例/Example] keyword = \"动漫\" cursor = 0 count = 20
         * @summary 搜索话题/Search Challenge
         * @param {SearchChallengeRequest} [searchChallengeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost_28(searchChallengeRequest?: SearchChallengeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost_28(searchChallengeRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 短剧作品 ### 参数: - offset: 页码，默认为0 - count: 每页数量，默认为16 - content_type: 子类型，默认为0     - 0: 热榜     - 101: 甜宠     - 102: 搞笑     - 104: 正能量     - 105: 成长     - 106: 悬疑     - 109: 家庭     - 110: 都市     - 112: 奇幻     - 113: 玄幻     - 114: 职场     - 115: 青春     - 116: 古装     - 117: 动作     - 119: 逆袭     - 124: 其他 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie ### 返回: - 短剧作品数据  # [English] ### Purpose: - Series Video ### Parameters: - offset: Page number, default is 0 - count: Number per page, default is 16 - content_type: Subtype, default is 0     - 0: Hot list     - 101: Sweet pet     - 102: Funny     - 104: Positive energy     - 105: Growth     - 106: Suspense     - 109: Family     - 110: Urban     - 112: Fantasy     - 113: Fantasy     - 114: Workplace     - 115: Youth     - 116: Ancient costume     - 117: Action     - 119: Counterattack     - 124: Other - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Series Video data
         * @summary 短剧作品/Series Video
         * @param {number} offset 页码/Page number
         * @param {number} count 每页数量/Number per page
         * @param {number} contentType 短剧类型/Subtype
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet(offset: number, count: number, contentType: number, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet(offset, count, contentType, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 短剧作品 ### 参数: - offset: 页码，默认为0 - count: 每页数量，默认为16 - content_type: 子类型，默认为0     - 0: 热榜     - 101: 甜宠     - 102: 搞笑     - 104: 正能量     - 105: 成长     - 106: 悬疑     - 109: 家庭     - 110: 都市     - 112: 奇幻     - 113: 玄幻     - 114: 职场     - 115: 青春     - 116: 古装     - 117: 动作     - 119: 逆袭     - 124: 其他 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie ### 返回: - 短剧作品数据  # [English] ### Purpose: - Series Video ### Parameters: - offset: Page number, default is 0 - count: Number per page, default is 16 - content_type: Subtype, default is 0     - 0: Hot list     - 101: Sweet pet     - 102: Funny     - 104: Positive energy     - 105: Growth     - 106: Suspense     - 109: Family     - 110: Urban     - 112: Fantasy     - 113: Fantasy     - 114: Workplace     - 115: Youth     - 116: Ancient costume     - 117: Action     - 119: Counterattack     - 124: Other - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Series Video data
         * @summary 短剧作品/Series Video
         * @param {number} offset 页码/Page number
         * @param {number} count 每页数量/Number per page
         * @param {number} contentType 短剧类型/Subtype
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_29(offset: number, count: number, contentType: number, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_29(offset, count, contentType, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection video data ### Parameters: - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie) - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] cookie = \"YOUR_COOKIE\" max_cursor = 0 counts = 20
         * @summary 获取用户收藏作品数据/Get user collection video data
         * @param {string} cookie 用户网页版抖音Cookie/Your web version of Douyin Cookie
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet(cookie: string, maxCursor?: number, counts?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet(cookie, maxCursor, counts, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection video data ### Parameters: - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie) - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] cookie = \"YOUR_COOKIE\" max_cursor = 0 counts = 20
         * @summary 获取用户收藏作品数据/Get user collection video data
         * @param {string} cookie 用户网页版抖音Cookie/Your web version of Douyin Cookie
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet_30(cookie: string, maxCursor?: number, counts?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet_30(cookie, maxCursor, counts, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户收藏夹数据 ### 参数: - collects_id: 收藏夹id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection data ### Parameters: - collects_id: Collection id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] collects_id = \"\" max_cursor = 0 counts = 20
         * @summary 获取用户收藏夹数据/Get user collection data
         * @param {string} collectsId 收藏夹id/Collection id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet(collectsId: string, maxCursor?: number, counts?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet(collectsId, maxCursor, counts, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户收藏夹数据 ### 参数: - collects_id: 收藏夹id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection data ### Parameters: - collects_id: Collection id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] collects_id = \"\" max_cursor = 0 counts = 20
         * @summary 获取用户收藏夹数据/Get user collection data
         * @param {string} collectsId 收藏夹id/Collection id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet_31(collectsId: string, maxCursor?: number, counts?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet_31(collectsId, maxCursor, counts, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音用户粉丝兴趣 ### 参数: - sec_uid: 用户sec_uid - interest_type: 兴趣类型，默认为search     - similar_author: 粉丝感兴趣同类型作者     - interest_topic: 粉丝近3天感兴趣的话题     - search: 粉丝近3天搜索词 ### 返回: - 用户粉丝兴趣数据  # [English] ### Purpose: - Douyin User Fans Interest ### Parameters: - sec_uid: Sec_uid of user - interest_type: Interest type, default is search     - similar_author: Fans interested in the same type of author     - interest_topic: Topics that fans are interested in the last 3 days     - search: Search terms for fans in the last 3 days ### Return: - User fans interest data
         * @summary 抖音用户粉丝兴趣/Douyin User Fans Interest
         * @param {string} secUid 用户sec_uid/Sec_uid of user
         * @param {string} interestType 兴趣类型/Interest type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet(secUid: string, interestType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet(secUid, interestType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音用户粉丝兴趣 ### 参数: - sec_uid: 用户sec_uid - interest_type: 兴趣类型，默认为search     - similar_author: 粉丝感兴趣同类型作者     - interest_topic: 粉丝近3天感兴趣的话题     - search: 粉丝近3天搜索词 ### 返回: - 用户粉丝兴趣数据  # [English] ### Purpose: - Douyin User Fans Interest ### Parameters: - sec_uid: Sec_uid of user - interest_type: Interest type, default is search     - similar_author: Fans interested in the same type of author     - interest_topic: Topics that fans are interested in the last 3 days     - search: Search terms for fans in the last 3 days ### Return: - User fans interest data
         * @summary 抖音用户粉丝兴趣/Douyin User Fans Interest
         * @param {string} secUid 用户sec_uid/Sec_uid of user
         * @param {string} interestType 兴趣类型/Interest type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet_32(secUid: string, interestType: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet_32(secUid, interestType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。  ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2
         * @summary 获取用户粉丝列表/Get user fans list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {number} [sourceType] 来源类型/Source type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFansListApiV1DouyinWebFetchUserFansListGet(secUserId?: string, maxTime?: string, count?: number, sourceType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserFansListApiV1DouyinWebFetchUserFansListGet(secUserId, maxTime, count, sourceType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。  ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2
         * @summary 获取用户粉丝列表/Get user fans list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {number} [sourceType] 来源类型/Source type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFansListApiV1DouyinWebFetchUserFansListGet_33(secUserId?: string, maxTime?: string, count?: number, sourceType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserFansListApiV1DouyinWebFetchUserFansListGet_33(secUserId, maxTime, count, sourceType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音用户粉丝画像 ### 参数: - sec_uid: 用户sec_uid - option: 选项，默认为1     - 1: 粉丝手机价格分布     - 2: 粉丝性别分布     - 3: 粉丝年龄分布     - 4: 粉丝地域分布(省份)     - 5: 粉丝地域分布（城市）     - 6: 粉丝城市等级分布     - 7: 粉丝手机品牌分布     - 8: 粉丝兴趣 ### 返回: - 用户粉丝画像数据  # [English] ### Purpose: - Douyin User Fans Portrait ### Parameters: - sec_uid: Sec_uid of user - option: Option, default is 1     - 1: Fans mobile phone price distribution     - 2: Fans gender distribution     - 3: Fans age distribution     - 4: Fans regional distribution (province)     - 5: Fans regional distribution (city)     - 6: Fans city level distribution     - 7: Fans mobile phone brand distribution     - 8: Fans interests ### Return: - User fans portrait data
         * @summary 抖音用户粉丝画像/Douyin User Fans Portrait
         * @param {string} secUid 用户sec_uid/Sec_uid of user
         * @param {string} [option] 选项/Option
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet(secUid: string, option?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet(secUid, option, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音用户粉丝画像 ### 参数: - sec_uid: 用户sec_uid - option: 选项，默认为1     - 1: 粉丝手机价格分布     - 2: 粉丝性别分布     - 3: 粉丝年龄分布     - 4: 粉丝地域分布(省份)     - 5: 粉丝地域分布（城市）     - 6: 粉丝城市等级分布     - 7: 粉丝手机品牌分布     - 8: 粉丝兴趣 ### 返回: - 用户粉丝画像数据  # [English] ### Purpose: - Douyin User Fans Portrait ### Parameters: - sec_uid: Sec_uid of user - option: Option, default is 1     - 1: Fans mobile phone price distribution     - 2: Fans gender distribution     - 3: Fans age distribution     - 4: Fans regional distribution (province)     - 5: Fans regional distribution (city)     - 6: Fans city level distribution     - 7: Fans mobile phone brand distribution     - 8: Fans interests ### Return: - User fans portrait data
         * @summary 抖音用户粉丝画像/Douyin User Fans Portrait
         * @param {string} secUid 用户sec_uid/Sec_uid of user
         * @param {string} [option] 选项/Option
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet_34(secUid: string, option?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet_34(secUid, option, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2
         * @summary 获取用户关注列表/Get user following list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {number} [sourceType] 来源类型/Source type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet(secUserId?: string, maxTime?: string, count?: number, sourceType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet(secUserId, maxTime, count, sourceType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2
         * @summary 获取用户关注列表/Get user following list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {number} [sourceType] 来源类型/Source type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet_35(secUserId?: string, maxTime?: string, count?: number, sourceType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet_35(secUserId, maxTime, count, sourceType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标 - count: 最大数量 - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor - count: Maximum count number - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {string} [cookie] 用户网页版抖音Cookie/Your web version of Douyin Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet(secUserId, maxCursor, counts, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标 - count: 最大数量 - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor - count: Maximum count number - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {string} [cookie] 用户网页版抖音Cookie/Your web version of Douyin Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet_36(secUserId: string, maxCursor?: number, counts?: number, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet_36(secUserId, maxCursor, counts, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 使用UID获取用户开播信息 ### 参数: - uid: 用户UID ### 返回: - 用户开播信息，包含room_id与live_status  # [English] ### Purpose: - Get user live information by UID ### Parameters: - uid: User UID ### Return: - User live information, including room_id and live_status  # [示例/Example] uid = \"3081254195702747\"
         * @summary 使用UID获取用户开播信息/Get user live information by UID
         * @param {string} uid 用户UID/User UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 使用UID获取用户开播信息 ### 参数: - uid: 用户UID ### 返回: - 用户开播信息，包含room_id与live_status  # [English] ### Purpose: - Get user live information by UID ### Parameters: - uid: User UID ### Return: - User live information, including room_id and live_status  # [示例/Example] uid = \"3081254195702747\"
         * @summary 使用UID获取用户开播信息/Get user live information by UID
         * @param {string} uid 用户UID/User UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet_37(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet_37(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户直播流数据 ### 参数: - webcast_id: 直播间 webcast_id - 获取方法：     - 假设你的直播间链接为：https://www.douyin.com/root/live/376034101029     - 那么直播间webcast_id为：376034101029     - webcast_id为直播间链接的最后一段数字，与room_id不同。 ### 返回: - 直播流数据  # [English] ### Purpose: - Get user live video data ### Parameters: - webcast_id: Room webcast_id - Acquisition method:     - Assuming your live room link is: https://www.douyin.com/root/live/376034101029     - Then the live room webcast_id is: 376034101029     - The webcast_id is the last number of the live room link, which is different from the room_id. ### Return: - Live stream data  # [示例/Example] webcast_id = \"376034101029\"
         * @summary 获取用户直播流数据/Get user live video data
         * @param {string} webcastId 直播间webcast_id/Room webcast_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet(webcastId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet(webcastId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户直播流数据 ### 参数: - webcast_id: 直播间 webcast_id - 获取方法：     - 假设你的直播间链接为：https://www.douyin.com/root/live/376034101029     - 那么直播间webcast_id为：376034101029     - webcast_id为直播间链接的最后一段数字，与room_id不同。 ### 返回: - 直播流数据  # [English] ### Purpose: - Get user live video data ### Parameters: - webcast_id: Room webcast_id - Acquisition method:     - Assuming your live room link is: https://www.douyin.com/root/live/376034101029     - Then the live room webcast_id is: 376034101029     - The webcast_id is the last number of the live room link, which is different from the room_id. ### Return: - Live stream data  # [示例/Example] webcast_id = \"376034101029\"
         * @summary 获取用户直播流数据/Get user live video data
         * @param {string} webcastId 直播间webcast_id/Room webcast_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet_38(webcastId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet_38(webcastId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的直播流数据 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Get live video data of specified user ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7318296342189919011\"
         * @summary 获取指定用户的直播流数据/Get live video data of specified user
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet(roomId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet(roomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的直播流数据 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Get live video data of specified user ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7318296342189919011\"
         * @summary 获取指定用户的直播流数据/Get live video data of specified user
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet_39(roomId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet_39(roomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的直播流数据V2 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Gets the live stream data of the specified user V2 ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7462723839303093032\"
         * @summary 获取指定用户的直播流数据V2/Gets the live stream data of the specified user V2
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get(roomId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get(roomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的直播流数据V2 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Gets the live stream data of the specified user V2 ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7462723839303093032\"
         * @summary 获取指定用户的直播流数据V2/Gets the live stream data of the specified user V2
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get_40(roomId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get_40(roomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过sec_uid获取指定用户的直播流数据 ### 参数: - sec_uid: 用户sec_uid，也叫 sec_user_id，可以在用户主页链接中找到。 ### 返回: - 直播流数据  # [English] ### Purpose - Get live video data of specified user by sec_uid ### Parameters - sec_uid: User sec_uid, also called sec_user_id, can be found in the user\'s homepage link. ### Return - Live stream data  # [示例/Example] sec_uid = \"MS4wLjABAAAAAIKOBr_x6p2fPVKOAhqG8LrC1lwwdWChifKEsl-TXFS-kGSGqpMBRexJdzoAfvUF\"
         * @summary 通过sec_uid获取指定用户的直播流数据/Get live video data of specified user by sec_uid
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet(secUid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet(secUid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过sec_uid获取指定用户的直播流数据 ### 参数: - sec_uid: 用户sec_uid，也叫 sec_user_id，可以在用户主页链接中找到。 ### 返回: - 直播流数据  # [English] ### Purpose - Get live video data of specified user by sec_uid ### Parameters - sec_uid: User sec_uid, also called sec_user_id, can be found in the user\'s homepage link. ### Return - Live stream data  # [示例/Example] sec_uid = \"MS4wLjABAAAAAIKOBr_x6p2fPVKOAhqG8LrC1lwwdWChifKEsl-TXFS-kGSGqpMBRexJdzoAfvUF\"
         * @summary 通过sec_uid获取指定用户的直播流数据/Get live video data of specified user by sec_uid
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet_41(secUid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet_41(secUid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户合辑作品数据 ### 参数: - mix_id: 合辑id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user mix video data ### Parameters: - mix_id: Mix id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] url = https://www.douyin.com/collection/7348687990509553679 mix_id = \"7348687990509553679\" max_cursor = 0 counts = 20
         * @summary 获取用户合辑作品数据/Get user mix video data
         * @param {string} mixId 合辑id/Mix id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet(mixId: string, maxCursor?: number, counts?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet(mixId, maxCursor, counts, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户合辑作品数据 ### 参数: - mix_id: 合辑id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user mix video data ### Parameters: - mix_id: Mix id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] url = https://www.douyin.com/collection/7348687990509553679 mix_id = \"7348687990509553679\" max_cursor = 0 counts = 20
         * @summary 获取用户合辑作品数据/Get user mix video data
         * @param {string} mixId 合辑id/Mix id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet_42(mixId: string, maxCursor?: number, counts?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet_42(mixId, maxCursor, counts, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 - 注意：请尽量使用APP的接口而不是WEB的接口，因为WEB的接口可能会被不稳定。 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 翻页游标，第一次请求传0，然后每次请求传上一次请求返回的max_cursor进行翻页。 - count: 最大数量，建议不要超过20 - filter_type: 过滤类型，可选参数如下：     - 0: 默认排序     - 3: 热度排序 - cookie: 用户网页版抖音Cookie(此接口可以接受用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data - Note: Please try to use the APP interface instead of the WEB API, because the WEB API may be unstable. ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Paging cursor, pass 0 for the first request, and then pass the max_cursor returned by the previous request for paging each time. - count: Maximum count number, it is recommended not to exceed 20 - filter_type: Filter type, optional parameters are as follows:     - 0: Default sorting     - 3: Sort by popularity - cookie: User\'s web version of Douyin Cookie (This interface can accept users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = \"0\" counts = 20 filter_type = \"0\"
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {string} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {string} [filterType] 过滤类型/Filter type
         * @param {string} [cookie] 用户网页版抖音Cookie/Your web version of Douyin Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet(secUserId: string, maxCursor?: string, count?: number, filterType?: string, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet(secUserId, maxCursor, count, filterType, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 - 注意：请尽量使用APP的接口而不是WEB的接口，因为WEB的接口可能会被不稳定。 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 翻页游标，第一次请求传0，然后每次请求传上一次请求返回的max_cursor进行翻页。 - count: 最大数量，建议不要超过20 - filter_type: 过滤类型，可选参数如下：     - 0: 默认排序     - 3: 热度排序 - cookie: 用户网页版抖音Cookie(此接口可以接受用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data - Note: Please try to use the APP interface instead of the WEB API, because the WEB API may be unstable. ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Paging cursor, pass 0 for the first request, and then pass the max_cursor returned by the previous request for paging each time. - count: Maximum count number, it is recommended not to exceed 20 - filter_type: Filter type, optional parameters are as follows:     - 0: Default sorting     - 3: Sort by popularity - cookie: User\'s web version of Douyin Cookie (This interface can accept users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = \"0\" counts = 20 filter_type = \"0\"
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {string} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {string} [filterType] 过滤类型/Filter type
         * @param {string} [cookie] 用户网页版抖音Cookie/Your web version of Douyin Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet_43(secUserId: string, maxCursor?: string, count?: number, filterType?: string, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet_43(secUserId, maxCursor, count, filterType, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 使用Short ID获取用户信息 ### 参数: - short_id: 用户Short ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by Short ID ### Parameters: - short_id: User Short ID ### Return: - User information  # [示例/Example] short_id = \"114131058\"
         * @summary 使用Short ID获取用户信息/Get user information by Short ID
         * @param {string} shortId 用户Short ID/User Short ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet(shortId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet(shortId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 使用Short ID获取用户信息 ### 参数: - short_id: 用户Short ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by Short ID ### Parameters: - short_id: User Short ID ### Return: - User information  # [示例/Example] short_id = \"114131058\"
         * @summary 使用Short ID获取用户信息/Get user information by Short ID
         * @param {string} shortId 用户Short ID/User Short ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet_44(shortId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet_44(shortId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 使用UID获取用户信息 ### 参数: - uid: 用户UID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by UID ### Parameters: - uid: User UID ### Return: - User information  # [示例/Example] uid = \"68141954464\"
         * @summary 使用UID获取用户信息/Get user information by UID
         * @param {string} uid 用户UID/User UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 使用UID获取用户信息 ### 参数: - uid: 用户UID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by UID ### Parameters: - uid: User UID ### Return: - User information  # [示例/Example] uid = \"68141954464\"
         * @summary 使用UID获取用户信息/Get user information by UID
         * @param {string} uid 用户UID/User UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet_45(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet_45(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20 douyin_user_fans = \"\" douyin_user_type = \"\" search_id = \"\"
         * @summary 获取指定关键词的用户搜索结果(已废弃，使用V2或V3接口代替)/Get user search results of specified keywords (deprecated, use V2 or V3 interface instead)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [douyinUserFans] 粉丝数/Fans
         * @param {string} [douyinUserType] 用户类型/User type
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet(keyword: string, offset?: number, count?: number, douyinUserFans?: string, douyinUserType?: string, searchId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet(keyword, offset, count, douyinUserFans, douyinUserType, searchId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20 douyin_user_fans = \"\" douyin_user_type = \"\" search_id = \"\"
         * @summary 获取指定关键词的用户搜索结果(已废弃，使用V2或V3接口代替)/Get user search results of specified keywords (deprecated, use V2 or V3 interface instead)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [douyinUserFans] 粉丝数/Fans
         * @param {string} [douyinUserType] 用户类型/User type
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet_46(keyword: string, offset?: number, count?: number, douyinUserFans?: string, douyinUserType?: string, searchId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet_46(keyword, offset, count, douyinUserFans, douyinUserType, searchId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V2 ### 参数: - keyword: 关键词 - cursor: 游标，第一次请求时为0，后续从返回数据中获取，用于翻页。 ### 返回: - 用户搜索结果V2  # [English] ### Purpose: - Get user search results of specified keywords V2 ### Parameters: - keyword: Keyword - cursor: Cursor, 0 for the first request, get from the returned data later, used for paging. ### Return: - User search results V2  # [示例/Example] keyword = \"中华娘\" cursor = 0
         * @summary 获取指定关键词的用户搜索结果V2/Get user search results of specified keywords V2
         * @param {string} keyword 关键词/Keyword
         * @param {number} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get(keyword: string, cursor?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get(keyword, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V2 ### 参数: - keyword: 关键词 - cursor: 游标，第一次请求时为0，后续从返回数据中获取，用于翻页。 ### 返回: - 用户搜索结果V2  # [English] ### Purpose: - Get user search results of specified keywords V2 ### Parameters: - keyword: Keyword - cursor: Cursor, 0 for the first request, get from the returned data later, used for paging. ### Return: - User search results V2  # [示例/Example] keyword = \"中华娘\" cursor = 0
         * @summary 获取指定关键词的用户搜索结果V2/Get user search results of specified keywords V2
         * @param {string} keyword 关键词/Keyword
         * @param {number} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get_47(keyword: string, cursor?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get_47(keyword, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V3 ### 参数: - keyword: 关键词 - cursor: 偏移量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords V3 ### Parameters: - keyword: Keyword - cursor: Offset - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"中华娘\" cursor = \"0\" douyin_user_fans = \"\" douyin_user_type = \"\"
         * @summary 获取指定关键词的用户搜索结果V3/Get user search results of specified keywords V3
         * @param {string} keyword 关键词/Keyword
         * @param {string} [cursor] 游标/Cursor
         * @param {string} [douyinUserType] 用户类型/User type
         * @param {string} [douyinUserFans] 粉丝数/Fans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get(keyword: string, cursor?: string, douyinUserType?: string, douyinUserFans?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get(keyword, cursor, douyinUserType, douyinUserFans, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V3 ### 参数: - keyword: 关键词 - cursor: 偏移量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords V3 ### Parameters: - keyword: Keyword - cursor: Offset - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"中华娘\" cursor = \"0\" douyin_user_fans = \"\" douyin_user_type = \"\"
         * @summary 获取指定关键词的用户搜索结果V3/Get user search results of specified keywords V3
         * @param {string} keyword 关键词/Keyword
         * @param {string} [cursor] 游标/Cursor
         * @param {string} [douyinUserType] 用户类型/User type
         * @param {string} [douyinUserFans] 粉丝数/Fans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get_48(keyword: string, cursor?: string, douyinUserType?: string, douyinUserFans?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get_48(keyword, cursor, douyinUserType, douyinUserFans, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音视频榜单 ### 参数: - date: 日期，默认为24     - 1: 一小时内     - 24: 一天内     - 72: 3天内     - 168: 7天内 - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sub_type: 子类型，默认为1001     - 1001: 视频总榜     - 1002: 低粉爆款     - 1003: 高完播率     - 1004: 高涨粉率     - 1005: 高点赞率 ### 返回: - 视频榜单数据  # [English] ### Purpose: - Douyin Video Billboard ### Parameters: - date: Date, default is 24     - 1: Within an hour     - 24: Within a day     - 72: Within 3 days     - 168: Within 7 days - page: Page number, default is 1 - page_size: Number per page, default is 10 - sub_type: Subtype, default is 1001     - 1001: Total video list     - 1002: Low fans explosion     - 1003: High completion rate     - 1004: High increase rate     - 1005: High like rate ### Return: - Video billboard data
         * @summary 抖音视频榜单/Douyin Video Billboard
         * @param {number} date 日期/Date
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {number} subType 子类型/Subtype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet(date: number, page: number, pageSize: number, subType: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet(date, page, pageSize, subType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音视频榜单 ### 参数: - date: 日期，默认为24     - 1: 一小时内     - 24: 一天内     - 72: 3天内     - 168: 7天内 - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sub_type: 子类型，默认为1001     - 1001: 视频总榜     - 1002: 低粉爆款     - 1003: 高完播率     - 1004: 高涨粉率     - 1005: 高点赞率 ### 返回: - 视频榜单数据  # [English] ### Purpose: - Douyin Video Billboard ### Parameters: - date: Date, default is 24     - 1: Within an hour     - 24: Within a day     - 72: Within 3 days     - 168: Within 7 days - page: Page number, default is 1 - page_size: Number per page, default is 10 - sub_type: Subtype, default is 1001     - 1001: Total video list     - 1002: Low fans explosion     - 1003: High completion rate     - 1004: High increase rate     - 1005: High like rate ### Return: - Video billboard data
         * @summary 抖音视频榜单/Douyin Video Billboard
         * @param {number} date 日期/Date
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {number} subType 子类型/Subtype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet_49(date: number, page: number, pageSize: number, subType: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet_49(date, page, pageSize, subType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音视频频道数据 - https://www.douyin.com/channel/300205 ### 参数: - tag_id: 标签id，从URL中获取 - count: 数量 - refresh_index: 刷新索引 ### 返回: - 视频频道数据  # [English] ### Purpose: - Douyin video channel data - https://www.douyin.com/channel/300205 ### Parameters: - tag_id: Tag id, get from the URL - count: Number - refresh_index: Refresh index ### Return: - Video channel data  # [示例/Example] tag_id = 300203 count = 10 refresh_index = 1
         * @summary 抖音视频频道数据/Douyin video channel data
         * @param {number} tagId 标签id/Tag id
         * @param {number} [count] 数量/Number
         * @param {number} [refreshIndex] 刷新索引/Refresh index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet(tagId: number, count?: number, refreshIndex?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet(tagId, count, refreshIndex, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音视频频道数据 - https://www.douyin.com/channel/300205 ### 参数: - tag_id: 标签id，从URL中获取 - count: 数量 - refresh_index: 刷新索引 ### 返回: - 视频频道数据  # [English] ### Purpose: - Douyin video channel data - https://www.douyin.com/channel/300205 ### Parameters: - tag_id: Tag id, get from the URL - count: Number - refresh_index: Refresh index ### Return: - Video channel data  # [示例/Example] tag_id = 300203 count = 10 refresh_index = 1
         * @summary 抖音视频频道数据/Douyin video channel data
         * @param {number} tagId 标签id/Tag id
         * @param {number} [count] 数量/Number
         * @param {number} [refreshIndex] 刷新索引/Refresh index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet_50(tagId: number, count?: number, refreshIndex?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet_50(tagId, count, refreshIndex, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet(awemeId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet_51(awemeId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet_51(awemeId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet(itemId, commentId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_52(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_52(itemId, commentId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: 获取视频新增粉丝数量 ### 参数: - aweme_id: 作品id ### 返回: - 新增粉丝数量  # [English] ### Purpose: Get video new fans count ### Parameters: - aweme_id: Video id ### Return: - New Fans count  # [示例/Example] aweme_id = \"7429296623961853234\"
         * @summary 获取视频新增粉丝数量/Get video new fans count
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: 获取视频新增粉丝数量 ### 参数: - aweme_id: 作品id ### 返回: - 新增粉丝数量  # [English] ### Purpose: Get video new fans count ### Parameters: - aweme_id: Video id ### Return: - New Fans count  # [示例/Example] aweme_id = \"7429296623961853234\"
         * @summary 获取视频新增粉丝数量/Get video new fans count
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet_53(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet_53(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音视频点赞观众画像 ### 参数: - aweme_id: 视频aweme_id - option: 选项，默认为1     - 1: 观众手机价格分布     - 2: 观众性别分布     - 3: 观众年龄分布     - 4: 观众地域分布(省份)     - 5: 观众地域分布(城市)     - 6: 观众城市等级分布     - 7: 观众手机品牌分布  ### 返回: - 视频点赞观众画像数据  # [English] ### Purpose: - Douyin Video Like Viewer Portrait ### Parameters: - aweme_id: Aweme_id of video - option: Option, default is 1     - 1: Distribution of audience mobile phone prices     - 2: Distribution of audience gender     - 3: Distribution of audience age     - 4: Distribution of audience region (province)     - 5: Distribution of audience region (city)     - 6: Distribution of audience city level     - 7: Distribution of audience mobile phone brands ### Return: - Video like viewer portrait data
         * @summary 抖音视频点赞观众画像/Douyin Video Like Viewer Portrait
         * @param {string} awemeId 视频aweme_id/Aweme_id of video
         * @param {string} option 选项/Option
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet(awemeId: string, option: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet(awemeId, option, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音视频点赞观众画像 ### 参数: - aweme_id: 视频aweme_id - option: 选项，默认为1     - 1: 观众手机价格分布     - 2: 观众性别分布     - 3: 观众年龄分布     - 4: 观众地域分布(省份)     - 5: 观众地域分布(城市)     - 6: 观众城市等级分布     - 7: 观众手机品牌分布  ### 返回: - 视频点赞观众画像数据  # [English] ### Purpose: - Douyin Video Like Viewer Portrait ### Parameters: - aweme_id: Aweme_id of video - option: Option, default is 1     - 1: Distribution of audience mobile phone prices     - 2: Distribution of audience gender     - 3: Distribution of audience age     - 4: Distribution of audience region (province)     - 5: Distribution of audience region (city)     - 6: Distribution of audience city level     - 7: Distribution of audience mobile phone brands ### Return: - Video like viewer portrait data
         * @summary 抖音视频点赞观众画像/Douyin Video Like Viewer Portrait
         * @param {string} awemeId 视频aweme_id/Aweme_id of video
         * @param {string} option 选项/Option
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet_54(awemeId: string, option: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet_54(awemeId, option, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求时为0，后续从返回数据中获取，用于翻页。     - 例如: offset = 10     - JSON Path-1 : $.data.cursor - count: 数量，默认为10，建议保持不变。 - sort_type:     - 0:综合排序     - 1:最多点赞     - 2:最新发布 - publish_time:     - 0:不限     - 1:最近一天     - 7:最近一周     - 180:最近半年 - filter_duration:     - 0:不限 0-1:1分钟以内     - 1-5:1-5分钟     - 5-10000:5分钟以上 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset, 0 for the first request, get from the returned data later, used for paging.     - For example: offset = 10     - JSON Path-1 : $.data.cursor - count: Number, default is 10, it is recommended to keep it unchanged. - sort_type:     - 0: Comprehensive sorting     - 1: Most likes     - 2: Latest release - publish_time:     - 0: Unlimited     - 1: Last day     - 7: Last week     - 180: Last half year - filter_duration:     - 0: Unlimited     - 0-1: Within 1 minute     - 1-5: 1-5 minutes     - 5-10000: More than 5 minutes - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results  # [示例/Example] keyword = \"游戏\" offset = 0 count = 10 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" search_id = \"\"
         * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, searchId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet(keyword, offset, count, sortType, publishTime, filterDuration, searchId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求时为0，后续从返回数据中获取，用于翻页。     - 例如: offset = 10     - JSON Path-1 : $.data.cursor - count: 数量，默认为10，建议保持不变。 - sort_type:     - 0:综合排序     - 1:最多点赞     - 2:最新发布 - publish_time:     - 0:不限     - 1:最近一天     - 7:最近一周     - 180:最近半年 - filter_duration:     - 0:不限 0-1:1分钟以内     - 1-5:1-5分钟     - 5-10000:5分钟以上 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset, 0 for the first request, get from the returned data later, used for paging.     - For example: offset = 10     - JSON Path-1 : $.data.cursor - count: Number, default is 10, it is recommended to keep it unchanged. - sort_type:     - 0: Comprehensive sorting     - 1: Most likes     - 2: Latest release - publish_time:     - 0: Unlimited     - 1: Last day     - 7: Last week     - 180: Last half year - filter_duration:     - 0: Unlimited     - 0-1: Within 1 minute     - 1-5: 1-5 minutes     - 5-10000: More than 5 minutes - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results  # [示例/Example] keyword = \"游戏\" offset = 0 count = 10 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" search_id = \"\"
         * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet_55(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, searchId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet_55(keyword, offset, count, sortType, publishTime, filterDuration, searchId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"
         * @summary 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
         * @param {string} keyword 关键词/Keyword
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {number} [page] 页码/Page
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get(keyword: string, sortType?: string, publishTime?: string, filterDuration?: string, page?: number, searchId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get(keyword, sortType, publishTime, filterDuration, page, searchId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"
         * @summary 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
         * @param {string} keyword 关键词/Keyword
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {number} [page] 页码/Page
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get_56(keyword: string, sortType?: string, publishTime?: string, filterDuration?: string, page?: number, searchId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get_56(keyword, sortType, publishTime, filterDuration, page, searchId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 使用接口网址生成A-Bogus参数，提交的URL不能带有a_bogus参数，同时a_bogus参数与请求头中的User-Agent有关，需要一起提交和请求。 ### 参数: - url: API链接，请去除url中的原本的a_boogus参数(如有)。 - data: 请求载荷，只有在POST请求中才需要提交，GET请求中使用空字符串即可。 - user_agent: user-agent，需要提交你请求头中的User-Agent，该值参与a_bogus参数的计算。 - index_0: 加密明文列表的第一个值，无特殊要求，默认为0，不要随意修改。 - index_1: 加密明文列表的第二个值，无特殊要求，默认为1，不要随意修改。 - index_2: 加密明文列表的第三个值，无特殊要求，默认为14，不要随意修改。 ### 返回: - A-Bogus参数  # [English] ### Purpose: - Generate A-Bogus parameter using API URL, the submitted URL cannot contain the original a_boogus parameter, and the a_bogus parameter is related to the User-Agent in the request header, which needs to be submitted and requested together. ### Parameters: - url: API link, please remove the original a_boogus parameter from the url (if any). - data: Request payload, only need to submit in POST request, use an empty string in GET request. - user_agent: user-agent, you need to submit the User-Agent in your request header, which is involved in the calculation of the a_bogus parameter. - index_0: The first value of the encrypted plaintext list, no special requirements, the default is 0, do not modify it at will. - index_1: The second value of the encrypted plaintext list, no special requirements, the default is 1, do not modify it at will. - index_2: The third value of the encrypted plaintext list, no special requirements, the default is 14, do not modify it at will. ### Return: - A-Bogus parameter  # [示例/Example] ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/general/search/single/?device_platform=webapp&aid=6383&channel=channel_pc_web&search_channel=aweme_general&enable_history=1&keyword=%E4%B8%AD%E5%8D%8E%E5%A8%98&search_source=normal_search&query_correct_type=1&is_filter_search=0&from_group_id=7346905902554844468&offset=0&count=15&need_filter_settings=1&pc_client_type=1&version_code=190600&version_name=19.6.0&cookie_enabled=true&screen_width=1280&screen_height=800&browser_language=zh-CN&browser_platform=Win32&browser_name=Firefox&browser_version=124.0&browser_online=true&engine_name=Gecko&engine_version=124.0&os_name=Windows&os_version=10&cpu_core_num=16&device_memory=&platform=PC&webid=7348962975497324070&msToken=YCTVM6YGmjFdIpQAN9ykXLBXiSiuHdZkOkEQWTeqVOHBEPmOcM0lNwE0Kd9vgHPMPigSndZDHfAq9k-6lDmH3Jqz6mHHxmn-BzQjmLMIfLIPgirgnOixM9x4PwgcNQ%3D%3D\", \"data\": \"\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\", \"index_0\": 0, \"index_1\": 1, \"index_2\": 14 } ```
         * @summary 使用接口网址生成A-Bogus参数/Generate A-Bogus parameter using API URL
         * @param {ABogusModel} [aBogusModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateABogusApiV1DouyinWebGenerateABogusPost(aBogusModel?: ABogusModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).generateABogusApiV1DouyinWebGenerateABogusPost(aBogusModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 使用接口网址生成A-Bogus参数，提交的URL不能带有a_bogus参数，同时a_bogus参数与请求头中的User-Agent有关，需要一起提交和请求。 ### 参数: - url: API链接，请去除url中的原本的a_boogus参数(如有)。 - data: 请求载荷，只有在POST请求中才需要提交，GET请求中使用空字符串即可。 - user_agent: user-agent，需要提交你请求头中的User-Agent，该值参与a_bogus参数的计算。 - index_0: 加密明文列表的第一个值，无特殊要求，默认为0，不要随意修改。 - index_1: 加密明文列表的第二个值，无特殊要求，默认为1，不要随意修改。 - index_2: 加密明文列表的第三个值，无特殊要求，默认为14，不要随意修改。 ### 返回: - A-Bogus参数  # [English] ### Purpose: - Generate A-Bogus parameter using API URL, the submitted URL cannot contain the original a_boogus parameter, and the a_bogus parameter is related to the User-Agent in the request header, which needs to be submitted and requested together. ### Parameters: - url: API link, please remove the original a_boogus parameter from the url (if any). - data: Request payload, only need to submit in POST request, use an empty string in GET request. - user_agent: user-agent, you need to submit the User-Agent in your request header, which is involved in the calculation of the a_bogus parameter. - index_0: The first value of the encrypted plaintext list, no special requirements, the default is 0, do not modify it at will. - index_1: The second value of the encrypted plaintext list, no special requirements, the default is 1, do not modify it at will. - index_2: The third value of the encrypted plaintext list, no special requirements, the default is 14, do not modify it at will. ### Return: - A-Bogus parameter  # [示例/Example] ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/general/search/single/?device_platform=webapp&aid=6383&channel=channel_pc_web&search_channel=aweme_general&enable_history=1&keyword=%E4%B8%AD%E5%8D%8E%E5%A8%98&search_source=normal_search&query_correct_type=1&is_filter_search=0&from_group_id=7346905902554844468&offset=0&count=15&need_filter_settings=1&pc_client_type=1&version_code=190600&version_name=19.6.0&cookie_enabled=true&screen_width=1280&screen_height=800&browser_language=zh-CN&browser_platform=Win32&browser_name=Firefox&browser_version=124.0&browser_online=true&engine_name=Gecko&engine_version=124.0&os_name=Windows&os_version=10&cpu_core_num=16&device_memory=&platform=PC&webid=7348962975497324070&msToken=YCTVM6YGmjFdIpQAN9ykXLBXiSiuHdZkOkEQWTeqVOHBEPmOcM0lNwE0Kd9vgHPMPigSndZDHfAq9k-6lDmH3Jqz6mHHxmn-BzQjmLMIfLIPgirgnOixM9x4PwgcNQ%3D%3D\", \"data\": \"\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\", \"index_0\": 0, \"index_1\": 1, \"index_2\": 14 } ```
         * @summary 使用接口网址生成A-Bogus参数/Generate A-Bogus parameter using API URL
         * @param {ABogusModel} [aBogusModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateABogusApiV1DouyinWebGenerateABogusPost_57(aBogusModel?: ABogusModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).generateABogusApiV1DouyinWebGenerateABogusPost_57(aBogusModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成真实msToken ### 返回: - msToken  # [English] ### Purpose: - Generate real msToken ### Return: - msToken
         * @summary 生成真实msToken/Generate real msToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).generateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成真实msToken ### 返回: - msToken  # [English] ### Purpose: - Generate real msToken ### Return: - msToken
         * @summary 生成真实msToken/Generate real msToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet_58(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).generateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet_58(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成s_v_web_id ### 返回: - s_v_web_id  # [English] ### Purpose: - Generate s_v_web_id ### Return: - s_v_web_id
         * @summary 生成s_v_web_id/Generate s_v_web_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateSVWebIdApiV1DouyinWebGenerateSVWebIdGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).generateSVWebIdApiV1DouyinWebGenerateSVWebIdGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成s_v_web_id ### 返回: - s_v_web_id  # [English] ### Purpose: - Generate s_v_web_id ### Return: - s_v_web_id
         * @summary 生成s_v_web_id/Generate s_v_web_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateSVWebIdApiV1DouyinWebGenerateSVWebIdGet_59(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).generateSVWebIdApiV1DouyinWebGenerateSVWebIdGet_59(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成ttwid ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Return: - ttwid
         * @summary 生成ttwid/Generate ttwid
         * @param {string} [userAgent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateTtwidApiV1DouyinWebGenerateTtwidGet(userAgent?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).generateTtwidApiV1DouyinWebGenerateTtwidGet(userAgent, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成ttwid ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Return: - ttwid
         * @summary 生成ttwid/Generate ttwid
         * @param {string} [userAgent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateTtwidApiV1DouyinWebGenerateTtwidGet_60(userAgent?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).generateTtwidApiV1DouyinWebGenerateTtwidGet_60(userAgent, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成verify_fp ### 返回: - verify_fp  # [English] ### Purpose: - Generate verify_fp ### Return: - verify_fp
         * @summary 生成verify_fp/Generate verify_fp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateVerifyFpApiV1DouyinWebGenerateVerifyFpGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).generateVerifyFpApiV1DouyinWebGenerateVerifyFpGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成verify_fp ### 返回: - verify_fp  # [English] ### Purpose: - Generate verify_fp ### Return: - verify_fp
         * @summary 生成verify_fp/Generate verify_fp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateVerifyFpApiV1DouyinWebGenerateVerifyFpGet_61(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).generateVerifyFpApiV1DouyinWebGenerateVerifyFpGet_61(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 使用接口网址生成X-Bogus参数 ### 参数: - url: 接口网址  # [English] ### Purpose: - Generate X-Bogus parameter using API URL ### Parameters: - url: API URL  # [示例/Example]  ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" } ```
         * @summary 使用接口网址生成X-Bogus参数/Generate X-Bogus parameter using API URL
         * @param {XBogusModel} [xBogusModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateXBogusApiV1DouyinWebGenerateXBogusPost(xBogusModel?: XBogusModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).generateXBogusApiV1DouyinWebGenerateXBogusPost(xBogusModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 使用接口网址生成X-Bogus参数 ### 参数: - url: 接口网址  # [English] ### Purpose: - Generate X-Bogus parameter using API URL ### Parameters: - url: API URL  # [示例/Example]  ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" } ```
         * @summary 使用接口网址生成X-Bogus参数/Generate X-Bogus parameter using API URL
         * @param {XBogusModel} [xBogusModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateXBogusApiV1DouyinWebGenerateXBogusPost_62(xBogusModel?: XBogusModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).generateXBogusApiV1DouyinWebGenerateXBogusPost_62(xBogusModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文]  ### 用途:  - 提取列表作品id（最多支持20个链接）  ### 参数:  - url: 作品链接列表  ### 返回:  - 作品id列表   # [English]  ### Purpose:  - Extract list video id (supports up to 20 links)  ### Parameters:  - url: Video link list  ### Return:  - Video id list   # [示例/Example]  ```json  { \"urls\":[     \"0.53 02/26 I@v.sE Fus:/ 你别太帅了郑润泽# 现场版live # 音乐节 # 郑润泽  https://v.douyin.com/iRNBho6u/ 复制此链接，打开Dou音搜索，直接观看视频!\",     \"https://v.douyin.com/iRNBho6u/\",     \"https://www.iesdouyin.com/share/video/7298145681699622182/?region=CN&mid=7298145762238565171&u_code=l1j9bkbd&did=MS4wLjABAAAAtqpCx0hpOERbdSzQdjRZw-wFPxaqdbAzsKDmbJMUI3KWlMGQHC-n6dXAqa-dM2EP&iid=MS4wLjABAAAANwkJuWIRFOzg5uCpDRpMj4OX-QryoDgn-yYlXQnRwQQ&with_sec_did=1&titleType=title&share_sign=05kGlqGmR4_IwCX.ZGk6xuL0osNA..5ur7b0jbOx6cc-&share_version=170400&ts=1699262937&from_aid=6383&from_ssr=1&from=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182?previous_page=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182\",  ]  }  ```
         * @summary 提取列表作品id/Extract list video id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).getAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文]  ### 用途:  - 提取列表作品id（最多支持20个链接）  ### 参数:  - url: 作品链接列表  ### 返回:  - 作品id列表   # [English]  ### Purpose:  - Extract list video id (supports up to 20 links)  ### Parameters:  - url: Video link list  ### Return:  - Video id list   # [示例/Example]  ```json  { \"urls\":[     \"0.53 02/26 I@v.sE Fus:/ 你别太帅了郑润泽# 现场版live # 音乐节 # 郑润泽  https://v.douyin.com/iRNBho6u/ 复制此链接，打开Dou音搜索，直接观看视频!\",     \"https://v.douyin.com/iRNBho6u/\",     \"https://www.iesdouyin.com/share/video/7298145681699622182/?region=CN&mid=7298145762238565171&u_code=l1j9bkbd&did=MS4wLjABAAAAtqpCx0hpOERbdSzQdjRZw-wFPxaqdbAzsKDmbJMUI3KWlMGQHC-n6dXAqa-dM2EP&iid=MS4wLjABAAAANwkJuWIRFOzg5uCpDRpMj4OX-QryoDgn-yYlXQnRwQQ&with_sec_did=1&titleType=title&share_sign=05kGlqGmR4_IwCX.ZGk6xuL0osNA..5ur7b0jbOx6cc-&share_version=170400&ts=1699262937&from_aid=6383&from_ssr=1&from=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182?previous_page=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182\",  ]  }  ```
         * @summary 提取列表作品id/Extract list video id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost_63(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).getAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost_63(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文]  ### 用途:  - 提取列表用户id  ### 参数:  - url: 用户主页链接列表（最多支持10个链接）  ### 返回:  - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。   # [English]  ### Purpose:  - Extract list user id  ### Parameters:  - url: User homepage link list (supports up to 10 links)  ### Return:  - If the sec_user_id is successfully obtained from the link, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.   # [示例/Example]  ```json  { \"urls\":[    \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE?vid=7285950278132616463\",    \"https://www.douyin.com/user/MS4wLjABAAAAVsneOf144eGDFf8Xp9QNb1VW6ovXnNT5SqJBhJfe8KQBKWKDTWK5Hh-_i9mJzb8C\",    \"长按复制此条消息，打开抖音搜索，查看TA的更多作品。 https://v.douyin.com/idFqvUms/\",    \"https://v.douyin.com/idFqvUms/\"     ]  }  ```
         * @summary 提取列表用户id/Extract list user id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).getAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文]  ### 用途:  - 提取列表用户id  ### 参数:  - url: 用户主页链接列表（最多支持10个链接）  ### 返回:  - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。   # [English]  ### Purpose:  - Extract list user id  ### Parameters:  - url: User homepage link list (supports up to 10 links)  ### Return:  - If the sec_user_id is successfully obtained from the link, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.   # [示例/Example]  ```json  { \"urls\":[    \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE?vid=7285950278132616463\",    \"https://www.douyin.com/user/MS4wLjABAAAAVsneOf144eGDFf8Xp9QNb1VW6ovXnNT5SqJBhJfe8KQBKWKDTWK5Hh-_i9mJzb8C\",    \"长按复制此条消息，打开抖音搜索，查看TA的更多作品。 https://v.douyin.com/idFqvUms/\",    \"https://v.douyin.com/idFqvUms/\"     ]  }  ```
         * @summary 提取列表用户id/Extract list user id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost_64(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).getAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost_64(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接列表（最多支持20个链接） ### 返回: - 直播间号列表  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link list (supports up to 20 links) ### Return: - Room id list  # [示例/Example] ```json {   \"urls\": [         \"https://live.douyin.com/775841227732\",         \"https://live.douyin.com/775841227732?room_id=7318296342189919011&enter_from_merge=web_share_link&enter_method=web_share_link&previous_page=app_code_link\",         \'https://webcast.amemv.com/douyin/webcast/reflow/7318296342189919011?u_code=l1j9bkbd&did=MS4wLjABAAAAEs86TBQPNwAo-RGrcxWyCdwKhI66AK3Pqf3ieo6HaxI&iid=MS4wLjABAAAA0ptpM-zzoliLEeyvWOCUt-_dQza4uSjlIvbtIazXnCY&with_sec_did=1&use_link_command=1&ecom_share_track_params=&extra_params={\"from_request_id\":\"20231230162057EC005772A8EAA0199906\",\"im_channel_invite_id\":\"0\"}&user_id=3644207898042206&liveId=7318296342189919011&from=share&style=share&enter_method=click_share&roomId=7318296342189919011&activity_info={}\',         \"6i- Q@x.Sl 03/23 【醒子8ke的直播间】  点击打开👉https://v.douyin.com/i8tBR7hX/  或长按复制此条消息，打开抖音，看TA直播\",         \"https://v.douyin.com/i8tBR7hX/\",         ] } ```
         * @summary 提取列表直播间号/Extract list webcast id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).getAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接列表（最多支持20个链接） ### 返回: - 直播间号列表  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link list (supports up to 20 links) ### Return: - Room id list  # [示例/Example] ```json {   \"urls\": [         \"https://live.douyin.com/775841227732\",         \"https://live.douyin.com/775841227732?room_id=7318296342189919011&enter_from_merge=web_share_link&enter_method=web_share_link&previous_page=app_code_link\",         \'https://webcast.amemv.com/douyin/webcast/reflow/7318296342189919011?u_code=l1j9bkbd&did=MS4wLjABAAAAEs86TBQPNwAo-RGrcxWyCdwKhI66AK3Pqf3ieo6HaxI&iid=MS4wLjABAAAA0ptpM-zzoliLEeyvWOCUt-_dQza4uSjlIvbtIazXnCY&with_sec_did=1&use_link_command=1&ecom_share_track_params=&extra_params={\"from_request_id\":\"20231230162057EC005772A8EAA0199906\",\"im_channel_invite_id\":\"0\"}&user_id=3644207898042206&liveId=7318296342189919011&from=share&style=share&enter_method=click_share&roomId=7318296342189919011&activity_info={}\',         \"6i- Q@x.Sl 03/23 【醒子8ke的直播间】  点击打开👉https://v.douyin.com/i8tBR7hX/  或长按复制此条消息，打开抖音，看TA直播\",         \"https://v.douyin.com/i8tBR7hX/\",         ] } ```
         * @summary 提取列表直播间号/Extract list webcast id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost_65(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).getAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost_65(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.douyin.com/video/7298145681699622182\"
         * @summary 提取单个作品id/Extract single video id
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAwemeIdApiV1DouyinWebGetAwemeIdGet(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).getAwemeIdApiV1DouyinWebGetAwemeIdGet(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.douyin.com/video/7298145681699622182\"
         * @summary 提取单个作品id/Extract single video id
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAwemeIdApiV1DouyinWebGetAwemeIdGet_66(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).getAwemeIdApiV1DouyinWebGetAwemeIdGet_66(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 提取单个用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户sec_user_id  # [English] ### Purpose: - Extract single user id ### Parameters: - url: User homepage link ### Return: - User sec_user_id  # [示例/Example] url = \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\"
         * @summary 提取单个用户id/Extract single user id
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSecUserIdApiV1DouyinWebGetSecUserIdGet(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).getSecUserIdApiV1DouyinWebGetSecUserIdGet(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 提取单个用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户sec_user_id  # [English] ### Purpose: - Extract single user id ### Parameters: - url: User homepage link ### Return: - User sec_user_id  # [示例/Example] url = \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\"
         * @summary 提取单个用户id/Extract single user id
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSecUserIdApiV1DouyinWebGetSecUserIdGet_67(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).getSecUserIdApiV1DouyinWebGetSecUserIdGet_67(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接 ### 返回: - 直播间号  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link ### Return: - Room id  # [示例/Example] url = \"https://live.douyin.com/775841227732\"
         * @summary 提取直播间号/Extract webcast id
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebcastIdApiV1DouyinWebGetWebcastIdGet(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).getWebcastIdApiV1DouyinWebGetWebcastIdGet(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接 ### 返回: - 直播间号  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link ### Return: - Room id  # [示例/Example] url = \"https://live.douyin.com/775841227732\"
         * @summary 提取直播间号/Extract webcast id
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWebcastIdApiV1DouyinWebGetWebcastIdGet_68(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).getWebcastIdApiV1DouyinWebGetWebcastIdGet_68(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 根据sec_user_id获取指定用户的信息/Get information of specified user by sec_user_id
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlerUserProfileApiV1DouyinWebHandlerUserProfileGet(secUserId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).handlerUserProfileApiV1DouyinWebHandlerUserProfileGet(secUserId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 根据sec_user_id获取指定用户的信息/Get information of specified user by sec_user_id
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlerUserProfileApiV1DouyinWebHandlerUserProfileGet_69(secUserId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).handlerUserProfileApiV1DouyinWebHandlerUserProfileGet_69(secUserId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据抖音号获取指定用户的信息 ### 参数: - unique_id: 用户unique_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - unique_id: User unique_id ### Return: - User information  # [示例/Example] unique_id = \"TheChief\"
         * @summary 根据抖音号获取指定用户的信息/Get information of specified user by unique_id
         * @param {string} uniqueId 用户unique_id/User unique_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get(uniqueId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get(uniqueId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据抖音号获取指定用户的信息 ### 参数: - unique_id: 用户unique_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - unique_id: User unique_id ### Return: - User information  # [示例/Example] unique_id = \"TheChief\"
         * @summary 根据抖音号获取指定用户的信息/Get information of specified user by unique_id
         * @param {string} uniqueId 用户unique_id/User unique_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get_70(uniqueId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get_70(uniqueId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据抖音uid获取指定用户的信息 ### 参数: - uid: 用户uid，也就是抖音号的short_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - uid: User uid, which is the short_id of the Douyin number ### Return: - User information  # [示例/Example] uid = \"1673937488185292\"
         * @summary 根据抖音uid获取指定用户的信息/Get information of specified user by uid
         * @param {string} uid 用户uid(short_id)/User uid(short_id)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据抖音uid获取指定用户的信息 ### 参数: - uid: 用户uid，也就是抖音号的short_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - uid: User uid, which is the short_id of the Douyin number ### Return: - User information  # [示例/Example] uid = \"1673937488185292\"
         * @summary 根据抖音uid获取指定用户的信息/Get information of specified user by uid
         * @param {string} uid 用户uid(short_id)/User uid(short_id)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get_71(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get_71(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息，包含性别，年龄，直播等级，直播间牌子 ### 说明： - 性别：1为男，2为女，0为未知，在live_user字段中。 - 年龄：在user字段中，-1为未知。  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information, including gender, age, live level, live room brand ### Description: - gender: 1 male, 2 female, 0 unknown, in the live_user field. - age: in the user field, -1 unknown.  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 根据sec_user_id获取指定用户的信息（性别，年龄，直播等级、牌子）/Get information of specified user by sec_user_id (gender, age, live level、brand)
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get(secUserId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get(secUserId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息，包含性别，年龄，直播等级，直播间牌子 ### 说明： - 性别：1为男，2为女，0为未知，在live_user字段中。 - 年龄：在user字段中，-1为未知。  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information, including gender, age, live level, live room brand ### Description: - gender: 1 male, 2 female, 0 unknown, in the live_user field. - age: in the user field, -1 unknown.  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 根据sec_user_id获取指定用户的信息（性别，年龄，直播等级、牌子）/Get information of specified user by sec_user_id (gender, age, live level、brand)
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get_72(secUserId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get_72(secUserId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 直播间号转房间号 ### 参数: - webcast_id: 直播间号 ### 返回: - 房间号  # [English] ### Purpose: - Webcast id to room id ### Parameters: - webcast_id: Webcast id ### Return: - Room id  # [示例/Example] \"webcast_id = \"775841227732\"
         * @summary 直播间号转房间号/Webcast id to room id
         * @param {string} webcastId 直播间号/Webcast id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet(webcastId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet(webcastId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 直播间号转房间号 ### 参数: - webcast_id: 直播间号 ### 返回: - 房间号  # [English] ### Purpose: - Webcast id to room id ### Parameters: - webcast_id: Webcast id ### Return: - Room id  # [示例/Example] \"webcast_id = \"775841227732\"
         * @summary 直播间号转房间号/Webcast id to room id
         * @param {string} webcastId 直播间号/Webcast id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet_73(webcastId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinWebAPIApiAxiosParamCreator(configuration).webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet_73(webcastId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DouyinWebAPIApi - factory interface
 * @export
 */
export const DouyinWebAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastRoomMessage：直播间消息     - WebcastLikeMessage：点赞消息     - WebcastMemberMessage：成员消息     - WebcastChatMessage：聊天消息     - WebcastGiftMessage：礼物消息     - WebcastSocialMessage：社交消息     - WebcastRoomUserSeqMessage：用户序列消息     - WebcastUpdateFanTicketMessage：更新粉丝消息     - WebcastCommonTextMessage：常规文本消息     - WebcastMatchAgainstScoreMessage：比赛得分消息     - WebcastFansclubMessage：粉丝俱乐部消息     - WebcastRanklistHourEntranceMessage：排行榜小时入口消息     - WebcastRoomStatsMessage：直播间统计消息     - WebcastLiveShoppingMessage: 直播购物消息     - WebcastLiveEcomGeneralMessage: 直播电商通用消息     - WebcastProductChangeMessage: 直播商品变更消息     - WebcastRoomStreamAdaptationMessage: 直播间流适配消息     - WebcastNotifyEffectMessage: 通知效果消息     - WebcastLightGiftMessage: 亮礼物消息     - WebcastProfitInteractionScoreMessage: 收益互动分消息     - WebcastRoomRankMessage: 直播间排行消息 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discounts. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastRoomMessage: Live room message     - WebcastLikeMessage: Like message     - WebcastMemberMessage: Member message     - WebcastChatMessage: Chat message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastUpdateFanTicketMessage: Update fan message     - WebcastCommonTextMessage: Common text message     - WebcastMatchAgainstScoreMessage: Match score message     - WebcastFansclubMessage: Fans club message     - WebcastRanklistHourEntranceMessage: Ranking list hour entrance message     - WebcastRoomStatsMessage: Live room statistics message     - WebcastLiveShoppingMessage: Live shopping message     - WebcastLiveEcomGeneralMessage: Live e-commerce general message     - WebcastProductChangeMessage: Live product change message     - WebcastRoomStreamAdaptationMessage: Live room stream adaptation message     - WebcastNotifyEffectMessage: Notification effect message     - WebcastLightGiftMessage: Light gift message     - WebcastProfitInteractionScoreMessage: Profit interaction score message     - WebcastRoomRankMessage: Live room ranking message ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
         * @summary 提取直播间弹幕/Extract live room danmaku
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {string} danmakuType 消息类型/Message type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet(liveRoomUrl: string, danmakuType: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet(liveRoomUrl, danmakuType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastRoomMessage：直播间消息     - WebcastLikeMessage：点赞消息     - WebcastMemberMessage：成员消息     - WebcastChatMessage：聊天消息     - WebcastGiftMessage：礼物消息     - WebcastSocialMessage：社交消息     - WebcastRoomUserSeqMessage：用户序列消息     - WebcastUpdateFanTicketMessage：更新粉丝消息     - WebcastCommonTextMessage：常规文本消息     - WebcastMatchAgainstScoreMessage：比赛得分消息     - WebcastFansclubMessage：粉丝俱乐部消息     - WebcastRanklistHourEntranceMessage：排行榜小时入口消息     - WebcastRoomStatsMessage：直播间统计消息     - WebcastLiveShoppingMessage: 直播购物消息     - WebcastLiveEcomGeneralMessage: 直播电商通用消息     - WebcastProductChangeMessage: 直播商品变更消息     - WebcastRoomStreamAdaptationMessage: 直播间流适配消息     - WebcastNotifyEffectMessage: 通知效果消息     - WebcastLightGiftMessage: 亮礼物消息     - WebcastProfitInteractionScoreMessage: 收益互动分消息     - WebcastRoomRankMessage: 直播间排行消息 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discounts. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastRoomMessage: Live room message     - WebcastLikeMessage: Like message     - WebcastMemberMessage: Member message     - WebcastChatMessage: Chat message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastUpdateFanTicketMessage: Update fan message     - WebcastCommonTextMessage: Common text message     - WebcastMatchAgainstScoreMessage: Match score message     - WebcastFansclubMessage: Fans club message     - WebcastRanklistHourEntranceMessage: Ranking list hour entrance message     - WebcastRoomStatsMessage: Live room statistics message     - WebcastLiveShoppingMessage: Live shopping message     - WebcastLiveEcomGeneralMessage: Live e-commerce general message     - WebcastProductChangeMessage: Live product change message     - WebcastRoomStreamAdaptationMessage: Live room stream adaptation message     - WebcastNotifyEffectMessage: Notification effect message     - WebcastLightGiftMessage: Light gift message     - WebcastProfitInteractionScoreMessage: Profit interaction score message     - WebcastRoomRankMessage: Live room ranking message ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
         * @summary 提取直播间弹幕/Extract live room danmaku
         * @param {string} liveRoomUrl 直播间链接/Live room link
         * @param {string} danmakuType 消息类型/Message type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet_1(liveRoomUrl: string, danmakuType: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet_1(liveRoomUrl, danmakuType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音热点分类 ### 参数: - billboard_type: 热点类型     - rise: 上升热点榜分类     - city: 同城热点榜分类     - total: 热点总榜分类 ### 返回: - 热点分类数据  # [English] ### Purpose: - Douyin Billboard Categories ### Parameters: - billboard_type: Hotspot type     - rise: Rising hot spot list category     - city: City hot spot list category     - total: Total hot spot list category ### Return: - Hotspot category data
         * @summary 抖音热点分类/Douyin Billboard Categories
         * @param {string} billboardType 热点类型/Hotspot type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet(billboardType: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet(billboardType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音热点分类 ### 参数: - billboard_type: 热点类型     - rise: 上升热点榜分类     - city: 同城热点榜分类     - total: 热点总榜分类 ### 返回: - 热点分类数据  # [English] ### Purpose: - Douyin Billboard Categories ### Parameters: - billboard_type: Hotspot type     - rise: Rising hot spot list category     - city: City hot spot list category     - total: Total hot spot list category ### Return: - Hotspot category data
         * @summary 抖音热点分类/Douyin Billboard Categories
         * @param {string} billboardType 热点类型/Hotspot type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet_2(billboardType: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet_2(billboardType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音榜单相关视频 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_id: 分类ID ### 返回: - 相关视频数据  # [English] ### Purpose: - Douyin Billboard Related Videos ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_id: Category ID ### Return: - Related video data
         * @summary 抖音榜单相关视频/Douyin Billboard Related Videos
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceId 分类ID/Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet(page: number, pageSize: number, sentenceId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet(page, pageSize, sentenceId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音榜单相关视频 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_id: 分类ID ### 返回: - 相关视频数据  # [English] ### Purpose: - Douyin Billboard Related Videos ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_id: Category ID ### Return: - Related video data
         * @summary 抖音榜单相关视频/Douyin Billboard Related Videos
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceId 分类ID/Category ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet_3(page: number, pageSize: number, sentenceId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet_3(page, pageSize, sentenceId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 二次元作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 二次元作品数据  # [English] ### Purpose: - Cartoon Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Cartoon Video data
         * @summary 二次元作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet(count: number, refreshIndex?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet(count, refreshIndex, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 二次元作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 二次元作品数据  # [English] ### Purpose: - Cartoon Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Cartoon Video data
         * @summary 二次元作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet_4(count: number, refreshIndex?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet_4(count, refreshIndex, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 美食作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 美食作品数据  # [English] ### Purpose: - Food Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Food Video data
         * @summary 美食作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet(count: number, refreshIndex?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet(count, refreshIndex, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 美食作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 美食作品数据  # [English] ### Purpose: - Food Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Food Video data
         * @summary 美食作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet_5(count: number, refreshIndex?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet_5(count, refreshIndex, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 音乐作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 音乐作品数据  # [English] ### Purpose: - Music Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Music Video data
         * @summary 音乐作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet(count: number, refreshIndex?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet(count, refreshIndex, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 音乐作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 音乐作品数据  # [English] ### Purpose: - Music Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Music Video data
         * @summary 音乐作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet_6(count: number, refreshIndex?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet_6(count, refreshIndex, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 话题作品 ### 参数: - challenge_id: 话题id - sort_type: 排序类型     - 0:综合排序 1:最热排序 2:最新排序 - cursor: 游标 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题作品  # [English] ### Purpose: - Challenge Posts ### Parameters: - challenge_id: Challenge id - sort_type: Sort type     - 0: Comprehensive sorting 1: Hottest sorting 2: Latest sorting - cursor: Cursor - count: Number - cookie: User provided Cookie, used to get more data ### Return: - Challenge Posts  # [示例/Example] challenge_id = \"1750525814851611\" sort_type = 0 offset = 0 cursor = 0 count = 20
         * @summary 话题作品/Challenge Posts
         * @param {ChallengePostRequest} [challengePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchChallengePostsApiV1DouyinWebFetchChallengePostsPost(challengePostRequest?: ChallengePostRequest, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchChallengePostsApiV1DouyinWebFetchChallengePostsPost(challengePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 话题作品 ### 参数: - challenge_id: 话题id - sort_type: 排序类型     - 0:综合排序 1:最热排序 2:最新排序 - cursor: 游标 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题作品  # [English] ### Purpose: - Challenge Posts ### Parameters: - challenge_id: Challenge id - sort_type: Sort type     - 0: Comprehensive sorting 1: Hottest sorting 2: Latest sorting - cursor: Cursor - count: Number - cookie: User provided Cookie, used to get more data ### Return: - Challenge Posts  # [示例/Example] challenge_id = \"1750525814851611\" sort_type = 0 offset = 0 cursor = 0 count = 20
         * @summary 话题作品/Challenge Posts
         * @param {ChallengePostRequest} [challengePostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchChallengePostsApiV1DouyinWebFetchChallengePostsPost_7(challengePostRequest?: ChallengePostRequest, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchChallengePostsApiV1DouyinWebFetchChallengePostsPost_7(challengePostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音同城热点榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 - city_code: 城市代码，默认为110000(北京)     - 110000: 北京     - 更多城市代码请参考城市列表接口     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin City Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change - city_code: City code, default is 110000     - 110000: Beijing     - For more city codes, please refer to the city list interface     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### Return: - Hotspot list data
         * @summary 抖音同城热点榜单/Douyin City Hot List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceTag 分类标签/Category tag
         * @param {string} order 排序方式/Sorting method
         * @param {string} cityCode 城市代码/City code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCityHotListApiV1DouyinWebFetchCityHotListGet(page: number, pageSize: number, sentenceTag: string, order: string, cityCode: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchCityHotListApiV1DouyinWebFetchCityHotListGet(page, pageSize, sentenceTag, order, cityCode, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音同城热点榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 - city_code: 城市代码，默认为110000(北京)     - 110000: 北京     - 更多城市代码请参考城市列表接口     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin City Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change - city_code: City code, default is 110000     - 110000: Beijing     - For more city codes, please refer to the city list interface     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### Return: - Hotspot list data
         * @summary 抖音同城热点榜单/Douyin City Hot List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceTag 分类标签/Category tag
         * @param {string} order 排序方式/Sorting method
         * @param {string} cityCode 城市代码/City code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCityHotListApiV1DouyinWebFetchCityHotListGet_8(page: number, pageSize: number, sentenceTag: string, order: string, cityCode: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchCityHotListApiV1DouyinWebFetchCityHotListGet_8(page, pageSize, sentenceTag, order, cityCode, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音城市列表以及城市ID ### 返回: - 城市列表数据  # [English] ### Purpose: - Douyin City List and City ID ### Return: - City list data
         * @summary 抖音城市列表/Douyin City List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCityListApiV1DouyinWebFetchCityListGet(options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchCityListApiV1DouyinWebFetchCityListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音城市列表以及城市ID ### 返回: - 城市列表数据  # [English] ### Purpose: - Douyin City List and City ID ### Return: - City list data
         * @summary 抖音城市列表/Douyin City List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCityListApiV1DouyinWebFetchCityListGet_9(options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchCityListApiV1DouyinWebFetchCityListGet_9(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音Web的游客Cookie - 可以用于爬取抖音Web的数据，如用户作品、合辑作品等。 - 可以固定身份避免部分接口重复数据。 - 请注意：游客Cookie无法爬取所有数据，有一定的限制。 - 可以配合开源项目使用此接口实现抖音Web的数据爬取。 ### 参数: - user_agent: 用户浏览器代理 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get the guest Cookie of Douyin Web - Can be used to crawl data of Douyin Web, such as user videos, mix videos, etc. - Can fix identity to avoid duplicate data for some interfaces. - Please note: Guest Cookie cannot crawl all data, there are certain restrictions. - Can be used with open source projects to implement data crawling of Douyin Web using this interface. ### Parameters: - user_agent: User browser agent ### Return: - Guest Cookie  # [示例/Example] user_agent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\"
         * @summary 获取抖音Web的游客Cookie/Get the guest Cookie of Douyin Web
         * @param {string} userAgent 用户浏览器代理/User browser agent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet(userAgent: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet(userAgent, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音Web的游客Cookie - 可以用于爬取抖音Web的数据，如用户作品、合辑作品等。 - 可以固定身份避免部分接口重复数据。 - 请注意：游客Cookie无法爬取所有数据，有一定的限制。 - 可以配合开源项目使用此接口实现抖音Web的数据爬取。 ### 参数: - user_agent: 用户浏览器代理 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get the guest Cookie of Douyin Web - Can be used to crawl data of Douyin Web, such as user videos, mix videos, etc. - Can fix identity to avoid duplicate data for some interfaces. - Please note: Guest Cookie cannot crawl all data, there are certain restrictions. - Can be used with open source projects to implement data crawling of Douyin Web using this interface. ### Parameters: - user_agent: User browser agent ### Return: - Guest Cookie  # [示例/Example] user_agent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\"
         * @summary 获取抖音Web的游客Cookie/Get the guest Cookie of Douyin Web
         * @param {string} userAgent 用户浏览器代理/User browser agent
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet_10(userAgent: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet_10(userAgent, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 游戏作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Game Video data
         * @summary 游戏作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet(count: number, refreshIndex?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet(count, refreshIndex, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 游戏作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Game Video data
         * @summary 游戏作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet_11(count: number, refreshIndex?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet_11(count, refreshIndex, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 -search_range: 0:不限 1:最近看过 2:还未看过 3:关注的人 -content_type: 0:不限 1:视频 2:图集 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - search_range: 0: Unlimited 1: Recently viewed 2: Not yet viewed 3: Followed - content_type: 0: Unlimited 1: Video 2: Album - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"
         * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {string} [searchRange] 搜索范围/Search range
         * @param {string} [contentType] 内容类型/Content type
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, searchRange?: string, contentType?: string, searchId?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet(keyword, offset, count, sortType, publishTime, filterDuration, searchRange, contentType, searchId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 -search_range: 0:不限 1:最近看过 2:还未看过 3:关注的人 -content_type: 0:不限 1:视频 2:图集 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - search_range: 0: Unlimited 1: Recently viewed 2: Not yet viewed 3: Followed - content_type: 0: Unlimited 1: Video 2: Album - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"
         * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {string} [searchRange] 搜索范围/Search range
         * @param {string} [contentType] 内容类型/Content type
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet_12(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, searchRange?: string, contentType?: string, searchId?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet_12(keyword, offset, count, sortType, publishTime, filterDuration, searchRange, contentType, searchId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取首页推荐数据 ### 参数: - count: 数量，默认为10，建议保持不变。 - refresh_index: 翻页索引，默认为0，然后每次增加1用于翻页。 ### 返回: - Feed数据  # [English] ### Purpose: - Get home feed data ### Parameters: - count: Number, default is 10, it is recommended to keep it unchanged. - refresh_index: Paging index, default is 0, then increase by 1 each time for paging. ### Return: - Feed data  # [示例/Example] count = 10 refresh_index = 0
         * @summary 获取首页推荐数据/Get home feed data
         * @param {number} [count] 数量/Number
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeFeedApiV1DouyinWebFetchHomeFeedGet(count?: number, refreshIndex?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchHomeFeedApiV1DouyinWebFetchHomeFeedGet(count, refreshIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取首页推荐数据 ### 参数: - count: 数量，默认为10，建议保持不变。 - refresh_index: 翻页索引，默认为0，然后每次增加1用于翻页。 ### 返回: - Feed数据  # [English] ### Purpose: - Get home feed data ### Parameters: - count: Number, default is 10, it is recommended to keep it unchanged. - refresh_index: Paging index, default is 0, then increase by 1 each time for paging. ### Return: - Feed data  # [示例/Example] count = 10 refresh_index = 0
         * @summary 获取首页推荐数据/Get home feed data
         * @param {number} [count] 数量/Number
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeFeedApiV1DouyinWebFetchHomeFeedGet_13(count?: number, refreshIndex?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchHomeFeedApiV1DouyinWebFetchHomeFeedGet_13(count, refreshIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音热点总榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty ### Return: - Hotspot list data
         * @summary 抖音热点总榜单/Douyin Hot List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceTag 分类标签/Category tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotListApiV1DouyinWebFetchHotListGet(page: number, pageSize: number, sentenceTag: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchHotListApiV1DouyinWebFetchHotListGet(page, pageSize, sentenceTag, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音热点总榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty ### Return: - Hotspot list data
         * @summary 抖音热点总榜单/Douyin Hot List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceTag 分类标签/Category tag
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotListApiV1DouyinWebFetchHotListGet_14(page: number, pageSize: number, sentenceTag: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchHotListApiV1DouyinWebFetchHotListGet_14(page, pageSize, sentenceTag, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音热榜数据 ### 返回: - 热榜数据  # [English] ### Purpose: - Get Douyin hot search results ### Return: - Hot search results
         * @summary 获取抖音热榜数据/Get Douyin hot search results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet(options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音热榜数据 ### 返回: - 热榜数据  # [English] ### Purpose: - Get Douyin hot search results ### Return: - Hot search results
         * @summary 获取抖音热榜数据/Get Douyin hot search results
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet_15(options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet_15(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 知识作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Knowledge Video data
         * @summary 知识作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet(count: number, refreshIndex?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet(count, refreshIndex, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 知识作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Knowledge Video data
         * @summary 知识作品推荐/Knowledge Video
         * @param {number} count 每页数量/Number per page
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet_16(count: number, refreshIndex?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet_16(count, refreshIndex, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取直播间送礼用户排行榜 ### 参数: - room_id: 直播间room_id - rank_type: 排行类型，默认为30不用修改。 ### 返回: - 排行榜数据  # [English] ### Purpose: - Get live room gift user ranking ### Parameters: - room_id: Room room_id - rank_type: Leaderboard type, default is 30, no need to modify. ### Return: - Leaderboard data  # [示例/Example] room_id = \"7356585666190461731\" rank_type = 30
         * @summary 获取直播间送礼用户排行榜/Get live room gift user ranking
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {number} [rankType] 排行类型/Leaderboard type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet(roomId: string, rankType?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet(roomId, rankType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取直播间送礼用户排行榜 ### 参数: - room_id: 直播间room_id - rank_type: 排行类型，默认为30不用修改。 ### 返回: - 排行榜数据  # [English] ### Purpose: - Get live room gift user ranking ### Parameters: - room_id: Room room_id - rank_type: Leaderboard type, default is 30, no need to modify. ### Return: - Leaderboard data  # [示例/Example] room_id = \"7356585666190461731\" rank_type = 30
         * @summary 获取直播间送礼用户排行榜/Get live room gift user ranking
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {number} [rankType] 排行类型/Leaderboard type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet_17(roomId: string, rankType?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet_17(roomId, rankType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音直播间商品信息 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie，如获取失败请手动过一次验证码) - room_id: 直播间room_id - author_id: 作者id - limit: 数量 ### 返回: - 商品信息  # [English] ### Purpose: - Douyin live room product information ### Parameters: - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie, if the acquisition fails, please manually pass the captcha code once) - room_id: Room room_id - author_id: Author id - limit: Number ### Return: - Product information  # [示例/Example] cookie = \"YOUR_COOKIE\" room_id = \"7356742011975715619\" author_id = \"2207432981615527\" limit = 20
         * @summary 抖音直播间商品信息/Douyin live room product information
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {string} authorId 作者id/Author id
         * @param {number} [limit] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet(roomId: string, authorId: string, limit?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet(roomId, authorId, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音直播间商品信息 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie，如获取失败请手动过一次验证码) - room_id: 直播间room_id - author_id: 作者id - limit: 数量 ### 返回: - 商品信息  # [English] ### Purpose: - Douyin live room product information ### Parameters: - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie, if the acquisition fails, please manually pass the captcha code once) - room_id: Room room_id - author_id: Author id - limit: Number ### Return: - Product information  # [示例/Example] cookie = \"YOUR_COOKIE\" room_id = \"7356742011975715619\" author_id = \"2207432981615527\" limit = 20
         * @summary 抖音直播间商品信息/Douyin live room product information
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {string} authorId 作者id/Author id
         * @param {number} [limit] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_18(roomId: string, authorId: string, limit?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_18(roomId, authorId, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果/Get live search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet(keyword: string, offset?: number, count?: number, searchId?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet(keyword, offset, count, searchId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果/Get live search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet_19(keyword: string, offset?: number, count?: number, searchId?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet_19(keyword, offset, count, searchId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持50个视频，此接口收费固定价格为0.001$ * 50 = 0.05$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持50个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 50 videos at a time, this interface charges a fixed price of 0.001$ * 50 = 0.05$ each time. ### Parameters: - aweme_ids: List of video ids, up to 50 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\"]
         * @summary 批量获取视频信息/Batch Get Video Information
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMultiVideoApiV1DouyinWebFetchMultiVideoPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchMultiVideoApiV1DouyinWebFetchMultiVideoPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持50个视频，此接口收费固定价格为0.001$ * 50 = 0.05$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持50个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 50 videos at a time, this interface charges a fixed price of 0.001$ * 50 = 0.05$ each time. ### Parameters: - aweme_ids: List of video ids, up to 50 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\"]
         * @summary 批量获取视频信息/Batch Get Video Information
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMultiVideoApiV1DouyinWebFetchMultiVideoPost_20(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchMultiVideoApiV1DouyinWebFetchMultiVideoPost_20(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法保障稳定性，如果有爬取单一视频需求，请使用下面的接口。 - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot guarantee stability. If you need to crawl a single video, please use the following interface. - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据，此接口即将废弃，请使用APP接口/Get single video data, this endpoint will be deprecated soon, please use APP endpoint
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinWebFetchOneVideoGet(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchOneVideoApiV1DouyinWebFetchOneVideoGet(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法保障稳定性，如果有爬取单一视频需求，请使用下面的接口。 - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot guarantee stability. If you need to crawl a single video, please use the following interface. - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据，此接口即将废弃，请使用APP接口/Get single video data, this endpoint will be deprecated soon, please use APP endpoint
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinWebFetchOneVideoGet_21(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchOneVideoApiV1DouyinWebFetchOneVideoGet_21(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据 V2/Get single video data V2
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据 V2/Get single video data V2
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get_22(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get_22(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet(shareUrl: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet(shareUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet_23(shareUrl: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet_23(shareUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品视频弹幕数据 ### 参数: - item_id: 作品id - duration: 视频总时长 - end_time: 结束时间 - start_time: 开始时间 ### 返回: - 视频弹幕数据  # [English] ### Purpose: - Get single video danmaku data ### Parameters: - item_id: Video id - duration: Video total duration - end_time: End time - start_time: Start time ### Return: - Video danmaku data  # [示例/Example] item_id = \"7355433624046472498\" duration = 15134 end_time = 15133 start_time = 0
         * @summary 获取单个作品视频弹幕数据/Get single video danmaku data
         * @param {string} itemId 作品id/Video id
         * @param {number} duration 视频总时长/Video total duration
         * @param {number} endTime 结束时间/End time
         * @param {number} startTime 开始时间/Start time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet(itemId: string, duration: number, endTime: number, startTime: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet(itemId, duration, endTime, startTime, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品视频弹幕数据 ### 参数: - item_id: 作品id - duration: 视频总时长 - end_time: 结束时间 - start_time: 开始时间 ### 返回: - 视频弹幕数据  # [English] ### Purpose: - Get single video danmaku data ### Parameters: - item_id: Video id - duration: Video total duration - end_time: End time - start_time: Start time ### Return: - Video danmaku data  # [示例/Example] item_id = \"7355433624046472498\" duration = 15134 end_time = 15133 start_time = 0
         * @summary 获取单个作品视频弹幕数据/Get single video danmaku data
         * @param {string} itemId 作品id/Video id
         * @param {number} duration 视频总时长/Video total duration
         * @param {number} endTime 结束时间/End time
         * @param {number} startTime 开始时间/Start time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet_24(itemId: string, duration: number, endTime: number, startTime: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet_24(itemId, duration, endTime, startTime, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音实时挑战榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 ### 返回: - 挑战榜数据  # [English] ### Purpose: - Douyin Real-time Challenge List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 ### Return: - Challenge list data
         * @summary 抖音实时挑战榜单/Douyin Real-time Challenge List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet(page: number, pageSize: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音实时挑战榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 ### 返回: - 挑战榜数据  # [English] ### Purpose: - Douyin Real-time Challenge List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 ### Return: - Challenge list data
         * @summary 抖音实时挑战榜单/Douyin Real-time Challenge List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet_25(page: number, pageSize: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet_25(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音实时上升热点榜 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Real-time Rising Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change ### Return: - Hotspot list data
         * @summary 抖音实时上升热点榜/Douyin Real-time Rising Hot List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceTag 分类标签/Category tag
         * @param {string} order 排序方式/Sorting method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet(page: number, pageSize: number, sentenceTag: string, order: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet(page, pageSize, sentenceTag, order, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音实时上升热点榜 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Real-time Rising Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change ### Return: - Hotspot list data
         * @summary 抖音实时上升热点榜/Douyin Real-time Rising Hot List
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {string} sentenceTag 分类标签/Category tag
         * @param {string} order 排序方式/Sorting method
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet_26(page: number, pageSize: number, sentenceTag: string, order: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet_26(page, pageSize, sentenceTag, order, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取相关作品推荐数据 ### 参数: - aweme_id: 作品id - refresh_index: 翻页索引，默认为1，然后每次增加1用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 作品数据  # [English] ### Purpose: - Get related posts recommendation data ### Parameters: - aweme_id: Video id - refresh_index: Paging index, default is 1, then increase by 1 each time for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Video data  # [示例/Example] aweme_id = \"7393365489105358132\" refresh_index = 1 count = 20
         * @summary 获取相关作品推荐数据/Get related posts recommendation data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet(awemeId: string, refreshIndex?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet(awemeId, refreshIndex, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取相关作品推荐数据 ### 参数: - aweme_id: 作品id - refresh_index: 翻页索引，默认为1，然后每次增加1用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 作品数据  # [English] ### Purpose: - Get related posts recommendation data ### Parameters: - aweme_id: Video id - refresh_index: Paging index, default is 1, then increase by 1 each time for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Video data  # [示例/Example] aweme_id = \"7393365489105358132\" refresh_index = 1 count = 20
         * @summary 获取相关作品推荐数据/Get related posts recommendation data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [refreshIndex] 翻页索引/Paging index
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet_27(awemeId: string, refreshIndex?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet_27(awemeId, refreshIndex, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索话题，此接口不带Cookie请求时只能获取到前30条数据，建议自行提供Cookie获取更多数据。 - Cookie获取方式：打开网页抖音，登录后，按F12打开开发者工具，点击Network，刷新页面，找到第一个请求，复制Cookie。 ### 参数: - keyword: 关键词 - cursor: 偏移量 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Search Challenge, when this interface is requested without Cookie, only the first 30 data can be obtained, it is recommended to provide Cookie to get more data. - Cookie acquisition method: Open the Douyin webpage, log in, press F12 to open the developer tool, click Network, refresh the page, find the first request, copy the Cookie. ### Parameters: - keyword: Keyword - cursor: Offset - count: Number - cookie: User provided Cookie, used to get more data. ### Return: - Challenge search results  # [示例/Example] keyword = \"动漫\" cursor = 0 count = 20
         * @summary 搜索话题/Search Challenge
         * @param {SearchChallengeRequest} [searchChallengeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost(searchChallengeRequest?: SearchChallengeRequest, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost(searchChallengeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索话题，此接口不带Cookie请求时只能获取到前30条数据，建议自行提供Cookie获取更多数据。 - Cookie获取方式：打开网页抖音，登录后，按F12打开开发者工具，点击Network，刷新页面，找到第一个请求，复制Cookie。 ### 参数: - keyword: 关键词 - cursor: 偏移量 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Search Challenge, when this interface is requested without Cookie, only the first 30 data can be obtained, it is recommended to provide Cookie to get more data. - Cookie acquisition method: Open the Douyin webpage, log in, press F12 to open the developer tool, click Network, refresh the page, find the first request, copy the Cookie. ### Parameters: - keyword: Keyword - cursor: Offset - count: Number - cookie: User provided Cookie, used to get more data. ### Return: - Challenge search results  # [示例/Example] keyword = \"动漫\" cursor = 0 count = 20
         * @summary 搜索话题/Search Challenge
         * @param {SearchChallengeRequest} [searchChallengeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost_28(searchChallengeRequest?: SearchChallengeRequest, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost_28(searchChallengeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 短剧作品 ### 参数: - offset: 页码，默认为0 - count: 每页数量，默认为16 - content_type: 子类型，默认为0     - 0: 热榜     - 101: 甜宠     - 102: 搞笑     - 104: 正能量     - 105: 成长     - 106: 悬疑     - 109: 家庭     - 110: 都市     - 112: 奇幻     - 113: 玄幻     - 114: 职场     - 115: 青春     - 116: 古装     - 117: 动作     - 119: 逆袭     - 124: 其他 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie ### 返回: - 短剧作品数据  # [English] ### Purpose: - Series Video ### Parameters: - offset: Page number, default is 0 - count: Number per page, default is 16 - content_type: Subtype, default is 0     - 0: Hot list     - 101: Sweet pet     - 102: Funny     - 104: Positive energy     - 105: Growth     - 106: Suspense     - 109: Family     - 110: Urban     - 112: Fantasy     - 113: Fantasy     - 114: Workplace     - 115: Youth     - 116: Ancient costume     - 117: Action     - 119: Counterattack     - 124: Other - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Series Video data
         * @summary 短剧作品/Series Video
         * @param {number} offset 页码/Page number
         * @param {number} count 每页数量/Number per page
         * @param {number} contentType 短剧类型/Subtype
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet(offset: number, count: number, contentType: number, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet(offset, count, contentType, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 短剧作品 ### 参数: - offset: 页码，默认为0 - count: 每页数量，默认为16 - content_type: 子类型，默认为0     - 0: 热榜     - 101: 甜宠     - 102: 搞笑     - 104: 正能量     - 105: 成长     - 106: 悬疑     - 109: 家庭     - 110: 都市     - 112: 奇幻     - 113: 玄幻     - 114: 职场     - 115: 青春     - 116: 古装     - 117: 动作     - 119: 逆袭     - 124: 其他 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie ### 返回: - 短剧作品数据  # [English] ### Purpose: - Series Video ### Parameters: - offset: Page number, default is 0 - count: Number per page, default is 16 - content_type: Subtype, default is 0     - 0: Hot list     - 101: Sweet pet     - 102: Funny     - 104: Positive energy     - 105: Growth     - 106: Suspense     - 109: Family     - 110: Urban     - 112: Fantasy     - 113: Fantasy     - 114: Workplace     - 115: Youth     - 116: Ancient costume     - 117: Action     - 119: Counterattack     - 124: Other - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Series Video data
         * @summary 短剧作品/Series Video
         * @param {number} offset 页码/Page number
         * @param {number} count 每页数量/Number per page
         * @param {number} contentType 短剧类型/Subtype
         * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_29(offset: number, count: number, contentType: number, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_29(offset, count, contentType, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection video data ### Parameters: - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie) - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] cookie = \"YOUR_COOKIE\" max_cursor = 0 counts = 20
         * @summary 获取用户收藏作品数据/Get user collection video data
         * @param {string} cookie 用户网页版抖音Cookie/Your web version of Douyin Cookie
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet(cookie: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet(cookie, maxCursor, counts, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection video data ### Parameters: - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie) - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] cookie = \"YOUR_COOKIE\" max_cursor = 0 counts = 20
         * @summary 获取用户收藏作品数据/Get user collection video data
         * @param {string} cookie 用户网页版抖音Cookie/Your web version of Douyin Cookie
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet_30(cookie: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet_30(cookie, maxCursor, counts, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户收藏夹数据 ### 参数: - collects_id: 收藏夹id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection data ### Parameters: - collects_id: Collection id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] collects_id = \"\" max_cursor = 0 counts = 20
         * @summary 获取用户收藏夹数据/Get user collection data
         * @param {string} collectsId 收藏夹id/Collection id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet(collectsId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet(collectsId, maxCursor, counts, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户收藏夹数据 ### 参数: - collects_id: 收藏夹id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection data ### Parameters: - collects_id: Collection id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] collects_id = \"\" max_cursor = 0 counts = 20
         * @summary 获取用户收藏夹数据/Get user collection data
         * @param {string} collectsId 收藏夹id/Collection id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet_31(collectsId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet_31(collectsId, maxCursor, counts, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音用户粉丝兴趣 ### 参数: - sec_uid: 用户sec_uid - interest_type: 兴趣类型，默认为search     - similar_author: 粉丝感兴趣同类型作者     - interest_topic: 粉丝近3天感兴趣的话题     - search: 粉丝近3天搜索词 ### 返回: - 用户粉丝兴趣数据  # [English] ### Purpose: - Douyin User Fans Interest ### Parameters: - sec_uid: Sec_uid of user - interest_type: Interest type, default is search     - similar_author: Fans interested in the same type of author     - interest_topic: Topics that fans are interested in the last 3 days     - search: Search terms for fans in the last 3 days ### Return: - User fans interest data
         * @summary 抖音用户粉丝兴趣/Douyin User Fans Interest
         * @param {string} secUid 用户sec_uid/Sec_uid of user
         * @param {string} interestType 兴趣类型/Interest type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet(secUid: string, interestType: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet(secUid, interestType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音用户粉丝兴趣 ### 参数: - sec_uid: 用户sec_uid - interest_type: 兴趣类型，默认为search     - similar_author: 粉丝感兴趣同类型作者     - interest_topic: 粉丝近3天感兴趣的话题     - search: 粉丝近3天搜索词 ### 返回: - 用户粉丝兴趣数据  # [English] ### Purpose: - Douyin User Fans Interest ### Parameters: - sec_uid: Sec_uid of user - interest_type: Interest type, default is search     - similar_author: Fans interested in the same type of author     - interest_topic: Topics that fans are interested in the last 3 days     - search: Search terms for fans in the last 3 days ### Return: - User fans interest data
         * @summary 抖音用户粉丝兴趣/Douyin User Fans Interest
         * @param {string} secUid 用户sec_uid/Sec_uid of user
         * @param {string} interestType 兴趣类型/Interest type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet_32(secUid: string, interestType: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet_32(secUid, interestType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。  ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2
         * @summary 获取用户粉丝列表/Get user fans list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {number} [sourceType] 来源类型/Source type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFansListApiV1DouyinWebFetchUserFansListGet(secUserId?: string, maxTime?: string, count?: number, sourceType?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserFansListApiV1DouyinWebFetchUserFansListGet(secUserId, maxTime, count, sourceType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。  ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2
         * @summary 获取用户粉丝列表/Get user fans list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {number} [sourceType] 来源类型/Source type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFansListApiV1DouyinWebFetchUserFansListGet_33(secUserId?: string, maxTime?: string, count?: number, sourceType?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserFansListApiV1DouyinWebFetchUserFansListGet_33(secUserId, maxTime, count, sourceType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音用户粉丝画像 ### 参数: - sec_uid: 用户sec_uid - option: 选项，默认为1     - 1: 粉丝手机价格分布     - 2: 粉丝性别分布     - 3: 粉丝年龄分布     - 4: 粉丝地域分布(省份)     - 5: 粉丝地域分布（城市）     - 6: 粉丝城市等级分布     - 7: 粉丝手机品牌分布     - 8: 粉丝兴趣 ### 返回: - 用户粉丝画像数据  # [English] ### Purpose: - Douyin User Fans Portrait ### Parameters: - sec_uid: Sec_uid of user - option: Option, default is 1     - 1: Fans mobile phone price distribution     - 2: Fans gender distribution     - 3: Fans age distribution     - 4: Fans regional distribution (province)     - 5: Fans regional distribution (city)     - 6: Fans city level distribution     - 7: Fans mobile phone brand distribution     - 8: Fans interests ### Return: - User fans portrait data
         * @summary 抖音用户粉丝画像/Douyin User Fans Portrait
         * @param {string} secUid 用户sec_uid/Sec_uid of user
         * @param {string} [option] 选项/Option
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet(secUid: string, option?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet(secUid, option, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音用户粉丝画像 ### 参数: - sec_uid: 用户sec_uid - option: 选项，默认为1     - 1: 粉丝手机价格分布     - 2: 粉丝性别分布     - 3: 粉丝年龄分布     - 4: 粉丝地域分布(省份)     - 5: 粉丝地域分布（城市）     - 6: 粉丝城市等级分布     - 7: 粉丝手机品牌分布     - 8: 粉丝兴趣 ### 返回: - 用户粉丝画像数据  # [English] ### Purpose: - Douyin User Fans Portrait ### Parameters: - sec_uid: Sec_uid of user - option: Option, default is 1     - 1: Fans mobile phone price distribution     - 2: Fans gender distribution     - 3: Fans age distribution     - 4: Fans regional distribution (province)     - 5: Fans regional distribution (city)     - 6: Fans city level distribution     - 7: Fans mobile phone brand distribution     - 8: Fans interests ### Return: - User fans portrait data
         * @summary 抖音用户粉丝画像/Douyin User Fans Portrait
         * @param {string} secUid 用户sec_uid/Sec_uid of user
         * @param {string} [option] 选项/Option
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet_34(secUid: string, option?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet_34(secUid, option, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2
         * @summary 获取用户关注列表/Get user following list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {number} [sourceType] 来源类型/Source type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet(secUserId?: string, maxTime?: string, count?: number, sourceType?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet(secUserId, maxTime, count, sourceType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2
         * @summary 获取用户关注列表/Get user following list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {number} [sourceType] 来源类型/Source type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet_35(secUserId?: string, maxTime?: string, count?: number, sourceType?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet_35(secUserId, maxTime, count, sourceType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标 - count: 最大数量 - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor - count: Maximum count number - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {string} [cookie] 用户网页版抖音Cookie/Your web version of Douyin Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet(secUserId, maxCursor, counts, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标 - count: 最大数量 - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor - count: Maximum count number - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {string} [cookie] 用户网页版抖音Cookie/Your web version of Douyin Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet_36(secUserId: string, maxCursor?: number, counts?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet_36(secUserId, maxCursor, counts, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 使用UID获取用户开播信息 ### 参数: - uid: 用户UID ### 返回: - 用户开播信息，包含room_id与live_status  # [English] ### Purpose: - Get user live information by UID ### Parameters: - uid: User UID ### Return: - User live information, including room_id and live_status  # [示例/Example] uid = \"3081254195702747\"
         * @summary 使用UID获取用户开播信息/Get user live information by UID
         * @param {string} uid 用户UID/User UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet(uid: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 使用UID获取用户开播信息 ### 参数: - uid: 用户UID ### 返回: - 用户开播信息，包含room_id与live_status  # [English] ### Purpose: - Get user live information by UID ### Parameters: - uid: User UID ### Return: - User live information, including room_id and live_status  # [示例/Example] uid = \"3081254195702747\"
         * @summary 使用UID获取用户开播信息/Get user live information by UID
         * @param {string} uid 用户UID/User UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet_37(uid: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet_37(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户直播流数据 ### 参数: - webcast_id: 直播间 webcast_id - 获取方法：     - 假设你的直播间链接为：https://www.douyin.com/root/live/376034101029     - 那么直播间webcast_id为：376034101029     - webcast_id为直播间链接的最后一段数字，与room_id不同。 ### 返回: - 直播流数据  # [English] ### Purpose: - Get user live video data ### Parameters: - webcast_id: Room webcast_id - Acquisition method:     - Assuming your live room link is: https://www.douyin.com/root/live/376034101029     - Then the live room webcast_id is: 376034101029     - The webcast_id is the last number of the live room link, which is different from the room_id. ### Return: - Live stream data  # [示例/Example] webcast_id = \"376034101029\"
         * @summary 获取用户直播流数据/Get user live video data
         * @param {string} webcastId 直播间webcast_id/Room webcast_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet(webcastId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet(webcastId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户直播流数据 ### 参数: - webcast_id: 直播间 webcast_id - 获取方法：     - 假设你的直播间链接为：https://www.douyin.com/root/live/376034101029     - 那么直播间webcast_id为：376034101029     - webcast_id为直播间链接的最后一段数字，与room_id不同。 ### 返回: - 直播流数据  # [English] ### Purpose: - Get user live video data ### Parameters: - webcast_id: Room webcast_id - Acquisition method:     - Assuming your live room link is: https://www.douyin.com/root/live/376034101029     - Then the live room webcast_id is: 376034101029     - The webcast_id is the last number of the live room link, which is different from the room_id. ### Return: - Live stream data  # [示例/Example] webcast_id = \"376034101029\"
         * @summary 获取用户直播流数据/Get user live video data
         * @param {string} webcastId 直播间webcast_id/Room webcast_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet_38(webcastId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet_38(webcastId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的直播流数据 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Get live video data of specified user ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7318296342189919011\"
         * @summary 获取指定用户的直播流数据/Get live video data of specified user
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet(roomId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的直播流数据 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Get live video data of specified user ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7318296342189919011\"
         * @summary 获取指定用户的直播流数据/Get live video data of specified user
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet_39(roomId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet_39(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的直播流数据V2 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Gets the live stream data of the specified user V2 ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7462723839303093032\"
         * @summary 获取指定用户的直播流数据V2/Gets the live stream data of the specified user V2
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get(roomId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的直播流数据V2 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Gets the live stream data of the specified user V2 ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7462723839303093032\"
         * @summary 获取指定用户的直播流数据V2/Gets the live stream data of the specified user V2
         * @param {string} roomId 直播间room_id/Room room_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get_40(roomId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get_40(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过sec_uid获取指定用户的直播流数据 ### 参数: - sec_uid: 用户sec_uid，也叫 sec_user_id，可以在用户主页链接中找到。 ### 返回: - 直播流数据  # [English] ### Purpose - Get live video data of specified user by sec_uid ### Parameters - sec_uid: User sec_uid, also called sec_user_id, can be found in the user\'s homepage link. ### Return - Live stream data  # [示例/Example] sec_uid = \"MS4wLjABAAAAAIKOBr_x6p2fPVKOAhqG8LrC1lwwdWChifKEsl-TXFS-kGSGqpMBRexJdzoAfvUF\"
         * @summary 通过sec_uid获取指定用户的直播流数据/Get live video data of specified user by sec_uid
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet(secUid: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet(secUid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过sec_uid获取指定用户的直播流数据 ### 参数: - sec_uid: 用户sec_uid，也叫 sec_user_id，可以在用户主页链接中找到。 ### 返回: - 直播流数据  # [English] ### Purpose - Get live video data of specified user by sec_uid ### Parameters - sec_uid: User sec_uid, also called sec_user_id, can be found in the user\'s homepage link. ### Return - Live stream data  # [示例/Example] sec_uid = \"MS4wLjABAAAAAIKOBr_x6p2fPVKOAhqG8LrC1lwwdWChifKEsl-TXFS-kGSGqpMBRexJdzoAfvUF\"
         * @summary 通过sec_uid获取指定用户的直播流数据/Get live video data of specified user by sec_uid
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet_41(secUid: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet_41(secUid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户合辑作品数据 ### 参数: - mix_id: 合辑id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user mix video data ### Parameters: - mix_id: Mix id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] url = https://www.douyin.com/collection/7348687990509553679 mix_id = \"7348687990509553679\" max_cursor = 0 counts = 20
         * @summary 获取用户合辑作品数据/Get user mix video data
         * @param {string} mixId 合辑id/Mix id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet(mixId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet(mixId, maxCursor, counts, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户合辑作品数据 ### 参数: - mix_id: 合辑id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user mix video data ### Parameters: - mix_id: Mix id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] url = https://www.douyin.com/collection/7348687990509553679 mix_id = \"7348687990509553679\" max_cursor = 0 counts = 20
         * @summary 获取用户合辑作品数据/Get user mix video data
         * @param {string} mixId 合辑id/Mix id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet_42(mixId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet_42(mixId, maxCursor, counts, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 - 注意：请尽量使用APP的接口而不是WEB的接口，因为WEB的接口可能会被不稳定。 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 翻页游标，第一次请求传0，然后每次请求传上一次请求返回的max_cursor进行翻页。 - count: 最大数量，建议不要超过20 - filter_type: 过滤类型，可选参数如下：     - 0: 默认排序     - 3: 热度排序 - cookie: 用户网页版抖音Cookie(此接口可以接受用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data - Note: Please try to use the APP interface instead of the WEB API, because the WEB API may be unstable. ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Paging cursor, pass 0 for the first request, and then pass the max_cursor returned by the previous request for paging each time. - count: Maximum count number, it is recommended not to exceed 20 - filter_type: Filter type, optional parameters are as follows:     - 0: Default sorting     - 3: Sort by popularity - cookie: User\'s web version of Douyin Cookie (This interface can accept users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = \"0\" counts = 20 filter_type = \"0\"
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {string} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {string} [filterType] 过滤类型/Filter type
         * @param {string} [cookie] 用户网页版抖音Cookie/Your web version of Douyin Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet(secUserId: string, maxCursor?: string, count?: number, filterType?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet(secUserId, maxCursor, count, filterType, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 - 注意：请尽量使用APP的接口而不是WEB的接口，因为WEB的接口可能会被不稳定。 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 翻页游标，第一次请求传0，然后每次请求传上一次请求返回的max_cursor进行翻页。 - count: 最大数量，建议不要超过20 - filter_type: 过滤类型，可选参数如下：     - 0: 默认排序     - 3: 热度排序 - cookie: 用户网页版抖音Cookie(此接口可以接受用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data - Note: Please try to use the APP interface instead of the WEB API, because the WEB API may be unstable. ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Paging cursor, pass 0 for the first request, and then pass the max_cursor returned by the previous request for paging each time. - count: Maximum count number, it is recommended not to exceed 20 - filter_type: Filter type, optional parameters are as follows:     - 0: Default sorting     - 3: Sort by popularity - cookie: User\'s web version of Douyin Cookie (This interface can accept users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = \"0\" counts = 20 filter_type = \"0\"
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {string} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {string} [filterType] 过滤类型/Filter type
         * @param {string} [cookie] 用户网页版抖音Cookie/Your web version of Douyin Cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet_43(secUserId: string, maxCursor?: string, count?: number, filterType?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet_43(secUserId, maxCursor, count, filterType, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 使用Short ID获取用户信息 ### 参数: - short_id: 用户Short ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by Short ID ### Parameters: - short_id: User Short ID ### Return: - User information  # [示例/Example] short_id = \"114131058\"
         * @summary 使用Short ID获取用户信息/Get user information by Short ID
         * @param {string} shortId 用户Short ID/User Short ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet(shortId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet(shortId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 使用Short ID获取用户信息 ### 参数: - short_id: 用户Short ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by Short ID ### Parameters: - short_id: User Short ID ### Return: - User information  # [示例/Example] short_id = \"114131058\"
         * @summary 使用Short ID获取用户信息/Get user information by Short ID
         * @param {string} shortId 用户Short ID/User Short ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet_44(shortId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet_44(shortId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 使用UID获取用户信息 ### 参数: - uid: 用户UID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by UID ### Parameters: - uid: User UID ### Return: - User information  # [示例/Example] uid = \"68141954464\"
         * @summary 使用UID获取用户信息/Get user information by UID
         * @param {string} uid 用户UID/User UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet(uid: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 使用UID获取用户信息 ### 参数: - uid: 用户UID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by UID ### Parameters: - uid: User UID ### Return: - User information  # [示例/Example] uid = \"68141954464\"
         * @summary 使用UID获取用户信息/Get user information by UID
         * @param {string} uid 用户UID/User UID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet_45(uid: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet_45(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20 douyin_user_fans = \"\" douyin_user_type = \"\" search_id = \"\"
         * @summary 获取指定关键词的用户搜索结果(已废弃，使用V2或V3接口代替)/Get user search results of specified keywords (deprecated, use V2 or V3 interface instead)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [douyinUserFans] 粉丝数/Fans
         * @param {string} [douyinUserType] 用户类型/User type
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet(keyword: string, offset?: number, count?: number, douyinUserFans?: string, douyinUserType?: string, searchId?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet(keyword, offset, count, douyinUserFans, douyinUserType, searchId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20 douyin_user_fans = \"\" douyin_user_type = \"\" search_id = \"\"
         * @summary 获取指定关键词的用户搜索结果(已废弃，使用V2或V3接口代替)/Get user search results of specified keywords (deprecated, use V2 or V3 interface instead)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [douyinUserFans] 粉丝数/Fans
         * @param {string} [douyinUserType] 用户类型/User type
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet_46(keyword: string, offset?: number, count?: number, douyinUserFans?: string, douyinUserType?: string, searchId?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet_46(keyword, offset, count, douyinUserFans, douyinUserType, searchId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V2 ### 参数: - keyword: 关键词 - cursor: 游标，第一次请求时为0，后续从返回数据中获取，用于翻页。 ### 返回: - 用户搜索结果V2  # [English] ### Purpose: - Get user search results of specified keywords V2 ### Parameters: - keyword: Keyword - cursor: Cursor, 0 for the first request, get from the returned data later, used for paging. ### Return: - User search results V2  # [示例/Example] keyword = \"中华娘\" cursor = 0
         * @summary 获取指定关键词的用户搜索结果V2/Get user search results of specified keywords V2
         * @param {string} keyword 关键词/Keyword
         * @param {number} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get(keyword: string, cursor?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get(keyword, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V2 ### 参数: - keyword: 关键词 - cursor: 游标，第一次请求时为0，后续从返回数据中获取，用于翻页。 ### 返回: - 用户搜索结果V2  # [English] ### Purpose: - Get user search results of specified keywords V2 ### Parameters: - keyword: Keyword - cursor: Cursor, 0 for the first request, get from the returned data later, used for paging. ### Return: - User search results V2  # [示例/Example] keyword = \"中华娘\" cursor = 0
         * @summary 获取指定关键词的用户搜索结果V2/Get user search results of specified keywords V2
         * @param {string} keyword 关键词/Keyword
         * @param {number} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get_47(keyword: string, cursor?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get_47(keyword, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V3 ### 参数: - keyword: 关键词 - cursor: 偏移量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords V3 ### Parameters: - keyword: Keyword - cursor: Offset - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"中华娘\" cursor = \"0\" douyin_user_fans = \"\" douyin_user_type = \"\"
         * @summary 获取指定关键词的用户搜索结果V3/Get user search results of specified keywords V3
         * @param {string} keyword 关键词/Keyword
         * @param {string} [cursor] 游标/Cursor
         * @param {string} [douyinUserType] 用户类型/User type
         * @param {string} [douyinUserFans] 粉丝数/Fans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get(keyword: string, cursor?: string, douyinUserType?: string, douyinUserFans?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get(keyword, cursor, douyinUserType, douyinUserFans, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V3 ### 参数: - keyword: 关键词 - cursor: 偏移量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords V3 ### Parameters: - keyword: Keyword - cursor: Offset - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"中华娘\" cursor = \"0\" douyin_user_fans = \"\" douyin_user_type = \"\"
         * @summary 获取指定关键词的用户搜索结果V3/Get user search results of specified keywords V3
         * @param {string} keyword 关键词/Keyword
         * @param {string} [cursor] 游标/Cursor
         * @param {string} [douyinUserType] 用户类型/User type
         * @param {string} [douyinUserFans] 粉丝数/Fans
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get_48(keyword: string, cursor?: string, douyinUserType?: string, douyinUserFans?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get_48(keyword, cursor, douyinUserType, douyinUserFans, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音视频榜单 ### 参数: - date: 日期，默认为24     - 1: 一小时内     - 24: 一天内     - 72: 3天内     - 168: 7天内 - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sub_type: 子类型，默认为1001     - 1001: 视频总榜     - 1002: 低粉爆款     - 1003: 高完播率     - 1004: 高涨粉率     - 1005: 高点赞率 ### 返回: - 视频榜单数据  # [English] ### Purpose: - Douyin Video Billboard ### Parameters: - date: Date, default is 24     - 1: Within an hour     - 24: Within a day     - 72: Within 3 days     - 168: Within 7 days - page: Page number, default is 1 - page_size: Number per page, default is 10 - sub_type: Subtype, default is 1001     - 1001: Total video list     - 1002: Low fans explosion     - 1003: High completion rate     - 1004: High increase rate     - 1005: High like rate ### Return: - Video billboard data
         * @summary 抖音视频榜单/Douyin Video Billboard
         * @param {number} date 日期/Date
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {number} subType 子类型/Subtype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet(date: number, page: number, pageSize: number, subType: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet(date, page, pageSize, subType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音视频榜单 ### 参数: - date: 日期，默认为24     - 1: 一小时内     - 24: 一天内     - 72: 3天内     - 168: 7天内 - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sub_type: 子类型，默认为1001     - 1001: 视频总榜     - 1002: 低粉爆款     - 1003: 高完播率     - 1004: 高涨粉率     - 1005: 高点赞率 ### 返回: - 视频榜单数据  # [English] ### Purpose: - Douyin Video Billboard ### Parameters: - date: Date, default is 24     - 1: Within an hour     - 24: Within a day     - 72: Within 3 days     - 168: Within 7 days - page: Page number, default is 1 - page_size: Number per page, default is 10 - sub_type: Subtype, default is 1001     - 1001: Total video list     - 1002: Low fans explosion     - 1003: High completion rate     - 1004: High increase rate     - 1005: High like rate ### Return: - Video billboard data
         * @summary 抖音视频榜单/Douyin Video Billboard
         * @param {number} date 日期/Date
         * @param {number} page 页码/Page number
         * @param {number} pageSize 每页数量/Number per page
         * @param {number} subType 子类型/Subtype
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet_49(date: number, page: number, pageSize: number, subType: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet_49(date, page, pageSize, subType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音视频频道数据 - https://www.douyin.com/channel/300205 ### 参数: - tag_id: 标签id，从URL中获取 - count: 数量 - refresh_index: 刷新索引 ### 返回: - 视频频道数据  # [English] ### Purpose: - Douyin video channel data - https://www.douyin.com/channel/300205 ### Parameters: - tag_id: Tag id, get from the URL - count: Number - refresh_index: Refresh index ### Return: - Video channel data  # [示例/Example] tag_id = 300203 count = 10 refresh_index = 1
         * @summary 抖音视频频道数据/Douyin video channel data
         * @param {number} tagId 标签id/Tag id
         * @param {number} [count] 数量/Number
         * @param {number} [refreshIndex] 刷新索引/Refresh index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet(tagId: number, count?: number, refreshIndex?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet(tagId, count, refreshIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音视频频道数据 - https://www.douyin.com/channel/300205 ### 参数: - tag_id: 标签id，从URL中获取 - count: 数量 - refresh_index: 刷新索引 ### 返回: - 视频频道数据  # [English] ### Purpose: - Douyin video channel data - https://www.douyin.com/channel/300205 ### Parameters: - tag_id: Tag id, get from the URL - count: Number - refresh_index: Refresh index ### Return: - Video channel data  # [示例/Example] tag_id = 300203 count = 10 refresh_index = 1
         * @summary 抖音视频频道数据/Douyin video channel data
         * @param {number} tagId 标签id/Tag id
         * @param {number} [count] 数量/Number
         * @param {number} [refreshIndex] 刷新索引/Refresh index
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet_50(tagId: number, count?: number, refreshIndex?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet_50(tagId, count, refreshIndex, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet(awemeId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet_51(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet_51(awemeId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet(itemId, commentId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_52(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_52(itemId, commentId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: 获取视频新增粉丝数量 ### 参数: - aweme_id: 作品id ### 返回: - 新增粉丝数量  # [English] ### Purpose: Get video new fans count ### Parameters: - aweme_id: Video id ### Return: - New Fans count  # [示例/Example] aweme_id = \"7429296623961853234\"
         * @summary 获取视频新增粉丝数量/Get video new fans count
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: 获取视频新增粉丝数量 ### 参数: - aweme_id: 作品id ### 返回: - 新增粉丝数量  # [English] ### Purpose: Get video new fans count ### Parameters: - aweme_id: Video id ### Return: - New Fans count  # [示例/Example] aweme_id = \"7429296623961853234\"
         * @summary 获取视频新增粉丝数量/Get video new fans count
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet_53(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet_53(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音视频点赞观众画像 ### 参数: - aweme_id: 视频aweme_id - option: 选项，默认为1     - 1: 观众手机价格分布     - 2: 观众性别分布     - 3: 观众年龄分布     - 4: 观众地域分布(省份)     - 5: 观众地域分布(城市)     - 6: 观众城市等级分布     - 7: 观众手机品牌分布  ### 返回: - 视频点赞观众画像数据  # [English] ### Purpose: - Douyin Video Like Viewer Portrait ### Parameters: - aweme_id: Aweme_id of video - option: Option, default is 1     - 1: Distribution of audience mobile phone prices     - 2: Distribution of audience gender     - 3: Distribution of audience age     - 4: Distribution of audience region (province)     - 5: Distribution of audience region (city)     - 6: Distribution of audience city level     - 7: Distribution of audience mobile phone brands ### Return: - Video like viewer portrait data
         * @summary 抖音视频点赞观众画像/Douyin Video Like Viewer Portrait
         * @param {string} awemeId 视频aweme_id/Aweme_id of video
         * @param {string} option 选项/Option
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet(awemeId: string, option: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet(awemeId, option, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音视频点赞观众画像 ### 参数: - aweme_id: 视频aweme_id - option: 选项，默认为1     - 1: 观众手机价格分布     - 2: 观众性别分布     - 3: 观众年龄分布     - 4: 观众地域分布(省份)     - 5: 观众地域分布(城市)     - 6: 观众城市等级分布     - 7: 观众手机品牌分布  ### 返回: - 视频点赞观众画像数据  # [English] ### Purpose: - Douyin Video Like Viewer Portrait ### Parameters: - aweme_id: Aweme_id of video - option: Option, default is 1     - 1: Distribution of audience mobile phone prices     - 2: Distribution of audience gender     - 3: Distribution of audience age     - 4: Distribution of audience region (province)     - 5: Distribution of audience region (city)     - 6: Distribution of audience city level     - 7: Distribution of audience mobile phone brands ### Return: - Video like viewer portrait data
         * @summary 抖音视频点赞观众画像/Douyin Video Like Viewer Portrait
         * @param {string} awemeId 视频aweme_id/Aweme_id of video
         * @param {string} option 选项/Option
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet_54(awemeId: string, option: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet_54(awemeId, option, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求时为0，后续从返回数据中获取，用于翻页。     - 例如: offset = 10     - JSON Path-1 : $.data.cursor - count: 数量，默认为10，建议保持不变。 - sort_type:     - 0:综合排序     - 1:最多点赞     - 2:最新发布 - publish_time:     - 0:不限     - 1:最近一天     - 7:最近一周     - 180:最近半年 - filter_duration:     - 0:不限 0-1:1分钟以内     - 1-5:1-5分钟     - 5-10000:5分钟以上 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset, 0 for the first request, get from the returned data later, used for paging.     - For example: offset = 10     - JSON Path-1 : $.data.cursor - count: Number, default is 10, it is recommended to keep it unchanged. - sort_type:     - 0: Comprehensive sorting     - 1: Most likes     - 2: Latest release - publish_time:     - 0: Unlimited     - 1: Last day     - 7: Last week     - 180: Last half year - filter_duration:     - 0: Unlimited     - 0-1: Within 1 minute     - 1-5: 1-5 minutes     - 5-10000: More than 5 minutes - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results  # [示例/Example] keyword = \"游戏\" offset = 0 count = 10 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" search_id = \"\"
         * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, searchId?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet(keyword, offset, count, sortType, publishTime, filterDuration, searchId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求时为0，后续从返回数据中获取，用于翻页。     - 例如: offset = 10     - JSON Path-1 : $.data.cursor - count: 数量，默认为10，建议保持不变。 - sort_type:     - 0:综合排序     - 1:最多点赞     - 2:最新发布 - publish_time:     - 0:不限     - 1:最近一天     - 7:最近一周     - 180:最近半年 - filter_duration:     - 0:不限 0-1:1分钟以内     - 1-5:1-5分钟     - 5-10000:5分钟以上 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset, 0 for the first request, get from the returned data later, used for paging.     - For example: offset = 10     - JSON Path-1 : $.data.cursor - count: Number, default is 10, it is recommended to keep it unchanged. - sort_type:     - 0: Comprehensive sorting     - 1: Most likes     - 2: Latest release - publish_time:     - 0: Unlimited     - 1: Last day     - 7: Last week     - 180: Last half year - filter_duration:     - 0: Unlimited     - 0-1: Within 1 minute     - 1-5: 1-5 minutes     - 5-10000: More than 5 minutes - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results  # [示例/Example] keyword = \"游戏\" offset = 0 count = 10 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" search_id = \"\"
         * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet_55(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, searchId?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet_55(keyword, offset, count, sortType, publishTime, filterDuration, searchId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"
         * @summary 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
         * @param {string} keyword 关键词/Keyword
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {number} [page] 页码/Page
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get(keyword: string, sortType?: string, publishTime?: string, filterDuration?: string, page?: number, searchId?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get(keyword, sortType, publishTime, filterDuration, page, searchId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"
         * @summary 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
         * @param {string} keyword 关键词/Keyword
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {number} [page] 页码/Page
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get_56(keyword: string, sortType?: string, publishTime?: string, filterDuration?: string, page?: number, searchId?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get_56(keyword, sortType, publishTime, filterDuration, page, searchId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 使用接口网址生成A-Bogus参数，提交的URL不能带有a_bogus参数，同时a_bogus参数与请求头中的User-Agent有关，需要一起提交和请求。 ### 参数: - url: API链接，请去除url中的原本的a_boogus参数(如有)。 - data: 请求载荷，只有在POST请求中才需要提交，GET请求中使用空字符串即可。 - user_agent: user-agent，需要提交你请求头中的User-Agent，该值参与a_bogus参数的计算。 - index_0: 加密明文列表的第一个值，无特殊要求，默认为0，不要随意修改。 - index_1: 加密明文列表的第二个值，无特殊要求，默认为1，不要随意修改。 - index_2: 加密明文列表的第三个值，无特殊要求，默认为14，不要随意修改。 ### 返回: - A-Bogus参数  # [English] ### Purpose: - Generate A-Bogus parameter using API URL, the submitted URL cannot contain the original a_boogus parameter, and the a_bogus parameter is related to the User-Agent in the request header, which needs to be submitted and requested together. ### Parameters: - url: API link, please remove the original a_boogus parameter from the url (if any). - data: Request payload, only need to submit in POST request, use an empty string in GET request. - user_agent: user-agent, you need to submit the User-Agent in your request header, which is involved in the calculation of the a_bogus parameter. - index_0: The first value of the encrypted plaintext list, no special requirements, the default is 0, do not modify it at will. - index_1: The second value of the encrypted plaintext list, no special requirements, the default is 1, do not modify it at will. - index_2: The third value of the encrypted plaintext list, no special requirements, the default is 14, do not modify it at will. ### Return: - A-Bogus parameter  # [示例/Example] ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/general/search/single/?device_platform=webapp&aid=6383&channel=channel_pc_web&search_channel=aweme_general&enable_history=1&keyword=%E4%B8%AD%E5%8D%8E%E5%A8%98&search_source=normal_search&query_correct_type=1&is_filter_search=0&from_group_id=7346905902554844468&offset=0&count=15&need_filter_settings=1&pc_client_type=1&version_code=190600&version_name=19.6.0&cookie_enabled=true&screen_width=1280&screen_height=800&browser_language=zh-CN&browser_platform=Win32&browser_name=Firefox&browser_version=124.0&browser_online=true&engine_name=Gecko&engine_version=124.0&os_name=Windows&os_version=10&cpu_core_num=16&device_memory=&platform=PC&webid=7348962975497324070&msToken=YCTVM6YGmjFdIpQAN9ykXLBXiSiuHdZkOkEQWTeqVOHBEPmOcM0lNwE0Kd9vgHPMPigSndZDHfAq9k-6lDmH3Jqz6mHHxmn-BzQjmLMIfLIPgirgnOixM9x4PwgcNQ%3D%3D\", \"data\": \"\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\", \"index_0\": 0, \"index_1\": 1, \"index_2\": 14 } ```
         * @summary 使用接口网址生成A-Bogus参数/Generate A-Bogus parameter using API URL
         * @param {ABogusModel} [aBogusModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateABogusApiV1DouyinWebGenerateABogusPost(aBogusModel?: ABogusModel, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).generateABogusApiV1DouyinWebGenerateABogusPost(aBogusModel, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 使用接口网址生成A-Bogus参数，提交的URL不能带有a_bogus参数，同时a_bogus参数与请求头中的User-Agent有关，需要一起提交和请求。 ### 参数: - url: API链接，请去除url中的原本的a_boogus参数(如有)。 - data: 请求载荷，只有在POST请求中才需要提交，GET请求中使用空字符串即可。 - user_agent: user-agent，需要提交你请求头中的User-Agent，该值参与a_bogus参数的计算。 - index_0: 加密明文列表的第一个值，无特殊要求，默认为0，不要随意修改。 - index_1: 加密明文列表的第二个值，无特殊要求，默认为1，不要随意修改。 - index_2: 加密明文列表的第三个值，无特殊要求，默认为14，不要随意修改。 ### 返回: - A-Bogus参数  # [English] ### Purpose: - Generate A-Bogus parameter using API URL, the submitted URL cannot contain the original a_boogus parameter, and the a_bogus parameter is related to the User-Agent in the request header, which needs to be submitted and requested together. ### Parameters: - url: API link, please remove the original a_boogus parameter from the url (if any). - data: Request payload, only need to submit in POST request, use an empty string in GET request. - user_agent: user-agent, you need to submit the User-Agent in your request header, which is involved in the calculation of the a_bogus parameter. - index_0: The first value of the encrypted plaintext list, no special requirements, the default is 0, do not modify it at will. - index_1: The second value of the encrypted plaintext list, no special requirements, the default is 1, do not modify it at will. - index_2: The third value of the encrypted plaintext list, no special requirements, the default is 14, do not modify it at will. ### Return: - A-Bogus parameter  # [示例/Example] ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/general/search/single/?device_platform=webapp&aid=6383&channel=channel_pc_web&search_channel=aweme_general&enable_history=1&keyword=%E4%B8%AD%E5%8D%8E%E5%A8%98&search_source=normal_search&query_correct_type=1&is_filter_search=0&from_group_id=7346905902554844468&offset=0&count=15&need_filter_settings=1&pc_client_type=1&version_code=190600&version_name=19.6.0&cookie_enabled=true&screen_width=1280&screen_height=800&browser_language=zh-CN&browser_platform=Win32&browser_name=Firefox&browser_version=124.0&browser_online=true&engine_name=Gecko&engine_version=124.0&os_name=Windows&os_version=10&cpu_core_num=16&device_memory=&platform=PC&webid=7348962975497324070&msToken=YCTVM6YGmjFdIpQAN9ykXLBXiSiuHdZkOkEQWTeqVOHBEPmOcM0lNwE0Kd9vgHPMPigSndZDHfAq9k-6lDmH3Jqz6mHHxmn-BzQjmLMIfLIPgirgnOixM9x4PwgcNQ%3D%3D\", \"data\": \"\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\", \"index_0\": 0, \"index_1\": 1, \"index_2\": 14 } ```
         * @summary 使用接口网址生成A-Bogus参数/Generate A-Bogus parameter using API URL
         * @param {ABogusModel} [aBogusModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateABogusApiV1DouyinWebGenerateABogusPost_57(aBogusModel?: ABogusModel, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).generateABogusApiV1DouyinWebGenerateABogusPost_57(aBogusModel, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成真实msToken ### 返回: - msToken  # [English] ### Purpose: - Generate real msToken ### Return: - msToken
         * @summary 生成真实msToken/Generate real msToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet(options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).generateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成真实msToken ### 返回: - msToken  # [English] ### Purpose: - Generate real msToken ### Return: - msToken
         * @summary 生成真实msToken/Generate real msToken
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet_58(options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).generateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet_58(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成s_v_web_id ### 返回: - s_v_web_id  # [English] ### Purpose: - Generate s_v_web_id ### Return: - s_v_web_id
         * @summary 生成s_v_web_id/Generate s_v_web_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSVWebIdApiV1DouyinWebGenerateSVWebIdGet(options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).generateSVWebIdApiV1DouyinWebGenerateSVWebIdGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成s_v_web_id ### 返回: - s_v_web_id  # [English] ### Purpose: - Generate s_v_web_id ### Return: - s_v_web_id
         * @summary 生成s_v_web_id/Generate s_v_web_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSVWebIdApiV1DouyinWebGenerateSVWebIdGet_59(options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).generateSVWebIdApiV1DouyinWebGenerateSVWebIdGet_59(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成ttwid ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Return: - ttwid
         * @summary 生成ttwid/Generate ttwid
         * @param {string} [userAgent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTtwidApiV1DouyinWebGenerateTtwidGet(userAgent?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).generateTtwidApiV1DouyinWebGenerateTtwidGet(userAgent, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成ttwid ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Return: - ttwid
         * @summary 生成ttwid/Generate ttwid
         * @param {string} [userAgent] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTtwidApiV1DouyinWebGenerateTtwidGet_60(userAgent?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).generateTtwidApiV1DouyinWebGenerateTtwidGet_60(userAgent, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成verify_fp ### 返回: - verify_fp  # [English] ### Purpose: - Generate verify_fp ### Return: - verify_fp
         * @summary 生成verify_fp/Generate verify_fp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateVerifyFpApiV1DouyinWebGenerateVerifyFpGet(options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).generateVerifyFpApiV1DouyinWebGenerateVerifyFpGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成verify_fp ### 返回: - verify_fp  # [English] ### Purpose: - Generate verify_fp ### Return: - verify_fp
         * @summary 生成verify_fp/Generate verify_fp
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateVerifyFpApiV1DouyinWebGenerateVerifyFpGet_61(options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).generateVerifyFpApiV1DouyinWebGenerateVerifyFpGet_61(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 使用接口网址生成X-Bogus参数 ### 参数: - url: 接口网址  # [English] ### Purpose: - Generate X-Bogus parameter using API URL ### Parameters: - url: API URL  # [示例/Example]  ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" } ```
         * @summary 使用接口网址生成X-Bogus参数/Generate X-Bogus parameter using API URL
         * @param {XBogusModel} [xBogusModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateXBogusApiV1DouyinWebGenerateXBogusPost(xBogusModel?: XBogusModel, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).generateXBogusApiV1DouyinWebGenerateXBogusPost(xBogusModel, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 使用接口网址生成X-Bogus参数 ### 参数: - url: 接口网址  # [English] ### Purpose: - Generate X-Bogus parameter using API URL ### Parameters: - url: API URL  # [示例/Example]  ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" } ```
         * @summary 使用接口网址生成X-Bogus参数/Generate X-Bogus parameter using API URL
         * @param {XBogusModel} [xBogusModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateXBogusApiV1DouyinWebGenerateXBogusPost_62(xBogusModel?: XBogusModel, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).generateXBogusApiV1DouyinWebGenerateXBogusPost_62(xBogusModel, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文]  ### 用途:  - 提取列表作品id（最多支持20个链接）  ### 参数:  - url: 作品链接列表  ### 返回:  - 作品id列表   # [English]  ### Purpose:  - Extract list video id (supports up to 20 links)  ### Parameters:  - url: Video link list  ### Return:  - Video id list   # [示例/Example]  ```json  { \"urls\":[     \"0.53 02/26 I@v.sE Fus:/ 你别太帅了郑润泽# 现场版live # 音乐节 # 郑润泽  https://v.douyin.com/iRNBho6u/ 复制此链接，打开Dou音搜索，直接观看视频!\",     \"https://v.douyin.com/iRNBho6u/\",     \"https://www.iesdouyin.com/share/video/7298145681699622182/?region=CN&mid=7298145762238565171&u_code=l1j9bkbd&did=MS4wLjABAAAAtqpCx0hpOERbdSzQdjRZw-wFPxaqdbAzsKDmbJMUI3KWlMGQHC-n6dXAqa-dM2EP&iid=MS4wLjABAAAANwkJuWIRFOzg5uCpDRpMj4OX-QryoDgn-yYlXQnRwQQ&with_sec_did=1&titleType=title&share_sign=05kGlqGmR4_IwCX.ZGk6xuL0osNA..5ur7b0jbOx6cc-&share_version=170400&ts=1699262937&from_aid=6383&from_ssr=1&from=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182?previous_page=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182\",  ]  }  ```
         * @summary 提取列表作品id/Extract list video id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).getAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文]  ### 用途:  - 提取列表作品id（最多支持20个链接）  ### 参数:  - url: 作品链接列表  ### 返回:  - 作品id列表   # [English]  ### Purpose:  - Extract list video id (supports up to 20 links)  ### Parameters:  - url: Video link list  ### Return:  - Video id list   # [示例/Example]  ```json  { \"urls\":[     \"0.53 02/26 I@v.sE Fus:/ 你别太帅了郑润泽# 现场版live # 音乐节 # 郑润泽  https://v.douyin.com/iRNBho6u/ 复制此链接，打开Dou音搜索，直接观看视频!\",     \"https://v.douyin.com/iRNBho6u/\",     \"https://www.iesdouyin.com/share/video/7298145681699622182/?region=CN&mid=7298145762238565171&u_code=l1j9bkbd&did=MS4wLjABAAAAtqpCx0hpOERbdSzQdjRZw-wFPxaqdbAzsKDmbJMUI3KWlMGQHC-n6dXAqa-dM2EP&iid=MS4wLjABAAAANwkJuWIRFOzg5uCpDRpMj4OX-QryoDgn-yYlXQnRwQQ&with_sec_did=1&titleType=title&share_sign=05kGlqGmR4_IwCX.ZGk6xuL0osNA..5ur7b0jbOx6cc-&share_version=170400&ts=1699262937&from_aid=6383&from_ssr=1&from=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182?previous_page=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182\",  ]  }  ```
         * @summary 提取列表作品id/Extract list video id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost_63(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).getAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost_63(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文]  ### 用途:  - 提取列表用户id  ### 参数:  - url: 用户主页链接列表（最多支持10个链接）  ### 返回:  - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。   # [English]  ### Purpose:  - Extract list user id  ### Parameters:  - url: User homepage link list (supports up to 10 links)  ### Return:  - If the sec_user_id is successfully obtained from the link, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.   # [示例/Example]  ```json  { \"urls\":[    \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE?vid=7285950278132616463\",    \"https://www.douyin.com/user/MS4wLjABAAAAVsneOf144eGDFf8Xp9QNb1VW6ovXnNT5SqJBhJfe8KQBKWKDTWK5Hh-_i9mJzb8C\",    \"长按复制此条消息，打开抖音搜索，查看TA的更多作品。 https://v.douyin.com/idFqvUms/\",    \"https://v.douyin.com/idFqvUms/\"     ]  }  ```
         * @summary 提取列表用户id/Extract list user id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).getAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文]  ### 用途:  - 提取列表用户id  ### 参数:  - url: 用户主页链接列表（最多支持10个链接）  ### 返回:  - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。   # [English]  ### Purpose:  - Extract list user id  ### Parameters:  - url: User homepage link list (supports up to 10 links)  ### Return:  - If the sec_user_id is successfully obtained from the link, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.   # [示例/Example]  ```json  { \"urls\":[    \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE?vid=7285950278132616463\",    \"https://www.douyin.com/user/MS4wLjABAAAAVsneOf144eGDFf8Xp9QNb1VW6ovXnNT5SqJBhJfe8KQBKWKDTWK5Hh-_i9mJzb8C\",    \"长按复制此条消息，打开抖音搜索，查看TA的更多作品。 https://v.douyin.com/idFqvUms/\",    \"https://v.douyin.com/idFqvUms/\"     ]  }  ```
         * @summary 提取列表用户id/Extract list user id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost_64(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).getAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost_64(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接列表（最多支持20个链接） ### 返回: - 直播间号列表  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link list (supports up to 20 links) ### Return: - Room id list  # [示例/Example] ```json {   \"urls\": [         \"https://live.douyin.com/775841227732\",         \"https://live.douyin.com/775841227732?room_id=7318296342189919011&enter_from_merge=web_share_link&enter_method=web_share_link&previous_page=app_code_link\",         \'https://webcast.amemv.com/douyin/webcast/reflow/7318296342189919011?u_code=l1j9bkbd&did=MS4wLjABAAAAEs86TBQPNwAo-RGrcxWyCdwKhI66AK3Pqf3ieo6HaxI&iid=MS4wLjABAAAA0ptpM-zzoliLEeyvWOCUt-_dQza4uSjlIvbtIazXnCY&with_sec_did=1&use_link_command=1&ecom_share_track_params=&extra_params={\"from_request_id\":\"20231230162057EC005772A8EAA0199906\",\"im_channel_invite_id\":\"0\"}&user_id=3644207898042206&liveId=7318296342189919011&from=share&style=share&enter_method=click_share&roomId=7318296342189919011&activity_info={}\',         \"6i- Q@x.Sl 03/23 【醒子8ke的直播间】  点击打开👉https://v.douyin.com/i8tBR7hX/  或长按复制此条消息，打开抖音，看TA直播\",         \"https://v.douyin.com/i8tBR7hX/\",         ] } ```
         * @summary 提取列表直播间号/Extract list webcast id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).getAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接列表（最多支持20个链接） ### 返回: - 直播间号列表  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link list (supports up to 20 links) ### Return: - Room id list  # [示例/Example] ```json {   \"urls\": [         \"https://live.douyin.com/775841227732\",         \"https://live.douyin.com/775841227732?room_id=7318296342189919011&enter_from_merge=web_share_link&enter_method=web_share_link&previous_page=app_code_link\",         \'https://webcast.amemv.com/douyin/webcast/reflow/7318296342189919011?u_code=l1j9bkbd&did=MS4wLjABAAAAEs86TBQPNwAo-RGrcxWyCdwKhI66AK3Pqf3ieo6HaxI&iid=MS4wLjABAAAA0ptpM-zzoliLEeyvWOCUt-_dQza4uSjlIvbtIazXnCY&with_sec_did=1&use_link_command=1&ecom_share_track_params=&extra_params={\"from_request_id\":\"20231230162057EC005772A8EAA0199906\",\"im_channel_invite_id\":\"0\"}&user_id=3644207898042206&liveId=7318296342189919011&from=share&style=share&enter_method=click_share&roomId=7318296342189919011&activity_info={}\',         \"6i- Q@x.Sl 03/23 【醒子8ke的直播间】  点击打开👉https://v.douyin.com/i8tBR7hX/  或长按复制此条消息，打开抖音，看TA直播\",         \"https://v.douyin.com/i8tBR7hX/\",         ] } ```
         * @summary 提取列表直播间号/Extract list webcast id
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost_65(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).getAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost_65(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.douyin.com/video/7298145681699622182\"
         * @summary 提取单个作品id/Extract single video id
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAwemeIdApiV1DouyinWebGetAwemeIdGet(url: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).getAwemeIdApiV1DouyinWebGetAwemeIdGet(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.douyin.com/video/7298145681699622182\"
         * @summary 提取单个作品id/Extract single video id
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAwemeIdApiV1DouyinWebGetAwemeIdGet_66(url: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).getAwemeIdApiV1DouyinWebGetAwemeIdGet_66(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 提取单个用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户sec_user_id  # [English] ### Purpose: - Extract single user id ### Parameters: - url: User homepage link ### Return: - User sec_user_id  # [示例/Example] url = \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\"
         * @summary 提取单个用户id/Extract single user id
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecUserIdApiV1DouyinWebGetSecUserIdGet(url: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).getSecUserIdApiV1DouyinWebGetSecUserIdGet(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 提取单个用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户sec_user_id  # [English] ### Purpose: - Extract single user id ### Parameters: - url: User homepage link ### Return: - User sec_user_id  # [示例/Example] url = \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\"
         * @summary 提取单个用户id/Extract single user id
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecUserIdApiV1DouyinWebGetSecUserIdGet_67(url: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).getSecUserIdApiV1DouyinWebGetSecUserIdGet_67(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接 ### 返回: - 直播间号  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link ### Return: - Room id  # [示例/Example] url = \"https://live.douyin.com/775841227732\"
         * @summary 提取直播间号/Extract webcast id
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebcastIdApiV1DouyinWebGetWebcastIdGet(url: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).getWebcastIdApiV1DouyinWebGetWebcastIdGet(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接 ### 返回: - 直播间号  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link ### Return: - Room id  # [示例/Example] url = \"https://live.douyin.com/775841227732\"
         * @summary 提取直播间号/Extract webcast id
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWebcastIdApiV1DouyinWebGetWebcastIdGet_68(url: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).getWebcastIdApiV1DouyinWebGetWebcastIdGet_68(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 根据sec_user_id获取指定用户的信息/Get information of specified user by sec_user_id
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1DouyinWebHandlerUserProfileGet(secUserId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).handlerUserProfileApiV1DouyinWebHandlerUserProfileGet(secUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 根据sec_user_id获取指定用户的信息/Get information of specified user by sec_user_id
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1DouyinWebHandlerUserProfileGet_69(secUserId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).handlerUserProfileApiV1DouyinWebHandlerUserProfileGet_69(secUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据抖音号获取指定用户的信息 ### 参数: - unique_id: 用户unique_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - unique_id: User unique_id ### Return: - User information  # [示例/Example] unique_id = \"TheChief\"
         * @summary 根据抖音号获取指定用户的信息/Get information of specified user by unique_id
         * @param {string} uniqueId 用户unique_id/User unique_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get(uniqueId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get(uniqueId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据抖音号获取指定用户的信息 ### 参数: - unique_id: 用户unique_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - unique_id: User unique_id ### Return: - User information  # [示例/Example] unique_id = \"TheChief\"
         * @summary 根据抖音号获取指定用户的信息/Get information of specified user by unique_id
         * @param {string} uniqueId 用户unique_id/User unique_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get_70(uniqueId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get_70(uniqueId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据抖音uid获取指定用户的信息 ### 参数: - uid: 用户uid，也就是抖音号的short_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - uid: User uid, which is the short_id of the Douyin number ### Return: - User information  # [示例/Example] uid = \"1673937488185292\"
         * @summary 根据抖音uid获取指定用户的信息/Get information of specified user by uid
         * @param {string} uid 用户uid(short_id)/User uid(short_id)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get(uid: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据抖音uid获取指定用户的信息 ### 参数: - uid: 用户uid，也就是抖音号的short_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - uid: User uid, which is the short_id of the Douyin number ### Return: - User information  # [示例/Example] uid = \"1673937488185292\"
         * @summary 根据抖音uid获取指定用户的信息/Get information of specified user by uid
         * @param {string} uid 用户uid(short_id)/User uid(short_id)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get_71(uid: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get_71(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息，包含性别，年龄，直播等级，直播间牌子 ### 说明： - 性别：1为男，2为女，0为未知，在live_user字段中。 - 年龄：在user字段中，-1为未知。  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information, including gender, age, live level, live room brand ### Description: - gender: 1 male, 2 female, 0 unknown, in the live_user field. - age: in the user field, -1 unknown.  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 根据sec_user_id获取指定用户的信息（性别，年龄，直播等级、牌子）/Get information of specified user by sec_user_id (gender, age, live level、brand)
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get(secUserId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get(secUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息，包含性别，年龄，直播等级，直播间牌子 ### 说明： - 性别：1为男，2为女，0为未知，在live_user字段中。 - 年龄：在user字段中，-1为未知。  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information, including gender, age, live level, live room brand ### Description: - gender: 1 male, 2 female, 0 unknown, in the live_user field. - age: in the user field, -1 unknown.  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 根据sec_user_id获取指定用户的信息（性别，年龄，直播等级、牌子）/Get information of specified user by sec_user_id (gender, age, live level、brand)
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get_72(secUserId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get_72(secUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 直播间号转房间号 ### 参数: - webcast_id: 直播间号 ### 返回: - 房间号  # [English] ### Purpose: - Webcast id to room id ### Parameters: - webcast_id: Webcast id ### Return: - Room id  # [示例/Example] \"webcast_id = \"775841227732\"
         * @summary 直播间号转房间号/Webcast id to room id
         * @param {string} webcastId 直播间号/Webcast id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet(webcastId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet(webcastId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 直播间号转房间号 ### 参数: - webcast_id: 直播间号 ### 返回: - 房间号  # [English] ### Purpose: - Webcast id to room id ### Parameters: - webcast_id: Webcast id ### Return: - Room id  # [示例/Example] \"webcast_id = \"775841227732\"
         * @summary 直播间号转房间号/Webcast id to room id
         * @param {string} webcastId 直播间号/Webcast id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet_73(webcastId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinWebAPIApiFp(configuration).webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet_73(webcastId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DouyinWebAPIApi - interface
 * @export
 * @interface DouyinWebAPIApi
 */
export interface DouyinWebAPIApiInterface {
    /**
     * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastRoomMessage：直播间消息     - WebcastLikeMessage：点赞消息     - WebcastMemberMessage：成员消息     - WebcastChatMessage：聊天消息     - WebcastGiftMessage：礼物消息     - WebcastSocialMessage：社交消息     - WebcastRoomUserSeqMessage：用户序列消息     - WebcastUpdateFanTicketMessage：更新粉丝消息     - WebcastCommonTextMessage：常规文本消息     - WebcastMatchAgainstScoreMessage：比赛得分消息     - WebcastFansclubMessage：粉丝俱乐部消息     - WebcastRanklistHourEntranceMessage：排行榜小时入口消息     - WebcastRoomStatsMessage：直播间统计消息     - WebcastLiveShoppingMessage: 直播购物消息     - WebcastLiveEcomGeneralMessage: 直播电商通用消息     - WebcastProductChangeMessage: 直播商品变更消息     - WebcastRoomStreamAdaptationMessage: 直播间流适配消息     - WebcastNotifyEffectMessage: 通知效果消息     - WebcastLightGiftMessage: 亮礼物消息     - WebcastProfitInteractionScoreMessage: 收益互动分消息     - WebcastRoomRankMessage: 直播间排行消息 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discounts. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastRoomMessage: Live room message     - WebcastLikeMessage: Like message     - WebcastMemberMessage: Member message     - WebcastChatMessage: Chat message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastUpdateFanTicketMessage: Update fan message     - WebcastCommonTextMessage: Common text message     - WebcastMatchAgainstScoreMessage: Match score message     - WebcastFansclubMessage: Fans club message     - WebcastRanklistHourEntranceMessage: Ranking list hour entrance message     - WebcastRoomStatsMessage: Live room statistics message     - WebcastLiveShoppingMessage: Live shopping message     - WebcastLiveEcomGeneralMessage: Live e-commerce general message     - WebcastProductChangeMessage: Live product change message     - WebcastRoomStreamAdaptationMessage: Live room stream adaptation message     - WebcastNotifyEffectMessage: Notification effect message     - WebcastLightGiftMessage: Light gift message     - WebcastProfitInteractionScoreMessage: Profit interaction score message     - WebcastRoomRankMessage: Live room ranking message ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
     * @summary 提取直播间弹幕/Extract live room danmaku
     * @param {string} liveRoomUrl 直播间链接/Live room link
     * @param {string} danmakuType 消息类型/Message type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet(liveRoomUrl: string, danmakuType: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastRoomMessage：直播间消息     - WebcastLikeMessage：点赞消息     - WebcastMemberMessage：成员消息     - WebcastChatMessage：聊天消息     - WebcastGiftMessage：礼物消息     - WebcastSocialMessage：社交消息     - WebcastRoomUserSeqMessage：用户序列消息     - WebcastUpdateFanTicketMessage：更新粉丝消息     - WebcastCommonTextMessage：常规文本消息     - WebcastMatchAgainstScoreMessage：比赛得分消息     - WebcastFansclubMessage：粉丝俱乐部消息     - WebcastRanklistHourEntranceMessage：排行榜小时入口消息     - WebcastRoomStatsMessage：直播间统计消息     - WebcastLiveShoppingMessage: 直播购物消息     - WebcastLiveEcomGeneralMessage: 直播电商通用消息     - WebcastProductChangeMessage: 直播商品变更消息     - WebcastRoomStreamAdaptationMessage: 直播间流适配消息     - WebcastNotifyEffectMessage: 通知效果消息     - WebcastLightGiftMessage: 亮礼物消息     - WebcastProfitInteractionScoreMessage: 收益互动分消息     - WebcastRoomRankMessage: 直播间排行消息 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discounts. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastRoomMessage: Live room message     - WebcastLikeMessage: Like message     - WebcastMemberMessage: Member message     - WebcastChatMessage: Chat message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastUpdateFanTicketMessage: Update fan message     - WebcastCommonTextMessage: Common text message     - WebcastMatchAgainstScoreMessage: Match score message     - WebcastFansclubMessage: Fans club message     - WebcastRanklistHourEntranceMessage: Ranking list hour entrance message     - WebcastRoomStatsMessage: Live room statistics message     - WebcastLiveShoppingMessage: Live shopping message     - WebcastLiveEcomGeneralMessage: Live e-commerce general message     - WebcastProductChangeMessage: Live product change message     - WebcastRoomStreamAdaptationMessage: Live room stream adaptation message     - WebcastNotifyEffectMessage: Notification effect message     - WebcastLightGiftMessage: Light gift message     - WebcastProfitInteractionScoreMessage: Profit interaction score message     - WebcastRoomRankMessage: Live room ranking message ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
     * @summary 提取直播间弹幕/Extract live room danmaku
     * @param {string} liveRoomUrl 直播间链接/Live room link
     * @param {string} danmakuType 消息类型/Message type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet_1(liveRoomUrl: string, danmakuType: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音热点分类 ### 参数: - billboard_type: 热点类型     - rise: 上升热点榜分类     - city: 同城热点榜分类     - total: 热点总榜分类 ### 返回: - 热点分类数据  # [English] ### Purpose: - Douyin Billboard Categories ### Parameters: - billboard_type: Hotspot type     - rise: Rising hot spot list category     - city: City hot spot list category     - total: Total hot spot list category ### Return: - Hotspot category data
     * @summary 抖音热点分类/Douyin Billboard Categories
     * @param {string} billboardType 热点类型/Hotspot type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet(billboardType: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音热点分类 ### 参数: - billboard_type: 热点类型     - rise: 上升热点榜分类     - city: 同城热点榜分类     - total: 热点总榜分类 ### 返回: - 热点分类数据  # [English] ### Purpose: - Douyin Billboard Categories ### Parameters: - billboard_type: Hotspot type     - rise: Rising hot spot list category     - city: City hot spot list category     - total: Total hot spot list category ### Return: - Hotspot category data
     * @summary 抖音热点分类/Douyin Billboard Categories
     * @param {string} billboardType 热点类型/Hotspot type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet_2(billboardType: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音榜单相关视频 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_id: 分类ID ### 返回: - 相关视频数据  # [English] ### Purpose: - Douyin Billboard Related Videos ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_id: Category ID ### Return: - Related video data
     * @summary 抖音榜单相关视频/Douyin Billboard Related Videos
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {string} sentenceId 分类ID/Category ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet(page: number, pageSize: number, sentenceId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音榜单相关视频 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_id: 分类ID ### 返回: - 相关视频数据  # [English] ### Purpose: - Douyin Billboard Related Videos ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_id: Category ID ### Return: - Related video data
     * @summary 抖音榜单相关视频/Douyin Billboard Related Videos
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {string} sentenceId 分类ID/Category ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet_3(page: number, pageSize: number, sentenceId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 二次元作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 二次元作品数据  # [English] ### Purpose: - Cartoon Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Cartoon Video data
     * @summary 二次元作品推荐/Knowledge Video
     * @param {number} count 每页数量/Number per page
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet(count: number, refreshIndex?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 二次元作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 二次元作品数据  # [English] ### Purpose: - Cartoon Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Cartoon Video data
     * @summary 二次元作品推荐/Knowledge Video
     * @param {number} count 每页数量/Number per page
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet_4(count: number, refreshIndex?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 美食作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 美食作品数据  # [English] ### Purpose: - Food Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Food Video data
     * @summary 美食作品推荐/Knowledge Video
     * @param {number} count 每页数量/Number per page
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet(count: number, refreshIndex?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 美食作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 美食作品数据  # [English] ### Purpose: - Food Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Food Video data
     * @summary 美食作品推荐/Knowledge Video
     * @param {number} count 每页数量/Number per page
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet_5(count: number, refreshIndex?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 音乐作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 音乐作品数据  # [English] ### Purpose: - Music Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Music Video data
     * @summary 音乐作品推荐/Knowledge Video
     * @param {number} count 每页数量/Number per page
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet(count: number, refreshIndex?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 音乐作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 音乐作品数据  # [English] ### Purpose: - Music Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Music Video data
     * @summary 音乐作品推荐/Knowledge Video
     * @param {number} count 每页数量/Number per page
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet_6(count: number, refreshIndex?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 话题作品 ### 参数: - challenge_id: 话题id - sort_type: 排序类型     - 0:综合排序 1:最热排序 2:最新排序 - cursor: 游标 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题作品  # [English] ### Purpose: - Challenge Posts ### Parameters: - challenge_id: Challenge id - sort_type: Sort type     - 0: Comprehensive sorting 1: Hottest sorting 2: Latest sorting - cursor: Cursor - count: Number - cookie: User provided Cookie, used to get more data ### Return: - Challenge Posts  # [示例/Example] challenge_id = \"1750525814851611\" sort_type = 0 offset = 0 cursor = 0 count = 20
     * @summary 话题作品/Challenge Posts
     * @param {ChallengePostRequest} [challengePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchChallengePostsApiV1DouyinWebFetchChallengePostsPost(challengePostRequest?: ChallengePostRequest, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 话题作品 ### 参数: - challenge_id: 话题id - sort_type: 排序类型     - 0:综合排序 1:最热排序 2:最新排序 - cursor: 游标 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题作品  # [English] ### Purpose: - Challenge Posts ### Parameters: - challenge_id: Challenge id - sort_type: Sort type     - 0: Comprehensive sorting 1: Hottest sorting 2: Latest sorting - cursor: Cursor - count: Number - cookie: User provided Cookie, used to get more data ### Return: - Challenge Posts  # [示例/Example] challenge_id = \"1750525814851611\" sort_type = 0 offset = 0 cursor = 0 count = 20
     * @summary 话题作品/Challenge Posts
     * @param {ChallengePostRequest} [challengePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchChallengePostsApiV1DouyinWebFetchChallengePostsPost_7(challengePostRequest?: ChallengePostRequest, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音同城热点榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 - city_code: 城市代码，默认为110000(北京)     - 110000: 北京     - 更多城市代码请参考城市列表接口     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin City Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change - city_code: City code, default is 110000     - 110000: Beijing     - For more city codes, please refer to the city list interface     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### Return: - Hotspot list data
     * @summary 抖音同城热点榜单/Douyin City Hot List
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {string} sentenceTag 分类标签/Category tag
     * @param {string} order 排序方式/Sorting method
     * @param {string} cityCode 城市代码/City code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchCityHotListApiV1DouyinWebFetchCityHotListGet(page: number, pageSize: number, sentenceTag: string, order: string, cityCode: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音同城热点榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 - city_code: 城市代码，默认为110000(北京)     - 110000: 北京     - 更多城市代码请参考城市列表接口     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin City Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change - city_code: City code, default is 110000     - 110000: Beijing     - For more city codes, please refer to the city list interface     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### Return: - Hotspot list data
     * @summary 抖音同城热点榜单/Douyin City Hot List
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {string} sentenceTag 分类标签/Category tag
     * @param {string} order 排序方式/Sorting method
     * @param {string} cityCode 城市代码/City code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchCityHotListApiV1DouyinWebFetchCityHotListGet_8(page: number, pageSize: number, sentenceTag: string, order: string, cityCode: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音城市列表以及城市ID ### 返回: - 城市列表数据  # [English] ### Purpose: - Douyin City List and City ID ### Return: - City list data
     * @summary 抖音城市列表/Douyin City List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchCityListApiV1DouyinWebFetchCityListGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音城市列表以及城市ID ### 返回: - 城市列表数据  # [English] ### Purpose: - Douyin City List and City ID ### Return: - City list data
     * @summary 抖音城市列表/Douyin City List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchCityListApiV1DouyinWebFetchCityListGet_9(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音Web的游客Cookie - 可以用于爬取抖音Web的数据，如用户作品、合辑作品等。 - 可以固定身份避免部分接口重复数据。 - 请注意：游客Cookie无法爬取所有数据，有一定的限制。 - 可以配合开源项目使用此接口实现抖音Web的数据爬取。 ### 参数: - user_agent: 用户浏览器代理 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get the guest Cookie of Douyin Web - Can be used to crawl data of Douyin Web, such as user videos, mix videos, etc. - Can fix identity to avoid duplicate data for some interfaces. - Please note: Guest Cookie cannot crawl all data, there are certain restrictions. - Can be used with open source projects to implement data crawling of Douyin Web using this interface. ### Parameters: - user_agent: User browser agent ### Return: - Guest Cookie  # [示例/Example] user_agent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\"
     * @summary 获取抖音Web的游客Cookie/Get the guest Cookie of Douyin Web
     * @param {string} userAgent 用户浏览器代理/User browser agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet(userAgent: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音Web的游客Cookie - 可以用于爬取抖音Web的数据，如用户作品、合辑作品等。 - 可以固定身份避免部分接口重复数据。 - 请注意：游客Cookie无法爬取所有数据，有一定的限制。 - 可以配合开源项目使用此接口实现抖音Web的数据爬取。 ### 参数: - user_agent: 用户浏览器代理 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get the guest Cookie of Douyin Web - Can be used to crawl data of Douyin Web, such as user videos, mix videos, etc. - Can fix identity to avoid duplicate data for some interfaces. - Please note: Guest Cookie cannot crawl all data, there are certain restrictions. - Can be used with open source projects to implement data crawling of Douyin Web using this interface. ### Parameters: - user_agent: User browser agent ### Return: - Guest Cookie  # [示例/Example] user_agent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\"
     * @summary 获取抖音Web的游客Cookie/Get the guest Cookie of Douyin Web
     * @param {string} userAgent 用户浏览器代理/User browser agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet_10(userAgent: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 游戏作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Game Video data
     * @summary 游戏作品推荐/Knowledge Video
     * @param {number} count 每页数量/Number per page
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet(count: number, refreshIndex?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 游戏作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Game Video data
     * @summary 游戏作品推荐/Knowledge Video
     * @param {number} count 每页数量/Number per page
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet_11(count: number, refreshIndex?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 -search_range: 0:不限 1:最近看过 2:还未看过 3:关注的人 -content_type: 0:不限 1:视频 2:图集 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - search_range: 0: Unlimited 1: Recently viewed 2: Not yet viewed 3: Followed - content_type: 0: Unlimited 1: Video 2: Album - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"
     * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 视频时长/Duration filter
     * @param {string} [searchRange] 搜索范围/Search range
     * @param {string} [contentType] 内容类型/Content type
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, searchRange?: string, contentType?: string, searchId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 -search_range: 0:不限 1:最近看过 2:还未看过 3:关注的人 -content_type: 0:不限 1:视频 2:图集 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - search_range: 0: Unlimited 1: Recently viewed 2: Not yet viewed 3: Followed - content_type: 0: Unlimited 1: Video 2: Album - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"
     * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 视频时长/Duration filter
     * @param {string} [searchRange] 搜索范围/Search range
     * @param {string} [contentType] 内容类型/Content type
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet_12(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, searchRange?: string, contentType?: string, searchId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取首页推荐数据 ### 参数: - count: 数量，默认为10，建议保持不变。 - refresh_index: 翻页索引，默认为0，然后每次增加1用于翻页。 ### 返回: - Feed数据  # [English] ### Purpose: - Get home feed data ### Parameters: - count: Number, default is 10, it is recommended to keep it unchanged. - refresh_index: Paging index, default is 0, then increase by 1 each time for paging. ### Return: - Feed data  # [示例/Example] count = 10 refresh_index = 0
     * @summary 获取首页推荐数据/Get home feed data
     * @param {number} [count] 数量/Number
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchHomeFeedApiV1DouyinWebFetchHomeFeedGet(count?: number, refreshIndex?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取首页推荐数据 ### 参数: - count: 数量，默认为10，建议保持不变。 - refresh_index: 翻页索引，默认为0，然后每次增加1用于翻页。 ### 返回: - Feed数据  # [English] ### Purpose: - Get home feed data ### Parameters: - count: Number, default is 10, it is recommended to keep it unchanged. - refresh_index: Paging index, default is 0, then increase by 1 each time for paging. ### Return: - Feed data  # [示例/Example] count = 10 refresh_index = 0
     * @summary 获取首页推荐数据/Get home feed data
     * @param {number} [count] 数量/Number
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchHomeFeedApiV1DouyinWebFetchHomeFeedGet_13(count?: number, refreshIndex?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音热点总榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty ### Return: - Hotspot list data
     * @summary 抖音热点总榜单/Douyin Hot List
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {string} sentenceTag 分类标签/Category tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchHotListApiV1DouyinWebFetchHotListGet(page: number, pageSize: number, sentenceTag: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音热点总榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty ### Return: - Hotspot list data
     * @summary 抖音热点总榜单/Douyin Hot List
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {string} sentenceTag 分类标签/Category tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchHotListApiV1DouyinWebFetchHotListGet_14(page: number, pageSize: number, sentenceTag: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音热榜数据 ### 返回: - 热榜数据  # [English] ### Purpose: - Get Douyin hot search results ### Return: - Hot search results
     * @summary 获取抖音热榜数据/Get Douyin hot search results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音热榜数据 ### 返回: - 热榜数据  # [English] ### Purpose: - Get Douyin hot search results ### Return: - Hot search results
     * @summary 获取抖音热榜数据/Get Douyin hot search results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet_15(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 知识作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Knowledge Video data
     * @summary 知识作品推荐/Knowledge Video
     * @param {number} count 每页数量/Number per page
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet(count: number, refreshIndex?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 知识作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Knowledge Video data
     * @summary 知识作品推荐/Knowledge Video
     * @param {number} count 每页数量/Number per page
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet_16(count: number, refreshIndex?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取直播间送礼用户排行榜 ### 参数: - room_id: 直播间room_id - rank_type: 排行类型，默认为30不用修改。 ### 返回: - 排行榜数据  # [English] ### Purpose: - Get live room gift user ranking ### Parameters: - room_id: Room room_id - rank_type: Leaderboard type, default is 30, no need to modify. ### Return: - Leaderboard data  # [示例/Example] room_id = \"7356585666190461731\" rank_type = 30
     * @summary 获取直播间送礼用户排行榜/Get live room gift user ranking
     * @param {string} roomId 直播间room_id/Room room_id
     * @param {number} [rankType] 排行类型/Leaderboard type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet(roomId: string, rankType?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取直播间送礼用户排行榜 ### 参数: - room_id: 直播间room_id - rank_type: 排行类型，默认为30不用修改。 ### 返回: - 排行榜数据  # [English] ### Purpose: - Get live room gift user ranking ### Parameters: - room_id: Room room_id - rank_type: Leaderboard type, default is 30, no need to modify. ### Return: - Leaderboard data  # [示例/Example] room_id = \"7356585666190461731\" rank_type = 30
     * @summary 获取直播间送礼用户排行榜/Get live room gift user ranking
     * @param {string} roomId 直播间room_id/Room room_id
     * @param {number} [rankType] 排行类型/Leaderboard type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet_17(roomId: string, rankType?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音直播间商品信息 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie，如获取失败请手动过一次验证码) - room_id: 直播间room_id - author_id: 作者id - limit: 数量 ### 返回: - 商品信息  # [English] ### Purpose: - Douyin live room product information ### Parameters: - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie, if the acquisition fails, please manually pass the captcha code once) - room_id: Room room_id - author_id: Author id - limit: Number ### Return: - Product information  # [示例/Example] cookie = \"YOUR_COOKIE\" room_id = \"7356742011975715619\" author_id = \"2207432981615527\" limit = 20
     * @summary 抖音直播间商品信息/Douyin live room product information
     * @param {string} roomId 直播间room_id/Room room_id
     * @param {string} authorId 作者id/Author id
     * @param {number} [limit] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet(roomId: string, authorId: string, limit?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音直播间商品信息 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie，如获取失败请手动过一次验证码) - room_id: 直播间room_id - author_id: 作者id - limit: 数量 ### 返回: - 商品信息  # [English] ### Purpose: - Douyin live room product information ### Parameters: - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie, if the acquisition fails, please manually pass the captcha code once) - room_id: Room room_id - author_id: Author id - limit: Number ### Return: - Product information  # [示例/Example] cookie = \"YOUR_COOKIE\" room_id = \"7356742011975715619\" author_id = \"2207432981615527\" limit = 20
     * @summary 抖音直播间商品信息/Douyin live room product information
     * @param {string} roomId 直播间room_id/Room room_id
     * @param {string} authorId 作者id/Author id
     * @param {number} [limit] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_18(roomId: string, authorId: string, limit?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
     * @summary 获取指定关键词的直播搜索结果/Get live search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet(keyword: string, offset?: number, count?: number, searchId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
     * @summary 获取指定关键词的直播搜索结果/Get live search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet_19(keyword: string, offset?: number, count?: number, searchId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持50个视频，此接口收费固定价格为0.001$ * 50 = 0.05$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持50个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 50 videos at a time, this interface charges a fixed price of 0.001$ * 50 = 0.05$ each time. ### Parameters: - aweme_ids: List of video ids, up to 50 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\"]
     * @summary 批量获取视频信息/Batch Get Video Information
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchMultiVideoApiV1DouyinWebFetchMultiVideoPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持50个视频，此接口收费固定价格为0.001$ * 50 = 0.05$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持50个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 50 videos at a time, this interface charges a fixed price of 0.001$ * 50 = 0.05$ each time. ### Parameters: - aweme_ids: List of video ids, up to 50 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\"]
     * @summary 批量获取视频信息/Batch Get Video Information
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchMultiVideoApiV1DouyinWebFetchMultiVideoPost_20(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法保障稳定性，如果有爬取单一视频需求，请使用下面的接口。 - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot guarantee stability. If you need to crawl a single video, please use the following interface. - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
     * @summary 获取单个作品数据，此接口即将废弃，请使用APP接口/Get single video data, this endpoint will be deprecated soon, please use APP endpoint
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchOneVideoApiV1DouyinWebFetchOneVideoGet(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法保障稳定性，如果有爬取单一视频需求，请使用下面的接口。 - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot guarantee stability. If you need to crawl a single video, please use the following interface. - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
     * @summary 获取单个作品数据，此接口即将废弃，请使用APP接口/Get single video data, this endpoint will be deprecated soon, please use APP endpoint
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchOneVideoApiV1DouyinWebFetchOneVideoGet_21(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
     * @summary 获取单个作品数据 V2/Get single video data V2
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
     * @summary 获取单个作品数据 V2/Get single video data V2
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get_22(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet(shareUrl: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet_23(shareUrl: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品视频弹幕数据 ### 参数: - item_id: 作品id - duration: 视频总时长 - end_time: 结束时间 - start_time: 开始时间 ### 返回: - 视频弹幕数据  # [English] ### Purpose: - Get single video danmaku data ### Parameters: - item_id: Video id - duration: Video total duration - end_time: End time - start_time: Start time ### Return: - Video danmaku data  # [示例/Example] item_id = \"7355433624046472498\" duration = 15134 end_time = 15133 start_time = 0
     * @summary 获取单个作品视频弹幕数据/Get single video danmaku data
     * @param {string} itemId 作品id/Video id
     * @param {number} duration 视频总时长/Video total duration
     * @param {number} endTime 结束时间/End time
     * @param {number} startTime 开始时间/Start time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet(itemId: string, duration: number, endTime: number, startTime: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品视频弹幕数据 ### 参数: - item_id: 作品id - duration: 视频总时长 - end_time: 结束时间 - start_time: 开始时间 ### 返回: - 视频弹幕数据  # [English] ### Purpose: - Get single video danmaku data ### Parameters: - item_id: Video id - duration: Video total duration - end_time: End time - start_time: Start time ### Return: - Video danmaku data  # [示例/Example] item_id = \"7355433624046472498\" duration = 15134 end_time = 15133 start_time = 0
     * @summary 获取单个作品视频弹幕数据/Get single video danmaku data
     * @param {string} itemId 作品id/Video id
     * @param {number} duration 视频总时长/Video total duration
     * @param {number} endTime 结束时间/End time
     * @param {number} startTime 开始时间/Start time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet_24(itemId: string, duration: number, endTime: number, startTime: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音实时挑战榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 ### 返回: - 挑战榜数据  # [English] ### Purpose: - Douyin Real-time Challenge List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 ### Return: - Challenge list data
     * @summary 抖音实时挑战榜单/Douyin Real-time Challenge List
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet(page: number, pageSize: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音实时挑战榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 ### 返回: - 挑战榜数据  # [English] ### Purpose: - Douyin Real-time Challenge List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 ### Return: - Challenge list data
     * @summary 抖音实时挑战榜单/Douyin Real-time Challenge List
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet_25(page: number, pageSize: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音实时上升热点榜 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Real-time Rising Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change ### Return: - Hotspot list data
     * @summary 抖音实时上升热点榜/Douyin Real-time Rising Hot List
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {string} sentenceTag 分类标签/Category tag
     * @param {string} order 排序方式/Sorting method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet(page: number, pageSize: number, sentenceTag: string, order: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音实时上升热点榜 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Real-time Rising Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change ### Return: - Hotspot list data
     * @summary 抖音实时上升热点榜/Douyin Real-time Rising Hot List
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {string} sentenceTag 分类标签/Category tag
     * @param {string} order 排序方式/Sorting method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet_26(page: number, pageSize: number, sentenceTag: string, order: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取相关作品推荐数据 ### 参数: - aweme_id: 作品id - refresh_index: 翻页索引，默认为1，然后每次增加1用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 作品数据  # [English] ### Purpose: - Get related posts recommendation data ### Parameters: - aweme_id: Video id - refresh_index: Paging index, default is 1, then increase by 1 each time for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Video data  # [示例/Example] aweme_id = \"7393365489105358132\" refresh_index = 1 count = 20
     * @summary 获取相关作品推荐数据/Get related posts recommendation data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet(awemeId: string, refreshIndex?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取相关作品推荐数据 ### 参数: - aweme_id: 作品id - refresh_index: 翻页索引，默认为1，然后每次增加1用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 作品数据  # [English] ### Purpose: - Get related posts recommendation data ### Parameters: - aweme_id: Video id - refresh_index: Paging index, default is 1, then increase by 1 each time for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Video data  # [示例/Example] aweme_id = \"7393365489105358132\" refresh_index = 1 count = 20
     * @summary 获取相关作品推荐数据/Get related posts recommendation data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet_27(awemeId: string, refreshIndex?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索话题，此接口不带Cookie请求时只能获取到前30条数据，建议自行提供Cookie获取更多数据。 - Cookie获取方式：打开网页抖音，登录后，按F12打开开发者工具，点击Network，刷新页面，找到第一个请求，复制Cookie。 ### 参数: - keyword: 关键词 - cursor: 偏移量 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Search Challenge, when this interface is requested without Cookie, only the first 30 data can be obtained, it is recommended to provide Cookie to get more data. - Cookie acquisition method: Open the Douyin webpage, log in, press F12 to open the developer tool, click Network, refresh the page, find the first request, copy the Cookie. ### Parameters: - keyword: Keyword - cursor: Offset - count: Number - cookie: User provided Cookie, used to get more data. ### Return: - Challenge search results  # [示例/Example] keyword = \"动漫\" cursor = 0 count = 20
     * @summary 搜索话题/Search Challenge
     * @param {SearchChallengeRequest} [searchChallengeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost(searchChallengeRequest?: SearchChallengeRequest, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索话题，此接口不带Cookie请求时只能获取到前30条数据，建议自行提供Cookie获取更多数据。 - Cookie获取方式：打开网页抖音，登录后，按F12打开开发者工具，点击Network，刷新页面，找到第一个请求，复制Cookie。 ### 参数: - keyword: 关键词 - cursor: 偏移量 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Search Challenge, when this interface is requested without Cookie, only the first 30 data can be obtained, it is recommended to provide Cookie to get more data. - Cookie acquisition method: Open the Douyin webpage, log in, press F12 to open the developer tool, click Network, refresh the page, find the first request, copy the Cookie. ### Parameters: - keyword: Keyword - cursor: Offset - count: Number - cookie: User provided Cookie, used to get more data. ### Return: - Challenge search results  # [示例/Example] keyword = \"动漫\" cursor = 0 count = 20
     * @summary 搜索话题/Search Challenge
     * @param {SearchChallengeRequest} [searchChallengeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost_28(searchChallengeRequest?: SearchChallengeRequest, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 短剧作品 ### 参数: - offset: 页码，默认为0 - count: 每页数量，默认为16 - content_type: 子类型，默认为0     - 0: 热榜     - 101: 甜宠     - 102: 搞笑     - 104: 正能量     - 105: 成长     - 106: 悬疑     - 109: 家庭     - 110: 都市     - 112: 奇幻     - 113: 玄幻     - 114: 职场     - 115: 青春     - 116: 古装     - 117: 动作     - 119: 逆袭     - 124: 其他 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie ### 返回: - 短剧作品数据  # [English] ### Purpose: - Series Video ### Parameters: - offset: Page number, default is 0 - count: Number per page, default is 16 - content_type: Subtype, default is 0     - 0: Hot list     - 101: Sweet pet     - 102: Funny     - 104: Positive energy     - 105: Growth     - 106: Suspense     - 109: Family     - 110: Urban     - 112: Fantasy     - 113: Fantasy     - 114: Workplace     - 115: Youth     - 116: Ancient costume     - 117: Action     - 119: Counterattack     - 124: Other - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Series Video data
     * @summary 短剧作品/Series Video
     * @param {number} offset 页码/Page number
     * @param {number} count 每页数量/Number per page
     * @param {number} contentType 短剧类型/Subtype
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet(offset: number, count: number, contentType: number, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 短剧作品 ### 参数: - offset: 页码，默认为0 - count: 每页数量，默认为16 - content_type: 子类型，默认为0     - 0: 热榜     - 101: 甜宠     - 102: 搞笑     - 104: 正能量     - 105: 成长     - 106: 悬疑     - 109: 家庭     - 110: 都市     - 112: 奇幻     - 113: 玄幻     - 114: 职场     - 115: 青春     - 116: 古装     - 117: 动作     - 119: 逆袭     - 124: 其他 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie ### 返回: - 短剧作品数据  # [English] ### Purpose: - Series Video ### Parameters: - offset: Page number, default is 0 - count: Number per page, default is 16 - content_type: Subtype, default is 0     - 0: Hot list     - 101: Sweet pet     - 102: Funny     - 104: Positive energy     - 105: Growth     - 106: Suspense     - 109: Family     - 110: Urban     - 112: Fantasy     - 113: Fantasy     - 114: Workplace     - 115: Youth     - 116: Ancient costume     - 117: Action     - 119: Counterattack     - 124: Other - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Series Video data
     * @summary 短剧作品/Series Video
     * @param {number} offset 页码/Page number
     * @param {number} count 每页数量/Number per page
     * @param {number} contentType 短剧类型/Subtype
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_29(offset: number, count: number, contentType: number, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection video data ### Parameters: - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie) - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] cookie = \"YOUR_COOKIE\" max_cursor = 0 counts = 20
     * @summary 获取用户收藏作品数据/Get user collection video data
     * @param {string} cookie 用户网页版抖音Cookie/Your web version of Douyin Cookie
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet(cookie: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection video data ### Parameters: - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie) - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] cookie = \"YOUR_COOKIE\" max_cursor = 0 counts = 20
     * @summary 获取用户收藏作品数据/Get user collection video data
     * @param {string} cookie 用户网页版抖音Cookie/Your web version of Douyin Cookie
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet_30(cookie: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户收藏夹数据 ### 参数: - collects_id: 收藏夹id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection data ### Parameters: - collects_id: Collection id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] collects_id = \"\" max_cursor = 0 counts = 20
     * @summary 获取用户收藏夹数据/Get user collection data
     * @param {string} collectsId 收藏夹id/Collection id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet(collectsId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户收藏夹数据 ### 参数: - collects_id: 收藏夹id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection data ### Parameters: - collects_id: Collection id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] collects_id = \"\" max_cursor = 0 counts = 20
     * @summary 获取用户收藏夹数据/Get user collection data
     * @param {string} collectsId 收藏夹id/Collection id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet_31(collectsId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音用户粉丝兴趣 ### 参数: - sec_uid: 用户sec_uid - interest_type: 兴趣类型，默认为search     - similar_author: 粉丝感兴趣同类型作者     - interest_topic: 粉丝近3天感兴趣的话题     - search: 粉丝近3天搜索词 ### 返回: - 用户粉丝兴趣数据  # [English] ### Purpose: - Douyin User Fans Interest ### Parameters: - sec_uid: Sec_uid of user - interest_type: Interest type, default is search     - similar_author: Fans interested in the same type of author     - interest_topic: Topics that fans are interested in the last 3 days     - search: Search terms for fans in the last 3 days ### Return: - User fans interest data
     * @summary 抖音用户粉丝兴趣/Douyin User Fans Interest
     * @param {string} secUid 用户sec_uid/Sec_uid of user
     * @param {string} interestType 兴趣类型/Interest type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet(secUid: string, interestType: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音用户粉丝兴趣 ### 参数: - sec_uid: 用户sec_uid - interest_type: 兴趣类型，默认为search     - similar_author: 粉丝感兴趣同类型作者     - interest_topic: 粉丝近3天感兴趣的话题     - search: 粉丝近3天搜索词 ### 返回: - 用户粉丝兴趣数据  # [English] ### Purpose: - Douyin User Fans Interest ### Parameters: - sec_uid: Sec_uid of user - interest_type: Interest type, default is search     - similar_author: Fans interested in the same type of author     - interest_topic: Topics that fans are interested in the last 3 days     - search: Search terms for fans in the last 3 days ### Return: - User fans interest data
     * @summary 抖音用户粉丝兴趣/Douyin User Fans Interest
     * @param {string} secUid 用户sec_uid/Sec_uid of user
     * @param {string} interestType 兴趣类型/Interest type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet_32(secUid: string, interestType: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户粉丝列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。  ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2
     * @summary 获取用户粉丝列表/Get user fans list
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [maxTime] 最大时间戳/Maximum timestamp
     * @param {number} [count] 数量/Number
     * @param {number} [sourceType] 来源类型/Source type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserFansListApiV1DouyinWebFetchUserFansListGet(secUserId?: string, maxTime?: string, count?: number, sourceType?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户粉丝列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。  ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2
     * @summary 获取用户粉丝列表/Get user fans list
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [maxTime] 最大时间戳/Maximum timestamp
     * @param {number} [count] 数量/Number
     * @param {number} [sourceType] 来源类型/Source type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserFansListApiV1DouyinWebFetchUserFansListGet_33(secUserId?: string, maxTime?: string, count?: number, sourceType?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音用户粉丝画像 ### 参数: - sec_uid: 用户sec_uid - option: 选项，默认为1     - 1: 粉丝手机价格分布     - 2: 粉丝性别分布     - 3: 粉丝年龄分布     - 4: 粉丝地域分布(省份)     - 5: 粉丝地域分布（城市）     - 6: 粉丝城市等级分布     - 7: 粉丝手机品牌分布     - 8: 粉丝兴趣 ### 返回: - 用户粉丝画像数据  # [English] ### Purpose: - Douyin User Fans Portrait ### Parameters: - sec_uid: Sec_uid of user - option: Option, default is 1     - 1: Fans mobile phone price distribution     - 2: Fans gender distribution     - 3: Fans age distribution     - 4: Fans regional distribution (province)     - 5: Fans regional distribution (city)     - 6: Fans city level distribution     - 7: Fans mobile phone brand distribution     - 8: Fans interests ### Return: - User fans portrait data
     * @summary 抖音用户粉丝画像/Douyin User Fans Portrait
     * @param {string} secUid 用户sec_uid/Sec_uid of user
     * @param {string} [option] 选项/Option
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet(secUid: string, option?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音用户粉丝画像 ### 参数: - sec_uid: 用户sec_uid - option: 选项，默认为1     - 1: 粉丝手机价格分布     - 2: 粉丝性别分布     - 3: 粉丝年龄分布     - 4: 粉丝地域分布(省份)     - 5: 粉丝地域分布（城市）     - 6: 粉丝城市等级分布     - 7: 粉丝手机品牌分布     - 8: 粉丝兴趣 ### 返回: - 用户粉丝画像数据  # [English] ### Purpose: - Douyin User Fans Portrait ### Parameters: - sec_uid: Sec_uid of user - option: Option, default is 1     - 1: Fans mobile phone price distribution     - 2: Fans gender distribution     - 3: Fans age distribution     - 4: Fans regional distribution (province)     - 5: Fans regional distribution (city)     - 6: Fans city level distribution     - 7: Fans mobile phone brand distribution     - 8: Fans interests ### Return: - User fans portrait data
     * @summary 抖音用户粉丝画像/Douyin User Fans Portrait
     * @param {string} secUid 用户sec_uid/Sec_uid of user
     * @param {string} [option] 选项/Option
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet_34(secUid: string, option?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户关注列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2
     * @summary 获取用户关注列表/Get user following list
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [maxTime] 最大时间戳/Maximum timestamp
     * @param {number} [count] 数量/Number
     * @param {number} [sourceType] 来源类型/Source type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet(secUserId?: string, maxTime?: string, count?: number, sourceType?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户关注列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2
     * @summary 获取用户关注列表/Get user following list
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [maxTime] 最大时间戳/Maximum timestamp
     * @param {number} [count] 数量/Number
     * @param {number} [sourceType] 来源类型/Source type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet_35(secUserId?: string, maxTime?: string, count?: number, sourceType?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标 - count: 最大数量 - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor - count: Maximum count number - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {string} [cookie] 用户网页版抖音Cookie/Your web version of Douyin Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标 - count: 最大数量 - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor - count: Maximum count number - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {string} [cookie] 用户网页版抖音Cookie/Your web version of Douyin Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet_36(secUserId: string, maxCursor?: number, counts?: number, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 使用UID获取用户开播信息 ### 参数: - uid: 用户UID ### 返回: - 用户开播信息，包含room_id与live_status  # [English] ### Purpose: - Get user live information by UID ### Parameters: - uid: User UID ### Return: - User live information, including room_id and live_status  # [示例/Example] uid = \"3081254195702747\"
     * @summary 使用UID获取用户开播信息/Get user live information by UID
     * @param {string} uid 用户UID/User UID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet(uid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 使用UID获取用户开播信息 ### 参数: - uid: 用户UID ### 返回: - 用户开播信息，包含room_id与live_status  # [English] ### Purpose: - Get user live information by UID ### Parameters: - uid: User UID ### Return: - User live information, including room_id and live_status  # [示例/Example] uid = \"3081254195702747\"
     * @summary 使用UID获取用户开播信息/Get user live information by UID
     * @param {string} uid 用户UID/User UID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet_37(uid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户直播流数据 ### 参数: - webcast_id: 直播间 webcast_id - 获取方法：     - 假设你的直播间链接为：https://www.douyin.com/root/live/376034101029     - 那么直播间webcast_id为：376034101029     - webcast_id为直播间链接的最后一段数字，与room_id不同。 ### 返回: - 直播流数据  # [English] ### Purpose: - Get user live video data ### Parameters: - webcast_id: Room webcast_id - Acquisition method:     - Assuming your live room link is: https://www.douyin.com/root/live/376034101029     - Then the live room webcast_id is: 376034101029     - The webcast_id is the last number of the live room link, which is different from the room_id. ### Return: - Live stream data  # [示例/Example] webcast_id = \"376034101029\"
     * @summary 获取用户直播流数据/Get user live video data
     * @param {string} webcastId 直播间webcast_id/Room webcast_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet(webcastId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户直播流数据 ### 参数: - webcast_id: 直播间 webcast_id - 获取方法：     - 假设你的直播间链接为：https://www.douyin.com/root/live/376034101029     - 那么直播间webcast_id为：376034101029     - webcast_id为直播间链接的最后一段数字，与room_id不同。 ### 返回: - 直播流数据  # [English] ### Purpose: - Get user live video data ### Parameters: - webcast_id: Room webcast_id - Acquisition method:     - Assuming your live room link is: https://www.douyin.com/root/live/376034101029     - Then the live room webcast_id is: 376034101029     - The webcast_id is the last number of the live room link, which is different from the room_id. ### Return: - Live stream data  # [示例/Example] webcast_id = \"376034101029\"
     * @summary 获取用户直播流数据/Get user live video data
     * @param {string} webcastId 直播间webcast_id/Room webcast_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet_38(webcastId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的直播流数据 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Get live video data of specified user ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7318296342189919011\"
     * @summary 获取指定用户的直播流数据/Get live video data of specified user
     * @param {string} roomId 直播间room_id/Room room_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet(roomId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的直播流数据 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Get live video data of specified user ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7318296342189919011\"
     * @summary 获取指定用户的直播流数据/Get live video data of specified user
     * @param {string} roomId 直播间room_id/Room room_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet_39(roomId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的直播流数据V2 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Gets the live stream data of the specified user V2 ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7462723839303093032\"
     * @summary 获取指定用户的直播流数据V2/Gets the live stream data of the specified user V2
     * @param {string} roomId 直播间room_id/Room room_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get(roomId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的直播流数据V2 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Gets the live stream data of the specified user V2 ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7462723839303093032\"
     * @summary 获取指定用户的直播流数据V2/Gets the live stream data of the specified user V2
     * @param {string} roomId 直播间room_id/Room room_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get_40(roomId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过sec_uid获取指定用户的直播流数据 ### 参数: - sec_uid: 用户sec_uid，也叫 sec_user_id，可以在用户主页链接中找到。 ### 返回: - 直播流数据  # [English] ### Purpose - Get live video data of specified user by sec_uid ### Parameters - sec_uid: User sec_uid, also called sec_user_id, can be found in the user\'s homepage link. ### Return - Live stream data  # [示例/Example] sec_uid = \"MS4wLjABAAAAAIKOBr_x6p2fPVKOAhqG8LrC1lwwdWChifKEsl-TXFS-kGSGqpMBRexJdzoAfvUF\"
     * @summary 通过sec_uid获取指定用户的直播流数据/Get live video data of specified user by sec_uid
     * @param {string} secUid 用户sec_uid/User sec_uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet(secUid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过sec_uid获取指定用户的直播流数据 ### 参数: - sec_uid: 用户sec_uid，也叫 sec_user_id，可以在用户主页链接中找到。 ### 返回: - 直播流数据  # [English] ### Purpose - Get live video data of specified user by sec_uid ### Parameters - sec_uid: User sec_uid, also called sec_user_id, can be found in the user\'s homepage link. ### Return - Live stream data  # [示例/Example] sec_uid = \"MS4wLjABAAAAAIKOBr_x6p2fPVKOAhqG8LrC1lwwdWChifKEsl-TXFS-kGSGqpMBRexJdzoAfvUF\"
     * @summary 通过sec_uid获取指定用户的直播流数据/Get live video data of specified user by sec_uid
     * @param {string} secUid 用户sec_uid/User sec_uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet_41(secUid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户合辑作品数据 ### 参数: - mix_id: 合辑id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user mix video data ### Parameters: - mix_id: Mix id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] url = https://www.douyin.com/collection/7348687990509553679 mix_id = \"7348687990509553679\" max_cursor = 0 counts = 20
     * @summary 获取用户合辑作品数据/Get user mix video data
     * @param {string} mixId 合辑id/Mix id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet(mixId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户合辑作品数据 ### 参数: - mix_id: 合辑id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user mix video data ### Parameters: - mix_id: Mix id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] url = https://www.douyin.com/collection/7348687990509553679 mix_id = \"7348687990509553679\" max_cursor = 0 counts = 20
     * @summary 获取用户合辑作品数据/Get user mix video data
     * @param {string} mixId 合辑id/Mix id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet_42(mixId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 - 注意：请尽量使用APP的接口而不是WEB的接口，因为WEB的接口可能会被不稳定。 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 翻页游标，第一次请求传0，然后每次请求传上一次请求返回的max_cursor进行翻页。 - count: 最大数量，建议不要超过20 - filter_type: 过滤类型，可选参数如下：     - 0: 默认排序     - 3: 热度排序 - cookie: 用户网页版抖音Cookie(此接口可以接受用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data - Note: Please try to use the APP interface instead of the WEB API, because the WEB API may be unstable. ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Paging cursor, pass 0 for the first request, and then pass the max_cursor returned by the previous request for paging each time. - count: Maximum count number, it is recommended not to exceed 20 - filter_type: Filter type, optional parameters are as follows:     - 0: Default sorting     - 3: Sort by popularity - cookie: User\'s web version of Douyin Cookie (This interface can accept users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = \"0\" counts = 20 filter_type = \"0\"
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {string} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {string} [filterType] 过滤类型/Filter type
     * @param {string} [cookie] 用户网页版抖音Cookie/Your web version of Douyin Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet(secUserId: string, maxCursor?: string, count?: number, filterType?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 - 注意：请尽量使用APP的接口而不是WEB的接口，因为WEB的接口可能会被不稳定。 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 翻页游标，第一次请求传0，然后每次请求传上一次请求返回的max_cursor进行翻页。 - count: 最大数量，建议不要超过20 - filter_type: 过滤类型，可选参数如下：     - 0: 默认排序     - 3: 热度排序 - cookie: 用户网页版抖音Cookie(此接口可以接受用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data - Note: Please try to use the APP interface instead of the WEB API, because the WEB API may be unstable. ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Paging cursor, pass 0 for the first request, and then pass the max_cursor returned by the previous request for paging each time. - count: Maximum count number, it is recommended not to exceed 20 - filter_type: Filter type, optional parameters are as follows:     - 0: Default sorting     - 3: Sort by popularity - cookie: User\'s web version of Douyin Cookie (This interface can accept users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = \"0\" counts = 20 filter_type = \"0\"
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {string} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {string} [filterType] 过滤类型/Filter type
     * @param {string} [cookie] 用户网页版抖音Cookie/Your web version of Douyin Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet_43(secUserId: string, maxCursor?: string, count?: number, filterType?: string, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 使用Short ID获取用户信息 ### 参数: - short_id: 用户Short ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by Short ID ### Parameters: - short_id: User Short ID ### Return: - User information  # [示例/Example] short_id = \"114131058\"
     * @summary 使用Short ID获取用户信息/Get user information by Short ID
     * @param {string} shortId 用户Short ID/User Short ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet(shortId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 使用Short ID获取用户信息 ### 参数: - short_id: 用户Short ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by Short ID ### Parameters: - short_id: User Short ID ### Return: - User information  # [示例/Example] short_id = \"114131058\"
     * @summary 使用Short ID获取用户信息/Get user information by Short ID
     * @param {string} shortId 用户Short ID/User Short ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet_44(shortId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 使用UID获取用户信息 ### 参数: - uid: 用户UID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by UID ### Parameters: - uid: User UID ### Return: - User information  # [示例/Example] uid = \"68141954464\"
     * @summary 使用UID获取用户信息/Get user information by UID
     * @param {string} uid 用户UID/User UID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet(uid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 使用UID获取用户信息 ### 参数: - uid: 用户UID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by UID ### Parameters: - uid: User UID ### Return: - User information  # [示例/Example] uid = \"68141954464\"
     * @summary 使用UID获取用户信息/Get user information by UID
     * @param {string} uid 用户UID/User UID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet_45(uid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20 douyin_user_fans = \"\" douyin_user_type = \"\" search_id = \"\"
     * @summary 获取指定关键词的用户搜索结果(已废弃，使用V2或V3接口代替)/Get user search results of specified keywords (deprecated, use V2 or V3 interface instead)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [douyinUserFans] 粉丝数/Fans
     * @param {string} [douyinUserType] 用户类型/User type
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet(keyword: string, offset?: number, count?: number, douyinUserFans?: string, douyinUserType?: string, searchId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20 douyin_user_fans = \"\" douyin_user_type = \"\" search_id = \"\"
     * @summary 获取指定关键词的用户搜索结果(已废弃，使用V2或V3接口代替)/Get user search results of specified keywords (deprecated, use V2 or V3 interface instead)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [douyinUserFans] 粉丝数/Fans
     * @param {string} [douyinUserType] 用户类型/User type
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet_46(keyword: string, offset?: number, count?: number, douyinUserFans?: string, douyinUserType?: string, searchId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V2 ### 参数: - keyword: 关键词 - cursor: 游标，第一次请求时为0，后续从返回数据中获取，用于翻页。 ### 返回: - 用户搜索结果V2  # [English] ### Purpose: - Get user search results of specified keywords V2 ### Parameters: - keyword: Keyword - cursor: Cursor, 0 for the first request, get from the returned data later, used for paging. ### Return: - User search results V2  # [示例/Example] keyword = \"中华娘\" cursor = 0
     * @summary 获取指定关键词的用户搜索结果V2/Get user search results of specified keywords V2
     * @param {string} keyword 关键词/Keyword
     * @param {number} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get(keyword: string, cursor?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V2 ### 参数: - keyword: 关键词 - cursor: 游标，第一次请求时为0，后续从返回数据中获取，用于翻页。 ### 返回: - 用户搜索结果V2  # [English] ### Purpose: - Get user search results of specified keywords V2 ### Parameters: - keyword: Keyword - cursor: Cursor, 0 for the first request, get from the returned data later, used for paging. ### Return: - User search results V2  # [示例/Example] keyword = \"中华娘\" cursor = 0
     * @summary 获取指定关键词的用户搜索结果V2/Get user search results of specified keywords V2
     * @param {string} keyword 关键词/Keyword
     * @param {number} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get_47(keyword: string, cursor?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V3 ### 参数: - keyword: 关键词 - cursor: 偏移量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords V3 ### Parameters: - keyword: Keyword - cursor: Offset - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"中华娘\" cursor = \"0\" douyin_user_fans = \"\" douyin_user_type = \"\"
     * @summary 获取指定关键词的用户搜索结果V3/Get user search results of specified keywords V3
     * @param {string} keyword 关键词/Keyword
     * @param {string} [cursor] 游标/Cursor
     * @param {string} [douyinUserType] 用户类型/User type
     * @param {string} [douyinUserFans] 粉丝数/Fans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get(keyword: string, cursor?: string, douyinUserType?: string, douyinUserFans?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V3 ### 参数: - keyword: 关键词 - cursor: 偏移量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords V3 ### Parameters: - keyword: Keyword - cursor: Offset - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"中华娘\" cursor = \"0\" douyin_user_fans = \"\" douyin_user_type = \"\"
     * @summary 获取指定关键词的用户搜索结果V3/Get user search results of specified keywords V3
     * @param {string} keyword 关键词/Keyword
     * @param {string} [cursor] 游标/Cursor
     * @param {string} [douyinUserType] 用户类型/User type
     * @param {string} [douyinUserFans] 粉丝数/Fans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get_48(keyword: string, cursor?: string, douyinUserType?: string, douyinUserFans?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音视频榜单 ### 参数: - date: 日期，默认为24     - 1: 一小时内     - 24: 一天内     - 72: 3天内     - 168: 7天内 - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sub_type: 子类型，默认为1001     - 1001: 视频总榜     - 1002: 低粉爆款     - 1003: 高完播率     - 1004: 高涨粉率     - 1005: 高点赞率 ### 返回: - 视频榜单数据  # [English] ### Purpose: - Douyin Video Billboard ### Parameters: - date: Date, default is 24     - 1: Within an hour     - 24: Within a day     - 72: Within 3 days     - 168: Within 7 days - page: Page number, default is 1 - page_size: Number per page, default is 10 - sub_type: Subtype, default is 1001     - 1001: Total video list     - 1002: Low fans explosion     - 1003: High completion rate     - 1004: High increase rate     - 1005: High like rate ### Return: - Video billboard data
     * @summary 抖音视频榜单/Douyin Video Billboard
     * @param {number} date 日期/Date
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {number} subType 子类型/Subtype
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet(date: number, page: number, pageSize: number, subType: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音视频榜单 ### 参数: - date: 日期，默认为24     - 1: 一小时内     - 24: 一天内     - 72: 3天内     - 168: 7天内 - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sub_type: 子类型，默认为1001     - 1001: 视频总榜     - 1002: 低粉爆款     - 1003: 高完播率     - 1004: 高涨粉率     - 1005: 高点赞率 ### 返回: - 视频榜单数据  # [English] ### Purpose: - Douyin Video Billboard ### Parameters: - date: Date, default is 24     - 1: Within an hour     - 24: Within a day     - 72: Within 3 days     - 168: Within 7 days - page: Page number, default is 1 - page_size: Number per page, default is 10 - sub_type: Subtype, default is 1001     - 1001: Total video list     - 1002: Low fans explosion     - 1003: High completion rate     - 1004: High increase rate     - 1005: High like rate ### Return: - Video billboard data
     * @summary 抖音视频榜单/Douyin Video Billboard
     * @param {number} date 日期/Date
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {number} subType 子类型/Subtype
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet_49(date: number, page: number, pageSize: number, subType: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音视频频道数据 - https://www.douyin.com/channel/300205 ### 参数: - tag_id: 标签id，从URL中获取 - count: 数量 - refresh_index: 刷新索引 ### 返回: - 视频频道数据  # [English] ### Purpose: - Douyin video channel data - https://www.douyin.com/channel/300205 ### Parameters: - tag_id: Tag id, get from the URL - count: Number - refresh_index: Refresh index ### Return: - Video channel data  # [示例/Example] tag_id = 300203 count = 10 refresh_index = 1
     * @summary 抖音视频频道数据/Douyin video channel data
     * @param {number} tagId 标签id/Tag id
     * @param {number} [count] 数量/Number
     * @param {number} [refreshIndex] 刷新索引/Refresh index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet(tagId: number, count?: number, refreshIndex?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音视频频道数据 - https://www.douyin.com/channel/300205 ### 参数: - tag_id: 标签id，从URL中获取 - count: 数量 - refresh_index: 刷新索引 ### 返回: - 视频频道数据  # [English] ### Purpose: - Douyin video channel data - https://www.douyin.com/channel/300205 ### Parameters: - tag_id: Tag id, get from the URL - count: Number - refresh_index: Refresh index ### Return: - Video channel data  # [示例/Example] tag_id = 300203 count = 10 refresh_index = 1
     * @summary 抖音视频频道数据/Douyin video channel data
     * @param {number} tagId 标签id/Tag id
     * @param {number} [count] 数量/Number
     * @param {number} [refreshIndex] 刷新索引/Refresh index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet_50(tagId: number, count?: number, refreshIndex?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet_51(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_52(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: 获取视频新增粉丝数量 ### 参数: - aweme_id: 作品id ### 返回: - 新增粉丝数量  # [English] ### Purpose: Get video new fans count ### Parameters: - aweme_id: Video id ### Return: - New Fans count  # [示例/Example] aweme_id = \"7429296623961853234\"
     * @summary 获取视频新增粉丝数量/Get video new fans count
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: 获取视频新增粉丝数量 ### 参数: - aweme_id: 作品id ### 返回: - 新增粉丝数量  # [English] ### Purpose: Get video new fans count ### Parameters: - aweme_id: Video id ### Return: - New Fans count  # [示例/Example] aweme_id = \"7429296623961853234\"
     * @summary 获取视频新增粉丝数量/Get video new fans count
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet_53(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音视频点赞观众画像 ### 参数: - aweme_id: 视频aweme_id - option: 选项，默认为1     - 1: 观众手机价格分布     - 2: 观众性别分布     - 3: 观众年龄分布     - 4: 观众地域分布(省份)     - 5: 观众地域分布(城市)     - 6: 观众城市等级分布     - 7: 观众手机品牌分布  ### 返回: - 视频点赞观众画像数据  # [English] ### Purpose: - Douyin Video Like Viewer Portrait ### Parameters: - aweme_id: Aweme_id of video - option: Option, default is 1     - 1: Distribution of audience mobile phone prices     - 2: Distribution of audience gender     - 3: Distribution of audience age     - 4: Distribution of audience region (province)     - 5: Distribution of audience region (city)     - 6: Distribution of audience city level     - 7: Distribution of audience mobile phone brands ### Return: - Video like viewer portrait data
     * @summary 抖音视频点赞观众画像/Douyin Video Like Viewer Portrait
     * @param {string} awemeId 视频aweme_id/Aweme_id of video
     * @param {string} option 选项/Option
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet(awemeId: string, option: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音视频点赞观众画像 ### 参数: - aweme_id: 视频aweme_id - option: 选项，默认为1     - 1: 观众手机价格分布     - 2: 观众性别分布     - 3: 观众年龄分布     - 4: 观众地域分布(省份)     - 5: 观众地域分布(城市)     - 6: 观众城市等级分布     - 7: 观众手机品牌分布  ### 返回: - 视频点赞观众画像数据  # [English] ### Purpose: - Douyin Video Like Viewer Portrait ### Parameters: - aweme_id: Aweme_id of video - option: Option, default is 1     - 1: Distribution of audience mobile phone prices     - 2: Distribution of audience gender     - 3: Distribution of audience age     - 4: Distribution of audience region (province)     - 5: Distribution of audience region (city)     - 6: Distribution of audience city level     - 7: Distribution of audience mobile phone brands ### Return: - Video like viewer portrait data
     * @summary 抖音视频点赞观众画像/Douyin Video Like Viewer Portrait
     * @param {string} awemeId 视频aweme_id/Aweme_id of video
     * @param {string} option 选项/Option
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet_54(awemeId: string, option: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求时为0，后续从返回数据中获取，用于翻页。     - 例如: offset = 10     - JSON Path-1 : $.data.cursor - count: 数量，默认为10，建议保持不变。 - sort_type:     - 0:综合排序     - 1:最多点赞     - 2:最新发布 - publish_time:     - 0:不限     - 1:最近一天     - 7:最近一周     - 180:最近半年 - filter_duration:     - 0:不限 0-1:1分钟以内     - 1-5:1-5分钟     - 5-10000:5分钟以上 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset, 0 for the first request, get from the returned data later, used for paging.     - For example: offset = 10     - JSON Path-1 : $.data.cursor - count: Number, default is 10, it is recommended to keep it unchanged. - sort_type:     - 0: Comprehensive sorting     - 1: Most likes     - 2: Latest release - publish_time:     - 0: Unlimited     - 1: Last day     - 7: Last week     - 180: Last half year - filter_duration:     - 0: Unlimited     - 0-1: Within 1 minute     - 1-5: 1-5 minutes     - 5-10000: More than 5 minutes - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results  # [示例/Example] keyword = \"游戏\" offset = 0 count = 10 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" search_id = \"\"
     * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 视频时长/Duration filter
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, searchId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求时为0，后续从返回数据中获取，用于翻页。     - 例如: offset = 10     - JSON Path-1 : $.data.cursor - count: 数量，默认为10，建议保持不变。 - sort_type:     - 0:综合排序     - 1:最多点赞     - 2:最新发布 - publish_time:     - 0:不限     - 1:最近一天     - 7:最近一周     - 180:最近半年 - filter_duration:     - 0:不限 0-1:1分钟以内     - 1-5:1-5分钟     - 5-10000:5分钟以上 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset, 0 for the first request, get from the returned data later, used for paging.     - For example: offset = 10     - JSON Path-1 : $.data.cursor - count: Number, default is 10, it is recommended to keep it unchanged. - sort_type:     - 0: Comprehensive sorting     - 1: Most likes     - 2: Latest release - publish_time:     - 0: Unlimited     - 1: Last day     - 7: Last week     - 180: Last half year - filter_duration:     - 0: Unlimited     - 0-1: Within 1 minute     - 1-5: 1-5 minutes     - 5-10000: More than 5 minutes - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results  # [示例/Example] keyword = \"游戏\" offset = 0 count = 10 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" search_id = \"\"
     * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 视频时长/Duration filter
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet_55(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, searchId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"
     * @summary 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
     * @param {string} keyword 关键词/Keyword
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 视频时长/Duration filter
     * @param {number} [page] 页码/Page
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get(keyword: string, sortType?: string, publishTime?: string, filterDuration?: string, page?: number, searchId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"
     * @summary 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
     * @param {string} keyword 关键词/Keyword
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 视频时长/Duration filter
     * @param {number} [page] 页码/Page
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get_56(keyword: string, sortType?: string, publishTime?: string, filterDuration?: string, page?: number, searchId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 使用接口网址生成A-Bogus参数，提交的URL不能带有a_bogus参数，同时a_bogus参数与请求头中的User-Agent有关，需要一起提交和请求。 ### 参数: - url: API链接，请去除url中的原本的a_boogus参数(如有)。 - data: 请求载荷，只有在POST请求中才需要提交，GET请求中使用空字符串即可。 - user_agent: user-agent，需要提交你请求头中的User-Agent，该值参与a_bogus参数的计算。 - index_0: 加密明文列表的第一个值，无特殊要求，默认为0，不要随意修改。 - index_1: 加密明文列表的第二个值，无特殊要求，默认为1，不要随意修改。 - index_2: 加密明文列表的第三个值，无特殊要求，默认为14，不要随意修改。 ### 返回: - A-Bogus参数  # [English] ### Purpose: - Generate A-Bogus parameter using API URL, the submitted URL cannot contain the original a_boogus parameter, and the a_bogus parameter is related to the User-Agent in the request header, which needs to be submitted and requested together. ### Parameters: - url: API link, please remove the original a_boogus parameter from the url (if any). - data: Request payload, only need to submit in POST request, use an empty string in GET request. - user_agent: user-agent, you need to submit the User-Agent in your request header, which is involved in the calculation of the a_bogus parameter. - index_0: The first value of the encrypted plaintext list, no special requirements, the default is 0, do not modify it at will. - index_1: The second value of the encrypted plaintext list, no special requirements, the default is 1, do not modify it at will. - index_2: The third value of the encrypted plaintext list, no special requirements, the default is 14, do not modify it at will. ### Return: - A-Bogus parameter  # [示例/Example] ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/general/search/single/?device_platform=webapp&aid=6383&channel=channel_pc_web&search_channel=aweme_general&enable_history=1&keyword=%E4%B8%AD%E5%8D%8E%E5%A8%98&search_source=normal_search&query_correct_type=1&is_filter_search=0&from_group_id=7346905902554844468&offset=0&count=15&need_filter_settings=1&pc_client_type=1&version_code=190600&version_name=19.6.0&cookie_enabled=true&screen_width=1280&screen_height=800&browser_language=zh-CN&browser_platform=Win32&browser_name=Firefox&browser_version=124.0&browser_online=true&engine_name=Gecko&engine_version=124.0&os_name=Windows&os_version=10&cpu_core_num=16&device_memory=&platform=PC&webid=7348962975497324070&msToken=YCTVM6YGmjFdIpQAN9ykXLBXiSiuHdZkOkEQWTeqVOHBEPmOcM0lNwE0Kd9vgHPMPigSndZDHfAq9k-6lDmH3Jqz6mHHxmn-BzQjmLMIfLIPgirgnOixM9x4PwgcNQ%3D%3D\", \"data\": \"\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\", \"index_0\": 0, \"index_1\": 1, \"index_2\": 14 } ```
     * @summary 使用接口网址生成A-Bogus参数/Generate A-Bogus parameter using API URL
     * @param {ABogusModel} [aBogusModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    generateABogusApiV1DouyinWebGenerateABogusPost(aBogusModel?: ABogusModel, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 使用接口网址生成A-Bogus参数，提交的URL不能带有a_bogus参数，同时a_bogus参数与请求头中的User-Agent有关，需要一起提交和请求。 ### 参数: - url: API链接，请去除url中的原本的a_boogus参数(如有)。 - data: 请求载荷，只有在POST请求中才需要提交，GET请求中使用空字符串即可。 - user_agent: user-agent，需要提交你请求头中的User-Agent，该值参与a_bogus参数的计算。 - index_0: 加密明文列表的第一个值，无特殊要求，默认为0，不要随意修改。 - index_1: 加密明文列表的第二个值，无特殊要求，默认为1，不要随意修改。 - index_2: 加密明文列表的第三个值，无特殊要求，默认为14，不要随意修改。 ### 返回: - A-Bogus参数  # [English] ### Purpose: - Generate A-Bogus parameter using API URL, the submitted URL cannot contain the original a_boogus parameter, and the a_bogus parameter is related to the User-Agent in the request header, which needs to be submitted and requested together. ### Parameters: - url: API link, please remove the original a_boogus parameter from the url (if any). - data: Request payload, only need to submit in POST request, use an empty string in GET request. - user_agent: user-agent, you need to submit the User-Agent in your request header, which is involved in the calculation of the a_bogus parameter. - index_0: The first value of the encrypted plaintext list, no special requirements, the default is 0, do not modify it at will. - index_1: The second value of the encrypted plaintext list, no special requirements, the default is 1, do not modify it at will. - index_2: The third value of the encrypted plaintext list, no special requirements, the default is 14, do not modify it at will. ### Return: - A-Bogus parameter  # [示例/Example] ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/general/search/single/?device_platform=webapp&aid=6383&channel=channel_pc_web&search_channel=aweme_general&enable_history=1&keyword=%E4%B8%AD%E5%8D%8E%E5%A8%98&search_source=normal_search&query_correct_type=1&is_filter_search=0&from_group_id=7346905902554844468&offset=0&count=15&need_filter_settings=1&pc_client_type=1&version_code=190600&version_name=19.6.0&cookie_enabled=true&screen_width=1280&screen_height=800&browser_language=zh-CN&browser_platform=Win32&browser_name=Firefox&browser_version=124.0&browser_online=true&engine_name=Gecko&engine_version=124.0&os_name=Windows&os_version=10&cpu_core_num=16&device_memory=&platform=PC&webid=7348962975497324070&msToken=YCTVM6YGmjFdIpQAN9ykXLBXiSiuHdZkOkEQWTeqVOHBEPmOcM0lNwE0Kd9vgHPMPigSndZDHfAq9k-6lDmH3Jqz6mHHxmn-BzQjmLMIfLIPgirgnOixM9x4PwgcNQ%3D%3D\", \"data\": \"\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\", \"index_0\": 0, \"index_1\": 1, \"index_2\": 14 } ```
     * @summary 使用接口网址生成A-Bogus参数/Generate A-Bogus parameter using API URL
     * @param {ABogusModel} [aBogusModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    generateABogusApiV1DouyinWebGenerateABogusPost_57(aBogusModel?: ABogusModel, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成真实msToken ### 返回: - msToken  # [English] ### Purpose: - Generate real msToken ### Return: - msToken
     * @summary 生成真实msToken/Generate real msToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    generateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成真实msToken ### 返回: - msToken  # [English] ### Purpose: - Generate real msToken ### Return: - msToken
     * @summary 生成真实msToken/Generate real msToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    generateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet_58(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成s_v_web_id ### 返回: - s_v_web_id  # [English] ### Purpose: - Generate s_v_web_id ### Return: - s_v_web_id
     * @summary 生成s_v_web_id/Generate s_v_web_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    generateSVWebIdApiV1DouyinWebGenerateSVWebIdGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成s_v_web_id ### 返回: - s_v_web_id  # [English] ### Purpose: - Generate s_v_web_id ### Return: - s_v_web_id
     * @summary 生成s_v_web_id/Generate s_v_web_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    generateSVWebIdApiV1DouyinWebGenerateSVWebIdGet_59(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成ttwid ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Return: - ttwid
     * @summary 生成ttwid/Generate ttwid
     * @param {string} [userAgent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    generateTtwidApiV1DouyinWebGenerateTtwidGet(userAgent?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成ttwid ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Return: - ttwid
     * @summary 生成ttwid/Generate ttwid
     * @param {string} [userAgent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    generateTtwidApiV1DouyinWebGenerateTtwidGet_60(userAgent?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成verify_fp ### 返回: - verify_fp  # [English] ### Purpose: - Generate verify_fp ### Return: - verify_fp
     * @summary 生成verify_fp/Generate verify_fp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    generateVerifyFpApiV1DouyinWebGenerateVerifyFpGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成verify_fp ### 返回: - verify_fp  # [English] ### Purpose: - Generate verify_fp ### Return: - verify_fp
     * @summary 生成verify_fp/Generate verify_fp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    generateVerifyFpApiV1DouyinWebGenerateVerifyFpGet_61(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 使用接口网址生成X-Bogus参数 ### 参数: - url: 接口网址  # [English] ### Purpose: - Generate X-Bogus parameter using API URL ### Parameters: - url: API URL  # [示例/Example]  ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" } ```
     * @summary 使用接口网址生成X-Bogus参数/Generate X-Bogus parameter using API URL
     * @param {XBogusModel} [xBogusModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    generateXBogusApiV1DouyinWebGenerateXBogusPost(xBogusModel?: XBogusModel, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 使用接口网址生成X-Bogus参数 ### 参数: - url: 接口网址  # [English] ### Purpose: - Generate X-Bogus parameter using API URL ### Parameters: - url: API URL  # [示例/Example]  ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" } ```
     * @summary 使用接口网址生成X-Bogus参数/Generate X-Bogus parameter using API URL
     * @param {XBogusModel} [xBogusModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    generateXBogusApiV1DouyinWebGenerateXBogusPost_62(xBogusModel?: XBogusModel, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文]  ### 用途:  - 提取列表作品id（最多支持20个链接）  ### 参数:  - url: 作品链接列表  ### 返回:  - 作品id列表   # [English]  ### Purpose:  - Extract list video id (supports up to 20 links)  ### Parameters:  - url: Video link list  ### Return:  - Video id list   # [示例/Example]  ```json  { \"urls\":[     \"0.53 02/26 I@v.sE Fus:/ 你别太帅了郑润泽# 现场版live # 音乐节 # 郑润泽  https://v.douyin.com/iRNBho6u/ 复制此链接，打开Dou音搜索，直接观看视频!\",     \"https://v.douyin.com/iRNBho6u/\",     \"https://www.iesdouyin.com/share/video/7298145681699622182/?region=CN&mid=7298145762238565171&u_code=l1j9bkbd&did=MS4wLjABAAAAtqpCx0hpOERbdSzQdjRZw-wFPxaqdbAzsKDmbJMUI3KWlMGQHC-n6dXAqa-dM2EP&iid=MS4wLjABAAAANwkJuWIRFOzg5uCpDRpMj4OX-QryoDgn-yYlXQnRwQQ&with_sec_did=1&titleType=title&share_sign=05kGlqGmR4_IwCX.ZGk6xuL0osNA..5ur7b0jbOx6cc-&share_version=170400&ts=1699262937&from_aid=6383&from_ssr=1&from=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182?previous_page=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182\",  ]  }  ```
     * @summary 提取列表作品id/Extract list video id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    getAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文]  ### 用途:  - 提取列表作品id（最多支持20个链接）  ### 参数:  - url: 作品链接列表  ### 返回:  - 作品id列表   # [English]  ### Purpose:  - Extract list video id (supports up to 20 links)  ### Parameters:  - url: Video link list  ### Return:  - Video id list   # [示例/Example]  ```json  { \"urls\":[     \"0.53 02/26 I@v.sE Fus:/ 你别太帅了郑润泽# 现场版live # 音乐节 # 郑润泽  https://v.douyin.com/iRNBho6u/ 复制此链接，打开Dou音搜索，直接观看视频!\",     \"https://v.douyin.com/iRNBho6u/\",     \"https://www.iesdouyin.com/share/video/7298145681699622182/?region=CN&mid=7298145762238565171&u_code=l1j9bkbd&did=MS4wLjABAAAAtqpCx0hpOERbdSzQdjRZw-wFPxaqdbAzsKDmbJMUI3KWlMGQHC-n6dXAqa-dM2EP&iid=MS4wLjABAAAANwkJuWIRFOzg5uCpDRpMj4OX-QryoDgn-yYlXQnRwQQ&with_sec_did=1&titleType=title&share_sign=05kGlqGmR4_IwCX.ZGk6xuL0osNA..5ur7b0jbOx6cc-&share_version=170400&ts=1699262937&from_aid=6383&from_ssr=1&from=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182?previous_page=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182\",  ]  }  ```
     * @summary 提取列表作品id/Extract list video id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    getAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost_63(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文]  ### 用途:  - 提取列表用户id  ### 参数:  - url: 用户主页链接列表（最多支持10个链接）  ### 返回:  - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。   # [English]  ### Purpose:  - Extract list user id  ### Parameters:  - url: User homepage link list (supports up to 10 links)  ### Return:  - If the sec_user_id is successfully obtained from the link, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.   # [示例/Example]  ```json  { \"urls\":[    \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE?vid=7285950278132616463\",    \"https://www.douyin.com/user/MS4wLjABAAAAVsneOf144eGDFf8Xp9QNb1VW6ovXnNT5SqJBhJfe8KQBKWKDTWK5Hh-_i9mJzb8C\",    \"长按复制此条消息，打开抖音搜索，查看TA的更多作品。 https://v.douyin.com/idFqvUms/\",    \"https://v.douyin.com/idFqvUms/\"     ]  }  ```
     * @summary 提取列表用户id/Extract list user id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    getAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文]  ### 用途:  - 提取列表用户id  ### 参数:  - url: 用户主页链接列表（最多支持10个链接）  ### 返回:  - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。   # [English]  ### Purpose:  - Extract list user id  ### Parameters:  - url: User homepage link list (supports up to 10 links)  ### Return:  - If the sec_user_id is successfully obtained from the link, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.   # [示例/Example]  ```json  { \"urls\":[    \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE?vid=7285950278132616463\",    \"https://www.douyin.com/user/MS4wLjABAAAAVsneOf144eGDFf8Xp9QNb1VW6ovXnNT5SqJBhJfe8KQBKWKDTWK5Hh-_i9mJzb8C\",    \"长按复制此条消息，打开抖音搜索，查看TA的更多作品。 https://v.douyin.com/idFqvUms/\",    \"https://v.douyin.com/idFqvUms/\"     ]  }  ```
     * @summary 提取列表用户id/Extract list user id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    getAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost_64(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接列表（最多支持20个链接） ### 返回: - 直播间号列表  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link list (supports up to 20 links) ### Return: - Room id list  # [示例/Example] ```json {   \"urls\": [         \"https://live.douyin.com/775841227732\",         \"https://live.douyin.com/775841227732?room_id=7318296342189919011&enter_from_merge=web_share_link&enter_method=web_share_link&previous_page=app_code_link\",         \'https://webcast.amemv.com/douyin/webcast/reflow/7318296342189919011?u_code=l1j9bkbd&did=MS4wLjABAAAAEs86TBQPNwAo-RGrcxWyCdwKhI66AK3Pqf3ieo6HaxI&iid=MS4wLjABAAAA0ptpM-zzoliLEeyvWOCUt-_dQza4uSjlIvbtIazXnCY&with_sec_did=1&use_link_command=1&ecom_share_track_params=&extra_params={\"from_request_id\":\"20231230162057EC005772A8EAA0199906\",\"im_channel_invite_id\":\"0\"}&user_id=3644207898042206&liveId=7318296342189919011&from=share&style=share&enter_method=click_share&roomId=7318296342189919011&activity_info={}\',         \"6i- Q@x.Sl 03/23 【醒子8ke的直播间】  点击打开👉https://v.douyin.com/i8tBR7hX/  或长按复制此条消息，打开抖音，看TA直播\",         \"https://v.douyin.com/i8tBR7hX/\",         ] } ```
     * @summary 提取列表直播间号/Extract list webcast id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    getAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接列表（最多支持20个链接） ### 返回: - 直播间号列表  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link list (supports up to 20 links) ### Return: - Room id list  # [示例/Example] ```json {   \"urls\": [         \"https://live.douyin.com/775841227732\",         \"https://live.douyin.com/775841227732?room_id=7318296342189919011&enter_from_merge=web_share_link&enter_method=web_share_link&previous_page=app_code_link\",         \'https://webcast.amemv.com/douyin/webcast/reflow/7318296342189919011?u_code=l1j9bkbd&did=MS4wLjABAAAAEs86TBQPNwAo-RGrcxWyCdwKhI66AK3Pqf3ieo6HaxI&iid=MS4wLjABAAAA0ptpM-zzoliLEeyvWOCUt-_dQza4uSjlIvbtIazXnCY&with_sec_did=1&use_link_command=1&ecom_share_track_params=&extra_params={\"from_request_id\":\"20231230162057EC005772A8EAA0199906\",\"im_channel_invite_id\":\"0\"}&user_id=3644207898042206&liveId=7318296342189919011&from=share&style=share&enter_method=click_share&roomId=7318296342189919011&activity_info={}\',         \"6i- Q@x.Sl 03/23 【醒子8ke的直播间】  点击打开👉https://v.douyin.com/i8tBR7hX/  或长按复制此条消息，打开抖音，看TA直播\",         \"https://v.douyin.com/i8tBR7hX/\",         ] } ```
     * @summary 提取列表直播间号/Extract list webcast id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    getAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost_65(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.douyin.com/video/7298145681699622182\"
     * @summary 提取单个作品id/Extract single video id
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    getAwemeIdApiV1DouyinWebGetAwemeIdGet(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.douyin.com/video/7298145681699622182\"
     * @summary 提取单个作品id/Extract single video id
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    getAwemeIdApiV1DouyinWebGetAwemeIdGet_66(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 提取单个用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户sec_user_id  # [English] ### Purpose: - Extract single user id ### Parameters: - url: User homepage link ### Return: - User sec_user_id  # [示例/Example] url = \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\"
     * @summary 提取单个用户id/Extract single user id
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    getSecUserIdApiV1DouyinWebGetSecUserIdGet(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 提取单个用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户sec_user_id  # [English] ### Purpose: - Extract single user id ### Parameters: - url: User homepage link ### Return: - User sec_user_id  # [示例/Example] url = \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\"
     * @summary 提取单个用户id/Extract single user id
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    getSecUserIdApiV1DouyinWebGetSecUserIdGet_67(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接 ### 返回: - 直播间号  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link ### Return: - Room id  # [示例/Example] url = \"https://live.douyin.com/775841227732\"
     * @summary 提取直播间号/Extract webcast id
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    getWebcastIdApiV1DouyinWebGetWebcastIdGet(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接 ### 返回: - 直播间号  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link ### Return: - Room id  # [示例/Example] url = \"https://live.douyin.com/775841227732\"
     * @summary 提取直播间号/Extract webcast id
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    getWebcastIdApiV1DouyinWebGetWebcastIdGet_68(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
     * @summary 根据sec_user_id获取指定用户的信息/Get information of specified user by sec_user_id
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    handlerUserProfileApiV1DouyinWebHandlerUserProfileGet(secUserId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
     * @summary 根据sec_user_id获取指定用户的信息/Get information of specified user by sec_user_id
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    handlerUserProfileApiV1DouyinWebHandlerUserProfileGet_69(secUserId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据抖音号获取指定用户的信息 ### 参数: - unique_id: 用户unique_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - unique_id: User unique_id ### Return: - User information  # [示例/Example] unique_id = \"TheChief\"
     * @summary 根据抖音号获取指定用户的信息/Get information of specified user by unique_id
     * @param {string} uniqueId 用户unique_id/User unique_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get(uniqueId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据抖音号获取指定用户的信息 ### 参数: - unique_id: 用户unique_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - unique_id: User unique_id ### Return: - User information  # [示例/Example] unique_id = \"TheChief\"
     * @summary 根据抖音号获取指定用户的信息/Get information of specified user by unique_id
     * @param {string} uniqueId 用户unique_id/User unique_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get_70(uniqueId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据抖音uid获取指定用户的信息 ### 参数: - uid: 用户uid，也就是抖音号的short_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - uid: User uid, which is the short_id of the Douyin number ### Return: - User information  # [示例/Example] uid = \"1673937488185292\"
     * @summary 根据抖音uid获取指定用户的信息/Get information of specified user by uid
     * @param {string} uid 用户uid(short_id)/User uid(short_id)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get(uid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据抖音uid获取指定用户的信息 ### 参数: - uid: 用户uid，也就是抖音号的short_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - uid: User uid, which is the short_id of the Douyin number ### Return: - User information  # [示例/Example] uid = \"1673937488185292\"
     * @summary 根据抖音uid获取指定用户的信息/Get information of specified user by uid
     * @param {string} uid 用户uid(short_id)/User uid(short_id)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get_71(uid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息，包含性别，年龄，直播等级，直播间牌子 ### 说明： - 性别：1为男，2为女，0为未知，在live_user字段中。 - 年龄：在user字段中，-1为未知。  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information, including gender, age, live level, live room brand ### Description: - gender: 1 male, 2 female, 0 unknown, in the live_user field. - age: in the user field, -1 unknown.  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
     * @summary 根据sec_user_id获取指定用户的信息（性别，年龄，直播等级、牌子）/Get information of specified user by sec_user_id (gender, age, live level、brand)
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get(secUserId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息，包含性别，年龄，直播等级，直播间牌子 ### 说明： - 性别：1为男，2为女，0为未知，在live_user字段中。 - 年龄：在user字段中，-1为未知。  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information, including gender, age, live level, live room brand ### Description: - gender: 1 male, 2 female, 0 unknown, in the live_user field. - age: in the user field, -1 unknown.  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
     * @summary 根据sec_user_id获取指定用户的信息（性别，年龄，直播等级、牌子）/Get information of specified user by sec_user_id (gender, age, live level、brand)
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get_72(secUserId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 直播间号转房间号 ### 参数: - webcast_id: 直播间号 ### 返回: - 房间号  # [English] ### Purpose: - Webcast id to room id ### Parameters: - webcast_id: Webcast id ### Return: - Room id  # [示例/Example] \"webcast_id = \"775841227732\"
     * @summary 直播间号转房间号/Webcast id to room id
     * @param {string} webcastId 直播间号/Webcast id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet(webcastId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 直播间号转房间号 ### 参数: - webcast_id: 直播间号 ### 返回: - 房间号  # [English] ### Purpose: - Webcast id to room id ### Parameters: - webcast_id: Webcast id ### Return: - Room id  # [示例/Example] \"webcast_id = \"775841227732\"
     * @summary 直播间号转房间号/Webcast id to room id
     * @param {string} webcastId 直播间号/Webcast id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApiInterface
     */
    webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet_73(webcastId: string, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * DouyinWebAPIApi - object-oriented interface
 * @export
 * @class DouyinWebAPIApi
 * @extends {BaseAPI}
 */
export class DouyinWebAPIApi extends BaseAPI implements DouyinWebAPIApiInterface {
    /**
     * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastRoomMessage：直播间消息     - WebcastLikeMessage：点赞消息     - WebcastMemberMessage：成员消息     - WebcastChatMessage：聊天消息     - WebcastGiftMessage：礼物消息     - WebcastSocialMessage：社交消息     - WebcastRoomUserSeqMessage：用户序列消息     - WebcastUpdateFanTicketMessage：更新粉丝消息     - WebcastCommonTextMessage：常规文本消息     - WebcastMatchAgainstScoreMessage：比赛得分消息     - WebcastFansclubMessage：粉丝俱乐部消息     - WebcastRanklistHourEntranceMessage：排行榜小时入口消息     - WebcastRoomStatsMessage：直播间统计消息     - WebcastLiveShoppingMessage: 直播购物消息     - WebcastLiveEcomGeneralMessage: 直播电商通用消息     - WebcastProductChangeMessage: 直播商品变更消息     - WebcastRoomStreamAdaptationMessage: 直播间流适配消息     - WebcastNotifyEffectMessage: 通知效果消息     - WebcastLightGiftMessage: 亮礼物消息     - WebcastProfitInteractionScoreMessage: 收益互动分消息     - WebcastRoomRankMessage: 直播间排行消息 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discounts. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastRoomMessage: Live room message     - WebcastLikeMessage: Like message     - WebcastMemberMessage: Member message     - WebcastChatMessage: Chat message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastUpdateFanTicketMessage: Update fan message     - WebcastCommonTextMessage: Common text message     - WebcastMatchAgainstScoreMessage: Match score message     - WebcastFansclubMessage: Fans club message     - WebcastRanklistHourEntranceMessage: Ranking list hour entrance message     - WebcastRoomStatsMessage: Live room statistics message     - WebcastLiveShoppingMessage: Live shopping message     - WebcastLiveEcomGeneralMessage: Live e-commerce general message     - WebcastProductChangeMessage: Live product change message     - WebcastRoomStreamAdaptationMessage: Live room stream adaptation message     - WebcastNotifyEffectMessage: Notification effect message     - WebcastLightGiftMessage: Light gift message     - WebcastProfitInteractionScoreMessage: Profit interaction score message     - WebcastRoomRankMessage: Live room ranking message ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
     * @summary 提取直播间弹幕/Extract live room danmaku
     * @param {string} liveRoomUrl 直播间链接/Live room link
     * @param {string} danmakuType 消息类型/Message type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet(liveRoomUrl: string, danmakuType: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet(liveRoomUrl, danmakuType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 提取直播间弹幕 #### 价格: - 每10条数据消耗0.001$，支持阶梯式计费折扣。 ### 参数: - live_room_url: 直播间链接 - danmaku_type: 消息类型     - WebcastRoomMessage：直播间消息     - WebcastLikeMessage：点赞消息     - WebcastMemberMessage：成员消息     - WebcastChatMessage：聊天消息     - WebcastGiftMessage：礼物消息     - WebcastSocialMessage：社交消息     - WebcastRoomUserSeqMessage：用户序列消息     - WebcastUpdateFanTicketMessage：更新粉丝消息     - WebcastCommonTextMessage：常规文本消息     - WebcastMatchAgainstScoreMessage：比赛得分消息     - WebcastFansclubMessage：粉丝俱乐部消息     - WebcastRanklistHourEntranceMessage：排行榜小时入口消息     - WebcastRoomStatsMessage：直播间统计消息     - WebcastLiveShoppingMessage: 直播购物消息     - WebcastLiveEcomGeneralMessage: 直播电商通用消息     - WebcastProductChangeMessage: 直播商品变更消息     - WebcastRoomStreamAdaptationMessage: 直播间流适配消息     - WebcastNotifyEffectMessage: 通知效果消息     - WebcastLightGiftMessage: 亮礼物消息     - WebcastProfitInteractionScoreMessage: 收益互动分消息     - WebcastRoomRankMessage: 直播间排行消息 ### 返回: - 弹幕数据的WebSocket连接信息，需要使用WebSocket连接获取弹幕数据，此接口不返回弹幕数据。  # [English] ### Purpose: - Extract live room danmaku #### Price: - 0.001$ per 10 data, support tiered billing discounts. ### Parameters: - live_room_url: Live room link - danmaku_type: Message type     - WebcastRoomMessage: Live room message     - WebcastLikeMessage: Like message     - WebcastMemberMessage: Member message     - WebcastChatMessage: Chat message     - WebcastGiftMessage: Gift message     - WebcastSocialMessage: Social message     - WebcastRoomUserSeqMessage: User sequence message     - WebcastUpdateFanTicketMessage: Update fan message     - WebcastCommonTextMessage: Common text message     - WebcastMatchAgainstScoreMessage: Match score message     - WebcastFansclubMessage: Fans club message     - WebcastRanklistHourEntranceMessage: Ranking list hour entrance message     - WebcastRoomStatsMessage: Live room statistics message     - WebcastLiveShoppingMessage: Live shopping message     - WebcastLiveEcomGeneralMessage: Live e-commerce general message     - WebcastProductChangeMessage: Live product change message     - WebcastRoomStreamAdaptationMessage: Live room stream adaptation message     - WebcastNotifyEffectMessage: Notification effect message     - WebcastLightGiftMessage: Light gift message     - WebcastProfitInteractionScoreMessage: Profit interaction score message     - WebcastRoomRankMessage: Live room ranking message ### Return: - WebSocket connection information of the danmaku data, you need to use WebSocket connection to get the danmaku data, this interface does not return the danmaku data.
     * @summary 提取直播间弹幕/Extract live room danmaku
     * @param {string} liveRoomUrl 直播间链接/Live room link
     * @param {string} danmakuType 消息类型/Message type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet_1(liveRoomUrl: string, danmakuType: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).douyinLiveRoomApiV1DouyinWebDouyinLiveRoomGet_1(liveRoomUrl, danmakuType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音热点分类 ### 参数: - billboard_type: 热点类型     - rise: 上升热点榜分类     - city: 同城热点榜分类     - total: 热点总榜分类 ### 返回: - 热点分类数据  # [English] ### Purpose: - Douyin Billboard Categories ### Parameters: - billboard_type: Hotspot type     - rise: Rising hot spot list category     - city: City hot spot list category     - total: Total hot spot list category ### Return: - Hotspot category data
     * @summary 抖音热点分类/Douyin Billboard Categories
     * @param {string} billboardType 热点类型/Hotspot type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet(billboardType: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet(billboardType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音热点分类 ### 参数: - billboard_type: 热点类型     - rise: 上升热点榜分类     - city: 同城热点榜分类     - total: 热点总榜分类 ### 返回: - 热点分类数据  # [English] ### Purpose: - Douyin Billboard Categories ### Parameters: - billboard_type: Hotspot type     - rise: Rising hot spot list category     - city: City hot spot list category     - total: Total hot spot list category ### Return: - Hotspot category data
     * @summary 抖音热点分类/Douyin Billboard Categories
     * @param {string} billboardType 热点类型/Hotspot type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet_2(billboardType: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchBillboardCategoriesApiV1DouyinWebFetchBillboardCategoriesGet_2(billboardType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音榜单相关视频 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_id: 分类ID ### 返回: - 相关视频数据  # [English] ### Purpose: - Douyin Billboard Related Videos ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_id: Category ID ### Return: - Related video data
     * @summary 抖音榜单相关视频/Douyin Billboard Related Videos
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {string} sentenceId 分类ID/Category ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet(page: number, pageSize: number, sentenceId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet(page, pageSize, sentenceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音榜单相关视频 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_id: 分类ID ### 返回: - 相关视频数据  # [English] ### Purpose: - Douyin Billboard Related Videos ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_id: Category ID ### Return: - Related video data
     * @summary 抖音榜单相关视频/Douyin Billboard Related Videos
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {string} sentenceId 分类ID/Category ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet_3(page: number, pageSize: number, sentenceId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchBillboardRelatedVideosApiV1DouyinWebFetchBillboardRelatedVideosGet_3(page, pageSize, sentenceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 二次元作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 二次元作品数据  # [English] ### Purpose: - Cartoon Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Cartoon Video data
     * @summary 二次元作品推荐/Knowledge Video
     * @param {number} count 每页数量/Number per page
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet(count: number, refreshIndex?: number, cookie?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet(count, refreshIndex, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 二次元作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 二次元作品数据  # [English] ### Purpose: - Cartoon Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Cartoon Video data
     * @summary 二次元作品推荐/Knowledge Video
     * @param {number} count 每页数量/Number per page
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet_4(count: number, refreshIndex?: number, cookie?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchCartoonAwemeApiV1DouyinWebFetchCartoonAwemeGet_4(count, refreshIndex, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 美食作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 美食作品数据  # [English] ### Purpose: - Food Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Food Video data
     * @summary 美食作品推荐/Knowledge Video
     * @param {number} count 每页数量/Number per page
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet(count: number, refreshIndex?: number, cookie?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet(count, refreshIndex, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 美食作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 美食作品数据  # [English] ### Purpose: - Food Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Food Video data
     * @summary 美食作品推荐/Knowledge Video
     * @param {number} count 每页数量/Number per page
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet_5(count: number, refreshIndex?: number, cookie?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchCartoonAwemeApiV1DouyinWebFetchFoodAwemeGet_5(count, refreshIndex, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 音乐作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 音乐作品数据  # [English] ### Purpose: - Music Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Music Video data
     * @summary 音乐作品推荐/Knowledge Video
     * @param {number} count 每页数量/Number per page
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet(count: number, refreshIndex?: number, cookie?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet(count, refreshIndex, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 音乐作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 音乐作品数据  # [English] ### Purpose: - Music Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Music Video data
     * @summary 音乐作品推荐/Knowledge Video
     * @param {number} count 每页数量/Number per page
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet_6(count: number, refreshIndex?: number, cookie?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchCartoonAwemeApiV1DouyinWebFetchMusicAwemeGet_6(count, refreshIndex, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 话题作品 ### 参数: - challenge_id: 话题id - sort_type: 排序类型     - 0:综合排序 1:最热排序 2:最新排序 - cursor: 游标 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题作品  # [English] ### Purpose: - Challenge Posts ### Parameters: - challenge_id: Challenge id - sort_type: Sort type     - 0: Comprehensive sorting 1: Hottest sorting 2: Latest sorting - cursor: Cursor - count: Number - cookie: User provided Cookie, used to get more data ### Return: - Challenge Posts  # [示例/Example] challenge_id = \"1750525814851611\" sort_type = 0 offset = 0 cursor = 0 count = 20
     * @summary 话题作品/Challenge Posts
     * @param {ChallengePostRequest} [challengePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchChallengePostsApiV1DouyinWebFetchChallengePostsPost(challengePostRequest?: ChallengePostRequest, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchChallengePostsApiV1DouyinWebFetchChallengePostsPost(challengePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 话题作品 ### 参数: - challenge_id: 话题id - sort_type: 排序类型     - 0:综合排序 1:最热排序 2:最新排序 - cursor: 游标 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题作品  # [English] ### Purpose: - Challenge Posts ### Parameters: - challenge_id: Challenge id - sort_type: Sort type     - 0: Comprehensive sorting 1: Hottest sorting 2: Latest sorting - cursor: Cursor - count: Number - cookie: User provided Cookie, used to get more data ### Return: - Challenge Posts  # [示例/Example] challenge_id = \"1750525814851611\" sort_type = 0 offset = 0 cursor = 0 count = 20
     * @summary 话题作品/Challenge Posts
     * @param {ChallengePostRequest} [challengePostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchChallengePostsApiV1DouyinWebFetchChallengePostsPost_7(challengePostRequest?: ChallengePostRequest, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchChallengePostsApiV1DouyinWebFetchChallengePostsPost_7(challengePostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音同城热点榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 - city_code: 城市代码，默认为110000(北京)     - 110000: 北京     - 更多城市代码请参考城市列表接口     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin City Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change - city_code: City code, default is 110000     - 110000: Beijing     - For more city codes, please refer to the city list interface     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### Return: - Hotspot list data
     * @summary 抖音同城热点榜单/Douyin City Hot List
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {string} sentenceTag 分类标签/Category tag
     * @param {string} order 排序方式/Sorting method
     * @param {string} cityCode 城市代码/City code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchCityHotListApiV1DouyinWebFetchCityHotListGet(page: number, pageSize: number, sentenceTag: string, order: string, cityCode: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchCityHotListApiV1DouyinWebFetchCityHotListGet(page, pageSize, sentenceTag, order, cityCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音同城热点榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 - city_code: 城市代码，默认为110000(北京)     - 110000: 北京     - 更多城市代码请参考城市列表接口     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin City Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change - city_code: City code, default is 110000     - 110000: Beijing     - For more city codes, please refer to the city list interface     - f\"{TikHub_API_Domain}/api/v1/douyin/web/fetch_city_list\" ### Return: - Hotspot list data
     * @summary 抖音同城热点榜单/Douyin City Hot List
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {string} sentenceTag 分类标签/Category tag
     * @param {string} order 排序方式/Sorting method
     * @param {string} cityCode 城市代码/City code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchCityHotListApiV1DouyinWebFetchCityHotListGet_8(page: number, pageSize: number, sentenceTag: string, order: string, cityCode: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchCityHotListApiV1DouyinWebFetchCityHotListGet_8(page, pageSize, sentenceTag, order, cityCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音城市列表以及城市ID ### 返回: - 城市列表数据  # [English] ### Purpose: - Douyin City List and City ID ### Return: - City list data
     * @summary 抖音城市列表/Douyin City List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchCityListApiV1DouyinWebFetchCityListGet(options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchCityListApiV1DouyinWebFetchCityListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音城市列表以及城市ID ### 返回: - 城市列表数据  # [English] ### Purpose: - Douyin City List and City ID ### Return: - City list data
     * @summary 抖音城市列表/Douyin City List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchCityListApiV1DouyinWebFetchCityListGet_9(options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchCityListApiV1DouyinWebFetchCityListGet_9(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音Web的游客Cookie - 可以用于爬取抖音Web的数据，如用户作品、合辑作品等。 - 可以固定身份避免部分接口重复数据。 - 请注意：游客Cookie无法爬取所有数据，有一定的限制。 - 可以配合开源项目使用此接口实现抖音Web的数据爬取。 ### 参数: - user_agent: 用户浏览器代理 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get the guest Cookie of Douyin Web - Can be used to crawl data of Douyin Web, such as user videos, mix videos, etc. - Can fix identity to avoid duplicate data for some interfaces. - Please note: Guest Cookie cannot crawl all data, there are certain restrictions. - Can be used with open source projects to implement data crawling of Douyin Web using this interface. ### Parameters: - user_agent: User browser agent ### Return: - Guest Cookie  # [示例/Example] user_agent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\"
     * @summary 获取抖音Web的游客Cookie/Get the guest Cookie of Douyin Web
     * @param {string} userAgent 用户浏览器代理/User browser agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet(userAgent: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet(userAgent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音Web的游客Cookie - 可以用于爬取抖音Web的数据，如用户作品、合辑作品等。 - 可以固定身份避免部分接口重复数据。 - 请注意：游客Cookie无法爬取所有数据，有一定的限制。 - 可以配合开源项目使用此接口实现抖音Web的数据爬取。 ### 参数: - user_agent: 用户浏览器代理 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get the guest Cookie of Douyin Web - Can be used to crawl data of Douyin Web, such as user videos, mix videos, etc. - Can fix identity to avoid duplicate data for some interfaces. - Please note: Guest Cookie cannot crawl all data, there are certain restrictions. - Can be used with open source projects to implement data crawling of Douyin Web using this interface. ### Parameters: - user_agent: User browser agent ### Return: - Guest Cookie  # [示例/Example] user_agent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\"
     * @summary 获取抖音Web的游客Cookie/Get the guest Cookie of Douyin Web
     * @param {string} userAgent 用户浏览器代理/User browser agent
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet_10(userAgent: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchDouyinWebGuestCookieApiV1DouyinWebFetchDouyinWebGuestCookieGet_10(userAgent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 游戏作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Game Video data
     * @summary 游戏作品推荐/Knowledge Video
     * @param {number} count 每页数量/Number per page
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet(count: number, refreshIndex?: number, cookie?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet(count, refreshIndex, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 游戏作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Game Video data
     * @summary 游戏作品推荐/Knowledge Video
     * @param {number} count 每页数量/Number per page
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet_11(count: number, refreshIndex?: number, cookie?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchGameAwemeApiV1DouyinWebFetchGameAwemeGet_11(count, refreshIndex, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 -search_range: 0:不限 1:最近看过 2:还未看过 3:关注的人 -content_type: 0:不限 1:视频 2:图集 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - search_range: 0: Unlimited 1: Recently viewed 2: Not yet viewed 3: Followed - content_type: 0: Unlimited 1: Video 2: Album - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"
     * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 视频时长/Duration filter
     * @param {string} [searchRange] 搜索范围/Search range
     * @param {string} [contentType] 内容类型/Content type
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, searchRange?: string, contentType?: string, searchId?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet(keyword, offset, count, sortType, publishTime, filterDuration, searchRange, contentType, searchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 -search_range: 0:不限 1:最近看过 2:还未看过 3:关注的人 -content_type: 0:不限 1:视频 2:图集 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - search_range: 0: Unlimited 1: Recently viewed 2: Not yet viewed 3: Followed - content_type: 0: Unlimited 1: Video 2: Album - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"
     * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 视频时长/Duration filter
     * @param {string} [searchRange] 搜索范围/Search range
     * @param {string} [contentType] 内容类型/Content type
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet_12(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, searchRange?: string, contentType?: string, searchId?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchGeneralSearchResultApiV1DouyinWebFetchGeneralSearchResultGet_12(keyword, offset, count, sortType, publishTime, filterDuration, searchRange, contentType, searchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取首页推荐数据 ### 参数: - count: 数量，默认为10，建议保持不变。 - refresh_index: 翻页索引，默认为0，然后每次增加1用于翻页。 ### 返回: - Feed数据  # [English] ### Purpose: - Get home feed data ### Parameters: - count: Number, default is 10, it is recommended to keep it unchanged. - refresh_index: Paging index, default is 0, then increase by 1 each time for paging. ### Return: - Feed data  # [示例/Example] count = 10 refresh_index = 0
     * @summary 获取首页推荐数据/Get home feed data
     * @param {number} [count] 数量/Number
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchHomeFeedApiV1DouyinWebFetchHomeFeedGet(count?: number, refreshIndex?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchHomeFeedApiV1DouyinWebFetchHomeFeedGet(count, refreshIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取首页推荐数据 ### 参数: - count: 数量，默认为10，建议保持不变。 - refresh_index: 翻页索引，默认为0，然后每次增加1用于翻页。 ### 返回: - Feed数据  # [English] ### Purpose: - Get home feed data ### Parameters: - count: Number, default is 10, it is recommended to keep it unchanged. - refresh_index: Paging index, default is 0, then increase by 1 each time for paging. ### Return: - Feed data  # [示例/Example] count = 10 refresh_index = 0
     * @summary 获取首页推荐数据/Get home feed data
     * @param {number} [count] 数量/Number
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchHomeFeedApiV1DouyinWebFetchHomeFeedGet_13(count?: number, refreshIndex?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchHomeFeedApiV1DouyinWebFetchHomeFeedGet_13(count, refreshIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音热点总榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty ### Return: - Hotspot list data
     * @summary 抖音热点总榜单/Douyin Hot List
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {string} sentenceTag 分类标签/Category tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchHotListApiV1DouyinWebFetchHotListGet(page: number, pageSize: number, sentenceTag: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchHotListApiV1DouyinWebFetchHotListGet(page, pageSize, sentenceTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音热点总榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty ### Return: - Hotspot list data
     * @summary 抖音热点总榜单/Douyin Hot List
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {string} sentenceTag 分类标签/Category tag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchHotListApiV1DouyinWebFetchHotListGet_14(page: number, pageSize: number, sentenceTag: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchHotListApiV1DouyinWebFetchHotListGet_14(page, pageSize, sentenceTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音热榜数据 ### 返回: - 热榜数据  # [English] ### Purpose: - Get Douyin hot search results ### Return: - Hot search results
     * @summary 获取抖音热榜数据/Get Douyin hot search results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet(options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音热榜数据 ### 返回: - 热榜数据  # [English] ### Purpose: - Get Douyin hot search results ### Return: - Hot search results
     * @summary 获取抖音热榜数据/Get Douyin hot search results
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet_15(options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchHotSearchResultApiV1DouyinWebFetchHotSearchResultGet_15(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 知识作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Knowledge Video data
     * @summary 知识作品推荐/Knowledge Video
     * @param {number} count 每页数量/Number per page
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet(count: number, refreshIndex?: number, cookie?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet(count, refreshIndex, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 知识作品 ### 参数: - count: 每页数量，默认为16 - refresh_index: 翻页索引，默认为1 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### 返回: - 知识作品数据  # [English] ### Purpose: - Knowledge Video ### Parameters: - count: Number per page, default is 16 - refresh_index: Paging index, default is 1 - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Knowledge Video data
     * @summary 知识作品推荐/Knowledge Video
     * @param {number} count 每页数量/Number per page
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet_16(count: number, refreshIndex?: number, cookie?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchKnowledgeAwemeApiV1DouyinWebFetchKnowledgeAwemeGet_16(count, refreshIndex, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取直播间送礼用户排行榜 ### 参数: - room_id: 直播间room_id - rank_type: 排行类型，默认为30不用修改。 ### 返回: - 排行榜数据  # [English] ### Purpose: - Get live room gift user ranking ### Parameters: - room_id: Room room_id - rank_type: Leaderboard type, default is 30, no need to modify. ### Return: - Leaderboard data  # [示例/Example] room_id = \"7356585666190461731\" rank_type = 30
     * @summary 获取直播间送礼用户排行榜/Get live room gift user ranking
     * @param {string} roomId 直播间room_id/Room room_id
     * @param {number} [rankType] 排行类型/Leaderboard type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet(roomId: string, rankType?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet(roomId, rankType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取直播间送礼用户排行榜 ### 参数: - room_id: 直播间room_id - rank_type: 排行类型，默认为30不用修改。 ### 返回: - 排行榜数据  # [English] ### Purpose: - Get live room gift user ranking ### Parameters: - room_id: Room room_id - rank_type: Leaderboard type, default is 30, no need to modify. ### Return: - Leaderboard data  # [示例/Example] room_id = \"7356585666190461731\" rank_type = 30
     * @summary 获取直播间送礼用户排行榜/Get live room gift user ranking
     * @param {string} roomId 直播间room_id/Room room_id
     * @param {number} [rankType] 排行类型/Leaderboard type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet_17(roomId: string, rankType?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchLiveGiftRankingApiV1DouyinWebFetchLiveGiftRankingGet_17(roomId, rankType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音直播间商品信息 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie，如获取失败请手动过一次验证码) - room_id: 直播间room_id - author_id: 作者id - limit: 数量 ### 返回: - 商品信息  # [English] ### Purpose: - Douyin live room product information ### Parameters: - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie, if the acquisition fails, please manually pass the captcha code once) - room_id: Room room_id - author_id: Author id - limit: Number ### Return: - Product information  # [示例/Example] cookie = \"YOUR_COOKIE\" room_id = \"7356742011975715619\" author_id = \"2207432981615527\" limit = 20
     * @summary 抖音直播间商品信息/Douyin live room product information
     * @param {string} roomId 直播间room_id/Room room_id
     * @param {string} authorId 作者id/Author id
     * @param {number} [limit] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet(roomId: string, authorId: string, limit?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet(roomId, authorId, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音直播间商品信息 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie，如获取失败请手动过一次验证码) - room_id: 直播间room_id - author_id: 作者id - limit: 数量 ### 返回: - 商品信息  # [English] ### Purpose: - Douyin live room product information ### Parameters: - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie, if the acquisition fails, please manually pass the captcha code once) - room_id: Room room_id - author_id: Author id - limit: Number ### Return: - Product information  # [示例/Example] cookie = \"YOUR_COOKIE\" room_id = \"7356742011975715619\" author_id = \"2207432981615527\" limit = 20
     * @summary 抖音直播间商品信息/Douyin live room product information
     * @param {string} roomId 直播间room_id/Room room_id
     * @param {string} authorId 作者id/Author id
     * @param {number} [limit] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_18(roomId: string, authorId: string, limit?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchLiveRoomProductResultApiV1DouyinWebFetchLiveRoomProductResultGet_18(roomId, authorId, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
     * @summary 获取指定关键词的直播搜索结果/Get live search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet(keyword: string, offset?: number, count?: number, searchId?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet(keyword, offset, count, searchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
     * @summary 获取指定关键词的直播搜索结果/Get live search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet_19(keyword: string, offset?: number, count?: number, searchId?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchLiveSearchResultApiV1DouyinWebFetchLiveSearchResultGet_19(keyword, offset, count, searchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持50个视频，此接口收费固定价格为0.001$ * 50 = 0.05$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持50个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 50 videos at a time, this interface charges a fixed price of 0.001$ * 50 = 0.05$ each time. ### Parameters: - aweme_ids: List of video ids, up to 50 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\"]
     * @summary 批量获取视频信息/Batch Get Video Information
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchMultiVideoApiV1DouyinWebFetchMultiVideoPost(requestBody?: Array<string>, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchMultiVideoApiV1DouyinWebFetchMultiVideoPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持50个视频，此接口收费固定价格为0.001$ * 50 = 0.05$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持50个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 50 videos at a time, this interface charges a fixed price of 0.001$ * 50 = 0.05$ each time. ### Parameters: - aweme_ids: List of video ids, up to 50 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\", \"7372484719365098803\", \"7126745726494821640\"]
     * @summary 批量获取视频信息/Batch Get Video Information
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchMultiVideoApiV1DouyinWebFetchMultiVideoPost_20(requestBody?: Array<string>, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchMultiVideoApiV1DouyinWebFetchMultiVideoPost_20(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法保障稳定性，如果有爬取单一视频需求，请使用下面的接口。 - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot guarantee stability. If you need to crawl a single video, please use the following interface. - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
     * @summary 获取单个作品数据，此接口即将废弃，请使用APP接口/Get single video data, this endpoint will be deprecated soon, please use APP endpoint
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchOneVideoApiV1DouyinWebFetchOneVideoGet(awemeId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchOneVideoApiV1DouyinWebFetchOneVideoGet(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据 - 此接口无法保障稳定性，如果有爬取单一视频需求，请使用下面的接口。 - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data - This interface cannot guarantee stability. If you need to crawl a single video, please use the following interface. - /api/v1/douyin/app/v1/fetch_one_video - /api/v1/douyin/app/v2/fetch_one_video - /api/v1/douyin/app/v3/fetch_one_video ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
     * @summary 获取单个作品数据，此接口即将废弃，请使用APP接口/Get single video data, this endpoint will be deprecated soon, please use APP endpoint
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchOneVideoApiV1DouyinWebFetchOneVideoGet_21(awemeId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchOneVideoApiV1DouyinWebFetchOneVideoGet_21(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
     * @summary 获取单个作品数据 V2/Get single video data V2
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get(awemeId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据V2 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data V2 ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
     * @summary 获取单个作品数据 V2/Get single video data V2
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get_22(awemeId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchOneVideoApiV1DouyinWebFetchOneVideoV2Get_22(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet(shareUrl: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet(shareUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet_23(shareUrl: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchOneVideoByShareUrlApiV1DouyinWebFetchOneVideoByShareUrlGet_23(shareUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品视频弹幕数据 ### 参数: - item_id: 作品id - duration: 视频总时长 - end_time: 结束时间 - start_time: 开始时间 ### 返回: - 视频弹幕数据  # [English] ### Purpose: - Get single video danmaku data ### Parameters: - item_id: Video id - duration: Video total duration - end_time: End time - start_time: Start time ### Return: - Video danmaku data  # [示例/Example] item_id = \"7355433624046472498\" duration = 15134 end_time = 15133 start_time = 0
     * @summary 获取单个作品视频弹幕数据/Get single video danmaku data
     * @param {string} itemId 作品id/Video id
     * @param {number} duration 视频总时长/Video total duration
     * @param {number} endTime 结束时间/End time
     * @param {number} startTime 开始时间/Start time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet(itemId: string, duration: number, endTime: number, startTime: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet(itemId, duration, endTime, startTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品视频弹幕数据 ### 参数: - item_id: 作品id - duration: 视频总时长 - end_time: 结束时间 - start_time: 开始时间 ### 返回: - 视频弹幕数据  # [English] ### Purpose: - Get single video danmaku data ### Parameters: - item_id: Video id - duration: Video total duration - end_time: End time - start_time: Start time ### Return: - Video danmaku data  # [示例/Example] item_id = \"7355433624046472498\" duration = 15134 end_time = 15133 start_time = 0
     * @summary 获取单个作品视频弹幕数据/Get single video danmaku data
     * @param {string} itemId 作品id/Video id
     * @param {number} duration 视频总时长/Video total duration
     * @param {number} endTime 结束时间/End time
     * @param {number} startTime 开始时间/Start time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet_24(itemId: string, duration: number, endTime: number, startTime: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchOneVideoDanmakuApiV1DouyinWebFetchOneVideoDanmakuGet_24(itemId, duration, endTime, startTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音实时挑战榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 ### 返回: - 挑战榜数据  # [English] ### Purpose: - Douyin Real-time Challenge List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 ### Return: - Challenge list data
     * @summary 抖音实时挑战榜单/Douyin Real-time Challenge List
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet(page: number, pageSize: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音实时挑战榜单 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 ### 返回: - 挑战榜数据  # [English] ### Purpose: - Douyin Real-time Challenge List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 ### Return: - Challenge list data
     * @summary 抖音实时挑战榜单/Douyin Real-time Challenge List
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet_25(page: number, pageSize: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchRealTimeChallengeListApiV1DouyinWebFetchRealTimeChallengeListGet_25(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音实时上升热点榜 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Real-time Rising Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change ### Return: - Hotspot list data
     * @summary 抖音实时上升热点榜/Douyin Real-time Rising Hot List
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {string} sentenceTag 分类标签/Category tag
     * @param {string} order 排序方式/Sorting method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet(page: number, pageSize: number, sentenceTag: string, order: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet(page, pageSize, sentenceTag, order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音实时上升热点榜 ### 参数: - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sentence_tag: 分类标签，默认为空 - order: 排序方式，默认为rank     - rank: 按热度排名     - rank_diff: 按排名变化排名 ### 返回: - 热点榜数据  # [English] ### Purpose: - Douyin Real-time Rising Hot List ### Parameters: - page: Page number, default is 1 - page_size: Number per page, default is 10 - sentence_tag: Category tag, default is empty - order: Sorting method, default is rank     - rank: Sort by popularity ranking     - rank_diff: Sort by ranking change ### Return: - Hotspot list data
     * @summary 抖音实时上升热点榜/Douyin Real-time Rising Hot List
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {string} sentenceTag 分类标签/Category tag
     * @param {string} order 排序方式/Sorting method
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet_26(page: number, pageSize: number, sentenceTag: string, order: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchRealTimeRisingHotListApiV1DouyinWebFetchRealTimeRisingHotListGet_26(page, pageSize, sentenceTag, order, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取相关作品推荐数据 ### 参数: - aweme_id: 作品id - refresh_index: 翻页索引，默认为1，然后每次增加1用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 作品数据  # [English] ### Purpose: - Get related posts recommendation data ### Parameters: - aweme_id: Video id - refresh_index: Paging index, default is 1, then increase by 1 each time for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Video data  # [示例/Example] aweme_id = \"7393365489105358132\" refresh_index = 1 count = 20
     * @summary 获取相关作品推荐数据/Get related posts recommendation data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet(awemeId: string, refreshIndex?: number, count?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet(awemeId, refreshIndex, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取相关作品推荐数据 ### 参数: - aweme_id: 作品id - refresh_index: 翻页索引，默认为1，然后每次增加1用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 作品数据  # [English] ### Purpose: - Get related posts recommendation data ### Parameters: - aweme_id: Video id - refresh_index: Paging index, default is 1, then increase by 1 each time for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Video data  # [示例/Example] aweme_id = \"7393365489105358132\" refresh_index = 1 count = 20
     * @summary 获取相关作品推荐数据/Get related posts recommendation data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [refreshIndex] 翻页索引/Paging index
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet_27(awemeId: string, refreshIndex?: number, count?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchRelatedPostsApiV1DouyinWebFetchRelatedPostsGet_27(awemeId, refreshIndex, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索话题，此接口不带Cookie请求时只能获取到前30条数据，建议自行提供Cookie获取更多数据。 - Cookie获取方式：打开网页抖音，登录后，按F12打开开发者工具，点击Network，刷新页面，找到第一个请求，复制Cookie。 ### 参数: - keyword: 关键词 - cursor: 偏移量 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Search Challenge, when this interface is requested without Cookie, only the first 30 data can be obtained, it is recommended to provide Cookie to get more data. - Cookie acquisition method: Open the Douyin webpage, log in, press F12 to open the developer tool, click Network, refresh the page, find the first request, copy the Cookie. ### Parameters: - keyword: Keyword - cursor: Offset - count: Number - cookie: User provided Cookie, used to get more data. ### Return: - Challenge search results  # [示例/Example] keyword = \"动漫\" cursor = 0 count = 20
     * @summary 搜索话题/Search Challenge
     * @param {SearchChallengeRequest} [searchChallengeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost(searchChallengeRequest?: SearchChallengeRequest, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost(searchChallengeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索话题，此接口不带Cookie请求时只能获取到前30条数据，建议自行提供Cookie获取更多数据。 - Cookie获取方式：打开网页抖音，登录后，按F12打开开发者工具，点击Network，刷新页面，找到第一个请求，复制Cookie。 ### 参数: - keyword: 关键词 - cursor: 偏移量 - count: 数量 - cookie: 用户自行提供的Cookie，用于获取更多数据。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Search Challenge, when this interface is requested without Cookie, only the first 30 data can be obtained, it is recommended to provide Cookie to get more data. - Cookie acquisition method: Open the Douyin webpage, log in, press F12 to open the developer tool, click Network, refresh the page, find the first request, copy the Cookie. ### Parameters: - keyword: Keyword - cursor: Offset - count: Number - cookie: User provided Cookie, used to get more data. ### Return: - Challenge search results  # [示例/Example] keyword = \"动漫\" cursor = 0 count = 20
     * @summary 搜索话题/Search Challenge
     * @param {SearchChallengeRequest} [searchChallengeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost_28(searchChallengeRequest?: SearchChallengeRequest, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchSearchChallengeApiV1DouyinWebFetchSearchChallengePost_28(searchChallengeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 短剧作品 ### 参数: - offset: 页码，默认为0 - count: 每页数量，默认为16 - content_type: 子类型，默认为0     - 0: 热榜     - 101: 甜宠     - 102: 搞笑     - 104: 正能量     - 105: 成长     - 106: 悬疑     - 109: 家庭     - 110: 都市     - 112: 奇幻     - 113: 玄幻     - 114: 职场     - 115: 青春     - 116: 古装     - 117: 动作     - 119: 逆袭     - 124: 其他 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie ### 返回: - 短剧作品数据  # [English] ### Purpose: - Series Video ### Parameters: - offset: Page number, default is 0 - count: Number per page, default is 16 - content_type: Subtype, default is 0     - 0: Hot list     - 101: Sweet pet     - 102: Funny     - 104: Positive energy     - 105: Growth     - 106: Suspense     - 109: Family     - 110: Urban     - 112: Fantasy     - 113: Fantasy     - 114: Workplace     - 115: Youth     - 116: Ancient costume     - 117: Action     - 119: Counterattack     - 124: Other - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Series Video data
     * @summary 短剧作品/Series Video
     * @param {number} offset 页码/Page number
     * @param {number} count 每页数量/Number per page
     * @param {number} contentType 短剧类型/Subtype
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet(offset: number, count: number, contentType: number, cookie?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet(offset, count, contentType, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 短剧作品 ### 参数: - offset: 页码，默认为0 - count: 每页数量，默认为16 - content_type: 子类型，默认为0     - 0: 热榜     - 101: 甜宠     - 102: 搞笑     - 104: 正能量     - 105: 成长     - 106: 悬疑     - 109: 家庭     - 110: 都市     - 112: 奇幻     - 113: 玄幻     - 114: 职场     - 115: 青春     - 116: 古装     - 117: 动作     - 119: 逆袭     - 124: 其他 - cookie: 用户自行提供的Cookie，推荐使用自己的抖音Cookie，否则在翻页时可能会出现数据重复的问题 - 游客cookie获取接口：https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie ### 返回: - 短剧作品数据  # [English] ### Purpose: - Series Video ### Parameters: - offset: Page number, default is 0 - count: Number per page, default is 16 - content_type: Subtype, default is 0     - 0: Hot list     - 101: Sweet pet     - 102: Funny     - 104: Positive energy     - 105: Growth     - 106: Suspense     - 109: Family     - 110: Urban     - 112: Fantasy     - 113: Fantasy     - 114: Workplace     - 115: Youth     - 116: Ancient costume     - 117: Action     - 119: Counterattack     - 124: Other - cookie: User provided Cookie, it is recommended to use your own Douyin Cookie, otherwise there may be a problem of data duplication when paging - Guest cookie acquisition interface: https://api.tikhub.io/api/v1/douyin/web/fetch_douyin_web_guest_cookie  ### Return: - Series Video data
     * @summary 短剧作品/Series Video
     * @param {number} offset 页码/Page number
     * @param {number} count 每页数量/Number per page
     * @param {number} contentType 短剧类型/Subtype
     * @param {string} [cookie] 用户自行提供的Cookie/User provided Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_29(offset: number, count: number, contentType: number, cookie?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchSeriesAwemeApiV1DouyinWebFetchSeriesAwemeGet_29(offset, count, contentType, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection video data ### Parameters: - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie) - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] cookie = \"YOUR_COOKIE\" max_cursor = 0 counts = 20
     * @summary 获取用户收藏作品数据/Get user collection video data
     * @param {string} cookie 用户网页版抖音Cookie/Your web version of Douyin Cookie
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet(cookie: string, maxCursor?: number, counts?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet(cookie, maxCursor, counts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户收藏作品数据 ### 参数: - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection video data ### Parameters: - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie) - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] cookie = \"YOUR_COOKIE\" max_cursor = 0 counts = 20
     * @summary 获取用户收藏作品数据/Get user collection video data
     * @param {string} cookie 用户网页版抖音Cookie/Your web version of Douyin Cookie
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet_30(cookie: string, maxCursor?: number, counts?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserCollectionVideosApiV1DouyinWebFetchUserCollectionVideosGet_30(cookie, maxCursor, counts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户收藏夹数据 ### 参数: - collects_id: 收藏夹id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection data ### Parameters: - collects_id: Collection id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] collects_id = \"\" max_cursor = 0 counts = 20
     * @summary 获取用户收藏夹数据/Get user collection data
     * @param {string} collectsId 收藏夹id/Collection id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet(collectsId: string, maxCursor?: number, counts?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet(collectsId, maxCursor, counts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户收藏夹数据 ### 参数: - collects_id: 收藏夹id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user collection data ### Parameters: - collects_id: Collection id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] collects_id = \"\" max_cursor = 0 counts = 20
     * @summary 获取用户收藏夹数据/Get user collection data
     * @param {string} collectsId 收藏夹id/Collection id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet_31(collectsId: string, maxCursor?: number, counts?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserCollectsVideosApiV1DouyinWebFetchUserCollectsVideosGet_31(collectsId, maxCursor, counts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音用户粉丝兴趣 ### 参数: - sec_uid: 用户sec_uid - interest_type: 兴趣类型，默认为search     - similar_author: 粉丝感兴趣同类型作者     - interest_topic: 粉丝近3天感兴趣的话题     - search: 粉丝近3天搜索词 ### 返回: - 用户粉丝兴趣数据  # [English] ### Purpose: - Douyin User Fans Interest ### Parameters: - sec_uid: Sec_uid of user - interest_type: Interest type, default is search     - similar_author: Fans interested in the same type of author     - interest_topic: Topics that fans are interested in the last 3 days     - search: Search terms for fans in the last 3 days ### Return: - User fans interest data
     * @summary 抖音用户粉丝兴趣/Douyin User Fans Interest
     * @param {string} secUid 用户sec_uid/Sec_uid of user
     * @param {string} interestType 兴趣类型/Interest type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet(secUid: string, interestType: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet(secUid, interestType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音用户粉丝兴趣 ### 参数: - sec_uid: 用户sec_uid - interest_type: 兴趣类型，默认为search     - similar_author: 粉丝感兴趣同类型作者     - interest_topic: 粉丝近3天感兴趣的话题     - search: 粉丝近3天搜索词 ### 返回: - 用户粉丝兴趣数据  # [English] ### Purpose: - Douyin User Fans Interest ### Parameters: - sec_uid: Sec_uid of user - interest_type: Interest type, default is search     - similar_author: Fans interested in the same type of author     - interest_topic: Topics that fans are interested in the last 3 days     - search: Search terms for fans in the last 3 days ### Return: - User fans interest data
     * @summary 抖音用户粉丝兴趣/Douyin User Fans Interest
     * @param {string} secUid 用户sec_uid/Sec_uid of user
     * @param {string} interestType 兴趣类型/Interest type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet_32(secUid: string, interestType: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserFansInterestApiV1DouyinWebFetchUserFansInterestGet_32(secUid, interestType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户粉丝列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。  ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2
     * @summary 获取用户粉丝列表/Get user fans list
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [maxTime] 最大时间戳/Maximum timestamp
     * @param {number} [count] 数量/Number
     * @param {number} [sourceType] 来源类型/Source type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserFansListApiV1DouyinWebFetchUserFansListGet(secUserId?: string, maxTime?: string, count?: number, sourceType?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserFansListApiV1DouyinWebFetchUserFansListGet(secUserId, maxTime, count, sourceType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户粉丝列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。  ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2
     * @summary 获取用户粉丝列表/Get user fans list
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [maxTime] 最大时间戳/Maximum timestamp
     * @param {number} [count] 数量/Number
     * @param {number} [sourceType] 来源类型/Source type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserFansListApiV1DouyinWebFetchUserFansListGet_33(secUserId?: string, maxTime?: string, count?: number, sourceType?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserFansListApiV1DouyinWebFetchUserFansListGet_33(secUserId, maxTime, count, sourceType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音用户粉丝画像 ### 参数: - sec_uid: 用户sec_uid - option: 选项，默认为1     - 1: 粉丝手机价格分布     - 2: 粉丝性别分布     - 3: 粉丝年龄分布     - 4: 粉丝地域分布(省份)     - 5: 粉丝地域分布（城市）     - 6: 粉丝城市等级分布     - 7: 粉丝手机品牌分布     - 8: 粉丝兴趣 ### 返回: - 用户粉丝画像数据  # [English] ### Purpose: - Douyin User Fans Portrait ### Parameters: - sec_uid: Sec_uid of user - option: Option, default is 1     - 1: Fans mobile phone price distribution     - 2: Fans gender distribution     - 3: Fans age distribution     - 4: Fans regional distribution (province)     - 5: Fans regional distribution (city)     - 6: Fans city level distribution     - 7: Fans mobile phone brand distribution     - 8: Fans interests ### Return: - User fans portrait data
     * @summary 抖音用户粉丝画像/Douyin User Fans Portrait
     * @param {string} secUid 用户sec_uid/Sec_uid of user
     * @param {string} [option] 选项/Option
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet(secUid: string, option?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet(secUid, option, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音用户粉丝画像 ### 参数: - sec_uid: 用户sec_uid - option: 选项，默认为1     - 1: 粉丝手机价格分布     - 2: 粉丝性别分布     - 3: 粉丝年龄分布     - 4: 粉丝地域分布(省份)     - 5: 粉丝地域分布（城市）     - 6: 粉丝城市等级分布     - 7: 粉丝手机品牌分布     - 8: 粉丝兴趣 ### 返回: - 用户粉丝画像数据  # [English] ### Purpose: - Douyin User Fans Portrait ### Parameters: - sec_uid: Sec_uid of user - option: Option, default is 1     - 1: Fans mobile phone price distribution     - 2: Fans gender distribution     - 3: Fans age distribution     - 4: Fans regional distribution (province)     - 5: Fans regional distribution (city)     - 6: Fans city level distribution     - 7: Fans mobile phone brand distribution     - 8: Fans interests ### Return: - User fans portrait data
     * @summary 抖音用户粉丝画像/Douyin User Fans Portrait
     * @param {string} secUid 用户sec_uid/Sec_uid of user
     * @param {string} [option] 选项/Option
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet_34(secUid: string, option?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserFansPortraitApiV1DouyinWebFetchUserFansPortraitGet_34(secUid, option, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户关注列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2
     * @summary 获取用户关注列表/Get user following list
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [maxTime] 最大时间戳/Maximum timestamp
     * @param {number} [count] 数量/Number
     * @param {number} [sourceType] 来源类型/Source type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet(secUserId?: string, maxTime?: string, count?: number, sourceType?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet(secUserId, maxTime, count, sourceType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户关注列表 - 第一次请求时，max_time传`0`，source_type传`2`，然后会返回一个空的粉丝列表，里面包含了max_time，然后再次请求时，max_time传上一次请求返回的max_time，source_type传`1`，即可获取到粉丝列表。 - 如果不按照上述方式请求，可能会导致返回数据包含重复数据。 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 - source_type: 来源类型，默认为`1`，第一次请求时使用`2`作为来源类型，然后再次请求时使用`1`作为来源类型。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list - When requesting for the first time, pass `0` for max_time, pass `2` for source_type, and an empty fans list will be returned, which contains max_time, then pass the max_time returned by the previous request for paging each time, pass `1` for source_type, you can get the fans list. - If you do not request according to the above method, it may cause the returned data to contain duplicate data.  ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. - source_type: Source type, default is `1`, use `2` as the source type for the first request, and then use `1` as the source type for the subsequent request. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20 source_type = 2
     * @summary 获取用户关注列表/Get user following list
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [maxTime] 最大时间戳/Maximum timestamp
     * @param {number} [count] 数量/Number
     * @param {number} [sourceType] 来源类型/Source type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet_35(secUserId?: string, maxTime?: string, count?: number, sourceType?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserFollowingListApiV1DouyinWebFetchUserFollowingListGet_35(secUserId, maxTime, count, sourceType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标 - count: 最大数量 - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor - count: Maximum count number - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {string} [cookie] 用户网页版抖音Cookie/Your web version of Douyin Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, cookie?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet(secUserId, maxCursor, counts, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标 - count: 最大数量 - cookie: 用户网页版抖音Cookie(此接口需要用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor - count: Maximum count number - cookie: User\'s web version of Douyin Cookie (This interface requires users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {string} [cookie] 用户网页版抖音Cookie/Your web version of Douyin Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet_36(secUserId: string, maxCursor?: number, counts?: number, cookie?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserLikeVideosApiV1DouyinWebFetchUserLikeVideosGet_36(secUserId, maxCursor, counts, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 使用UID获取用户开播信息 ### 参数: - uid: 用户UID ### 返回: - 用户开播信息，包含room_id与live_status  # [English] ### Purpose: - Get user live information by UID ### Parameters: - uid: User UID ### Return: - User live information, including room_id and live_status  # [示例/Example] uid = \"3081254195702747\"
     * @summary 使用UID获取用户开播信息/Get user live information by UID
     * @param {string} uid 用户UID/User UID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet(uid: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 使用UID获取用户开播信息 ### 参数: - uid: 用户UID ### 返回: - 用户开播信息，包含room_id与live_status  # [English] ### Purpose: - Get user live information by UID ### Parameters: - uid: User UID ### Return: - User live information, including room_id and live_status  # [示例/Example] uid = \"3081254195702747\"
     * @summary 使用UID获取用户开播信息/Get user live information by UID
     * @param {string} uid 用户UID/User UID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet_37(uid: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserLiveInfoByUidApiV1DouyinWebFetchUserLiveInfoByUidGet_37(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户直播流数据 ### 参数: - webcast_id: 直播间 webcast_id - 获取方法：     - 假设你的直播间链接为：https://www.douyin.com/root/live/376034101029     - 那么直播间webcast_id为：376034101029     - webcast_id为直播间链接的最后一段数字，与room_id不同。 ### 返回: - 直播流数据  # [English] ### Purpose: - Get user live video data ### Parameters: - webcast_id: Room webcast_id - Acquisition method:     - Assuming your live room link is: https://www.douyin.com/root/live/376034101029     - Then the live room webcast_id is: 376034101029     - The webcast_id is the last number of the live room link, which is different from the room_id. ### Return: - Live stream data  # [示例/Example] webcast_id = \"376034101029\"
     * @summary 获取用户直播流数据/Get user live video data
     * @param {string} webcastId 直播间webcast_id/Room webcast_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet(webcastId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet(webcastId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户直播流数据 ### 参数: - webcast_id: 直播间 webcast_id - 获取方法：     - 假设你的直播间链接为：https://www.douyin.com/root/live/376034101029     - 那么直播间webcast_id为：376034101029     - webcast_id为直播间链接的最后一段数字，与room_id不同。 ### 返回: - 直播流数据  # [English] ### Purpose: - Get user live video data ### Parameters: - webcast_id: Room webcast_id - Acquisition method:     - Assuming your live room link is: https://www.douyin.com/root/live/376034101029     - Then the live room webcast_id is: 376034101029     - The webcast_id is the last number of the live room link, which is different from the room_id. ### Return: - Live stream data  # [示例/Example] webcast_id = \"376034101029\"
     * @summary 获取用户直播流数据/Get user live video data
     * @param {string} webcastId 直播间webcast_id/Room webcast_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet_38(webcastId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserLiveVideosApiV1DouyinWebFetchUserLiveVideosGet_38(webcastId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的直播流数据 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Get live video data of specified user ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7318296342189919011\"
     * @summary 获取指定用户的直播流数据/Get live video data of specified user
     * @param {string} roomId 直播间room_id/Room room_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet(roomId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的直播流数据 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Get live video data of specified user ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7318296342189919011\"
     * @summary 获取指定用户的直播流数据/Get live video data of specified user
     * @param {string} roomId 直播间room_id/Room room_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet_39(roomId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserLiveVideosByRoomIdApiV1DouyinWebFetchUserLiveVideosByRoomIdGet_39(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的直播流数据V2 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Gets the live stream data of the specified user V2 ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7462723839303093032\"
     * @summary 获取指定用户的直播流数据V2/Gets the live stream data of the specified user V2
     * @param {string} roomId 直播间room_id/Room room_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get(roomId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的直播流数据V2 ### 参数: - room_id: 直播间room_id ### 返回: - 直播流数据  # [English] ### Purpose: - Gets the live stream data of the specified user V2 ### Parameters: - room_id: Room room_id ### Return: - Live stream data  # [示例/Example] room_id = \"7462723839303093032\"
     * @summary 获取指定用户的直播流数据V2/Gets the live stream data of the specified user V2
     * @param {string} roomId 直播间room_id/Room room_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get_40(roomId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserLiveVideosByRoomIdV2ApiV1DouyinWebFetchUserLiveVideosByRoomIdV2Get_40(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过sec_uid获取指定用户的直播流数据 ### 参数: - sec_uid: 用户sec_uid，也叫 sec_user_id，可以在用户主页链接中找到。 ### 返回: - 直播流数据  # [English] ### Purpose - Get live video data of specified user by sec_uid ### Parameters - sec_uid: User sec_uid, also called sec_user_id, can be found in the user\'s homepage link. ### Return - Live stream data  # [示例/Example] sec_uid = \"MS4wLjABAAAAAIKOBr_x6p2fPVKOAhqG8LrC1lwwdWChifKEsl-TXFS-kGSGqpMBRexJdzoAfvUF\"
     * @summary 通过sec_uid获取指定用户的直播流数据/Get live video data of specified user by sec_uid
     * @param {string} secUid 用户sec_uid/User sec_uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet(secUid: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet(secUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过sec_uid获取指定用户的直播流数据 ### 参数: - sec_uid: 用户sec_uid，也叫 sec_user_id，可以在用户主页链接中找到。 ### 返回: - 直播流数据  # [English] ### Purpose - Get live video data of specified user by sec_uid ### Parameters - sec_uid: User sec_uid, also called sec_user_id, can be found in the user\'s homepage link. ### Return - Live stream data  # [示例/Example] sec_uid = \"MS4wLjABAAAAAIKOBr_x6p2fPVKOAhqG8LrC1lwwdWChifKEsl-TXFS-kGSGqpMBRexJdzoAfvUF\"
     * @summary 通过sec_uid获取指定用户的直播流数据/Get live video data of specified user by sec_uid
     * @param {string} secUid 用户sec_uid/User sec_uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet_41(secUid: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserLiveVideosBySecUidApiV1DouyinWebFetchUserLiveVideosBySecUidGet_41(secUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户合辑作品数据 ### 参数: - mix_id: 合辑id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user mix video data ### Parameters: - mix_id: Mix id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] url = https://www.douyin.com/collection/7348687990509553679 mix_id = \"7348687990509553679\" max_cursor = 0 counts = 20
     * @summary 获取用户合辑作品数据/Get user mix video data
     * @param {string} mixId 合辑id/Mix id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet(mixId: string, maxCursor?: number, counts?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet(mixId, maxCursor, counts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户合辑作品数据 ### 参数: - mix_id: 合辑id - max_cursor: 最大游标 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user mix video data ### Parameters: - mix_id: Mix id - max_cursor: Maximum cursor - count: Maximum number ### Return: - User video data  # [示例/Example] url = https://www.douyin.com/collection/7348687990509553679 mix_id = \"7348687990509553679\" max_cursor = 0 counts = 20
     * @summary 获取用户合辑作品数据/Get user mix video data
     * @param {string} mixId 合辑id/Mix id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet_42(mixId: string, maxCursor?: number, counts?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserMixVideosApiV1DouyinWebFetchUserMixVideosGet_42(mixId, maxCursor, counts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 - 注意：请尽量使用APP的接口而不是WEB的接口，因为WEB的接口可能会被不稳定。 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 翻页游标，第一次请求传0，然后每次请求传上一次请求返回的max_cursor进行翻页。 - count: 最大数量，建议不要超过20 - filter_type: 过滤类型，可选参数如下：     - 0: 默认排序     - 3: 热度排序 - cookie: 用户网页版抖音Cookie(此接口可以接受用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data - Note: Please try to use the APP interface instead of the WEB API, because the WEB API may be unstable. ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Paging cursor, pass 0 for the first request, and then pass the max_cursor returned by the previous request for paging each time. - count: Maximum count number, it is recommended not to exceed 20 - filter_type: Filter type, optional parameters are as follows:     - 0: Default sorting     - 3: Sort by popularity - cookie: User\'s web version of Douyin Cookie (This interface can accept users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = \"0\" counts = 20 filter_type = \"0\"
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {string} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {string} [filterType] 过滤类型/Filter type
     * @param {string} [cookie] 用户网页版抖音Cookie/Your web version of Douyin Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet(secUserId: string, maxCursor?: string, count?: number, filterType?: string, cookie?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet(secUserId, maxCursor, count, filterType, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 - 注意：请尽量使用APP的接口而不是WEB的接口，因为WEB的接口可能会被不稳定。 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 翻页游标，第一次请求传0，然后每次请求传上一次请求返回的max_cursor进行翻页。 - count: 最大数量，建议不要超过20 - filter_type: 过滤类型，可选参数如下：     - 0: 默认排序     - 3: 热度排序 - cookie: 用户网页版抖音Cookie(此接口可以接受用户提供自己的Cookie) ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data - Note: Please try to use the APP interface instead of the WEB API, because the WEB API may be unstable. ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Paging cursor, pass 0 for the first request, and then pass the max_cursor returned by the previous request for paging each time. - count: Maximum count number, it is recommended not to exceed 20 - filter_type: Filter type, optional parameters are as follows:     - 0: Default sorting     - 3: Sort by popularity - cookie: User\'s web version of Douyin Cookie (This interface can accept users to provide their own Cookie) ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = \"0\" counts = 20 filter_type = \"0\"
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {string} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {string} [filterType] 过滤类型/Filter type
     * @param {string} [cookie] 用户网页版抖音Cookie/Your web version of Douyin Cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet_43(secUserId: string, maxCursor?: string, count?: number, filterType?: string, cookie?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserPostVideosApiV1DouyinWebFetchUserPostVideosGet_43(secUserId, maxCursor, count, filterType, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 使用Short ID获取用户信息 ### 参数: - short_id: 用户Short ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by Short ID ### Parameters: - short_id: User Short ID ### Return: - User information  # [示例/Example] short_id = \"114131058\"
     * @summary 使用Short ID获取用户信息/Get user information by Short ID
     * @param {string} shortId 用户Short ID/User Short ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet(shortId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet(shortId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 使用Short ID获取用户信息 ### 参数: - short_id: 用户Short ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by Short ID ### Parameters: - short_id: User Short ID ### Return: - User information  # [示例/Example] short_id = \"114131058\"
     * @summary 使用Short ID获取用户信息/Get user information by Short ID
     * @param {string} shortId 用户Short ID/User Short ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet_44(shortId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserProfileByShortIdApiV1DouyinWebFetchUserProfileByShortIdGet_44(shortId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 使用UID获取用户信息 ### 参数: - uid: 用户UID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by UID ### Parameters: - uid: User UID ### Return: - User information  # [示例/Example] uid = \"68141954464\"
     * @summary 使用UID获取用户信息/Get user information by UID
     * @param {string} uid 用户UID/User UID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet(uid: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 使用UID获取用户信息 ### 参数: - uid: 用户UID ### 返回: - 用户信息  # [English] ### Purpose: - Get user information by UID ### Parameters: - uid: User UID ### Return: - User information  # [示例/Example] uid = \"68141954464\"
     * @summary 使用UID获取用户信息/Get user information by UID
     * @param {string} uid 用户UID/User UID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet_45(uid: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserProfileByUidApiV1DouyinWebFetchUserProfileByUidGet_45(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20 douyin_user_fans = \"\" douyin_user_type = \"\" search_id = \"\"
     * @summary 获取指定关键词的用户搜索结果(已废弃，使用V2或V3接口代替)/Get user search results of specified keywords (deprecated, use V2 or V3 interface instead)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [douyinUserFans] 粉丝数/Fans
     * @param {string} [douyinUserType] 用户类型/User type
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet(keyword: string, offset?: number, count?: number, douyinUserFans?: string, douyinUserType?: string, searchId?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet(keyword, offset, count, douyinUserFans, douyinUserType, searchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20 douyin_user_fans = \"\" douyin_user_type = \"\" search_id = \"\"
     * @summary 获取指定关键词的用户搜索结果(已废弃，使用V2或V3接口代替)/Get user search results of specified keywords (deprecated, use V2 or V3 interface instead)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [douyinUserFans] 粉丝数/Fans
     * @param {string} [douyinUserType] 用户类型/User type
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet_46(keyword: string, offset?: number, count?: number, douyinUserFans?: string, douyinUserType?: string, searchId?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserSearchResultApiV1DouyinWebFetchUserSearchResultGet_46(keyword, offset, count, douyinUserFans, douyinUserType, searchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V2 ### 参数: - keyword: 关键词 - cursor: 游标，第一次请求时为0，后续从返回数据中获取，用于翻页。 ### 返回: - 用户搜索结果V2  # [English] ### Purpose: - Get user search results of specified keywords V2 ### Parameters: - keyword: Keyword - cursor: Cursor, 0 for the first request, get from the returned data later, used for paging. ### Return: - User search results V2  # [示例/Example] keyword = \"中华娘\" cursor = 0
     * @summary 获取指定关键词的用户搜索结果V2/Get user search results of specified keywords V2
     * @param {string} keyword 关键词/Keyword
     * @param {number} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get(keyword: string, cursor?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get(keyword, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V2 ### 参数: - keyword: 关键词 - cursor: 游标，第一次请求时为0，后续从返回数据中获取，用于翻页。 ### 返回: - 用户搜索结果V2  # [English] ### Purpose: - Get user search results of specified keywords V2 ### Parameters: - keyword: Keyword - cursor: Cursor, 0 for the first request, get from the returned data later, used for paging. ### Return: - User search results V2  # [示例/Example] keyword = \"中华娘\" cursor = 0
     * @summary 获取指定关键词的用户搜索结果V2/Get user search results of specified keywords V2
     * @param {string} keyword 关键词/Keyword
     * @param {number} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get_47(keyword: string, cursor?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserSearchResultV2ApiV1DouyinWebFetchUserSearchResultV2Get_47(keyword, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V3 ### 参数: - keyword: 关键词 - cursor: 偏移量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords V3 ### Parameters: - keyword: Keyword - cursor: Offset - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"中华娘\" cursor = \"0\" douyin_user_fans = \"\" douyin_user_type = \"\"
     * @summary 获取指定关键词的用户搜索结果V3/Get user search results of specified keywords V3
     * @param {string} keyword 关键词/Keyword
     * @param {string} [cursor] 游标/Cursor
     * @param {string} [douyinUserType] 用户类型/User type
     * @param {string} [douyinUserFans] 粉丝数/Fans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get(keyword: string, cursor?: string, douyinUserType?: string, douyinUserFans?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get(keyword, cursor, douyinUserType, douyinUserFans, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果V3 ### 参数: - keyword: 关键词 - cursor: 偏移量 - douyin_user_fans: 留空:不限, \"0_1k\": 1000以下, \"1k_1w\": 1000-1万, \"1w_10w\": 1w-10w, \"10w_100w\": 10w-100w，\"100w_\": 100w以上 - douyin_user_type: 留空:不限, \"common_user\": 普通用户, \"enterprise_user\": 企业认证, \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords V3 ### Parameters: - keyword: Keyword - cursor: Offset - douyin_user_fans: Leave blank: Unlimited, \"0_1k\": Below 1000, \"1k_1w\": 1000-10,000, \"1w_10w\": 10,000-100,000, \"10w_100w\": 100,000-1 million, \"100w_\": More than 1 million - douyin_user_type: Leave blank: Unlimited, \"common_user\": Ordinary user, \"enterprise_user\": Enterprise certification, \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"中华娘\" cursor = \"0\" douyin_user_fans = \"\" douyin_user_type = \"\"
     * @summary 获取指定关键词的用户搜索结果V3/Get user search results of specified keywords V3
     * @param {string} keyword 关键词/Keyword
     * @param {string} [cursor] 游标/Cursor
     * @param {string} [douyinUserType] 用户类型/User type
     * @param {string} [douyinUserFans] 粉丝数/Fans
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get_48(keyword: string, cursor?: string, douyinUserType?: string, douyinUserFans?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchUserSearchResultV3ApiV1DouyinWebFetchUserSearchResultV3Get_48(keyword, cursor, douyinUserType, douyinUserFans, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音视频榜单 ### 参数: - date: 日期，默认为24     - 1: 一小时内     - 24: 一天内     - 72: 3天内     - 168: 7天内 - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sub_type: 子类型，默认为1001     - 1001: 视频总榜     - 1002: 低粉爆款     - 1003: 高完播率     - 1004: 高涨粉率     - 1005: 高点赞率 ### 返回: - 视频榜单数据  # [English] ### Purpose: - Douyin Video Billboard ### Parameters: - date: Date, default is 24     - 1: Within an hour     - 24: Within a day     - 72: Within 3 days     - 168: Within 7 days - page: Page number, default is 1 - page_size: Number per page, default is 10 - sub_type: Subtype, default is 1001     - 1001: Total video list     - 1002: Low fans explosion     - 1003: High completion rate     - 1004: High increase rate     - 1005: High like rate ### Return: - Video billboard data
     * @summary 抖音视频榜单/Douyin Video Billboard
     * @param {number} date 日期/Date
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {number} subType 子类型/Subtype
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet(date: number, page: number, pageSize: number, subType: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet(date, page, pageSize, subType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音视频榜单 ### 参数: - date: 日期，默认为24     - 1: 一小时内     - 24: 一天内     - 72: 3天内     - 168: 7天内 - page: 页码，默认为1 - page_size: 每页数量，默认为10 - sub_type: 子类型，默认为1001     - 1001: 视频总榜     - 1002: 低粉爆款     - 1003: 高完播率     - 1004: 高涨粉率     - 1005: 高点赞率 ### 返回: - 视频榜单数据  # [English] ### Purpose: - Douyin Video Billboard ### Parameters: - date: Date, default is 24     - 1: Within an hour     - 24: Within a day     - 72: Within 3 days     - 168: Within 7 days - page: Page number, default is 1 - page_size: Number per page, default is 10 - sub_type: Subtype, default is 1001     - 1001: Total video list     - 1002: Low fans explosion     - 1003: High completion rate     - 1004: High increase rate     - 1005: High like rate ### Return: - Video billboard data
     * @summary 抖音视频榜单/Douyin Video Billboard
     * @param {number} date 日期/Date
     * @param {number} page 页码/Page number
     * @param {number} pageSize 每页数量/Number per page
     * @param {number} subType 子类型/Subtype
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet_49(date: number, page: number, pageSize: number, subType: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchVideoBillboardApiV1DouyinWebFetchVideoBillboardGet_49(date, page, pageSize, subType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音视频频道数据 - https://www.douyin.com/channel/300205 ### 参数: - tag_id: 标签id，从URL中获取 - count: 数量 - refresh_index: 刷新索引 ### 返回: - 视频频道数据  # [English] ### Purpose: - Douyin video channel data - https://www.douyin.com/channel/300205 ### Parameters: - tag_id: Tag id, get from the URL - count: Number - refresh_index: Refresh index ### Return: - Video channel data  # [示例/Example] tag_id = 300203 count = 10 refresh_index = 1
     * @summary 抖音视频频道数据/Douyin video channel data
     * @param {number} tagId 标签id/Tag id
     * @param {number} [count] 数量/Number
     * @param {number} [refreshIndex] 刷新索引/Refresh index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet(tagId: number, count?: number, refreshIndex?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet(tagId, count, refreshIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音视频频道数据 - https://www.douyin.com/channel/300205 ### 参数: - tag_id: 标签id，从URL中获取 - count: 数量 - refresh_index: 刷新索引 ### 返回: - 视频频道数据  # [English] ### Purpose: - Douyin video channel data - https://www.douyin.com/channel/300205 ### Parameters: - tag_id: Tag id, get from the URL - count: Number - refresh_index: Refresh index ### Return: - Video channel data  # [示例/Example] tag_id = 300203 count = 10 refresh_index = 1
     * @summary 抖音视频频道数据/Douyin video channel data
     * @param {number} tagId 标签id/Tag id
     * @param {number} [count] 数量/Number
     * @param {number} [refreshIndex] 刷新索引/Refresh index
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet_50(tagId: number, count?: number, refreshIndex?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchVideoChannelResultApiV1DouyinWebFetchVideoChannelResultGet_50(tagId, count, refreshIndex, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet(awemeId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet_51(awemeId: string, cursor?: number, count?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchVideoCommentsApiV1DouyinWebFetchVideoCommentsGet_51(awemeId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet(itemId, commentId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_52(itemId: string, commentId: string, cursor?: number, count?: number, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchVideoCommentsReplyApiV1DouyinWebFetchVideoCommentRepliesGet_52(itemId, commentId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: 获取视频新增粉丝数量 ### 参数: - aweme_id: 作品id ### 返回: - 新增粉丝数量  # [English] ### Purpose: Get video new fans count ### Parameters: - aweme_id: Video id ### Return: - New Fans count  # [示例/Example] aweme_id = \"7429296623961853234\"
     * @summary 获取视频新增粉丝数量/Get video new fans count
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet(awemeId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: 获取视频新增粉丝数量 ### 参数: - aweme_id: 作品id ### 返回: - 新增粉丝数量  # [English] ### Purpose: Get video new fans count ### Parameters: - aweme_id: Video id ### Return: - New Fans count  # [示例/Example] aweme_id = \"7429296623961853234\"
     * @summary 获取视频新增粉丝数量/Get video new fans count
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet_53(awemeId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchVideoFansAddCountApiV1DouyinWebFetchVideoFansAddCountGet_53(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音视频点赞观众画像 ### 参数: - aweme_id: 视频aweme_id - option: 选项，默认为1     - 1: 观众手机价格分布     - 2: 观众性别分布     - 3: 观众年龄分布     - 4: 观众地域分布(省份)     - 5: 观众地域分布(城市)     - 6: 观众城市等级分布     - 7: 观众手机品牌分布  ### 返回: - 视频点赞观众画像数据  # [English] ### Purpose: - Douyin Video Like Viewer Portrait ### Parameters: - aweme_id: Aweme_id of video - option: Option, default is 1     - 1: Distribution of audience mobile phone prices     - 2: Distribution of audience gender     - 3: Distribution of audience age     - 4: Distribution of audience region (province)     - 5: Distribution of audience region (city)     - 6: Distribution of audience city level     - 7: Distribution of audience mobile phone brands ### Return: - Video like viewer portrait data
     * @summary 抖音视频点赞观众画像/Douyin Video Like Viewer Portrait
     * @param {string} awemeId 视频aweme_id/Aweme_id of video
     * @param {string} option 选项/Option
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet(awemeId: string, option: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet(awemeId, option, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音视频点赞观众画像 ### 参数: - aweme_id: 视频aweme_id - option: 选项，默认为1     - 1: 观众手机价格分布     - 2: 观众性别分布     - 3: 观众年龄分布     - 4: 观众地域分布(省份)     - 5: 观众地域分布(城市)     - 6: 观众城市等级分布     - 7: 观众手机品牌分布  ### 返回: - 视频点赞观众画像数据  # [English] ### Purpose: - Douyin Video Like Viewer Portrait ### Parameters: - aweme_id: Aweme_id of video - option: Option, default is 1     - 1: Distribution of audience mobile phone prices     - 2: Distribution of audience gender     - 3: Distribution of audience age     - 4: Distribution of audience region (province)     - 5: Distribution of audience region (city)     - 6: Distribution of audience city level     - 7: Distribution of audience mobile phone brands ### Return: - Video like viewer portrait data
     * @summary 抖音视频点赞观众画像/Douyin Video Like Viewer Portrait
     * @param {string} awemeId 视频aweme_id/Aweme_id of video
     * @param {string} option 选项/Option
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet_54(awemeId: string, option: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchVideoLikePortraitApiV1DouyinWebFetchVideoLikePortraitGet_54(awemeId, option, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求时为0，后续从返回数据中获取，用于翻页。     - 例如: offset = 10     - JSON Path-1 : $.data.cursor - count: 数量，默认为10，建议保持不变。 - sort_type:     - 0:综合排序     - 1:最多点赞     - 2:最新发布 - publish_time:     - 0:不限     - 1:最近一天     - 7:最近一周     - 180:最近半年 - filter_duration:     - 0:不限 0-1:1分钟以内     - 1-5:1-5分钟     - 5-10000:5分钟以上 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset, 0 for the first request, get from the returned data later, used for paging.     - For example: offset = 10     - JSON Path-1 : $.data.cursor - count: Number, default is 10, it is recommended to keep it unchanged. - sort_type:     - 0: Comprehensive sorting     - 1: Most likes     - 2: Latest release - publish_time:     - 0: Unlimited     - 1: Last day     - 7: Last week     - 180: Last half year - filter_duration:     - 0: Unlimited     - 0-1: Within 1 minute     - 1-5: 1-5 minutes     - 5-10000: More than 5 minutes - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results  # [示例/Example] keyword = \"游戏\" offset = 0 count = 10 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" search_id = \"\"
     * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 视频时长/Duration filter
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, searchId?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet(keyword, offset, count, sortType, publishTime, filterDuration, searchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求时为0，后续从返回数据中获取，用于翻页。     - 例如: offset = 10     - JSON Path-1 : $.data.cursor - count: 数量，默认为10，建议保持不变。 - sort_type:     - 0:综合排序     - 1:最多点赞     - 2:最新发布 - publish_time:     - 0:不限     - 1:最近一天     - 7:最近一周     - 180:最近半年 - filter_duration:     - 0:不限 0-1:1分钟以内     - 1-5:1-5分钟     - 5-10000:5分钟以上 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset, 0 for the first request, get from the returned data later, used for paging.     - For example: offset = 10     - JSON Path-1 : $.data.cursor - count: Number, default is 10, it is recommended to keep it unchanged. - sort_type:     - 0: Comprehensive sorting     - 1: Most likes     - 2: Latest release - publish_time:     - 0: Unlimited     - 1: Last day     - 7: Last week     - 180: Last half year - filter_duration:     - 0: Unlimited     - 0-1: Within 1 minute     - 1-5: 1-5 minutes     - 5-10000: More than 5 minutes - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results  # [示例/Example] keyword = \"游戏\" offset = 0 count = 10 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" search_id = \"\"
     * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 视频时长/Duration filter
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet_55(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, searchId?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchVideoSearchResultApiV1DouyinWebFetchVideoSearchResultGet_55(keyword, offset, count, sortType, publishTime, filterDuration, searchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"
     * @summary 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
     * @param {string} keyword 关键词/Keyword
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 视频时长/Duration filter
     * @param {number} [page] 页码/Page
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get(keyword: string, sortType?: string, publishTime?: string, filterDuration?: string, page?: number, searchId?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get(keyword, sortType, publishTime, filterDuration, page, searchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"
     * @summary 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
     * @param {string} keyword 关键词/Keyword
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 视频时长/Duration filter
     * @param {number} [page] 页码/Page
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get_56(keyword: string, sortType?: string, publishTime?: string, filterDuration?: string, page?: number, searchId?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).fetchVideoSearchResultV2ApiV1DouyinWebFetchVideoSearchResultV2Get_56(keyword, sortType, publishTime, filterDuration, page, searchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 使用接口网址生成A-Bogus参数，提交的URL不能带有a_bogus参数，同时a_bogus参数与请求头中的User-Agent有关，需要一起提交和请求。 ### 参数: - url: API链接，请去除url中的原本的a_boogus参数(如有)。 - data: 请求载荷，只有在POST请求中才需要提交，GET请求中使用空字符串即可。 - user_agent: user-agent，需要提交你请求头中的User-Agent，该值参与a_bogus参数的计算。 - index_0: 加密明文列表的第一个值，无特殊要求，默认为0，不要随意修改。 - index_1: 加密明文列表的第二个值，无特殊要求，默认为1，不要随意修改。 - index_2: 加密明文列表的第三个值，无特殊要求，默认为14，不要随意修改。 ### 返回: - A-Bogus参数  # [English] ### Purpose: - Generate A-Bogus parameter using API URL, the submitted URL cannot contain the original a_boogus parameter, and the a_bogus parameter is related to the User-Agent in the request header, which needs to be submitted and requested together. ### Parameters: - url: API link, please remove the original a_boogus parameter from the url (if any). - data: Request payload, only need to submit in POST request, use an empty string in GET request. - user_agent: user-agent, you need to submit the User-Agent in your request header, which is involved in the calculation of the a_bogus parameter. - index_0: The first value of the encrypted plaintext list, no special requirements, the default is 0, do not modify it at will. - index_1: The second value of the encrypted plaintext list, no special requirements, the default is 1, do not modify it at will. - index_2: The third value of the encrypted plaintext list, no special requirements, the default is 14, do not modify it at will. ### Return: - A-Bogus parameter  # [示例/Example] ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/general/search/single/?device_platform=webapp&aid=6383&channel=channel_pc_web&search_channel=aweme_general&enable_history=1&keyword=%E4%B8%AD%E5%8D%8E%E5%A8%98&search_source=normal_search&query_correct_type=1&is_filter_search=0&from_group_id=7346905902554844468&offset=0&count=15&need_filter_settings=1&pc_client_type=1&version_code=190600&version_name=19.6.0&cookie_enabled=true&screen_width=1280&screen_height=800&browser_language=zh-CN&browser_platform=Win32&browser_name=Firefox&browser_version=124.0&browser_online=true&engine_name=Gecko&engine_version=124.0&os_name=Windows&os_version=10&cpu_core_num=16&device_memory=&platform=PC&webid=7348962975497324070&msToken=YCTVM6YGmjFdIpQAN9ykXLBXiSiuHdZkOkEQWTeqVOHBEPmOcM0lNwE0Kd9vgHPMPigSndZDHfAq9k-6lDmH3Jqz6mHHxmn-BzQjmLMIfLIPgirgnOixM9x4PwgcNQ%3D%3D\", \"data\": \"\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\", \"index_0\": 0, \"index_1\": 1, \"index_2\": 14 } ```
     * @summary 使用接口网址生成A-Bogus参数/Generate A-Bogus parameter using API URL
     * @param {ABogusModel} [aBogusModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public generateABogusApiV1DouyinWebGenerateABogusPost(aBogusModel?: ABogusModel, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).generateABogusApiV1DouyinWebGenerateABogusPost(aBogusModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 使用接口网址生成A-Bogus参数，提交的URL不能带有a_bogus参数，同时a_bogus参数与请求头中的User-Agent有关，需要一起提交和请求。 ### 参数: - url: API链接，请去除url中的原本的a_boogus参数(如有)。 - data: 请求载荷，只有在POST请求中才需要提交，GET请求中使用空字符串即可。 - user_agent: user-agent，需要提交你请求头中的User-Agent，该值参与a_bogus参数的计算。 - index_0: 加密明文列表的第一个值，无特殊要求，默认为0，不要随意修改。 - index_1: 加密明文列表的第二个值，无特殊要求，默认为1，不要随意修改。 - index_2: 加密明文列表的第三个值，无特殊要求，默认为14，不要随意修改。 ### 返回: - A-Bogus参数  # [English] ### Purpose: - Generate A-Bogus parameter using API URL, the submitted URL cannot contain the original a_boogus parameter, and the a_bogus parameter is related to the User-Agent in the request header, which needs to be submitted and requested together. ### Parameters: - url: API link, please remove the original a_boogus parameter from the url (if any). - data: Request payload, only need to submit in POST request, use an empty string in GET request. - user_agent: user-agent, you need to submit the User-Agent in your request header, which is involved in the calculation of the a_bogus parameter. - index_0: The first value of the encrypted plaintext list, no special requirements, the default is 0, do not modify it at will. - index_1: The second value of the encrypted plaintext list, no special requirements, the default is 1, do not modify it at will. - index_2: The third value of the encrypted plaintext list, no special requirements, the default is 14, do not modify it at will. ### Return: - A-Bogus parameter  # [示例/Example] ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/general/search/single/?device_platform=webapp&aid=6383&channel=channel_pc_web&search_channel=aweme_general&enable_history=1&keyword=%E4%B8%AD%E5%8D%8E%E5%A8%98&search_source=normal_search&query_correct_type=1&is_filter_search=0&from_group_id=7346905902554844468&offset=0&count=15&need_filter_settings=1&pc_client_type=1&version_code=190600&version_name=19.6.0&cookie_enabled=true&screen_width=1280&screen_height=800&browser_language=zh-CN&browser_platform=Win32&browser_name=Firefox&browser_version=124.0&browser_online=true&engine_name=Gecko&engine_version=124.0&os_name=Windows&os_version=10&cpu_core_num=16&device_memory=&platform=PC&webid=7348962975497324070&msToken=YCTVM6YGmjFdIpQAN9ykXLBXiSiuHdZkOkEQWTeqVOHBEPmOcM0lNwE0Kd9vgHPMPigSndZDHfAq9k-6lDmH3Jqz6mHHxmn-BzQjmLMIfLIPgirgnOixM9x4PwgcNQ%3D%3D\", \"data\": \"\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\", \"index_0\": 0, \"index_1\": 1, \"index_2\": 14 } ```
     * @summary 使用接口网址生成A-Bogus参数/Generate A-Bogus parameter using API URL
     * @param {ABogusModel} [aBogusModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public generateABogusApiV1DouyinWebGenerateABogusPost_57(aBogusModel?: ABogusModel, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).generateABogusApiV1DouyinWebGenerateABogusPost_57(aBogusModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成真实msToken ### 返回: - msToken  # [English] ### Purpose: - Generate real msToken ### Return: - msToken
     * @summary 生成真实msToken/Generate real msToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public generateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet(options?: any) {
        return DouyinWebAPIApiFp(this.configuration).generateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成真实msToken ### 返回: - msToken  # [English] ### Purpose: - Generate real msToken ### Return: - msToken
     * @summary 生成真实msToken/Generate real msToken
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public generateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet_58(options?: any) {
        return DouyinWebAPIApiFp(this.configuration).generateRealMsTokenApiV1DouyinWebGenerateRealMsTokenGet_58(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成s_v_web_id ### 返回: - s_v_web_id  # [English] ### Purpose: - Generate s_v_web_id ### Return: - s_v_web_id
     * @summary 生成s_v_web_id/Generate s_v_web_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public generateSVWebIdApiV1DouyinWebGenerateSVWebIdGet(options?: any) {
        return DouyinWebAPIApiFp(this.configuration).generateSVWebIdApiV1DouyinWebGenerateSVWebIdGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成s_v_web_id ### 返回: - s_v_web_id  # [English] ### Purpose: - Generate s_v_web_id ### Return: - s_v_web_id
     * @summary 生成s_v_web_id/Generate s_v_web_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public generateSVWebIdApiV1DouyinWebGenerateSVWebIdGet_59(options?: any) {
        return DouyinWebAPIApiFp(this.configuration).generateSVWebIdApiV1DouyinWebGenerateSVWebIdGet_59(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成ttwid ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Return: - ttwid
     * @summary 生成ttwid/Generate ttwid
     * @param {string} [userAgent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public generateTtwidApiV1DouyinWebGenerateTtwidGet(userAgent?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).generateTtwidApiV1DouyinWebGenerateTtwidGet(userAgent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成ttwid ### 返回: - ttwid  # [English] ### Purpose: - Generate ttwid ### Return: - ttwid
     * @summary 生成ttwid/Generate ttwid
     * @param {string} [userAgent] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public generateTtwidApiV1DouyinWebGenerateTtwidGet_60(userAgent?: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).generateTtwidApiV1DouyinWebGenerateTtwidGet_60(userAgent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成verify_fp ### 返回: - verify_fp  # [English] ### Purpose: - Generate verify_fp ### Return: - verify_fp
     * @summary 生成verify_fp/Generate verify_fp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public generateVerifyFpApiV1DouyinWebGenerateVerifyFpGet(options?: any) {
        return DouyinWebAPIApiFp(this.configuration).generateVerifyFpApiV1DouyinWebGenerateVerifyFpGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成verify_fp ### 返回: - verify_fp  # [English] ### Purpose: - Generate verify_fp ### Return: - verify_fp
     * @summary 生成verify_fp/Generate verify_fp
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public generateVerifyFpApiV1DouyinWebGenerateVerifyFpGet_61(options?: any) {
        return DouyinWebAPIApiFp(this.configuration).generateVerifyFpApiV1DouyinWebGenerateVerifyFpGet_61(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 使用接口网址生成X-Bogus参数 ### 参数: - url: 接口网址  # [English] ### Purpose: - Generate X-Bogus parameter using API URL ### Parameters: - url: API URL  # [示例/Example]  ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" } ```
     * @summary 使用接口网址生成X-Bogus参数/Generate X-Bogus parameter using API URL
     * @param {XBogusModel} [xBogusModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public generateXBogusApiV1DouyinWebGenerateXBogusPost(xBogusModel?: XBogusModel, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).generateXBogusApiV1DouyinWebGenerateXBogusPost(xBogusModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 使用接口网址生成X-Bogus参数 ### 参数: - url: 接口网址  # [English] ### Purpose: - Generate X-Bogus parameter using API URL ### Parameters: - url: API URL  # [示例/Example]  ```json { \"url\": \"https://www.douyin.com/aweme/v1/web/aweme/detail/?aweme_id=7148736076176215311&device_platform=webapp&aid=6383&channel=channel_pc_web&pc_client_type=1&version_code=170400&version_name=17.4.0&cookie_enabled=true&screen_width=1920&screen_height=1080&browser_language=zh-CN&browser_platform=Win32&browser_name=Edge&browser_version=117.0.2045.47&browser_online=true&engine_name=Blink&engine_version=117.0.0.0&os_name=Windows&os_version=10&cpu_core_num=128&device_memory=10240&platform=PC&downlink=10&effective_type=4g&round_trip_time=100\", \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\" } ```
     * @summary 使用接口网址生成X-Bogus参数/Generate X-Bogus parameter using API URL
     * @param {XBogusModel} [xBogusModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public generateXBogusApiV1DouyinWebGenerateXBogusPost_62(xBogusModel?: XBogusModel, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).generateXBogusApiV1DouyinWebGenerateXBogusPost_62(xBogusModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文]  ### 用途:  - 提取列表作品id（最多支持20个链接）  ### 参数:  - url: 作品链接列表  ### 返回:  - 作品id列表   # [English]  ### Purpose:  - Extract list video id (supports up to 20 links)  ### Parameters:  - url: Video link list  ### Return:  - Video id list   # [示例/Example]  ```json  { \"urls\":[     \"0.53 02/26 I@v.sE Fus:/ 你别太帅了郑润泽# 现场版live # 音乐节 # 郑润泽  https://v.douyin.com/iRNBho6u/ 复制此链接，打开Dou音搜索，直接观看视频!\",     \"https://v.douyin.com/iRNBho6u/\",     \"https://www.iesdouyin.com/share/video/7298145681699622182/?region=CN&mid=7298145762238565171&u_code=l1j9bkbd&did=MS4wLjABAAAAtqpCx0hpOERbdSzQdjRZw-wFPxaqdbAzsKDmbJMUI3KWlMGQHC-n6dXAqa-dM2EP&iid=MS4wLjABAAAANwkJuWIRFOzg5uCpDRpMj4OX-QryoDgn-yYlXQnRwQQ&with_sec_did=1&titleType=title&share_sign=05kGlqGmR4_IwCX.ZGk6xuL0osNA..5ur7b0jbOx6cc-&share_version=170400&ts=1699262937&from_aid=6383&from_ssr=1&from=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182?previous_page=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182\",  ]  }  ```
     * @summary 提取列表作品id/Extract list video id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public getAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost(requestBody?: Array<string>, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).getAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文]  ### 用途:  - 提取列表作品id（最多支持20个链接）  ### 参数:  - url: 作品链接列表  ### 返回:  - 作品id列表   # [English]  ### Purpose:  - Extract list video id (supports up to 20 links)  ### Parameters:  - url: Video link list  ### Return:  - Video id list   # [示例/Example]  ```json  { \"urls\":[     \"0.53 02/26 I@v.sE Fus:/ 你别太帅了郑润泽# 现场版live # 音乐节 # 郑润泽  https://v.douyin.com/iRNBho6u/ 复制此链接，打开Dou音搜索，直接观看视频!\",     \"https://v.douyin.com/iRNBho6u/\",     \"https://www.iesdouyin.com/share/video/7298145681699622182/?region=CN&mid=7298145762238565171&u_code=l1j9bkbd&did=MS4wLjABAAAAtqpCx0hpOERbdSzQdjRZw-wFPxaqdbAzsKDmbJMUI3KWlMGQHC-n6dXAqa-dM2EP&iid=MS4wLjABAAAANwkJuWIRFOzg5uCpDRpMj4OX-QryoDgn-yYlXQnRwQQ&with_sec_did=1&titleType=title&share_sign=05kGlqGmR4_IwCX.ZGk6xuL0osNA..5ur7b0jbOx6cc-&share_version=170400&ts=1699262937&from_aid=6383&from_ssr=1&from=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182?previous_page=web_code_link\",     \"https://www.douyin.com/video/7298145681699622182\",  ]  }  ```
     * @summary 提取列表作品id/Extract list video id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public getAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost_63(requestBody?: Array<string>, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).getAllAwemeIdApiV1DouyinWebGetAllAwemeIdPost_63(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文]  ### 用途:  - 提取列表用户id  ### 参数:  - url: 用户主页链接列表（最多支持10个链接）  ### 返回:  - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。   # [English]  ### Purpose:  - Extract list user id  ### Parameters:  - url: User homepage link list (supports up to 10 links)  ### Return:  - If the sec_user_id is successfully obtained from the link, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.   # [示例/Example]  ```json  { \"urls\":[    \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE?vid=7285950278132616463\",    \"https://www.douyin.com/user/MS4wLjABAAAAVsneOf144eGDFf8Xp9QNb1VW6ovXnNT5SqJBhJfe8KQBKWKDTWK5Hh-_i9mJzb8C\",    \"长按复制此条消息，打开抖音搜索，查看TA的更多作品。 https://v.douyin.com/idFqvUms/\",    \"https://v.douyin.com/idFqvUms/\"     ]  }  ```
     * @summary 提取列表用户id/Extract list user id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public getAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost(requestBody?: Array<string>, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).getAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文]  ### 用途:  - 提取列表用户id  ### 参数:  - url: 用户主页链接列表（最多支持10个链接）  ### 返回:  - 如果链接成功获取到sec_user_id，则返回sec_user_id，否则返回原始的输入链接，后续可以手动校验链接无法获取sec_user_id的原因。   # [English]  ### Purpose:  - Extract list user id  ### Parameters:  - url: User homepage link list (supports up to 10 links)  ### Return:  - If the sec_user_id is successfully obtained from the link, the sec_user_id is returned, otherwise the original input link is returned, and the reason why the sec_user_id cannot be obtained can be manually verified later.   # [示例/Example]  ```json  { \"urls\":[    \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE?vid=7285950278132616463\",    \"https://www.douyin.com/user/MS4wLjABAAAAVsneOf144eGDFf8Xp9QNb1VW6ovXnNT5SqJBhJfe8KQBKWKDTWK5Hh-_i9mJzb8C\",    \"长按复制此条消息，打开抖音搜索，查看TA的更多作品。 https://v.douyin.com/idFqvUms/\",    \"https://v.douyin.com/idFqvUms/\"     ]  }  ```
     * @summary 提取列表用户id/Extract list user id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public getAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost_64(requestBody?: Array<string>, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).getAllSecUserIdApiV1DouyinWebGetAllSecUserIdPost_64(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接列表（最多支持20个链接） ### 返回: - 直播间号列表  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link list (supports up to 20 links) ### Return: - Room id list  # [示例/Example] ```json {   \"urls\": [         \"https://live.douyin.com/775841227732\",         \"https://live.douyin.com/775841227732?room_id=7318296342189919011&enter_from_merge=web_share_link&enter_method=web_share_link&previous_page=app_code_link\",         \'https://webcast.amemv.com/douyin/webcast/reflow/7318296342189919011?u_code=l1j9bkbd&did=MS4wLjABAAAAEs86TBQPNwAo-RGrcxWyCdwKhI66AK3Pqf3ieo6HaxI&iid=MS4wLjABAAAA0ptpM-zzoliLEeyvWOCUt-_dQza4uSjlIvbtIazXnCY&with_sec_did=1&use_link_command=1&ecom_share_track_params=&extra_params={\"from_request_id\":\"20231230162057EC005772A8EAA0199906\",\"im_channel_invite_id\":\"0\"}&user_id=3644207898042206&liveId=7318296342189919011&from=share&style=share&enter_method=click_share&roomId=7318296342189919011&activity_info={}\',         \"6i- Q@x.Sl 03/23 【醒子8ke的直播间】  点击打开👉https://v.douyin.com/i8tBR7hX/  或长按复制此条消息，打开抖音，看TA直播\",         \"https://v.douyin.com/i8tBR7hX/\",         ] } ```
     * @summary 提取列表直播间号/Extract list webcast id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public getAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost(requestBody?: Array<string>, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).getAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接列表（最多支持20个链接） ### 返回: - 直播间号列表  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link list (supports up to 20 links) ### Return: - Room id list  # [示例/Example] ```json {   \"urls\": [         \"https://live.douyin.com/775841227732\",         \"https://live.douyin.com/775841227732?room_id=7318296342189919011&enter_from_merge=web_share_link&enter_method=web_share_link&previous_page=app_code_link\",         \'https://webcast.amemv.com/douyin/webcast/reflow/7318296342189919011?u_code=l1j9bkbd&did=MS4wLjABAAAAEs86TBQPNwAo-RGrcxWyCdwKhI66AK3Pqf3ieo6HaxI&iid=MS4wLjABAAAA0ptpM-zzoliLEeyvWOCUt-_dQza4uSjlIvbtIazXnCY&with_sec_did=1&use_link_command=1&ecom_share_track_params=&extra_params={\"from_request_id\":\"20231230162057EC005772A8EAA0199906\",\"im_channel_invite_id\":\"0\"}&user_id=3644207898042206&liveId=7318296342189919011&from=share&style=share&enter_method=click_share&roomId=7318296342189919011&activity_info={}\',         \"6i- Q@x.Sl 03/23 【醒子8ke的直播间】  点击打开👉https://v.douyin.com/i8tBR7hX/  或长按复制此条消息，打开抖音，看TA直播\",         \"https://v.douyin.com/i8tBR7hX/\",         ] } ```
     * @summary 提取列表直播间号/Extract list webcast id
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public getAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost_65(requestBody?: Array<string>, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).getAllWebcastIdApiV1DouyinWebGetAllWebcastIdPost_65(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.douyin.com/video/7298145681699622182\"
     * @summary 提取单个作品id/Extract single video id
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public getAwemeIdApiV1DouyinWebGetAwemeIdGet(url: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).getAwemeIdApiV1DouyinWebGetAwemeIdGet(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 提取单个作品id ### 参数: - url: 作品链接 ### 返回: - 作品id  # [English] ### Purpose: - Extract single video id ### Parameters: - url: Video link ### Return: - Video id  # [示例/Example] url = \"https://www.douyin.com/video/7298145681699622182\"
     * @summary 提取单个作品id/Extract single video id
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public getAwemeIdApiV1DouyinWebGetAwemeIdGet_66(url: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).getAwemeIdApiV1DouyinWebGetAwemeIdGet_66(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 提取单个用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户sec_user_id  # [English] ### Purpose: - Extract single user id ### Parameters: - url: User homepage link ### Return: - User sec_user_id  # [示例/Example] url = \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\"
     * @summary 提取单个用户id/Extract single user id
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public getSecUserIdApiV1DouyinWebGetSecUserIdGet(url: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).getSecUserIdApiV1DouyinWebGetSecUserIdGet(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 提取单个用户id ### 参数: - url: 用户主页链接 ### 返回: - 用户sec_user_id  # [English] ### Purpose: - Extract single user id ### Parameters: - url: User homepage link ### Return: - User sec_user_id  # [示例/Example] url = \"https://www.douyin.com/user/MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\"
     * @summary 提取单个用户id/Extract single user id
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public getSecUserIdApiV1DouyinWebGetSecUserIdGet_67(url: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).getSecUserIdApiV1DouyinWebGetSecUserIdGet_67(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接 ### 返回: - 直播间号  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link ### Return: - Room id  # [示例/Example] url = \"https://live.douyin.com/775841227732\"
     * @summary 提取直播间号/Extract webcast id
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public getWebcastIdApiV1DouyinWebGetWebcastIdGet(url: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).getWebcastIdApiV1DouyinWebGetWebcastIdGet(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 提取列表直播间号 ### 参数: - url: 直播间链接 ### 返回: - 直播间号  # [English] ### Purpose: - Extract list webcast id ### Parameters: - url: Room link ### Return: - Room id  # [示例/Example] url = \"https://live.douyin.com/775841227732\"
     * @summary 提取直播间号/Extract webcast id
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public getWebcastIdApiV1DouyinWebGetWebcastIdGet_68(url: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).getWebcastIdApiV1DouyinWebGetWebcastIdGet_68(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
     * @summary 根据sec_user_id获取指定用户的信息/Get information of specified user by sec_user_id
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public handlerUserProfileApiV1DouyinWebHandlerUserProfileGet(secUserId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).handlerUserProfileApiV1DouyinWebHandlerUserProfileGet(secUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
     * @summary 根据sec_user_id获取指定用户的信息/Get information of specified user by sec_user_id
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public handlerUserProfileApiV1DouyinWebHandlerUserProfileGet_69(secUserId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).handlerUserProfileApiV1DouyinWebHandlerUserProfileGet_69(secUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据抖音号获取指定用户的信息 ### 参数: - unique_id: 用户unique_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - unique_id: User unique_id ### Return: - User information  # [示例/Example] unique_id = \"TheChief\"
     * @summary 根据抖音号获取指定用户的信息/Get information of specified user by unique_id
     * @param {string} uniqueId 用户unique_id/User unique_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get(uniqueId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get(uniqueId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据抖音号获取指定用户的信息 ### 参数: - unique_id: 用户unique_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - unique_id: User unique_id ### Return: - User information  # [示例/Example] unique_id = \"TheChief\"
     * @summary 根据抖音号获取指定用户的信息/Get information of specified user by unique_id
     * @param {string} uniqueId 用户unique_id/User unique_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get_70(uniqueId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).handlerUserProfileV2ApiV1DouyinWebHandlerUserProfileV2Get_70(uniqueId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据抖音uid获取指定用户的信息 ### 参数: - uid: 用户uid，也就是抖音号的short_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - uid: User uid, which is the short_id of the Douyin number ### Return: - User information  # [示例/Example] uid = \"1673937488185292\"
     * @summary 根据抖音uid获取指定用户的信息/Get information of specified user by uid
     * @param {string} uid 用户uid(short_id)/User uid(short_id)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get(uid: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据抖音uid获取指定用户的信息 ### 参数: - uid: 用户uid，也就是抖音号的short_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user by unique_id ### Parameters: - uid: User uid, which is the short_id of the Douyin number ### Return: - User information  # [示例/Example] uid = \"1673937488185292\"
     * @summary 根据抖音uid获取指定用户的信息/Get information of specified user by uid
     * @param {string} uid 用户uid(short_id)/User uid(short_id)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get_71(uid: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).handlerUserProfileV3ApiV1DouyinWebHandlerUserProfileV3Get_71(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息，包含性别，年龄，直播等级，直播间牌子 ### 说明： - 性别：1为男，2为女，0为未知，在live_user字段中。 - 年龄：在user字段中，-1为未知。  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information, including gender, age, live level, live room brand ### Description: - gender: 1 male, 2 female, 0 unknown, in the live_user field. - age: in the user field, -1 unknown.  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
     * @summary 根据sec_user_id获取指定用户的信息（性别，年龄，直播等级、牌子）/Get information of specified user by sec_user_id (gender, age, live level、brand)
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get(secUserId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get(secUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息，包含性别，年龄，直播等级，直播间牌子 ### 说明： - 性别：1为男，2为女，0为未知，在live_user字段中。 - 年龄：在user字段中，-1为未知。  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information, including gender, age, live level, live room brand ### Description: - gender: 1 male, 2 female, 0 unknown, in the live_user field. - age: in the user field, -1 unknown.  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
     * @summary 根据sec_user_id获取指定用户的信息（性别，年龄，直播等级、牌子）/Get information of specified user by sec_user_id (gender, age, live level、brand)
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get_72(secUserId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).handlerUserProfileV4ApiV1DouyinWebHandlerUserProfileV4Get_72(secUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 直播间号转房间号 ### 参数: - webcast_id: 直播间号 ### 返回: - 房间号  # [English] ### Purpose: - Webcast id to room id ### Parameters: - webcast_id: Webcast id ### Return: - Room id  # [示例/Example] \"webcast_id = \"775841227732\"
     * @summary 直播间号转房间号/Webcast id to room id
     * @param {string} webcastId 直播间号/Webcast id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet(webcastId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet(webcastId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 直播间号转房间号 ### 参数: - webcast_id: 直播间号 ### 返回: - 房间号  # [English] ### Purpose: - Webcast id to room id ### Parameters: - webcast_id: Webcast id ### Return: - Room id  # [示例/Example] \"webcast_id = \"775841227732\"
     * @summary 直播间号转房间号/Webcast id to room id
     * @param {string} webcastId 直播间号/Webcast id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinWebAPIApi
     */
    public webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet_73(webcastId: string, options?: any) {
        return DouyinWebAPIApiFp(this.configuration).webcastId2RoomIdApiV1DouyinWebWebcastId2RoomIdGet_73(webcastId, options).then((request) => request(this.axios, this.basePath));
    }

}
