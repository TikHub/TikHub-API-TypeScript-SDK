// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
/**
 * XiaohongshuWebV2APIApi - axios parameter creator
 * @export
 */
export const XiaohongshuWebV2APIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取推荐笔记 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 ### 返回: - 推荐笔记  # [English] ### Purpose: - Get feed notes ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - Feed notes  # [示例/Example] note_id = \"66c9cc31000000001f03a4bc\"
         * @summary 获取推荐笔记/Fetch feed notes
         * @param {string} noteId 笔记ID/Note ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFeedNotesApiV1XiaohongshuWebV2FetchFeedNotesGet: async (noteId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling fetchFeedNotesApiV1XiaohongshuWebV2FetchFeedNotesGet.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web_v2/fetch_feed_notes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (noteId !== undefined) {
                localVarQueryParameter['note_id'] = noteId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取推荐笔记 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 ### 返回: - 推荐笔记  # [English] ### Purpose: - Get feed notes ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - Feed notes  # [示例/Example] note_id = \"66c9cc31000000001f03a4bc\"
         * @summary 获取推荐笔记/Fetch feed notes
         * @param {string} noteId 笔记ID/Note ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFeedNotesApiV1XiaohongshuWebV2FetchFeedNotesGet_1: async (noteId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling fetchFeedNotesApiV1XiaohongshuWebV2FetchFeedNotesGet_1.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web_v2/fetch_feed_notes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (noteId !== undefined) {
                localVarQueryParameter['note_id'] = noteId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get follower list ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Follower list  # [示例/Example] user_id = \"604a28420000000001005211\" cursor = \"\"
         * @summary 获取用户粉丝列表/Fetch follower list
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFollowerListApiV1XiaohongshuWebV2FetchFollowerListGet: async (userId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchFollowerListApiV1XiaohongshuWebV2FetchFollowerListGet.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web_v2/fetch_follower_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get follower list ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Follower list  # [示例/Example] user_id = \"604a28420000000001005211\" cursor = \"\"
         * @summary 获取用户粉丝列表/Fetch follower list
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFollowerListApiV1XiaohongshuWebV2FetchFollowerListGet_2: async (userId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchFollowerListApiV1XiaohongshuWebV2FetchFollowerListGet_2.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web_v2/fetch_follower_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get following list ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Following list  # [示例/Example] user_id = \"604a28420000000001005211\" cursor = \"\"
         * @summary 获取用户关注列表/Fetch following list
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFollowingListApiV1XiaohongshuWebV2FetchFollowingListGet: async (userId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchFollowingListApiV1XiaohongshuWebV2FetchFollowingListGet.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web_v2/fetch_following_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get following list ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Following list  # [示例/Example] user_id = \"604a28420000000001005211\" cursor = \"\"
         * @summary 获取用户关注列表/Fetch following list
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFollowingListApiV1XiaohongshuWebV2FetchFollowingListGet_3: async (userId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchFollowingListApiV1XiaohongshuWebV2FetchFollowingListGet_3.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web_v2/fetch_following_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取主页笔记 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 主页笔记  # [English] ### Purpose: - Get home notes ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Home notes  # [示例/Example] user_id = \"5f3e0d00000000001f03a4bc\" cursor = \"\"
         * @summary 获取主页笔记/Fetch home notes
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeNotesApiV1XiaohongshuWebV2FetchHomeNotesGet: async (userId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchHomeNotesApiV1XiaohongshuWebV2FetchHomeNotesGet.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web_v2/fetch_home_notes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取主页笔记 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 主页笔记  # [English] ### Purpose: - Get home notes ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Home notes  # [示例/Example] user_id = \"5f3e0d00000000001f03a4bc\" cursor = \"\"
         * @summary 获取主页笔记/Fetch home notes
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeNotesApiV1XiaohongshuWebV2FetchHomeNotesGet_4: async (userId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchHomeNotesApiV1XiaohongshuWebV2FetchHomeNotesGet_4.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web_v2/fetch_home_notes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论 ### 参数: - note_id: 笔记ID - cursor: 游标 ### 返回: - 笔记评论  # [English] ### Purpose: - Get note comments ### Parameters: - note_id: Note ID - cursor: Cursor ### Return: - Note comments  # [示例/Example] note_id = \"651ccaa9000000001f03d7f7\" cursor = \"\"
         * @summary 获取笔记评论/Fetch note comments
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchNoteCommentsApiV1XiaohongshuWebV2FetchNoteCommentsGet: async (noteId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling fetchNoteCommentsApiV1XiaohongshuWebV2FetchNoteCommentsGet.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web_v2/fetch_note_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (noteId !== undefined) {
                localVarQueryParameter['note_id'] = noteId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论 ### 参数: - note_id: 笔记ID - cursor: 游标 ### 返回: - 笔记评论  # [English] ### Purpose: - Get note comments ### Parameters: - note_id: Note ID - cursor: Cursor ### Return: - Note comments  # [示例/Example] note_id = \"651ccaa9000000001f03d7f7\" cursor = \"\"
         * @summary 获取笔记评论/Fetch note comments
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchNoteCommentsApiV1XiaohongshuWebV2FetchNoteCommentsGet_5: async (noteId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling fetchNoteCommentsApiV1XiaohongshuWebV2FetchNoteCommentsGet_5.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web_v2/fetch_note_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (noteId !== undefined) {
                localVarQueryParameter['note_id'] = noteId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取搜索笔记 ### 参数: - keywords：搜索关键词 - sort_type：排序方式     - general：综合     - time_descending：最新     - popularity_descending：最热 - note_type: 笔记类型     - 0：全部     - 1：视频     - 2：图文 ### 返回: - 搜索笔记  # [English] ### Purpose: - Get search notes ### Parameters: - keywords: Search keywords - sort_type: Sort type     - general: General     - time_descending: Latest     - popularity_descending: Popular - note_type: Note type     - 0: All     - 1: Video     - 2: Note ### Return: - Search notes  # [示例/Example] keywords = \"口红\" page = 1 sort_type = \"general\" note_type = \"1\"
         * @summary 获取搜索笔记/Fetch search notes
         * @param {string} keywords 搜索关键词/Search keywords
         * @param {number} [page] 页码/Page number
         * @param {string} [sortType] 排序方式/Sort type
         * @param {string} [noteType] 笔记类型/Note type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchNotesApiV1XiaohongshuWebV2FetchSearchNotesGet: async (keywords: string, page?: number, sortType?: string, noteType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keywords' is not null or undefined
            if (keywords === null || keywords === undefined) {
                throw new RequiredError('keywords','Required parameter keywords was null or undefined when calling fetchSearchNotesApiV1XiaohongshuWebV2FetchSearchNotesGet.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web_v2/fetch_search_notes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keywords !== undefined) {
                localVarQueryParameter['keywords'] = keywords;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (noteType !== undefined) {
                localVarQueryParameter['note_type'] = noteType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取搜索笔记 ### 参数: - keywords：搜索关键词 - sort_type：排序方式     - general：综合     - time_descending：最新     - popularity_descending：最热 - note_type: 笔记类型     - 0：全部     - 1：视频     - 2：图文 ### 返回: - 搜索笔记  # [English] ### Purpose: - Get search notes ### Parameters: - keywords: Search keywords - sort_type: Sort type     - general: General     - time_descending: Latest     - popularity_descending: Popular - note_type: Note type     - 0: All     - 1: Video     - 2: Note ### Return: - Search notes  # [示例/Example] keywords = \"口红\" page = 1 sort_type = \"general\" note_type = \"1\"
         * @summary 获取搜索笔记/Fetch search notes
         * @param {string} keywords 搜索关键词/Search keywords
         * @param {number} [page] 页码/Page number
         * @param {string} [sortType] 排序方式/Sort type
         * @param {string} [noteType] 笔记类型/Note type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchNotesApiV1XiaohongshuWebV2FetchSearchNotesGet_6: async (keywords: string, page?: number, sortType?: string, noteType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keywords' is not null or undefined
            if (keywords === null || keywords === undefined) {
                throw new RequiredError('keywords','Required parameter keywords was null or undefined when calling fetchSearchNotesApiV1XiaohongshuWebV2FetchSearchNotesGet_6.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web_v2/fetch_search_notes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keywords !== undefined) {
                localVarQueryParameter['keywords'] = keywords;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (noteType !== undefined) {
                localVarQueryParameter['note_type'] = noteType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取子评论 ### 参数: - note_id: 笔记ID - comment_id: 评论ID - cursor: 游标 ### 返回: - 子评论  # [English] ### Purpose: - Get sub comments ### Parameters: - note_id: Note ID - comment_id: Comment ID - cursor: Cursor ### Return: - Sub comments  # [示例/Example] note_id = \"673c894c0000000007033f92\" comment_id = \"673ecdfc000000001503bf8b\" cursor = \"\"
         * @summary 获取子评论/Fetch sub comments
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSubCommentsApiV1XiaohongshuWebV2FetchSubCommentsGet: async (noteId: string, commentId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling fetchSubCommentsApiV1XiaohongshuWebV2FetchSubCommentsGet.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling fetchSubCommentsApiV1XiaohongshuWebV2FetchSubCommentsGet.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web_v2/fetch_sub_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (noteId !== undefined) {
                localVarQueryParameter['note_id'] = noteId;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取子评论 ### 参数: - note_id: 笔记ID - comment_id: 评论ID - cursor: 游标 ### 返回: - 子评论  # [English] ### Purpose: - Get sub comments ### Parameters: - note_id: Note ID - comment_id: Comment ID - cursor: Cursor ### Return: - Sub comments  # [示例/Example] note_id = \"673c894c0000000007033f92\" comment_id = \"673ecdfc000000001503bf8b\" cursor = \"\"
         * @summary 获取子评论/Fetch sub comments
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSubCommentsApiV1XiaohongshuWebV2FetchSubCommentsGet_7: async (noteId: string, commentId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling fetchSubCommentsApiV1XiaohongshuWebV2FetchSubCommentsGet_7.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling fetchSubCommentsApiV1XiaohongshuWebV2FetchSubCommentsGet_7.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web_v2/fetch_sub_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (noteId !== undefined) {
                localVarQueryParameter['note_id'] = noteId;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 ### 参数: - user_id: 用户ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user info ### Parameters: - user_id: User ID ### Return: - User info  # [示例/Example] user_id = \"5e3a8ee700000000010070c6\"
         * @summary 获取用户信息/Fetch user info
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1XiaohongshuWebV2FetchUserInfoGet: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserInfoApiV1XiaohongshuWebV2FetchUserInfoGet.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web_v2/fetch_user_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 ### 参数: - user_id: 用户ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user info ### Parameters: - user_id: User ID ### Return: - User info  # [示例/Example] user_id = \"5e3a8ee700000000010070c6\"
         * @summary 获取用户信息/Fetch user info
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1XiaohongshuWebV2FetchUserInfoGet_8: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserInfoApiV1XiaohongshuWebV2FetchUserInfoGet_8.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web_v2/fetch_user_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * XiaohongshuWebV2APIApi - functional programming interface
 * @export
 */
export const XiaohongshuWebV2APIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取推荐笔记 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 ### 返回: - 推荐笔记  # [English] ### Purpose: - Get feed notes ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - Feed notes  # [示例/Example] note_id = \"66c9cc31000000001f03a4bc\"
         * @summary 获取推荐笔记/Fetch feed notes
         * @param {string} noteId 笔记ID/Note ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchFeedNotesApiV1XiaohongshuWebV2FetchFeedNotesGet(noteId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebV2APIApiAxiosParamCreator(configuration).fetchFeedNotesApiV1XiaohongshuWebV2FetchFeedNotesGet(noteId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取推荐笔记 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 ### 返回: - 推荐笔记  # [English] ### Purpose: - Get feed notes ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - Feed notes  # [示例/Example] note_id = \"66c9cc31000000001f03a4bc\"
         * @summary 获取推荐笔记/Fetch feed notes
         * @param {string} noteId 笔记ID/Note ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchFeedNotesApiV1XiaohongshuWebV2FetchFeedNotesGet_1(noteId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebV2APIApiAxiosParamCreator(configuration).fetchFeedNotesApiV1XiaohongshuWebV2FetchFeedNotesGet_1(noteId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get follower list ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Follower list  # [示例/Example] user_id = \"604a28420000000001005211\" cursor = \"\"
         * @summary 获取用户粉丝列表/Fetch follower list
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchFollowerListApiV1XiaohongshuWebV2FetchFollowerListGet(userId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebV2APIApiAxiosParamCreator(configuration).fetchFollowerListApiV1XiaohongshuWebV2FetchFollowerListGet(userId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get follower list ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Follower list  # [示例/Example] user_id = \"604a28420000000001005211\" cursor = \"\"
         * @summary 获取用户粉丝列表/Fetch follower list
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchFollowerListApiV1XiaohongshuWebV2FetchFollowerListGet_2(userId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebV2APIApiAxiosParamCreator(configuration).fetchFollowerListApiV1XiaohongshuWebV2FetchFollowerListGet_2(userId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get following list ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Following list  # [示例/Example] user_id = \"604a28420000000001005211\" cursor = \"\"
         * @summary 获取用户关注列表/Fetch following list
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchFollowingListApiV1XiaohongshuWebV2FetchFollowingListGet(userId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebV2APIApiAxiosParamCreator(configuration).fetchFollowingListApiV1XiaohongshuWebV2FetchFollowingListGet(userId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get following list ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Following list  # [示例/Example] user_id = \"604a28420000000001005211\" cursor = \"\"
         * @summary 获取用户关注列表/Fetch following list
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchFollowingListApiV1XiaohongshuWebV2FetchFollowingListGet_3(userId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebV2APIApiAxiosParamCreator(configuration).fetchFollowingListApiV1XiaohongshuWebV2FetchFollowingListGet_3(userId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取主页笔记 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 主页笔记  # [English] ### Purpose: - Get home notes ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Home notes  # [示例/Example] user_id = \"5f3e0d00000000001f03a4bc\" cursor = \"\"
         * @summary 获取主页笔记/Fetch home notes
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHomeNotesApiV1XiaohongshuWebV2FetchHomeNotesGet(userId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebV2APIApiAxiosParamCreator(configuration).fetchHomeNotesApiV1XiaohongshuWebV2FetchHomeNotesGet(userId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取主页笔记 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 主页笔记  # [English] ### Purpose: - Get home notes ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Home notes  # [示例/Example] user_id = \"5f3e0d00000000001f03a4bc\" cursor = \"\"
         * @summary 获取主页笔记/Fetch home notes
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHomeNotesApiV1XiaohongshuWebV2FetchHomeNotesGet_4(userId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebV2APIApiAxiosParamCreator(configuration).fetchHomeNotesApiV1XiaohongshuWebV2FetchHomeNotesGet_4(userId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论 ### 参数: - note_id: 笔记ID - cursor: 游标 ### 返回: - 笔记评论  # [English] ### Purpose: - Get note comments ### Parameters: - note_id: Note ID - cursor: Cursor ### Return: - Note comments  # [示例/Example] note_id = \"651ccaa9000000001f03d7f7\" cursor = \"\"
         * @summary 获取笔记评论/Fetch note comments
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchNoteCommentsApiV1XiaohongshuWebV2FetchNoteCommentsGet(noteId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebV2APIApiAxiosParamCreator(configuration).fetchNoteCommentsApiV1XiaohongshuWebV2FetchNoteCommentsGet(noteId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论 ### 参数: - note_id: 笔记ID - cursor: 游标 ### 返回: - 笔记评论  # [English] ### Purpose: - Get note comments ### Parameters: - note_id: Note ID - cursor: Cursor ### Return: - Note comments  # [示例/Example] note_id = \"651ccaa9000000001f03d7f7\" cursor = \"\"
         * @summary 获取笔记评论/Fetch note comments
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchNoteCommentsApiV1XiaohongshuWebV2FetchNoteCommentsGet_5(noteId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebV2APIApiAxiosParamCreator(configuration).fetchNoteCommentsApiV1XiaohongshuWebV2FetchNoteCommentsGet_5(noteId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取搜索笔记 ### 参数: - keywords：搜索关键词 - sort_type：排序方式     - general：综合     - time_descending：最新     - popularity_descending：最热 - note_type: 笔记类型     - 0：全部     - 1：视频     - 2：图文 ### 返回: - 搜索笔记  # [English] ### Purpose: - Get search notes ### Parameters: - keywords: Search keywords - sort_type: Sort type     - general: General     - time_descending: Latest     - popularity_descending: Popular - note_type: Note type     - 0: All     - 1: Video     - 2: Note ### Return: - Search notes  # [示例/Example] keywords = \"口红\" page = 1 sort_type = \"general\" note_type = \"1\"
         * @summary 获取搜索笔记/Fetch search notes
         * @param {string} keywords 搜索关键词/Search keywords
         * @param {number} [page] 页码/Page number
         * @param {string} [sortType] 排序方式/Sort type
         * @param {string} [noteType] 笔记类型/Note type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchNotesApiV1XiaohongshuWebV2FetchSearchNotesGet(keywords: string, page?: number, sortType?: string, noteType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebV2APIApiAxiosParamCreator(configuration).fetchSearchNotesApiV1XiaohongshuWebV2FetchSearchNotesGet(keywords, page, sortType, noteType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取搜索笔记 ### 参数: - keywords：搜索关键词 - sort_type：排序方式     - general：综合     - time_descending：最新     - popularity_descending：最热 - note_type: 笔记类型     - 0：全部     - 1：视频     - 2：图文 ### 返回: - 搜索笔记  # [English] ### Purpose: - Get search notes ### Parameters: - keywords: Search keywords - sort_type: Sort type     - general: General     - time_descending: Latest     - popularity_descending: Popular - note_type: Note type     - 0: All     - 1: Video     - 2: Note ### Return: - Search notes  # [示例/Example] keywords = \"口红\" page = 1 sort_type = \"general\" note_type = \"1\"
         * @summary 获取搜索笔记/Fetch search notes
         * @param {string} keywords 搜索关键词/Search keywords
         * @param {number} [page] 页码/Page number
         * @param {string} [sortType] 排序方式/Sort type
         * @param {string} [noteType] 笔记类型/Note type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchNotesApiV1XiaohongshuWebV2FetchSearchNotesGet_6(keywords: string, page?: number, sortType?: string, noteType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebV2APIApiAxiosParamCreator(configuration).fetchSearchNotesApiV1XiaohongshuWebV2FetchSearchNotesGet_6(keywords, page, sortType, noteType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取子评论 ### 参数: - note_id: 笔记ID - comment_id: 评论ID - cursor: 游标 ### 返回: - 子评论  # [English] ### Purpose: - Get sub comments ### Parameters: - note_id: Note ID - comment_id: Comment ID - cursor: Cursor ### Return: - Sub comments  # [示例/Example] note_id = \"673c894c0000000007033f92\" comment_id = \"673ecdfc000000001503bf8b\" cursor = \"\"
         * @summary 获取子评论/Fetch sub comments
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSubCommentsApiV1XiaohongshuWebV2FetchSubCommentsGet(noteId: string, commentId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebV2APIApiAxiosParamCreator(configuration).fetchSubCommentsApiV1XiaohongshuWebV2FetchSubCommentsGet(noteId, commentId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取子评论 ### 参数: - note_id: 笔记ID - comment_id: 评论ID - cursor: 游标 ### 返回: - 子评论  # [English] ### Purpose: - Get sub comments ### Parameters: - note_id: Note ID - comment_id: Comment ID - cursor: Cursor ### Return: - Sub comments  # [示例/Example] note_id = \"673c894c0000000007033f92\" comment_id = \"673ecdfc000000001503bf8b\" cursor = \"\"
         * @summary 获取子评论/Fetch sub comments
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSubCommentsApiV1XiaohongshuWebV2FetchSubCommentsGet_7(noteId: string, commentId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebV2APIApiAxiosParamCreator(configuration).fetchSubCommentsApiV1XiaohongshuWebV2FetchSubCommentsGet_7(noteId, commentId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 ### 参数: - user_id: 用户ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user info ### Parameters: - user_id: User ID ### Return: - User info  # [示例/Example] user_id = \"5e3a8ee700000000010070c6\"
         * @summary 获取用户信息/Fetch user info
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoApiV1XiaohongshuWebV2FetchUserInfoGet(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebV2APIApiAxiosParamCreator(configuration).fetchUserInfoApiV1XiaohongshuWebV2FetchUserInfoGet(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 ### 参数: - user_id: 用户ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user info ### Parameters: - user_id: User ID ### Return: - User info  # [示例/Example] user_id = \"5e3a8ee700000000010070c6\"
         * @summary 获取用户信息/Fetch user info
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoApiV1XiaohongshuWebV2FetchUserInfoGet_8(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebV2APIApiAxiosParamCreator(configuration).fetchUserInfoApiV1XiaohongshuWebV2FetchUserInfoGet_8(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * XiaohongshuWebV2APIApi - factory interface
 * @export
 */
export const XiaohongshuWebV2APIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 获取推荐笔记 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 ### 返回: - 推荐笔记  # [English] ### Purpose: - Get feed notes ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - Feed notes  # [示例/Example] note_id = \"66c9cc31000000001f03a4bc\"
         * @summary 获取推荐笔记/Fetch feed notes
         * @param {string} noteId 笔记ID/Note ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFeedNotesApiV1XiaohongshuWebV2FetchFeedNotesGet(noteId: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebV2APIApiFp(configuration).fetchFeedNotesApiV1XiaohongshuWebV2FetchFeedNotesGet(noteId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取推荐笔记 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 ### 返回: - 推荐笔记  # [English] ### Purpose: - Get feed notes ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - Feed notes  # [示例/Example] note_id = \"66c9cc31000000001f03a4bc\"
         * @summary 获取推荐笔记/Fetch feed notes
         * @param {string} noteId 笔记ID/Note ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFeedNotesApiV1XiaohongshuWebV2FetchFeedNotesGet_1(noteId: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebV2APIApiFp(configuration).fetchFeedNotesApiV1XiaohongshuWebV2FetchFeedNotesGet_1(noteId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get follower list ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Follower list  # [示例/Example] user_id = \"604a28420000000001005211\" cursor = \"\"
         * @summary 获取用户粉丝列表/Fetch follower list
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFollowerListApiV1XiaohongshuWebV2FetchFollowerListGet(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebV2APIApiFp(configuration).fetchFollowerListApiV1XiaohongshuWebV2FetchFollowerListGet(userId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get follower list ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Follower list  # [示例/Example] user_id = \"604a28420000000001005211\" cursor = \"\"
         * @summary 获取用户粉丝列表/Fetch follower list
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFollowerListApiV1XiaohongshuWebV2FetchFollowerListGet_2(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebV2APIApiFp(configuration).fetchFollowerListApiV1XiaohongshuWebV2FetchFollowerListGet_2(userId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get following list ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Following list  # [示例/Example] user_id = \"604a28420000000001005211\" cursor = \"\"
         * @summary 获取用户关注列表/Fetch following list
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFollowingListApiV1XiaohongshuWebV2FetchFollowingListGet(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebV2APIApiFp(configuration).fetchFollowingListApiV1XiaohongshuWebV2FetchFollowingListGet(userId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get following list ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Following list  # [示例/Example] user_id = \"604a28420000000001005211\" cursor = \"\"
         * @summary 获取用户关注列表/Fetch following list
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchFollowingListApiV1XiaohongshuWebV2FetchFollowingListGet_3(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebV2APIApiFp(configuration).fetchFollowingListApiV1XiaohongshuWebV2FetchFollowingListGet_3(userId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取主页笔记 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 主页笔记  # [English] ### Purpose: - Get home notes ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Home notes  # [示例/Example] user_id = \"5f3e0d00000000001f03a4bc\" cursor = \"\"
         * @summary 获取主页笔记/Fetch home notes
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeNotesApiV1XiaohongshuWebV2FetchHomeNotesGet(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebV2APIApiFp(configuration).fetchHomeNotesApiV1XiaohongshuWebV2FetchHomeNotesGet(userId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取主页笔记 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 主页笔记  # [English] ### Purpose: - Get home notes ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Home notes  # [示例/Example] user_id = \"5f3e0d00000000001f03a4bc\" cursor = \"\"
         * @summary 获取主页笔记/Fetch home notes
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeNotesApiV1XiaohongshuWebV2FetchHomeNotesGet_4(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebV2APIApiFp(configuration).fetchHomeNotesApiV1XiaohongshuWebV2FetchHomeNotesGet_4(userId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论 ### 参数: - note_id: 笔记ID - cursor: 游标 ### 返回: - 笔记评论  # [English] ### Purpose: - Get note comments ### Parameters: - note_id: Note ID - cursor: Cursor ### Return: - Note comments  # [示例/Example] note_id = \"651ccaa9000000001f03d7f7\" cursor = \"\"
         * @summary 获取笔记评论/Fetch note comments
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchNoteCommentsApiV1XiaohongshuWebV2FetchNoteCommentsGet(noteId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebV2APIApiFp(configuration).fetchNoteCommentsApiV1XiaohongshuWebV2FetchNoteCommentsGet(noteId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论 ### 参数: - note_id: 笔记ID - cursor: 游标 ### 返回: - 笔记评论  # [English] ### Purpose: - Get note comments ### Parameters: - note_id: Note ID - cursor: Cursor ### Return: - Note comments  # [示例/Example] note_id = \"651ccaa9000000001f03d7f7\" cursor = \"\"
         * @summary 获取笔记评论/Fetch note comments
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchNoteCommentsApiV1XiaohongshuWebV2FetchNoteCommentsGet_5(noteId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebV2APIApiFp(configuration).fetchNoteCommentsApiV1XiaohongshuWebV2FetchNoteCommentsGet_5(noteId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取搜索笔记 ### 参数: - keywords：搜索关键词 - sort_type：排序方式     - general：综合     - time_descending：最新     - popularity_descending：最热 - note_type: 笔记类型     - 0：全部     - 1：视频     - 2：图文 ### 返回: - 搜索笔记  # [English] ### Purpose: - Get search notes ### Parameters: - keywords: Search keywords - sort_type: Sort type     - general: General     - time_descending: Latest     - popularity_descending: Popular - note_type: Note type     - 0: All     - 1: Video     - 2: Note ### Return: - Search notes  # [示例/Example] keywords = \"口红\" page = 1 sort_type = \"general\" note_type = \"1\"
         * @summary 获取搜索笔记/Fetch search notes
         * @param {string} keywords 搜索关键词/Search keywords
         * @param {number} [page] 页码/Page number
         * @param {string} [sortType] 排序方式/Sort type
         * @param {string} [noteType] 笔记类型/Note type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchNotesApiV1XiaohongshuWebV2FetchSearchNotesGet(keywords: string, page?: number, sortType?: string, noteType?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebV2APIApiFp(configuration).fetchSearchNotesApiV1XiaohongshuWebV2FetchSearchNotesGet(keywords, page, sortType, noteType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取搜索笔记 ### 参数: - keywords：搜索关键词 - sort_type：排序方式     - general：综合     - time_descending：最新     - popularity_descending：最热 - note_type: 笔记类型     - 0：全部     - 1：视频     - 2：图文 ### 返回: - 搜索笔记  # [English] ### Purpose: - Get search notes ### Parameters: - keywords: Search keywords - sort_type: Sort type     - general: General     - time_descending: Latest     - popularity_descending: Popular - note_type: Note type     - 0: All     - 1: Video     - 2: Note ### Return: - Search notes  # [示例/Example] keywords = \"口红\" page = 1 sort_type = \"general\" note_type = \"1\"
         * @summary 获取搜索笔记/Fetch search notes
         * @param {string} keywords 搜索关键词/Search keywords
         * @param {number} [page] 页码/Page number
         * @param {string} [sortType] 排序方式/Sort type
         * @param {string} [noteType] 笔记类型/Note type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchNotesApiV1XiaohongshuWebV2FetchSearchNotesGet_6(keywords: string, page?: number, sortType?: string, noteType?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebV2APIApiFp(configuration).fetchSearchNotesApiV1XiaohongshuWebV2FetchSearchNotesGet_6(keywords, page, sortType, noteType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取子评论 ### 参数: - note_id: 笔记ID - comment_id: 评论ID - cursor: 游标 ### 返回: - 子评论  # [English] ### Purpose: - Get sub comments ### Parameters: - note_id: Note ID - comment_id: Comment ID - cursor: Cursor ### Return: - Sub comments  # [示例/Example] note_id = \"673c894c0000000007033f92\" comment_id = \"673ecdfc000000001503bf8b\" cursor = \"\"
         * @summary 获取子评论/Fetch sub comments
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSubCommentsApiV1XiaohongshuWebV2FetchSubCommentsGet(noteId: string, commentId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebV2APIApiFp(configuration).fetchSubCommentsApiV1XiaohongshuWebV2FetchSubCommentsGet(noteId, commentId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取子评论 ### 参数: - note_id: 笔记ID - comment_id: 评论ID - cursor: 游标 ### 返回: - 子评论  # [English] ### Purpose: - Get sub comments ### Parameters: - note_id: Note ID - comment_id: Comment ID - cursor: Cursor ### Return: - Sub comments  # [示例/Example] note_id = \"673c894c0000000007033f92\" comment_id = \"673ecdfc000000001503bf8b\" cursor = \"\"
         * @summary 获取子评论/Fetch sub comments
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSubCommentsApiV1XiaohongshuWebV2FetchSubCommentsGet_7(noteId: string, commentId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebV2APIApiFp(configuration).fetchSubCommentsApiV1XiaohongshuWebV2FetchSubCommentsGet_7(noteId, commentId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 ### 参数: - user_id: 用户ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user info ### Parameters: - user_id: User ID ### Return: - User info  # [示例/Example] user_id = \"5e3a8ee700000000010070c6\"
         * @summary 获取用户信息/Fetch user info
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1XiaohongshuWebV2FetchUserInfoGet(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebV2APIApiFp(configuration).fetchUserInfoApiV1XiaohongshuWebV2FetchUserInfoGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 ### 参数: - user_id: 用户ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user info ### Parameters: - user_id: User ID ### Return: - User info  # [示例/Example] user_id = \"5e3a8ee700000000010070c6\"
         * @summary 获取用户信息/Fetch user info
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1XiaohongshuWebV2FetchUserInfoGet_8(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebV2APIApiFp(configuration).fetchUserInfoApiV1XiaohongshuWebV2FetchUserInfoGet_8(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * XiaohongshuWebV2APIApi - interface
 * @export
 * @interface XiaohongshuWebV2APIApi
 */
export interface XiaohongshuWebV2APIApiInterface {
    /**
     * # [中文] ### 用途: - 获取推荐笔记 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 ### 返回: - 推荐笔记  # [English] ### Purpose: - Get feed notes ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - Feed notes  # [示例/Example] note_id = \"66c9cc31000000001f03a4bc\"
     * @summary 获取推荐笔记/Fetch feed notes
     * @param {string} noteId 笔记ID/Note ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApiInterface
     */
    fetchFeedNotesApiV1XiaohongshuWebV2FetchFeedNotesGet(noteId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取推荐笔记 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 ### 返回: - 推荐笔记  # [English] ### Purpose: - Get feed notes ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - Feed notes  # [示例/Example] note_id = \"66c9cc31000000001f03a4bc\"
     * @summary 获取推荐笔记/Fetch feed notes
     * @param {string} noteId 笔记ID/Note ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApiInterface
     */
    fetchFeedNotesApiV1XiaohongshuWebV2FetchFeedNotesGet_1(noteId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户粉丝列表 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get follower list ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Follower list  # [示例/Example] user_id = \"604a28420000000001005211\" cursor = \"\"
     * @summary 获取用户粉丝列表/Fetch follower list
     * @param {string} userId 用户ID/User ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApiInterface
     */
    fetchFollowerListApiV1XiaohongshuWebV2FetchFollowerListGet(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户粉丝列表 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get follower list ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Follower list  # [示例/Example] user_id = \"604a28420000000001005211\" cursor = \"\"
     * @summary 获取用户粉丝列表/Fetch follower list
     * @param {string} userId 用户ID/User ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApiInterface
     */
    fetchFollowerListApiV1XiaohongshuWebV2FetchFollowerListGet_2(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户关注列表 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get following list ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Following list  # [示例/Example] user_id = \"604a28420000000001005211\" cursor = \"\"
     * @summary 获取用户关注列表/Fetch following list
     * @param {string} userId 用户ID/User ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApiInterface
     */
    fetchFollowingListApiV1XiaohongshuWebV2FetchFollowingListGet(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户关注列表 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get following list ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Following list  # [示例/Example] user_id = \"604a28420000000001005211\" cursor = \"\"
     * @summary 获取用户关注列表/Fetch following list
     * @param {string} userId 用户ID/User ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApiInterface
     */
    fetchFollowingListApiV1XiaohongshuWebV2FetchFollowingListGet_3(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取主页笔记 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 主页笔记  # [English] ### Purpose: - Get home notes ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Home notes  # [示例/Example] user_id = \"5f3e0d00000000001f03a4bc\" cursor = \"\"
     * @summary 获取主页笔记/Fetch home notes
     * @param {string} userId 用户ID/User ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApiInterface
     */
    fetchHomeNotesApiV1XiaohongshuWebV2FetchHomeNotesGet(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取主页笔记 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 主页笔记  # [English] ### Purpose: - Get home notes ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Home notes  # [示例/Example] user_id = \"5f3e0d00000000001f03a4bc\" cursor = \"\"
     * @summary 获取主页笔记/Fetch home notes
     * @param {string} userId 用户ID/User ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApiInterface
     */
    fetchHomeNotesApiV1XiaohongshuWebV2FetchHomeNotesGet_4(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取笔记评论 ### 参数: - note_id: 笔记ID - cursor: 游标 ### 返回: - 笔记评论  # [English] ### Purpose: - Get note comments ### Parameters: - note_id: Note ID - cursor: Cursor ### Return: - Note comments  # [示例/Example] note_id = \"651ccaa9000000001f03d7f7\" cursor = \"\"
     * @summary 获取笔记评论/Fetch note comments
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApiInterface
     */
    fetchNoteCommentsApiV1XiaohongshuWebV2FetchNoteCommentsGet(noteId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取笔记评论 ### 参数: - note_id: 笔记ID - cursor: 游标 ### 返回: - 笔记评论  # [English] ### Purpose: - Get note comments ### Parameters: - note_id: Note ID - cursor: Cursor ### Return: - Note comments  # [示例/Example] note_id = \"651ccaa9000000001f03d7f7\" cursor = \"\"
     * @summary 获取笔记评论/Fetch note comments
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApiInterface
     */
    fetchNoteCommentsApiV1XiaohongshuWebV2FetchNoteCommentsGet_5(noteId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取搜索笔记 ### 参数: - keywords：搜索关键词 - sort_type：排序方式     - general：综合     - time_descending：最新     - popularity_descending：最热 - note_type: 笔记类型     - 0：全部     - 1：视频     - 2：图文 ### 返回: - 搜索笔记  # [English] ### Purpose: - Get search notes ### Parameters: - keywords: Search keywords - sort_type: Sort type     - general: General     - time_descending: Latest     - popularity_descending: Popular - note_type: Note type     - 0: All     - 1: Video     - 2: Note ### Return: - Search notes  # [示例/Example] keywords = \"口红\" page = 1 sort_type = \"general\" note_type = \"1\"
     * @summary 获取搜索笔记/Fetch search notes
     * @param {string} keywords 搜索关键词/Search keywords
     * @param {number} [page] 页码/Page number
     * @param {string} [sortType] 排序方式/Sort type
     * @param {string} [noteType] 笔记类型/Note type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApiInterface
     */
    fetchSearchNotesApiV1XiaohongshuWebV2FetchSearchNotesGet(keywords: string, page?: number, sortType?: string, noteType?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取搜索笔记 ### 参数: - keywords：搜索关键词 - sort_type：排序方式     - general：综合     - time_descending：最新     - popularity_descending：最热 - note_type: 笔记类型     - 0：全部     - 1：视频     - 2：图文 ### 返回: - 搜索笔记  # [English] ### Purpose: - Get search notes ### Parameters: - keywords: Search keywords - sort_type: Sort type     - general: General     - time_descending: Latest     - popularity_descending: Popular - note_type: Note type     - 0: All     - 1: Video     - 2: Note ### Return: - Search notes  # [示例/Example] keywords = \"口红\" page = 1 sort_type = \"general\" note_type = \"1\"
     * @summary 获取搜索笔记/Fetch search notes
     * @param {string} keywords 搜索关键词/Search keywords
     * @param {number} [page] 页码/Page number
     * @param {string} [sortType] 排序方式/Sort type
     * @param {string} [noteType] 笔记类型/Note type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApiInterface
     */
    fetchSearchNotesApiV1XiaohongshuWebV2FetchSearchNotesGet_6(keywords: string, page?: number, sortType?: string, noteType?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取子评论 ### 参数: - note_id: 笔记ID - comment_id: 评论ID - cursor: 游标 ### 返回: - 子评论  # [English] ### Purpose: - Get sub comments ### Parameters: - note_id: Note ID - comment_id: Comment ID - cursor: Cursor ### Return: - Sub comments  # [示例/Example] note_id = \"673c894c0000000007033f92\" comment_id = \"673ecdfc000000001503bf8b\" cursor = \"\"
     * @summary 获取子评论/Fetch sub comments
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} commentId 评论ID/Comment ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApiInterface
     */
    fetchSubCommentsApiV1XiaohongshuWebV2FetchSubCommentsGet(noteId: string, commentId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取子评论 ### 参数: - note_id: 笔记ID - comment_id: 评论ID - cursor: 游标 ### 返回: - 子评论  # [English] ### Purpose: - Get sub comments ### Parameters: - note_id: Note ID - comment_id: Comment ID - cursor: Cursor ### Return: - Sub comments  # [示例/Example] note_id = \"673c894c0000000007033f92\" comment_id = \"673ecdfc000000001503bf8b\" cursor = \"\"
     * @summary 获取子评论/Fetch sub comments
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} commentId 评论ID/Comment ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApiInterface
     */
    fetchSubCommentsApiV1XiaohongshuWebV2FetchSubCommentsGet_7(noteId: string, commentId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户信息 ### 参数: - user_id: 用户ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user info ### Parameters: - user_id: User ID ### Return: - User info  # [示例/Example] user_id = \"5e3a8ee700000000010070c6\"
     * @summary 获取用户信息/Fetch user info
     * @param {string} userId 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApiInterface
     */
    fetchUserInfoApiV1XiaohongshuWebV2FetchUserInfoGet(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户信息 ### 参数: - user_id: 用户ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user info ### Parameters: - user_id: User ID ### Return: - User info  # [示例/Example] user_id = \"5e3a8ee700000000010070c6\"
     * @summary 获取用户信息/Fetch user info
     * @param {string} userId 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApiInterface
     */
    fetchUserInfoApiV1XiaohongshuWebV2FetchUserInfoGet_8(userId: string, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * XiaohongshuWebV2APIApi - object-oriented interface
 * @export
 * @class XiaohongshuWebV2APIApi
 * @extends {BaseAPI}
 */
export class XiaohongshuWebV2APIApi extends BaseAPI implements XiaohongshuWebV2APIApiInterface {
    /**
     * # [中文] ### 用途: - 获取推荐笔记 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 ### 返回: - 推荐笔记  # [English] ### Purpose: - Get feed notes ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - Feed notes  # [示例/Example] note_id = \"66c9cc31000000001f03a4bc\"
     * @summary 获取推荐笔记/Fetch feed notes
     * @param {string} noteId 笔记ID/Note ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApi
     */
    public fetchFeedNotesApiV1XiaohongshuWebV2FetchFeedNotesGet(noteId: string, options?: any) {
        return XiaohongshuWebV2APIApiFp(this.configuration).fetchFeedNotesApiV1XiaohongshuWebV2FetchFeedNotesGet(noteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取推荐笔记 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 ### 返回: - 推荐笔记  # [English] ### Purpose: - Get feed notes ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - Feed notes  # [示例/Example] note_id = \"66c9cc31000000001f03a4bc\"
     * @summary 获取推荐笔记/Fetch feed notes
     * @param {string} noteId 笔记ID/Note ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApi
     */
    public fetchFeedNotesApiV1XiaohongshuWebV2FetchFeedNotesGet_1(noteId: string, options?: any) {
        return XiaohongshuWebV2APIApiFp(this.configuration).fetchFeedNotesApiV1XiaohongshuWebV2FetchFeedNotesGet_1(noteId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户粉丝列表 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get follower list ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Follower list  # [示例/Example] user_id = \"604a28420000000001005211\" cursor = \"\"
     * @summary 获取用户粉丝列表/Fetch follower list
     * @param {string} userId 用户ID/User ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApi
     */
    public fetchFollowerListApiV1XiaohongshuWebV2FetchFollowerListGet(userId: string, cursor?: string, options?: any) {
        return XiaohongshuWebV2APIApiFp(this.configuration).fetchFollowerListApiV1XiaohongshuWebV2FetchFollowerListGet(userId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户粉丝列表 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get follower list ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Follower list  # [示例/Example] user_id = \"604a28420000000001005211\" cursor = \"\"
     * @summary 获取用户粉丝列表/Fetch follower list
     * @param {string} userId 用户ID/User ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApi
     */
    public fetchFollowerListApiV1XiaohongshuWebV2FetchFollowerListGet_2(userId: string, cursor?: string, options?: any) {
        return XiaohongshuWebV2APIApiFp(this.configuration).fetchFollowerListApiV1XiaohongshuWebV2FetchFollowerListGet_2(userId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户关注列表 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get following list ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Following list  # [示例/Example] user_id = \"604a28420000000001005211\" cursor = \"\"
     * @summary 获取用户关注列表/Fetch following list
     * @param {string} userId 用户ID/User ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApi
     */
    public fetchFollowingListApiV1XiaohongshuWebV2FetchFollowingListGet(userId: string, cursor?: string, options?: any) {
        return XiaohongshuWebV2APIApiFp(this.configuration).fetchFollowingListApiV1XiaohongshuWebV2FetchFollowingListGet(userId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户关注列表 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get following list ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Following list  # [示例/Example] user_id = \"604a28420000000001005211\" cursor = \"\"
     * @summary 获取用户关注列表/Fetch following list
     * @param {string} userId 用户ID/User ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApi
     */
    public fetchFollowingListApiV1XiaohongshuWebV2FetchFollowingListGet_3(userId: string, cursor?: string, options?: any) {
        return XiaohongshuWebV2APIApiFp(this.configuration).fetchFollowingListApiV1XiaohongshuWebV2FetchFollowingListGet_3(userId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取主页笔记 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 主页笔记  # [English] ### Purpose: - Get home notes ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Home notes  # [示例/Example] user_id = \"5f3e0d00000000001f03a4bc\" cursor = \"\"
     * @summary 获取主页笔记/Fetch home notes
     * @param {string} userId 用户ID/User ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApi
     */
    public fetchHomeNotesApiV1XiaohongshuWebV2FetchHomeNotesGet(userId: string, cursor?: string, options?: any) {
        return XiaohongshuWebV2APIApiFp(this.configuration).fetchHomeNotesApiV1XiaohongshuWebV2FetchHomeNotesGet(userId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取主页笔记 ### 参数: - user_id: 用户ID - cursor: 游标 ### 返回: - 主页笔记  # [English] ### Purpose: - Get home notes ### Parameters: - user_id: User ID - cursor: Cursor ### Return: - Home notes  # [示例/Example] user_id = \"5f3e0d00000000001f03a4bc\" cursor = \"\"
     * @summary 获取主页笔记/Fetch home notes
     * @param {string} userId 用户ID/User ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApi
     */
    public fetchHomeNotesApiV1XiaohongshuWebV2FetchHomeNotesGet_4(userId: string, cursor?: string, options?: any) {
        return XiaohongshuWebV2APIApiFp(this.configuration).fetchHomeNotesApiV1XiaohongshuWebV2FetchHomeNotesGet_4(userId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取笔记评论 ### 参数: - note_id: 笔记ID - cursor: 游标 ### 返回: - 笔记评论  # [English] ### Purpose: - Get note comments ### Parameters: - note_id: Note ID - cursor: Cursor ### Return: - Note comments  # [示例/Example] note_id = \"651ccaa9000000001f03d7f7\" cursor = \"\"
     * @summary 获取笔记评论/Fetch note comments
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApi
     */
    public fetchNoteCommentsApiV1XiaohongshuWebV2FetchNoteCommentsGet(noteId: string, cursor?: string, options?: any) {
        return XiaohongshuWebV2APIApiFp(this.configuration).fetchNoteCommentsApiV1XiaohongshuWebV2FetchNoteCommentsGet(noteId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取笔记评论 ### 参数: - note_id: 笔记ID - cursor: 游标 ### 返回: - 笔记评论  # [English] ### Purpose: - Get note comments ### Parameters: - note_id: Note ID - cursor: Cursor ### Return: - Note comments  # [示例/Example] note_id = \"651ccaa9000000001f03d7f7\" cursor = \"\"
     * @summary 获取笔记评论/Fetch note comments
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApi
     */
    public fetchNoteCommentsApiV1XiaohongshuWebV2FetchNoteCommentsGet_5(noteId: string, cursor?: string, options?: any) {
        return XiaohongshuWebV2APIApiFp(this.configuration).fetchNoteCommentsApiV1XiaohongshuWebV2FetchNoteCommentsGet_5(noteId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取搜索笔记 ### 参数: - keywords：搜索关键词 - sort_type：排序方式     - general：综合     - time_descending：最新     - popularity_descending：最热 - note_type: 笔记类型     - 0：全部     - 1：视频     - 2：图文 ### 返回: - 搜索笔记  # [English] ### Purpose: - Get search notes ### Parameters: - keywords: Search keywords - sort_type: Sort type     - general: General     - time_descending: Latest     - popularity_descending: Popular - note_type: Note type     - 0: All     - 1: Video     - 2: Note ### Return: - Search notes  # [示例/Example] keywords = \"口红\" page = 1 sort_type = \"general\" note_type = \"1\"
     * @summary 获取搜索笔记/Fetch search notes
     * @param {string} keywords 搜索关键词/Search keywords
     * @param {number} [page] 页码/Page number
     * @param {string} [sortType] 排序方式/Sort type
     * @param {string} [noteType] 笔记类型/Note type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApi
     */
    public fetchSearchNotesApiV1XiaohongshuWebV2FetchSearchNotesGet(keywords: string, page?: number, sortType?: string, noteType?: string, options?: any) {
        return XiaohongshuWebV2APIApiFp(this.configuration).fetchSearchNotesApiV1XiaohongshuWebV2FetchSearchNotesGet(keywords, page, sortType, noteType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取搜索笔记 ### 参数: - keywords：搜索关键词 - sort_type：排序方式     - general：综合     - time_descending：最新     - popularity_descending：最热 - note_type: 笔记类型     - 0：全部     - 1：视频     - 2：图文 ### 返回: - 搜索笔记  # [English] ### Purpose: - Get search notes ### Parameters: - keywords: Search keywords - sort_type: Sort type     - general: General     - time_descending: Latest     - popularity_descending: Popular - note_type: Note type     - 0: All     - 1: Video     - 2: Note ### Return: - Search notes  # [示例/Example] keywords = \"口红\" page = 1 sort_type = \"general\" note_type = \"1\"
     * @summary 获取搜索笔记/Fetch search notes
     * @param {string} keywords 搜索关键词/Search keywords
     * @param {number} [page] 页码/Page number
     * @param {string} [sortType] 排序方式/Sort type
     * @param {string} [noteType] 笔记类型/Note type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApi
     */
    public fetchSearchNotesApiV1XiaohongshuWebV2FetchSearchNotesGet_6(keywords: string, page?: number, sortType?: string, noteType?: string, options?: any) {
        return XiaohongshuWebV2APIApiFp(this.configuration).fetchSearchNotesApiV1XiaohongshuWebV2FetchSearchNotesGet_6(keywords, page, sortType, noteType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取子评论 ### 参数: - note_id: 笔记ID - comment_id: 评论ID - cursor: 游标 ### 返回: - 子评论  # [English] ### Purpose: - Get sub comments ### Parameters: - note_id: Note ID - comment_id: Comment ID - cursor: Cursor ### Return: - Sub comments  # [示例/Example] note_id = \"673c894c0000000007033f92\" comment_id = \"673ecdfc000000001503bf8b\" cursor = \"\"
     * @summary 获取子评论/Fetch sub comments
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} commentId 评论ID/Comment ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApi
     */
    public fetchSubCommentsApiV1XiaohongshuWebV2FetchSubCommentsGet(noteId: string, commentId: string, cursor?: string, options?: any) {
        return XiaohongshuWebV2APIApiFp(this.configuration).fetchSubCommentsApiV1XiaohongshuWebV2FetchSubCommentsGet(noteId, commentId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取子评论 ### 参数: - note_id: 笔记ID - comment_id: 评论ID - cursor: 游标 ### 返回: - 子评论  # [English] ### Purpose: - Get sub comments ### Parameters: - note_id: Note ID - comment_id: Comment ID - cursor: Cursor ### Return: - Sub comments  # [示例/Example] note_id = \"673c894c0000000007033f92\" comment_id = \"673ecdfc000000001503bf8b\" cursor = \"\"
     * @summary 获取子评论/Fetch sub comments
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} commentId 评论ID/Comment ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApi
     */
    public fetchSubCommentsApiV1XiaohongshuWebV2FetchSubCommentsGet_7(noteId: string, commentId: string, cursor?: string, options?: any) {
        return XiaohongshuWebV2APIApiFp(this.configuration).fetchSubCommentsApiV1XiaohongshuWebV2FetchSubCommentsGet_7(noteId, commentId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户信息 ### 参数: - user_id: 用户ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user info ### Parameters: - user_id: User ID ### Return: - User info  # [示例/Example] user_id = \"5e3a8ee700000000010070c6\"
     * @summary 获取用户信息/Fetch user info
     * @param {string} userId 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApi
     */
    public fetchUserInfoApiV1XiaohongshuWebV2FetchUserInfoGet(userId: string, options?: any) {
        return XiaohongshuWebV2APIApiFp(this.configuration).fetchUserInfoApiV1XiaohongshuWebV2FetchUserInfoGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户信息 ### 参数: - user_id: 用户ID ### 返回: - 用户信息  # [English] ### Purpose: - Get user info ### Parameters: - user_id: User ID ### Return: - User info  # [示例/Example] user_id = \"5e3a8ee700000000010070c6\"
     * @summary 获取用户信息/Fetch user info
     * @param {string} userId 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebV2APIApi
     */
    public fetchUserInfoApiV1XiaohongshuWebV2FetchUserInfoGet_8(userId: string, options?: any) {
        return XiaohongshuWebV2APIApiFp(this.configuration).fetchUserInfoApiV1XiaohongshuWebV2FetchUserInfoGet_8(userId, options).then((request) => request(this.axios, this.basePath));
    }

}
