// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
/**
 * InstagramWebAndAPPAPIApi - axios parameter creator
 * @export
 */
export const InstagramWebAndAPPAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" comment_id = \"18033049183828491\" pagination_token = None
         * @summary 根据评论ID获取评论回复数据/Get comment replies by comment ID
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {string} commentId Instagram评论ID/Instagram comment ID
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet: async (url: string, commentId: string, paginationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_comment_replies_by_comment_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['pagination_token'] = paginationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" comment_id = \"18033049183828491\" pagination_token = None
         * @summary 根据评论ID获取评论回复数据/Get comment replies by comment ID
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {string} commentId Instagram评论ID/Instagram comment ID
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_1: async (url: string, commentId: string, paginationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_1.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_1.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_comment_replies_by_comment_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['pagination_token'] = paginationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"
         * @summary 综合搜索/Search all by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet: async (keyword: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_global_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"
         * @summary 综合搜索/Search all by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_2: async (keyword: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_2.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_global_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - pagination_token: 翻页游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 - feed_type: Feed类型     - top: 热门（默认）     - recent: 最新     - clips: 快拍 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - pagination_token: Pagination token, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. - feed_type: Feed type     - top: Top (default)     - recent: Recent (sort by time)     - clips: Clips (show only Reels) ### Return: - Hashtag posts  # [示例/Example] keyword = \"GitHub\" pagination_token = None
         * @summary 根据关键词获取话题帖子/Get hashtag posts by query
         * @param {string} keyword 关键词/Query
         * @param {string} [paginationToken] 翻页令牌/Pagination token
         * @param {string} [feedType] Feed类型/Feed type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet: async (keyword: string, paginationToken?: string, feedType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_hashtag_posts_by_keyword`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['pagination_token'] = paginationToken;
            }

            if (feedType !== undefined) {
                localVarQueryParameter['feed_type'] = feedType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - pagination_token: 翻页游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 - feed_type: Feed类型     - top: 热门（默认）     - recent: 最新     - clips: 快拍 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - pagination_token: Pagination token, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. - feed_type: Feed type     - top: Top (default)     - recent: Recent (sort by time)     - clips: Clips (show only Reels) ### Return: - Hashtag posts  # [示例/Example] keyword = \"GitHub\" pagination_token = None
         * @summary 根据关键词获取话题帖子/Get hashtag posts by query
         * @param {string} keyword 关键词/Query
         * @param {string} [paginationToken] 翻页令牌/Pagination token
         * @param {string} [feedType] Feed类型/Feed type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_3: async (keyword: string, paginationToken?: string, feedType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_3.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_hashtag_posts_by_keyword`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['pagination_token'] = paginationToken;
            }

            if (feedType !== undefined) {
                localVarQueryParameter['feed_type'] = feedType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id = \"17871373118984285\"
         * @summary 根据highlights ID获取highlight数据/Get highlights by highlight ID
         * @param {string} highlightId Instagram highlight ID/Instagram highlight ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet: async (highlightId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'highlightId' is not null or undefined
            if (highlightId === null || highlightId === undefined) {
                throw new RequiredError('highlightId','Required parameter highlightId was null or undefined when calling fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_highlights_by_highlight_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (highlightId !== undefined) {
                localVarQueryParameter['highlight_id'] = highlightId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id = \"17871373118984285\"
         * @summary 根据highlights ID获取highlight数据/Get highlights by highlight ID
         * @param {string} highlightId Instagram highlight ID/Instagram highlight ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_4: async (highlightId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'highlightId' is not null or undefined
            if (highlightId === null || highlightId === undefined) {
                throw new RequiredError('highlightId','Required parameter highlightId was null or undefined when calling fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_4.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_highlights_by_highlight_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (highlightId !== undefined) {
                localVarQueryParameter['highlight_id'] = highlightId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id = \"115412053922647\" max_id = None
         * @summary 根据地点ID获取地点相关的帖子/Get location posts by location ID
         * @param {string} locationId Instagram地点ID/Instagram location ID
         * @param {string} [maxId] 最大ID/Max ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet: async (locationId: string, maxId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId','Required parameter locationId was null or undefined when calling fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_location_posts_by_location_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (maxId !== undefined) {
                localVarQueryParameter['max_id'] = maxId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id = \"115412053922647\" max_id = None
         * @summary 根据地点ID获取地点相关的帖子/Get location posts by location ID
         * @param {string} locationId Instagram地点ID/Instagram location ID
         * @param {string} [maxId] 最大ID/Max ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_5: async (locationId: string, maxId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'locationId' is not null or undefined
            if (locationId === null || locationId === undefined) {
                throw new RequiredError('locationId','Required parameter locationId was null or undefined when calling fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_5.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_location_posts_by_location_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (locationId !== undefined) {
                localVarQueryParameter['location_id'] = locationId;
            }

            if (maxId !== undefined) {
                localVarQueryParameter['max_id'] = maxId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id = \"841270117005292\"
         * @summary 根据音乐ID获取音乐数据/Get music data by music ID
         * @param {string} musicId Instagram音乐ID/Instagram music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet: async (musicId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_music_info_by_music_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id = \"841270117005292\"
         * @summary 根据音乐ID获取音乐数据/Get music data by music ID
         * @param {string} musicId Instagram音乐ID/Instagram music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_6: async (musicId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_6.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_music_info_by_music_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" pagination_token = None
         * @summary 根据URL获取帖子评论数据/Get post comments by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet: async (url: string, paginationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_post_comments_by_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['pagination_token'] = paginationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" pagination_token = None
         * @summary 根据URL获取帖子评论数据/Get post comments by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_7: async (url: string, paginationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_7.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_post_comments_by_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['pagination_token'] = paginationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id = \"3369328379222099122\"
         * @summary 根据帖子ID获取帖子数据/Get post data by post ID
         * @param {string} postId Instagram帖子ID/Instagram post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet: async (postId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            if (postId === null || postId === undefined) {
                throw new RequiredError('postId','Required parameter postId was null or undefined when calling fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_post_info_by_post_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (postId !== undefined) {
                localVarQueryParameter['post_id'] = postId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id = \"3369328379222099122\"
         * @summary 根据帖子ID获取帖子数据/Get post data by post ID
         * @param {string} postId Instagram帖子ID/Instagram post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_8: async (postId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postId' is not null or undefined
            if (postId === null || postId === undefined) {
                throw new RequiredError('postId','Required parameter postId was null or undefined when calling fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_8.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_post_info_by_post_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (postId !== undefined) {
                localVarQueryParameter['post_id'] = postId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"
         * @summary 根据URL获取帖子数据/Get post data by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_post_info_by_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"
         * @summary 根据URL获取帖子数据/Get post data by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_9: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_9.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_post_info_by_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\"
         * @summary 根据URL获取帖子点赞数据/Get post likes by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_post_likes_by_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\"
         * @summary 根据URL获取帖子点赞数据/Get post likes by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_10: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_10.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_post_likes_by_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"
         * @summary 根据帖子URL获取媒体数据/Get media data by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_post_media_by_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"
         * @summary 根据帖子URL获取媒体数据/Get media data by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_11: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_11.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_post_media_by_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取与用户相关的其他用户/Get user related users by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_related_users_by_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取与用户相关的其他用户/Get user related users by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_12: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_12.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_related_users_by_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"
         * @summary 根据关键词搜索话题数据/Search hashtags by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet: async (keyword: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_search_hashtags_by_keyword`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"
         * @summary 根据关键词搜索话题数据/Search hashtags by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_13: async (keyword: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_13.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_search_hashtags_by_keyword`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"ShangHai\"
         * @summary 根据关键词搜索地点数据/Search locations by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet: async (keyword: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_search_locations_by_keyword`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"ShangHai\"
         * @summary 根据关键词搜索地点数据/Search locations by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_14: async (keyword: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_14.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_search_locations_by_keyword`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"instagram\"
         * @summary 根据关键词搜索用户/Search users by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet: async (keyword: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_search_users_by_keyword`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"instagram\"
         * @summary 根据关键词搜索用户/Search users by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_15: async (keyword: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_15.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_search_users_by_keyword`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username = \"daily_fuck_people\"
         * @summary 根据用户名获取相似的账户数据/Get similar accounts by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet: async (username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_similar_accounts_by_username`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username = \"daily_fuck_people\"
         * @summary 根据用户名获取相似的账户数据/Get similar accounts by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_16: async (username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_16.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_similar_accounts_by_username`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取用户数据关于信息/Get user data about by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_about_info_by_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取用户数据关于信息/Get user data about by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_17: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_17.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_about_info_by_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的粉丝数据/Get user followers by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet: async (username: string, paginationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_followers_by_username`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['pagination_token'] = paginationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的粉丝数据/Get user followers by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_18: async (username: string, paginationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_18.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_followers_by_username`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['pagination_token'] = paginationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的正在关注的用户数据/Get user followings by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet: async (username: string, paginationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_following_by_username`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['pagination_token'] = paginationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的正在关注的用户数据/Get user followings by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_19: async (username: string, paginationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_19.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_following_by_username`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['pagination_token'] = paginationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户的highlights数据/Get user highlights by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet: async (username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_highlights_by_username`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户的highlights数据/Get user highlights by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_20: async (username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_20.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_highlights_by_username`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取用户数据/Get user data by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_info_by_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取用户数据/Get user data by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_21: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_21.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_info_by_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取用户数据V2/Get user data by user ID V2
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_info_by_user_id_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取用户数据V2/Get user data by user ID V2
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_22: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_22.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_info_by_user_id_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户数据/Get user data by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet: async (username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_info_by_username`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户数据/Get user data by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_23: async (username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_23.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_info_by_username`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户数据V2/Get user data by username V2
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get: async (username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_info_by_username_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户数据V2/Get user data by username V2
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_24: async (username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_24.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_info_by_username_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户网页接口的个人信息/Get user info by username web API
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet: async (username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_info_by_username_web`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户网页接口的个人信息/Get user info by username web API
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_25: async (username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_25.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_info_by_username_web`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None
         * @summary 根据用户ID获取用户发布的帖子/Get user posts by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {number} [count] 每页数量/Count per page
         * @param {string} [endCursor] 结束游标/End cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet: async (userId: string, count?: number, endCursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_posts_by_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (endCursor !== undefined) {
                localVarQueryParameter['end_cursor'] = endCursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None
         * @summary 根据用户ID获取用户发布的帖子/Get user posts by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {number} [count] 每页数量/Count per page
         * @param {string} [endCursor] 结束游标/End cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_26: async (userId: string, count?: number, endCursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_26.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_posts_by_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (endCursor !== undefined) {
                localVarQueryParameter['end_cursor'] = endCursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id = \"25025320\" count = 12 max_id = None
         * @summary 根据用户ID获取用户发布的快拍/Get user reels by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {number} [count] 每页数量/Count per page
         * @param {string} [maxId] 最大ID/Max ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet: async (userId: string, count?: number, maxId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_reels_by_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (maxId !== undefined) {
                localVarQueryParameter['max_id'] = maxId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id = \"25025320\" count = 12 max_id = None
         * @summary 根据用户ID获取用户发布的快拍/Get user reels by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {number} [count] 每页数量/Count per page
         * @param {string} [maxId] 最大ID/Max ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_27: async (userId: string, count?: number, maxId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_27.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_reels_by_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (maxId !== undefined) {
                localVarQueryParameter['max_id'] = maxId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的Reels数据V2/Get user reels by username V2
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get: async (username: string, paginationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_reels_by_username_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['pagination_token'] = paginationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的Reels数据V2/Get user reels by username V2
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_28: async (username: string, paginationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_28.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_reels_by_username_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['pagination_token'] = paginationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户的Stories数据/Get user stories by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet: async (username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_stories_by_username`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户的Stories数据/Get user stories by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_29: async (username: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_29.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_stories_by_username`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None
         * @summary 根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {number} [count] 每页数量/Count per page
         * @param {string} [endCursor] 结束游标/End cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet: async (userId: string, count?: number, endCursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_tagged_posts_by_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (endCursor !== undefined) {
                localVarQueryParameter['end_cursor'] = endCursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None
         * @summary 根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {number} [count] 每页数量/Count per page
         * @param {string} [endCursor] 结束游标/End cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_30: async (userId: string, count?: number, endCursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_30.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_tagged_posts_by_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (endCursor !== undefined) {
                localVarQueryParameter['end_cursor'] = endCursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的tv_posts数据/Get user tv_posts by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet: async (username: string, paginationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_tv_posts_by_username`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['pagination_token'] = paginationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的tv_posts数据/Get user tv_posts by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_31: async (username: string, paginationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_31.');
            }
            const localVarPath = `/api/v1/instagram/web_app/fetch_user_tv_posts_by_username`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['pagination_token'] = paginationToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InstagramWebAndAPPAPIApi - functional programming interface
 * @export
 */
export const InstagramWebAndAPPAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" comment_id = \"18033049183828491\" pagination_token = None
         * @summary 根据评论ID获取评论回复数据/Get comment replies by comment ID
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {string} commentId Instagram评论ID/Instagram comment ID
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet(url: string, commentId: string, paginationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet(url, commentId, paginationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" comment_id = \"18033049183828491\" pagination_token = None
         * @summary 根据评论ID获取评论回复数据/Get comment replies by comment ID
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {string} commentId Instagram评论ID/Instagram comment ID
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_1(url: string, commentId: string, paginationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_1(url, commentId, paginationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"
         * @summary 综合搜索/Search all by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet(keyword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet(keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"
         * @summary 综合搜索/Search all by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_2(keyword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_2(keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - pagination_token: 翻页游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 - feed_type: Feed类型     - top: 热门（默认）     - recent: 最新     - clips: 快拍 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - pagination_token: Pagination token, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. - feed_type: Feed type     - top: Top (default)     - recent: Recent (sort by time)     - clips: Clips (show only Reels) ### Return: - Hashtag posts  # [示例/Example] keyword = \"GitHub\" pagination_token = None
         * @summary 根据关键词获取话题帖子/Get hashtag posts by query
         * @param {string} keyword 关键词/Query
         * @param {string} [paginationToken] 翻页令牌/Pagination token
         * @param {string} [feedType] Feed类型/Feed type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet(keyword: string, paginationToken?: string, feedType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet(keyword, paginationToken, feedType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - pagination_token: 翻页游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 - feed_type: Feed类型     - top: 热门（默认）     - recent: 最新     - clips: 快拍 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - pagination_token: Pagination token, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. - feed_type: Feed type     - top: Top (default)     - recent: Recent (sort by time)     - clips: Clips (show only Reels) ### Return: - Hashtag posts  # [示例/Example] keyword = \"GitHub\" pagination_token = None
         * @summary 根据关键词获取话题帖子/Get hashtag posts by query
         * @param {string} keyword 关键词/Query
         * @param {string} [paginationToken] 翻页令牌/Pagination token
         * @param {string} [feedType] Feed类型/Feed type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_3(keyword: string, paginationToken?: string, feedType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_3(keyword, paginationToken, feedType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id = \"17871373118984285\"
         * @summary 根据highlights ID获取highlight数据/Get highlights by highlight ID
         * @param {string} highlightId Instagram highlight ID/Instagram highlight ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet(highlightId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet(highlightId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id = \"17871373118984285\"
         * @summary 根据highlights ID获取highlight数据/Get highlights by highlight ID
         * @param {string} highlightId Instagram highlight ID/Instagram highlight ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_4(highlightId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_4(highlightId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id = \"115412053922647\" max_id = None
         * @summary 根据地点ID获取地点相关的帖子/Get location posts by location ID
         * @param {string} locationId Instagram地点ID/Instagram location ID
         * @param {string} [maxId] 最大ID/Max ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet(locationId: string, maxId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet(locationId, maxId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id = \"115412053922647\" max_id = None
         * @summary 根据地点ID获取地点相关的帖子/Get location posts by location ID
         * @param {string} locationId Instagram地点ID/Instagram location ID
         * @param {string} [maxId] 最大ID/Max ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_5(locationId: string, maxId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_5(locationId, maxId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id = \"841270117005292\"
         * @summary 根据音乐ID获取音乐数据/Get music data by music ID
         * @param {string} musicId Instagram音乐ID/Instagram music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet(musicId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet(musicId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id = \"841270117005292\"
         * @summary 根据音乐ID获取音乐数据/Get music data by music ID
         * @param {string} musicId Instagram音乐ID/Instagram music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_6(musicId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_6(musicId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" pagination_token = None
         * @summary 根据URL获取帖子评论数据/Get post comments by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet(url: string, paginationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet(url, paginationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" pagination_token = None
         * @summary 根据URL获取帖子评论数据/Get post comments by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_7(url: string, paginationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_7(url, paginationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id = \"3369328379222099122\"
         * @summary 根据帖子ID获取帖子数据/Get post data by post ID
         * @param {string} postId Instagram帖子ID/Instagram post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet(postId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet(postId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id = \"3369328379222099122\"
         * @summary 根据帖子ID获取帖子数据/Get post data by post ID
         * @param {string} postId Instagram帖子ID/Instagram post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_8(postId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_8(postId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"
         * @summary 根据URL获取帖子数据/Get post data by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"
         * @summary 根据URL获取帖子数据/Get post data by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_9(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_9(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\"
         * @summary 根据URL获取帖子点赞数据/Get post likes by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\"
         * @summary 根据URL获取帖子点赞数据/Get post likes by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_10(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_10(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"
         * @summary 根据帖子URL获取媒体数据/Get media data by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"
         * @summary 根据帖子URL获取媒体数据/Get media data by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_11(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_11(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取与用户相关的其他用户/Get user related users by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取与用户相关的其他用户/Get user related users by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_12(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_12(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"
         * @summary 根据关键词搜索话题数据/Search hashtags by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet(keyword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet(keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"
         * @summary 根据关键词搜索话题数据/Search hashtags by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_13(keyword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_13(keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"ShangHai\"
         * @summary 根据关键词搜索地点数据/Search locations by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet(keyword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet(keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"ShangHai\"
         * @summary 根据关键词搜索地点数据/Search locations by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_14(keyword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_14(keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"instagram\"
         * @summary 根据关键词搜索用户/Search users by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet(keyword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet(keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"instagram\"
         * @summary 根据关键词搜索用户/Search users by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_15(keyword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_15(keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username = \"daily_fuck_people\"
         * @summary 根据用户名获取相似的账户数据/Get similar accounts by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username = \"daily_fuck_people\"
         * @summary 根据用户名获取相似的账户数据/Get similar accounts by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_16(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_16(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取用户数据关于信息/Get user data about by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取用户数据关于信息/Get user data about by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_17(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_17(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的粉丝数据/Get user followers by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet(username: string, paginationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet(username, paginationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的粉丝数据/Get user followers by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_18(username: string, paginationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_18(username, paginationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的正在关注的用户数据/Get user followings by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet(username: string, paginationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet(username, paginationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的正在关注的用户数据/Get user followings by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_19(username: string, paginationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_19(username, paginationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户的highlights数据/Get user highlights by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户的highlights数据/Get user highlights by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_20(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_20(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取用户数据/Get user data by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取用户数据/Get user data by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_21(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_21(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取用户数据V2/Get user data by user ID V2
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取用户数据V2/Get user data by user ID V2
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_22(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_22(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户数据/Get user data by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户数据/Get user data by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_23(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_23(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户数据V2/Get user data by username V2
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户数据V2/Get user data by username V2
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_24(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_24(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户网页接口的个人信息/Get user info by username web API
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户网页接口的个人信息/Get user info by username web API
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_25(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_25(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None
         * @summary 根据用户ID获取用户发布的帖子/Get user posts by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {number} [count] 每页数量/Count per page
         * @param {string} [endCursor] 结束游标/End cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet(userId: string, count?: number, endCursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet(userId, count, endCursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None
         * @summary 根据用户ID获取用户发布的帖子/Get user posts by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {number} [count] 每页数量/Count per page
         * @param {string} [endCursor] 结束游标/End cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_26(userId: string, count?: number, endCursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_26(userId, count, endCursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id = \"25025320\" count = 12 max_id = None
         * @summary 根据用户ID获取用户发布的快拍/Get user reels by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {number} [count] 每页数量/Count per page
         * @param {string} [maxId] 最大ID/Max ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet(userId: string, count?: number, maxId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet(userId, count, maxId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id = \"25025320\" count = 12 max_id = None
         * @summary 根据用户ID获取用户发布的快拍/Get user reels by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {number} [count] 每页数量/Count per page
         * @param {string} [maxId] 最大ID/Max ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_27(userId: string, count?: number, maxId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_27(userId, count, maxId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的Reels数据V2/Get user reels by username V2
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get(username: string, paginationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get(username, paginationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的Reels数据V2/Get user reels by username V2
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_28(username: string, paginationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_28(username, paginationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户的Stories数据/Get user stories by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户的Stories数据/Get user stories by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_29(username: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_29(username, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None
         * @summary 根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {number} [count] 每页数量/Count per page
         * @param {string} [endCursor] 结束游标/End cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet(userId: string, count?: number, endCursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet(userId, count, endCursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None
         * @summary 根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {number} [count] 每页数量/Count per page
         * @param {string} [endCursor] 结束游标/End cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_30(userId: string, count?: number, endCursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_30(userId, count, endCursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的tv_posts数据/Get user tv_posts by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet(username: string, paginationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet(username, paginationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的tv_posts数据/Get user tv_posts by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_31(username: string, paginationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await InstagramWebAndAPPAPIApiAxiosParamCreator(configuration).fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_31(username, paginationToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * InstagramWebAndAPPAPIApi - factory interface
 * @export
 */
export const InstagramWebAndAPPAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" comment_id = \"18033049183828491\" pagination_token = None
         * @summary 根据评论ID获取评论回复数据/Get comment replies by comment ID
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {string} commentId Instagram评论ID/Instagram comment ID
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet(url: string, commentId: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet(url, commentId, paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" comment_id = \"18033049183828491\" pagination_token = None
         * @summary 根据评论ID获取评论回复数据/Get comment replies by comment ID
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {string} commentId Instagram评论ID/Instagram comment ID
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_1(url: string, commentId: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_1(url, commentId, paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"
         * @summary 综合搜索/Search all by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet(keyword: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"
         * @summary 综合搜索/Search all by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_2(keyword: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_2(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - pagination_token: 翻页游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 - feed_type: Feed类型     - top: 热门（默认）     - recent: 最新     - clips: 快拍 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - pagination_token: Pagination token, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. - feed_type: Feed type     - top: Top (default)     - recent: Recent (sort by time)     - clips: Clips (show only Reels) ### Return: - Hashtag posts  # [示例/Example] keyword = \"GitHub\" pagination_token = None
         * @summary 根据关键词获取话题帖子/Get hashtag posts by query
         * @param {string} keyword 关键词/Query
         * @param {string} [paginationToken] 翻页令牌/Pagination token
         * @param {string} [feedType] Feed类型/Feed type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet(keyword: string, paginationToken?: string, feedType?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet(keyword, paginationToken, feedType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - pagination_token: 翻页游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 - feed_type: Feed类型     - top: 热门（默认）     - recent: 最新     - clips: 快拍 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - pagination_token: Pagination token, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. - feed_type: Feed type     - top: Top (default)     - recent: Recent (sort by time)     - clips: Clips (show only Reels) ### Return: - Hashtag posts  # [示例/Example] keyword = \"GitHub\" pagination_token = None
         * @summary 根据关键词获取话题帖子/Get hashtag posts by query
         * @param {string} keyword 关键词/Query
         * @param {string} [paginationToken] 翻页令牌/Pagination token
         * @param {string} [feedType] Feed类型/Feed type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_3(keyword: string, paginationToken?: string, feedType?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_3(keyword, paginationToken, feedType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id = \"17871373118984285\"
         * @summary 根据highlights ID获取highlight数据/Get highlights by highlight ID
         * @param {string} highlightId Instagram highlight ID/Instagram highlight ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet(highlightId: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet(highlightId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id = \"17871373118984285\"
         * @summary 根据highlights ID获取highlight数据/Get highlights by highlight ID
         * @param {string} highlightId Instagram highlight ID/Instagram highlight ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_4(highlightId: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_4(highlightId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id = \"115412053922647\" max_id = None
         * @summary 根据地点ID获取地点相关的帖子/Get location posts by location ID
         * @param {string} locationId Instagram地点ID/Instagram location ID
         * @param {string} [maxId] 最大ID/Max ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet(locationId: string, maxId?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet(locationId, maxId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id = \"115412053922647\" max_id = None
         * @summary 根据地点ID获取地点相关的帖子/Get location posts by location ID
         * @param {string} locationId Instagram地点ID/Instagram location ID
         * @param {string} [maxId] 最大ID/Max ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_5(locationId: string, maxId?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_5(locationId, maxId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id = \"841270117005292\"
         * @summary 根据音乐ID获取音乐数据/Get music data by music ID
         * @param {string} musicId Instagram音乐ID/Instagram music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet(musicId: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet(musicId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id = \"841270117005292\"
         * @summary 根据音乐ID获取音乐数据/Get music data by music ID
         * @param {string} musicId Instagram音乐ID/Instagram music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_6(musicId: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_6(musicId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" pagination_token = None
         * @summary 根据URL获取帖子评论数据/Get post comments by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet(url: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet(url, paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" pagination_token = None
         * @summary 根据URL获取帖子评论数据/Get post comments by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_7(url: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_7(url, paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id = \"3369328379222099122\"
         * @summary 根据帖子ID获取帖子数据/Get post data by post ID
         * @param {string} postId Instagram帖子ID/Instagram post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet(postId: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet(postId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id = \"3369328379222099122\"
         * @summary 根据帖子ID获取帖子数据/Get post data by post ID
         * @param {string} postId Instagram帖子ID/Instagram post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_8(postId: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_8(postId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"
         * @summary 根据URL获取帖子数据/Get post data by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet(url: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"
         * @summary 根据URL获取帖子数据/Get post data by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_9(url: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_9(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\"
         * @summary 根据URL获取帖子点赞数据/Get post likes by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet(url: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\"
         * @summary 根据URL获取帖子点赞数据/Get post likes by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_10(url: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_10(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"
         * @summary 根据帖子URL获取媒体数据/Get media data by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet(url: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"
         * @summary 根据帖子URL获取媒体数据/Get media data by URL
         * @param {string} url Instagram帖子URL/Instagram post URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_11(url: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_11(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取与用户相关的其他用户/Get user related users by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取与用户相关的其他用户/Get user related users by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_12(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_12(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"
         * @summary 根据关键词搜索话题数据/Search hashtags by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet(keyword: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"
         * @summary 根据关键词搜索话题数据/Search hashtags by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_13(keyword: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_13(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"ShangHai\"
         * @summary 根据关键词搜索地点数据/Search locations by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet(keyword: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"ShangHai\"
         * @summary 根据关键词搜索地点数据/Search locations by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_14(keyword: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_14(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"instagram\"
         * @summary 根据关键词搜索用户/Search users by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet(keyword: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"instagram\"
         * @summary 根据关键词搜索用户/Search users by query
         * @param {string} keyword 关键词/Query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_15(keyword: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_15(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username = \"daily_fuck_people\"
         * @summary 根据用户名获取相似的账户数据/Get similar accounts by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet(username: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet(username, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username = \"daily_fuck_people\"
         * @summary 根据用户名获取相似的账户数据/Get similar accounts by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_16(username: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_16(username, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取用户数据关于信息/Get user data about by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取用户数据关于信息/Get user data about by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_17(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_17(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的粉丝数据/Get user followers by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet(username: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet(username, paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的粉丝数据/Get user followers by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_18(username: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_18(username, paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的正在关注的用户数据/Get user followings by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet(username: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet(username, paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的正在关注的用户数据/Get user followings by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页令牌/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_19(username: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_19(username, paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户的highlights数据/Get user highlights by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet(username: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet(username, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户的highlights数据/Get user highlights by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_20(username: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_20(username, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取用户数据/Get user data by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取用户数据/Get user data by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_21(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_21(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取用户数据V2/Get user data by user ID V2
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"
         * @summary 根据用户ID获取用户数据V2/Get user data by user ID V2
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_22(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_22(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户数据/Get user data by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet(username: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet(username, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户数据/Get user data by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_23(username: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_23(username, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户数据V2/Get user data by username V2
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get(username: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get(username, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户数据V2/Get user data by username V2
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_24(username: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_24(username, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户网页接口的个人信息/Get user info by username web API
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet(username: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet(username, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户网页接口的个人信息/Get user info by username web API
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_25(username: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_25(username, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None
         * @summary 根据用户ID获取用户发布的帖子/Get user posts by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {number} [count] 每页数量/Count per page
         * @param {string} [endCursor] 结束游标/End cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet(userId: string, count?: number, endCursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet(userId, count, endCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None
         * @summary 根据用户ID获取用户发布的帖子/Get user posts by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {number} [count] 每页数量/Count per page
         * @param {string} [endCursor] 结束游标/End cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_26(userId: string, count?: number, endCursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_26(userId, count, endCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id = \"25025320\" count = 12 max_id = None
         * @summary 根据用户ID获取用户发布的快拍/Get user reels by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {number} [count] 每页数量/Count per page
         * @param {string} [maxId] 最大ID/Max ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet(userId: string, count?: number, maxId?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet(userId, count, maxId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id = \"25025320\" count = 12 max_id = None
         * @summary 根据用户ID获取用户发布的快拍/Get user reels by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {number} [count] 每页数量/Count per page
         * @param {string} [maxId] 最大ID/Max ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_27(userId: string, count?: number, maxId?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_27(userId, count, maxId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的Reels数据V2/Get user reels by username V2
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get(username: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get(username, paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的Reels数据V2/Get user reels by username V2
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_28(username: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_28(username, paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户的Stories数据/Get user stories by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet(username: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet(username, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username = \"instagram\"
         * @summary 根据用户名获取用户的Stories数据/Get user stories by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_29(username: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_29(username, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None
         * @summary 根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {number} [count] 每页数量/Count per page
         * @param {string} [endCursor] 结束游标/End cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet(userId: string, count?: number, endCursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet(userId, count, endCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None
         * @summary 根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID
         * @param {string} userId Instagram用户ID/Instagram user ID
         * @param {number} [count] 每页数量/Count per page
         * @param {string} [endCursor] 结束游标/End cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_30(userId: string, count?: number, endCursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_30(userId, count, endCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的tv_posts数据/Get user tv_posts by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet(username: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet(username, paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username = \"instagram\" pagination_token = None
         * @summary 根据用户名获取用户的tv_posts数据/Get user tv_posts by username
         * @param {string} username Instagram用户名/Instagram username
         * @param {string} [paginationToken] 分页token/Pagination token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_31(username: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return InstagramWebAndAPPAPIApiFp(configuration).fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_31(username, paginationToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InstagramWebAndAPPAPIApi - interface
 * @export
 * @interface InstagramWebAndAPPAPIApi
 */
export interface InstagramWebAndAPPAPIApiInterface {
    /**
     * # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" comment_id = \"18033049183828491\" pagination_token = None
     * @summary 根据评论ID获取评论回复数据/Get comment replies by comment ID
     * @param {string} url Instagram帖子URL/Instagram post URL
     * @param {string} commentId Instagram评论ID/Instagram comment ID
     * @param {string} [paginationToken] 分页token/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet(url: string, commentId: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" comment_id = \"18033049183828491\" pagination_token = None
     * @summary 根据评论ID获取评论回复数据/Get comment replies by comment ID
     * @param {string} url Instagram帖子URL/Instagram post URL
     * @param {string} commentId Instagram评论ID/Instagram comment ID
     * @param {string} [paginationToken] 分页token/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_1(url: string, commentId: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"
     * @summary 综合搜索/Search all by query
     * @param {string} keyword 关键词/Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet(keyword: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"
     * @summary 综合搜索/Search all by query
     * @param {string} keyword 关键词/Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_2(keyword: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - pagination_token: 翻页游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 - feed_type: Feed类型     - top: 热门（默认）     - recent: 最新     - clips: 快拍 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - pagination_token: Pagination token, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. - feed_type: Feed type     - top: Top (default)     - recent: Recent (sort by time)     - clips: Clips (show only Reels) ### Return: - Hashtag posts  # [示例/Example] keyword = \"GitHub\" pagination_token = None
     * @summary 根据关键词获取话题帖子/Get hashtag posts by query
     * @param {string} keyword 关键词/Query
     * @param {string} [paginationToken] 翻页令牌/Pagination token
     * @param {string} [feedType] Feed类型/Feed type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet(keyword: string, paginationToken?: string, feedType?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - pagination_token: 翻页游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 - feed_type: Feed类型     - top: 热门（默认）     - recent: 最新     - clips: 快拍 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - pagination_token: Pagination token, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. - feed_type: Feed type     - top: Top (default)     - recent: Recent (sort by time)     - clips: Clips (show only Reels) ### Return: - Hashtag posts  # [示例/Example] keyword = \"GitHub\" pagination_token = None
     * @summary 根据关键词获取话题帖子/Get hashtag posts by query
     * @param {string} keyword 关键词/Query
     * @param {string} [paginationToken] 翻页令牌/Pagination token
     * @param {string} [feedType] Feed类型/Feed type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_3(keyword: string, paginationToken?: string, feedType?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id = \"17871373118984285\"
     * @summary 根据highlights ID获取highlight数据/Get highlights by highlight ID
     * @param {string} highlightId Instagram highlight ID/Instagram highlight ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet(highlightId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id = \"17871373118984285\"
     * @summary 根据highlights ID获取highlight数据/Get highlights by highlight ID
     * @param {string} highlightId Instagram highlight ID/Instagram highlight ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_4(highlightId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id = \"115412053922647\" max_id = None
     * @summary 根据地点ID获取地点相关的帖子/Get location posts by location ID
     * @param {string} locationId Instagram地点ID/Instagram location ID
     * @param {string} [maxId] 最大ID/Max ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet(locationId: string, maxId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id = \"115412053922647\" max_id = None
     * @summary 根据地点ID获取地点相关的帖子/Get location posts by location ID
     * @param {string} locationId Instagram地点ID/Instagram location ID
     * @param {string} [maxId] 最大ID/Max ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_5(locationId: string, maxId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id = \"841270117005292\"
     * @summary 根据音乐ID获取音乐数据/Get music data by music ID
     * @param {string} musicId Instagram音乐ID/Instagram music ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet(musicId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id = \"841270117005292\"
     * @summary 根据音乐ID获取音乐数据/Get music data by music ID
     * @param {string} musicId Instagram音乐ID/Instagram music ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_6(musicId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" pagination_token = None
     * @summary 根据URL获取帖子评论数据/Get post comments by URL
     * @param {string} url Instagram帖子URL/Instagram post URL
     * @param {string} [paginationToken] 分页token/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet(url: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" pagination_token = None
     * @summary 根据URL获取帖子评论数据/Get post comments by URL
     * @param {string} url Instagram帖子URL/Instagram post URL
     * @param {string} [paginationToken] 分页token/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_7(url: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id = \"3369328379222099122\"
     * @summary 根据帖子ID获取帖子数据/Get post data by post ID
     * @param {string} postId Instagram帖子ID/Instagram post ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet(postId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id = \"3369328379222099122\"
     * @summary 根据帖子ID获取帖子数据/Get post data by post ID
     * @param {string} postId Instagram帖子ID/Instagram post ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_8(postId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"
     * @summary 根据URL获取帖子数据/Get post data by URL
     * @param {string} url Instagram帖子URL/Instagram post URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"
     * @summary 根据URL获取帖子数据/Get post data by URL
     * @param {string} url Instagram帖子URL/Instagram post URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_9(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\"
     * @summary 根据URL获取帖子点赞数据/Get post likes by URL
     * @param {string} url Instagram帖子URL/Instagram post URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\"
     * @summary 根据URL获取帖子点赞数据/Get post likes by URL
     * @param {string} url Instagram帖子URL/Instagram post URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_10(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"
     * @summary 根据帖子URL获取媒体数据/Get media data by URL
     * @param {string} url Instagram帖子URL/Instagram post URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"
     * @summary 根据帖子URL获取媒体数据/Get media data by URL
     * @param {string} url Instagram帖子URL/Instagram post URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_11(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id = \"25025320\"
     * @summary 根据用户ID获取与用户相关的其他用户/Get user related users by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id = \"25025320\"
     * @summary 根据用户ID获取与用户相关的其他用户/Get user related users by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_12(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"
     * @summary 根据关键词搜索话题数据/Search hashtags by query
     * @param {string} keyword 关键词/Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet(keyword: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"
     * @summary 根据关键词搜索话题数据/Search hashtags by query
     * @param {string} keyword 关键词/Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_13(keyword: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"ShangHai\"
     * @summary 根据关键词搜索地点数据/Search locations by query
     * @param {string} keyword 关键词/Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet(keyword: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"ShangHai\"
     * @summary 根据关键词搜索地点数据/Search locations by query
     * @param {string} keyword 关键词/Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_14(keyword: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"instagram\"
     * @summary 根据关键词搜索用户/Search users by query
     * @param {string} keyword 关键词/Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet(keyword: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"instagram\"
     * @summary 根据关键词搜索用户/Search users by query
     * @param {string} keyword 关键词/Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_15(keyword: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username = \"daily_fuck_people\"
     * @summary 根据用户名获取相似的账户数据/Get similar accounts by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet(username: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username = \"daily_fuck_people\"
     * @summary 根据用户名获取相似的账户数据/Get similar accounts by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_16(username: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id = \"25025320\"
     * @summary 根据用户ID获取用户数据关于信息/Get user data about by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id = \"25025320\"
     * @summary 根据用户ID获取用户数据关于信息/Get user data about by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_17(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username = \"instagram\" pagination_token = None
     * @summary 根据用户名获取用户的粉丝数据/Get user followers by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {string} [paginationToken] 分页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet(username: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username = \"instagram\" pagination_token = None
     * @summary 根据用户名获取用户的粉丝数据/Get user followers by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {string} [paginationToken] 分页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_18(username: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username = \"instagram\" pagination_token = None
     * @summary 根据用户名获取用户的正在关注的用户数据/Get user followings by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {string} [paginationToken] 分页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet(username: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username = \"instagram\" pagination_token = None
     * @summary 根据用户名获取用户的正在关注的用户数据/Get user followings by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {string} [paginationToken] 分页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_19(username: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username = \"instagram\"
     * @summary 根据用户名获取用户的highlights数据/Get user highlights by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet(username: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username = \"instagram\"
     * @summary 根据用户名获取用户的highlights数据/Get user highlights by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_20(username: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"
     * @summary 根据用户ID获取用户数据/Get user data by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"
     * @summary 根据用户ID获取用户数据/Get user data by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_21(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"
     * @summary 根据用户ID获取用户数据V2/Get user data by user ID V2
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"
     * @summary 根据用户ID获取用户数据V2/Get user data by user ID V2
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_22(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"
     * @summary 根据用户名获取用户数据/Get user data by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet(username: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"
     * @summary 根据用户名获取用户数据/Get user data by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_23(username: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"
     * @summary 根据用户名获取用户数据V2/Get user data by username V2
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get(username: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"
     * @summary 根据用户名获取用户数据V2/Get user data by username V2
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_24(username: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username = \"instagram\"
     * @summary 根据用户名获取用户网页接口的个人信息/Get user info by username web API
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet(username: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username = \"instagram\"
     * @summary 根据用户名获取用户网页接口的个人信息/Get user info by username web API
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_25(username: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None
     * @summary 根据用户ID获取用户发布的帖子/Get user posts by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {number} [count] 每页数量/Count per page
     * @param {string} [endCursor] 结束游标/End cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet(userId: string, count?: number, endCursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None
     * @summary 根据用户ID获取用户发布的帖子/Get user posts by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {number} [count] 每页数量/Count per page
     * @param {string} [endCursor] 结束游标/End cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_26(userId: string, count?: number, endCursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id = \"25025320\" count = 12 max_id = None
     * @summary 根据用户ID获取用户发布的快拍/Get user reels by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {number} [count] 每页数量/Count per page
     * @param {string} [maxId] 最大ID/Max ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet(userId: string, count?: number, maxId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id = \"25025320\" count = 12 max_id = None
     * @summary 根据用户ID获取用户发布的快拍/Get user reels by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {number} [count] 每页数量/Count per page
     * @param {string} [maxId] 最大ID/Max ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_27(userId: string, count?: number, maxId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username = \"instagram\" pagination_token = None
     * @summary 根据用户名获取用户的Reels数据V2/Get user reels by username V2
     * @param {string} username Instagram用户名/Instagram username
     * @param {string} [paginationToken] 分页token/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get(username: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username = \"instagram\" pagination_token = None
     * @summary 根据用户名获取用户的Reels数据V2/Get user reels by username V2
     * @param {string} username Instagram用户名/Instagram username
     * @param {string} [paginationToken] 分页token/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_28(username: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username = \"instagram\"
     * @summary 根据用户名获取用户的Stories数据/Get user stories by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet(username: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username = \"instagram\"
     * @summary 根据用户名获取用户的Stories数据/Get user stories by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_29(username: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None
     * @summary 根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {number} [count] 每页数量/Count per page
     * @param {string} [endCursor] 结束游标/End cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet(userId: string, count?: number, endCursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None
     * @summary 根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {number} [count] 每页数量/Count per page
     * @param {string} [endCursor] 结束游标/End cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_30(userId: string, count?: number, endCursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username = \"instagram\" pagination_token = None
     * @summary 根据用户名获取用户的tv_posts数据/Get user tv_posts by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {string} [paginationToken] 分页token/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet(username: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username = \"instagram\" pagination_token = None
     * @summary 根据用户名获取用户的tv_posts数据/Get user tv_posts by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {string} [paginationToken] 分页token/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApiInterface
     */
    fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_31(username: string, paginationToken?: string, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * InstagramWebAndAPPAPIApi - object-oriented interface
 * @export
 * @class InstagramWebAndAPPAPIApi
 * @extends {BaseAPI}
 */
export class InstagramWebAndAPPAPIApi extends BaseAPI implements InstagramWebAndAPPAPIApiInterface {
    /**
     * # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" comment_id = \"18033049183828491\" pagination_token = None
     * @summary 根据评论ID获取评论回复数据/Get comment replies by comment ID
     * @param {string} url Instagram帖子URL/Instagram post URL
     * @param {string} commentId Instagram评论ID/Instagram comment ID
     * @param {string} [paginationToken] 分页token/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet(url: string, commentId: string, paginationToken?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet(url, commentId, paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram评论ID获取评论回复数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - comment_id: Instagram评论ID - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies by Instagram comment ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - comment_id: Instagram comment ID - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Comment replies data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" comment_id = \"18033049183828491\" pagination_token = None
     * @summary 根据评论ID获取评论回复数据/Get comment replies by comment ID
     * @param {string} url Instagram帖子URL/Instagram post URL
     * @param {string} commentId Instagram评论ID/Instagram comment ID
     * @param {string} [paginationToken] 分页token/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_1(url: string, commentId: string, paginationToken?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchCommentRepliesByCommentIdApiV1InstagramWebAppFetchCommentRepliesByCommentIdGet_1(url, commentId, paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"
     * @summary 综合搜索/Search all by query
     * @param {string} keyword 关键词/Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet(keyword: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 综合搜索 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search all by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"
     * @summary 综合搜索/Search all by query
     * @param {string} keyword 关键词/Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_2(keyword: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchGlobalSearchApiV1InstagramWebAppFetchGlobalSearchGet_2(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - pagination_token: 翻页游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 - feed_type: Feed类型     - top: 热门（默认）     - recent: 最新     - clips: 快拍 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - pagination_token: Pagination token, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. - feed_type: Feed type     - top: Top (default)     - recent: Recent (sort by time)     - clips: Clips (show only Reels) ### Return: - Hashtag posts  # [示例/Example] keyword = \"GitHub\" pagination_token = None
     * @summary 根据关键词获取话题帖子/Get hashtag posts by query
     * @param {string} keyword 关键词/Query
     * @param {string} [paginationToken] 翻页令牌/Pagination token
     * @param {string} [feedType] Feed类型/Feed type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet(keyword: string, paginationToken?: string, feedType?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet(keyword, paginationToken, feedType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据关键词获取话题帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 - pagination_token: 翻页游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 - feed_type: Feed类型     - top: 热门（默认）     - recent: 最新     - clips: 快拍 ### 返回: - 话题帖子  # [English] ### Purpose: - Get hashtag posts by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query - pagination_token: Pagination token, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. - feed_type: Feed type     - top: Top (default)     - recent: Recent (sort by time)     - clips: Clips (show only Reels) ### Return: - Hashtag posts  # [示例/Example] keyword = \"GitHub\" pagination_token = None
     * @summary 根据关键词获取话题帖子/Get hashtag posts by query
     * @param {string} keyword 关键词/Query
     * @param {string} [paginationToken] 翻页令牌/Pagination token
     * @param {string} [feedType] Feed类型/Feed type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_3(keyword: string, paginationToken?: string, feedType?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchHashtagPostsByKeywordApiV1InstagramWebAppFetchHashtagPostsByKeywordGet_3(keyword, paginationToken, feedType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id = \"17871373118984285\"
     * @summary 根据highlights ID获取highlight数据/Get highlights by highlight ID
     * @param {string} highlightId Instagram highlight ID/Instagram highlight ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet(highlightId: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet(highlightId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram highlight ID获取highlight数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - highlight_id: Instagram highlight ID ### 返回: - highlight数据  # [English] ### Purpose: - Get highlights by Instagram highlight ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - highlight_id: Instagram highlight ID ### Return: - Highlight data  # [示例/Example] highlight_id = \"17871373118984285\"
     * @summary 根据highlights ID获取highlight数据/Get highlights by highlight ID
     * @param {string} highlightId Instagram highlight ID/Instagram highlight ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_4(highlightId: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchHighlightsByHighlightIdApiV1InstagramWebAppFetchHighlightsByHighlightIdGet_4(highlightId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id = \"115412053922647\" max_id = None
     * @summary 根据地点ID获取地点相关的帖子/Get location posts by location ID
     * @param {string} locationId Instagram地点ID/Instagram location ID
     * @param {string} [maxId] 最大ID/Max ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet(locationId: string, maxId?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet(locationId, maxId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram地点ID获取地点相关的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - location_id: Instagram地点ID - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 地点相关的帖子  # [English] ### Purpose: - Get location posts by Instagram location ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - location_id: Instagram location ID - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - Location posts  # [示例/Example] location_id = \"115412053922647\" max_id = None
     * @summary 根据地点ID获取地点相关的帖子/Get location posts by location ID
     * @param {string} locationId Instagram地点ID/Instagram location ID
     * @param {string} [maxId] 最大ID/Max ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_5(locationId: string, maxId?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchLocationPostsByLocationIdApiV1InstagramWebAppFetchLocationPostsByLocationIdGet_5(locationId, maxId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id = \"841270117005292\"
     * @summary 根据音乐ID获取音乐数据/Get music data by music ID
     * @param {string} musicId Instagram音乐ID/Instagram music ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet(musicId: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet(musicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram音乐ID获取音乐数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - music_id: Instagram音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Get music data by Instagram music ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - music_id: Instagram music ID ### Return: - Music data  # [示例/Example] music_id = \"841270117005292\"
     * @summary 根据音乐ID获取音乐数据/Get music data by music ID
     * @param {string} musicId Instagram音乐ID/Instagram music ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_6(musicId: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchMusicInfoByMusicIdApiV1InstagramWebAppFetchMusicInfoByMusicIdGet_6(musicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" pagination_token = None
     * @summary 根据URL获取帖子评论数据/Get post comments by URL
     * @param {string} url Instagram帖子URL/Instagram post URL
     * @param {string} [paginationToken] 分页token/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet(url: string, paginationToken?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet(url, paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子评论数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 帖子评论数据  # [English] ### Purpose: - Get post comments by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - Post comments data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\" pagination_token = None
     * @summary 根据URL获取帖子评论数据/Get post comments by URL
     * @param {string} url Instagram帖子URL/Instagram post URL
     * @param {string} [paginationToken] 分页token/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_7(url: string, paginationToken?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchPostCommentsByUrlApiV1InstagramWebAppFetchPostCommentsByUrlGet_7(url, paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id = \"3369328379222099122\"
     * @summary 根据帖子ID获取帖子数据/Get post data by post ID
     * @param {string} postId Instagram帖子ID/Instagram post ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet(postId: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet(postId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram帖子ID获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - post_id: Instagram帖子ID ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - post_id: Instagram post ID ### Return: - Post data  # [示例/Example] post_id = \"3369328379222099122\"
     * @summary 根据帖子ID获取帖子数据/Get post data by post ID
     * @param {string} postId Instagram帖子ID/Instagram post ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_8(postId: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchPostInfoByPostIdApiV1InstagramWebAppFetchPostInfoByPostIdGet_8(postId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"
     * @summary 根据URL获取帖子数据/Get post data by URL
     * @param {string} url Instagram帖子URL/Instagram post URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet(url: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子数据  # [English] ### Purpose: - Get post data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"
     * @summary 根据URL获取帖子数据/Get post data by URL
     * @param {string} url Instagram帖子URL/Instagram post URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_9(url: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchPostInfoByUrlApiV1InstagramWebAppFetchPostInfoByUrlGet_9(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\"
     * @summary 根据URL获取帖子点赞数据/Get post likes by URL
     * @param {string} url Instagram帖子URL/Instagram post URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet(url: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram帖子URL获取帖子点赞数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 帖子点赞数据  # [English] ### Purpose: - Get post likes by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Post likes data  # [示例/Example] url = \"https://www.instagram.com/p/C3OqtMeRxrV/\"
     * @summary 根据URL获取帖子点赞数据/Get post likes by URL
     * @param {string} url Instagram帖子URL/Instagram post URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_10(url: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchPostLikesByUrlApiV1InstagramWebAppFetchPostLikesByUrlGet_10(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"
     * @summary 根据帖子URL获取媒体数据/Get media data by URL
     * @param {string} url Instagram帖子URL/Instagram post URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet(url: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram帖子URL获取媒体数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - url: Instagram帖子URL ### 返回: - 媒体数据  # [English] ### Purpose: - Get media data by Instagram post URL - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - url: Instagram post URL ### Return: - Media data  # [示例/Example] url = \"https://www.instagram.com/p/C7CQk83LQSy/\"
     * @summary 根据帖子URL获取媒体数据/Get media data by URL
     * @param {string} url Instagram帖子URL/Instagram post URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_11(url: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchPostMediaByUrlApiV1InstagramWebAppFetchPostMediaByUrlGet_11(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id = \"25025320\"
     * @summary 根据用户ID获取与用户相关的其他用户/Get user related users by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet(userId: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取与用户相关的其他用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 与用户相关的其他用户  # [English] ### Purpose: - Get user related users by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User related users  # [示例/Example] user_id = \"25025320\"
     * @summary 根据用户ID获取与用户相关的其他用户/Get user related users by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_12(userId: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchRelatedUsersByUserIdApiV1InstagramWebAppFetchRelatedUsersByUserIdGet_12(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"
     * @summary 根据关键词搜索话题数据/Search hashtags by query
     * @param {string} keyword 关键词/Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet(keyword: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据关键词搜索话题数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search hashtags by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"GitHub\"
     * @summary 根据关键词搜索话题数据/Search hashtags by query
     * @param {string} keyword 关键词/Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_13(keyword: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchSearchHashtagsByKeywordApiV1InstagramWebAppFetchSearchHashtagsByKeywordGet_13(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"ShangHai\"
     * @summary 根据关键词搜索地点数据/Search locations by query
     * @param {string} keyword 关键词/Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet(keyword: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据关键词搜索地点数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search locations by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"ShangHai\"
     * @summary 根据关键词搜索地点数据/Search locations by query
     * @param {string} keyword 关键词/Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_14(keyword: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchSearchLocationsByKeywordApiV1InstagramWebAppFetchSearchLocationsByKeywordGet_14(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"instagram\"
     * @summary 根据关键词搜索用户/Search users by query
     * @param {string} keyword 关键词/Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet(keyword: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据关键词搜索用户 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - keyword: 关键词 ### 返回: - 搜索结果  # [English] ### Purpose: - Search users by query - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - keyword: Query ### Return: - Search result  # [示例/Example] keyword = \"instagram\"
     * @summary 根据关键词搜索用户/Search users by query
     * @param {string} keyword 关键词/Query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_15(keyword: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchSearchUsersByKeywordApiV1InstagramWebAppFetchSearchUsersByKeywordGet_15(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username = \"daily_fuck_people\"
     * @summary 根据用户名获取相似的账户数据/Get similar accounts by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet(username: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取相似的账户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 相似的账户数据  # [English] ### Purpose: - Get similar accounts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - Similar accounts  # [示例/Example] username = \"daily_fuck_people\"
     * @summary 根据用户名获取相似的账户数据/Get similar accounts by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_16(username: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchSimilarAccountsByUsernameApiV1InstagramWebAppFetchSimilarAccountsByUsernameGet_16(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id = \"25025320\"
     * @summary 根据用户ID获取用户数据关于信息/Get user data about by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet(userId: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据关于信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据关于信息  # [English] ### Purpose: - Get user data about by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data about  # [示例/Example] user_id = \"25025320\"
     * @summary 根据用户ID获取用户数据关于信息/Get user data about by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_17(userId: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserAboutInfoByIdApiV1InstagramWebAppFetchUserAboutInfoByUserIdGet_17(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username = \"instagram\" pagination_token = None
     * @summary 根据用户名获取用户的粉丝数据/Get user followers by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {string} [paginationToken] 分页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet(username: string, paginationToken?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet(username, paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的粉丝数据，只能获取公开账号的粉丝数据，一次最多获取50个粉丝数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的粉丝数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的粉丝数据  # [English] ### Purpose: - Get user followers by Instagram username, can only get the followers data of public accounts, up to 50 followers data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followers data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followers data  # [示例/Example] username = \"instagram\" pagination_token = None
     * @summary 根据用户名获取用户的粉丝数据/Get user followers by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {string} [paginationToken] 分页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_18(username: string, paginationToken?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserFollowersByUsernameApiV1InstagramWebAppFetchUserFollowersByUsernameGet_18(username, paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username = \"instagram\" pagination_token = None
     * @summary 根据用户名获取用户的正在关注的用户数据/Get user followings by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {string} [paginationToken] 分页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet(username: string, paginationToken?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet(username, paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的正在关注的用户数据，只能获取公开账号的正在关注的用户数据，一次最多获取50个正在关注的用户数据。 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 - 为了获取更多的正在关注的用户数据，可以使用返回的pagination_token参数进行分页。 ### 参数: - username: Instagram用户名 - pagination_token: 分页令牌，用于翻页，第一次请求不需要传值，后续请求需要传入上一次请求的返回值。 ### 返回: - 用户的正在关注的用户数据  # [English] ### Purpose: - Get user followings by Instagram username, can only get the followings data of public accounts, up to 50 followings data at a time. - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. - To get more followings data, you can use the returned pagination_token parameter for pagination. ### Parameters: - username: Instagram username - pagination_token: Pagination token, used for pagination, no need to pass value for the first request, pass the return value of the previous request for subsequent requests. ### Return: - User followings data  # [示例/Example] username = \"instagram\" pagination_token = None
     * @summary 根据用户名获取用户的正在关注的用户数据/Get user followings by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {string} [paginationToken] 分页令牌/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_19(username: string, paginationToken?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserFollowingByUsernameApiV1InstagramWebAppFetchUserFollowingByUsernameGet_19(username, paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username = \"instagram\"
     * @summary 根据用户名获取用户的highlights数据/Get user highlights by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet(username: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的highlights数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的highlights数据  # [English] ### Purpose: - Get user highlights by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User highlights data  # [示例/Example] username = \"instagram\"
     * @summary 根据用户名获取用户的highlights数据/Get user highlights by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_20(username: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserHighlightsByUsernameApiV1InstagramWebAppFetchUserHighlightsByUsernameGet_20(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"
     * @summary 根据用户ID获取用户数据/Get user data by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet(userId: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"
     * @summary 根据用户ID获取用户数据/Get user data by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_21(userId: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserInfoByIdApiV1InstagramWebAppFetchUserInfoByUserIdGet_21(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"
     * @summary 根据用户ID获取用户数据V2/Get user data by user ID V2
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get(userId: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID ### Return: - User data  # [示例/Example] user_id = \"25025320\"
     * @summary 根据用户ID获取用户数据V2/Get user data by user ID V2
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_22(userId: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserInfoByIdV2ApiV1InstagramWebAppFetchUserInfoByUserIdV2Get_22(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"
     * @summary 根据用户名获取用户数据/Get user data by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet(username: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"
     * @summary 根据用户名获取用户数据/Get user data by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_23(username: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserInfoByUsernameApiV1InstagramWebAppFetchUserInfoByUsernameGet_23(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"
     * @summary 根据用户名获取用户数据V2/Get user data by username V2
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get(username: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户数据  # [English] ### Purpose: - Get user data by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User data  # [示例/Example] username = \"instagram\"
     * @summary 根据用户名获取用户数据V2/Get user data by username V2
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_24(username: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserInfoByUsernameV2ApiV1InstagramWebAppFetchUserInfoByUsernameV2Get_24(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username = \"instagram\"
     * @summary 根据用户名获取用户网页接口的个人信息/Get user info by username web API
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet(username: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户网页接口的个人信息 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户网页接口的个人信息  # [English] ### Purpose: - Get user info by Instagram username web API - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User info by Instagram username web API  # [示例/Example] username = \"instagram\"
     * @summary 根据用户名获取用户网页接口的个人信息/Get user info by username web API
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_25(username: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserInfoByUsernameWebApiV1InstagramWebAppFetchUserInfoByUsernameWebGet_25(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None
     * @summary 根据用户ID获取用户发布的帖子/Get user posts by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {number} [count] 每页数量/Count per page
     * @param {string} [endCursor] 结束游标/End cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet(userId: string, count?: number, endCursor?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet(userId, count, endCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的帖子  # [English] ### Purpose: - Get user posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None
     * @summary 根据用户ID获取用户发布的帖子/Get user posts by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {number} [count] 每页数量/Count per page
     * @param {string} [endCursor] 结束游标/End cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_26(userId: string, count?: number, endCursor?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserPostsByUserIdApiV1InstagramWebAppFetchUserPostsByUserIdGet_26(userId, count, endCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id = \"25025320\" count = 12 max_id = None
     * @summary 根据用户ID获取用户发布的快拍/Get user reels by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {number} [count] 每页数量/Count per page
     * @param {string} [maxId] 最大ID/Max ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet(userId: string, count?: number, maxId?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet(userId, count, maxId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户发布的快拍 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - max_id: 最大ID，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户发布的快拍  # [English] ### Purpose: - Get user reels by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - max_id: Max ID, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User reels  # [示例/Example] user_id = \"25025320\" count = 12 max_id = None
     * @summary 根据用户ID获取用户发布的快拍/Get user reels by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {number} [count] 每页数量/Count per page
     * @param {string} [maxId] 最大ID/Max ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_27(userId: string, count?: number, maxId?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserReelsByUserIdApiV1InstagramWebAppFetchUserReelsByUserIdGet_27(userId, count, maxId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username = \"instagram\" pagination_token = None
     * @summary 根据用户名获取用户的Reels数据V2/Get user reels by username V2
     * @param {string} username Instagram用户名/Instagram username
     * @param {string} [paginationToken] 分页token/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get(username: string, paginationToken?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get(username, paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的Reels数据V2 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的Reels数据  # [English] ### Purpose: - Get user reels by Instagram username V2 - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User reels data  # [示例/Example] username = \"instagram\" pagination_token = None
     * @summary 根据用户名获取用户的Reels数据V2/Get user reels by username V2
     * @param {string} username Instagram用户名/Instagram username
     * @param {string} [paginationToken] 分页token/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_28(username: string, paginationToken?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserReelsByUsernameV2ApiV1InstagramWebAppFetchUserReelsByUsernameV2Get_28(username, paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username = \"instagram\"
     * @summary 根据用户名获取用户的Stories数据/Get user stories by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet(username: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的Stories数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 ### 返回: - 用户的Stories数据  # [English] ### Purpose: - Get user stories by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username ### Return: - User stories data  # [示例/Example] username = \"instagram\"
     * @summary 根据用户名获取用户的Stories数据/Get user stories by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_29(username: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserStoriesByUsernameApiV1InstagramWebAppFetchUserStoriesByUsernameGet_29(username, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None
     * @summary 根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {number} [count] 每页数量/Count per page
     * @param {string} [endCursor] 结束游标/End cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet(userId: string, count?: number, endCursor?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet(userId, count, endCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户ID获取用户被标记的帖子 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - user_id: Instagram用户ID - count: 每页数量 - end_cursor: 结束游标，用于翻页，第一页不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户被标记的帖子  # [English] ### Purpose: - Get user tagged posts by Instagram user ID - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - user_id: Instagram user ID - count: Count per page - end_cursor: End cursor, used for pagination, no need to pass value for the first page, pass the return value of the previous page for subsequent pages. ### Return: - User tagged posts  # [示例/Example] user_id = \"25025320\" count = 12 end_cursor = None
     * @summary 根据用户ID获取用户被标记的帖子/Get user tagged posts by user ID
     * @param {string} userId Instagram用户ID/Instagram user ID
     * @param {number} [count] 每页数量/Count per page
     * @param {string} [endCursor] 结束游标/End cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_30(userId: string, count?: number, endCursor?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserTaggedPostsByUserIdApiV1InstagramWebAppFetchUserTaggedPostsByUserIdGet_30(userId, count, endCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username = \"instagram\" pagination_token = None
     * @summary 根据用户名获取用户的tv_posts数据/Get user tv_posts by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {string} [paginationToken] 分页token/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet(username: string, paginationToken?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet(username, paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据Instagram用户名获取用户的tv_posts数据 - 由于此接口收到后端代理服务器的影响，请在请求此接口时适当调整timeout参数。 - 建议将timeout设置为60秒，以确保能够获取到数据，大多数情况下，数据获取时间在10秒以内。 ### 参数: - username: Instagram用户名 - pagination_token: 分页token，第一次请求不需要传值，后续页需要传入上一页的返回值。 ### 返回: - 用户的tv_posts数据  # [English] ### Purpose: - Get user tv_posts by Instagram username - Due to the impact of the backend proxy server, please adjust the timeout parameter appropriately when requesting this interface. - It is recommended to set the timeout to 60 seconds to ensure that the data can be obtained. In most cases, the data acquisition time is within 10 seconds. ### Parameters: - username: Instagram username - pagination_token: Pagination token, no need to pass value for the first request, pass the return value of the previous page for subsequent pages. ### Return: - User tv_posts data  # [示例/Example] username = \"instagram\" pagination_token = None
     * @summary 根据用户名获取用户的tv_posts数据/Get user tv_posts by username
     * @param {string} username Instagram用户名/Instagram username
     * @param {string} [paginationToken] 分页token/Pagination token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstagramWebAndAPPAPIApi
     */
    public fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_31(username: string, paginationToken?: string, options?: any) {
        return InstagramWebAndAPPAPIApiFp(this.configuration).fetchUserTvPostsByUsernameApiV1InstagramWebAppFetchUserTvPostsByUsernameGet_31(username, paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

}
