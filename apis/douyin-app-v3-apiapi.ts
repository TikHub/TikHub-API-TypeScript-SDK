// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
/**
 * DouyinAppV3APIApi - axios parameter creator
 * @export
 */
export const DouyinAppV3APIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 根据视频ID来增加作品的播放数 - 该接口默认使用游客Cookie，如果需要使用登录用户的Cookie，请在参数中传入。 - 单一作品每次调用增加1次播放数，请求约 `1000` 次后会被抖音限制，需要等待一段时间（如：2小时后）后再继续调用。 - 该限制是针对作品的，不是针对接口的，在未登录的情况下，使用不同IP的浏览器或在APP中浏览作品，该作品的播放数也不会增加。 - 可以携带抖音网页端的Cookie来请求此接口，但是不保证一定有效，需要自行测试。 - 上述的限制是根据测试结果得出的，具体限制可能会有所不同，仅供参考。 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - cookie: 可选，默认使用游客Cookie ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID - This interface uses guest Cookie by default. If you need to use the Cookie of the logged-in user, please pass it in the parameters. - Each call to a single work increases the number of plays by 1. After about `1000` calls, Douyin will restrict it. You need to wait for a period of time (such as 2 hours) before continuing to call. - This restriction is for the work, not for the interface. When browsing the work without logging in, using different IP browsers or browsing the work in the APP, the number of plays of the work will not increase. - You can carry the Cookie of the Douyin web page to request this interface, but it is not guaranteed to be effective and needs to be tested by yourself. - The above restrictions are based on test results, and the specific restrictions may vary, for reference only. ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - cookie: Optional, use guest Cookie by default ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type = 0 item_id = \"7197598285882789120\" cookie = None
         * @summary 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
         * @param {number} awemeType 作品类型/Video type
         * @param {string} itemId 作品id/Video id
         * @param {string} [cookie] 可选，默认使用游客Cookie/Optional, use guest Cookie by default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideoPlayCountApiV1DouyinAppV3AddVideoPlayCountGet: async (awemeType: number, itemId: string, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeType' is not null or undefined
            if (awemeType === null || awemeType === undefined) {
                throw new RequiredError('awemeType','Required parameter awemeType was null or undefined when calling addVideoPlayCountApiV1DouyinAppV3AddVideoPlayCountGet.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling addVideoPlayCountApiV1DouyinAppV3AddVideoPlayCountGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/add_video_play_count`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeType !== undefined) {
                localVarQueryParameter['aweme_type'] = awemeType;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据视频ID来增加作品的播放数 - 该接口默认使用游客Cookie，如果需要使用登录用户的Cookie，请在参数中传入。 - 单一作品每次调用增加1次播放数，请求约 `1000` 次后会被抖音限制，需要等待一段时间（如：2小时后）后再继续调用。 - 该限制是针对作品的，不是针对接口的，在未登录的情况下，使用不同IP的浏览器或在APP中浏览作品，该作品的播放数也不会增加。 - 可以携带抖音网页端的Cookie来请求此接口，但是不保证一定有效，需要自行测试。 - 上述的限制是根据测试结果得出的，具体限制可能会有所不同，仅供参考。 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - cookie: 可选，默认使用游客Cookie ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID - This interface uses guest Cookie by default. If you need to use the Cookie of the logged-in user, please pass it in the parameters. - Each call to a single work increases the number of plays by 1. After about `1000` calls, Douyin will restrict it. You need to wait for a period of time (such as 2 hours) before continuing to call. - This restriction is for the work, not for the interface. When browsing the work without logging in, using different IP browsers or browsing the work in the APP, the number of plays of the work will not increase. - You can carry the Cookie of the Douyin web page to request this interface, but it is not guaranteed to be effective and needs to be tested by yourself. - The above restrictions are based on test results, and the specific restrictions may vary, for reference only. ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - cookie: Optional, use guest Cookie by default ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type = 0 item_id = \"7197598285882789120\" cookie = None
         * @summary 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
         * @param {number} awemeType 作品类型/Video type
         * @param {string} itemId 作品id/Video id
         * @param {string} [cookie] 可选，默认使用游客Cookie/Optional, use guest Cookie by default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideoPlayCountApiV1DouyinAppV3AddVideoPlayCountGet_1: async (awemeType: number, itemId: string, cookie?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeType' is not null or undefined
            if (awemeType === null || awemeType === undefined) {
                throw new RequiredError('awemeType','Required parameter awemeType was null or undefined when calling addVideoPlayCountApiV1DouyinAppV3AddVideoPlayCountGet_1.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling addVideoPlayCountApiV1DouyinAppV3AddVideoPlayCountGet_1.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/add_video_play_count`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeType !== undefined) {
                localVarQueryParameter['aweme_type'] = awemeType;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (cookie !== undefined) {
                localVarQueryParameter['cookie'] = cookie;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 - content_type: 0:不限 1:视频 2:图片 3:文章 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - content_type: 0: Unlimited 1: Video 2: Picture 3: Article ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" content_type = \"0\"
         * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_general_search_result）/Get comprehensive search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_general_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 时长/Duration
         * @param {string} [contentType] 内容类型/Content type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1DouyinAppV3FetchGeneralSearchResultGet: async (keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, contentType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchGeneralSearchResultApiV1DouyinAppV3FetchGeneralSearchResultGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_general_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }

            if (filterDuration !== undefined) {
                localVarQueryParameter['filter_duration'] = filterDuration;
            }

            if (contentType !== undefined) {
                localVarQueryParameter['content_type'] = contentType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 - content_type: 0:不限 1:视频 2:图片 3:文章 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - content_type: 0: Unlimited 1: Video 2: Picture 3: Article ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" content_type = \"0\"
         * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_general_search_result）/Get comprehensive search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_general_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 时长/Duration
         * @param {string} [contentType] 内容类型/Content type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1DouyinAppV3FetchGeneralSearchResultGet_2: async (keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, contentType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchGeneralSearchResultApiV1DouyinAppV3FetchGeneralSearchResultGet_2.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_general_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }

            if (filterDuration !== undefined) {
                localVarQueryParameter['filter_duration'] = filterDuration;
            }

            if (contentType !== undefined) {
                localVarQueryParameter['content_type'] = contentType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1DouyinAppV3FetchHashtagDetailGet: async (chId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chId' is not null or undefined
            if (chId === null || chId === undefined) {
                throw new RequiredError('chId','Required parameter chId was null or undefined when calling fetchHashtagDetailApiV1DouyinAppV3FetchHashtagDetailGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_hashtag_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (chId !== undefined) {
                localVarQueryParameter['ch_id'] = chId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1DouyinAppV3FetchHashtagDetailGet_3: async (chId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chId' is not null or undefined
            if (chId === null || chId === undefined) {
                throw new RequiredError('chId','Required parameter chId was null or undefined when calling fetchHashtagDetailApiV1DouyinAppV3FetchHashtagDetailGet_3.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_hashtag_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (chId !== undefined) {
                localVarQueryParameter['ch_id'] = chId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_hashtag_search_result）/Get hashtag search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_hashtag_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagSearchResultApiV1DouyinAppV3FetchHashtagSearchResultGet: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchHashtagSearchResultApiV1DouyinAppV3FetchHashtagSearchResultGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_hashtag_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_hashtag_search_result）/Get hashtag search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_hashtag_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagSearchResultApiV1DouyinAppV3FetchHashtagSearchResultGet_4: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchHashtagSearchResultApiV1DouyinAppV3FetchHashtagSearchResultGet_4.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_hashtag_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagVideoListApiV1DouyinAppV3FetchHashtagVideoListGet: async (chId: string, cursor?: number, sortType?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chId' is not null or undefined
            if (chId === null || chId === undefined) {
                throw new RequiredError('chId','Required parameter chId was null or undefined when calling fetchHashtagVideoListApiV1DouyinAppV3FetchHashtagVideoListGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_hashtag_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (chId !== undefined) {
                localVarQueryParameter['ch_id'] = chId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagVideoListApiV1DouyinAppV3FetchHashtagVideoListGet_5: async (chId: string, cursor?: number, sortType?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chId' is not null or undefined
            if (chId === null || chId === undefined) {
                throw new RequiredError('chId','Required parameter chId was null or undefined when calling fetchHashtagVideoListApiV1DouyinAppV3FetchHashtagVideoListGet_5.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_hashtag_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (chId !== undefined) {
                localVarQueryParameter['ch_id'] = chId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
         * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
         * @param {number} categoryId 分类id/Category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchApiV1DouyinAppV3FetchBrandHotSearchListDetailGet: async (categoryId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling fetchHotBrandSearchApiV1DouyinAppV3FetchBrandHotSearchListDetailGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_brand_hot_search_list_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['category_id'] = categoryId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
         * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
         * @param {number} categoryId 分类id/Category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchApiV1DouyinAppV3FetchBrandHotSearchListDetailGet_6: async (categoryId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling fetchHotBrandSearchApiV1DouyinAppV3FetchBrandHotSearchListDetailGet_6.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_brand_hot_search_list_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['category_id'] = categoryId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
         * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchCategoryApiV1DouyinAppV3FetchBrandHotSearchListGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v3/fetch_brand_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
         * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchCategoryApiV1DouyinAppV3FetchBrandHotSearchListGet_7: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v3/fetch_brand_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音热榜数据，包括：     - 热点榜     - 种草榜     - 娱乐榜     - 社会榜     - 挑战榜 ### 参数: - board_type:     - 0: 热点榜（默认）     - 2: 其他榜单，如种草榜等，需要传入对应的board_sub_type参数。 - board_sub_type:     - 空字符串: 热点榜（默认）     - seeding: 种草榜     - 2: 娱乐榜     - 4: 社会榜     - hotspot_challenge: 挑战榜 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data, including:     - Hot search list     - Seeding list     - Entertainment list     - Social list     - Challenge list  ### Parameters: - board_type:     - 0: Hot search list (default)     - 2: Other lists, such as seeding list, etc., need to pass in the corresponding board_sub_type parameter. - board_sub_type:     - Empty string: Hot search list (default)     - seeding: Seeding list     - 2: Entertainment list     - 4: Social list     - hotspot_challenge: Challenge list ### Return: - Hot search list data  # [示例/Example] - 获取热点榜数据     - board_type = 0     - board_sub_type = \"\" - 获取种草榜数据     - board_type = 2     - board_sub_type = \"seeding\"
         * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
         * @param {string} [boardType] 榜单类型/Board type
         * @param {string} [boardSubType] 榜单子类型/Board sub type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchListApiV1DouyinAppV3FetchHotSearchListGet: async (boardType?: string, boardSubType?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v3/fetch_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (boardType !== undefined) {
                localVarQueryParameter['board_type'] = boardType;
            }

            if (boardSubType !== undefined) {
                localVarQueryParameter['board_sub_type'] = boardSubType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音热榜数据，包括：     - 热点榜     - 种草榜     - 娱乐榜     - 社会榜     - 挑战榜 ### 参数: - board_type:     - 0: 热点榜（默认）     - 2: 其他榜单，如种草榜等，需要传入对应的board_sub_type参数。 - board_sub_type:     - 空字符串: 热点榜（默认）     - seeding: 种草榜     - 2: 娱乐榜     - 4: 社会榜     - hotspot_challenge: 挑战榜 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data, including:     - Hot search list     - Seeding list     - Entertainment list     - Social list     - Challenge list  ### Parameters: - board_type:     - 0: Hot search list (default)     - 2: Other lists, such as seeding list, etc., need to pass in the corresponding board_sub_type parameter. - board_sub_type:     - Empty string: Hot search list (default)     - seeding: Seeding list     - 2: Entertainment list     - 4: Social list     - hotspot_challenge: Challenge list ### Return: - Hot search list data  # [示例/Example] - 获取热点榜数据     - board_type = 0     - board_sub_type = \"\" - 获取种草榜数据     - board_type = 2     - board_sub_type = \"seeding\"
         * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
         * @param {string} [boardType] 榜单类型/Board type
         * @param {string} [boardSubType] 榜单子类型/Board sub type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchListApiV1DouyinAppV3FetchHotSearchListGet_8: async (boardType?: string, boardSubType?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v3/fetch_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (boardType !== undefined) {
                localVarQueryParameter['board_type'] = boardType;
            }

            if (boardSubType !== undefined) {
                localVarQueryParameter['board_sub_type'] = boardSubType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
         * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveHotSearchListApiV1DouyinAppV3FetchLiveHotSearchListGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v3/fetch_live_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
         * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveHotSearchListApiV1DouyinAppV3FetchLiveHotSearchListGet_9: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v3/fetch_live_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - cursor: 偏移量，从0开始，每次请求从上次请求返回响应中的cursor中获取。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - cursor: Offset, starting from 0, each request gets from the cursor in the response returned by the last request. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Live search results  # [示例/Example] keyword = \"小米商城\" cursor = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_live_search_result）/Get live search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_live_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [cursor] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveSearchResultApiV1DouyinAppV3FetchLiveSearchResultGet: async (keyword: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchLiveSearchResultApiV1DouyinAppV3FetchLiveSearchResultGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_live_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - cursor: 偏移量，从0开始，每次请求从上次请求返回响应中的cursor中获取。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - cursor: Offset, starting from 0, each request gets from the cursor in the response returned by the last request. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Live search results  # [示例/Example] keyword = \"小米商城\" cursor = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_live_search_result）/Get live search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_live_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [cursor] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveSearchResultApiV1DouyinAppV3FetchLiveSearchResultGet_10: async (keyword: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchLiveSearchResultApiV1DouyinAppV3FetchLiveSearchResultGet_10.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_live_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\"]
         * @summary 批量获取视频信息/Batch Get Video Information
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMultiVideoApiV1DouyinAppV3FetchMultiVideoPost: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v3/fetch_multi_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\"]
         * @summary 批量获取视频信息/Batch Get Video Information
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMultiVideoApiV1DouyinAppV3FetchMultiVideoPost_11: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v3/fetch_multi_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据视频ID获取作品的统计数据，支持多个视频id，一次性最多支持50个视频。 - 抖音大多数接口已经不再返回作品的播放数，只能通过此接口获取。 - 价格为：0.025$一次。 - 可以获取到的统计有：     - 点赞数（digg_count）     - 下载数（download_count）     - 播放数（play_count）     - 分享数（share_count） ### 参数: - aweme_ids: 作品id，支持多个视频id，用逗号隔开即可，不能超过50个，单个也可以，则无需逗号。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistical data of the Post according to the video ID, support multiple video ids, up to 50 videos at a time. - Most of the Douyin interfaces no longer return the number of plays of the Post, and can only be obtained through this interface. - Price: 0.025$ each time. - List of statistics that can be obtained:     - Like count (digg_count)     - Download count (download_count)     - Play count (play_count)     - Share count (share_count) ### Parameters: - aweme_ids: Video id, supports multiple video ids, separated by commas, no more than 50, single is also possible, no need for commas. ### Return: - Post statistics data  # [示例/Example] aweme_ids = \"7448118827402972455,7126745726494821640\"
         * @summary 根据视频ID批量获取作品的统计数据（点赞数、下载数、播放数、分享数）/Get the statistical data of the Post according to the video ID (like count, download count, play count, share count)
         * @param {string} awemeIds 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMultiVideoStatisticsApiV1DouyinAppV3FetchMultiVideoStatisticsGet: async (awemeIds: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeIds' is not null or undefined
            if (awemeIds === null || awemeIds === undefined) {
                throw new RequiredError('awemeIds','Required parameter awemeIds was null or undefined when calling fetchMultiVideoStatisticsApiV1DouyinAppV3FetchMultiVideoStatisticsGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_multi_video_statistics`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeIds !== undefined) {
                localVarQueryParameter['aweme_ids'] = awemeIds;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据视频ID获取作品的统计数据，支持多个视频id，一次性最多支持50个视频。 - 抖音大多数接口已经不再返回作品的播放数，只能通过此接口获取。 - 价格为：0.025$一次。 - 可以获取到的统计有：     - 点赞数（digg_count）     - 下载数（download_count）     - 播放数（play_count）     - 分享数（share_count） ### 参数: - aweme_ids: 作品id，支持多个视频id，用逗号隔开即可，不能超过50个，单个也可以，则无需逗号。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistical data of the Post according to the video ID, support multiple video ids, up to 50 videos at a time. - Most of the Douyin interfaces no longer return the number of plays of the Post, and can only be obtained through this interface. - Price: 0.025$ each time. - List of statistics that can be obtained:     - Like count (digg_count)     - Download count (download_count)     - Play count (play_count)     - Share count (share_count) ### Parameters: - aweme_ids: Video id, supports multiple video ids, separated by commas, no more than 50, single is also possible, no need for commas. ### Return: - Post statistics data  # [示例/Example] aweme_ids = \"7448118827402972455,7126745726494821640\"
         * @summary 根据视频ID批量获取作品的统计数据（点赞数、下载数、播放数、分享数）/Get the statistical data of the Post according to the video ID (like count, download count, play count, share count)
         * @param {string} awemeIds 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMultiVideoStatisticsApiV1DouyinAppV3FetchMultiVideoStatisticsGet_12: async (awemeIds: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeIds' is not null or undefined
            if (awemeIds === null || awemeIds === undefined) {
                throw new RequiredError('awemeIds','Required parameter awemeIds was null or undefined when calling fetchMultiVideoStatisticsApiV1DouyinAppV3FetchMultiVideoStatisticsGet_12.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_multi_video_statistics`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeIds !== undefined) {
                localVarQueryParameter['aweme_ids'] = awemeIds;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicDetailApiV1DouyinAppV3FetchMusicDetailGet: async (musicId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicDetailApiV1DouyinAppV3FetchMusicDetailGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_music_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicDetailApiV1DouyinAppV3FetchMusicDetailGet_13: async (musicId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicDetailApiV1DouyinAppV3FetchMusicDetailGet_13.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_music_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
         * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicHotSearchListApiV1DouyinAppV3FetchMusicHotSearchListGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v3/fetch_music_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
         * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicHotSearchListApiV1DouyinAppV3FetchMusicHotSearchListGet_14: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v3/fetch_music_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_music_search_result）/Get music search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_music_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicSearchResultApiV1DouyinAppV3FetchMusicSearchResultGet: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchMusicSearchResultApiV1DouyinAppV3FetchMusicSearchResultGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_music_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_music_search_result）/Get music search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_music_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicSearchResultApiV1DouyinAppV3FetchMusicSearchResultGet_15: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchMusicSearchResultApiV1DouyinAppV3FetchMusicSearchResultGet_15.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_music_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicVideoListApiV1DouyinAppV3FetchMusicVideoListGet: async (musicId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicVideoListApiV1DouyinAppV3FetchMusicVideoListGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_music_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicVideoListApiV1DouyinAppV3FetchMusicVideoListGet_16: async (musicId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicVideoListApiV1DouyinAppV3FetchMusicVideoListGet_16.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_music_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7448118827402972455\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinAppV3FetchOneVideoGet: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchOneVideoApiV1DouyinAppV3FetchOneVideoGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_one_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7448118827402972455\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinAppV3FetchOneVideoGet_17: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchOneVideoApiV1DouyinAppV3FetchOneVideoGet_17.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_one_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7448118827402972455\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinAppV3FetchOneVideoV2Get: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchOneVideoApiV1DouyinAppV3FetchOneVideoV2Get.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_one_video_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7448118827402972455\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinAppV3FetchOneVideoV2Get_18: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchOneVideoApiV1DouyinAppV3FetchOneVideoV2Get_18.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_one_video_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1DouyinAppV3FetchOneVideoByShareUrlGet: async (shareUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareUrl' is not null or undefined
            if (shareUrl === null || shareUrl === undefined) {
                throw new RequiredError('shareUrl','Required parameter shareUrl was null or undefined when calling fetchOneVideoByShareUrlApiV1DouyinAppV3FetchOneVideoByShareUrlGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_one_video_by_share_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareUrl !== undefined) {
                localVarQueryParameter['share_url'] = shareUrl;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1DouyinAppV3FetchOneVideoByShareUrlGet_19: async (shareUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareUrl' is not null or undefined
            if (shareUrl === null || shareUrl === undefined) {
                throw new RequiredError('shareUrl','Required parameter shareUrl was null or undefined when calling fetchOneVideoByShareUrlApiV1DouyinAppV3FetchOneVideoByShareUrlGet_19.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_one_video_by_share_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareUrl !== undefined) {
                localVarQueryParameter['share_url'] = shareUrl;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20
         * @summary 获取用户粉丝列表/Get user fans list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFansListApiV1DouyinAppV3FetchUserFansListGet: async (secUserId?: string, maxTime?: string, count?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v3/fetch_user_fans_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxTime !== undefined) {
                localVarQueryParameter['max_time'] = maxTime;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20
         * @summary 获取用户粉丝列表/Get user fans list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFansListApiV1DouyinAppV3FetchUserFansListGet_20: async (secUserId?: string, maxTime?: string, count?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v3/fetch_user_fans_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxTime !== undefined) {
                localVarQueryParameter['max_time'] = maxTime;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20
         * @summary 获取用户关注列表/Get user following list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1DouyinAppV3FetchUserFollowingListGet: async (secUserId?: string, maxTime?: string, count?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v3/fetch_user_following_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxTime !== undefined) {
                localVarQueryParameter['max_time'] = maxTime;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20
         * @summary 获取用户关注列表/Get user following list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1DouyinAppV3FetchUserFollowingListGet_21: async (secUserId?: string, maxTime?: string, count?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v3/fetch_user_following_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxTime !== undefined) {
                localVarQueryParameter['max_time'] = maxTime;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1DouyinAppV3FetchUserLikeVideosGet: async (secUserId: string, maxCursor?: number, counts?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserLikeVideosApiV1DouyinAppV3FetchUserLikeVideosGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_user_like_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (counts !== undefined) {
                localVarQueryParameter['counts'] = counts;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1DouyinAppV3FetchUserLikeVideosGet_22: async (secUserId: string, maxCursor?: number, counts?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserLikeVideosApiV1DouyinAppV3FetchUserLikeVideosGet_22.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_user_like_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (counts !== undefined) {
                localVarQueryParameter['counts'] = counts;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1DouyinAppV3FetchUserPostVideosGet: async (secUserId: string, maxCursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserPostVideosApiV1DouyinAppV3FetchUserPostVideosGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_user_post_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1DouyinAppV3FetchUserPostVideosGet_23: async (secUserId: string, maxCursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserPostVideosApiV1DouyinAppV3FetchUserPostVideosGet_23.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_user_post_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - douyin_user_fans(粉丝数量):     - \"\": 不限     - \"0_1k\": 1000以下     - \"1k_1w\": 1000-1万     - \"1w_10w\": 1w-10w     - \"10w_100w\": 10w-100w     - \"100w_\": 100w以上 - douyin_user_type(用户类型，请使用英文而不是中文):     - \"\": 不限     - \"common_user\": 普通用户     - \"enterprise_user\": 企业认证     - \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - douyin_user_fans(Fans):     - \"\": Unlimited     - \"0_1k\": Less than 1000     - \"1k_1w\": 1000-10,000     - \"1w_10w\": 10,000-100,000     - \"10w_100w\": 100,000-1,000,000     - \"100w_\": More than 1,000,000 - douyin_user_type(User type, please use English instead of Chinese):     - \"\": Unlimited     - \"common_user\": Common user     - \"enterprise_user\": Enterprise certification     - \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_user_search_result_v2）/Get user search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_user_search_result_v2)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [douyinUserFans] 粉丝数/Fans
         * @param {string} [douyinUserType] 用户类型/User type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1DouyinAppV3FetchUserSearchResultGet: async (keyword: string, offset?: number, count?: number, douyinUserFans?: string, douyinUserType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchUserSearchResultApiV1DouyinAppV3FetchUserSearchResultGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_user_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (douyinUserFans !== undefined) {
                localVarQueryParameter['douyin_user_fans'] = douyinUserFans;
            }

            if (douyinUserType !== undefined) {
                localVarQueryParameter['douyin_user_type'] = douyinUserType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - douyin_user_fans(粉丝数量):     - \"\": 不限     - \"0_1k\": 1000以下     - \"1k_1w\": 1000-1万     - \"1w_10w\": 1w-10w     - \"10w_100w\": 10w-100w     - \"100w_\": 100w以上 - douyin_user_type(用户类型，请使用英文而不是中文):     - \"\": 不限     - \"common_user\": 普通用户     - \"enterprise_user\": 企业认证     - \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - douyin_user_fans(Fans):     - \"\": Unlimited     - \"0_1k\": Less than 1000     - \"1k_1w\": 1000-10,000     - \"1w_10w\": 10,000-100,000     - \"10w_100w\": 100,000-1,000,000     - \"100w_\": More than 1,000,000 - douyin_user_type(User type, please use English instead of Chinese):     - \"\": Unlimited     - \"common_user\": Common user     - \"enterprise_user\": Enterprise certification     - \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_user_search_result_v2）/Get user search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_user_search_result_v2)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [douyinUserFans] 粉丝数/Fans
         * @param {string} [douyinUserType] 用户类型/User type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1DouyinAppV3FetchUserSearchResultGet_24: async (keyword: string, offset?: number, count?: number, douyinUserFans?: string, douyinUserType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchUserSearchResultApiV1DouyinAppV3FetchUserSearchResultGet_24.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_user_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (douyinUserFans !== undefined) {
                localVarQueryParameter['douyin_user_fans'] = douyinUserFans;
            }

            if (douyinUserType !== undefined) {
                localVarQueryParameter['douyin_user_type'] = douyinUserType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7448118827402972455\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1DouyinAppV3FetchVideoCommentsGet: async (awemeId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchVideoCommentsApiV1DouyinAppV3FetchVideoCommentsGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_video_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7448118827402972455\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1DouyinAppV3FetchVideoCommentsGet_25: async (awemeId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchVideoCommentsApiV1DouyinAppV3FetchVideoCommentsGet_25.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_video_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1DouyinAppV3FetchVideoCommentRepliesGet: async (itemId: string, commentId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchVideoCommentsReplyApiV1DouyinAppV3FetchVideoCommentRepliesGet.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling fetchVideoCommentsReplyApiV1DouyinAppV3FetchVideoCommentRepliesGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_video_comment_replies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1DouyinAppV3FetchVideoCommentRepliesGet_26: async (itemId: string, commentId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchVideoCommentsReplyApiV1DouyinAppV3FetchVideoCommentRepliesGet_26.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling fetchVideoCommentsReplyApiV1DouyinAppV3FetchVideoCommentRepliesGet_26.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_video_comment_replies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集详情数据 ### 参数: - mix_id: 合集id ### 返回: - 视频合集详情数据  # [English] ### Purpose: - Get Douyin video mix detail data ### Parameters: - mix_id: Mix id ### Return: - Video mix detail data  # [示例/Example] mix_id = \"7302011174286002217\"
         * @summary 获取抖音视频合集详情数据/Get Douyin video mix detail data
         * @param {string} mixId 合集id/Mix id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoMixDetailApiV1DouyinAppV3FetchVideoMixDetailGet: async (mixId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mixId' is not null or undefined
            if (mixId === null || mixId === undefined) {
                throw new RequiredError('mixId','Required parameter mixId was null or undefined when calling fetchVideoMixDetailApiV1DouyinAppV3FetchVideoMixDetailGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_video_mix_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (mixId !== undefined) {
                localVarQueryParameter['mix_id'] = mixId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集详情数据 ### 参数: - mix_id: 合集id ### 返回: - 视频合集详情数据  # [English] ### Purpose: - Get Douyin video mix detail data ### Parameters: - mix_id: Mix id ### Return: - Video mix detail data  # [示例/Example] mix_id = \"7302011174286002217\"
         * @summary 获取抖音视频合集详情数据/Get Douyin video mix detail data
         * @param {string} mixId 合集id/Mix id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoMixDetailApiV1DouyinAppV3FetchVideoMixDetailGet_27: async (mixId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mixId' is not null or undefined
            if (mixId === null || mixId === undefined) {
                throw new RequiredError('mixId','Required parameter mixId was null or undefined when calling fetchVideoMixDetailApiV1DouyinAppV3FetchVideoMixDetailGet_27.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_video_mix_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (mixId !== undefined) {
                localVarQueryParameter['mix_id'] = mixId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集作品列表数据 ### 参数: - mix_id: 合集id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 视频合集作品列表数据  # [English] ### Purpose: - Get Douyin video mix post list data ### Parameters: - mix_id: Mix id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Video mix post list data  # [示例/Example] mix_id = \"7302011174286002217\" cursor = 0 count = 20
         * @summary 获取抖音视频合集作品列表数据/Get Douyin video mix post list data
         * @param {string} mixId 合集id/Mix id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoMixPostListApiV1DouyinAppV3FetchVideoMixPostListGet: async (mixId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mixId' is not null or undefined
            if (mixId === null || mixId === undefined) {
                throw new RequiredError('mixId','Required parameter mixId was null or undefined when calling fetchVideoMixPostListApiV1DouyinAppV3FetchVideoMixPostListGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_video_mix_post_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (mixId !== undefined) {
                localVarQueryParameter['mix_id'] = mixId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集作品列表数据 ### 参数: - mix_id: 合集id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 视频合集作品列表数据  # [English] ### Purpose: - Get Douyin video mix post list data ### Parameters: - mix_id: Mix id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Video mix post list data  # [示例/Example] mix_id = \"7302011174286002217\" cursor = 0 count = 20
         * @summary 获取抖音视频合集作品列表数据/Get Douyin video mix post list data
         * @param {string} mixId 合集id/Mix id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoMixPostListApiV1DouyinAppV3FetchVideoMixPostListGet_28: async (mixId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mixId' is not null or undefined
            if (mixId === null || mixId === undefined) {
                throw new RequiredError('mixId','Required parameter mixId was null or undefined when calling fetchVideoMixPostListApiV1DouyinAppV3FetchVideoMixPostListGet_28.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_video_mix_post_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (mixId !== undefined) {
                localVarQueryParameter['mix_id'] = mixId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"
         * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_video_search_result）/Get video search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_video_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 时长/Duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1DouyinAppV3FetchVideoSearchResultGet: async (keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchVideoSearchResultApiV1DouyinAppV3FetchVideoSearchResultGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_video_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }

            if (filterDuration !== undefined) {
                localVarQueryParameter['filter_duration'] = filterDuration;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"
         * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_video_search_result）/Get video search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_video_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 时长/Duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1DouyinAppV3FetchVideoSearchResultGet_29: async (keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchVideoSearchResultApiV1DouyinAppV3FetchVideoSearchResultGet_29.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_video_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }

            if (filterDuration !== undefined) {
                localVarQueryParameter['filter_duration'] = filterDuration;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"
         * @summary 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
         * @param {string} keyword 关键词/Keyword
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {number} [page] 页码/Page
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultV2ApiV1DouyinAppV3FetchVideoSearchResultV2Get: async (keyword: string, sortType?: string, publishTime?: string, filterDuration?: string, page?: number, searchId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchVideoSearchResultV2ApiV1DouyinAppV3FetchVideoSearchResultV2Get.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_video_search_result_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }

            if (filterDuration !== undefined) {
                localVarQueryParameter['filter_duration'] = filterDuration;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"
         * @summary 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
         * @param {string} keyword 关键词/Keyword
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {number} [page] 页码/Page
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultV2ApiV1DouyinAppV3FetchVideoSearchResultV2Get_30: async (keyword: string, sortType?: string, publishTime?: string, filterDuration?: string, page?: number, searchId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchVideoSearchResultV2ApiV1DouyinAppV3FetchVideoSearchResultV2Get_30.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_video_search_result_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }

            if (filterDuration !== undefined) {
                localVarQueryParameter['filter_duration'] = filterDuration;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (searchId !== undefined) {
                localVarQueryParameter['search_id'] = searchId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据视频ID获取作品的统计数据 - 抖音大多数接口已经不再返回作品的播放数，只能通过此接口获取。 - 可以获取到的统计有：     - 点赞数（digg_count）     - 下载数（download_count）     - 播放数（play_count）     - 分享数（share_count） ### 参数: - aweme_ids: 作品id，支持多个视频id，用逗号隔开即可，不能超过2个，单个也可以，则无需逗号。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistical data of the Post according to the video ID - Most of the Douyin interfaces no longer return the number of plays of the Post, and can only be obtained through this interface. - List of statistics that can be obtained:     - Like count (digg_count)     - Download count (download_count)     - Play count (play_count)     - Share count (share_count) ### Parameters: - aweme_ids: Video id, supports multiple video ids, separated by commas, no more than 2, single is also possible, no need for commas. ### Return: - Post statistics data  # [示例/Example] aweme_ids = \"7448118827402972455,7126745726494821640\"
         * @summary 根据视频ID获取作品的统计数据（点赞数、下载数、播放数、分享数）/Get the statistical data of the Post according to the video ID (like count, download count, play count, share count)
         * @param {string} awemeIds 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoStatisticsApiV1DouyinAppV3FetchVideoStatisticsGet: async (awemeIds: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeIds' is not null or undefined
            if (awemeIds === null || awemeIds === undefined) {
                throw new RequiredError('awemeIds','Required parameter awemeIds was null or undefined when calling fetchVideoStatisticsApiV1DouyinAppV3FetchVideoStatisticsGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_video_statistics`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeIds !== undefined) {
                localVarQueryParameter['aweme_ids'] = awemeIds;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据视频ID获取作品的统计数据 - 抖音大多数接口已经不再返回作品的播放数，只能通过此接口获取。 - 可以获取到的统计有：     - 点赞数（digg_count）     - 下载数（download_count）     - 播放数（play_count）     - 分享数（share_count） ### 参数: - aweme_ids: 作品id，支持多个视频id，用逗号隔开即可，不能超过2个，单个也可以，则无需逗号。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistical data of the Post according to the video ID - Most of the Douyin interfaces no longer return the number of plays of the Post, and can only be obtained through this interface. - List of statistics that can be obtained:     - Like count (digg_count)     - Download count (download_count)     - Play count (play_count)     - Share count (share_count) ### Parameters: - aweme_ids: Video id, supports multiple video ids, separated by commas, no more than 2, single is also possible, no need for commas. ### Return: - Post statistics data  # [示例/Example] aweme_ids = \"7448118827402972455,7126745726494821640\"
         * @summary 根据视频ID获取作品的统计数据（点赞数、下载数、播放数、分享数）/Get the statistical data of the Post according to the video ID (like count, download count, play count, share count)
         * @param {string} awemeIds 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoStatisticsApiV1DouyinAppV3FetchVideoStatisticsGet_31: async (awemeIds: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeIds' is not null or undefined
            if (awemeIds === null || awemeIds === undefined) {
                throw new RequiredError('awemeIds','Required parameter awemeIds was null or undefined when calling fetchVideoStatisticsApiV1DouyinAppV3FetchVideoStatisticsGet_31.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/fetch_video_statistics`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeIds !== undefined) {
                localVarQueryParameter['aweme_ids'] = awemeIds;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音短链接 ### 参数: - url: 抖音链接 ### 返回: - 短链接数据  # [English] ### Purpose: - Generate Douyin short link ### Parameters: - url: Douyin link ### Return: - Short link data  # [示例/Example] url = \"https://www.douyin.com/passport/web/logout/\"
         * @summary 生成抖音短链接/Generate Douyin short link
         * @param {string} url 抖音链接/Douyin link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDouyinShortUrlApiV1DouyinAppV3GenerateDouyinShortUrlGet: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling generateDouyinShortUrlApiV1DouyinAppV3GenerateDouyinShortUrlGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/generate_douyin_short_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音短链接 ### 参数: - url: 抖音链接 ### 返回: - 短链接数据  # [English] ### Purpose: - Generate Douyin short link ### Parameters: - url: Douyin link ### Return: - Short link data  # [示例/Example] url = \"https://www.douyin.com/passport/web/logout/\"
         * @summary 生成抖音短链接/Generate Douyin short link
         * @param {string} url 抖音链接/Douyin link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDouyinShortUrlApiV1DouyinAppV3GenerateDouyinShortUrlGet_32: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling generateDouyinShortUrlApiV1DouyinAppV3GenerateDouyinShortUrlGet_32.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/generate_douyin_short_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音视频分享二维码 ### 参数: - object_id: 作品id或作者uid ### 返回: - 二维码数据  # [English] ### Purpose: - Generate Douyin video share QR code ### Parameters: - object_id: Video id or author uid ### Return: - QR code data  # [示例/Example] object_id = \"7348044435755846962\"
         * @summary 生成抖音视频分享二维码/Generate Douyin video share QR code
         * @param {string} objectId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDouyinVideoShareQrcodeApiV1DouyinAppV3GenerateDouyinVideoShareQrcodeGet: async (objectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError('objectId','Required parameter objectId was null or undefined when calling generateDouyinVideoShareQrcodeApiV1DouyinAppV3GenerateDouyinVideoShareQrcodeGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/generate_douyin_video_share_qrcode`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (objectId !== undefined) {
                localVarQueryParameter['object_id'] = objectId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音视频分享二维码 ### 参数: - object_id: 作品id或作者uid ### 返回: - 二维码数据  # [English] ### Purpose: - Generate Douyin video share QR code ### Parameters: - object_id: Video id or author uid ### Return: - QR code data  # [示例/Example] object_id = \"7348044435755846962\"
         * @summary 生成抖音视频分享二维码/Generate Douyin video share QR code
         * @param {string} objectId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDouyinVideoShareQrcodeApiV1DouyinAppV3GenerateDouyinVideoShareQrcodeGet_33: async (objectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError('objectId','Required parameter objectId was null or undefined when calling generateDouyinVideoShareQrcodeApiV1DouyinAppV3GenerateDouyinVideoShareQrcodeGet_33.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/generate_douyin_video_share_qrcode`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (objectId !== undefined) {
                localVarQueryParameter['object_id'] = objectId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1DouyinAppV3HandlerUserProfileGet: async (secUserId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling handlerUserProfileApiV1DouyinAppV3HandlerUserProfileGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/handler_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1DouyinAppV3HandlerUserProfileGet_34: async (secUserId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling handlerUserProfileApiV1DouyinAppV3HandlerUserProfileGet_34.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/handler_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword  ### Return: - Share link  # [示例/Example] keyword = \"雷军\"
         * @summary 生成抖音分享链接，唤起抖音APP，跳转指定关键词搜索结果/Generate Douyin share link, call Douyin APP, and jump to the specified keyword search result
         * @param {string} keyword 关键词/Keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openDouyinAppToKeywordSearchApiV1DouyinAppV3OpenDouyinAppToKeywordSearchGet: async (keyword: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling openDouyinAppToKeywordSearchApiV1DouyinAppV3OpenDouyinAppToKeywordSearchGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/open_douyin_app_to_keyword_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword  ### Return: - Share link  # [示例/Example] keyword = \"雷军\"
         * @summary 生成抖音分享链接，唤起抖音APP，跳转指定关键词搜索结果/Generate Douyin share link, call Douyin APP, and jump to the specified keyword search result
         * @param {string} keyword 关键词/Keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openDouyinAppToKeywordSearchApiV1DouyinAppV3OpenDouyinAppToKeywordSearchGet_35: async (keyword: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling openDouyinAppToKeywordSearchApiV1DouyinAppV3OpenDouyinAppToKeywordSearchGet_35.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/open_douyin_app_to_keyword_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，给指定用户发送私信。  ### 参数: - uid: 用户id - sec_uid: 用户sec_uid - 注意: 请确保user_id和sec_uid都有值，否则无法发送私信给指定用户。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and send private messages to specified users  ### Parameters: - uid: User id - sec_uid: User sec_uid - Note: Please make sure that both user_id and sec_uid have values, otherwise you cannot send private messages to the specified user.  ### Return: - Share link  # [示例/Example] uid = \"96874812426\" sec_uid = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\"
         * @summary 生成抖音分享链接，唤起抖音APP，给指定用户发送私信/Generate Douyin share link, call Douyin APP, and send private messages to specified users
         * @param {string} uid 用户id/User id
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openDouyinAppToSendPrivateMessageApiV1DouyinAppV3OpenDouyinAppToSendPrivateMessageGet: async (uid: string, secUid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling openDouyinAppToSendPrivateMessageApiV1DouyinAppV3OpenDouyinAppToSendPrivateMessageGet.');
            }
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling openDouyinAppToSendPrivateMessageApiV1DouyinAppV3OpenDouyinAppToSendPrivateMessageGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/open_douyin_app_to_send_private_message`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，给指定用户发送私信。  ### 参数: - uid: 用户id - sec_uid: 用户sec_uid - 注意: 请确保user_id和sec_uid都有值，否则无法发送私信给指定用户。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and send private messages to specified users  ### Parameters: - uid: User id - sec_uid: User sec_uid - Note: Please make sure that both user_id and sec_uid have values, otherwise you cannot send private messages to the specified user.  ### Return: - Share link  # [示例/Example] uid = \"96874812426\" sec_uid = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\"
         * @summary 生成抖音分享链接，唤起抖音APP，给指定用户发送私信/Generate Douyin share link, call Douyin APP, and send private messages to specified users
         * @param {string} uid 用户id/User id
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openDouyinAppToSendPrivateMessageApiV1DouyinAppV3OpenDouyinAppToSendPrivateMessageGet_36: async (uid: string, secUid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling openDouyinAppToSendPrivateMessageApiV1DouyinAppV3OpenDouyinAppToSendPrivateMessageGet_36.');
            }
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling openDouyinAppToSendPrivateMessageApiV1DouyinAppV3OpenDouyinAppToSendPrivateMessageGet_36.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/open_douyin_app_to_send_private_message`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定用户主页。  ### 参数: - uid: 用户id - sec_uid: 用户sec_uid - 注意: 请确保user_id和sec_uid都有值，否则无法跳转到指定用户主页。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified user profile  ### Parameters: - uid: User id - sec_uid: User sec_uid - Note: Please make sure that both user_id and sec_uid have values, otherwise you cannot jump to the specified user profile.  ### Return: - Share link  # [示例/Example] uid = \"96874812426\" sec_uid = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\"
         * @summary 生成抖音分享链接，唤起抖音APP，跳转指定用户主页/Generate Douyin share link, call Douyin APP, and jump to the specified user profile
         * @param {string} uid 用户id/User id
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openDouyinAppToUserProfileApiV1DouyinAppV3OpenDouyinAppToUserProfileGet: async (uid: string, secUid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling openDouyinAppToUserProfileApiV1DouyinAppV3OpenDouyinAppToUserProfileGet.');
            }
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling openDouyinAppToUserProfileApiV1DouyinAppV3OpenDouyinAppToUserProfileGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/open_douyin_app_to_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定用户主页。  ### 参数: - uid: 用户id - sec_uid: 用户sec_uid - 注意: 请确保user_id和sec_uid都有值，否则无法跳转到指定用户主页。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified user profile  ### Parameters: - uid: User id - sec_uid: User sec_uid - Note: Please make sure that both user_id and sec_uid have values, otherwise you cannot jump to the specified user profile.  ### Return: - Share link  # [示例/Example] uid = \"96874812426\" sec_uid = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\"
         * @summary 生成抖音分享链接，唤起抖音APP，跳转指定用户主页/Generate Douyin share link, call Douyin APP, and jump to the specified user profile
         * @param {string} uid 用户id/User id
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openDouyinAppToUserProfileApiV1DouyinAppV3OpenDouyinAppToUserProfileGet_37: async (uid: string, secUid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling openDouyinAppToUserProfileApiV1DouyinAppV3OpenDouyinAppToUserProfileGet_37.');
            }
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling openDouyinAppToUserProfileApiV1DouyinAppV3OpenDouyinAppToUserProfileGet_37.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/open_douyin_app_to_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified video  ### Parameters: - aweme_id: Video id  ### Return: - Share link  # [示例/Example] aweme_id = \"7197598285882789120\"
         * @summary 生成抖音分享链接，唤起抖音APP，跳转指定作品详情页/Generate Douyin share link, call Douyin APP, and jump to the specified video details page
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openDouyinAppToVideoDetailApiV1DouyinAppV3OpenDouyinAppToVideoDetailGet: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling openDouyinAppToVideoDetailApiV1DouyinAppV3OpenDouyinAppToVideoDetailGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/open_douyin_app_to_video_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified video  ### Parameters: - aweme_id: Video id  ### Return: - Share link  # [示例/Example] aweme_id = \"7197598285882789120\"
         * @summary 生成抖音分享链接，唤起抖音APP，跳转指定作品详情页/Generate Douyin share link, call Douyin APP, and jump to the specified video details page
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openDouyinAppToVideoDetailApiV1DouyinAppV3OpenDouyinAppToVideoDetailGet_38: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling openDouyinAppToVideoDetailApiV1DouyinAppV3OpenDouyinAppToVideoDetailGet_38.');
            }
            const localVarPath = `/api/v1/douyin/app/v3/open_douyin_app_to_video_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device in Douyin APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, with http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy = \"http://username:password@ip:port\"  # [响应/Response] ```json {     \"code\": 200,     \"router\": \"/api/v1/douyin/app/v3/register_device\",     \"params\": {         \"proxy\": \"username:password@ip:port\"     },     \"data\": {         \"iid\": \"3631064037200330\",         \"device_id\": \"3631064037196234\",         \"mssdk_token\": \"\",         \"device_platform\": \"android\",         \"channel\": \"xiaomi_64_1775\",         \"version_code\": 240900,         \"version_name\": \"24.9.0\",         \"manifest_version_code\": 240901,         \"update_version_code\": 24909900,         \"device_type\": \"V1963A\",         \"device_brand\": \"vivo\",         \"device_model\": \"V1963A\",         \"openudid\": \"5d736335afc17aab\",         \"os_api\": 29,         \"os_version\": \"10\",         \"resolution\": \"2400x1080\",         \"dpi\": 480,         \"host_abi\": \"arm64-v8a\",         \"ua\": \"com.ss.android.ugc.aweme/240901 (Linux; U; Android 10; zh_CN; V1963A; Build/compiler10301842;tt-ok/3.12.13.4-tiktok)\",         \"cookies\": {             \"install_id\": \"3631064037200330\",             \"odin_tt\": \"5ef413aaa319b3a4077814a1da3d3e1bcec3e8640ddc3ad30945a8518f59d1563d24c3b7a3c59d97fbd5344f13208a25cf143312acf4462b028e56cd0b611cc3fc2a64318f7375470d6db86440f92841\",             \"d_ticket\": \"42186c5b0c54ea1a2a9e02d4e62bf6ab\",             \"store-region\": \"cn-js\",             \"store-region-src\": \"did\",             \"multi_sids\": \"462868309327184:38167255076198698951907954929873\",             \"passport_csrf_token\": \"6f75287240634ad1f51f3b3bdcdb5424\",             \"passport_csrf_token_default\": \"6f75287240634ad1f51f3b3bdcdb5424\",             \"ttreq\": \"1$7f616210b41fc044b1f164542ac4e064288b5163\"         },         \"lanusk\": \"\",         \"device_manufacturer\": \"vivo\",         \"uuid\": \"357125675341697\",         \"cdid\": \"f64372bf-4d1d-4883-bc8a-d3d6fa87a9e3\",         \"first_launch_timestamp\": 1726970498636,         \"x_tt_dt\": \"AAA2FGV24A2GAOHJJ3D3XCJ32IZDZ26XXKMQAOTDNUDWTB644ISU5YA3GBYVX2Y3XVOQ3ISDH3UA4JXGGNFXBLJ6AAZU7QTIBKHFYJLDJMDG5K36LVPBRCKLHW2XM\",         \"BootTime\": 1726980411,         \"MbTime\": 1726780411,         \"server_time\": 1726980500,         \"mc\": \"2A:66:7A:2D:8B:29\",         \"rom\": \"compiler10301842\",         \"rom_version\": \"PD1963-user 10 QP1A.190711.020 compiler10301842 release-keys\"     } } ```
         * @summary 抖音APP注册设备/Douyin APP register device
         * @param {string} [proxy] 代理/Proxy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDeviceApiV1DouyinAppV3RegisterDeviceGet: async (proxy?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v3/register_device`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (proxy !== undefined) {
                localVarQueryParameter['proxy'] = proxy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 抖音APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device in Douyin APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, with http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy = \"http://username:password@ip:port\"  # [响应/Response] ```json {     \"code\": 200,     \"router\": \"/api/v1/douyin/app/v3/register_device\",     \"params\": {         \"proxy\": \"username:password@ip:port\"     },     \"data\": {         \"iid\": \"3631064037200330\",         \"device_id\": \"3631064037196234\",         \"mssdk_token\": \"\",         \"device_platform\": \"android\",         \"channel\": \"xiaomi_64_1775\",         \"version_code\": 240900,         \"version_name\": \"24.9.0\",         \"manifest_version_code\": 240901,         \"update_version_code\": 24909900,         \"device_type\": \"V1963A\",         \"device_brand\": \"vivo\",         \"device_model\": \"V1963A\",         \"openudid\": \"5d736335afc17aab\",         \"os_api\": 29,         \"os_version\": \"10\",         \"resolution\": \"2400x1080\",         \"dpi\": 480,         \"host_abi\": \"arm64-v8a\",         \"ua\": \"com.ss.android.ugc.aweme/240901 (Linux; U; Android 10; zh_CN; V1963A; Build/compiler10301842;tt-ok/3.12.13.4-tiktok)\",         \"cookies\": {             \"install_id\": \"3631064037200330\",             \"odin_tt\": \"5ef413aaa319b3a4077814a1da3d3e1bcec3e8640ddc3ad30945a8518f59d1563d24c3b7a3c59d97fbd5344f13208a25cf143312acf4462b028e56cd0b611cc3fc2a64318f7375470d6db86440f92841\",             \"d_ticket\": \"42186c5b0c54ea1a2a9e02d4e62bf6ab\",             \"store-region\": \"cn-js\",             \"store-region-src\": \"did\",             \"multi_sids\": \"462868309327184:38167255076198698951907954929873\",             \"passport_csrf_token\": \"6f75287240634ad1f51f3b3bdcdb5424\",             \"passport_csrf_token_default\": \"6f75287240634ad1f51f3b3bdcdb5424\",             \"ttreq\": \"1$7f616210b41fc044b1f164542ac4e064288b5163\"         },         \"lanusk\": \"\",         \"device_manufacturer\": \"vivo\",         \"uuid\": \"357125675341697\",         \"cdid\": \"f64372bf-4d1d-4883-bc8a-d3d6fa87a9e3\",         \"first_launch_timestamp\": 1726970498636,         \"x_tt_dt\": \"AAA2FGV24A2GAOHJJ3D3XCJ32IZDZ26XXKMQAOTDNUDWTB644ISU5YA3GBYVX2Y3XVOQ3ISDH3UA4JXGGNFXBLJ6AAZU7QTIBKHFYJLDJMDG5K36LVPBRCKLHW2XM\",         \"BootTime\": 1726980411,         \"MbTime\": 1726780411,         \"server_time\": 1726980500,         \"mc\": \"2A:66:7A:2D:8B:29\",         \"rom\": \"compiler10301842\",         \"rom_version\": \"PD1963-user 10 QP1A.190711.020 compiler10301842 release-keys\"     } } ```
         * @summary 抖音APP注册设备/Douyin APP register device
         * @param {string} [proxy] 代理/Proxy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDeviceApiV1DouyinAppV3RegisterDeviceGet_39: async (proxy?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v3/register_device`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (proxy !== undefined) {
                localVarQueryParameter['proxy'] = proxy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DouyinAppV3APIApi - functional programming interface
 * @export
 */
export const DouyinAppV3APIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 根据视频ID来增加作品的播放数 - 该接口默认使用游客Cookie，如果需要使用登录用户的Cookie，请在参数中传入。 - 单一作品每次调用增加1次播放数，请求约 `1000` 次后会被抖音限制，需要等待一段时间（如：2小时后）后再继续调用。 - 该限制是针对作品的，不是针对接口的，在未登录的情况下，使用不同IP的浏览器或在APP中浏览作品，该作品的播放数也不会增加。 - 可以携带抖音网页端的Cookie来请求此接口，但是不保证一定有效，需要自行测试。 - 上述的限制是根据测试结果得出的，具体限制可能会有所不同，仅供参考。 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - cookie: 可选，默认使用游客Cookie ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID - This interface uses guest Cookie by default. If you need to use the Cookie of the logged-in user, please pass it in the parameters. - Each call to a single work increases the number of plays by 1. After about `1000` calls, Douyin will restrict it. You need to wait for a period of time (such as 2 hours) before continuing to call. - This restriction is for the work, not for the interface. When browsing the work without logging in, using different IP browsers or browsing the work in the APP, the number of plays of the work will not increase. - You can carry the Cookie of the Douyin web page to request this interface, but it is not guaranteed to be effective and needs to be tested by yourself. - The above restrictions are based on test results, and the specific restrictions may vary, for reference only. ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - cookie: Optional, use guest Cookie by default ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type = 0 item_id = \"7197598285882789120\" cookie = None
         * @summary 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
         * @param {number} awemeType 作品类型/Video type
         * @param {string} itemId 作品id/Video id
         * @param {string} [cookie] 可选，默认使用游客Cookie/Optional, use guest Cookie by default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVideoPlayCountApiV1DouyinAppV3AddVideoPlayCountGet(awemeType: number, itemId: string, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).addVideoPlayCountApiV1DouyinAppV3AddVideoPlayCountGet(awemeType, itemId, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据视频ID来增加作品的播放数 - 该接口默认使用游客Cookie，如果需要使用登录用户的Cookie，请在参数中传入。 - 单一作品每次调用增加1次播放数，请求约 `1000` 次后会被抖音限制，需要等待一段时间（如：2小时后）后再继续调用。 - 该限制是针对作品的，不是针对接口的，在未登录的情况下，使用不同IP的浏览器或在APP中浏览作品，该作品的播放数也不会增加。 - 可以携带抖音网页端的Cookie来请求此接口，但是不保证一定有效，需要自行测试。 - 上述的限制是根据测试结果得出的，具体限制可能会有所不同，仅供参考。 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - cookie: 可选，默认使用游客Cookie ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID - This interface uses guest Cookie by default. If you need to use the Cookie of the logged-in user, please pass it in the parameters. - Each call to a single work increases the number of plays by 1. After about `1000` calls, Douyin will restrict it. You need to wait for a period of time (such as 2 hours) before continuing to call. - This restriction is for the work, not for the interface. When browsing the work without logging in, using different IP browsers or browsing the work in the APP, the number of plays of the work will not increase. - You can carry the Cookie of the Douyin web page to request this interface, but it is not guaranteed to be effective and needs to be tested by yourself. - The above restrictions are based on test results, and the specific restrictions may vary, for reference only. ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - cookie: Optional, use guest Cookie by default ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type = 0 item_id = \"7197598285882789120\" cookie = None
         * @summary 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
         * @param {number} awemeType 作品类型/Video type
         * @param {string} itemId 作品id/Video id
         * @param {string} [cookie] 可选，默认使用游客Cookie/Optional, use guest Cookie by default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVideoPlayCountApiV1DouyinAppV3AddVideoPlayCountGet_1(awemeType: number, itemId: string, cookie?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).addVideoPlayCountApiV1DouyinAppV3AddVideoPlayCountGet_1(awemeType, itemId, cookie, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 - content_type: 0:不限 1:视频 2:图片 3:文章 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - content_type: 0: Unlimited 1: Video 2: Picture 3: Article ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" content_type = \"0\"
         * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_general_search_result）/Get comprehensive search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_general_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 时长/Duration
         * @param {string} [contentType] 内容类型/Content type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGeneralSearchResultApiV1DouyinAppV3FetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, contentType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchGeneralSearchResultApiV1DouyinAppV3FetchGeneralSearchResultGet(keyword, offset, count, sortType, publishTime, filterDuration, contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 - content_type: 0:不限 1:视频 2:图片 3:文章 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - content_type: 0: Unlimited 1: Video 2: Picture 3: Article ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" content_type = \"0\"
         * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_general_search_result）/Get comprehensive search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_general_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 时长/Duration
         * @param {string} [contentType] 内容类型/Content type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGeneralSearchResultApiV1DouyinAppV3FetchGeneralSearchResultGet_2(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, contentType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchGeneralSearchResultApiV1DouyinAppV3FetchGeneralSearchResultGet_2(keyword, offset, count, sortType, publishTime, filterDuration, contentType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagDetailApiV1DouyinAppV3FetchHashtagDetailGet(chId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchHashtagDetailApiV1DouyinAppV3FetchHashtagDetailGet(chId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagDetailApiV1DouyinAppV3FetchHashtagDetailGet_3(chId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchHashtagDetailApiV1DouyinAppV3FetchHashtagDetailGet_3(chId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_hashtag_search_result）/Get hashtag search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_hashtag_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagSearchResultApiV1DouyinAppV3FetchHashtagSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchHashtagSearchResultApiV1DouyinAppV3FetchHashtagSearchResultGet(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_hashtag_search_result）/Get hashtag search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_hashtag_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagSearchResultApiV1DouyinAppV3FetchHashtagSearchResultGet_4(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchHashtagSearchResultApiV1DouyinAppV3FetchHashtagSearchResultGet_4(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagVideoListApiV1DouyinAppV3FetchHashtagVideoListGet(chId: string, cursor?: number, sortType?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchHashtagVideoListApiV1DouyinAppV3FetchHashtagVideoListGet(chId, cursor, sortType, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagVideoListApiV1DouyinAppV3FetchHashtagVideoListGet_5(chId: string, cursor?: number, sortType?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchHashtagVideoListApiV1DouyinAppV3FetchHashtagVideoListGet_5(chId, cursor, sortType, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
         * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
         * @param {number} categoryId 分类id/Category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotBrandSearchApiV1DouyinAppV3FetchBrandHotSearchListDetailGet(categoryId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchHotBrandSearchApiV1DouyinAppV3FetchBrandHotSearchListDetailGet(categoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
         * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
         * @param {number} categoryId 分类id/Category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotBrandSearchApiV1DouyinAppV3FetchBrandHotSearchListDetailGet_6(categoryId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchHotBrandSearchApiV1DouyinAppV3FetchBrandHotSearchListDetailGet_6(categoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
         * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotBrandSearchCategoryApiV1DouyinAppV3FetchBrandHotSearchListGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchHotBrandSearchCategoryApiV1DouyinAppV3FetchBrandHotSearchListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
         * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotBrandSearchCategoryApiV1DouyinAppV3FetchBrandHotSearchListGet_7(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchHotBrandSearchCategoryApiV1DouyinAppV3FetchBrandHotSearchListGet_7(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音热榜数据，包括：     - 热点榜     - 种草榜     - 娱乐榜     - 社会榜     - 挑战榜 ### 参数: - board_type:     - 0: 热点榜（默认）     - 2: 其他榜单，如种草榜等，需要传入对应的board_sub_type参数。 - board_sub_type:     - 空字符串: 热点榜（默认）     - seeding: 种草榜     - 2: 娱乐榜     - 4: 社会榜     - hotspot_challenge: 挑战榜 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data, including:     - Hot search list     - Seeding list     - Entertainment list     - Social list     - Challenge list  ### Parameters: - board_type:     - 0: Hot search list (default)     - 2: Other lists, such as seeding list, etc., need to pass in the corresponding board_sub_type parameter. - board_sub_type:     - Empty string: Hot search list (default)     - seeding: Seeding list     - 2: Entertainment list     - 4: Social list     - hotspot_challenge: Challenge list ### Return: - Hot search list data  # [示例/Example] - 获取热点榜数据     - board_type = 0     - board_sub_type = \"\" - 获取种草榜数据     - board_type = 2     - board_sub_type = \"seeding\"
         * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
         * @param {string} [boardType] 榜单类型/Board type
         * @param {string} [boardSubType] 榜单子类型/Board sub type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotSearchListApiV1DouyinAppV3FetchHotSearchListGet(boardType?: string, boardSubType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchHotSearchListApiV1DouyinAppV3FetchHotSearchListGet(boardType, boardSubType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音热榜数据，包括：     - 热点榜     - 种草榜     - 娱乐榜     - 社会榜     - 挑战榜 ### 参数: - board_type:     - 0: 热点榜（默认）     - 2: 其他榜单，如种草榜等，需要传入对应的board_sub_type参数。 - board_sub_type:     - 空字符串: 热点榜（默认）     - seeding: 种草榜     - 2: 娱乐榜     - 4: 社会榜     - hotspot_challenge: 挑战榜 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data, including:     - Hot search list     - Seeding list     - Entertainment list     - Social list     - Challenge list  ### Parameters: - board_type:     - 0: Hot search list (default)     - 2: Other lists, such as seeding list, etc., need to pass in the corresponding board_sub_type parameter. - board_sub_type:     - Empty string: Hot search list (default)     - seeding: Seeding list     - 2: Entertainment list     - 4: Social list     - hotspot_challenge: Challenge list ### Return: - Hot search list data  # [示例/Example] - 获取热点榜数据     - board_type = 0     - board_sub_type = \"\" - 获取种草榜数据     - board_type = 2     - board_sub_type = \"seeding\"
         * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
         * @param {string} [boardType] 榜单类型/Board type
         * @param {string} [boardSubType] 榜单子类型/Board sub type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotSearchListApiV1DouyinAppV3FetchHotSearchListGet_8(boardType?: string, boardSubType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchHotSearchListApiV1DouyinAppV3FetchHotSearchListGet_8(boardType, boardSubType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
         * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveHotSearchListApiV1DouyinAppV3FetchLiveHotSearchListGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchLiveHotSearchListApiV1DouyinAppV3FetchLiveHotSearchListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
         * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveHotSearchListApiV1DouyinAppV3FetchLiveHotSearchListGet_9(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchLiveHotSearchListApiV1DouyinAppV3FetchLiveHotSearchListGet_9(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - cursor: 偏移量，从0开始，每次请求从上次请求返回响应中的cursor中获取。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - cursor: Offset, starting from 0, each request gets from the cursor in the response returned by the last request. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Live search results  # [示例/Example] keyword = \"小米商城\" cursor = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_live_search_result）/Get live search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_live_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [cursor] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveSearchResultApiV1DouyinAppV3FetchLiveSearchResultGet(keyword: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchLiveSearchResultApiV1DouyinAppV3FetchLiveSearchResultGet(keyword, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - cursor: 偏移量，从0开始，每次请求从上次请求返回响应中的cursor中获取。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - cursor: Offset, starting from 0, each request gets from the cursor in the response returned by the last request. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Live search results  # [示例/Example] keyword = \"小米商城\" cursor = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_live_search_result）/Get live search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_live_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [cursor] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveSearchResultApiV1DouyinAppV3FetchLiveSearchResultGet_10(keyword: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchLiveSearchResultApiV1DouyinAppV3FetchLiveSearchResultGet_10(keyword, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\"]
         * @summary 批量获取视频信息/Batch Get Video Information
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMultiVideoApiV1DouyinAppV3FetchMultiVideoPost(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchMultiVideoApiV1DouyinAppV3FetchMultiVideoPost(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\"]
         * @summary 批量获取视频信息/Batch Get Video Information
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMultiVideoApiV1DouyinAppV3FetchMultiVideoPost_11(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchMultiVideoApiV1DouyinAppV3FetchMultiVideoPost_11(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据视频ID获取作品的统计数据，支持多个视频id，一次性最多支持50个视频。 - 抖音大多数接口已经不再返回作品的播放数，只能通过此接口获取。 - 价格为：0.025$一次。 - 可以获取到的统计有：     - 点赞数（digg_count）     - 下载数（download_count）     - 播放数（play_count）     - 分享数（share_count） ### 参数: - aweme_ids: 作品id，支持多个视频id，用逗号隔开即可，不能超过50个，单个也可以，则无需逗号。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistical data of the Post according to the video ID, support multiple video ids, up to 50 videos at a time. - Most of the Douyin interfaces no longer return the number of plays of the Post, and can only be obtained through this interface. - Price: 0.025$ each time. - List of statistics that can be obtained:     - Like count (digg_count)     - Download count (download_count)     - Play count (play_count)     - Share count (share_count) ### Parameters: - aweme_ids: Video id, supports multiple video ids, separated by commas, no more than 50, single is also possible, no need for commas. ### Return: - Post statistics data  # [示例/Example] aweme_ids = \"7448118827402972455,7126745726494821640\"
         * @summary 根据视频ID批量获取作品的统计数据（点赞数、下载数、播放数、分享数）/Get the statistical data of the Post according to the video ID (like count, download count, play count, share count)
         * @param {string} awemeIds 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMultiVideoStatisticsApiV1DouyinAppV3FetchMultiVideoStatisticsGet(awemeIds: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchMultiVideoStatisticsApiV1DouyinAppV3FetchMultiVideoStatisticsGet(awemeIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据视频ID获取作品的统计数据，支持多个视频id，一次性最多支持50个视频。 - 抖音大多数接口已经不再返回作品的播放数，只能通过此接口获取。 - 价格为：0.025$一次。 - 可以获取到的统计有：     - 点赞数（digg_count）     - 下载数（download_count）     - 播放数（play_count）     - 分享数（share_count） ### 参数: - aweme_ids: 作品id，支持多个视频id，用逗号隔开即可，不能超过50个，单个也可以，则无需逗号。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistical data of the Post according to the video ID, support multiple video ids, up to 50 videos at a time. - Most of the Douyin interfaces no longer return the number of plays of the Post, and can only be obtained through this interface. - Price: 0.025$ each time. - List of statistics that can be obtained:     - Like count (digg_count)     - Download count (download_count)     - Play count (play_count)     - Share count (share_count) ### Parameters: - aweme_ids: Video id, supports multiple video ids, separated by commas, no more than 50, single is also possible, no need for commas. ### Return: - Post statistics data  # [示例/Example] aweme_ids = \"7448118827402972455,7126745726494821640\"
         * @summary 根据视频ID批量获取作品的统计数据（点赞数、下载数、播放数、分享数）/Get the statistical data of the Post according to the video ID (like count, download count, play count, share count)
         * @param {string} awemeIds 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMultiVideoStatisticsApiV1DouyinAppV3FetchMultiVideoStatisticsGet_12(awemeIds: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchMultiVideoStatisticsApiV1DouyinAppV3FetchMultiVideoStatisticsGet_12(awemeIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicDetailApiV1DouyinAppV3FetchMusicDetailGet(musicId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchMusicDetailApiV1DouyinAppV3FetchMusicDetailGet(musicId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicDetailApiV1DouyinAppV3FetchMusicDetailGet_13(musicId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchMusicDetailApiV1DouyinAppV3FetchMusicDetailGet_13(musicId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
         * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicHotSearchListApiV1DouyinAppV3FetchMusicHotSearchListGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchMusicHotSearchListApiV1DouyinAppV3FetchMusicHotSearchListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
         * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicHotSearchListApiV1DouyinAppV3FetchMusicHotSearchListGet_14(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchMusicHotSearchListApiV1DouyinAppV3FetchMusicHotSearchListGet_14(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_music_search_result）/Get music search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_music_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicSearchResultApiV1DouyinAppV3FetchMusicSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchMusicSearchResultApiV1DouyinAppV3FetchMusicSearchResultGet(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_music_search_result）/Get music search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_music_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicSearchResultApiV1DouyinAppV3FetchMusicSearchResultGet_15(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchMusicSearchResultApiV1DouyinAppV3FetchMusicSearchResultGet_15(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicVideoListApiV1DouyinAppV3FetchMusicVideoListGet(musicId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchMusicVideoListApiV1DouyinAppV3FetchMusicVideoListGet(musicId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicVideoListApiV1DouyinAppV3FetchMusicVideoListGet_16(musicId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchMusicVideoListApiV1DouyinAppV3FetchMusicVideoListGet_16(musicId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7448118827402972455\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1DouyinAppV3FetchOneVideoGet(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchOneVideoApiV1DouyinAppV3FetchOneVideoGet(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7448118827402972455\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1DouyinAppV3FetchOneVideoGet_17(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchOneVideoApiV1DouyinAppV3FetchOneVideoGet_17(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7448118827402972455\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1DouyinAppV3FetchOneVideoV2Get(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchOneVideoApiV1DouyinAppV3FetchOneVideoV2Get(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7448118827402972455\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1DouyinAppV3FetchOneVideoV2Get_18(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchOneVideoApiV1DouyinAppV3FetchOneVideoV2Get_18(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoByShareUrlApiV1DouyinAppV3FetchOneVideoByShareUrlGet(shareUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchOneVideoByShareUrlApiV1DouyinAppV3FetchOneVideoByShareUrlGet(shareUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoByShareUrlApiV1DouyinAppV3FetchOneVideoByShareUrlGet_19(shareUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchOneVideoByShareUrlApiV1DouyinAppV3FetchOneVideoByShareUrlGet_19(shareUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20
         * @summary 获取用户粉丝列表/Get user fans list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFansListApiV1DouyinAppV3FetchUserFansListGet(secUserId?: string, maxTime?: string, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchUserFansListApiV1DouyinAppV3FetchUserFansListGet(secUserId, maxTime, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20
         * @summary 获取用户粉丝列表/Get user fans list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFansListApiV1DouyinAppV3FetchUserFansListGet_20(secUserId?: string, maxTime?: string, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchUserFansListApiV1DouyinAppV3FetchUserFansListGet_20(secUserId, maxTime, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20
         * @summary 获取用户关注列表/Get user following list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowingListApiV1DouyinAppV3FetchUserFollowingListGet(secUserId?: string, maxTime?: string, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchUserFollowingListApiV1DouyinAppV3FetchUserFollowingListGet(secUserId, maxTime, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20
         * @summary 获取用户关注列表/Get user following list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowingListApiV1DouyinAppV3FetchUserFollowingListGet_21(secUserId?: string, maxTime?: string, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchUserFollowingListApiV1DouyinAppV3FetchUserFollowingListGet_21(secUserId, maxTime, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLikeVideosApiV1DouyinAppV3FetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchUserLikeVideosApiV1DouyinAppV3FetchUserLikeVideosGet(secUserId, maxCursor, counts, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLikeVideosApiV1DouyinAppV3FetchUserLikeVideosGet_22(secUserId: string, maxCursor?: number, counts?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchUserLikeVideosApiV1DouyinAppV3FetchUserLikeVideosGet_22(secUserId, maxCursor, counts, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostVideosApiV1DouyinAppV3FetchUserPostVideosGet(secUserId: string, maxCursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchUserPostVideosApiV1DouyinAppV3FetchUserPostVideosGet(secUserId, maxCursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostVideosApiV1DouyinAppV3FetchUserPostVideosGet_23(secUserId: string, maxCursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchUserPostVideosApiV1DouyinAppV3FetchUserPostVideosGet_23(secUserId, maxCursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - douyin_user_fans(粉丝数量):     - \"\": 不限     - \"0_1k\": 1000以下     - \"1k_1w\": 1000-1万     - \"1w_10w\": 1w-10w     - \"10w_100w\": 10w-100w     - \"100w_\": 100w以上 - douyin_user_type(用户类型，请使用英文而不是中文):     - \"\": 不限     - \"common_user\": 普通用户     - \"enterprise_user\": 企业认证     - \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - douyin_user_fans(Fans):     - \"\": Unlimited     - \"0_1k\": Less than 1000     - \"1k_1w\": 1000-10,000     - \"1w_10w\": 10,000-100,000     - \"10w_100w\": 100,000-1,000,000     - \"100w_\": More than 1,000,000 - douyin_user_type(User type, please use English instead of Chinese):     - \"\": Unlimited     - \"common_user\": Common user     - \"enterprise_user\": Enterprise certification     - \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_user_search_result_v2）/Get user search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_user_search_result_v2)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [douyinUserFans] 粉丝数/Fans
         * @param {string} [douyinUserType] 用户类型/User type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserSearchResultApiV1DouyinAppV3FetchUserSearchResultGet(keyword: string, offset?: number, count?: number, douyinUserFans?: string, douyinUserType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchUserSearchResultApiV1DouyinAppV3FetchUserSearchResultGet(keyword, offset, count, douyinUserFans, douyinUserType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - douyin_user_fans(粉丝数量):     - \"\": 不限     - \"0_1k\": 1000以下     - \"1k_1w\": 1000-1万     - \"1w_10w\": 1w-10w     - \"10w_100w\": 10w-100w     - \"100w_\": 100w以上 - douyin_user_type(用户类型，请使用英文而不是中文):     - \"\": 不限     - \"common_user\": 普通用户     - \"enterprise_user\": 企业认证     - \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - douyin_user_fans(Fans):     - \"\": Unlimited     - \"0_1k\": Less than 1000     - \"1k_1w\": 1000-10,000     - \"1w_10w\": 10,000-100,000     - \"10w_100w\": 100,000-1,000,000     - \"100w_\": More than 1,000,000 - douyin_user_type(User type, please use English instead of Chinese):     - \"\": Unlimited     - \"common_user\": Common user     - \"enterprise_user\": Enterprise certification     - \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_user_search_result_v2）/Get user search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_user_search_result_v2)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [douyinUserFans] 粉丝数/Fans
         * @param {string} [douyinUserType] 用户类型/User type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserSearchResultApiV1DouyinAppV3FetchUserSearchResultGet_24(keyword: string, offset?: number, count?: number, douyinUserFans?: string, douyinUserType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchUserSearchResultApiV1DouyinAppV3FetchUserSearchResultGet_24(keyword, offset, count, douyinUserFans, douyinUserType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7448118827402972455\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsApiV1DouyinAppV3FetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchVideoCommentsApiV1DouyinAppV3FetchVideoCommentsGet(awemeId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7448118827402972455\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsApiV1DouyinAppV3FetchVideoCommentsGet_25(awemeId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchVideoCommentsApiV1DouyinAppV3FetchVideoCommentsGet_25(awemeId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsReplyApiV1DouyinAppV3FetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchVideoCommentsReplyApiV1DouyinAppV3FetchVideoCommentRepliesGet(itemId, commentId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsReplyApiV1DouyinAppV3FetchVideoCommentRepliesGet_26(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchVideoCommentsReplyApiV1DouyinAppV3FetchVideoCommentRepliesGet_26(itemId, commentId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集详情数据 ### 参数: - mix_id: 合集id ### 返回: - 视频合集详情数据  # [English] ### Purpose: - Get Douyin video mix detail data ### Parameters: - mix_id: Mix id ### Return: - Video mix detail data  # [示例/Example] mix_id = \"7302011174286002217\"
         * @summary 获取抖音视频合集详情数据/Get Douyin video mix detail data
         * @param {string} mixId 合集id/Mix id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoMixDetailApiV1DouyinAppV3FetchVideoMixDetailGet(mixId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchVideoMixDetailApiV1DouyinAppV3FetchVideoMixDetailGet(mixId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集详情数据 ### 参数: - mix_id: 合集id ### 返回: - 视频合集详情数据  # [English] ### Purpose: - Get Douyin video mix detail data ### Parameters: - mix_id: Mix id ### Return: - Video mix detail data  # [示例/Example] mix_id = \"7302011174286002217\"
         * @summary 获取抖音视频合集详情数据/Get Douyin video mix detail data
         * @param {string} mixId 合集id/Mix id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoMixDetailApiV1DouyinAppV3FetchVideoMixDetailGet_27(mixId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchVideoMixDetailApiV1DouyinAppV3FetchVideoMixDetailGet_27(mixId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集作品列表数据 ### 参数: - mix_id: 合集id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 视频合集作品列表数据  # [English] ### Purpose: - Get Douyin video mix post list data ### Parameters: - mix_id: Mix id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Video mix post list data  # [示例/Example] mix_id = \"7302011174286002217\" cursor = 0 count = 20
         * @summary 获取抖音视频合集作品列表数据/Get Douyin video mix post list data
         * @param {string} mixId 合集id/Mix id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoMixPostListApiV1DouyinAppV3FetchVideoMixPostListGet(mixId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchVideoMixPostListApiV1DouyinAppV3FetchVideoMixPostListGet(mixId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集作品列表数据 ### 参数: - mix_id: 合集id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 视频合集作品列表数据  # [English] ### Purpose: - Get Douyin video mix post list data ### Parameters: - mix_id: Mix id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Video mix post list data  # [示例/Example] mix_id = \"7302011174286002217\" cursor = 0 count = 20
         * @summary 获取抖音视频合集作品列表数据/Get Douyin video mix post list data
         * @param {string} mixId 合集id/Mix id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoMixPostListApiV1DouyinAppV3FetchVideoMixPostListGet_28(mixId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchVideoMixPostListApiV1DouyinAppV3FetchVideoMixPostListGet_28(mixId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"
         * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_video_search_result）/Get video search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_video_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 时长/Duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoSearchResultApiV1DouyinAppV3FetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchVideoSearchResultApiV1DouyinAppV3FetchVideoSearchResultGet(keyword, offset, count, sortType, publishTime, filterDuration, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"
         * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_video_search_result）/Get video search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_video_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 时长/Duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoSearchResultApiV1DouyinAppV3FetchVideoSearchResultGet_29(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchVideoSearchResultApiV1DouyinAppV3FetchVideoSearchResultGet_29(keyword, offset, count, sortType, publishTime, filterDuration, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"
         * @summary 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
         * @param {string} keyword 关键词/Keyword
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {number} [page] 页码/Page
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoSearchResultV2ApiV1DouyinAppV3FetchVideoSearchResultV2Get(keyword: string, sortType?: string, publishTime?: string, filterDuration?: string, page?: number, searchId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchVideoSearchResultV2ApiV1DouyinAppV3FetchVideoSearchResultV2Get(keyword, sortType, publishTime, filterDuration, page, searchId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"
         * @summary 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
         * @param {string} keyword 关键词/Keyword
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {number} [page] 页码/Page
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoSearchResultV2ApiV1DouyinAppV3FetchVideoSearchResultV2Get_30(keyword: string, sortType?: string, publishTime?: string, filterDuration?: string, page?: number, searchId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchVideoSearchResultV2ApiV1DouyinAppV3FetchVideoSearchResultV2Get_30(keyword, sortType, publishTime, filterDuration, page, searchId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据视频ID获取作品的统计数据 - 抖音大多数接口已经不再返回作品的播放数，只能通过此接口获取。 - 可以获取到的统计有：     - 点赞数（digg_count）     - 下载数（download_count）     - 播放数（play_count）     - 分享数（share_count） ### 参数: - aweme_ids: 作品id，支持多个视频id，用逗号隔开即可，不能超过2个，单个也可以，则无需逗号。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistical data of the Post according to the video ID - Most of the Douyin interfaces no longer return the number of plays of the Post, and can only be obtained through this interface. - List of statistics that can be obtained:     - Like count (digg_count)     - Download count (download_count)     - Play count (play_count)     - Share count (share_count) ### Parameters: - aweme_ids: Video id, supports multiple video ids, separated by commas, no more than 2, single is also possible, no need for commas. ### Return: - Post statistics data  # [示例/Example] aweme_ids = \"7448118827402972455,7126745726494821640\"
         * @summary 根据视频ID获取作品的统计数据（点赞数、下载数、播放数、分享数）/Get the statistical data of the Post according to the video ID (like count, download count, play count, share count)
         * @param {string} awemeIds 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoStatisticsApiV1DouyinAppV3FetchVideoStatisticsGet(awemeIds: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchVideoStatisticsApiV1DouyinAppV3FetchVideoStatisticsGet(awemeIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据视频ID获取作品的统计数据 - 抖音大多数接口已经不再返回作品的播放数，只能通过此接口获取。 - 可以获取到的统计有：     - 点赞数（digg_count）     - 下载数（download_count）     - 播放数（play_count）     - 分享数（share_count） ### 参数: - aweme_ids: 作品id，支持多个视频id，用逗号隔开即可，不能超过2个，单个也可以，则无需逗号。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistical data of the Post according to the video ID - Most of the Douyin interfaces no longer return the number of plays of the Post, and can only be obtained through this interface. - List of statistics that can be obtained:     - Like count (digg_count)     - Download count (download_count)     - Play count (play_count)     - Share count (share_count) ### Parameters: - aweme_ids: Video id, supports multiple video ids, separated by commas, no more than 2, single is also possible, no need for commas. ### Return: - Post statistics data  # [示例/Example] aweme_ids = \"7448118827402972455,7126745726494821640\"
         * @summary 根据视频ID获取作品的统计数据（点赞数、下载数、播放数、分享数）/Get the statistical data of the Post according to the video ID (like count, download count, play count, share count)
         * @param {string} awemeIds 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoStatisticsApiV1DouyinAppV3FetchVideoStatisticsGet_31(awemeIds: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).fetchVideoStatisticsApiV1DouyinAppV3FetchVideoStatisticsGet_31(awemeIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音短链接 ### 参数: - url: 抖音链接 ### 返回: - 短链接数据  # [English] ### Purpose: - Generate Douyin short link ### Parameters: - url: Douyin link ### Return: - Short link data  # [示例/Example] url = \"https://www.douyin.com/passport/web/logout/\"
         * @summary 生成抖音短链接/Generate Douyin short link
         * @param {string} url 抖音链接/Douyin link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateDouyinShortUrlApiV1DouyinAppV3GenerateDouyinShortUrlGet(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).generateDouyinShortUrlApiV1DouyinAppV3GenerateDouyinShortUrlGet(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音短链接 ### 参数: - url: 抖音链接 ### 返回: - 短链接数据  # [English] ### Purpose: - Generate Douyin short link ### Parameters: - url: Douyin link ### Return: - Short link data  # [示例/Example] url = \"https://www.douyin.com/passport/web/logout/\"
         * @summary 生成抖音短链接/Generate Douyin short link
         * @param {string} url 抖音链接/Douyin link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateDouyinShortUrlApiV1DouyinAppV3GenerateDouyinShortUrlGet_32(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).generateDouyinShortUrlApiV1DouyinAppV3GenerateDouyinShortUrlGet_32(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音视频分享二维码 ### 参数: - object_id: 作品id或作者uid ### 返回: - 二维码数据  # [English] ### Purpose: - Generate Douyin video share QR code ### Parameters: - object_id: Video id or author uid ### Return: - QR code data  # [示例/Example] object_id = \"7348044435755846962\"
         * @summary 生成抖音视频分享二维码/Generate Douyin video share QR code
         * @param {string} objectId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateDouyinVideoShareQrcodeApiV1DouyinAppV3GenerateDouyinVideoShareQrcodeGet(objectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).generateDouyinVideoShareQrcodeApiV1DouyinAppV3GenerateDouyinVideoShareQrcodeGet(objectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音视频分享二维码 ### 参数: - object_id: 作品id或作者uid ### 返回: - 二维码数据  # [English] ### Purpose: - Generate Douyin video share QR code ### Parameters: - object_id: Video id or author uid ### Return: - QR code data  # [示例/Example] object_id = \"7348044435755846962\"
         * @summary 生成抖音视频分享二维码/Generate Douyin video share QR code
         * @param {string} objectId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateDouyinVideoShareQrcodeApiV1DouyinAppV3GenerateDouyinVideoShareQrcodeGet_33(objectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).generateDouyinVideoShareQrcodeApiV1DouyinAppV3GenerateDouyinVideoShareQrcodeGet_33(objectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlerUserProfileApiV1DouyinAppV3HandlerUserProfileGet(secUserId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).handlerUserProfileApiV1DouyinAppV3HandlerUserProfileGet(secUserId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlerUserProfileApiV1DouyinAppV3HandlerUserProfileGet_34(secUserId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).handlerUserProfileApiV1DouyinAppV3HandlerUserProfileGet_34(secUserId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword  ### Return: - Share link  # [示例/Example] keyword = \"雷军\"
         * @summary 生成抖音分享链接，唤起抖音APP，跳转指定关键词搜索结果/Generate Douyin share link, call Douyin APP, and jump to the specified keyword search result
         * @param {string} keyword 关键词/Keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openDouyinAppToKeywordSearchApiV1DouyinAppV3OpenDouyinAppToKeywordSearchGet(keyword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).openDouyinAppToKeywordSearchApiV1DouyinAppV3OpenDouyinAppToKeywordSearchGet(keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword  ### Return: - Share link  # [示例/Example] keyword = \"雷军\"
         * @summary 生成抖音分享链接，唤起抖音APP，跳转指定关键词搜索结果/Generate Douyin share link, call Douyin APP, and jump to the specified keyword search result
         * @param {string} keyword 关键词/Keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openDouyinAppToKeywordSearchApiV1DouyinAppV3OpenDouyinAppToKeywordSearchGet_35(keyword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).openDouyinAppToKeywordSearchApiV1DouyinAppV3OpenDouyinAppToKeywordSearchGet_35(keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，给指定用户发送私信。  ### 参数: - uid: 用户id - sec_uid: 用户sec_uid - 注意: 请确保user_id和sec_uid都有值，否则无法发送私信给指定用户。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and send private messages to specified users  ### Parameters: - uid: User id - sec_uid: User sec_uid - Note: Please make sure that both user_id and sec_uid have values, otherwise you cannot send private messages to the specified user.  ### Return: - Share link  # [示例/Example] uid = \"96874812426\" sec_uid = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\"
         * @summary 生成抖音分享链接，唤起抖音APP，给指定用户发送私信/Generate Douyin share link, call Douyin APP, and send private messages to specified users
         * @param {string} uid 用户id/User id
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openDouyinAppToSendPrivateMessageApiV1DouyinAppV3OpenDouyinAppToSendPrivateMessageGet(uid: string, secUid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).openDouyinAppToSendPrivateMessageApiV1DouyinAppV3OpenDouyinAppToSendPrivateMessageGet(uid, secUid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，给指定用户发送私信。  ### 参数: - uid: 用户id - sec_uid: 用户sec_uid - 注意: 请确保user_id和sec_uid都有值，否则无法发送私信给指定用户。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and send private messages to specified users  ### Parameters: - uid: User id - sec_uid: User sec_uid - Note: Please make sure that both user_id and sec_uid have values, otherwise you cannot send private messages to the specified user.  ### Return: - Share link  # [示例/Example] uid = \"96874812426\" sec_uid = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\"
         * @summary 生成抖音分享链接，唤起抖音APP，给指定用户发送私信/Generate Douyin share link, call Douyin APP, and send private messages to specified users
         * @param {string} uid 用户id/User id
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openDouyinAppToSendPrivateMessageApiV1DouyinAppV3OpenDouyinAppToSendPrivateMessageGet_36(uid: string, secUid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).openDouyinAppToSendPrivateMessageApiV1DouyinAppV3OpenDouyinAppToSendPrivateMessageGet_36(uid, secUid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定用户主页。  ### 参数: - uid: 用户id - sec_uid: 用户sec_uid - 注意: 请确保user_id和sec_uid都有值，否则无法跳转到指定用户主页。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified user profile  ### Parameters: - uid: User id - sec_uid: User sec_uid - Note: Please make sure that both user_id and sec_uid have values, otherwise you cannot jump to the specified user profile.  ### Return: - Share link  # [示例/Example] uid = \"96874812426\" sec_uid = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\"
         * @summary 生成抖音分享链接，唤起抖音APP，跳转指定用户主页/Generate Douyin share link, call Douyin APP, and jump to the specified user profile
         * @param {string} uid 用户id/User id
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openDouyinAppToUserProfileApiV1DouyinAppV3OpenDouyinAppToUserProfileGet(uid: string, secUid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).openDouyinAppToUserProfileApiV1DouyinAppV3OpenDouyinAppToUserProfileGet(uid, secUid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定用户主页。  ### 参数: - uid: 用户id - sec_uid: 用户sec_uid - 注意: 请确保user_id和sec_uid都有值，否则无法跳转到指定用户主页。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified user profile  ### Parameters: - uid: User id - sec_uid: User sec_uid - Note: Please make sure that both user_id and sec_uid have values, otherwise you cannot jump to the specified user profile.  ### Return: - Share link  # [示例/Example] uid = \"96874812426\" sec_uid = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\"
         * @summary 生成抖音分享链接，唤起抖音APP，跳转指定用户主页/Generate Douyin share link, call Douyin APP, and jump to the specified user profile
         * @param {string} uid 用户id/User id
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openDouyinAppToUserProfileApiV1DouyinAppV3OpenDouyinAppToUserProfileGet_37(uid: string, secUid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).openDouyinAppToUserProfileApiV1DouyinAppV3OpenDouyinAppToUserProfileGet_37(uid, secUid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified video  ### Parameters: - aweme_id: Video id  ### Return: - Share link  # [示例/Example] aweme_id = \"7197598285882789120\"
         * @summary 生成抖音分享链接，唤起抖音APP，跳转指定作品详情页/Generate Douyin share link, call Douyin APP, and jump to the specified video details page
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openDouyinAppToVideoDetailApiV1DouyinAppV3OpenDouyinAppToVideoDetailGet(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).openDouyinAppToVideoDetailApiV1DouyinAppV3OpenDouyinAppToVideoDetailGet(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified video  ### Parameters: - aweme_id: Video id  ### Return: - Share link  # [示例/Example] aweme_id = \"7197598285882789120\"
         * @summary 生成抖音分享链接，唤起抖音APP，跳转指定作品详情页/Generate Douyin share link, call Douyin APP, and jump to the specified video details page
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openDouyinAppToVideoDetailApiV1DouyinAppV3OpenDouyinAppToVideoDetailGet_38(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).openDouyinAppToVideoDetailApiV1DouyinAppV3OpenDouyinAppToVideoDetailGet_38(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device in Douyin APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, with http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy = \"http://username:password@ip:port\"  # [响应/Response] ```json {     \"code\": 200,     \"router\": \"/api/v1/douyin/app/v3/register_device\",     \"params\": {         \"proxy\": \"username:password@ip:port\"     },     \"data\": {         \"iid\": \"3631064037200330\",         \"device_id\": \"3631064037196234\",         \"mssdk_token\": \"\",         \"device_platform\": \"android\",         \"channel\": \"xiaomi_64_1775\",         \"version_code\": 240900,         \"version_name\": \"24.9.0\",         \"manifest_version_code\": 240901,         \"update_version_code\": 24909900,         \"device_type\": \"V1963A\",         \"device_brand\": \"vivo\",         \"device_model\": \"V1963A\",         \"openudid\": \"5d736335afc17aab\",         \"os_api\": 29,         \"os_version\": \"10\",         \"resolution\": \"2400x1080\",         \"dpi\": 480,         \"host_abi\": \"arm64-v8a\",         \"ua\": \"com.ss.android.ugc.aweme/240901 (Linux; U; Android 10; zh_CN; V1963A; Build/compiler10301842;tt-ok/3.12.13.4-tiktok)\",         \"cookies\": {             \"install_id\": \"3631064037200330\",             \"odin_tt\": \"5ef413aaa319b3a4077814a1da3d3e1bcec3e8640ddc3ad30945a8518f59d1563d24c3b7a3c59d97fbd5344f13208a25cf143312acf4462b028e56cd0b611cc3fc2a64318f7375470d6db86440f92841\",             \"d_ticket\": \"42186c5b0c54ea1a2a9e02d4e62bf6ab\",             \"store-region\": \"cn-js\",             \"store-region-src\": \"did\",             \"multi_sids\": \"462868309327184:38167255076198698951907954929873\",             \"passport_csrf_token\": \"6f75287240634ad1f51f3b3bdcdb5424\",             \"passport_csrf_token_default\": \"6f75287240634ad1f51f3b3bdcdb5424\",             \"ttreq\": \"1$7f616210b41fc044b1f164542ac4e064288b5163\"         },         \"lanusk\": \"\",         \"device_manufacturer\": \"vivo\",         \"uuid\": \"357125675341697\",         \"cdid\": \"f64372bf-4d1d-4883-bc8a-d3d6fa87a9e3\",         \"first_launch_timestamp\": 1726970498636,         \"x_tt_dt\": \"AAA2FGV24A2GAOHJJ3D3XCJ32IZDZ26XXKMQAOTDNUDWTB644ISU5YA3GBYVX2Y3XVOQ3ISDH3UA4JXGGNFXBLJ6AAZU7QTIBKHFYJLDJMDG5K36LVPBRCKLHW2XM\",         \"BootTime\": 1726980411,         \"MbTime\": 1726780411,         \"server_time\": 1726980500,         \"mc\": \"2A:66:7A:2D:8B:29\",         \"rom\": \"compiler10301842\",         \"rom_version\": \"PD1963-user 10 QP1A.190711.020 compiler10301842 release-keys\"     } } ```
         * @summary 抖音APP注册设备/Douyin APP register device
         * @param {string} [proxy] 代理/Proxy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerDeviceApiV1DouyinAppV3RegisterDeviceGet(proxy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).registerDeviceApiV1DouyinAppV3RegisterDeviceGet(proxy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 抖音APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device in Douyin APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, with http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy = \"http://username:password@ip:port\"  # [响应/Response] ```json {     \"code\": 200,     \"router\": \"/api/v1/douyin/app/v3/register_device\",     \"params\": {         \"proxy\": \"username:password@ip:port\"     },     \"data\": {         \"iid\": \"3631064037200330\",         \"device_id\": \"3631064037196234\",         \"mssdk_token\": \"\",         \"device_platform\": \"android\",         \"channel\": \"xiaomi_64_1775\",         \"version_code\": 240900,         \"version_name\": \"24.9.0\",         \"manifest_version_code\": 240901,         \"update_version_code\": 24909900,         \"device_type\": \"V1963A\",         \"device_brand\": \"vivo\",         \"device_model\": \"V1963A\",         \"openudid\": \"5d736335afc17aab\",         \"os_api\": 29,         \"os_version\": \"10\",         \"resolution\": \"2400x1080\",         \"dpi\": 480,         \"host_abi\": \"arm64-v8a\",         \"ua\": \"com.ss.android.ugc.aweme/240901 (Linux; U; Android 10; zh_CN; V1963A; Build/compiler10301842;tt-ok/3.12.13.4-tiktok)\",         \"cookies\": {             \"install_id\": \"3631064037200330\",             \"odin_tt\": \"5ef413aaa319b3a4077814a1da3d3e1bcec3e8640ddc3ad30945a8518f59d1563d24c3b7a3c59d97fbd5344f13208a25cf143312acf4462b028e56cd0b611cc3fc2a64318f7375470d6db86440f92841\",             \"d_ticket\": \"42186c5b0c54ea1a2a9e02d4e62bf6ab\",             \"store-region\": \"cn-js\",             \"store-region-src\": \"did\",             \"multi_sids\": \"462868309327184:38167255076198698951907954929873\",             \"passport_csrf_token\": \"6f75287240634ad1f51f3b3bdcdb5424\",             \"passport_csrf_token_default\": \"6f75287240634ad1f51f3b3bdcdb5424\",             \"ttreq\": \"1$7f616210b41fc044b1f164542ac4e064288b5163\"         },         \"lanusk\": \"\",         \"device_manufacturer\": \"vivo\",         \"uuid\": \"357125675341697\",         \"cdid\": \"f64372bf-4d1d-4883-bc8a-d3d6fa87a9e3\",         \"first_launch_timestamp\": 1726970498636,         \"x_tt_dt\": \"AAA2FGV24A2GAOHJJ3D3XCJ32IZDZ26XXKMQAOTDNUDWTB644ISU5YA3GBYVX2Y3XVOQ3ISDH3UA4JXGGNFXBLJ6AAZU7QTIBKHFYJLDJMDG5K36LVPBRCKLHW2XM\",         \"BootTime\": 1726980411,         \"MbTime\": 1726780411,         \"server_time\": 1726980500,         \"mc\": \"2A:66:7A:2D:8B:29\",         \"rom\": \"compiler10301842\",         \"rom_version\": \"PD1963-user 10 QP1A.190711.020 compiler10301842 release-keys\"     } } ```
         * @summary 抖音APP注册设备/Douyin APP register device
         * @param {string} [proxy] 代理/Proxy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerDeviceApiV1DouyinAppV3RegisterDeviceGet_39(proxy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV3APIApiAxiosParamCreator(configuration).registerDeviceApiV1DouyinAppV3RegisterDeviceGet_39(proxy, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DouyinAppV3APIApi - factory interface
 * @export
 */
export const DouyinAppV3APIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 根据视频ID来增加作品的播放数 - 该接口默认使用游客Cookie，如果需要使用登录用户的Cookie，请在参数中传入。 - 单一作品每次调用增加1次播放数，请求约 `1000` 次后会被抖音限制，需要等待一段时间（如：2小时后）后再继续调用。 - 该限制是针对作品的，不是针对接口的，在未登录的情况下，使用不同IP的浏览器或在APP中浏览作品，该作品的播放数也不会增加。 - 可以携带抖音网页端的Cookie来请求此接口，但是不保证一定有效，需要自行测试。 - 上述的限制是根据测试结果得出的，具体限制可能会有所不同，仅供参考。 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - cookie: 可选，默认使用游客Cookie ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID - This interface uses guest Cookie by default. If you need to use the Cookie of the logged-in user, please pass it in the parameters. - Each call to a single work increases the number of plays by 1. After about `1000` calls, Douyin will restrict it. You need to wait for a period of time (such as 2 hours) before continuing to call. - This restriction is for the work, not for the interface. When browsing the work without logging in, using different IP browsers or browsing the work in the APP, the number of plays of the work will not increase. - You can carry the Cookie of the Douyin web page to request this interface, but it is not guaranteed to be effective and needs to be tested by yourself. - The above restrictions are based on test results, and the specific restrictions may vary, for reference only. ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - cookie: Optional, use guest Cookie by default ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type = 0 item_id = \"7197598285882789120\" cookie = None
         * @summary 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
         * @param {number} awemeType 作品类型/Video type
         * @param {string} itemId 作品id/Video id
         * @param {string} [cookie] 可选，默认使用游客Cookie/Optional, use guest Cookie by default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideoPlayCountApiV1DouyinAppV3AddVideoPlayCountGet(awemeType: number, itemId: string, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).addVideoPlayCountApiV1DouyinAppV3AddVideoPlayCountGet(awemeType, itemId, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据视频ID来增加作品的播放数 - 该接口默认使用游客Cookie，如果需要使用登录用户的Cookie，请在参数中传入。 - 单一作品每次调用增加1次播放数，请求约 `1000` 次后会被抖音限制，需要等待一段时间（如：2小时后）后再继续调用。 - 该限制是针对作品的，不是针对接口的，在未登录的情况下，使用不同IP的浏览器或在APP中浏览作品，该作品的播放数也不会增加。 - 可以携带抖音网页端的Cookie来请求此接口，但是不保证一定有效，需要自行测试。 - 上述的限制是根据测试结果得出的，具体限制可能会有所不同，仅供参考。 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - cookie: 可选，默认使用游客Cookie ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID - This interface uses guest Cookie by default. If you need to use the Cookie of the logged-in user, please pass it in the parameters. - Each call to a single work increases the number of plays by 1. After about `1000` calls, Douyin will restrict it. You need to wait for a period of time (such as 2 hours) before continuing to call. - This restriction is for the work, not for the interface. When browsing the work without logging in, using different IP browsers or browsing the work in the APP, the number of plays of the work will not increase. - You can carry the Cookie of the Douyin web page to request this interface, but it is not guaranteed to be effective and needs to be tested by yourself. - The above restrictions are based on test results, and the specific restrictions may vary, for reference only. ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - cookie: Optional, use guest Cookie by default ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type = 0 item_id = \"7197598285882789120\" cookie = None
         * @summary 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
         * @param {number} awemeType 作品类型/Video type
         * @param {string} itemId 作品id/Video id
         * @param {string} [cookie] 可选，默认使用游客Cookie/Optional, use guest Cookie by default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVideoPlayCountApiV1DouyinAppV3AddVideoPlayCountGet_1(awemeType: number, itemId: string, cookie?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).addVideoPlayCountApiV1DouyinAppV3AddVideoPlayCountGet_1(awemeType, itemId, cookie, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 - content_type: 0:不限 1:视频 2:图片 3:文章 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - content_type: 0: Unlimited 1: Video 2: Picture 3: Article ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" content_type = \"0\"
         * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_general_search_result）/Get comprehensive search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_general_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 时长/Duration
         * @param {string} [contentType] 内容类型/Content type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1DouyinAppV3FetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, contentType?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchGeneralSearchResultApiV1DouyinAppV3FetchGeneralSearchResultGet(keyword, offset, count, sortType, publishTime, filterDuration, contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 - content_type: 0:不限 1:视频 2:图片 3:文章 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - content_type: 0: Unlimited 1: Video 2: Picture 3: Article ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" content_type = \"0\"
         * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_general_search_result）/Get comprehensive search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_general_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 时长/Duration
         * @param {string} [contentType] 内容类型/Content type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1DouyinAppV3FetchGeneralSearchResultGet_2(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, contentType?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchGeneralSearchResultApiV1DouyinAppV3FetchGeneralSearchResultGet_2(keyword, offset, count, sortType, publishTime, filterDuration, contentType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1DouyinAppV3FetchHashtagDetailGet(chId: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchHashtagDetailApiV1DouyinAppV3FetchHashtagDetailGet(chId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1DouyinAppV3FetchHashtagDetailGet_3(chId: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchHashtagDetailApiV1DouyinAppV3FetchHashtagDetailGet_3(chId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_hashtag_search_result）/Get hashtag search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_hashtag_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagSearchResultApiV1DouyinAppV3FetchHashtagSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchHashtagSearchResultApiV1DouyinAppV3FetchHashtagSearchResultGet(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_hashtag_search_result）/Get hashtag search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_hashtag_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagSearchResultApiV1DouyinAppV3FetchHashtagSearchResultGet_4(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchHashtagSearchResultApiV1DouyinAppV3FetchHashtagSearchResultGet_4(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagVideoListApiV1DouyinAppV3FetchHashtagVideoListGet(chId: string, cursor?: number, sortType?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchHashtagVideoListApiV1DouyinAppV3FetchHashtagVideoListGet(chId, cursor, sortType, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagVideoListApiV1DouyinAppV3FetchHashtagVideoListGet_5(chId: string, cursor?: number, sortType?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchHashtagVideoListApiV1DouyinAppV3FetchHashtagVideoListGet_5(chId, cursor, sortType, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
         * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
         * @param {number} categoryId 分类id/Category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchApiV1DouyinAppV3FetchBrandHotSearchListDetailGet(categoryId: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchHotBrandSearchApiV1DouyinAppV3FetchBrandHotSearchListDetailGet(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
         * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
         * @param {number} categoryId 分类id/Category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchApiV1DouyinAppV3FetchBrandHotSearchListDetailGet_6(categoryId: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchHotBrandSearchApiV1DouyinAppV3FetchBrandHotSearchListDetailGet_6(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
         * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchCategoryApiV1DouyinAppV3FetchBrandHotSearchListGet(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchHotBrandSearchCategoryApiV1DouyinAppV3FetchBrandHotSearchListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
         * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchCategoryApiV1DouyinAppV3FetchBrandHotSearchListGet_7(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchHotBrandSearchCategoryApiV1DouyinAppV3FetchBrandHotSearchListGet_7(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音热榜数据，包括：     - 热点榜     - 种草榜     - 娱乐榜     - 社会榜     - 挑战榜 ### 参数: - board_type:     - 0: 热点榜（默认）     - 2: 其他榜单，如种草榜等，需要传入对应的board_sub_type参数。 - board_sub_type:     - 空字符串: 热点榜（默认）     - seeding: 种草榜     - 2: 娱乐榜     - 4: 社会榜     - hotspot_challenge: 挑战榜 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data, including:     - Hot search list     - Seeding list     - Entertainment list     - Social list     - Challenge list  ### Parameters: - board_type:     - 0: Hot search list (default)     - 2: Other lists, such as seeding list, etc., need to pass in the corresponding board_sub_type parameter. - board_sub_type:     - Empty string: Hot search list (default)     - seeding: Seeding list     - 2: Entertainment list     - 4: Social list     - hotspot_challenge: Challenge list ### Return: - Hot search list data  # [示例/Example] - 获取热点榜数据     - board_type = 0     - board_sub_type = \"\" - 获取种草榜数据     - board_type = 2     - board_sub_type = \"seeding\"
         * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
         * @param {string} [boardType] 榜单类型/Board type
         * @param {string} [boardSubType] 榜单子类型/Board sub type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchListApiV1DouyinAppV3FetchHotSearchListGet(boardType?: string, boardSubType?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchHotSearchListApiV1DouyinAppV3FetchHotSearchListGet(boardType, boardSubType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音热榜数据，包括：     - 热点榜     - 种草榜     - 娱乐榜     - 社会榜     - 挑战榜 ### 参数: - board_type:     - 0: 热点榜（默认）     - 2: 其他榜单，如种草榜等，需要传入对应的board_sub_type参数。 - board_sub_type:     - 空字符串: 热点榜（默认）     - seeding: 种草榜     - 2: 娱乐榜     - 4: 社会榜     - hotspot_challenge: 挑战榜 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data, including:     - Hot search list     - Seeding list     - Entertainment list     - Social list     - Challenge list  ### Parameters: - board_type:     - 0: Hot search list (default)     - 2: Other lists, such as seeding list, etc., need to pass in the corresponding board_sub_type parameter. - board_sub_type:     - Empty string: Hot search list (default)     - seeding: Seeding list     - 2: Entertainment list     - 4: Social list     - hotspot_challenge: Challenge list ### Return: - Hot search list data  # [示例/Example] - 获取热点榜数据     - board_type = 0     - board_sub_type = \"\" - 获取种草榜数据     - board_type = 2     - board_sub_type = \"seeding\"
         * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
         * @param {string} [boardType] 榜单类型/Board type
         * @param {string} [boardSubType] 榜单子类型/Board sub type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchListApiV1DouyinAppV3FetchHotSearchListGet_8(boardType?: string, boardSubType?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchHotSearchListApiV1DouyinAppV3FetchHotSearchListGet_8(boardType, boardSubType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
         * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveHotSearchListApiV1DouyinAppV3FetchLiveHotSearchListGet(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchLiveHotSearchListApiV1DouyinAppV3FetchLiveHotSearchListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
         * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveHotSearchListApiV1DouyinAppV3FetchLiveHotSearchListGet_9(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchLiveHotSearchListApiV1DouyinAppV3FetchLiveHotSearchListGet_9(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - cursor: 偏移量，从0开始，每次请求从上次请求返回响应中的cursor中获取。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - cursor: Offset, starting from 0, each request gets from the cursor in the response returned by the last request. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Live search results  # [示例/Example] keyword = \"小米商城\" cursor = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_live_search_result）/Get live search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_live_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [cursor] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveSearchResultApiV1DouyinAppV3FetchLiveSearchResultGet(keyword: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchLiveSearchResultApiV1DouyinAppV3FetchLiveSearchResultGet(keyword, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - cursor: 偏移量，从0开始，每次请求从上次请求返回响应中的cursor中获取。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - cursor: Offset, starting from 0, each request gets from the cursor in the response returned by the last request. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Live search results  # [示例/Example] keyword = \"小米商城\" cursor = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_live_search_result）/Get live search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_live_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [cursor] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveSearchResultApiV1DouyinAppV3FetchLiveSearchResultGet_10(keyword: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchLiveSearchResultApiV1DouyinAppV3FetchLiveSearchResultGet_10(keyword, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\"]
         * @summary 批量获取视频信息/Batch Get Video Information
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMultiVideoApiV1DouyinAppV3FetchMultiVideoPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchMultiVideoApiV1DouyinAppV3FetchMultiVideoPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\"]
         * @summary 批量获取视频信息/Batch Get Video Information
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMultiVideoApiV1DouyinAppV3FetchMultiVideoPost_11(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchMultiVideoApiV1DouyinAppV3FetchMultiVideoPost_11(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据视频ID获取作品的统计数据，支持多个视频id，一次性最多支持50个视频。 - 抖音大多数接口已经不再返回作品的播放数，只能通过此接口获取。 - 价格为：0.025$一次。 - 可以获取到的统计有：     - 点赞数（digg_count）     - 下载数（download_count）     - 播放数（play_count）     - 分享数（share_count） ### 参数: - aweme_ids: 作品id，支持多个视频id，用逗号隔开即可，不能超过50个，单个也可以，则无需逗号。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistical data of the Post according to the video ID, support multiple video ids, up to 50 videos at a time. - Most of the Douyin interfaces no longer return the number of plays of the Post, and can only be obtained through this interface. - Price: 0.025$ each time. - List of statistics that can be obtained:     - Like count (digg_count)     - Download count (download_count)     - Play count (play_count)     - Share count (share_count) ### Parameters: - aweme_ids: Video id, supports multiple video ids, separated by commas, no more than 50, single is also possible, no need for commas. ### Return: - Post statistics data  # [示例/Example] aweme_ids = \"7448118827402972455,7126745726494821640\"
         * @summary 根据视频ID批量获取作品的统计数据（点赞数、下载数、播放数、分享数）/Get the statistical data of the Post according to the video ID (like count, download count, play count, share count)
         * @param {string} awemeIds 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMultiVideoStatisticsApiV1DouyinAppV3FetchMultiVideoStatisticsGet(awemeIds: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchMultiVideoStatisticsApiV1DouyinAppV3FetchMultiVideoStatisticsGet(awemeIds, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据视频ID获取作品的统计数据，支持多个视频id，一次性最多支持50个视频。 - 抖音大多数接口已经不再返回作品的播放数，只能通过此接口获取。 - 价格为：0.025$一次。 - 可以获取到的统计有：     - 点赞数（digg_count）     - 下载数（download_count）     - 播放数（play_count）     - 分享数（share_count） ### 参数: - aweme_ids: 作品id，支持多个视频id，用逗号隔开即可，不能超过50个，单个也可以，则无需逗号。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistical data of the Post according to the video ID, support multiple video ids, up to 50 videos at a time. - Most of the Douyin interfaces no longer return the number of plays of the Post, and can only be obtained through this interface. - Price: 0.025$ each time. - List of statistics that can be obtained:     - Like count (digg_count)     - Download count (download_count)     - Play count (play_count)     - Share count (share_count) ### Parameters: - aweme_ids: Video id, supports multiple video ids, separated by commas, no more than 50, single is also possible, no need for commas. ### Return: - Post statistics data  # [示例/Example] aweme_ids = \"7448118827402972455,7126745726494821640\"
         * @summary 根据视频ID批量获取作品的统计数据（点赞数、下载数、播放数、分享数）/Get the statistical data of the Post according to the video ID (like count, download count, play count, share count)
         * @param {string} awemeIds 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMultiVideoStatisticsApiV1DouyinAppV3FetchMultiVideoStatisticsGet_12(awemeIds: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchMultiVideoStatisticsApiV1DouyinAppV3FetchMultiVideoStatisticsGet_12(awemeIds, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicDetailApiV1DouyinAppV3FetchMusicDetailGet(musicId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchMusicDetailApiV1DouyinAppV3FetchMusicDetailGet(musicId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicDetailApiV1DouyinAppV3FetchMusicDetailGet_13(musicId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchMusicDetailApiV1DouyinAppV3FetchMusicDetailGet_13(musicId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
         * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicHotSearchListApiV1DouyinAppV3FetchMusicHotSearchListGet(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchMusicHotSearchListApiV1DouyinAppV3FetchMusicHotSearchListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
         * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicHotSearchListApiV1DouyinAppV3FetchMusicHotSearchListGet_14(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchMusicHotSearchListApiV1DouyinAppV3FetchMusicHotSearchListGet_14(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_music_search_result）/Get music search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_music_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicSearchResultApiV1DouyinAppV3FetchMusicSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchMusicSearchResultApiV1DouyinAppV3FetchMusicSearchResultGet(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_music_search_result）/Get music search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_music_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicSearchResultApiV1DouyinAppV3FetchMusicSearchResultGet_15(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchMusicSearchResultApiV1DouyinAppV3FetchMusicSearchResultGet_15(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicVideoListApiV1DouyinAppV3FetchMusicVideoListGet(musicId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchMusicVideoListApiV1DouyinAppV3FetchMusicVideoListGet(musicId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicVideoListApiV1DouyinAppV3FetchMusicVideoListGet_16(musicId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchMusicVideoListApiV1DouyinAppV3FetchMusicVideoListGet_16(musicId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7448118827402972455\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinAppV3FetchOneVideoGet(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchOneVideoApiV1DouyinAppV3FetchOneVideoGet(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7448118827402972455\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinAppV3FetchOneVideoGet_17(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchOneVideoApiV1DouyinAppV3FetchOneVideoGet_17(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7448118827402972455\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinAppV3FetchOneVideoV2Get(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchOneVideoApiV1DouyinAppV3FetchOneVideoV2Get(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7448118827402972455\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinAppV3FetchOneVideoV2Get_18(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchOneVideoApiV1DouyinAppV3FetchOneVideoV2Get_18(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1DouyinAppV3FetchOneVideoByShareUrlGet(shareUrl: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchOneVideoByShareUrlApiV1DouyinAppV3FetchOneVideoByShareUrlGet(shareUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1DouyinAppV3FetchOneVideoByShareUrlGet_19(shareUrl: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchOneVideoByShareUrlApiV1DouyinAppV3FetchOneVideoByShareUrlGet_19(shareUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20
         * @summary 获取用户粉丝列表/Get user fans list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFansListApiV1DouyinAppV3FetchUserFansListGet(secUserId?: string, maxTime?: string, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchUserFansListApiV1DouyinAppV3FetchUserFansListGet(secUserId, maxTime, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20
         * @summary 获取用户粉丝列表/Get user fans list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFansListApiV1DouyinAppV3FetchUserFansListGet_20(secUserId?: string, maxTime?: string, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchUserFansListApiV1DouyinAppV3FetchUserFansListGet_20(secUserId, maxTime, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20
         * @summary 获取用户关注列表/Get user following list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1DouyinAppV3FetchUserFollowingListGet(secUserId?: string, maxTime?: string, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchUserFollowingListApiV1DouyinAppV3FetchUserFollowingListGet(secUserId, maxTime, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20
         * @summary 获取用户关注列表/Get user following list
         * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
         * @param {string} [maxTime] 最大时间戳/Maximum timestamp
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1DouyinAppV3FetchUserFollowingListGet_21(secUserId?: string, maxTime?: string, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchUserFollowingListApiV1DouyinAppV3FetchUserFollowingListGet_21(secUserId, maxTime, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1DouyinAppV3FetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchUserLikeVideosApiV1DouyinAppV3FetchUserLikeVideosGet(secUserId, maxCursor, counts, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1DouyinAppV3FetchUserLikeVideosGet_22(secUserId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchUserLikeVideosApiV1DouyinAppV3FetchUserLikeVideosGet_22(secUserId, maxCursor, counts, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1DouyinAppV3FetchUserPostVideosGet(secUserId: string, maxCursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchUserPostVideosApiV1DouyinAppV3FetchUserPostVideosGet(secUserId, maxCursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1DouyinAppV3FetchUserPostVideosGet_23(secUserId: string, maxCursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchUserPostVideosApiV1DouyinAppV3FetchUserPostVideosGet_23(secUserId, maxCursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - douyin_user_fans(粉丝数量):     - \"\": 不限     - \"0_1k\": 1000以下     - \"1k_1w\": 1000-1万     - \"1w_10w\": 1w-10w     - \"10w_100w\": 10w-100w     - \"100w_\": 100w以上 - douyin_user_type(用户类型，请使用英文而不是中文):     - \"\": 不限     - \"common_user\": 普通用户     - \"enterprise_user\": 企业认证     - \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - douyin_user_fans(Fans):     - \"\": Unlimited     - \"0_1k\": Less than 1000     - \"1k_1w\": 1000-10,000     - \"1w_10w\": 10,000-100,000     - \"10w_100w\": 100,000-1,000,000     - \"100w_\": More than 1,000,000 - douyin_user_type(User type, please use English instead of Chinese):     - \"\": Unlimited     - \"common_user\": Common user     - \"enterprise_user\": Enterprise certification     - \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_user_search_result_v2）/Get user search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_user_search_result_v2)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [douyinUserFans] 粉丝数/Fans
         * @param {string} [douyinUserType] 用户类型/User type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1DouyinAppV3FetchUserSearchResultGet(keyword: string, offset?: number, count?: number, douyinUserFans?: string, douyinUserType?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchUserSearchResultApiV1DouyinAppV3FetchUserSearchResultGet(keyword, offset, count, douyinUserFans, douyinUserType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - douyin_user_fans(粉丝数量):     - \"\": 不限     - \"0_1k\": 1000以下     - \"1k_1w\": 1000-1万     - \"1w_10w\": 1w-10w     - \"10w_100w\": 10w-100w     - \"100w_\": 100w以上 - douyin_user_type(用户类型，请使用英文而不是中文):     - \"\": 不限     - \"common_user\": 普通用户     - \"enterprise_user\": 企业认证     - \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - douyin_user_fans(Fans):     - \"\": Unlimited     - \"0_1k\": Less than 1000     - \"1k_1w\": 1000-10,000     - \"1w_10w\": 10,000-100,000     - \"10w_100w\": 100,000-1,000,000     - \"100w_\": More than 1,000,000 - douyin_user_type(User type, please use English instead of Chinese):     - \"\": Unlimited     - \"common_user\": Common user     - \"enterprise_user\": Enterprise certification     - \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_user_search_result_v2）/Get user search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_user_search_result_v2)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [douyinUserFans] 粉丝数/Fans
         * @param {string} [douyinUserType] 用户类型/User type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1DouyinAppV3FetchUserSearchResultGet_24(keyword: string, offset?: number, count?: number, douyinUserFans?: string, douyinUserType?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchUserSearchResultApiV1DouyinAppV3FetchUserSearchResultGet_24(keyword, offset, count, douyinUserFans, douyinUserType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7448118827402972455\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1DouyinAppV3FetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchVideoCommentsApiV1DouyinAppV3FetchVideoCommentsGet(awemeId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7448118827402972455\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1DouyinAppV3FetchVideoCommentsGet_25(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchVideoCommentsApiV1DouyinAppV3FetchVideoCommentsGet_25(awemeId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1DouyinAppV3FetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchVideoCommentsReplyApiV1DouyinAppV3FetchVideoCommentRepliesGet(itemId, commentId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1DouyinAppV3FetchVideoCommentRepliesGet_26(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchVideoCommentsReplyApiV1DouyinAppV3FetchVideoCommentRepliesGet_26(itemId, commentId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集详情数据 ### 参数: - mix_id: 合集id ### 返回: - 视频合集详情数据  # [English] ### Purpose: - Get Douyin video mix detail data ### Parameters: - mix_id: Mix id ### Return: - Video mix detail data  # [示例/Example] mix_id = \"7302011174286002217\"
         * @summary 获取抖音视频合集详情数据/Get Douyin video mix detail data
         * @param {string} mixId 合集id/Mix id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoMixDetailApiV1DouyinAppV3FetchVideoMixDetailGet(mixId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchVideoMixDetailApiV1DouyinAppV3FetchVideoMixDetailGet(mixId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集详情数据 ### 参数: - mix_id: 合集id ### 返回: - 视频合集详情数据  # [English] ### Purpose: - Get Douyin video mix detail data ### Parameters: - mix_id: Mix id ### Return: - Video mix detail data  # [示例/Example] mix_id = \"7302011174286002217\"
         * @summary 获取抖音视频合集详情数据/Get Douyin video mix detail data
         * @param {string} mixId 合集id/Mix id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoMixDetailApiV1DouyinAppV3FetchVideoMixDetailGet_27(mixId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchVideoMixDetailApiV1DouyinAppV3FetchVideoMixDetailGet_27(mixId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集作品列表数据 ### 参数: - mix_id: 合集id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 视频合集作品列表数据  # [English] ### Purpose: - Get Douyin video mix post list data ### Parameters: - mix_id: Mix id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Video mix post list data  # [示例/Example] mix_id = \"7302011174286002217\" cursor = 0 count = 20
         * @summary 获取抖音视频合集作品列表数据/Get Douyin video mix post list data
         * @param {string} mixId 合集id/Mix id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoMixPostListApiV1DouyinAppV3FetchVideoMixPostListGet(mixId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchVideoMixPostListApiV1DouyinAppV3FetchVideoMixPostListGet(mixId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音视频合集作品列表数据 ### 参数: - mix_id: 合集id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 视频合集作品列表数据  # [English] ### Purpose: - Get Douyin video mix post list data ### Parameters: - mix_id: Mix id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Video mix post list data  # [示例/Example] mix_id = \"7302011174286002217\" cursor = 0 count = 20
         * @summary 获取抖音视频合集作品列表数据/Get Douyin video mix post list data
         * @param {string} mixId 合集id/Mix id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoMixPostListApiV1DouyinAppV3FetchVideoMixPostListGet_28(mixId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchVideoMixPostListApiV1DouyinAppV3FetchVideoMixPostListGet_28(mixId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"
         * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_video_search_result）/Get video search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_video_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 时长/Duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1DouyinAppV3FetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchVideoSearchResultApiV1DouyinAppV3FetchVideoSearchResultGet(keyword, offset, count, sortType, publishTime, filterDuration, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"
         * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_video_search_result）/Get video search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_video_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 时长/Duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1DouyinAppV3FetchVideoSearchResultGet_29(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchVideoSearchResultApiV1DouyinAppV3FetchVideoSearchResultGet_29(keyword, offset, count, sortType, publishTime, filterDuration, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"
         * @summary 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
         * @param {string} keyword 关键词/Keyword
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {number} [page] 页码/Page
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultV2ApiV1DouyinAppV3FetchVideoSearchResultV2Get(keyword: string, sortType?: string, publishTime?: string, filterDuration?: string, page?: number, searchId?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchVideoSearchResultV2ApiV1DouyinAppV3FetchVideoSearchResultV2Get(keyword, sortType, publishTime, filterDuration, page, searchId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"
         * @summary 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
         * @param {string} keyword 关键词/Keyword
         * @param {string} [sortType] 排序类型/Sort type
         * @param {string} [publishTime] 发布时间/Publish time
         * @param {string} [filterDuration] 视频时长/Duration filter
         * @param {number} [page] 页码/Page
         * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultV2ApiV1DouyinAppV3FetchVideoSearchResultV2Get_30(keyword: string, sortType?: string, publishTime?: string, filterDuration?: string, page?: number, searchId?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchVideoSearchResultV2ApiV1DouyinAppV3FetchVideoSearchResultV2Get_30(keyword, sortType, publishTime, filterDuration, page, searchId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据视频ID获取作品的统计数据 - 抖音大多数接口已经不再返回作品的播放数，只能通过此接口获取。 - 可以获取到的统计有：     - 点赞数（digg_count）     - 下载数（download_count）     - 播放数（play_count）     - 分享数（share_count） ### 参数: - aweme_ids: 作品id，支持多个视频id，用逗号隔开即可，不能超过2个，单个也可以，则无需逗号。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistical data of the Post according to the video ID - Most of the Douyin interfaces no longer return the number of plays of the Post, and can only be obtained through this interface. - List of statistics that can be obtained:     - Like count (digg_count)     - Download count (download_count)     - Play count (play_count)     - Share count (share_count) ### Parameters: - aweme_ids: Video id, supports multiple video ids, separated by commas, no more than 2, single is also possible, no need for commas. ### Return: - Post statistics data  # [示例/Example] aweme_ids = \"7448118827402972455,7126745726494821640\"
         * @summary 根据视频ID获取作品的统计数据（点赞数、下载数、播放数、分享数）/Get the statistical data of the Post according to the video ID (like count, download count, play count, share count)
         * @param {string} awemeIds 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoStatisticsApiV1DouyinAppV3FetchVideoStatisticsGet(awemeIds: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchVideoStatisticsApiV1DouyinAppV3FetchVideoStatisticsGet(awemeIds, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据视频ID获取作品的统计数据 - 抖音大多数接口已经不再返回作品的播放数，只能通过此接口获取。 - 可以获取到的统计有：     - 点赞数（digg_count）     - 下载数（download_count）     - 播放数（play_count）     - 分享数（share_count） ### 参数: - aweme_ids: 作品id，支持多个视频id，用逗号隔开即可，不能超过2个，单个也可以，则无需逗号。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistical data of the Post according to the video ID - Most of the Douyin interfaces no longer return the number of plays of the Post, and can only be obtained through this interface. - List of statistics that can be obtained:     - Like count (digg_count)     - Download count (download_count)     - Play count (play_count)     - Share count (share_count) ### Parameters: - aweme_ids: Video id, supports multiple video ids, separated by commas, no more than 2, single is also possible, no need for commas. ### Return: - Post statistics data  # [示例/Example] aweme_ids = \"7448118827402972455,7126745726494821640\"
         * @summary 根据视频ID获取作品的统计数据（点赞数、下载数、播放数、分享数）/Get the statistical data of the Post according to the video ID (like count, download count, play count, share count)
         * @param {string} awemeIds 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoStatisticsApiV1DouyinAppV3FetchVideoStatisticsGet_31(awemeIds: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).fetchVideoStatisticsApiV1DouyinAppV3FetchVideoStatisticsGet_31(awemeIds, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成抖音短链接 ### 参数: - url: 抖音链接 ### 返回: - 短链接数据  # [English] ### Purpose: - Generate Douyin short link ### Parameters: - url: Douyin link ### Return: - Short link data  # [示例/Example] url = \"https://www.douyin.com/passport/web/logout/\"
         * @summary 生成抖音短链接/Generate Douyin short link
         * @param {string} url 抖音链接/Douyin link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDouyinShortUrlApiV1DouyinAppV3GenerateDouyinShortUrlGet(url: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).generateDouyinShortUrlApiV1DouyinAppV3GenerateDouyinShortUrlGet(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成抖音短链接 ### 参数: - url: 抖音链接 ### 返回: - 短链接数据  # [English] ### Purpose: - Generate Douyin short link ### Parameters: - url: Douyin link ### Return: - Short link data  # [示例/Example] url = \"https://www.douyin.com/passport/web/logout/\"
         * @summary 生成抖音短链接/Generate Douyin short link
         * @param {string} url 抖音链接/Douyin link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDouyinShortUrlApiV1DouyinAppV3GenerateDouyinShortUrlGet_32(url: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).generateDouyinShortUrlApiV1DouyinAppV3GenerateDouyinShortUrlGet_32(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成抖音视频分享二维码 ### 参数: - object_id: 作品id或作者uid ### 返回: - 二维码数据  # [English] ### Purpose: - Generate Douyin video share QR code ### Parameters: - object_id: Video id or author uid ### Return: - QR code data  # [示例/Example] object_id = \"7348044435755846962\"
         * @summary 生成抖音视频分享二维码/Generate Douyin video share QR code
         * @param {string} objectId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDouyinVideoShareQrcodeApiV1DouyinAppV3GenerateDouyinVideoShareQrcodeGet(objectId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).generateDouyinVideoShareQrcodeApiV1DouyinAppV3GenerateDouyinVideoShareQrcodeGet(objectId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成抖音视频分享二维码 ### 参数: - object_id: 作品id或作者uid ### 返回: - 二维码数据  # [English] ### Purpose: - Generate Douyin video share QR code ### Parameters: - object_id: Video id or author uid ### Return: - QR code data  # [示例/Example] object_id = \"7348044435755846962\"
         * @summary 生成抖音视频分享二维码/Generate Douyin video share QR code
         * @param {string} objectId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDouyinVideoShareQrcodeApiV1DouyinAppV3GenerateDouyinVideoShareQrcodeGet_33(objectId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).generateDouyinVideoShareQrcodeApiV1DouyinAppV3GenerateDouyinVideoShareQrcodeGet_33(objectId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1DouyinAppV3HandlerUserProfileGet(secUserId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).handlerUserProfileApiV1DouyinAppV3HandlerUserProfileGet(secUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1DouyinAppV3HandlerUserProfileGet_34(secUserId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).handlerUserProfileApiV1DouyinAppV3HandlerUserProfileGet_34(secUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword  ### Return: - Share link  # [示例/Example] keyword = \"雷军\"
         * @summary 生成抖音分享链接，唤起抖音APP，跳转指定关键词搜索结果/Generate Douyin share link, call Douyin APP, and jump to the specified keyword search result
         * @param {string} keyword 关键词/Keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openDouyinAppToKeywordSearchApiV1DouyinAppV3OpenDouyinAppToKeywordSearchGet(keyword: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).openDouyinAppToKeywordSearchApiV1DouyinAppV3OpenDouyinAppToKeywordSearchGet(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword  ### Return: - Share link  # [示例/Example] keyword = \"雷军\"
         * @summary 生成抖音分享链接，唤起抖音APP，跳转指定关键词搜索结果/Generate Douyin share link, call Douyin APP, and jump to the specified keyword search result
         * @param {string} keyword 关键词/Keyword
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openDouyinAppToKeywordSearchApiV1DouyinAppV3OpenDouyinAppToKeywordSearchGet_35(keyword: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).openDouyinAppToKeywordSearchApiV1DouyinAppV3OpenDouyinAppToKeywordSearchGet_35(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，给指定用户发送私信。  ### 参数: - uid: 用户id - sec_uid: 用户sec_uid - 注意: 请确保user_id和sec_uid都有值，否则无法发送私信给指定用户。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and send private messages to specified users  ### Parameters: - uid: User id - sec_uid: User sec_uid - Note: Please make sure that both user_id and sec_uid have values, otherwise you cannot send private messages to the specified user.  ### Return: - Share link  # [示例/Example] uid = \"96874812426\" sec_uid = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\"
         * @summary 生成抖音分享链接，唤起抖音APP，给指定用户发送私信/Generate Douyin share link, call Douyin APP, and send private messages to specified users
         * @param {string} uid 用户id/User id
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openDouyinAppToSendPrivateMessageApiV1DouyinAppV3OpenDouyinAppToSendPrivateMessageGet(uid: string, secUid: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).openDouyinAppToSendPrivateMessageApiV1DouyinAppV3OpenDouyinAppToSendPrivateMessageGet(uid, secUid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，给指定用户发送私信。  ### 参数: - uid: 用户id - sec_uid: 用户sec_uid - 注意: 请确保user_id和sec_uid都有值，否则无法发送私信给指定用户。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and send private messages to specified users  ### Parameters: - uid: User id - sec_uid: User sec_uid - Note: Please make sure that both user_id and sec_uid have values, otherwise you cannot send private messages to the specified user.  ### Return: - Share link  # [示例/Example] uid = \"96874812426\" sec_uid = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\"
         * @summary 生成抖音分享链接，唤起抖音APP，给指定用户发送私信/Generate Douyin share link, call Douyin APP, and send private messages to specified users
         * @param {string} uid 用户id/User id
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openDouyinAppToSendPrivateMessageApiV1DouyinAppV3OpenDouyinAppToSendPrivateMessageGet_36(uid: string, secUid: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).openDouyinAppToSendPrivateMessageApiV1DouyinAppV3OpenDouyinAppToSendPrivateMessageGet_36(uid, secUid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定用户主页。  ### 参数: - uid: 用户id - sec_uid: 用户sec_uid - 注意: 请确保user_id和sec_uid都有值，否则无法跳转到指定用户主页。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified user profile  ### Parameters: - uid: User id - sec_uid: User sec_uid - Note: Please make sure that both user_id and sec_uid have values, otherwise you cannot jump to the specified user profile.  ### Return: - Share link  # [示例/Example] uid = \"96874812426\" sec_uid = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\"
         * @summary 生成抖音分享链接，唤起抖音APP，跳转指定用户主页/Generate Douyin share link, call Douyin APP, and jump to the specified user profile
         * @param {string} uid 用户id/User id
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openDouyinAppToUserProfileApiV1DouyinAppV3OpenDouyinAppToUserProfileGet(uid: string, secUid: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).openDouyinAppToUserProfileApiV1DouyinAppV3OpenDouyinAppToUserProfileGet(uid, secUid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定用户主页。  ### 参数: - uid: 用户id - sec_uid: 用户sec_uid - 注意: 请确保user_id和sec_uid都有值，否则无法跳转到指定用户主页。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified user profile  ### Parameters: - uid: User id - sec_uid: User sec_uid - Note: Please make sure that both user_id and sec_uid have values, otherwise you cannot jump to the specified user profile.  ### Return: - Share link  # [示例/Example] uid = \"96874812426\" sec_uid = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\"
         * @summary 生成抖音分享链接，唤起抖音APP，跳转指定用户主页/Generate Douyin share link, call Douyin APP, and jump to the specified user profile
         * @param {string} uid 用户id/User id
         * @param {string} secUid 用户sec_uid/User sec_uid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openDouyinAppToUserProfileApiV1DouyinAppV3OpenDouyinAppToUserProfileGet_37(uid: string, secUid: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).openDouyinAppToUserProfileApiV1DouyinAppV3OpenDouyinAppToUserProfileGet_37(uid, secUid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified video  ### Parameters: - aweme_id: Video id  ### Return: - Share link  # [示例/Example] aweme_id = \"7197598285882789120\"
         * @summary 生成抖音分享链接，唤起抖音APP，跳转指定作品详情页/Generate Douyin share link, call Douyin APP, and jump to the specified video details page
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openDouyinAppToVideoDetailApiV1DouyinAppV3OpenDouyinAppToVideoDetailGet(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).openDouyinAppToVideoDetailApiV1DouyinAppV3OpenDouyinAppToVideoDetailGet(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified video  ### Parameters: - aweme_id: Video id  ### Return: - Share link  # [示例/Example] aweme_id = \"7197598285882789120\"
         * @summary 生成抖音分享链接，唤起抖音APP，跳转指定作品详情页/Generate Douyin share link, call Douyin APP, and jump to the specified video details page
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openDouyinAppToVideoDetailApiV1DouyinAppV3OpenDouyinAppToVideoDetailGet_38(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).openDouyinAppToVideoDetailApiV1DouyinAppV3OpenDouyinAppToVideoDetailGet_38(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device in Douyin APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, with http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy = \"http://username:password@ip:port\"  # [响应/Response] ```json {     \"code\": 200,     \"router\": \"/api/v1/douyin/app/v3/register_device\",     \"params\": {         \"proxy\": \"username:password@ip:port\"     },     \"data\": {         \"iid\": \"3631064037200330\",         \"device_id\": \"3631064037196234\",         \"mssdk_token\": \"\",         \"device_platform\": \"android\",         \"channel\": \"xiaomi_64_1775\",         \"version_code\": 240900,         \"version_name\": \"24.9.0\",         \"manifest_version_code\": 240901,         \"update_version_code\": 24909900,         \"device_type\": \"V1963A\",         \"device_brand\": \"vivo\",         \"device_model\": \"V1963A\",         \"openudid\": \"5d736335afc17aab\",         \"os_api\": 29,         \"os_version\": \"10\",         \"resolution\": \"2400x1080\",         \"dpi\": 480,         \"host_abi\": \"arm64-v8a\",         \"ua\": \"com.ss.android.ugc.aweme/240901 (Linux; U; Android 10; zh_CN; V1963A; Build/compiler10301842;tt-ok/3.12.13.4-tiktok)\",         \"cookies\": {             \"install_id\": \"3631064037200330\",             \"odin_tt\": \"5ef413aaa319b3a4077814a1da3d3e1bcec3e8640ddc3ad30945a8518f59d1563d24c3b7a3c59d97fbd5344f13208a25cf143312acf4462b028e56cd0b611cc3fc2a64318f7375470d6db86440f92841\",             \"d_ticket\": \"42186c5b0c54ea1a2a9e02d4e62bf6ab\",             \"store-region\": \"cn-js\",             \"store-region-src\": \"did\",             \"multi_sids\": \"462868309327184:38167255076198698951907954929873\",             \"passport_csrf_token\": \"6f75287240634ad1f51f3b3bdcdb5424\",             \"passport_csrf_token_default\": \"6f75287240634ad1f51f3b3bdcdb5424\",             \"ttreq\": \"1$7f616210b41fc044b1f164542ac4e064288b5163\"         },         \"lanusk\": \"\",         \"device_manufacturer\": \"vivo\",         \"uuid\": \"357125675341697\",         \"cdid\": \"f64372bf-4d1d-4883-bc8a-d3d6fa87a9e3\",         \"first_launch_timestamp\": 1726970498636,         \"x_tt_dt\": \"AAA2FGV24A2GAOHJJ3D3XCJ32IZDZ26XXKMQAOTDNUDWTB644ISU5YA3GBYVX2Y3XVOQ3ISDH3UA4JXGGNFXBLJ6AAZU7QTIBKHFYJLDJMDG5K36LVPBRCKLHW2XM\",         \"BootTime\": 1726980411,         \"MbTime\": 1726780411,         \"server_time\": 1726980500,         \"mc\": \"2A:66:7A:2D:8B:29\",         \"rom\": \"compiler10301842\",         \"rom_version\": \"PD1963-user 10 QP1A.190711.020 compiler10301842 release-keys\"     } } ```
         * @summary 抖音APP注册设备/Douyin APP register device
         * @param {string} [proxy] 代理/Proxy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDeviceApiV1DouyinAppV3RegisterDeviceGet(proxy?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).registerDeviceApiV1DouyinAppV3RegisterDeviceGet(proxy, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 抖音APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device in Douyin APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, with http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy = \"http://username:password@ip:port\"  # [响应/Response] ```json {     \"code\": 200,     \"router\": \"/api/v1/douyin/app/v3/register_device\",     \"params\": {         \"proxy\": \"username:password@ip:port\"     },     \"data\": {         \"iid\": \"3631064037200330\",         \"device_id\": \"3631064037196234\",         \"mssdk_token\": \"\",         \"device_platform\": \"android\",         \"channel\": \"xiaomi_64_1775\",         \"version_code\": 240900,         \"version_name\": \"24.9.0\",         \"manifest_version_code\": 240901,         \"update_version_code\": 24909900,         \"device_type\": \"V1963A\",         \"device_brand\": \"vivo\",         \"device_model\": \"V1963A\",         \"openudid\": \"5d736335afc17aab\",         \"os_api\": 29,         \"os_version\": \"10\",         \"resolution\": \"2400x1080\",         \"dpi\": 480,         \"host_abi\": \"arm64-v8a\",         \"ua\": \"com.ss.android.ugc.aweme/240901 (Linux; U; Android 10; zh_CN; V1963A; Build/compiler10301842;tt-ok/3.12.13.4-tiktok)\",         \"cookies\": {             \"install_id\": \"3631064037200330\",             \"odin_tt\": \"5ef413aaa319b3a4077814a1da3d3e1bcec3e8640ddc3ad30945a8518f59d1563d24c3b7a3c59d97fbd5344f13208a25cf143312acf4462b028e56cd0b611cc3fc2a64318f7375470d6db86440f92841\",             \"d_ticket\": \"42186c5b0c54ea1a2a9e02d4e62bf6ab\",             \"store-region\": \"cn-js\",             \"store-region-src\": \"did\",             \"multi_sids\": \"462868309327184:38167255076198698951907954929873\",             \"passport_csrf_token\": \"6f75287240634ad1f51f3b3bdcdb5424\",             \"passport_csrf_token_default\": \"6f75287240634ad1f51f3b3bdcdb5424\",             \"ttreq\": \"1$7f616210b41fc044b1f164542ac4e064288b5163\"         },         \"lanusk\": \"\",         \"device_manufacturer\": \"vivo\",         \"uuid\": \"357125675341697\",         \"cdid\": \"f64372bf-4d1d-4883-bc8a-d3d6fa87a9e3\",         \"first_launch_timestamp\": 1726970498636,         \"x_tt_dt\": \"AAA2FGV24A2GAOHJJ3D3XCJ32IZDZ26XXKMQAOTDNUDWTB644ISU5YA3GBYVX2Y3XVOQ3ISDH3UA4JXGGNFXBLJ6AAZU7QTIBKHFYJLDJMDG5K36LVPBRCKLHW2XM\",         \"BootTime\": 1726980411,         \"MbTime\": 1726780411,         \"server_time\": 1726980500,         \"mc\": \"2A:66:7A:2D:8B:29\",         \"rom\": \"compiler10301842\",         \"rom_version\": \"PD1963-user 10 QP1A.190711.020 compiler10301842 release-keys\"     } } ```
         * @summary 抖音APP注册设备/Douyin APP register device
         * @param {string} [proxy] 代理/Proxy
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerDeviceApiV1DouyinAppV3RegisterDeviceGet_39(proxy?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV3APIApiFp(configuration).registerDeviceApiV1DouyinAppV3RegisterDeviceGet_39(proxy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DouyinAppV3APIApi - interface
 * @export
 * @interface DouyinAppV3APIApi
 */
export interface DouyinAppV3APIApiInterface {
    /**
     * # [中文] ### 用途: - 根据视频ID来增加作品的播放数 - 该接口默认使用游客Cookie，如果需要使用登录用户的Cookie，请在参数中传入。 - 单一作品每次调用增加1次播放数，请求约 `1000` 次后会被抖音限制，需要等待一段时间（如：2小时后）后再继续调用。 - 该限制是针对作品的，不是针对接口的，在未登录的情况下，使用不同IP的浏览器或在APP中浏览作品，该作品的播放数也不会增加。 - 可以携带抖音网页端的Cookie来请求此接口，但是不保证一定有效，需要自行测试。 - 上述的限制是根据测试结果得出的，具体限制可能会有所不同，仅供参考。 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - cookie: 可选，默认使用游客Cookie ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID - This interface uses guest Cookie by default. If you need to use the Cookie of the logged-in user, please pass it in the parameters. - Each call to a single work increases the number of plays by 1. After about `1000` calls, Douyin will restrict it. You need to wait for a period of time (such as 2 hours) before continuing to call. - This restriction is for the work, not for the interface. When browsing the work without logging in, using different IP browsers or browsing the work in the APP, the number of plays of the work will not increase. - You can carry the Cookie of the Douyin web page to request this interface, but it is not guaranteed to be effective and needs to be tested by yourself. - The above restrictions are based on test results, and the specific restrictions may vary, for reference only. ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - cookie: Optional, use guest Cookie by default ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type = 0 item_id = \"7197598285882789120\" cookie = None
     * @summary 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
     * @param {number} awemeType 作品类型/Video type
     * @param {string} itemId 作品id/Video id
     * @param {string} [cookie] 可选，默认使用游客Cookie/Optional, use guest Cookie by default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    addVideoPlayCountApiV1DouyinAppV3AddVideoPlayCountGet(awemeType: number, itemId: string, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据视频ID来增加作品的播放数 - 该接口默认使用游客Cookie，如果需要使用登录用户的Cookie，请在参数中传入。 - 单一作品每次调用增加1次播放数，请求约 `1000` 次后会被抖音限制，需要等待一段时间（如：2小时后）后再继续调用。 - 该限制是针对作品的，不是针对接口的，在未登录的情况下，使用不同IP的浏览器或在APP中浏览作品，该作品的播放数也不会增加。 - 可以携带抖音网页端的Cookie来请求此接口，但是不保证一定有效，需要自行测试。 - 上述的限制是根据测试结果得出的，具体限制可能会有所不同，仅供参考。 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - cookie: 可选，默认使用游客Cookie ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID - This interface uses guest Cookie by default. If you need to use the Cookie of the logged-in user, please pass it in the parameters. - Each call to a single work increases the number of plays by 1. After about `1000` calls, Douyin will restrict it. You need to wait for a period of time (such as 2 hours) before continuing to call. - This restriction is for the work, not for the interface. When browsing the work without logging in, using different IP browsers or browsing the work in the APP, the number of plays of the work will not increase. - You can carry the Cookie of the Douyin web page to request this interface, but it is not guaranteed to be effective and needs to be tested by yourself. - The above restrictions are based on test results, and the specific restrictions may vary, for reference only. ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - cookie: Optional, use guest Cookie by default ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type = 0 item_id = \"7197598285882789120\" cookie = None
     * @summary 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
     * @param {number} awemeType 作品类型/Video type
     * @param {string} itemId 作品id/Video id
     * @param {string} [cookie] 可选，默认使用游客Cookie/Optional, use guest Cookie by default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    addVideoPlayCountApiV1DouyinAppV3AddVideoPlayCountGet_1(awemeType: number, itemId: string, cookie?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 - content_type: 0:不限 1:视频 2:图片 3:文章 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - content_type: 0: Unlimited 1: Video 2: Picture 3: Article ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" content_type = \"0\"
     * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_general_search_result）/Get comprehensive search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_general_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 时长/Duration
     * @param {string} [contentType] 内容类型/Content type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchGeneralSearchResultApiV1DouyinAppV3FetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, contentType?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 - content_type: 0:不限 1:视频 2:图片 3:文章 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - content_type: 0: Unlimited 1: Video 2: Picture 3: Article ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" content_type = \"0\"
     * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_general_search_result）/Get comprehensive search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_general_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 时长/Duration
     * @param {string} [contentType] 内容类型/Content type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchGeneralSearchResultApiV1DouyinAppV3FetchGeneralSearchResultGet_2(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, contentType?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
     * @summary 获取指定话题的详情数据/Get details of specified hashtag
     * @param {number} chId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchHashtagDetailApiV1DouyinAppV3FetchHashtagDetailGet(chId: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
     * @summary 获取指定话题的详情数据/Get details of specified hashtag
     * @param {number} chId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchHashtagDetailApiV1DouyinAppV3FetchHashtagDetailGet_3(chId: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_hashtag_search_result）/Get hashtag search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_hashtag_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchHashtagSearchResultApiV1DouyinAppV3FetchHashtagSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_hashtag_search_result）/Get hashtag search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_hashtag_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchHashtagSearchResultApiV1DouyinAppV3FetchHashtagSearchResultGet_4(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
     * @summary 获取指定话题的作品数据/Get video list of specified hashtag
     * @param {string} chId 话题id/Hashtag id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchHashtagVideoListApiV1DouyinAppV3FetchHashtagVideoListGet(chId: string, cursor?: number, sortType?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
     * @summary 获取指定话题的作品数据/Get video list of specified hashtag
     * @param {string} chId 话题id/Hashtag id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchHashtagVideoListApiV1DouyinAppV3FetchHashtagVideoListGet_5(chId: string, cursor?: number, sortType?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
     * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
     * @param {number} categoryId 分类id/Category id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchHotBrandSearchApiV1DouyinAppV3FetchBrandHotSearchListDetailGet(categoryId: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
     * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
     * @param {number} categoryId 分类id/Category id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchHotBrandSearchApiV1DouyinAppV3FetchBrandHotSearchListDetailGet_6(categoryId: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
     * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchHotBrandSearchCategoryApiV1DouyinAppV3FetchBrandHotSearchListGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
     * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchHotBrandSearchCategoryApiV1DouyinAppV3FetchBrandHotSearchListGet_7(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音热榜数据，包括：     - 热点榜     - 种草榜     - 娱乐榜     - 社会榜     - 挑战榜 ### 参数: - board_type:     - 0: 热点榜（默认）     - 2: 其他榜单，如种草榜等，需要传入对应的board_sub_type参数。 - board_sub_type:     - 空字符串: 热点榜（默认）     - seeding: 种草榜     - 2: 娱乐榜     - 4: 社会榜     - hotspot_challenge: 挑战榜 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data, including:     - Hot search list     - Seeding list     - Entertainment list     - Social list     - Challenge list  ### Parameters: - board_type:     - 0: Hot search list (default)     - 2: Other lists, such as seeding list, etc., need to pass in the corresponding board_sub_type parameter. - board_sub_type:     - Empty string: Hot search list (default)     - seeding: Seeding list     - 2: Entertainment list     - 4: Social list     - hotspot_challenge: Challenge list ### Return: - Hot search list data  # [示例/Example] - 获取热点榜数据     - board_type = 0     - board_sub_type = \"\" - 获取种草榜数据     - board_type = 2     - board_sub_type = \"seeding\"
     * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
     * @param {string} [boardType] 榜单类型/Board type
     * @param {string} [boardSubType] 榜单子类型/Board sub type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchHotSearchListApiV1DouyinAppV3FetchHotSearchListGet(boardType?: string, boardSubType?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音热榜数据，包括：     - 热点榜     - 种草榜     - 娱乐榜     - 社会榜     - 挑战榜 ### 参数: - board_type:     - 0: 热点榜（默认）     - 2: 其他榜单，如种草榜等，需要传入对应的board_sub_type参数。 - board_sub_type:     - 空字符串: 热点榜（默认）     - seeding: 种草榜     - 2: 娱乐榜     - 4: 社会榜     - hotspot_challenge: 挑战榜 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data, including:     - Hot search list     - Seeding list     - Entertainment list     - Social list     - Challenge list  ### Parameters: - board_type:     - 0: Hot search list (default)     - 2: Other lists, such as seeding list, etc., need to pass in the corresponding board_sub_type parameter. - board_sub_type:     - Empty string: Hot search list (default)     - seeding: Seeding list     - 2: Entertainment list     - 4: Social list     - hotspot_challenge: Challenge list ### Return: - Hot search list data  # [示例/Example] - 获取热点榜数据     - board_type = 0     - board_sub_type = \"\" - 获取种草榜数据     - board_type = 2     - board_sub_type = \"seeding\"
     * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
     * @param {string} [boardType] 榜单类型/Board type
     * @param {string} [boardSubType] 榜单子类型/Board sub type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchHotSearchListApiV1DouyinAppV3FetchHotSearchListGet_8(boardType?: string, boardSubType?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
     * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchLiveHotSearchListApiV1DouyinAppV3FetchLiveHotSearchListGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
     * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchLiveHotSearchListApiV1DouyinAppV3FetchLiveHotSearchListGet_9(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - cursor: 偏移量，从0开始，每次请求从上次请求返回响应中的cursor中获取。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - cursor: Offset, starting from 0, each request gets from the cursor in the response returned by the last request. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Live search results  # [示例/Example] keyword = \"小米商城\" cursor = 0 count = 20
     * @summary 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_live_search_result）/Get live search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_live_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [cursor] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchLiveSearchResultApiV1DouyinAppV3FetchLiveSearchResultGet(keyword: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - cursor: 偏移量，从0开始，每次请求从上次请求返回响应中的cursor中获取。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - cursor: Offset, starting from 0, each request gets from the cursor in the response returned by the last request. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Live search results  # [示例/Example] keyword = \"小米商城\" cursor = 0 count = 20
     * @summary 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_live_search_result）/Get live search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_live_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [cursor] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchLiveSearchResultApiV1DouyinAppV3FetchLiveSearchResultGet_10(keyword: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\"]
     * @summary 批量获取视频信息/Batch Get Video Information
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchMultiVideoApiV1DouyinAppV3FetchMultiVideoPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\"]
     * @summary 批量获取视频信息/Batch Get Video Information
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchMultiVideoApiV1DouyinAppV3FetchMultiVideoPost_11(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据视频ID获取作品的统计数据，支持多个视频id，一次性最多支持50个视频。 - 抖音大多数接口已经不再返回作品的播放数，只能通过此接口获取。 - 价格为：0.025$一次。 - 可以获取到的统计有：     - 点赞数（digg_count）     - 下载数（download_count）     - 播放数（play_count）     - 分享数（share_count） ### 参数: - aweme_ids: 作品id，支持多个视频id，用逗号隔开即可，不能超过50个，单个也可以，则无需逗号。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistical data of the Post according to the video ID, support multiple video ids, up to 50 videos at a time. - Most of the Douyin interfaces no longer return the number of plays of the Post, and can only be obtained through this interface. - Price: 0.025$ each time. - List of statistics that can be obtained:     - Like count (digg_count)     - Download count (download_count)     - Play count (play_count)     - Share count (share_count) ### Parameters: - aweme_ids: Video id, supports multiple video ids, separated by commas, no more than 50, single is also possible, no need for commas. ### Return: - Post statistics data  # [示例/Example] aweme_ids = \"7448118827402972455,7126745726494821640\"
     * @summary 根据视频ID批量获取作品的统计数据（点赞数、下载数、播放数、分享数）/Get the statistical data of the Post according to the video ID (like count, download count, play count, share count)
     * @param {string} awemeIds 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchMultiVideoStatisticsApiV1DouyinAppV3FetchMultiVideoStatisticsGet(awemeIds: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据视频ID获取作品的统计数据，支持多个视频id，一次性最多支持50个视频。 - 抖音大多数接口已经不再返回作品的播放数，只能通过此接口获取。 - 价格为：0.025$一次。 - 可以获取到的统计有：     - 点赞数（digg_count）     - 下载数（download_count）     - 播放数（play_count）     - 分享数（share_count） ### 参数: - aweme_ids: 作品id，支持多个视频id，用逗号隔开即可，不能超过50个，单个也可以，则无需逗号。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistical data of the Post according to the video ID, support multiple video ids, up to 50 videos at a time. - Most of the Douyin interfaces no longer return the number of plays of the Post, and can only be obtained through this interface. - Price: 0.025$ each time. - List of statistics that can be obtained:     - Like count (digg_count)     - Download count (download_count)     - Play count (play_count)     - Share count (share_count) ### Parameters: - aweme_ids: Video id, supports multiple video ids, separated by commas, no more than 50, single is also possible, no need for commas. ### Return: - Post statistics data  # [示例/Example] aweme_ids = \"7448118827402972455,7126745726494821640\"
     * @summary 根据视频ID批量获取作品的统计数据（点赞数、下载数、播放数、分享数）/Get the statistical data of the Post according to the video ID (like count, download count, play count, share count)
     * @param {string} awemeIds 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchMultiVideoStatisticsApiV1DouyinAppV3FetchMultiVideoStatisticsGet_12(awemeIds: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
     * @summary 获取指定音乐的详情数据/Get details of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchMusicDetailApiV1DouyinAppV3FetchMusicDetailGet(musicId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
     * @summary 获取指定音乐的详情数据/Get details of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchMusicDetailApiV1DouyinAppV3FetchMusicDetailGet_13(musicId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
     * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchMusicHotSearchListApiV1DouyinAppV3FetchMusicHotSearchListGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
     * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchMusicHotSearchListApiV1DouyinAppV3FetchMusicHotSearchListGet_14(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_music_search_result）/Get music search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_music_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchMusicSearchResultApiV1DouyinAppV3FetchMusicSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_music_search_result）/Get music search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_music_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchMusicSearchResultApiV1DouyinAppV3FetchMusicSearchResultGet_15(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
     * @summary 获取指定音乐的视频列表数据/Get video list of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchMusicVideoListApiV1DouyinAppV3FetchMusicVideoListGet(musicId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
     * @summary 获取指定音乐的视频列表数据/Get video list of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchMusicVideoListApiV1DouyinAppV3FetchMusicVideoListGet_16(musicId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7448118827402972455\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchOneVideoApiV1DouyinAppV3FetchOneVideoGet(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7448118827402972455\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchOneVideoApiV1DouyinAppV3FetchOneVideoGet_17(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7448118827402972455\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchOneVideoApiV1DouyinAppV3FetchOneVideoV2Get(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7448118827402972455\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchOneVideoApiV1DouyinAppV3FetchOneVideoV2Get_18(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchOneVideoByShareUrlApiV1DouyinAppV3FetchOneVideoByShareUrlGet(shareUrl: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchOneVideoByShareUrlApiV1DouyinAppV3FetchOneVideoByShareUrlGet_19(shareUrl: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户粉丝列表 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20
     * @summary 获取用户粉丝列表/Get user fans list
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [maxTime] 最大时间戳/Maximum timestamp
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchUserFansListApiV1DouyinAppV3FetchUserFansListGet(secUserId?: string, maxTime?: string, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户粉丝列表 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20
     * @summary 获取用户粉丝列表/Get user fans list
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [maxTime] 最大时间戳/Maximum timestamp
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchUserFansListApiV1DouyinAppV3FetchUserFansListGet_20(secUserId?: string, maxTime?: string, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户关注列表 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20
     * @summary 获取用户关注列表/Get user following list
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [maxTime] 最大时间戳/Maximum timestamp
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchUserFollowingListApiV1DouyinAppV3FetchUserFollowingListGet(secUserId?: string, maxTime?: string, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户关注列表 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20
     * @summary 获取用户关注列表/Get user following list
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [maxTime] 最大时间戳/Maximum timestamp
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchUserFollowingListApiV1DouyinAppV3FetchUserFollowingListGet_21(secUserId?: string, maxTime?: string, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchUserLikeVideosApiV1DouyinAppV3FetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchUserLikeVideosApiV1DouyinAppV3FetchUserLikeVideosGet_22(secUserId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchUserPostVideosApiV1DouyinAppV3FetchUserPostVideosGet(secUserId: string, maxCursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchUserPostVideosApiV1DouyinAppV3FetchUserPostVideosGet_23(secUserId: string, maxCursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - douyin_user_fans(粉丝数量):     - \"\": 不限     - \"0_1k\": 1000以下     - \"1k_1w\": 1000-1万     - \"1w_10w\": 1w-10w     - \"10w_100w\": 10w-100w     - \"100w_\": 100w以上 - douyin_user_type(用户类型，请使用英文而不是中文):     - \"\": 不限     - \"common_user\": 普通用户     - \"enterprise_user\": 企业认证     - \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - douyin_user_fans(Fans):     - \"\": Unlimited     - \"0_1k\": Less than 1000     - \"1k_1w\": 1000-10,000     - \"1w_10w\": 10,000-100,000     - \"10w_100w\": 100,000-1,000,000     - \"100w_\": More than 1,000,000 - douyin_user_type(User type, please use English instead of Chinese):     - \"\": Unlimited     - \"common_user\": Common user     - \"enterprise_user\": Enterprise certification     - \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
     * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_user_search_result_v2）/Get user search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_user_search_result_v2)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [douyinUserFans] 粉丝数/Fans
     * @param {string} [douyinUserType] 用户类型/User type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchUserSearchResultApiV1DouyinAppV3FetchUserSearchResultGet(keyword: string, offset?: number, count?: number, douyinUserFans?: string, douyinUserType?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - douyin_user_fans(粉丝数量):     - \"\": 不限     - \"0_1k\": 1000以下     - \"1k_1w\": 1000-1万     - \"1w_10w\": 1w-10w     - \"10w_100w\": 10w-100w     - \"100w_\": 100w以上 - douyin_user_type(用户类型，请使用英文而不是中文):     - \"\": 不限     - \"common_user\": 普通用户     - \"enterprise_user\": 企业认证     - \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - douyin_user_fans(Fans):     - \"\": Unlimited     - \"0_1k\": Less than 1000     - \"1k_1w\": 1000-10,000     - \"1w_10w\": 10,000-100,000     - \"10w_100w\": 100,000-1,000,000     - \"100w_\": More than 1,000,000 - douyin_user_type(User type, please use English instead of Chinese):     - \"\": Unlimited     - \"common_user\": Common user     - \"enterprise_user\": Enterprise certification     - \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
     * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_user_search_result_v2）/Get user search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_user_search_result_v2)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [douyinUserFans] 粉丝数/Fans
     * @param {string} [douyinUserType] 用户类型/User type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchUserSearchResultApiV1DouyinAppV3FetchUserSearchResultGet_24(keyword: string, offset?: number, count?: number, douyinUserFans?: string, douyinUserType?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7448118827402972455\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchVideoCommentsApiV1DouyinAppV3FetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7448118827402972455\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchVideoCommentsApiV1DouyinAppV3FetchVideoCommentsGet_25(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchVideoCommentsReplyApiV1DouyinAppV3FetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchVideoCommentsReplyApiV1DouyinAppV3FetchVideoCommentRepliesGet_26(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音视频合集详情数据 ### 参数: - mix_id: 合集id ### 返回: - 视频合集详情数据  # [English] ### Purpose: - Get Douyin video mix detail data ### Parameters: - mix_id: Mix id ### Return: - Video mix detail data  # [示例/Example] mix_id = \"7302011174286002217\"
     * @summary 获取抖音视频合集详情数据/Get Douyin video mix detail data
     * @param {string} mixId 合集id/Mix id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchVideoMixDetailApiV1DouyinAppV3FetchVideoMixDetailGet(mixId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音视频合集详情数据 ### 参数: - mix_id: 合集id ### 返回: - 视频合集详情数据  # [English] ### Purpose: - Get Douyin video mix detail data ### Parameters: - mix_id: Mix id ### Return: - Video mix detail data  # [示例/Example] mix_id = \"7302011174286002217\"
     * @summary 获取抖音视频合集详情数据/Get Douyin video mix detail data
     * @param {string} mixId 合集id/Mix id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchVideoMixDetailApiV1DouyinAppV3FetchVideoMixDetailGet_27(mixId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音视频合集作品列表数据 ### 参数: - mix_id: 合集id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 视频合集作品列表数据  # [English] ### Purpose: - Get Douyin video mix post list data ### Parameters: - mix_id: Mix id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Video mix post list data  # [示例/Example] mix_id = \"7302011174286002217\" cursor = 0 count = 20
     * @summary 获取抖音视频合集作品列表数据/Get Douyin video mix post list data
     * @param {string} mixId 合集id/Mix id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchVideoMixPostListApiV1DouyinAppV3FetchVideoMixPostListGet(mixId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音视频合集作品列表数据 ### 参数: - mix_id: 合集id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 视频合集作品列表数据  # [English] ### Purpose: - Get Douyin video mix post list data ### Parameters: - mix_id: Mix id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Video mix post list data  # [示例/Example] mix_id = \"7302011174286002217\" cursor = 0 count = 20
     * @summary 获取抖音视频合集作品列表数据/Get Douyin video mix post list data
     * @param {string} mixId 合集id/Mix id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchVideoMixPostListApiV1DouyinAppV3FetchVideoMixPostListGet_28(mixId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"
     * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_video_search_result）/Get video search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_video_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 时长/Duration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchVideoSearchResultApiV1DouyinAppV3FetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"
     * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_video_search_result）/Get video search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_video_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 时长/Duration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchVideoSearchResultApiV1DouyinAppV3FetchVideoSearchResultGet_29(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"
     * @summary 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
     * @param {string} keyword 关键词/Keyword
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 视频时长/Duration filter
     * @param {number} [page] 页码/Page
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchVideoSearchResultV2ApiV1DouyinAppV3FetchVideoSearchResultV2Get(keyword: string, sortType?: string, publishTime?: string, filterDuration?: string, page?: number, searchId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"
     * @summary 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
     * @param {string} keyword 关键词/Keyword
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 视频时长/Duration filter
     * @param {number} [page] 页码/Page
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchVideoSearchResultV2ApiV1DouyinAppV3FetchVideoSearchResultV2Get_30(keyword: string, sortType?: string, publishTime?: string, filterDuration?: string, page?: number, searchId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据视频ID获取作品的统计数据 - 抖音大多数接口已经不再返回作品的播放数，只能通过此接口获取。 - 可以获取到的统计有：     - 点赞数（digg_count）     - 下载数（download_count）     - 播放数（play_count）     - 分享数（share_count） ### 参数: - aweme_ids: 作品id，支持多个视频id，用逗号隔开即可，不能超过2个，单个也可以，则无需逗号。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistical data of the Post according to the video ID - Most of the Douyin interfaces no longer return the number of plays of the Post, and can only be obtained through this interface. - List of statistics that can be obtained:     - Like count (digg_count)     - Download count (download_count)     - Play count (play_count)     - Share count (share_count) ### Parameters: - aweme_ids: Video id, supports multiple video ids, separated by commas, no more than 2, single is also possible, no need for commas. ### Return: - Post statistics data  # [示例/Example] aweme_ids = \"7448118827402972455,7126745726494821640\"
     * @summary 根据视频ID获取作品的统计数据（点赞数、下载数、播放数、分享数）/Get the statistical data of the Post according to the video ID (like count, download count, play count, share count)
     * @param {string} awemeIds 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchVideoStatisticsApiV1DouyinAppV3FetchVideoStatisticsGet(awemeIds: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据视频ID获取作品的统计数据 - 抖音大多数接口已经不再返回作品的播放数，只能通过此接口获取。 - 可以获取到的统计有：     - 点赞数（digg_count）     - 下载数（download_count）     - 播放数（play_count）     - 分享数（share_count） ### 参数: - aweme_ids: 作品id，支持多个视频id，用逗号隔开即可，不能超过2个，单个也可以，则无需逗号。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistical data of the Post according to the video ID - Most of the Douyin interfaces no longer return the number of plays of the Post, and can only be obtained through this interface. - List of statistics that can be obtained:     - Like count (digg_count)     - Download count (download_count)     - Play count (play_count)     - Share count (share_count) ### Parameters: - aweme_ids: Video id, supports multiple video ids, separated by commas, no more than 2, single is also possible, no need for commas. ### Return: - Post statistics data  # [示例/Example] aweme_ids = \"7448118827402972455,7126745726494821640\"
     * @summary 根据视频ID获取作品的统计数据（点赞数、下载数、播放数、分享数）/Get the statistical data of the Post according to the video ID (like count, download count, play count, share count)
     * @param {string} awemeIds 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    fetchVideoStatisticsApiV1DouyinAppV3FetchVideoStatisticsGet_31(awemeIds: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成抖音短链接 ### 参数: - url: 抖音链接 ### 返回: - 短链接数据  # [English] ### Purpose: - Generate Douyin short link ### Parameters: - url: Douyin link ### Return: - Short link data  # [示例/Example] url = \"https://www.douyin.com/passport/web/logout/\"
     * @summary 生成抖音短链接/Generate Douyin short link
     * @param {string} url 抖音链接/Douyin link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    generateDouyinShortUrlApiV1DouyinAppV3GenerateDouyinShortUrlGet(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成抖音短链接 ### 参数: - url: 抖音链接 ### 返回: - 短链接数据  # [English] ### Purpose: - Generate Douyin short link ### Parameters: - url: Douyin link ### Return: - Short link data  # [示例/Example] url = \"https://www.douyin.com/passport/web/logout/\"
     * @summary 生成抖音短链接/Generate Douyin short link
     * @param {string} url 抖音链接/Douyin link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    generateDouyinShortUrlApiV1DouyinAppV3GenerateDouyinShortUrlGet_32(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成抖音视频分享二维码 ### 参数: - object_id: 作品id或作者uid ### 返回: - 二维码数据  # [English] ### Purpose: - Generate Douyin video share QR code ### Parameters: - object_id: Video id or author uid ### Return: - QR code data  # [示例/Example] object_id = \"7348044435755846962\"
     * @summary 生成抖音视频分享二维码/Generate Douyin video share QR code
     * @param {string} objectId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    generateDouyinVideoShareQrcodeApiV1DouyinAppV3GenerateDouyinVideoShareQrcodeGet(objectId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成抖音视频分享二维码 ### 参数: - object_id: 作品id或作者uid ### 返回: - 二维码数据  # [English] ### Purpose: - Generate Douyin video share QR code ### Parameters: - object_id: Video id or author uid ### Return: - QR code data  # [示例/Example] object_id = \"7348044435755846962\"
     * @summary 生成抖音视频分享二维码/Generate Douyin video share QR code
     * @param {string} objectId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    generateDouyinVideoShareQrcodeApiV1DouyinAppV3GenerateDouyinVideoShareQrcodeGet_33(objectId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    handlerUserProfileApiV1DouyinAppV3HandlerUserProfileGet(secUserId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    handlerUserProfileApiV1DouyinAppV3HandlerUserProfileGet_34(secUserId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword  ### Return: - Share link  # [示例/Example] keyword = \"雷军\"
     * @summary 生成抖音分享链接，唤起抖音APP，跳转指定关键词搜索结果/Generate Douyin share link, call Douyin APP, and jump to the specified keyword search result
     * @param {string} keyword 关键词/Keyword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    openDouyinAppToKeywordSearchApiV1DouyinAppV3OpenDouyinAppToKeywordSearchGet(keyword: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword  ### Return: - Share link  # [示例/Example] keyword = \"雷军\"
     * @summary 生成抖音分享链接，唤起抖音APP，跳转指定关键词搜索结果/Generate Douyin share link, call Douyin APP, and jump to the specified keyword search result
     * @param {string} keyword 关键词/Keyword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    openDouyinAppToKeywordSearchApiV1DouyinAppV3OpenDouyinAppToKeywordSearchGet_35(keyword: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，给指定用户发送私信。  ### 参数: - uid: 用户id - sec_uid: 用户sec_uid - 注意: 请确保user_id和sec_uid都有值，否则无法发送私信给指定用户。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and send private messages to specified users  ### Parameters: - uid: User id - sec_uid: User sec_uid - Note: Please make sure that both user_id and sec_uid have values, otherwise you cannot send private messages to the specified user.  ### Return: - Share link  # [示例/Example] uid = \"96874812426\" sec_uid = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\"
     * @summary 生成抖音分享链接，唤起抖音APP，给指定用户发送私信/Generate Douyin share link, call Douyin APP, and send private messages to specified users
     * @param {string} uid 用户id/User id
     * @param {string} secUid 用户sec_uid/User sec_uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    openDouyinAppToSendPrivateMessageApiV1DouyinAppV3OpenDouyinAppToSendPrivateMessageGet(uid: string, secUid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，给指定用户发送私信。  ### 参数: - uid: 用户id - sec_uid: 用户sec_uid - 注意: 请确保user_id和sec_uid都有值，否则无法发送私信给指定用户。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and send private messages to specified users  ### Parameters: - uid: User id - sec_uid: User sec_uid - Note: Please make sure that both user_id and sec_uid have values, otherwise you cannot send private messages to the specified user.  ### Return: - Share link  # [示例/Example] uid = \"96874812426\" sec_uid = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\"
     * @summary 生成抖音分享链接，唤起抖音APP，给指定用户发送私信/Generate Douyin share link, call Douyin APP, and send private messages to specified users
     * @param {string} uid 用户id/User id
     * @param {string} secUid 用户sec_uid/User sec_uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    openDouyinAppToSendPrivateMessageApiV1DouyinAppV3OpenDouyinAppToSendPrivateMessageGet_36(uid: string, secUid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定用户主页。  ### 参数: - uid: 用户id - sec_uid: 用户sec_uid - 注意: 请确保user_id和sec_uid都有值，否则无法跳转到指定用户主页。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified user profile  ### Parameters: - uid: User id - sec_uid: User sec_uid - Note: Please make sure that both user_id and sec_uid have values, otherwise you cannot jump to the specified user profile.  ### Return: - Share link  # [示例/Example] uid = \"96874812426\" sec_uid = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\"
     * @summary 生成抖音分享链接，唤起抖音APP，跳转指定用户主页/Generate Douyin share link, call Douyin APP, and jump to the specified user profile
     * @param {string} uid 用户id/User id
     * @param {string} secUid 用户sec_uid/User sec_uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    openDouyinAppToUserProfileApiV1DouyinAppV3OpenDouyinAppToUserProfileGet(uid: string, secUid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定用户主页。  ### 参数: - uid: 用户id - sec_uid: 用户sec_uid - 注意: 请确保user_id和sec_uid都有值，否则无法跳转到指定用户主页。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified user profile  ### Parameters: - uid: User id - sec_uid: User sec_uid - Note: Please make sure that both user_id and sec_uid have values, otherwise you cannot jump to the specified user profile.  ### Return: - Share link  # [示例/Example] uid = \"96874812426\" sec_uid = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\"
     * @summary 生成抖音分享链接，唤起抖音APP，跳转指定用户主页/Generate Douyin share link, call Douyin APP, and jump to the specified user profile
     * @param {string} uid 用户id/User id
     * @param {string} secUid 用户sec_uid/User sec_uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    openDouyinAppToUserProfileApiV1DouyinAppV3OpenDouyinAppToUserProfileGet_37(uid: string, secUid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified video  ### Parameters: - aweme_id: Video id  ### Return: - Share link  # [示例/Example] aweme_id = \"7197598285882789120\"
     * @summary 生成抖音分享链接，唤起抖音APP，跳转指定作品详情页/Generate Douyin share link, call Douyin APP, and jump to the specified video details page
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    openDouyinAppToVideoDetailApiV1DouyinAppV3OpenDouyinAppToVideoDetailGet(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified video  ### Parameters: - aweme_id: Video id  ### Return: - Share link  # [示例/Example] aweme_id = \"7197598285882789120\"
     * @summary 生成抖音分享链接，唤起抖音APP，跳转指定作品详情页/Generate Douyin share link, call Douyin APP, and jump to the specified video details page
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    openDouyinAppToVideoDetailApiV1DouyinAppV3OpenDouyinAppToVideoDetailGet_38(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device in Douyin APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, with http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy = \"http://username:password@ip:port\"  # [响应/Response] ```json {     \"code\": 200,     \"router\": \"/api/v1/douyin/app/v3/register_device\",     \"params\": {         \"proxy\": \"username:password@ip:port\"     },     \"data\": {         \"iid\": \"3631064037200330\",         \"device_id\": \"3631064037196234\",         \"mssdk_token\": \"\",         \"device_platform\": \"android\",         \"channel\": \"xiaomi_64_1775\",         \"version_code\": 240900,         \"version_name\": \"24.9.0\",         \"manifest_version_code\": 240901,         \"update_version_code\": 24909900,         \"device_type\": \"V1963A\",         \"device_brand\": \"vivo\",         \"device_model\": \"V1963A\",         \"openudid\": \"5d736335afc17aab\",         \"os_api\": 29,         \"os_version\": \"10\",         \"resolution\": \"2400x1080\",         \"dpi\": 480,         \"host_abi\": \"arm64-v8a\",         \"ua\": \"com.ss.android.ugc.aweme/240901 (Linux; U; Android 10; zh_CN; V1963A; Build/compiler10301842;tt-ok/3.12.13.4-tiktok)\",         \"cookies\": {             \"install_id\": \"3631064037200330\",             \"odin_tt\": \"5ef413aaa319b3a4077814a1da3d3e1bcec3e8640ddc3ad30945a8518f59d1563d24c3b7a3c59d97fbd5344f13208a25cf143312acf4462b028e56cd0b611cc3fc2a64318f7375470d6db86440f92841\",             \"d_ticket\": \"42186c5b0c54ea1a2a9e02d4e62bf6ab\",             \"store-region\": \"cn-js\",             \"store-region-src\": \"did\",             \"multi_sids\": \"462868309327184:38167255076198698951907954929873\",             \"passport_csrf_token\": \"6f75287240634ad1f51f3b3bdcdb5424\",             \"passport_csrf_token_default\": \"6f75287240634ad1f51f3b3bdcdb5424\",             \"ttreq\": \"1$7f616210b41fc044b1f164542ac4e064288b5163\"         },         \"lanusk\": \"\",         \"device_manufacturer\": \"vivo\",         \"uuid\": \"357125675341697\",         \"cdid\": \"f64372bf-4d1d-4883-bc8a-d3d6fa87a9e3\",         \"first_launch_timestamp\": 1726970498636,         \"x_tt_dt\": \"AAA2FGV24A2GAOHJJ3D3XCJ32IZDZ26XXKMQAOTDNUDWTB644ISU5YA3GBYVX2Y3XVOQ3ISDH3UA4JXGGNFXBLJ6AAZU7QTIBKHFYJLDJMDG5K36LVPBRCKLHW2XM\",         \"BootTime\": 1726980411,         \"MbTime\": 1726780411,         \"server_time\": 1726980500,         \"mc\": \"2A:66:7A:2D:8B:29\",         \"rom\": \"compiler10301842\",         \"rom_version\": \"PD1963-user 10 QP1A.190711.020 compiler10301842 release-keys\"     } } ```
     * @summary 抖音APP注册设备/Douyin APP register device
     * @param {string} [proxy] 代理/Proxy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    registerDeviceApiV1DouyinAppV3RegisterDeviceGet(proxy?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 抖音APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device in Douyin APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, with http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy = \"http://username:password@ip:port\"  # [响应/Response] ```json {     \"code\": 200,     \"router\": \"/api/v1/douyin/app/v3/register_device\",     \"params\": {         \"proxy\": \"username:password@ip:port\"     },     \"data\": {         \"iid\": \"3631064037200330\",         \"device_id\": \"3631064037196234\",         \"mssdk_token\": \"\",         \"device_platform\": \"android\",         \"channel\": \"xiaomi_64_1775\",         \"version_code\": 240900,         \"version_name\": \"24.9.0\",         \"manifest_version_code\": 240901,         \"update_version_code\": 24909900,         \"device_type\": \"V1963A\",         \"device_brand\": \"vivo\",         \"device_model\": \"V1963A\",         \"openudid\": \"5d736335afc17aab\",         \"os_api\": 29,         \"os_version\": \"10\",         \"resolution\": \"2400x1080\",         \"dpi\": 480,         \"host_abi\": \"arm64-v8a\",         \"ua\": \"com.ss.android.ugc.aweme/240901 (Linux; U; Android 10; zh_CN; V1963A; Build/compiler10301842;tt-ok/3.12.13.4-tiktok)\",         \"cookies\": {             \"install_id\": \"3631064037200330\",             \"odin_tt\": \"5ef413aaa319b3a4077814a1da3d3e1bcec3e8640ddc3ad30945a8518f59d1563d24c3b7a3c59d97fbd5344f13208a25cf143312acf4462b028e56cd0b611cc3fc2a64318f7375470d6db86440f92841\",             \"d_ticket\": \"42186c5b0c54ea1a2a9e02d4e62bf6ab\",             \"store-region\": \"cn-js\",             \"store-region-src\": \"did\",             \"multi_sids\": \"462868309327184:38167255076198698951907954929873\",             \"passport_csrf_token\": \"6f75287240634ad1f51f3b3bdcdb5424\",             \"passport_csrf_token_default\": \"6f75287240634ad1f51f3b3bdcdb5424\",             \"ttreq\": \"1$7f616210b41fc044b1f164542ac4e064288b5163\"         },         \"lanusk\": \"\",         \"device_manufacturer\": \"vivo\",         \"uuid\": \"357125675341697\",         \"cdid\": \"f64372bf-4d1d-4883-bc8a-d3d6fa87a9e3\",         \"first_launch_timestamp\": 1726970498636,         \"x_tt_dt\": \"AAA2FGV24A2GAOHJJ3D3XCJ32IZDZ26XXKMQAOTDNUDWTB644ISU5YA3GBYVX2Y3XVOQ3ISDH3UA4JXGGNFXBLJ6AAZU7QTIBKHFYJLDJMDG5K36LVPBRCKLHW2XM\",         \"BootTime\": 1726980411,         \"MbTime\": 1726780411,         \"server_time\": 1726980500,         \"mc\": \"2A:66:7A:2D:8B:29\",         \"rom\": \"compiler10301842\",         \"rom_version\": \"PD1963-user 10 QP1A.190711.020 compiler10301842 release-keys\"     } } ```
     * @summary 抖音APP注册设备/Douyin APP register device
     * @param {string} [proxy] 代理/Proxy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApiInterface
     */
    registerDeviceApiV1DouyinAppV3RegisterDeviceGet_39(proxy?: string, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * DouyinAppV3APIApi - object-oriented interface
 * @export
 * @class DouyinAppV3APIApi
 * @extends {BaseAPI}
 */
export class DouyinAppV3APIApi extends BaseAPI implements DouyinAppV3APIApiInterface {
    /**
     * # [中文] ### 用途: - 根据视频ID来增加作品的播放数 - 该接口默认使用游客Cookie，如果需要使用登录用户的Cookie，请在参数中传入。 - 单一作品每次调用增加1次播放数，请求约 `1000` 次后会被抖音限制，需要等待一段时间（如：2小时后）后再继续调用。 - 该限制是针对作品的，不是针对接口的，在未登录的情况下，使用不同IP的浏览器或在APP中浏览作品，该作品的播放数也不会增加。 - 可以携带抖音网页端的Cookie来请求此接口，但是不保证一定有效，需要自行测试。 - 上述的限制是根据测试结果得出的，具体限制可能会有所不同，仅供参考。 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - cookie: 可选，默认使用游客Cookie ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID - This interface uses guest Cookie by default. If you need to use the Cookie of the logged-in user, please pass it in the parameters. - Each call to a single work increases the number of plays by 1. After about `1000` calls, Douyin will restrict it. You need to wait for a period of time (such as 2 hours) before continuing to call. - This restriction is for the work, not for the interface. When browsing the work without logging in, using different IP browsers or browsing the work in the APP, the number of plays of the work will not increase. - You can carry the Cookie of the Douyin web page to request this interface, but it is not guaranteed to be effective and needs to be tested by yourself. - The above restrictions are based on test results, and the specific restrictions may vary, for reference only. ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - cookie: Optional, use guest Cookie by default ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type = 0 item_id = \"7197598285882789120\" cookie = None
     * @summary 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
     * @param {number} awemeType 作品类型/Video type
     * @param {string} itemId 作品id/Video id
     * @param {string} [cookie] 可选，默认使用游客Cookie/Optional, use guest Cookie by default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public addVideoPlayCountApiV1DouyinAppV3AddVideoPlayCountGet(awemeType: number, itemId: string, cookie?: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).addVideoPlayCountApiV1DouyinAppV3AddVideoPlayCountGet(awemeType, itemId, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据视频ID来增加作品的播放数 - 该接口默认使用游客Cookie，如果需要使用登录用户的Cookie，请在参数中传入。 - 单一作品每次调用增加1次播放数，请求约 `1000` 次后会被抖音限制，需要等待一段时间（如：2小时后）后再继续调用。 - 该限制是针对作品的，不是针对接口的，在未登录的情况下，使用不同IP的浏览器或在APP中浏览作品，该作品的播放数也不会增加。 - 可以携带抖音网页端的Cookie来请求此接口，但是不保证一定有效，需要自行测试。 - 上述的限制是根据测试结果得出的，具体限制可能会有所不同，仅供参考。 ### 参数: - aweme_type: 作品类型，0:视频 1:图文，可以从单一作品数据接口中获取。 - item_id: 作品id，别名为aweme_id - cookie: 可选，默认使用游客Cookie ### 返回: - 当前时间戳和状态码，状态码为200时表示成功，否则为失败，可以尝试更换一个作品id再次调用，或者等待一段时间后再次调用。  # [English] ### Purpose: - Increase the number of plays of the work according to the video ID - This interface uses guest Cookie by default. If you need to use the Cookie of the logged-in user, please pass it in the parameters. - Each call to a single work increases the number of plays by 1. After about `1000` calls, Douyin will restrict it. You need to wait for a period of time (such as 2 hours) before continuing to call. - This restriction is for the work, not for the interface. When browsing the work without logging in, using different IP browsers or browsing the work in the APP, the number of plays of the work will not increase. - You can carry the Cookie of the Douyin web page to request this interface, but it is not guaranteed to be effective and needs to be tested by yourself. - The above restrictions are based on test results, and the specific restrictions may vary, for reference only. ### Parameters: - aweme_type: Video type, 0: Video 1: Graphic and text, can be obtained from the single work data interface. - item_id: Video id, alias aweme_id - cookie: Optional, use guest Cookie by default ### Return: - The current timestamp and status code. When the status code is 200, it means success, otherwise it is a failure. You can try to change another work id and call it again, or wait for a period of time and call it again.  # [示例/Example] aweme_type = 0 item_id = \"7197598285882789120\" cookie = None
     * @summary 根据视频ID来增加作品的播放数/Increase the number of plays of the work according to the video ID
     * @param {number} awemeType 作品类型/Video type
     * @param {string} itemId 作品id/Video id
     * @param {string} [cookie] 可选，默认使用游客Cookie/Optional, use guest Cookie by default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public addVideoPlayCountApiV1DouyinAppV3AddVideoPlayCountGet_1(awemeType: number, itemId: string, cookie?: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).addVideoPlayCountApiV1DouyinAppV3AddVideoPlayCountGet_1(awemeType, itemId, cookie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 - content_type: 0:不限 1:视频 2:图片 3:文章 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - content_type: 0: Unlimited 1: Video 2: Picture 3: Article ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" content_type = \"0\"
     * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_general_search_result）/Get comprehensive search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_general_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 时长/Duration
     * @param {string} [contentType] 内容类型/Content type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchGeneralSearchResultApiV1DouyinAppV3FetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, contentType?: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchGeneralSearchResultApiV1DouyinAppV3FetchGeneralSearchResultGet(keyword, offset, count, sortType, publishTime, filterDuration, contentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 - content_type: 0:不限 1:视频 2:图片 3:文章 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes - content_type: 0: Unlimited 1: Video 2: Picture 3: Article ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\" content_type = \"0\"
     * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_general_search_result）/Get comprehensive search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_general_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 时长/Duration
     * @param {string} [contentType] 内容类型/Content type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchGeneralSearchResultApiV1DouyinAppV3FetchGeneralSearchResultGet_2(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, contentType?: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchGeneralSearchResultApiV1DouyinAppV3FetchGeneralSearchResultGet_2(keyword, offset, count, sortType, publishTime, filterDuration, contentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
     * @summary 获取指定话题的详情数据/Get details of specified hashtag
     * @param {number} chId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchHashtagDetailApiV1DouyinAppV3FetchHashtagDetailGet(chId: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchHashtagDetailApiV1DouyinAppV3FetchHashtagDetailGet(chId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
     * @summary 获取指定话题的详情数据/Get details of specified hashtag
     * @param {number} chId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchHashtagDetailApiV1DouyinAppV3FetchHashtagDetailGet_3(chId: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchHashtagDetailApiV1DouyinAppV3FetchHashtagDetailGet_3(chId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_hashtag_search_result）/Get hashtag search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_hashtag_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchHashtagSearchResultApiV1DouyinAppV3FetchHashtagSearchResultGet(keyword: string, offset?: number, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchHashtagSearchResultApiV1DouyinAppV3FetchHashtagSearchResultGet(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_hashtag_search_result）/Get hashtag search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_hashtag_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchHashtagSearchResultApiV1DouyinAppV3FetchHashtagSearchResultGet_4(keyword: string, offset?: number, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchHashtagSearchResultApiV1DouyinAppV3FetchHashtagSearchResultGet_4(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
     * @summary 获取指定话题的作品数据/Get video list of specified hashtag
     * @param {string} chId 话题id/Hashtag id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchHashtagVideoListApiV1DouyinAppV3FetchHashtagVideoListGet(chId: string, cursor?: number, sortType?: number, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchHashtagVideoListApiV1DouyinAppV3FetchHashtagVideoListGet(chId, cursor, sortType, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
     * @summary 获取指定话题的作品数据/Get video list of specified hashtag
     * @param {string} chId 话题id/Hashtag id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchHashtagVideoListApiV1DouyinAppV3FetchHashtagVideoListGet_5(chId: string, cursor?: number, sortType?: number, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchHashtagVideoListApiV1DouyinAppV3FetchHashtagVideoListGet_5(chId, cursor, sortType, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
     * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
     * @param {number} categoryId 分类id/Category id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchHotBrandSearchApiV1DouyinAppV3FetchBrandHotSearchListDetailGet(categoryId: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchHotBrandSearchApiV1DouyinAppV3FetchBrandHotSearchListDetailGet(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
     * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
     * @param {number} categoryId 分类id/Category id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchHotBrandSearchApiV1DouyinAppV3FetchBrandHotSearchListDetailGet_6(categoryId: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchHotBrandSearchApiV1DouyinAppV3FetchBrandHotSearchListDetailGet_6(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
     * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchHotBrandSearchCategoryApiV1DouyinAppV3FetchBrandHotSearchListGet(options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchHotBrandSearchCategoryApiV1DouyinAppV3FetchBrandHotSearchListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
     * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchHotBrandSearchCategoryApiV1DouyinAppV3FetchBrandHotSearchListGet_7(options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchHotBrandSearchCategoryApiV1DouyinAppV3FetchBrandHotSearchListGet_7(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音热榜数据，包括：     - 热点榜     - 种草榜     - 娱乐榜     - 社会榜     - 挑战榜 ### 参数: - board_type:     - 0: 热点榜（默认）     - 2: 其他榜单，如种草榜等，需要传入对应的board_sub_type参数。 - board_sub_type:     - 空字符串: 热点榜（默认）     - seeding: 种草榜     - 2: 娱乐榜     - 4: 社会榜     - hotspot_challenge: 挑战榜 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data, including:     - Hot search list     - Seeding list     - Entertainment list     - Social list     - Challenge list  ### Parameters: - board_type:     - 0: Hot search list (default)     - 2: Other lists, such as seeding list, etc., need to pass in the corresponding board_sub_type parameter. - board_sub_type:     - Empty string: Hot search list (default)     - seeding: Seeding list     - 2: Entertainment list     - 4: Social list     - hotspot_challenge: Challenge list ### Return: - Hot search list data  # [示例/Example] - 获取热点榜数据     - board_type = 0     - board_sub_type = \"\" - 获取种草榜数据     - board_type = 2     - board_sub_type = \"seeding\"
     * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
     * @param {string} [boardType] 榜单类型/Board type
     * @param {string} [boardSubType] 榜单子类型/Board sub type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchHotSearchListApiV1DouyinAppV3FetchHotSearchListGet(boardType?: string, boardSubType?: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchHotSearchListApiV1DouyinAppV3FetchHotSearchListGet(boardType, boardSubType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音热榜数据，包括：     - 热点榜     - 种草榜     - 娱乐榜     - 社会榜     - 挑战榜 ### 参数: - board_type:     - 0: 热点榜（默认）     - 2: 其他榜单，如种草榜等，需要传入对应的board_sub_type参数。 - board_sub_type:     - 空字符串: 热点榜（默认）     - seeding: 种草榜     - 2: 娱乐榜     - 4: 社会榜     - hotspot_challenge: 挑战榜 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data, including:     - Hot search list     - Seeding list     - Entertainment list     - Social list     - Challenge list  ### Parameters: - board_type:     - 0: Hot search list (default)     - 2: Other lists, such as seeding list, etc., need to pass in the corresponding board_sub_type parameter. - board_sub_type:     - Empty string: Hot search list (default)     - seeding: Seeding list     - 2: Entertainment list     - 4: Social list     - hotspot_challenge: Challenge list ### Return: - Hot search list data  # [示例/Example] - 获取热点榜数据     - board_type = 0     - board_sub_type = \"\" - 获取种草榜数据     - board_type = 2     - board_sub_type = \"seeding\"
     * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
     * @param {string} [boardType] 榜单类型/Board type
     * @param {string} [boardSubType] 榜单子类型/Board sub type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchHotSearchListApiV1DouyinAppV3FetchHotSearchListGet_8(boardType?: string, boardSubType?: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchHotSearchListApiV1DouyinAppV3FetchHotSearchListGet_8(boardType, boardSubType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
     * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchLiveHotSearchListApiV1DouyinAppV3FetchLiveHotSearchListGet(options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchLiveHotSearchListApiV1DouyinAppV3FetchLiveHotSearchListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
     * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchLiveHotSearchListApiV1DouyinAppV3FetchLiveHotSearchListGet_9(options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchLiveHotSearchListApiV1DouyinAppV3FetchLiveHotSearchListGet_9(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - cursor: 偏移量，从0开始，每次请求从上次请求返回响应中的cursor中获取。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - cursor: Offset, starting from 0, each request gets from the cursor in the response returned by the last request. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Live search results  # [示例/Example] keyword = \"小米商城\" cursor = 0 count = 20
     * @summary 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_live_search_result）/Get live search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_live_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [cursor] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchLiveSearchResultApiV1DouyinAppV3FetchLiveSearchResultGet(keyword: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchLiveSearchResultApiV1DouyinAppV3FetchLiveSearchResultGet(keyword, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - cursor: 偏移量，从0开始，每次请求从上次请求返回响应中的cursor中获取。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - cursor: Offset, starting from 0, each request gets from the cursor in the response returned by the last request. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Live search results  # [示例/Example] keyword = \"小米商城\" cursor = 0 count = 20
     * @summary 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_live_search_result）/Get live search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_live_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [cursor] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchLiveSearchResultApiV1DouyinAppV3FetchLiveSearchResultGet_10(keyword: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchLiveSearchResultApiV1DouyinAppV3FetchLiveSearchResultGet_10(keyword, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\"]
     * @summary 批量获取视频信息/Batch Get Video Information
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchMultiVideoApiV1DouyinAppV3FetchMultiVideoPost(requestBody?: Array<string>, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchMultiVideoApiV1DouyinAppV3FetchMultiVideoPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 批量获取视频信息，支持图文、视频等，一次性最多支持10个视频，此接口收费固定价格为0.001$ * 10 = 0.01$一次。 ### 参数: - aweme_ids: 作品id列表，最多支持10个作品id。 ### 返回: - 作品数据  # [English] ### Purpose: - Batch Get Video Information, support photo, video, etc., up to 10 videos at a time, this interface charges a fixed price of 0.001$ * 10 = 0.01$ each time. ### Parameters: - aweme_ids: List of video ids, up to 10 video ids are supported. ### Return: - Video data  # [示例/Example] aweme_ids = [\"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\", \"7448118827402972455\", \"7126745726494821640\"]
     * @summary 批量获取视频信息/Batch Get Video Information
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchMultiVideoApiV1DouyinAppV3FetchMultiVideoPost_11(requestBody?: Array<string>, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchMultiVideoApiV1DouyinAppV3FetchMultiVideoPost_11(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据视频ID获取作品的统计数据，支持多个视频id，一次性最多支持50个视频。 - 抖音大多数接口已经不再返回作品的播放数，只能通过此接口获取。 - 价格为：0.025$一次。 - 可以获取到的统计有：     - 点赞数（digg_count）     - 下载数（download_count）     - 播放数（play_count）     - 分享数（share_count） ### 参数: - aweme_ids: 作品id，支持多个视频id，用逗号隔开即可，不能超过50个，单个也可以，则无需逗号。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistical data of the Post according to the video ID, support multiple video ids, up to 50 videos at a time. - Most of the Douyin interfaces no longer return the number of plays of the Post, and can only be obtained through this interface. - Price: 0.025$ each time. - List of statistics that can be obtained:     - Like count (digg_count)     - Download count (download_count)     - Play count (play_count)     - Share count (share_count) ### Parameters: - aweme_ids: Video id, supports multiple video ids, separated by commas, no more than 50, single is also possible, no need for commas. ### Return: - Post statistics data  # [示例/Example] aweme_ids = \"7448118827402972455,7126745726494821640\"
     * @summary 根据视频ID批量获取作品的统计数据（点赞数、下载数、播放数、分享数）/Get the statistical data of the Post according to the video ID (like count, download count, play count, share count)
     * @param {string} awemeIds 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchMultiVideoStatisticsApiV1DouyinAppV3FetchMultiVideoStatisticsGet(awemeIds: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchMultiVideoStatisticsApiV1DouyinAppV3FetchMultiVideoStatisticsGet(awemeIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据视频ID获取作品的统计数据，支持多个视频id，一次性最多支持50个视频。 - 抖音大多数接口已经不再返回作品的播放数，只能通过此接口获取。 - 价格为：0.025$一次。 - 可以获取到的统计有：     - 点赞数（digg_count）     - 下载数（download_count）     - 播放数（play_count）     - 分享数（share_count） ### 参数: - aweme_ids: 作品id，支持多个视频id，用逗号隔开即可，不能超过50个，单个也可以，则无需逗号。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistical data of the Post according to the video ID, support multiple video ids, up to 50 videos at a time. - Most of the Douyin interfaces no longer return the number of plays of the Post, and can only be obtained through this interface. - Price: 0.025$ each time. - List of statistics that can be obtained:     - Like count (digg_count)     - Download count (download_count)     - Play count (play_count)     - Share count (share_count) ### Parameters: - aweme_ids: Video id, supports multiple video ids, separated by commas, no more than 50, single is also possible, no need for commas. ### Return: - Post statistics data  # [示例/Example] aweme_ids = \"7448118827402972455,7126745726494821640\"
     * @summary 根据视频ID批量获取作品的统计数据（点赞数、下载数、播放数、分享数）/Get the statistical data of the Post according to the video ID (like count, download count, play count, share count)
     * @param {string} awemeIds 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchMultiVideoStatisticsApiV1DouyinAppV3FetchMultiVideoStatisticsGet_12(awemeIds: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchMultiVideoStatisticsApiV1DouyinAppV3FetchMultiVideoStatisticsGet_12(awemeIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
     * @summary 获取指定音乐的详情数据/Get details of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchMusicDetailApiV1DouyinAppV3FetchMusicDetailGet(musicId: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchMusicDetailApiV1DouyinAppV3FetchMusicDetailGet(musicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
     * @summary 获取指定音乐的详情数据/Get details of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchMusicDetailApiV1DouyinAppV3FetchMusicDetailGet_13(musicId: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchMusicDetailApiV1DouyinAppV3FetchMusicDetailGet_13(musicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
     * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchMusicHotSearchListApiV1DouyinAppV3FetchMusicHotSearchListGet(options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchMusicHotSearchListApiV1DouyinAppV3FetchMusicHotSearchListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
     * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchMusicHotSearchListApiV1DouyinAppV3FetchMusicHotSearchListGet_14(options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchMusicHotSearchListApiV1DouyinAppV3FetchMusicHotSearchListGet_14(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_music_search_result）/Get music search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_music_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchMusicSearchResultApiV1DouyinAppV3FetchMusicSearchResultGet(keyword: string, offset?: number, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchMusicSearchResultApiV1DouyinAppV3FetchMusicSearchResultGet(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_music_search_result）/Get music search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_music_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchMusicSearchResultApiV1DouyinAppV3FetchMusicSearchResultGet_15(keyword: string, offset?: number, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchMusicSearchResultApiV1DouyinAppV3FetchMusicSearchResultGet_15(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
     * @summary 获取指定音乐的视频列表数据/Get video list of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchMusicVideoListApiV1DouyinAppV3FetchMusicVideoListGet(musicId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchMusicVideoListApiV1DouyinAppV3FetchMusicVideoListGet(musicId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
     * @summary 获取指定音乐的视频列表数据/Get video list of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchMusicVideoListApiV1DouyinAppV3FetchMusicVideoListGet_16(musicId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchMusicVideoListApiV1DouyinAppV3FetchMusicVideoListGet_16(musicId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7448118827402972455\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchOneVideoApiV1DouyinAppV3FetchOneVideoGet(awemeId: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchOneVideoApiV1DouyinAppV3FetchOneVideoGet(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7448118827402972455\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchOneVideoApiV1DouyinAppV3FetchOneVideoGet_17(awemeId: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchOneVideoApiV1DouyinAppV3FetchOneVideoGet_17(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7448118827402972455\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchOneVideoApiV1DouyinAppV3FetchOneVideoV2Get(awemeId: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchOneVideoApiV1DouyinAppV3FetchOneVideoV2Get(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7448118827402972455\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchOneVideoApiV1DouyinAppV3FetchOneVideoV2Get_18(awemeId: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchOneVideoApiV1DouyinAppV3FetchOneVideoV2Get_18(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchOneVideoByShareUrlApiV1DouyinAppV3FetchOneVideoByShareUrlGet(shareUrl: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchOneVideoByShareUrlApiV1DouyinAppV3FetchOneVideoByShareUrlGet(shareUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchOneVideoByShareUrlApiV1DouyinAppV3FetchOneVideoByShareUrlGet_19(shareUrl: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchOneVideoByShareUrlApiV1DouyinAppV3FetchOneVideoByShareUrlGet_19(shareUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户粉丝列表 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20
     * @summary 获取用户粉丝列表/Get user fans list
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [maxTime] 最大时间戳/Maximum timestamp
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchUserFansListApiV1DouyinAppV3FetchUserFansListGet(secUserId?: string, maxTime?: string, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchUserFansListApiV1DouyinAppV3FetchUserFansListGet(secUserId, maxTime, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户粉丝列表 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get user fans list ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Fans list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20
     * @summary 获取用户粉丝列表/Get user fans list
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [maxTime] 最大时间戳/Maximum timestamp
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchUserFansListApiV1DouyinAppV3FetchUserFansListGet_20(secUserId?: string, maxTime?: string, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchUserFansListApiV1DouyinAppV3FetchUserFansListGet_20(secUserId, maxTime, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户关注列表 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20
     * @summary 获取用户关注列表/Get user following list
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [maxTime] 最大时间戳/Maximum timestamp
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchUserFollowingListApiV1DouyinAppV3FetchUserFollowingListGet(secUserId?: string, maxTime?: string, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchUserFollowingListApiV1DouyinAppV3FetchUserFollowingListGet(secUserId, maxTime, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户关注列表 ### 参数: - sec_user_id: 用户sec_user_id - max_time: 最大时间戳，默认为0，后续从返回数据中获取，用于翻页。 - count: 数量，默认为20，建议保持不变。 ### 返回: - 关注列表  # [English] ### Purpose: - Get user following list ### Parameters: - sec_user_id: User sec_user_id - max_time: Maximum timestamp, default is 0, get from the returned data later, used for paging. - count: Number, default is 20, it is recommended to keep it unchanged. ### Return: - Following list  # [示例/Example] sec_user = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\" max_time = \"0\" count = 20
     * @summary 获取用户关注列表/Get user following list
     * @param {string} [secUserId] 用户sec_user_id/User sec_user_id
     * @param {string} [maxTime] 最大时间戳/Maximum timestamp
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchUserFollowingListApiV1DouyinAppV3FetchUserFollowingListGet_21(secUserId?: string, maxTime?: string, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchUserFollowingListApiV1DouyinAppV3FetchUserFollowingListGet_21(secUserId, maxTime, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchUserLikeVideosApiV1DouyinAppV3FetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchUserLikeVideosApiV1DouyinAppV3FetchUserLikeVideosGet(secUserId, maxCursor, counts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchUserLikeVideosApiV1DouyinAppV3FetchUserLikeVideosGet_22(secUserId: string, maxCursor?: number, counts?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchUserLikeVideosApiV1DouyinAppV3FetchUserLikeVideosGet_22(secUserId, maxCursor, counts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchUserPostVideosApiV1DouyinAppV3FetchUserPostVideosGet(secUserId: string, maxCursor?: number, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchUserPostVideosApiV1DouyinAppV3FetchUserPostVideosGet(secUserId, maxCursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchUserPostVideosApiV1DouyinAppV3FetchUserPostVideosGet_23(secUserId: string, maxCursor?: number, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchUserPostVideosApiV1DouyinAppV3FetchUserPostVideosGet_23(secUserId, maxCursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - douyin_user_fans(粉丝数量):     - \"\": 不限     - \"0_1k\": 1000以下     - \"1k_1w\": 1000-1万     - \"1w_10w\": 1w-10w     - \"10w_100w\": 10w-100w     - \"100w_\": 100w以上 - douyin_user_type(用户类型，请使用英文而不是中文):     - \"\": 不限     - \"common_user\": 普通用户     - \"enterprise_user\": 企业认证     - \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - douyin_user_fans(Fans):     - \"\": Unlimited     - \"0_1k\": Less than 1000     - \"1k_1w\": 1000-10,000     - \"1w_10w\": 10,000-100,000     - \"10w_100w\": 100,000-1,000,000     - \"100w_\": More than 1,000,000 - douyin_user_type(User type, please use English instead of Chinese):     - \"\": Unlimited     - \"common_user\": Common user     - \"enterprise_user\": Enterprise certification     - \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
     * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_user_search_result_v2）/Get user search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_user_search_result_v2)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [douyinUserFans] 粉丝数/Fans
     * @param {string} [douyinUserType] 用户类型/User type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchUserSearchResultApiV1DouyinAppV3FetchUserSearchResultGet(keyword: string, offset?: number, count?: number, douyinUserFans?: string, douyinUserType?: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchUserSearchResultApiV1DouyinAppV3FetchUserSearchResultGet(keyword, offset, count, douyinUserFans, douyinUserType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - douyin_user_fans(粉丝数量):     - \"\": 不限     - \"0_1k\": 1000以下     - \"1k_1w\": 1000-1万     - \"1w_10w\": 1w-10w     - \"10w_100w\": 10w-100w     - \"100w_\": 100w以上 - douyin_user_type(用户类型，请使用英文而不是中文):     - \"\": 不限     - \"common_user\": 普通用户     - \"enterprise_user\": 企业认证     - \"personal_user\": 个人认证 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - douyin_user_fans(Fans):     - \"\": Unlimited     - \"0_1k\": Less than 1000     - \"1k_1w\": 1000-10,000     - \"1w_10w\": 10,000-100,000     - \"10w_100w\": 100,000-1,000,000     - \"100w_\": More than 1,000,000 - douyin_user_type(User type, please use English instead of Chinese):     - \"\": Unlimited     - \"common_user\": Common user     - \"enterprise_user\": Enterprise certification     - \"personal_user\": Personal certification ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
     * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_user_search_result_v2）/Get user search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_user_search_result_v2)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [douyinUserFans] 粉丝数/Fans
     * @param {string} [douyinUserType] 用户类型/User type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchUserSearchResultApiV1DouyinAppV3FetchUserSearchResultGet_24(keyword: string, offset?: number, count?: number, douyinUserFans?: string, douyinUserType?: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchUserSearchResultApiV1DouyinAppV3FetchUserSearchResultGet_24(keyword, offset, count, douyinUserFans, douyinUserType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7448118827402972455\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchVideoCommentsApiV1DouyinAppV3FetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchVideoCommentsApiV1DouyinAppV3FetchVideoCommentsGet(awemeId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7448118827402972455\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchVideoCommentsApiV1DouyinAppV3FetchVideoCommentsGet_25(awemeId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchVideoCommentsApiV1DouyinAppV3FetchVideoCommentsGet_25(awemeId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchVideoCommentsReplyApiV1DouyinAppV3FetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchVideoCommentsReplyApiV1DouyinAppV3FetchVideoCommentRepliesGet(itemId, commentId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchVideoCommentsReplyApiV1DouyinAppV3FetchVideoCommentRepliesGet_26(itemId: string, commentId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchVideoCommentsReplyApiV1DouyinAppV3FetchVideoCommentRepliesGet_26(itemId, commentId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音视频合集详情数据 ### 参数: - mix_id: 合集id ### 返回: - 视频合集详情数据  # [English] ### Purpose: - Get Douyin video mix detail data ### Parameters: - mix_id: Mix id ### Return: - Video mix detail data  # [示例/Example] mix_id = \"7302011174286002217\"
     * @summary 获取抖音视频合集详情数据/Get Douyin video mix detail data
     * @param {string} mixId 合集id/Mix id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchVideoMixDetailApiV1DouyinAppV3FetchVideoMixDetailGet(mixId: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchVideoMixDetailApiV1DouyinAppV3FetchVideoMixDetailGet(mixId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音视频合集详情数据 ### 参数: - mix_id: 合集id ### 返回: - 视频合集详情数据  # [English] ### Purpose: - Get Douyin video mix detail data ### Parameters: - mix_id: Mix id ### Return: - Video mix detail data  # [示例/Example] mix_id = \"7302011174286002217\"
     * @summary 获取抖音视频合集详情数据/Get Douyin video mix detail data
     * @param {string} mixId 合集id/Mix id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchVideoMixDetailApiV1DouyinAppV3FetchVideoMixDetailGet_27(mixId: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchVideoMixDetailApiV1DouyinAppV3FetchVideoMixDetailGet_27(mixId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音视频合集作品列表数据 ### 参数: - mix_id: 合集id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 视频合集作品列表数据  # [English] ### Purpose: - Get Douyin video mix post list data ### Parameters: - mix_id: Mix id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Video mix post list data  # [示例/Example] mix_id = \"7302011174286002217\" cursor = 0 count = 20
     * @summary 获取抖音视频合集作品列表数据/Get Douyin video mix post list data
     * @param {string} mixId 合集id/Mix id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchVideoMixPostListApiV1DouyinAppV3FetchVideoMixPostListGet(mixId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchVideoMixPostListApiV1DouyinAppV3FetchVideoMixPostListGet(mixId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音视频合集作品列表数据 ### 参数: - mix_id: 合集id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 视频合集作品列表数据  # [English] ### Purpose: - Get Douyin video mix post list data ### Parameters: - mix_id: Mix id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Video mix post list data  # [示例/Example] mix_id = \"7302011174286002217\" cursor = 0 count = 20
     * @summary 获取抖音视频合集作品列表数据/Get Douyin video mix post list data
     * @param {string} mixId 合集id/Mix id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchVideoMixPostListApiV1DouyinAppV3FetchVideoMixPostListGet_28(mixId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchVideoMixPostListApiV1DouyinAppV3FetchVideoMixPostListGet_28(mixId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"
     * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_video_search_result）/Get video search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_video_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 时长/Duration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchVideoSearchResultApiV1DouyinAppV3FetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchVideoSearchResultApiV1DouyinAppV3FetchVideoSearchResultGet(keyword, offset, count, sortType, publishTime, filterDuration, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 180:最近半年 - filter_duration: 0:不限 0-1:1分钟以内 1-5:1-5分钟 5-10000:5分钟以上 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 180: Last half year - filter_duration: 0: Unlimited 0-1: Within 1 minute 1-5: 1-5 minutes 5-10000: More than 5 minutes ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = \"0\" publish_time = \"0\" filter_duration = \"0\"
     * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/douyin/web/fetch_video_search_result）/Get video search results of specified keywords (deprecated, alternative interface: /api/v1/douyin/web/fetch_video_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 时长/Duration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchVideoSearchResultApiV1DouyinAppV3FetchVideoSearchResultGet_29(keyword: string, offset?: number, count?: number, sortType?: string, publishTime?: string, filterDuration?: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchVideoSearchResultApiV1DouyinAppV3FetchVideoSearchResultGet_29(keyword, offset, count, sortType, publishTime, filterDuration, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"
     * @summary 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
     * @param {string} keyword 关键词/Keyword
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 视频时长/Duration filter
     * @param {number} [page] 页码/Page
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchVideoSearchResultV2ApiV1DouyinAppV3FetchVideoSearchResultV2Get(keyword: string, sortType?: string, publishTime?: string, filterDuration?: string, page?: number, searchId?: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchVideoSearchResultV2ApiV1DouyinAppV3FetchVideoSearchResultV2Get(keyword, sortType, publishTime, filterDuration, page, searchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果V2，此接口稳定性更好，收费更贵，当`/api/v1/douyin/web/fetch_video_search_result`接口不稳定时，建议使用此接口。 - 收费标准为：0.01$每次请求。 ### 参数: - keyword: 关键词 - sort_type:     - 排序类型，可用值如下：     - _0 :综合(General)     - _1 :最多点赞(More likes)     - _2 :最新发布(New) - publish_time：     - 发布时间，可用值如下：     - _0 :不限(No Limit)     - _1 :一天之内(last 1 day)     - _7 :一周之内(last 1 week)     - _180 :半年之内(last half year) - filter_duration：     - 视频时长，可用值如下：     - _0 :不限(No Limit)     - _1 :1分钟以下(1 minute and below)     - _2 :1-5分钟 (1-5 minutes)     - _3 :5分钟以上(5 minutes more) - page: 页码     - 默认从1开始，然后依次递增加1 - search_id: 搜索id，第一次请求时为空，第二次翻页时需要提供，需要从上一次请求的返回响应中获取。     - 例如: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### 返回: - 视频搜索结果V2  # [English] ### Purpose: - Get video search results of specified keywords V2, this interface has better stability and higher cost, when the `/api/v1/douyin/web/fetch_video_search_result` interface is unstable, it is recommended to use this interface. - The charging standard is: $0.01 per request. ### Parameters: - keyword: Keyword - sort_type:     - Sort type, available values are as follows:     - _0 : General     - _1 : More likes     - _2 : New - publish_time:     - Publish time, available values are as follows:     - _0 : No Limit     - _1 : last 1 day     - _7 : last 1 week     - _180 : last half year - filter_duration:     - Duration filter, available values are as follows:     - _0 : No Limit     - _1 : 1 minute and below     - _2 : 1-5 minutes     - _3 : 5 minutes more - page: Page     - Start from 1 by default, then increase by 1 each time - search_id: Search id, empty for the first request, need to provide for the second paging, need to get it from the return response of the last request.     - For example: search_id = \"2024083107320448E367ECDCCC6B71F7F3\"     - JSON Path-1 : $.data.extra.logid     - JSON Path-2 : $.data.log_pb.impr_id ### Return: - Video search results V2  # [示例/Example] keyword = \"中华娘\" sort_type = \"_0\" publish_time = \"_0\" filter_duration = \"_0\" page = 1 search_id = \"\"
     * @summary 获取指定关键词的视频搜索结果V2/Get video search results of specified keywords V2
     * @param {string} keyword 关键词/Keyword
     * @param {string} [sortType] 排序类型/Sort type
     * @param {string} [publishTime] 发布时间/Publish time
     * @param {string} [filterDuration] 视频时长/Duration filter
     * @param {number} [page] 页码/Page
     * @param {string} [searchId] 搜索id，翻页时需要提供/Search id, need to provide when paging
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchVideoSearchResultV2ApiV1DouyinAppV3FetchVideoSearchResultV2Get_30(keyword: string, sortType?: string, publishTime?: string, filterDuration?: string, page?: number, searchId?: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchVideoSearchResultV2ApiV1DouyinAppV3FetchVideoSearchResultV2Get_30(keyword, sortType, publishTime, filterDuration, page, searchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据视频ID获取作品的统计数据 - 抖音大多数接口已经不再返回作品的播放数，只能通过此接口获取。 - 可以获取到的统计有：     - 点赞数（digg_count）     - 下载数（download_count）     - 播放数（play_count）     - 分享数（share_count） ### 参数: - aweme_ids: 作品id，支持多个视频id，用逗号隔开即可，不能超过2个，单个也可以，则无需逗号。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistical data of the Post according to the video ID - Most of the Douyin interfaces no longer return the number of plays of the Post, and can only be obtained through this interface. - List of statistics that can be obtained:     - Like count (digg_count)     - Download count (download_count)     - Play count (play_count)     - Share count (share_count) ### Parameters: - aweme_ids: Video id, supports multiple video ids, separated by commas, no more than 2, single is also possible, no need for commas. ### Return: - Post statistics data  # [示例/Example] aweme_ids = \"7448118827402972455,7126745726494821640\"
     * @summary 根据视频ID获取作品的统计数据（点赞数、下载数、播放数、分享数）/Get the statistical data of the Post according to the video ID (like count, download count, play count, share count)
     * @param {string} awemeIds 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchVideoStatisticsApiV1DouyinAppV3FetchVideoStatisticsGet(awemeIds: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchVideoStatisticsApiV1DouyinAppV3FetchVideoStatisticsGet(awemeIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据视频ID获取作品的统计数据 - 抖音大多数接口已经不再返回作品的播放数，只能通过此接口获取。 - 可以获取到的统计有：     - 点赞数（digg_count）     - 下载数（download_count）     - 播放数（play_count）     - 分享数（share_count） ### 参数: - aweme_ids: 作品id，支持多个视频id，用逗号隔开即可，不能超过2个，单个也可以，则无需逗号。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistical data of the Post according to the video ID - Most of the Douyin interfaces no longer return the number of plays of the Post, and can only be obtained through this interface. - List of statistics that can be obtained:     - Like count (digg_count)     - Download count (download_count)     - Play count (play_count)     - Share count (share_count) ### Parameters: - aweme_ids: Video id, supports multiple video ids, separated by commas, no more than 2, single is also possible, no need for commas. ### Return: - Post statistics data  # [示例/Example] aweme_ids = \"7448118827402972455,7126745726494821640\"
     * @summary 根据视频ID获取作品的统计数据（点赞数、下载数、播放数、分享数）/Get the statistical data of the Post according to the video ID (like count, download count, play count, share count)
     * @param {string} awemeIds 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public fetchVideoStatisticsApiV1DouyinAppV3FetchVideoStatisticsGet_31(awemeIds: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).fetchVideoStatisticsApiV1DouyinAppV3FetchVideoStatisticsGet_31(awemeIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成抖音短链接 ### 参数: - url: 抖音链接 ### 返回: - 短链接数据  # [English] ### Purpose: - Generate Douyin short link ### Parameters: - url: Douyin link ### Return: - Short link data  # [示例/Example] url = \"https://www.douyin.com/passport/web/logout/\"
     * @summary 生成抖音短链接/Generate Douyin short link
     * @param {string} url 抖音链接/Douyin link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public generateDouyinShortUrlApiV1DouyinAppV3GenerateDouyinShortUrlGet(url: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).generateDouyinShortUrlApiV1DouyinAppV3GenerateDouyinShortUrlGet(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成抖音短链接 ### 参数: - url: 抖音链接 ### 返回: - 短链接数据  # [English] ### Purpose: - Generate Douyin short link ### Parameters: - url: Douyin link ### Return: - Short link data  # [示例/Example] url = \"https://www.douyin.com/passport/web/logout/\"
     * @summary 生成抖音短链接/Generate Douyin short link
     * @param {string} url 抖音链接/Douyin link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public generateDouyinShortUrlApiV1DouyinAppV3GenerateDouyinShortUrlGet_32(url: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).generateDouyinShortUrlApiV1DouyinAppV3GenerateDouyinShortUrlGet_32(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成抖音视频分享二维码 ### 参数: - object_id: 作品id或作者uid ### 返回: - 二维码数据  # [English] ### Purpose: - Generate Douyin video share QR code ### Parameters: - object_id: Video id or author uid ### Return: - QR code data  # [示例/Example] object_id = \"7348044435755846962\"
     * @summary 生成抖音视频分享二维码/Generate Douyin video share QR code
     * @param {string} objectId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public generateDouyinVideoShareQrcodeApiV1DouyinAppV3GenerateDouyinVideoShareQrcodeGet(objectId: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).generateDouyinVideoShareQrcodeApiV1DouyinAppV3GenerateDouyinVideoShareQrcodeGet(objectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成抖音视频分享二维码 ### 参数: - object_id: 作品id或作者uid ### 返回: - 二维码数据  # [English] ### Purpose: - Generate Douyin video share QR code ### Parameters: - object_id: Video id or author uid ### Return: - QR code data  # [示例/Example] object_id = \"7348044435755846962\"
     * @summary 生成抖音视频分享二维码/Generate Douyin video share QR code
     * @param {string} objectId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public generateDouyinVideoShareQrcodeApiV1DouyinAppV3GenerateDouyinVideoShareQrcodeGet_33(objectId: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).generateDouyinVideoShareQrcodeApiV1DouyinAppV3GenerateDouyinVideoShareQrcodeGet_33(objectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public handlerUserProfileApiV1DouyinAppV3HandlerUserProfileGet(secUserId: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).handlerUserProfileApiV1DouyinAppV3HandlerUserProfileGet(secUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public handlerUserProfileApiV1DouyinAppV3HandlerUserProfileGet_34(secUserId: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).handlerUserProfileApiV1DouyinAppV3HandlerUserProfileGet_34(secUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword  ### Return: - Share link  # [示例/Example] keyword = \"雷军\"
     * @summary 生成抖音分享链接，唤起抖音APP，跳转指定关键词搜索结果/Generate Douyin share link, call Douyin APP, and jump to the specified keyword search result
     * @param {string} keyword 关键词/Keyword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public openDouyinAppToKeywordSearchApiV1DouyinAppV3OpenDouyinAppToKeywordSearchGet(keyword: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).openDouyinAppToKeywordSearchApiV1DouyinAppV3OpenDouyinAppToKeywordSearchGet(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定关键词搜索结果。  ### 参数: - keyword: 关键词  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified keyword search result  ### Parameters: - keyword: Keyword  ### Return: - Share link  # [示例/Example] keyword = \"雷军\"
     * @summary 生成抖音分享链接，唤起抖音APP，跳转指定关键词搜索结果/Generate Douyin share link, call Douyin APP, and jump to the specified keyword search result
     * @param {string} keyword 关键词/Keyword
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public openDouyinAppToKeywordSearchApiV1DouyinAppV3OpenDouyinAppToKeywordSearchGet_35(keyword: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).openDouyinAppToKeywordSearchApiV1DouyinAppV3OpenDouyinAppToKeywordSearchGet_35(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，给指定用户发送私信。  ### 参数: - uid: 用户id - sec_uid: 用户sec_uid - 注意: 请确保user_id和sec_uid都有值，否则无法发送私信给指定用户。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and send private messages to specified users  ### Parameters: - uid: User id - sec_uid: User sec_uid - Note: Please make sure that both user_id and sec_uid have values, otherwise you cannot send private messages to the specified user.  ### Return: - Share link  # [示例/Example] uid = \"96874812426\" sec_uid = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\"
     * @summary 生成抖音分享链接，唤起抖音APP，给指定用户发送私信/Generate Douyin share link, call Douyin APP, and send private messages to specified users
     * @param {string} uid 用户id/User id
     * @param {string} secUid 用户sec_uid/User sec_uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public openDouyinAppToSendPrivateMessageApiV1DouyinAppV3OpenDouyinAppToSendPrivateMessageGet(uid: string, secUid: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).openDouyinAppToSendPrivateMessageApiV1DouyinAppV3OpenDouyinAppToSendPrivateMessageGet(uid, secUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，给指定用户发送私信。  ### 参数: - uid: 用户id - sec_uid: 用户sec_uid - 注意: 请确保user_id和sec_uid都有值，否则无法发送私信给指定用户。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and send private messages to specified users  ### Parameters: - uid: User id - sec_uid: User sec_uid - Note: Please make sure that both user_id and sec_uid have values, otherwise you cannot send private messages to the specified user.  ### Return: - Share link  # [示例/Example] uid = \"96874812426\" sec_uid = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\"
     * @summary 生成抖音分享链接，唤起抖音APP，给指定用户发送私信/Generate Douyin share link, call Douyin APP, and send private messages to specified users
     * @param {string} uid 用户id/User id
     * @param {string} secUid 用户sec_uid/User sec_uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public openDouyinAppToSendPrivateMessageApiV1DouyinAppV3OpenDouyinAppToSendPrivateMessageGet_36(uid: string, secUid: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).openDouyinAppToSendPrivateMessageApiV1DouyinAppV3OpenDouyinAppToSendPrivateMessageGet_36(uid, secUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定用户主页。  ### 参数: - uid: 用户id - sec_uid: 用户sec_uid - 注意: 请确保user_id和sec_uid都有值，否则无法跳转到指定用户主页。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified user profile  ### Parameters: - uid: User id - sec_uid: User sec_uid - Note: Please make sure that both user_id and sec_uid have values, otherwise you cannot jump to the specified user profile.  ### Return: - Share link  # [示例/Example] uid = \"96874812426\" sec_uid = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\"
     * @summary 生成抖音分享链接，唤起抖音APP，跳转指定用户主页/Generate Douyin share link, call Douyin APP, and jump to the specified user profile
     * @param {string} uid 用户id/User id
     * @param {string} secUid 用户sec_uid/User sec_uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public openDouyinAppToUserProfileApiV1DouyinAppV3OpenDouyinAppToUserProfileGet(uid: string, secUid: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).openDouyinAppToUserProfileApiV1DouyinAppV3OpenDouyinAppToUserProfileGet(uid, secUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定用户主页。  ### 参数: - uid: 用户id - sec_uid: 用户sec_uid - 注意: 请确保user_id和sec_uid都有值，否则无法跳转到指定用户主页。  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified user profile  ### Parameters: - uid: User id - sec_uid: User sec_uid - Note: Please make sure that both user_id and sec_uid have values, otherwise you cannot jump to the specified user profile.  ### Return: - Share link  # [示例/Example] uid = \"96874812426\" sec_uid = \"MS4wLjABAAAA9y04iBlVdeMQqTJbqsQZKb-tqWqWW29jPVJqideHT70\"
     * @summary 生成抖音分享链接，唤起抖音APP，跳转指定用户主页/Generate Douyin share link, call Douyin APP, and jump to the specified user profile
     * @param {string} uid 用户id/User id
     * @param {string} secUid 用户sec_uid/User sec_uid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public openDouyinAppToUserProfileApiV1DouyinAppV3OpenDouyinAppToUserProfileGet_37(uid: string, secUid: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).openDouyinAppToUserProfileApiV1DouyinAppV3OpenDouyinAppToUserProfileGet_37(uid, secUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified video  ### Parameters: - aweme_id: Video id  ### Return: - Share link  # [示例/Example] aweme_id = \"7197598285882789120\"
     * @summary 生成抖音分享链接，唤起抖音APP，跳转指定作品详情页/Generate Douyin share link, call Douyin APP, and jump to the specified video details page
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public openDouyinAppToVideoDetailApiV1DouyinAppV3OpenDouyinAppToVideoDetailGet(awemeId: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).openDouyinAppToVideoDetailApiV1DouyinAppV3OpenDouyinAppToVideoDetailGet(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成抖音分享链接，唤起抖音APP，跳转指定作品详情页。  ### 参数: - aweme_id: 作品id  ### 返回: - 分享链接  # [English] ### Purpose: - Generate Douyin share link, call Douyin APP, and jump to the specified video  ### Parameters: - aweme_id: Video id  ### Return: - Share link  # [示例/Example] aweme_id = \"7197598285882789120\"
     * @summary 生成抖音分享链接，唤起抖音APP，跳转指定作品详情页/Generate Douyin share link, call Douyin APP, and jump to the specified video details page
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public openDouyinAppToVideoDetailApiV1DouyinAppV3OpenDouyinAppToVideoDetailGet_38(awemeId: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).openDouyinAppToVideoDetailApiV1DouyinAppV3OpenDouyinAppToVideoDetailGet_38(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device in Douyin APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, with http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy = \"http://username:password@ip:port\"  # [响应/Response] ```json {     \"code\": 200,     \"router\": \"/api/v1/douyin/app/v3/register_device\",     \"params\": {         \"proxy\": \"username:password@ip:port\"     },     \"data\": {         \"iid\": \"3631064037200330\",         \"device_id\": \"3631064037196234\",         \"mssdk_token\": \"\",         \"device_platform\": \"android\",         \"channel\": \"xiaomi_64_1775\",         \"version_code\": 240900,         \"version_name\": \"24.9.0\",         \"manifest_version_code\": 240901,         \"update_version_code\": 24909900,         \"device_type\": \"V1963A\",         \"device_brand\": \"vivo\",         \"device_model\": \"V1963A\",         \"openudid\": \"5d736335afc17aab\",         \"os_api\": 29,         \"os_version\": \"10\",         \"resolution\": \"2400x1080\",         \"dpi\": 480,         \"host_abi\": \"arm64-v8a\",         \"ua\": \"com.ss.android.ugc.aweme/240901 (Linux; U; Android 10; zh_CN; V1963A; Build/compiler10301842;tt-ok/3.12.13.4-tiktok)\",         \"cookies\": {             \"install_id\": \"3631064037200330\",             \"odin_tt\": \"5ef413aaa319b3a4077814a1da3d3e1bcec3e8640ddc3ad30945a8518f59d1563d24c3b7a3c59d97fbd5344f13208a25cf143312acf4462b028e56cd0b611cc3fc2a64318f7375470d6db86440f92841\",             \"d_ticket\": \"42186c5b0c54ea1a2a9e02d4e62bf6ab\",             \"store-region\": \"cn-js\",             \"store-region-src\": \"did\",             \"multi_sids\": \"462868309327184:38167255076198698951907954929873\",             \"passport_csrf_token\": \"6f75287240634ad1f51f3b3bdcdb5424\",             \"passport_csrf_token_default\": \"6f75287240634ad1f51f3b3bdcdb5424\",             \"ttreq\": \"1$7f616210b41fc044b1f164542ac4e064288b5163\"         },         \"lanusk\": \"\",         \"device_manufacturer\": \"vivo\",         \"uuid\": \"357125675341697\",         \"cdid\": \"f64372bf-4d1d-4883-bc8a-d3d6fa87a9e3\",         \"first_launch_timestamp\": 1726970498636,         \"x_tt_dt\": \"AAA2FGV24A2GAOHJJ3D3XCJ32IZDZ26XXKMQAOTDNUDWTB644ISU5YA3GBYVX2Y3XVOQ3ISDH3UA4JXGGNFXBLJ6AAZU7QTIBKHFYJLDJMDG5K36LVPBRCKLHW2XM\",         \"BootTime\": 1726980411,         \"MbTime\": 1726780411,         \"server_time\": 1726980500,         \"mc\": \"2A:66:7A:2D:8B:29\",         \"rom\": \"compiler10301842\",         \"rom_version\": \"PD1963-user 10 QP1A.190711.020 compiler10301842 release-keys\"     } } ```
     * @summary 抖音APP注册设备/Douyin APP register device
     * @param {string} [proxy] 代理/Proxy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public registerDeviceApiV1DouyinAppV3RegisterDeviceGet(proxy?: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).registerDeviceApiV1DouyinAppV3RegisterDeviceGet(proxy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 抖音APP注册设备，获取设备信息以及设备的Cookie信息。  ### 参数: - proxy: 代理，要带http://或https://，仅支持http代理。   - 格式: username:password@ip:port  ### 返回: - 设备信息以及设备的Cookie信息。  # [English] ### Purpose: - Register device in Douyin APP, retrieve device information and device cookies.  ### Parameters: - proxy: Proxy, with http:// or https://, only supports http proxies.   - Format: username:password@ip:port  ### Return: - Device information and device cookies.  # [示例/Example] proxy = \"http://username:password@ip:port\"  # [响应/Response] ```json {     \"code\": 200,     \"router\": \"/api/v1/douyin/app/v3/register_device\",     \"params\": {         \"proxy\": \"username:password@ip:port\"     },     \"data\": {         \"iid\": \"3631064037200330\",         \"device_id\": \"3631064037196234\",         \"mssdk_token\": \"\",         \"device_platform\": \"android\",         \"channel\": \"xiaomi_64_1775\",         \"version_code\": 240900,         \"version_name\": \"24.9.0\",         \"manifest_version_code\": 240901,         \"update_version_code\": 24909900,         \"device_type\": \"V1963A\",         \"device_brand\": \"vivo\",         \"device_model\": \"V1963A\",         \"openudid\": \"5d736335afc17aab\",         \"os_api\": 29,         \"os_version\": \"10\",         \"resolution\": \"2400x1080\",         \"dpi\": 480,         \"host_abi\": \"arm64-v8a\",         \"ua\": \"com.ss.android.ugc.aweme/240901 (Linux; U; Android 10; zh_CN; V1963A; Build/compiler10301842;tt-ok/3.12.13.4-tiktok)\",         \"cookies\": {             \"install_id\": \"3631064037200330\",             \"odin_tt\": \"5ef413aaa319b3a4077814a1da3d3e1bcec3e8640ddc3ad30945a8518f59d1563d24c3b7a3c59d97fbd5344f13208a25cf143312acf4462b028e56cd0b611cc3fc2a64318f7375470d6db86440f92841\",             \"d_ticket\": \"42186c5b0c54ea1a2a9e02d4e62bf6ab\",             \"store-region\": \"cn-js\",             \"store-region-src\": \"did\",             \"multi_sids\": \"462868309327184:38167255076198698951907954929873\",             \"passport_csrf_token\": \"6f75287240634ad1f51f3b3bdcdb5424\",             \"passport_csrf_token_default\": \"6f75287240634ad1f51f3b3bdcdb5424\",             \"ttreq\": \"1$7f616210b41fc044b1f164542ac4e064288b5163\"         },         \"lanusk\": \"\",         \"device_manufacturer\": \"vivo\",         \"uuid\": \"357125675341697\",         \"cdid\": \"f64372bf-4d1d-4883-bc8a-d3d6fa87a9e3\",         \"first_launch_timestamp\": 1726970498636,         \"x_tt_dt\": \"AAA2FGV24A2GAOHJJ3D3XCJ32IZDZ26XXKMQAOTDNUDWTB644ISU5YA3GBYVX2Y3XVOQ3ISDH3UA4JXGGNFXBLJ6AAZU7QTIBKHFYJLDJMDG5K36LVPBRCKLHW2XM\",         \"BootTime\": 1726980411,         \"MbTime\": 1726780411,         \"server_time\": 1726980500,         \"mc\": \"2A:66:7A:2D:8B:29\",         \"rom\": \"compiler10301842\",         \"rom_version\": \"PD1963-user 10 QP1A.190711.020 compiler10301842 release-keys\"     } } ```
     * @summary 抖音APP注册设备/Douyin APP register device
     * @param {string} [proxy] 代理/Proxy
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV3APIApi
     */
    public registerDeviceApiV1DouyinAppV3RegisterDeviceGet_39(proxy?: string, options?: any) {
        return DouyinAppV3APIApiFp(this.configuration).registerDeviceApiV1DouyinAppV3RegisterDeviceGet_39(proxy, options).then((request) => request(this.axios, this.basePath));
    }

}
