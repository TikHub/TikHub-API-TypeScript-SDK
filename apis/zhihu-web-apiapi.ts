// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
/**
 * ZhihuWebAPIApi - axios parameter creator
 * @export
 */
export const ZhihuWebAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取知乎AI搜索 ### 参数: - message_content: 搜索内容 ### 返回: - 知乎AI搜索消息ID，用于请求搜索结果  # [English] ### Purpose: - Get Zhihu AI Search ### Parameters: - message_content: Search Content ### Returns: - Zhihu AI Search Message ID for requesting search results  # [示例/Example] message_content = \"deepseek\"
         * @summary 获取知乎AI搜索/Get Zhihu AI Search
         * @param {string} messageContent 搜索内容/Search Content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAiSearchApiV1ZhihuWebFetchAiSearchGet: async (messageContent: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageContent' is not null or undefined
            if (messageContent === null || messageContent === undefined) {
                throw new RequiredError('messageContent','Required parameter messageContent was null or undefined when calling fetchAiSearchApiV1ZhihuWebFetchAiSearchGet.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_ai_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (messageContent !== undefined) {
                localVarQueryParameter['message_content'] = messageContent;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎AI搜索 ### 参数: - message_content: 搜索内容 ### 返回: - 知乎AI搜索消息ID，用于请求搜索结果  # [English] ### Purpose: - Get Zhihu AI Search ### Parameters: - message_content: Search Content ### Returns: - Zhihu AI Search Message ID for requesting search results  # [示例/Example] message_content = \"deepseek\"
         * @summary 获取知乎AI搜索/Get Zhihu AI Search
         * @param {string} messageContent 搜索内容/Search Content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAiSearchApiV1ZhihuWebFetchAiSearchGet_1: async (messageContent: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageContent' is not null or undefined
            if (messageContent === null || messageContent === undefined) {
                throw new RequiredError('messageContent','Required parameter messageContent was null or undefined when calling fetchAiSearchApiV1ZhihuWebFetchAiSearchGet_1.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_ai_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (messageContent !== undefined) {
                localVarQueryParameter['message_content'] = messageContent;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎AI搜索结果 ### 参数: - message_id: 消息ID ### 返回: - 知乎AI搜索结果  # [English] ### Purpose: - Get Zhihu AI Search Result ### Parameters: - message_id: Message ID ### Returns: - Zhihu AI Search Result  # [示例/Example] message_id = \"5f8b4f4a-0b7c-4d1b-8c4f-2e5c0d6c1b9d\"
         * @summary 获取知乎AI搜索结果/Get Zhihu AI Search Result
         * @param {string} messageId 消息ID/Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet: async (messageId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            if (messageId === null || messageId === undefined) {
                throw new RequiredError('messageId','Required parameter messageId was null or undefined when calling fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_ai_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (messageId !== undefined) {
                localVarQueryParameter['message_id'] = messageId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎AI搜索结果 ### 参数: - message_id: 消息ID ### 返回: - 知乎AI搜索结果  # [English] ### Purpose: - Get Zhihu AI Search Result ### Parameters: - message_id: Message ID ### Returns: - Zhihu AI Search Result  # [示例/Example] message_id = \"5f8b4f4a-0b7c-4d1b-8c4f-2e5c0d6c1b9d\"
         * @summary 获取知乎AI搜索结果/Get Zhihu AI Search Result
         * @param {string} messageId 消息ID/Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet_2: async (messageId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            if (messageId === null || messageId === undefined) {
                throw new RequiredError('messageId','Required parameter messageId was null or undefined when calling fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet_2.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_ai_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (messageId !== undefined) {
                localVarQueryParameter['message_id'] = messageId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎文章搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页文章数量 - show_all_topics: 显示所有主题，     - 0 不显示话题     - 1 显示话题 - search_source: 搜索来源     - Filter 过滤参数生效     - Normal 为普通结果 - search_hash_id: 搜索哈希ID，用于过滤重复搜索结果 - vertical: 空 不限类型     - answer 只看回答     - article 只看文章     - zvideo 只看视频 - sort: 空 综合排序     - upvoted_count 最多赞同     - created_time 最新发布 - time_interval: 时间间隔     - 空 不限时间     - a_day 一天内     - a_week 一周内     - a_month 一个月内     - three_months 三个月内     - half_a_year 半年内     - a_year 一年内 - vertical_info: 垂类信息     - 0,0,0,0,0,0,0,0,0,0,0,0 不限类型，不会设置勿填 ### 返回: - 知乎文章搜索V3  # [English] ### Purpose: - Get Zhihu Article Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of articles per page - show_all_topics: Show all topics     - 0 Do not show topics     - 1 Show topics - search_source: Search Source     - Filter parameter takes effect     - Normal is normal result - search_hash_id: Search Hash ID, used to filter duplicate search results - vertical: Empty unlimited type     - answer only see answers     - article only see articles     - zvideo only see videos - sort: Empty comprehensive sorting     - upvoted_count most upvoted     - created_time latest release - time_interval: Time interval     - Empty unlimited time     - a_day within a day     - a_week within a week     - a_month within a month     - three_months within three months     - half_a_year within half a year     - a_year within a year - vertical_info: Vertical information     - 0,0,0,0,0,0,0,0,0,0,0,0 unlimited type, do not set do not fill ### Returns: - Zhihu Article Search V3  # [示例/Example] # 默认搜索，综合排序，不限时间 keyword = \"deepseek\" offset = \"0\" limit = \"20\" show_all_topics = 0 search_source = \"Normal\" search_hash_id = \"\" vertical = \"\" sort = \"\" time_interval = \"\" vertical_info = \"\"  # 只看回答，最多赞同，三月内 keyword = \"deepseek\" offset = \"0\" limit = \"20\" show_all_topics = 0 search_source = \"Filter\" search_hash_id = \"\" vertical = \"answer\" sort = \"upvoted_count\" time_interval = \"three_months\" vertical_info = \"0,0,0,0,0,0,0,0,0,0,0,0\"
         * @summary 获取知乎文章搜索V3/Get Zhihu Article Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页文章数量/Number of articles per page
         * @param {number} [showAllTopics] 显示所有主题/Show all topics
         * @param {string} [searchSource] 搜索来源/Search Source
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {string} [vertical] 垂类/Vertical Type
         * @param {string} [sort] 排序/Sort
         * @param {string} [timeInterval] 时间间隔/Time Interval
         * @param {string} [verticalInfo] 垂类信息/Vertical Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get: async (keyword: string, offset?: string, limit?: string, showAllTopics?: number, searchSource?: string, searchHashId?: string, vertical?: string, sort?: string, timeInterval?: string, verticalInfo?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_article_search_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (showAllTopics !== undefined) {
                localVarQueryParameter['show_all_topics'] = showAllTopics;
            }

            if (searchSource !== undefined) {
                localVarQueryParameter['search_source'] = searchSource;
            }

            if (searchHashId !== undefined) {
                localVarQueryParameter['search_hash_id'] = searchHashId;
            }

            if (vertical !== undefined) {
                localVarQueryParameter['vertical'] = vertical;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (timeInterval !== undefined) {
                localVarQueryParameter['time_interval'] = timeInterval;
            }

            if (verticalInfo !== undefined) {
                localVarQueryParameter['vertical_info'] = verticalInfo;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎文章搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页文章数量 - show_all_topics: 显示所有主题，     - 0 不显示话题     - 1 显示话题 - search_source: 搜索来源     - Filter 过滤参数生效     - Normal 为普通结果 - search_hash_id: 搜索哈希ID，用于过滤重复搜索结果 - vertical: 空 不限类型     - answer 只看回答     - article 只看文章     - zvideo 只看视频 - sort: 空 综合排序     - upvoted_count 最多赞同     - created_time 最新发布 - time_interval: 时间间隔     - 空 不限时间     - a_day 一天内     - a_week 一周内     - a_month 一个月内     - three_months 三个月内     - half_a_year 半年内     - a_year 一年内 - vertical_info: 垂类信息     - 0,0,0,0,0,0,0,0,0,0,0,0 不限类型，不会设置勿填 ### 返回: - 知乎文章搜索V3  # [English] ### Purpose: - Get Zhihu Article Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of articles per page - show_all_topics: Show all topics     - 0 Do not show topics     - 1 Show topics - search_source: Search Source     - Filter parameter takes effect     - Normal is normal result - search_hash_id: Search Hash ID, used to filter duplicate search results - vertical: Empty unlimited type     - answer only see answers     - article only see articles     - zvideo only see videos - sort: Empty comprehensive sorting     - upvoted_count most upvoted     - created_time latest release - time_interval: Time interval     - Empty unlimited time     - a_day within a day     - a_week within a week     - a_month within a month     - three_months within three months     - half_a_year within half a year     - a_year within a year - vertical_info: Vertical information     - 0,0,0,0,0,0,0,0,0,0,0,0 unlimited type, do not set do not fill ### Returns: - Zhihu Article Search V3  # [示例/Example] # 默认搜索，综合排序，不限时间 keyword = \"deepseek\" offset = \"0\" limit = \"20\" show_all_topics = 0 search_source = \"Normal\" search_hash_id = \"\" vertical = \"\" sort = \"\" time_interval = \"\" vertical_info = \"\"  # 只看回答，最多赞同，三月内 keyword = \"deepseek\" offset = \"0\" limit = \"20\" show_all_topics = 0 search_source = \"Filter\" search_hash_id = \"\" vertical = \"answer\" sort = \"upvoted_count\" time_interval = \"three_months\" vertical_info = \"0,0,0,0,0,0,0,0,0,0,0,0\"
         * @summary 获取知乎文章搜索V3/Get Zhihu Article Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页文章数量/Number of articles per page
         * @param {number} [showAllTopics] 显示所有主题/Show all topics
         * @param {string} [searchSource] 搜索来源/Search Source
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {string} [vertical] 垂类/Vertical Type
         * @param {string} [sort] 排序/Sort
         * @param {string} [timeInterval] 时间间隔/Time Interval
         * @param {string} [verticalInfo] 垂类信息/Vertical Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get_3: async (keyword: string, offset?: string, limit?: string, showAllTopics?: number, searchSource?: string, searchHashId?: string, vertical?: string, sort?: string, timeInterval?: string, verticalInfo?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get_3.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_article_search_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (showAllTopics !== undefined) {
                localVarQueryParameter['show_all_topics'] = showAllTopics;
            }

            if (searchSource !== undefined) {
                localVarQueryParameter['search_source'] = searchSource;
            }

            if (searchHashId !== undefined) {
                localVarQueryParameter['search_hash_id'] = searchHashId;
            }

            if (vertical !== undefined) {
                localVarQueryParameter['vertical'] = vertical;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (timeInterval !== undefined) {
                localVarQueryParameter['time_interval'] = timeInterval;
            }

            if (verticalInfo !== undefined) {
                localVarQueryParameter['vertical_info'] = verticalInfo;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏文章详情 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏文章详情  # [English] ### Purpose: - Get Zhihu Column Article Detail ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Article Detail  # [示例/Example] article_id = \"669214677\"
         * @summary 获取知乎专栏文章详情/Get Zhihu Column Article Detail
         * @param {string} articleId 文章ID/Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet: async (articleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            if (articleId === null || articleId === undefined) {
                throw new RequiredError('articleId','Required parameter articleId was null or undefined when calling fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_column_article_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (articleId !== undefined) {
                localVarQueryParameter['article_id'] = articleId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏文章详情 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏文章详情  # [English] ### Purpose: - Get Zhihu Column Article Detail ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Article Detail  # [示例/Example] article_id = \"669214677\"
         * @summary 获取知乎专栏文章详情/Get Zhihu Column Article Detail
         * @param {string} articleId 文章ID/Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet_4: async (articleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            if (articleId === null || articleId === undefined) {
                throw new RequiredError('articleId','Required parameter articleId was null or undefined when calling fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet_4.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_column_article_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (articleId !== undefined) {
                localVarQueryParameter['article_id'] = articleId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏文章列表 ### 参数: - column_id: 专栏ID - limit: 每页文章数量 - offset: 偏移量 ### 返回: - 知乎专栏文章列表  # [English] ### Purpose: - Get Zhihu Column Articles ### Parameters: - column_id: Column ID - limit: Number of articles per page - offset: Offset ### Returns: - Zhihu Column Articles  # [示例/Example] column_id = \"zhangjiawei\" limit = \"10\" offset = \"0\"
         * @summary 获取知乎专栏文章列表/Get Zhihu Column Articles
         * @param {string} columnId 专栏ID/Column ID
         * @param {string} [limit] 每页文章数量/Number of articles per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet: async (columnId: string, limit?: string, offset?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'columnId' is not null or undefined
            if (columnId === null || columnId === undefined) {
                throw new RequiredError('columnId','Required parameter columnId was null or undefined when calling fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_column_articles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (columnId !== undefined) {
                localVarQueryParameter['column_id'] = columnId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏文章列表 ### 参数: - column_id: 专栏ID - limit: 每页文章数量 - offset: 偏移量 ### 返回: - 知乎专栏文章列表  # [English] ### Purpose: - Get Zhihu Column Articles ### Parameters: - column_id: Column ID - limit: Number of articles per page - offset: Offset ### Returns: - Zhihu Column Articles  # [示例/Example] column_id = \"zhangjiawei\" limit = \"10\" offset = \"0\"
         * @summary 获取知乎专栏文章列表/Get Zhihu Column Articles
         * @param {string} columnId 专栏ID/Column ID
         * @param {string} [limit] 每页文章数量/Number of articles per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet_5: async (columnId: string, limit?: string, offset?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'columnId' is not null or undefined
            if (columnId === null || columnId === undefined) {
                throw new RequiredError('columnId','Required parameter columnId was null or undefined when calling fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet_5.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_column_articles`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (columnId !== undefined) {
                localVarQueryParameter['column_id'] = columnId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏评论区配置 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏评论区配置  # [English] ### Purpose: - Get Zhihu Column Comment Config ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Comment Config  # [示例/Example] article_id = \"669214677\"
         * @summary 获取知乎专栏评论区配置/Get Zhihu Column Comment Config
         * @param {string} articleId 文章ID/Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet: async (articleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            if (articleId === null || articleId === undefined) {
                throw new RequiredError('articleId','Required parameter articleId was null or undefined when calling fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_column_comment_config`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (articleId !== undefined) {
                localVarQueryParameter['article_id'] = articleId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏评论区配置 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏评论区配置  # [English] ### Purpose: - Get Zhihu Column Comment Config ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Comment Config  # [示例/Example] article_id = \"669214677\"
         * @summary 获取知乎专栏评论区配置/Get Zhihu Column Comment Config
         * @param {string} articleId 文章ID/Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet_6: async (articleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            if (articleId === null || articleId === undefined) {
                throw new RequiredError('articleId','Required parameter articleId was null or undefined when calling fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet_6.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_column_comment_config`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (articleId !== undefined) {
                localVarQueryParameter['article_id'] = articleId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎相似专栏推荐 ### 参数: - article_id: 文章ID - limit: 每页专栏数量 - offset: 偏移量 ### 返回: - 知乎相似专栏推荐  # [English] ### Purpose: - Get Zhihu Similar Column Recommend ### Parameters: - article_id: Article ID - limit: Number of columns per page - offset: Offset ### Returns: - Zhihu Similar Column Recommend  # [示例/Example] article_id = \"669214677\" limit = \"12\" offset = \"0\"
         * @summary 获取知乎相似专栏推荐/Get Zhihu Similar Column Recommend
         * @param {string} articleId 文章ID/Article ID
         * @param {string} [limit] 每页专栏数量/Number of columns per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet: async (articleId: string, limit?: string, offset?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            if (articleId === null || articleId === undefined) {
                throw new RequiredError('articleId','Required parameter articleId was null or undefined when calling fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_column_recommend`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (articleId !== undefined) {
                localVarQueryParameter['article_id'] = articleId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎相似专栏推荐 ### 参数: - article_id: 文章ID - limit: 每页专栏数量 - offset: 偏移量 ### 返回: - 知乎相似专栏推荐  # [English] ### Purpose: - Get Zhihu Similar Column Recommend ### Parameters: - article_id: Article ID - limit: Number of columns per page - offset: Offset ### Returns: - Zhihu Similar Column Recommend  # [示例/Example] article_id = \"669214677\" limit = \"12\" offset = \"0\"
         * @summary 获取知乎相似专栏推荐/Get Zhihu Similar Column Recommend
         * @param {string} articleId 文章ID/Article ID
         * @param {string} [limit] 每页专栏数量/Number of columns per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet_7: async (articleId: string, limit?: string, offset?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            if (articleId === null || articleId === undefined) {
                throw new RequiredError('articleId','Required parameter articleId was null or undefined when calling fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet_7.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_column_recommend`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (articleId !== undefined) {
                localVarQueryParameter['article_id'] = articleId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏文章互动关系 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏互动关系  # [English] ### Purpose: - Get Zhihu Column Relationship ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Relationship  # [示例/Example] article_id = \"669214677\"
         * @summary 获取知乎专栏文章互动关系/Get Zhihu Column Article Relationship
         * @param {string} articleId 文章ID/Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet: async (articleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            if (articleId === null || articleId === undefined) {
                throw new RequiredError('articleId','Required parameter articleId was null or undefined when calling fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_column_relationship`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (articleId !== undefined) {
                localVarQueryParameter['article_id'] = articleId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏文章互动关系 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏互动关系  # [English] ### Purpose: - Get Zhihu Column Relationship ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Relationship  # [示例/Example] article_id = \"669214677\"
         * @summary 获取知乎专栏文章互动关系/Get Zhihu Column Article Relationship
         * @param {string} articleId 文章ID/Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet_8: async (articleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'articleId' is not null or undefined
            if (articleId === null || articleId === undefined) {
                throw new RequiredError('articleId','Required parameter articleId was null or undefined when calling fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet_8.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_column_relationship`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (articleId !== undefined) {
                localVarQueryParameter['article_id'] = articleId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页专栏数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎专栏搜索V3  # [English] ### Purpose: - Get Zhihu Column Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of columns per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Column Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎专栏搜索V3/Get Zhihu Column Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页专栏数量/Number of columns per page
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get: async (keyword: string, offset?: string, limit?: string, searchHashId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_column_search_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (searchHashId !== undefined) {
                localVarQueryParameter['search_hash_id'] = searchHashId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页专栏数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎专栏搜索V3  # [English] ### Purpose: - Get Zhihu Column Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of columns per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Column Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎专栏搜索V3/Get Zhihu Column Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页专栏数量/Number of columns per page
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get_9: async (keyword: string, offset?: string, limit?: string, searchHashId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get_9.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_column_search_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (searchHashId !== undefined) {
                localVarQueryParameter['search_hash_id'] = searchHashId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎评论区V5 ### 参数: - answer_id: 回答ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎评论区V5  # [English] ### Purpose: - Get Zhihu Comment V5 ### Parameters: - answer_id: Answer ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Comment V5  # [示例/Example] answer_id = \"89226347214\" order_by = \"score\" limit = \"20\" offset = \"\" # 1739257701_11108372663_0
         * @summary 获取知乎评论区V5/Get Zhihu Comment V5
         * @param {string} answerId 回答ID/Answer ID
         * @param {string} [orderBy] 排序/Sort
         * @param {string} [limit] 每页评论数量/Number of comments per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get: async (answerId: string, orderBy?: string, limit?: string, offset?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'answerId' is not null or undefined
            if (answerId === null || answerId === undefined) {
                throw new RequiredError('answerId','Required parameter answerId was null or undefined when calling fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_comment_v5`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (answerId !== undefined) {
                localVarQueryParameter['answer_id'] = answerId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎评论区V5 ### 参数: - answer_id: 回答ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎评论区V5  # [English] ### Purpose: - Get Zhihu Comment V5 ### Parameters: - answer_id: Answer ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Comment V5  # [示例/Example] answer_id = \"89226347214\" order_by = \"score\" limit = \"20\" offset = \"\" # 1739257701_11108372663_0
         * @summary 获取知乎评论区V5/Get Zhihu Comment V5
         * @param {string} answerId 回答ID/Answer ID
         * @param {string} [orderBy] 排序/Sort
         * @param {string} [limit] 每页评论数量/Number of comments per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get_10: async (answerId: string, orderBy?: string, limit?: string, offset?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'answerId' is not null or undefined
            if (answerId === null || answerId === undefined) {
                throw new RequiredError('answerId','Required parameter answerId was null or undefined when calling fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get_10.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_comment_v5`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (answerId !== undefined) {
                localVarQueryParameter['answer_id'] = answerId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎电子书搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页电子书数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎电子书搜索V3  # [English] ### Purpose: - Get Zhihu Ebook Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of ebooks per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Ebook Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎电子书搜索V3/Get Zhihu Ebook Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页电子书数量/Number of ebooks per page
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get: async (keyword: string, offset?: string, limit?: string, searchHashId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_ebook_search_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (searchHashId !== undefined) {
                localVarQueryParameter['search_hash_id'] = searchHashId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎电子书搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页电子书数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎电子书搜索V3  # [English] ### Purpose: - Get Zhihu Ebook Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of ebooks per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Ebook Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎电子书搜索V3/Get Zhihu Ebook Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页电子书数量/Number of ebooks per page
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get_11: async (keyword: string, offset?: string, limit?: string, searchHashId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get_11.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_ebook_search_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (searchHashId !== undefined) {
                localVarQueryParameter['search_hash_id'] = searchHashId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎首页热榜 ### 参数: - limit: 每页文章数量 - desktop: 是否为桌面端 ### 返回: - 知乎首页热榜  # [English] ### Purpose: - Get Zhihu Hot List ### Parameters: - limit: Number of articles per page - desktop: Is it a desktop ### Returns: - Zhihu Hot List  # [示例/Example] limit = \"50\" desktop = \"true\"
         * @summary 获取知乎首页热榜/Get Zhihu Hot List
         * @param {string} [limit] 每页文章数量/Number of articles per page
         * @param {string} [desktop] 是否为桌面端/Is it a desktop
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotListApiV1ZhihuWebFetchHotListGet: async (limit?: string, desktop?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/zhihu/web/fetch_hot_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (desktop !== undefined) {
                localVarQueryParameter['desktop'] = desktop;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎首页热榜 ### 参数: - limit: 每页文章数量 - desktop: 是否为桌面端 ### 返回: - 知乎首页热榜  # [English] ### Purpose: - Get Zhihu Hot List ### Parameters: - limit: Number of articles per page - desktop: Is it a desktop ### Returns: - Zhihu Hot List  # [示例/Example] limit = \"50\" desktop = \"true\"
         * @summary 获取知乎首页热榜/Get Zhihu Hot List
         * @param {string} [limit] 每页文章数量/Number of articles per page
         * @param {string} [desktop] 是否为桌面端/Is it a desktop
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotListApiV1ZhihuWebFetchHotListGet_12: async (limit?: string, desktop?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/zhihu/web/fetch_hot_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (desktop !== undefined) {
                localVarQueryParameter['desktop'] = desktop;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎首页推荐 ### 参数: - offset: 偏移量 - page_number: 页码 - session_token: 会话令牌 ### 返回: - 知乎首页推荐  # [English] ### Purpose: - Get Zhihu Hot Recommend ### Parameters: - offset: Offset - page_number: Page Number - session_token: Session Token  # [示例/Example] offset = \"0\" page_number = \"1\" session_token = \"\"
         * @summary 获取知乎首页推荐/Get Zhihu Hot Recommend
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [pageNumber] 页码/Page Number
         * @param {string} [sessionToken] 会话令牌/Session Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotRecommendApiV1ZhihuWebFetchHotRecommendGet: async (offset?: string, pageNumber?: string, sessionToken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/zhihu/web/fetch_hot_recommend`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page_number'] = pageNumber;
            }

            if (sessionToken !== undefined) {
                localVarQueryParameter['session_token'] = sessionToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎首页推荐 ### 参数: - offset: 偏移量 - page_number: 页码 - session_token: 会话令牌 ### 返回: - 知乎首页推荐  # [English] ### Purpose: - Get Zhihu Hot Recommend ### Parameters: - offset: Offset - page_number: Page Number - session_token: Session Token  # [示例/Example] offset = \"0\" page_number = \"1\" session_token = \"\"
         * @summary 获取知乎首页推荐/Get Zhihu Hot Recommend
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [pageNumber] 页码/Page Number
         * @param {string} [sessionToken] 会话令牌/Session Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotRecommendApiV1ZhihuWebFetchHotRecommendGet_13: async (offset?: string, pageNumber?: string, sessionToken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/zhihu/web/fetch_hot_recommend`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page_number'] = pageNumber;
            }

            if (sessionToken !== undefined) {
                localVarQueryParameter['session_token'] = sessionToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎搜索预设词 ### 参数: - 无 ### 返回: - 知乎搜索预设词  # [English] ### Purpose: - Get Zhihu Preset Search ### Parameters: - None ### Returns: - Zhihu Preset Search
         * @summary 获取知乎搜索预设词/Get Zhihu Preset Search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPresetSearchApiV1ZhihuWebFetchPresetSearchGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/zhihu/web/fetch_preset_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎搜索预设词 ### 参数: - 无 ### 返回: - 知乎搜索预设词  # [English] ### Purpose: - Get Zhihu Preset Search ### Parameters: - None ### Returns: - Zhihu Preset Search
         * @summary 获取知乎搜索预设词/Get Zhihu Preset Search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPresetSearchApiV1ZhihuWebFetchPresetSearchGet_14: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/zhihu/web/fetch_preset_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎推荐关注列表 ### 参数: - 无 ### 返回: - 知乎推荐关注列表  # [English] ### Purpose: - Get Zhihu Recommend Followees ### Parameters: - None ### Returns: - Zhihu Recommend Followees
         * @summary 获取知乎推荐关注列表/Get Zhihu Recommend Followees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRecommendFolloweesApiV1ZhihuWebFetchRecommendFolloweesGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/zhihu/web/fetch_recommend_followees`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎推荐关注列表 ### 参数: - 无 ### 返回: - 知乎推荐关注列表  # [English] ### Purpose: - Get Zhihu Recommend Followees ### Parameters: - None ### Returns: - Zhihu Recommend Followees
         * @summary 获取知乎推荐关注列表/Get Zhihu Recommend Followees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRecommendFolloweesApiV1ZhihuWebFetchRecommendFolloweesGet_15: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/zhihu/web/fetch_recommend_followees`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎盐选内容搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页内容数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎盐选内容搜索V3  # [English] ### Purpose: - Get Zhihu Salt Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of contents per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Salt Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎盐选内容搜索V3/Get Zhihu Salt Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页内容数量/Number of contents per page
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get: async (keyword: string, offset?: string, limit?: string, searchHashId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_salt_search_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (searchHashId !== undefined) {
                localVarQueryParameter['search_hash_id'] = searchHashId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎盐选内容搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页内容数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎盐选内容搜索V3  # [English] ### Purpose: - Get Zhihu Salt Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of contents per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Salt Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎盐选内容搜索V3/Get Zhihu Salt Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页内容数量/Number of contents per page
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get_16: async (keyword: string, offset?: string, limit?: string, searchHashId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get_16.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_salt_search_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (searchHashId !== undefined) {
                localVarQueryParameter['search_hash_id'] = searchHashId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎论文搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页论文数量 - filter_fields: 过滤字段 ### 返回: - 知乎论文搜索V3  # [English] ### Purpose: - Get Zhihu Scholar Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of papers per page - filter_fields: Filter Fields ### Returns: - Zhihu Scholar Search V3  # [示例/Example] keyword = \"人工智能\" offset = \"0\" limit = \"25\"
         * @summary 获取知乎论文搜索V3/Get Zhihu Scholar Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页论文数量/Number of papers per page
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post: async (keyword: string, offset?: string, limit?: string, body?: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_scholar_search_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎论文搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页论文数量 - filter_fields: 过滤字段 ### 返回: - 知乎论文搜索V3  # [English] ### Purpose: - Get Zhihu Scholar Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of papers per page - filter_fields: Filter Fields ### Returns: - Zhihu Scholar Search V3  # [示例/Example] keyword = \"人工智能\" offset = \"0\" limit = \"25\"
         * @summary 获取知乎论文搜索V3/Get Zhihu Scholar Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页论文数量/Number of papers per page
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post_17: async (keyword: string, offset?: string, limit?: string, body?: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post_17.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_scholar_search_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎搜索发现 ### 参数: - 无 ### 返回: - 知乎搜索发现  # [English] ### Purpose: - Get Zhihu Search Recommend ### Parameters: - None ### Returns: - Zhihu Search Recommend
         * @summary 获取知乎搜索发现/Get Zhihu Search Recommend
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchRecommendApiV1ZhihuWebFetchSearchRecommendGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/zhihu/web/fetch_search_recommend`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎搜索发现 ### 参数: - 无 ### 返回: - 知乎搜索发现  # [English] ### Purpose: - Get Zhihu Search Recommend ### Parameters: - None ### Returns: - Zhihu Search Recommend
         * @summary 获取知乎搜索发现/Get Zhihu Search Recommend
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchRecommendApiV1ZhihuWebFetchSearchRecommendGet_18: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/zhihu/web/fetch_search_recommend`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 知乎搜索预测词 ### 参数: - keyword: 搜索关键词 ### 返回: - 知乎搜索预测词  # [English] ### Purpose: - Get Zhihu Search Suggest ### Parameters: - keyword: Search Keywords ### Returns: - Zhihu Search Suggest  # [示例/Example] keyword = \"deepseek\"
         * @summary 知乎搜索预测词/Get Zhihu Search Suggest
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet: async (keyword: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_search_suggest`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 知乎搜索预测词 ### 参数: - keyword: 搜索关键词 ### 返回: - 知乎搜索预测词  # [English] ### Purpose: - Get Zhihu Search Suggest ### Parameters: - keyword: Search Keywords ### Returns: - Zhihu Search Suggest  # [示例/Example] keyword = \"deepseek\"
         * @summary 知乎搜索预测词/Get Zhihu Search Suggest
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet_19: async (keyword: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet_19.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_search_suggest`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎子评论区V5 ### 参数: - comment_id: 评论ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎子评论区V5  # [English] ### Purpose: - Get Zhihu Sub Comment V5 ### Parameters: - comment_id: Comment ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Sub Comment V5  # [示例/Example] comment_id = \"11100789728\" order_by = \"score\" limit = \"20\" offset = \"\"
         * @summary 获取知乎子评论区V5/Get Zhihu Sub Comment V5
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [orderBy] 排序/Sort
         * @param {string} [limit] 每页评论数量/Number of comments per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get: async (commentId: string, orderBy?: string, limit?: string, offset?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_sub_comment_v5`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎子评论区V5 ### 参数: - comment_id: 评论ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎子评论区V5  # [English] ### Purpose: - Get Zhihu Sub Comment V5 ### Parameters: - comment_id: Comment ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Sub Comment V5  # [示例/Example] comment_id = \"11100789728\" order_by = \"score\" limit = \"20\" offset = \"\"
         * @summary 获取知乎子评论区V5/Get Zhihu Sub Comment V5
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [orderBy] 排序/Sort
         * @param {string} [limit] 每页评论数量/Number of comments per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get_20: async (commentId: string, orderBy?: string, limit?: string, offset?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get_20.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_sub_comment_v5`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎话题搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎话题搜索V3  # [English] ### Purpose: - Get Zhihu Topic Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu Topic Search V3  # [示例/Example] keyword = \"deepseek\" offset = \"0\" limit = \"25\"
         * @summary 获取知乎话题搜索V3/Get Zhihu Topic Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页话题数量/Number of topics per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get: async (keyword: string, offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_topic_search_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎话题搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎话题搜索V3  # [English] ### Purpose: - Get Zhihu Topic Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu Topic Search V3  # [示例/Example] keyword = \"deepseek\" offset = \"0\" limit = \"25\"
         * @summary 获取知乎话题搜索V3/Get Zhihu Topic Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页话题数量/Number of topics per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get_21: async (keyword: string, offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get_21.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_topic_search_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注的收藏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页收藏数量 ### 返回: - 知乎用户关注的收藏  # [English] ### Purpose: - Get Zhihu User Follow Collections ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of collections per page ### Returns: - Zhihu User Follow Collections  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注的收藏/Get Zhihu User Follow Collections
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页收藏数量/Number of collections per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet: async (userUrlToken: string, offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUrlToken' is not null or undefined
            if (userUrlToken === null || userUrlToken === undefined) {
                throw new RequiredError('userUrlToken','Required parameter userUrlToken was null or undefined when calling fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_user_follow_collections`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userUrlToken !== undefined) {
                localVarQueryParameter['user_url_token'] = userUrlToken;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注的收藏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页收藏数量 ### 返回: - 知乎用户关注的收藏  # [English] ### Purpose: - Get Zhihu User Follow Collections ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of collections per page ### Returns: - Zhihu User Follow Collections  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注的收藏/Get Zhihu User Follow Collections
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页收藏数量/Number of collections per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet_22: async (userUrlToken: string, offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUrlToken' is not null or undefined
            if (userUrlToken === null || userUrlToken === undefined) {
                throw new RequiredError('userUrlToken','Required parameter userUrlToken was null or undefined when calling fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet_22.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_user_follow_collections`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userUrlToken !== undefined) {
                localVarQueryParameter['user_url_token'] = userUrlToken;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户订阅的专栏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页专栏数量 ### 返回: - 知乎用户订阅的专栏  # [English] ### Purpose: - Get Zhihu User Columns ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of columns per page ### Returns: - Zhihu User Columns  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户订阅的专栏/Get Zhihu User Columns
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页专栏数量/Number of columns per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet: async (userUrlToken: string, offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUrlToken' is not null or undefined
            if (userUrlToken === null || userUrlToken === undefined) {
                throw new RequiredError('userUrlToken','Required parameter userUrlToken was null or undefined when calling fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_user_follow_columns`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userUrlToken !== undefined) {
                localVarQueryParameter['user_url_token'] = userUrlToken;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户订阅的专栏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页专栏数量 ### 返回: - 知乎用户订阅的专栏  # [English] ### Purpose: - Get Zhihu User Columns ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of columns per page ### Returns: - Zhihu User Columns  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户订阅的专栏/Get Zhihu User Columns
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页专栏数量/Number of columns per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet_23: async (userUrlToken: string, offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUrlToken' is not null or undefined
            if (userUrlToken === null || userUrlToken === undefined) {
                throw new RequiredError('userUrlToken','Required parameter userUrlToken was null or undefined when calling fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet_23.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_user_follow_columns`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userUrlToken !== undefined) {
                localVarQueryParameter['user_url_token'] = userUrlToken;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注的问题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页问题数量 ### 返回: - 知乎用户关注的问题  # [English] ### Purpose: - Get Zhihu User Follow Questions ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of questions per page ### Returns: - Zhihu User Follow Questions  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注的问题/Get Zhihu User Follow Questions
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页问题数量/Number of questions per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet: async (userUrlToken: string, offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUrlToken' is not null or undefined
            if (userUrlToken === null || userUrlToken === undefined) {
                throw new RequiredError('userUrlToken','Required parameter userUrlToken was null or undefined when calling fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_user_follow_questions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userUrlToken !== undefined) {
                localVarQueryParameter['user_url_token'] = userUrlToken;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注的问题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页问题数量 ### 返回: - 知乎用户关注的问题  # [English] ### Purpose: - Get Zhihu User Follow Questions ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of questions per page ### Returns: - Zhihu User Follow Questions  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注的问题/Get Zhihu User Follow Questions
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页问题数量/Number of questions per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet_24: async (userUrlToken: string, offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUrlToken' is not null or undefined
            if (userUrlToken === null || userUrlToken === undefined) {
                throw new RequiredError('userUrlToken','Required parameter userUrlToken was null or undefined when calling fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet_24.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_user_follow_questions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userUrlToken !== undefined) {
                localVarQueryParameter['user_url_token'] = userUrlToken;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注的话题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎用户关注的话题  # [English] ### Purpose: - Get Zhihu User Follow Topics ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu User Follow Topics  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注的话题/Get Zhihu User Follow Topics
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页话题数量/Number of topics per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet: async (userUrlToken: string, offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUrlToken' is not null or undefined
            if (userUrlToken === null || userUrlToken === undefined) {
                throw new RequiredError('userUrlToken','Required parameter userUrlToken was null or undefined when calling fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_user_follow_topics`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userUrlToken !== undefined) {
                localVarQueryParameter['user_url_token'] = userUrlToken;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注的话题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎用户关注的话题  # [English] ### Purpose: - Get Zhihu User Follow Topics ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu User Follow Topics  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注的话题/Get Zhihu User Follow Topics
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页话题数量/Number of topics per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet_25: async (userUrlToken: string, offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUrlToken' is not null or undefined
            if (userUrlToken === null || userUrlToken === undefined) {
                throw new RequiredError('userUrlToken','Required parameter userUrlToken was null or undefined when calling fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet_25.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_user_follow_topics`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userUrlToken !== undefined) {
                localVarQueryParameter['user_url_token'] = userUrlToken;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户关注列表  # [English] ### Purpose: - Get Zhihu User Following ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Following  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注列表/Get Zhihu User Following
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页用户数量/Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet: async (userUrlToken: string, offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUrlToken' is not null or undefined
            if (userUrlToken === null || userUrlToken === undefined) {
                throw new RequiredError('userUrlToken','Required parameter userUrlToken was null or undefined when calling fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_user_followees`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userUrlToken !== undefined) {
                localVarQueryParameter['user_url_token'] = userUrlToken;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户关注列表  # [English] ### Purpose: - Get Zhihu User Following ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Following  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注列表/Get Zhihu User Following
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页用户数量/Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet_26: async (userUrlToken: string, offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUrlToken' is not null or undefined
            if (userUrlToken === null || userUrlToken === undefined) {
                throw new RequiredError('userUrlToken','Required parameter userUrlToken was null or undefined when calling fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet_26.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_user_followees`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userUrlToken !== undefined) {
                localVarQueryParameter['user_url_token'] = userUrlToken;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户粉丝列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户粉丝列表  # [English] ### Purpose: - Get Zhihu User Followers ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Followers  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户粉丝列表/Get Zhihu User Followers
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页用户数量/Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet: async (userUrlToken: string, offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUrlToken' is not null or undefined
            if (userUrlToken === null || userUrlToken === undefined) {
                throw new RequiredError('userUrlToken','Required parameter userUrlToken was null or undefined when calling fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_user_followers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userUrlToken !== undefined) {
                localVarQueryParameter['user_url_token'] = userUrlToken;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户粉丝列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户粉丝列表  # [English] ### Purpose: - Get Zhihu User Followers ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Followers  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户粉丝列表/Get Zhihu User Followers
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页用户数量/Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet_27: async (userUrlToken: string, offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUrlToken' is not null or undefined
            if (userUrlToken === null || userUrlToken === undefined) {
                throw new RequiredError('userUrlToken','Required parameter userUrlToken was null or undefined when calling fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet_27.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_user_followers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userUrlToken !== undefined) {
                localVarQueryParameter['user_url_token'] = userUrlToken;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户信息 ### 参数: - user_url_token: 用户ID ### 返回: - 知乎用户信息  # [English] ### Purpose: - Get Zhihu User Info ### Parameters: - user_url_token: User ID ### Returns: - Zhihu User Info  # [示例/Example] user_url_token = \"ming-he-43-93\"
         * @summary 获取知乎用户信息/Get Zhihu User Info
         * @param {string} userUrlToken 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1ZhihuWebFetchUserInfoGet: async (userUrlToken: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUrlToken' is not null or undefined
            if (userUrlToken === null || userUrlToken === undefined) {
                throw new RequiredError('userUrlToken','Required parameter userUrlToken was null or undefined when calling fetchUserInfoApiV1ZhihuWebFetchUserInfoGet.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_user_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userUrlToken !== undefined) {
                localVarQueryParameter['user_url_token'] = userUrlToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户信息 ### 参数: - user_url_token: 用户ID ### 返回: - 知乎用户信息  # [English] ### Purpose: - Get Zhihu User Info ### Parameters: - user_url_token: User ID ### Returns: - Zhihu User Info  # [示例/Example] user_url_token = \"ming-he-43-93\"
         * @summary 获取知乎用户信息/Get Zhihu User Info
         * @param {string} userUrlToken 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1ZhihuWebFetchUserInfoGet_28: async (userUrlToken: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUrlToken' is not null or undefined
            if (userUrlToken === null || userUrlToken === undefined) {
                throw new RequiredError('userUrlToken','Required parameter userUrlToken was null or undefined when calling fetchUserInfoApiV1ZhihuWebFetchUserInfoGet_28.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_user_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userUrlToken !== undefined) {
                localVarQueryParameter['user_url_token'] = userUrlToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户搜索V3  # [English] ### Purpose: - Get Zhihu User Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Search V3  # [示例/Example] keyword = \"deepseek\" offset = \"0\" limit = \"25\"
         * @summary 获取知乎用户搜索V3/Get Zhihu User Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页用户数量/Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get: async (keyword: string, offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_user_search_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户搜索V3  # [English] ### Purpose: - Get Zhihu User Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Search V3  # [示例/Example] keyword = \"deepseek\" offset = \"0\" limit = \"25\"
         * @summary 获取知乎用户搜索V3/Get Zhihu User Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页用户数量/Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get_29: async (keyword: string, offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get_29.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_user_search_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎首页视频榜 ### 参数: - offset: 偏移量 - limit: 每页视频数量 ### 返回: - 知乎首页视频榜  # [English] ### Purpose: - Get Zhihu Video List ### Parameters: - offset: Offset - limit: Number of videos per page ### Returns: - Zhihu Video List  # [示例/Example] offset = \"\" limit = \"12\"
         * @summary 获取知乎首页视频榜/Get Zhihu Video List
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页视频数量/Number of videos per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoListApiV1ZhihuWebFetchVideoListGet: async (offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/zhihu/web/fetch_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎首页视频榜 ### 参数: - offset: 偏移量 - limit: 每页视频数量 ### 返回: - 知乎首页视频榜  # [English] ### Purpose: - Get Zhihu Video List ### Parameters: - offset: Offset - limit: Number of videos per page ### Returns: - Zhihu Video List  # [示例/Example] offset = \"\" limit = \"12\"
         * @summary 获取知乎首页视频榜/Get Zhihu Video List
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页视频数量/Number of videos per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoListApiV1ZhihuWebFetchVideoListGet_30: async (offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/zhihu/web/fetch_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎视频搜索V3 ### 参数: - keyword: 搜索关键词 - limit: 每页视频数量 - offset: 偏移量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎视频搜索V3  # [English] ### Purpose: - Get Zhihu Video Search V3 ### Parameters: - keyword: Search Keywords - limit: Number of videos per page - offset: Offset - search_hash_id: Search Hash ID ### Returns: - Zhihu Video Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎视频搜索V3/Get Zhihu Video Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [limit] 每页视频数量/Number of videos per page
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get: async (keyword: string, limit?: string, offset?: string, searchHashId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_video_search_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (searchHashId !== undefined) {
                localVarQueryParameter['search_hash_id'] = searchHashId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎视频搜索V3 ### 参数: - keyword: 搜索关键词 - limit: 每页视频数量 - offset: 偏移量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎视频搜索V3  # [English] ### Purpose: - Get Zhihu Video Search V3 ### Parameters: - keyword: Search Keywords - limit: Number of videos per page - offset: Offset - search_hash_id: Search Hash ID ### Returns: - Zhihu Video Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎视频搜索V3/Get Zhihu Video Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [limit] 每页视频数量/Number of videos per page
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get_31: async (keyword: string, limit?: string, offset?: string, searchHashId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get_31.');
            }
            const localVarPath = `/api/v1/zhihu/web/fetch_video_search_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (searchHashId !== undefined) {
                localVarQueryParameter['search_hash_id'] = searchHashId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ZhihuWebAPIApi - functional programming interface
 * @export
 */
export const ZhihuWebAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取知乎AI搜索 ### 参数: - message_content: 搜索内容 ### 返回: - 知乎AI搜索消息ID，用于请求搜索结果  # [English] ### Purpose: - Get Zhihu AI Search ### Parameters: - message_content: Search Content ### Returns: - Zhihu AI Search Message ID for requesting search results  # [示例/Example] message_content = \"deepseek\"
         * @summary 获取知乎AI搜索/Get Zhihu AI Search
         * @param {string} messageContent 搜索内容/Search Content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAiSearchApiV1ZhihuWebFetchAiSearchGet(messageContent: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchAiSearchApiV1ZhihuWebFetchAiSearchGet(messageContent, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎AI搜索 ### 参数: - message_content: 搜索内容 ### 返回: - 知乎AI搜索消息ID，用于请求搜索结果  # [English] ### Purpose: - Get Zhihu AI Search ### Parameters: - message_content: Search Content ### Returns: - Zhihu AI Search Message ID for requesting search results  # [示例/Example] message_content = \"deepseek\"
         * @summary 获取知乎AI搜索/Get Zhihu AI Search
         * @param {string} messageContent 搜索内容/Search Content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAiSearchApiV1ZhihuWebFetchAiSearchGet_1(messageContent: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchAiSearchApiV1ZhihuWebFetchAiSearchGet_1(messageContent, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎AI搜索结果 ### 参数: - message_id: 消息ID ### 返回: - 知乎AI搜索结果  # [English] ### Purpose: - Get Zhihu AI Search Result ### Parameters: - message_id: Message ID ### Returns: - Zhihu AI Search Result  # [示例/Example] message_id = \"5f8b4f4a-0b7c-4d1b-8c4f-2e5c0d6c1b9d\"
         * @summary 获取知乎AI搜索结果/Get Zhihu AI Search Result
         * @param {string} messageId 消息ID/Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet(messageId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet(messageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎AI搜索结果 ### 参数: - message_id: 消息ID ### 返回: - 知乎AI搜索结果  # [English] ### Purpose: - Get Zhihu AI Search Result ### Parameters: - message_id: Message ID ### Returns: - Zhihu AI Search Result  # [示例/Example] message_id = \"5f8b4f4a-0b7c-4d1b-8c4f-2e5c0d6c1b9d\"
         * @summary 获取知乎AI搜索结果/Get Zhihu AI Search Result
         * @param {string} messageId 消息ID/Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet_2(messageId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet_2(messageId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎文章搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页文章数量 - show_all_topics: 显示所有主题，     - 0 不显示话题     - 1 显示话题 - search_source: 搜索来源     - Filter 过滤参数生效     - Normal 为普通结果 - search_hash_id: 搜索哈希ID，用于过滤重复搜索结果 - vertical: 空 不限类型     - answer 只看回答     - article 只看文章     - zvideo 只看视频 - sort: 空 综合排序     - upvoted_count 最多赞同     - created_time 最新发布 - time_interval: 时间间隔     - 空 不限时间     - a_day 一天内     - a_week 一周内     - a_month 一个月内     - three_months 三个月内     - half_a_year 半年内     - a_year 一年内 - vertical_info: 垂类信息     - 0,0,0,0,0,0,0,0,0,0,0,0 不限类型，不会设置勿填 ### 返回: - 知乎文章搜索V3  # [English] ### Purpose: - Get Zhihu Article Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of articles per page - show_all_topics: Show all topics     - 0 Do not show topics     - 1 Show topics - search_source: Search Source     - Filter parameter takes effect     - Normal is normal result - search_hash_id: Search Hash ID, used to filter duplicate search results - vertical: Empty unlimited type     - answer only see answers     - article only see articles     - zvideo only see videos - sort: Empty comprehensive sorting     - upvoted_count most upvoted     - created_time latest release - time_interval: Time interval     - Empty unlimited time     - a_day within a day     - a_week within a week     - a_month within a month     - three_months within three months     - half_a_year within half a year     - a_year within a year - vertical_info: Vertical information     - 0,0,0,0,0,0,0,0,0,0,0,0 unlimited type, do not set do not fill ### Returns: - Zhihu Article Search V3  # [示例/Example] # 默认搜索，综合排序，不限时间 keyword = \"deepseek\" offset = \"0\" limit = \"20\" show_all_topics = 0 search_source = \"Normal\" search_hash_id = \"\" vertical = \"\" sort = \"\" time_interval = \"\" vertical_info = \"\"  # 只看回答，最多赞同，三月内 keyword = \"deepseek\" offset = \"0\" limit = \"20\" show_all_topics = 0 search_source = \"Filter\" search_hash_id = \"\" vertical = \"answer\" sort = \"upvoted_count\" time_interval = \"three_months\" vertical_info = \"0,0,0,0,0,0,0,0,0,0,0,0\"
         * @summary 获取知乎文章搜索V3/Get Zhihu Article Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页文章数量/Number of articles per page
         * @param {number} [showAllTopics] 显示所有主题/Show all topics
         * @param {string} [searchSource] 搜索来源/Search Source
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {string} [vertical] 垂类/Vertical Type
         * @param {string} [sort] 排序/Sort
         * @param {string} [timeInterval] 时间间隔/Time Interval
         * @param {string} [verticalInfo] 垂类信息/Vertical Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get(keyword: string, offset?: string, limit?: string, showAllTopics?: number, searchSource?: string, searchHashId?: string, vertical?: string, sort?: string, timeInterval?: string, verticalInfo?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get(keyword, offset, limit, showAllTopics, searchSource, searchHashId, vertical, sort, timeInterval, verticalInfo, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎文章搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页文章数量 - show_all_topics: 显示所有主题，     - 0 不显示话题     - 1 显示话题 - search_source: 搜索来源     - Filter 过滤参数生效     - Normal 为普通结果 - search_hash_id: 搜索哈希ID，用于过滤重复搜索结果 - vertical: 空 不限类型     - answer 只看回答     - article 只看文章     - zvideo 只看视频 - sort: 空 综合排序     - upvoted_count 最多赞同     - created_time 最新发布 - time_interval: 时间间隔     - 空 不限时间     - a_day 一天内     - a_week 一周内     - a_month 一个月内     - three_months 三个月内     - half_a_year 半年内     - a_year 一年内 - vertical_info: 垂类信息     - 0,0,0,0,0,0,0,0,0,0,0,0 不限类型，不会设置勿填 ### 返回: - 知乎文章搜索V3  # [English] ### Purpose: - Get Zhihu Article Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of articles per page - show_all_topics: Show all topics     - 0 Do not show topics     - 1 Show topics - search_source: Search Source     - Filter parameter takes effect     - Normal is normal result - search_hash_id: Search Hash ID, used to filter duplicate search results - vertical: Empty unlimited type     - answer only see answers     - article only see articles     - zvideo only see videos - sort: Empty comprehensive sorting     - upvoted_count most upvoted     - created_time latest release - time_interval: Time interval     - Empty unlimited time     - a_day within a day     - a_week within a week     - a_month within a month     - three_months within three months     - half_a_year within half a year     - a_year within a year - vertical_info: Vertical information     - 0,0,0,0,0,0,0,0,0,0,0,0 unlimited type, do not set do not fill ### Returns: - Zhihu Article Search V3  # [示例/Example] # 默认搜索，综合排序，不限时间 keyword = \"deepseek\" offset = \"0\" limit = \"20\" show_all_topics = 0 search_source = \"Normal\" search_hash_id = \"\" vertical = \"\" sort = \"\" time_interval = \"\" vertical_info = \"\"  # 只看回答，最多赞同，三月内 keyword = \"deepseek\" offset = \"0\" limit = \"20\" show_all_topics = 0 search_source = \"Filter\" search_hash_id = \"\" vertical = \"answer\" sort = \"upvoted_count\" time_interval = \"three_months\" vertical_info = \"0,0,0,0,0,0,0,0,0,0,0,0\"
         * @summary 获取知乎文章搜索V3/Get Zhihu Article Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页文章数量/Number of articles per page
         * @param {number} [showAllTopics] 显示所有主题/Show all topics
         * @param {string} [searchSource] 搜索来源/Search Source
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {string} [vertical] 垂类/Vertical Type
         * @param {string} [sort] 排序/Sort
         * @param {string} [timeInterval] 时间间隔/Time Interval
         * @param {string} [verticalInfo] 垂类信息/Vertical Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get_3(keyword: string, offset?: string, limit?: string, showAllTopics?: number, searchSource?: string, searchHashId?: string, vertical?: string, sort?: string, timeInterval?: string, verticalInfo?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get_3(keyword, offset, limit, showAllTopics, searchSource, searchHashId, vertical, sort, timeInterval, verticalInfo, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏文章详情 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏文章详情  # [English] ### Purpose: - Get Zhihu Column Article Detail ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Article Detail  # [示例/Example] article_id = \"669214677\"
         * @summary 获取知乎专栏文章详情/Get Zhihu Column Article Detail
         * @param {string} articleId 文章ID/Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet(articleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet(articleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏文章详情 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏文章详情  # [English] ### Purpose: - Get Zhihu Column Article Detail ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Article Detail  # [示例/Example] article_id = \"669214677\"
         * @summary 获取知乎专栏文章详情/Get Zhihu Column Article Detail
         * @param {string} articleId 文章ID/Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet_4(articleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet_4(articleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏文章列表 ### 参数: - column_id: 专栏ID - limit: 每页文章数量 - offset: 偏移量 ### 返回: - 知乎专栏文章列表  # [English] ### Purpose: - Get Zhihu Column Articles ### Parameters: - column_id: Column ID - limit: Number of articles per page - offset: Offset ### Returns: - Zhihu Column Articles  # [示例/Example] column_id = \"zhangjiawei\" limit = \"10\" offset = \"0\"
         * @summary 获取知乎专栏文章列表/Get Zhihu Column Articles
         * @param {string} columnId 专栏ID/Column ID
         * @param {string} [limit] 每页文章数量/Number of articles per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet(columnId: string, limit?: string, offset?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet(columnId, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏文章列表 ### 参数: - column_id: 专栏ID - limit: 每页文章数量 - offset: 偏移量 ### 返回: - 知乎专栏文章列表  # [English] ### Purpose: - Get Zhihu Column Articles ### Parameters: - column_id: Column ID - limit: Number of articles per page - offset: Offset ### Returns: - Zhihu Column Articles  # [示例/Example] column_id = \"zhangjiawei\" limit = \"10\" offset = \"0\"
         * @summary 获取知乎专栏文章列表/Get Zhihu Column Articles
         * @param {string} columnId 专栏ID/Column ID
         * @param {string} [limit] 每页文章数量/Number of articles per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet_5(columnId: string, limit?: string, offset?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet_5(columnId, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏评论区配置 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏评论区配置  # [English] ### Purpose: - Get Zhihu Column Comment Config ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Comment Config  # [示例/Example] article_id = \"669214677\"
         * @summary 获取知乎专栏评论区配置/Get Zhihu Column Comment Config
         * @param {string} articleId 文章ID/Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet(articleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet(articleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏评论区配置 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏评论区配置  # [English] ### Purpose: - Get Zhihu Column Comment Config ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Comment Config  # [示例/Example] article_id = \"669214677\"
         * @summary 获取知乎专栏评论区配置/Get Zhihu Column Comment Config
         * @param {string} articleId 文章ID/Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet_6(articleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet_6(articleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎相似专栏推荐 ### 参数: - article_id: 文章ID - limit: 每页专栏数量 - offset: 偏移量 ### 返回: - 知乎相似专栏推荐  # [English] ### Purpose: - Get Zhihu Similar Column Recommend ### Parameters: - article_id: Article ID - limit: Number of columns per page - offset: Offset ### Returns: - Zhihu Similar Column Recommend  # [示例/Example] article_id = \"669214677\" limit = \"12\" offset = \"0\"
         * @summary 获取知乎相似专栏推荐/Get Zhihu Similar Column Recommend
         * @param {string} articleId 文章ID/Article ID
         * @param {string} [limit] 每页专栏数量/Number of columns per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet(articleId: string, limit?: string, offset?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet(articleId, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎相似专栏推荐 ### 参数: - article_id: 文章ID - limit: 每页专栏数量 - offset: 偏移量 ### 返回: - 知乎相似专栏推荐  # [English] ### Purpose: - Get Zhihu Similar Column Recommend ### Parameters: - article_id: Article ID - limit: Number of columns per page - offset: Offset ### Returns: - Zhihu Similar Column Recommend  # [示例/Example] article_id = \"669214677\" limit = \"12\" offset = \"0\"
         * @summary 获取知乎相似专栏推荐/Get Zhihu Similar Column Recommend
         * @param {string} articleId 文章ID/Article ID
         * @param {string} [limit] 每页专栏数量/Number of columns per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet_7(articleId: string, limit?: string, offset?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet_7(articleId, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏文章互动关系 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏互动关系  # [English] ### Purpose: - Get Zhihu Column Relationship ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Relationship  # [示例/Example] article_id = \"669214677\"
         * @summary 获取知乎专栏文章互动关系/Get Zhihu Column Article Relationship
         * @param {string} articleId 文章ID/Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet(articleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet(articleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏文章互动关系 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏互动关系  # [English] ### Purpose: - Get Zhihu Column Relationship ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Relationship  # [示例/Example] article_id = \"669214677\"
         * @summary 获取知乎专栏文章互动关系/Get Zhihu Column Article Relationship
         * @param {string} articleId 文章ID/Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet_8(articleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet_8(articleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页专栏数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎专栏搜索V3  # [English] ### Purpose: - Get Zhihu Column Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of columns per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Column Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎专栏搜索V3/Get Zhihu Column Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页专栏数量/Number of columns per page
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get(keyword, offset, limit, searchHashId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页专栏数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎专栏搜索V3  # [English] ### Purpose: - Get Zhihu Column Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of columns per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Column Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎专栏搜索V3/Get Zhihu Column Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页专栏数量/Number of columns per page
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get_9(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get_9(keyword, offset, limit, searchHashId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎评论区V5 ### 参数: - answer_id: 回答ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎评论区V5  # [English] ### Purpose: - Get Zhihu Comment V5 ### Parameters: - answer_id: Answer ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Comment V5  # [示例/Example] answer_id = \"89226347214\" order_by = \"score\" limit = \"20\" offset = \"\" # 1739257701_11108372663_0
         * @summary 获取知乎评论区V5/Get Zhihu Comment V5
         * @param {string} answerId 回答ID/Answer ID
         * @param {string} [orderBy] 排序/Sort
         * @param {string} [limit] 每页评论数量/Number of comments per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get(answerId: string, orderBy?: string, limit?: string, offset?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get(answerId, orderBy, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎评论区V5 ### 参数: - answer_id: 回答ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎评论区V5  # [English] ### Purpose: - Get Zhihu Comment V5 ### Parameters: - answer_id: Answer ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Comment V5  # [示例/Example] answer_id = \"89226347214\" order_by = \"score\" limit = \"20\" offset = \"\" # 1739257701_11108372663_0
         * @summary 获取知乎评论区V5/Get Zhihu Comment V5
         * @param {string} answerId 回答ID/Answer ID
         * @param {string} [orderBy] 排序/Sort
         * @param {string} [limit] 每页评论数量/Number of comments per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get_10(answerId: string, orderBy?: string, limit?: string, offset?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get_10(answerId, orderBy, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎电子书搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页电子书数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎电子书搜索V3  # [English] ### Purpose: - Get Zhihu Ebook Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of ebooks per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Ebook Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎电子书搜索V3/Get Zhihu Ebook Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页电子书数量/Number of ebooks per page
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get(keyword, offset, limit, searchHashId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎电子书搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页电子书数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎电子书搜索V3  # [English] ### Purpose: - Get Zhihu Ebook Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of ebooks per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Ebook Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎电子书搜索V3/Get Zhihu Ebook Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页电子书数量/Number of ebooks per page
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get_11(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get_11(keyword, offset, limit, searchHashId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎首页热榜 ### 参数: - limit: 每页文章数量 - desktop: 是否为桌面端 ### 返回: - 知乎首页热榜  # [English] ### Purpose: - Get Zhihu Hot List ### Parameters: - limit: Number of articles per page - desktop: Is it a desktop ### Returns: - Zhihu Hot List  # [示例/Example] limit = \"50\" desktop = \"true\"
         * @summary 获取知乎首页热榜/Get Zhihu Hot List
         * @param {string} [limit] 每页文章数量/Number of articles per page
         * @param {string} [desktop] 是否为桌面端/Is it a desktop
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotListApiV1ZhihuWebFetchHotListGet(limit?: string, desktop?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchHotListApiV1ZhihuWebFetchHotListGet(limit, desktop, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎首页热榜 ### 参数: - limit: 每页文章数量 - desktop: 是否为桌面端 ### 返回: - 知乎首页热榜  # [English] ### Purpose: - Get Zhihu Hot List ### Parameters: - limit: Number of articles per page - desktop: Is it a desktop ### Returns: - Zhihu Hot List  # [示例/Example] limit = \"50\" desktop = \"true\"
         * @summary 获取知乎首页热榜/Get Zhihu Hot List
         * @param {string} [limit] 每页文章数量/Number of articles per page
         * @param {string} [desktop] 是否为桌面端/Is it a desktop
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotListApiV1ZhihuWebFetchHotListGet_12(limit?: string, desktop?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchHotListApiV1ZhihuWebFetchHotListGet_12(limit, desktop, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎首页推荐 ### 参数: - offset: 偏移量 - page_number: 页码 - session_token: 会话令牌 ### 返回: - 知乎首页推荐  # [English] ### Purpose: - Get Zhihu Hot Recommend ### Parameters: - offset: Offset - page_number: Page Number - session_token: Session Token  # [示例/Example] offset = \"0\" page_number = \"1\" session_token = \"\"
         * @summary 获取知乎首页推荐/Get Zhihu Hot Recommend
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [pageNumber] 页码/Page Number
         * @param {string} [sessionToken] 会话令牌/Session Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotRecommendApiV1ZhihuWebFetchHotRecommendGet(offset?: string, pageNumber?: string, sessionToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchHotRecommendApiV1ZhihuWebFetchHotRecommendGet(offset, pageNumber, sessionToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎首页推荐 ### 参数: - offset: 偏移量 - page_number: 页码 - session_token: 会话令牌 ### 返回: - 知乎首页推荐  # [English] ### Purpose: - Get Zhihu Hot Recommend ### Parameters: - offset: Offset - page_number: Page Number - session_token: Session Token  # [示例/Example] offset = \"0\" page_number = \"1\" session_token = \"\"
         * @summary 获取知乎首页推荐/Get Zhihu Hot Recommend
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [pageNumber] 页码/Page Number
         * @param {string} [sessionToken] 会话令牌/Session Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotRecommendApiV1ZhihuWebFetchHotRecommendGet_13(offset?: string, pageNumber?: string, sessionToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchHotRecommendApiV1ZhihuWebFetchHotRecommendGet_13(offset, pageNumber, sessionToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎搜索预设词 ### 参数: - 无 ### 返回: - 知乎搜索预设词  # [English] ### Purpose: - Get Zhihu Preset Search ### Parameters: - None ### Returns: - Zhihu Preset Search
         * @summary 获取知乎搜索预设词/Get Zhihu Preset Search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPresetSearchApiV1ZhihuWebFetchPresetSearchGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchPresetSearchApiV1ZhihuWebFetchPresetSearchGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎搜索预设词 ### 参数: - 无 ### 返回: - 知乎搜索预设词  # [English] ### Purpose: - Get Zhihu Preset Search ### Parameters: - None ### Returns: - Zhihu Preset Search
         * @summary 获取知乎搜索预设词/Get Zhihu Preset Search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPresetSearchApiV1ZhihuWebFetchPresetSearchGet_14(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchPresetSearchApiV1ZhihuWebFetchPresetSearchGet_14(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎推荐关注列表 ### 参数: - 无 ### 返回: - 知乎推荐关注列表  # [English] ### Purpose: - Get Zhihu Recommend Followees ### Parameters: - None ### Returns: - Zhihu Recommend Followees
         * @summary 获取知乎推荐关注列表/Get Zhihu Recommend Followees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchRecommendFolloweesApiV1ZhihuWebFetchRecommendFolloweesGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchRecommendFolloweesApiV1ZhihuWebFetchRecommendFolloweesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎推荐关注列表 ### 参数: - 无 ### 返回: - 知乎推荐关注列表  # [English] ### Purpose: - Get Zhihu Recommend Followees ### Parameters: - None ### Returns: - Zhihu Recommend Followees
         * @summary 获取知乎推荐关注列表/Get Zhihu Recommend Followees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchRecommendFolloweesApiV1ZhihuWebFetchRecommendFolloweesGet_15(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchRecommendFolloweesApiV1ZhihuWebFetchRecommendFolloweesGet_15(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎盐选内容搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页内容数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎盐选内容搜索V3  # [English] ### Purpose: - Get Zhihu Salt Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of contents per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Salt Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎盐选内容搜索V3/Get Zhihu Salt Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页内容数量/Number of contents per page
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get(keyword, offset, limit, searchHashId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎盐选内容搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页内容数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎盐选内容搜索V3  # [English] ### Purpose: - Get Zhihu Salt Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of contents per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Salt Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎盐选内容搜索V3/Get Zhihu Salt Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页内容数量/Number of contents per page
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get_16(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get_16(keyword, offset, limit, searchHashId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎论文搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页论文数量 - filter_fields: 过滤字段 ### 返回: - 知乎论文搜索V3  # [English] ### Purpose: - Get Zhihu Scholar Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of papers per page - filter_fields: Filter Fields ### Returns: - Zhihu Scholar Search V3  # [示例/Example] keyword = \"人工智能\" offset = \"0\" limit = \"25\"
         * @summary 获取知乎论文搜索V3/Get Zhihu Scholar Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页论文数量/Number of papers per page
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post(keyword: string, offset?: string, limit?: string, body?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post(keyword, offset, limit, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎论文搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页论文数量 - filter_fields: 过滤字段 ### 返回: - 知乎论文搜索V3  # [English] ### Purpose: - Get Zhihu Scholar Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of papers per page - filter_fields: Filter Fields ### Returns: - Zhihu Scholar Search V3  # [示例/Example] keyword = \"人工智能\" offset = \"0\" limit = \"25\"
         * @summary 获取知乎论文搜索V3/Get Zhihu Scholar Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页论文数量/Number of papers per page
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post_17(keyword: string, offset?: string, limit?: string, body?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post_17(keyword, offset, limit, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎搜索发现 ### 参数: - 无 ### 返回: - 知乎搜索发现  # [English] ### Purpose: - Get Zhihu Search Recommend ### Parameters: - None ### Returns: - Zhihu Search Recommend
         * @summary 获取知乎搜索发现/Get Zhihu Search Recommend
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchRecommendApiV1ZhihuWebFetchSearchRecommendGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchSearchRecommendApiV1ZhihuWebFetchSearchRecommendGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎搜索发现 ### 参数: - 无 ### 返回: - 知乎搜索发现  # [English] ### Purpose: - Get Zhihu Search Recommend ### Parameters: - None ### Returns: - Zhihu Search Recommend
         * @summary 获取知乎搜索发现/Get Zhihu Search Recommend
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchRecommendApiV1ZhihuWebFetchSearchRecommendGet_18(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchSearchRecommendApiV1ZhihuWebFetchSearchRecommendGet_18(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 知乎搜索预测词 ### 参数: - keyword: 搜索关键词 ### 返回: - 知乎搜索预测词  # [English] ### Purpose: - Get Zhihu Search Suggest ### Parameters: - keyword: Search Keywords ### Returns: - Zhihu Search Suggest  # [示例/Example] keyword = \"deepseek\"
         * @summary 知乎搜索预测词/Get Zhihu Search Suggest
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet(keyword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet(keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 知乎搜索预测词 ### 参数: - keyword: 搜索关键词 ### 返回: - 知乎搜索预测词  # [English] ### Purpose: - Get Zhihu Search Suggest ### Parameters: - keyword: Search Keywords ### Returns: - Zhihu Search Suggest  # [示例/Example] keyword = \"deepseek\"
         * @summary 知乎搜索预测词/Get Zhihu Search Suggest
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet_19(keyword: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet_19(keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎子评论区V5 ### 参数: - comment_id: 评论ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎子评论区V5  # [English] ### Purpose: - Get Zhihu Sub Comment V5 ### Parameters: - comment_id: Comment ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Sub Comment V5  # [示例/Example] comment_id = \"11100789728\" order_by = \"score\" limit = \"20\" offset = \"\"
         * @summary 获取知乎子评论区V5/Get Zhihu Sub Comment V5
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [orderBy] 排序/Sort
         * @param {string} [limit] 每页评论数量/Number of comments per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get(commentId: string, orderBy?: string, limit?: string, offset?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get(commentId, orderBy, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎子评论区V5 ### 参数: - comment_id: 评论ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎子评论区V5  # [English] ### Purpose: - Get Zhihu Sub Comment V5 ### Parameters: - comment_id: Comment ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Sub Comment V5  # [示例/Example] comment_id = \"11100789728\" order_by = \"score\" limit = \"20\" offset = \"\"
         * @summary 获取知乎子评论区V5/Get Zhihu Sub Comment V5
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [orderBy] 排序/Sort
         * @param {string} [limit] 每页评论数量/Number of comments per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get_20(commentId: string, orderBy?: string, limit?: string, offset?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get_20(commentId, orderBy, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎话题搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎话题搜索V3  # [English] ### Purpose: - Get Zhihu Topic Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu Topic Search V3  # [示例/Example] keyword = \"deepseek\" offset = \"0\" limit = \"25\"
         * @summary 获取知乎话题搜索V3/Get Zhihu Topic Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页话题数量/Number of topics per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get(keyword: string, offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get(keyword, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎话题搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎话题搜索V3  # [English] ### Purpose: - Get Zhihu Topic Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu Topic Search V3  # [示例/Example] keyword = \"deepseek\" offset = \"0\" limit = \"25\"
         * @summary 获取知乎话题搜索V3/Get Zhihu Topic Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页话题数量/Number of topics per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get_21(keyword: string, offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get_21(keyword, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注的收藏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页收藏数量 ### 返回: - 知乎用户关注的收藏  # [English] ### Purpose: - Get Zhihu User Follow Collections ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of collections per page ### Returns: - Zhihu User Follow Collections  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注的收藏/Get Zhihu User Follow Collections
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页收藏数量/Number of collections per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet(userUrlToken: string, offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet(userUrlToken, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注的收藏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页收藏数量 ### 返回: - 知乎用户关注的收藏  # [English] ### Purpose: - Get Zhihu User Follow Collections ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of collections per page ### Returns: - Zhihu User Follow Collections  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注的收藏/Get Zhihu User Follow Collections
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页收藏数量/Number of collections per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet_22(userUrlToken: string, offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet_22(userUrlToken, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户订阅的专栏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页专栏数量 ### 返回: - 知乎用户订阅的专栏  # [English] ### Purpose: - Get Zhihu User Columns ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of columns per page ### Returns: - Zhihu User Columns  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户订阅的专栏/Get Zhihu User Columns
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页专栏数量/Number of columns per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet(userUrlToken: string, offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet(userUrlToken, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户订阅的专栏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页专栏数量 ### 返回: - 知乎用户订阅的专栏  # [English] ### Purpose: - Get Zhihu User Columns ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of columns per page ### Returns: - Zhihu User Columns  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户订阅的专栏/Get Zhihu User Columns
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页专栏数量/Number of columns per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet_23(userUrlToken: string, offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet_23(userUrlToken, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注的问题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页问题数量 ### 返回: - 知乎用户关注的问题  # [English] ### Purpose: - Get Zhihu User Follow Questions ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of questions per page ### Returns: - Zhihu User Follow Questions  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注的问题/Get Zhihu User Follow Questions
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页问题数量/Number of questions per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet(userUrlToken: string, offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet(userUrlToken, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注的问题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页问题数量 ### 返回: - 知乎用户关注的问题  # [English] ### Purpose: - Get Zhihu User Follow Questions ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of questions per page ### Returns: - Zhihu User Follow Questions  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注的问题/Get Zhihu User Follow Questions
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页问题数量/Number of questions per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet_24(userUrlToken: string, offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet_24(userUrlToken, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注的话题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎用户关注的话题  # [English] ### Purpose: - Get Zhihu User Follow Topics ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu User Follow Topics  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注的话题/Get Zhihu User Follow Topics
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页话题数量/Number of topics per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet(userUrlToken: string, offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet(userUrlToken, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注的话题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎用户关注的话题  # [English] ### Purpose: - Get Zhihu User Follow Topics ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu User Follow Topics  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注的话题/Get Zhihu User Follow Topics
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页话题数量/Number of topics per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet_25(userUrlToken: string, offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet_25(userUrlToken, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户关注列表  # [English] ### Purpose: - Get Zhihu User Following ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Following  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注列表/Get Zhihu User Following
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页用户数量/Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet(userUrlToken: string, offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet(userUrlToken, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户关注列表  # [English] ### Purpose: - Get Zhihu User Following ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Following  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注列表/Get Zhihu User Following
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页用户数量/Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet_26(userUrlToken: string, offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet_26(userUrlToken, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户粉丝列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户粉丝列表  # [English] ### Purpose: - Get Zhihu User Followers ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Followers  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户粉丝列表/Get Zhihu User Followers
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页用户数量/Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet(userUrlToken: string, offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet(userUrlToken, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户粉丝列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户粉丝列表  # [English] ### Purpose: - Get Zhihu User Followers ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Followers  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户粉丝列表/Get Zhihu User Followers
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页用户数量/Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet_27(userUrlToken: string, offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet_27(userUrlToken, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户信息 ### 参数: - user_url_token: 用户ID ### 返回: - 知乎用户信息  # [English] ### Purpose: - Get Zhihu User Info ### Parameters: - user_url_token: User ID ### Returns: - Zhihu User Info  # [示例/Example] user_url_token = \"ming-he-43-93\"
         * @summary 获取知乎用户信息/Get Zhihu User Info
         * @param {string} userUrlToken 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoApiV1ZhihuWebFetchUserInfoGet(userUrlToken: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchUserInfoApiV1ZhihuWebFetchUserInfoGet(userUrlToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户信息 ### 参数: - user_url_token: 用户ID ### 返回: - 知乎用户信息  # [English] ### Purpose: - Get Zhihu User Info ### Parameters: - user_url_token: User ID ### Returns: - Zhihu User Info  # [示例/Example] user_url_token = \"ming-he-43-93\"
         * @summary 获取知乎用户信息/Get Zhihu User Info
         * @param {string} userUrlToken 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoApiV1ZhihuWebFetchUserInfoGet_28(userUrlToken: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchUserInfoApiV1ZhihuWebFetchUserInfoGet_28(userUrlToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户搜索V3  # [English] ### Purpose: - Get Zhihu User Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Search V3  # [示例/Example] keyword = \"deepseek\" offset = \"0\" limit = \"25\"
         * @summary 获取知乎用户搜索V3/Get Zhihu User Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页用户数量/Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get(keyword: string, offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get(keyword, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户搜索V3  # [English] ### Purpose: - Get Zhihu User Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Search V3  # [示例/Example] keyword = \"deepseek\" offset = \"0\" limit = \"25\"
         * @summary 获取知乎用户搜索V3/Get Zhihu User Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页用户数量/Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get_29(keyword: string, offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get_29(keyword, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎首页视频榜 ### 参数: - offset: 偏移量 - limit: 每页视频数量 ### 返回: - 知乎首页视频榜  # [English] ### Purpose: - Get Zhihu Video List ### Parameters: - offset: Offset - limit: Number of videos per page ### Returns: - Zhihu Video List  # [示例/Example] offset = \"\" limit = \"12\"
         * @summary 获取知乎首页视频榜/Get Zhihu Video List
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页视频数量/Number of videos per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoListApiV1ZhihuWebFetchVideoListGet(offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchVideoListApiV1ZhihuWebFetchVideoListGet(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎首页视频榜 ### 参数: - offset: 偏移量 - limit: 每页视频数量 ### 返回: - 知乎首页视频榜  # [English] ### Purpose: - Get Zhihu Video List ### Parameters: - offset: Offset - limit: Number of videos per page ### Returns: - Zhihu Video List  # [示例/Example] offset = \"\" limit = \"12\"
         * @summary 获取知乎首页视频榜/Get Zhihu Video List
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页视频数量/Number of videos per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoListApiV1ZhihuWebFetchVideoListGet_30(offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchVideoListApiV1ZhihuWebFetchVideoListGet_30(offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎视频搜索V3 ### 参数: - keyword: 搜索关键词 - limit: 每页视频数量 - offset: 偏移量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎视频搜索V3  # [English] ### Purpose: - Get Zhihu Video Search V3 ### Parameters: - keyword: Search Keywords - limit: Number of videos per page - offset: Offset - search_hash_id: Search Hash ID ### Returns: - Zhihu Video Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎视频搜索V3/Get Zhihu Video Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [limit] 每页视频数量/Number of videos per page
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get(keyword: string, limit?: string, offset?: string, searchHashId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get(keyword, limit, offset, searchHashId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取知乎视频搜索V3 ### 参数: - keyword: 搜索关键词 - limit: 每页视频数量 - offset: 偏移量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎视频搜索V3  # [English] ### Purpose: - Get Zhihu Video Search V3 ### Parameters: - keyword: Search Keywords - limit: Number of videos per page - offset: Offset - search_hash_id: Search Hash ID ### Returns: - Zhihu Video Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎视频搜索V3/Get Zhihu Video Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [limit] 每页视频数量/Number of videos per page
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get_31(keyword: string, limit?: string, offset?: string, searchHashId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await ZhihuWebAPIApiAxiosParamCreator(configuration).fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get_31(keyword, limit, offset, searchHashId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ZhihuWebAPIApi - factory interface
 * @export
 */
export const ZhihuWebAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 获取知乎AI搜索 ### 参数: - message_content: 搜索内容 ### 返回: - 知乎AI搜索消息ID，用于请求搜索结果  # [English] ### Purpose: - Get Zhihu AI Search ### Parameters: - message_content: Search Content ### Returns: - Zhihu AI Search Message ID for requesting search results  # [示例/Example] message_content = \"deepseek\"
         * @summary 获取知乎AI搜索/Get Zhihu AI Search
         * @param {string} messageContent 搜索内容/Search Content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAiSearchApiV1ZhihuWebFetchAiSearchGet(messageContent: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchAiSearchApiV1ZhihuWebFetchAiSearchGet(messageContent, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎AI搜索 ### 参数: - message_content: 搜索内容 ### 返回: - 知乎AI搜索消息ID，用于请求搜索结果  # [English] ### Purpose: - Get Zhihu AI Search ### Parameters: - message_content: Search Content ### Returns: - Zhihu AI Search Message ID for requesting search results  # [示例/Example] message_content = \"deepseek\"
         * @summary 获取知乎AI搜索/Get Zhihu AI Search
         * @param {string} messageContent 搜索内容/Search Content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAiSearchApiV1ZhihuWebFetchAiSearchGet_1(messageContent: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchAiSearchApiV1ZhihuWebFetchAiSearchGet_1(messageContent, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎AI搜索结果 ### 参数: - message_id: 消息ID ### 返回: - 知乎AI搜索结果  # [English] ### Purpose: - Get Zhihu AI Search Result ### Parameters: - message_id: Message ID ### Returns: - Zhihu AI Search Result  # [示例/Example] message_id = \"5f8b4f4a-0b7c-4d1b-8c4f-2e5c0d6c1b9d\"
         * @summary 获取知乎AI搜索结果/Get Zhihu AI Search Result
         * @param {string} messageId 消息ID/Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet(messageId: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet(messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎AI搜索结果 ### 参数: - message_id: 消息ID ### 返回: - 知乎AI搜索结果  # [English] ### Purpose: - Get Zhihu AI Search Result ### Parameters: - message_id: Message ID ### Returns: - Zhihu AI Search Result  # [示例/Example] message_id = \"5f8b4f4a-0b7c-4d1b-8c4f-2e5c0d6c1b9d\"
         * @summary 获取知乎AI搜索结果/Get Zhihu AI Search Result
         * @param {string} messageId 消息ID/Message ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet_2(messageId: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet_2(messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎文章搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页文章数量 - show_all_topics: 显示所有主题，     - 0 不显示话题     - 1 显示话题 - search_source: 搜索来源     - Filter 过滤参数生效     - Normal 为普通结果 - search_hash_id: 搜索哈希ID，用于过滤重复搜索结果 - vertical: 空 不限类型     - answer 只看回答     - article 只看文章     - zvideo 只看视频 - sort: 空 综合排序     - upvoted_count 最多赞同     - created_time 最新发布 - time_interval: 时间间隔     - 空 不限时间     - a_day 一天内     - a_week 一周内     - a_month 一个月内     - three_months 三个月内     - half_a_year 半年内     - a_year 一年内 - vertical_info: 垂类信息     - 0,0,0,0,0,0,0,0,0,0,0,0 不限类型，不会设置勿填 ### 返回: - 知乎文章搜索V3  # [English] ### Purpose: - Get Zhihu Article Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of articles per page - show_all_topics: Show all topics     - 0 Do not show topics     - 1 Show topics - search_source: Search Source     - Filter parameter takes effect     - Normal is normal result - search_hash_id: Search Hash ID, used to filter duplicate search results - vertical: Empty unlimited type     - answer only see answers     - article only see articles     - zvideo only see videos - sort: Empty comprehensive sorting     - upvoted_count most upvoted     - created_time latest release - time_interval: Time interval     - Empty unlimited time     - a_day within a day     - a_week within a week     - a_month within a month     - three_months within three months     - half_a_year within half a year     - a_year within a year - vertical_info: Vertical information     - 0,0,0,0,0,0,0,0,0,0,0,0 unlimited type, do not set do not fill ### Returns: - Zhihu Article Search V3  # [示例/Example] # 默认搜索，综合排序，不限时间 keyword = \"deepseek\" offset = \"0\" limit = \"20\" show_all_topics = 0 search_source = \"Normal\" search_hash_id = \"\" vertical = \"\" sort = \"\" time_interval = \"\" vertical_info = \"\"  # 只看回答，最多赞同，三月内 keyword = \"deepseek\" offset = \"0\" limit = \"20\" show_all_topics = 0 search_source = \"Filter\" search_hash_id = \"\" vertical = \"answer\" sort = \"upvoted_count\" time_interval = \"three_months\" vertical_info = \"0,0,0,0,0,0,0,0,0,0,0,0\"
         * @summary 获取知乎文章搜索V3/Get Zhihu Article Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页文章数量/Number of articles per page
         * @param {number} [showAllTopics] 显示所有主题/Show all topics
         * @param {string} [searchSource] 搜索来源/Search Source
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {string} [vertical] 垂类/Vertical Type
         * @param {string} [sort] 排序/Sort
         * @param {string} [timeInterval] 时间间隔/Time Interval
         * @param {string} [verticalInfo] 垂类信息/Vertical Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get(keyword: string, offset?: string, limit?: string, showAllTopics?: number, searchSource?: string, searchHashId?: string, vertical?: string, sort?: string, timeInterval?: string, verticalInfo?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get(keyword, offset, limit, showAllTopics, searchSource, searchHashId, vertical, sort, timeInterval, verticalInfo, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎文章搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页文章数量 - show_all_topics: 显示所有主题，     - 0 不显示话题     - 1 显示话题 - search_source: 搜索来源     - Filter 过滤参数生效     - Normal 为普通结果 - search_hash_id: 搜索哈希ID，用于过滤重复搜索结果 - vertical: 空 不限类型     - answer 只看回答     - article 只看文章     - zvideo 只看视频 - sort: 空 综合排序     - upvoted_count 最多赞同     - created_time 最新发布 - time_interval: 时间间隔     - 空 不限时间     - a_day 一天内     - a_week 一周内     - a_month 一个月内     - three_months 三个月内     - half_a_year 半年内     - a_year 一年内 - vertical_info: 垂类信息     - 0,0,0,0,0,0,0,0,0,0,0,0 不限类型，不会设置勿填 ### 返回: - 知乎文章搜索V3  # [English] ### Purpose: - Get Zhihu Article Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of articles per page - show_all_topics: Show all topics     - 0 Do not show topics     - 1 Show topics - search_source: Search Source     - Filter parameter takes effect     - Normal is normal result - search_hash_id: Search Hash ID, used to filter duplicate search results - vertical: Empty unlimited type     - answer only see answers     - article only see articles     - zvideo only see videos - sort: Empty comprehensive sorting     - upvoted_count most upvoted     - created_time latest release - time_interval: Time interval     - Empty unlimited time     - a_day within a day     - a_week within a week     - a_month within a month     - three_months within three months     - half_a_year within half a year     - a_year within a year - vertical_info: Vertical information     - 0,0,0,0,0,0,0,0,0,0,0,0 unlimited type, do not set do not fill ### Returns: - Zhihu Article Search V3  # [示例/Example] # 默认搜索，综合排序，不限时间 keyword = \"deepseek\" offset = \"0\" limit = \"20\" show_all_topics = 0 search_source = \"Normal\" search_hash_id = \"\" vertical = \"\" sort = \"\" time_interval = \"\" vertical_info = \"\"  # 只看回答，最多赞同，三月内 keyword = \"deepseek\" offset = \"0\" limit = \"20\" show_all_topics = 0 search_source = \"Filter\" search_hash_id = \"\" vertical = \"answer\" sort = \"upvoted_count\" time_interval = \"three_months\" vertical_info = \"0,0,0,0,0,0,0,0,0,0,0,0\"
         * @summary 获取知乎文章搜索V3/Get Zhihu Article Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页文章数量/Number of articles per page
         * @param {number} [showAllTopics] 显示所有主题/Show all topics
         * @param {string} [searchSource] 搜索来源/Search Source
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {string} [vertical] 垂类/Vertical Type
         * @param {string} [sort] 排序/Sort
         * @param {string} [timeInterval] 时间间隔/Time Interval
         * @param {string} [verticalInfo] 垂类信息/Vertical Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get_3(keyword: string, offset?: string, limit?: string, showAllTopics?: number, searchSource?: string, searchHashId?: string, vertical?: string, sort?: string, timeInterval?: string, verticalInfo?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get_3(keyword, offset, limit, showAllTopics, searchSource, searchHashId, vertical, sort, timeInterval, verticalInfo, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏文章详情 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏文章详情  # [English] ### Purpose: - Get Zhihu Column Article Detail ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Article Detail  # [示例/Example] article_id = \"669214677\"
         * @summary 获取知乎专栏文章详情/Get Zhihu Column Article Detail
         * @param {string} articleId 文章ID/Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet(articleId: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet(articleId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏文章详情 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏文章详情  # [English] ### Purpose: - Get Zhihu Column Article Detail ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Article Detail  # [示例/Example] article_id = \"669214677\"
         * @summary 获取知乎专栏文章详情/Get Zhihu Column Article Detail
         * @param {string} articleId 文章ID/Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet_4(articleId: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet_4(articleId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏文章列表 ### 参数: - column_id: 专栏ID - limit: 每页文章数量 - offset: 偏移量 ### 返回: - 知乎专栏文章列表  # [English] ### Purpose: - Get Zhihu Column Articles ### Parameters: - column_id: Column ID - limit: Number of articles per page - offset: Offset ### Returns: - Zhihu Column Articles  # [示例/Example] column_id = \"zhangjiawei\" limit = \"10\" offset = \"0\"
         * @summary 获取知乎专栏文章列表/Get Zhihu Column Articles
         * @param {string} columnId 专栏ID/Column ID
         * @param {string} [limit] 每页文章数量/Number of articles per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet(columnId: string, limit?: string, offset?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet(columnId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏文章列表 ### 参数: - column_id: 专栏ID - limit: 每页文章数量 - offset: 偏移量 ### 返回: - 知乎专栏文章列表  # [English] ### Purpose: - Get Zhihu Column Articles ### Parameters: - column_id: Column ID - limit: Number of articles per page - offset: Offset ### Returns: - Zhihu Column Articles  # [示例/Example] column_id = \"zhangjiawei\" limit = \"10\" offset = \"0\"
         * @summary 获取知乎专栏文章列表/Get Zhihu Column Articles
         * @param {string} columnId 专栏ID/Column ID
         * @param {string} [limit] 每页文章数量/Number of articles per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet_5(columnId: string, limit?: string, offset?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet_5(columnId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏评论区配置 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏评论区配置  # [English] ### Purpose: - Get Zhihu Column Comment Config ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Comment Config  # [示例/Example] article_id = \"669214677\"
         * @summary 获取知乎专栏评论区配置/Get Zhihu Column Comment Config
         * @param {string} articleId 文章ID/Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet(articleId: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet(articleId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏评论区配置 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏评论区配置  # [English] ### Purpose: - Get Zhihu Column Comment Config ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Comment Config  # [示例/Example] article_id = \"669214677\"
         * @summary 获取知乎专栏评论区配置/Get Zhihu Column Comment Config
         * @param {string} articleId 文章ID/Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet_6(articleId: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet_6(articleId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎相似专栏推荐 ### 参数: - article_id: 文章ID - limit: 每页专栏数量 - offset: 偏移量 ### 返回: - 知乎相似专栏推荐  # [English] ### Purpose: - Get Zhihu Similar Column Recommend ### Parameters: - article_id: Article ID - limit: Number of columns per page - offset: Offset ### Returns: - Zhihu Similar Column Recommend  # [示例/Example] article_id = \"669214677\" limit = \"12\" offset = \"0\"
         * @summary 获取知乎相似专栏推荐/Get Zhihu Similar Column Recommend
         * @param {string} articleId 文章ID/Article ID
         * @param {string} [limit] 每页专栏数量/Number of columns per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet(articleId: string, limit?: string, offset?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet(articleId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎相似专栏推荐 ### 参数: - article_id: 文章ID - limit: 每页专栏数量 - offset: 偏移量 ### 返回: - 知乎相似专栏推荐  # [English] ### Purpose: - Get Zhihu Similar Column Recommend ### Parameters: - article_id: Article ID - limit: Number of columns per page - offset: Offset ### Returns: - Zhihu Similar Column Recommend  # [示例/Example] article_id = \"669214677\" limit = \"12\" offset = \"0\"
         * @summary 获取知乎相似专栏推荐/Get Zhihu Similar Column Recommend
         * @param {string} articleId 文章ID/Article ID
         * @param {string} [limit] 每页专栏数量/Number of columns per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet_7(articleId: string, limit?: string, offset?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet_7(articleId, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏文章互动关系 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏互动关系  # [English] ### Purpose: - Get Zhihu Column Relationship ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Relationship  # [示例/Example] article_id = \"669214677\"
         * @summary 获取知乎专栏文章互动关系/Get Zhihu Column Article Relationship
         * @param {string} articleId 文章ID/Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet(articleId: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet(articleId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏文章互动关系 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏互动关系  # [English] ### Purpose: - Get Zhihu Column Relationship ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Relationship  # [示例/Example] article_id = \"669214677\"
         * @summary 获取知乎专栏文章互动关系/Get Zhihu Column Article Relationship
         * @param {string} articleId 文章ID/Article ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet_8(articleId: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet_8(articleId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页专栏数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎专栏搜索V3  # [English] ### Purpose: - Get Zhihu Column Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of columns per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Column Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎专栏搜索V3/Get Zhihu Column Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页专栏数量/Number of columns per page
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get(keyword, offset, limit, searchHashId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎专栏搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页专栏数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎专栏搜索V3  # [English] ### Purpose: - Get Zhihu Column Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of columns per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Column Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎专栏搜索V3/Get Zhihu Column Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页专栏数量/Number of columns per page
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get_9(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get_9(keyword, offset, limit, searchHashId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎评论区V5 ### 参数: - answer_id: 回答ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎评论区V5  # [English] ### Purpose: - Get Zhihu Comment V5 ### Parameters: - answer_id: Answer ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Comment V5  # [示例/Example] answer_id = \"89226347214\" order_by = \"score\" limit = \"20\" offset = \"\" # 1739257701_11108372663_0
         * @summary 获取知乎评论区V5/Get Zhihu Comment V5
         * @param {string} answerId 回答ID/Answer ID
         * @param {string} [orderBy] 排序/Sort
         * @param {string} [limit] 每页评论数量/Number of comments per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get(answerId: string, orderBy?: string, limit?: string, offset?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get(answerId, orderBy, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎评论区V5 ### 参数: - answer_id: 回答ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎评论区V5  # [English] ### Purpose: - Get Zhihu Comment V5 ### Parameters: - answer_id: Answer ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Comment V5  # [示例/Example] answer_id = \"89226347214\" order_by = \"score\" limit = \"20\" offset = \"\" # 1739257701_11108372663_0
         * @summary 获取知乎评论区V5/Get Zhihu Comment V5
         * @param {string} answerId 回答ID/Answer ID
         * @param {string} [orderBy] 排序/Sort
         * @param {string} [limit] 每页评论数量/Number of comments per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get_10(answerId: string, orderBy?: string, limit?: string, offset?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get_10(answerId, orderBy, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎电子书搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页电子书数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎电子书搜索V3  # [English] ### Purpose: - Get Zhihu Ebook Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of ebooks per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Ebook Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎电子书搜索V3/Get Zhihu Ebook Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页电子书数量/Number of ebooks per page
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get(keyword, offset, limit, searchHashId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎电子书搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页电子书数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎电子书搜索V3  # [English] ### Purpose: - Get Zhihu Ebook Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of ebooks per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Ebook Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎电子书搜索V3/Get Zhihu Ebook Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页电子书数量/Number of ebooks per page
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get_11(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get_11(keyword, offset, limit, searchHashId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎首页热榜 ### 参数: - limit: 每页文章数量 - desktop: 是否为桌面端 ### 返回: - 知乎首页热榜  # [English] ### Purpose: - Get Zhihu Hot List ### Parameters: - limit: Number of articles per page - desktop: Is it a desktop ### Returns: - Zhihu Hot List  # [示例/Example] limit = \"50\" desktop = \"true\"
         * @summary 获取知乎首页热榜/Get Zhihu Hot List
         * @param {string} [limit] 每页文章数量/Number of articles per page
         * @param {string} [desktop] 是否为桌面端/Is it a desktop
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotListApiV1ZhihuWebFetchHotListGet(limit?: string, desktop?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchHotListApiV1ZhihuWebFetchHotListGet(limit, desktop, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎首页热榜 ### 参数: - limit: 每页文章数量 - desktop: 是否为桌面端 ### 返回: - 知乎首页热榜  # [English] ### Purpose: - Get Zhihu Hot List ### Parameters: - limit: Number of articles per page - desktop: Is it a desktop ### Returns: - Zhihu Hot List  # [示例/Example] limit = \"50\" desktop = \"true\"
         * @summary 获取知乎首页热榜/Get Zhihu Hot List
         * @param {string} [limit] 每页文章数量/Number of articles per page
         * @param {string} [desktop] 是否为桌面端/Is it a desktop
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotListApiV1ZhihuWebFetchHotListGet_12(limit?: string, desktop?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchHotListApiV1ZhihuWebFetchHotListGet_12(limit, desktop, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎首页推荐 ### 参数: - offset: 偏移量 - page_number: 页码 - session_token: 会话令牌 ### 返回: - 知乎首页推荐  # [English] ### Purpose: - Get Zhihu Hot Recommend ### Parameters: - offset: Offset - page_number: Page Number - session_token: Session Token  # [示例/Example] offset = \"0\" page_number = \"1\" session_token = \"\"
         * @summary 获取知乎首页推荐/Get Zhihu Hot Recommend
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [pageNumber] 页码/Page Number
         * @param {string} [sessionToken] 会话令牌/Session Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotRecommendApiV1ZhihuWebFetchHotRecommendGet(offset?: string, pageNumber?: string, sessionToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchHotRecommendApiV1ZhihuWebFetchHotRecommendGet(offset, pageNumber, sessionToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎首页推荐 ### 参数: - offset: 偏移量 - page_number: 页码 - session_token: 会话令牌 ### 返回: - 知乎首页推荐  # [English] ### Purpose: - Get Zhihu Hot Recommend ### Parameters: - offset: Offset - page_number: Page Number - session_token: Session Token  # [示例/Example] offset = \"0\" page_number = \"1\" session_token = \"\"
         * @summary 获取知乎首页推荐/Get Zhihu Hot Recommend
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [pageNumber] 页码/Page Number
         * @param {string} [sessionToken] 会话令牌/Session Token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotRecommendApiV1ZhihuWebFetchHotRecommendGet_13(offset?: string, pageNumber?: string, sessionToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchHotRecommendApiV1ZhihuWebFetchHotRecommendGet_13(offset, pageNumber, sessionToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎搜索预设词 ### 参数: - 无 ### 返回: - 知乎搜索预设词  # [English] ### Purpose: - Get Zhihu Preset Search ### Parameters: - None ### Returns: - Zhihu Preset Search
         * @summary 获取知乎搜索预设词/Get Zhihu Preset Search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPresetSearchApiV1ZhihuWebFetchPresetSearchGet(options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchPresetSearchApiV1ZhihuWebFetchPresetSearchGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎搜索预设词 ### 参数: - 无 ### 返回: - 知乎搜索预设词  # [English] ### Purpose: - Get Zhihu Preset Search ### Parameters: - None ### Returns: - Zhihu Preset Search
         * @summary 获取知乎搜索预设词/Get Zhihu Preset Search
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPresetSearchApiV1ZhihuWebFetchPresetSearchGet_14(options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchPresetSearchApiV1ZhihuWebFetchPresetSearchGet_14(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎推荐关注列表 ### 参数: - 无 ### 返回: - 知乎推荐关注列表  # [English] ### Purpose: - Get Zhihu Recommend Followees ### Parameters: - None ### Returns: - Zhihu Recommend Followees
         * @summary 获取知乎推荐关注列表/Get Zhihu Recommend Followees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRecommendFolloweesApiV1ZhihuWebFetchRecommendFolloweesGet(options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchRecommendFolloweesApiV1ZhihuWebFetchRecommendFolloweesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎推荐关注列表 ### 参数: - 无 ### 返回: - 知乎推荐关注列表  # [English] ### Purpose: - Get Zhihu Recommend Followees ### Parameters: - None ### Returns: - Zhihu Recommend Followees
         * @summary 获取知乎推荐关注列表/Get Zhihu Recommend Followees
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRecommendFolloweesApiV1ZhihuWebFetchRecommendFolloweesGet_15(options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchRecommendFolloweesApiV1ZhihuWebFetchRecommendFolloweesGet_15(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎盐选内容搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页内容数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎盐选内容搜索V3  # [English] ### Purpose: - Get Zhihu Salt Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of contents per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Salt Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎盐选内容搜索V3/Get Zhihu Salt Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页内容数量/Number of contents per page
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get(keyword, offset, limit, searchHashId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎盐选内容搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页内容数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎盐选内容搜索V3  # [English] ### Purpose: - Get Zhihu Salt Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of contents per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Salt Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎盐选内容搜索V3/Get Zhihu Salt Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页内容数量/Number of contents per page
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get_16(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get_16(keyword, offset, limit, searchHashId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎论文搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页论文数量 - filter_fields: 过滤字段 ### 返回: - 知乎论文搜索V3  # [English] ### Purpose: - Get Zhihu Scholar Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of papers per page - filter_fields: Filter Fields ### Returns: - Zhihu Scholar Search V3  # [示例/Example] keyword = \"人工智能\" offset = \"0\" limit = \"25\"
         * @summary 获取知乎论文搜索V3/Get Zhihu Scholar Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页论文数量/Number of papers per page
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post(keyword: string, offset?: string, limit?: string, body?: object, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post(keyword, offset, limit, body, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎论文搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页论文数量 - filter_fields: 过滤字段 ### 返回: - 知乎论文搜索V3  # [English] ### Purpose: - Get Zhihu Scholar Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of papers per page - filter_fields: Filter Fields ### Returns: - Zhihu Scholar Search V3  # [示例/Example] keyword = \"人工智能\" offset = \"0\" limit = \"25\"
         * @summary 获取知乎论文搜索V3/Get Zhihu Scholar Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页论文数量/Number of papers per page
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post_17(keyword: string, offset?: string, limit?: string, body?: object, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post_17(keyword, offset, limit, body, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎搜索发现 ### 参数: - 无 ### 返回: - 知乎搜索发现  # [English] ### Purpose: - Get Zhihu Search Recommend ### Parameters: - None ### Returns: - Zhihu Search Recommend
         * @summary 获取知乎搜索发现/Get Zhihu Search Recommend
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchRecommendApiV1ZhihuWebFetchSearchRecommendGet(options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchSearchRecommendApiV1ZhihuWebFetchSearchRecommendGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎搜索发现 ### 参数: - 无 ### 返回: - 知乎搜索发现  # [English] ### Purpose: - Get Zhihu Search Recommend ### Parameters: - None ### Returns: - Zhihu Search Recommend
         * @summary 获取知乎搜索发现/Get Zhihu Search Recommend
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchRecommendApiV1ZhihuWebFetchSearchRecommendGet_18(options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchSearchRecommendApiV1ZhihuWebFetchSearchRecommendGet_18(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 知乎搜索预测词 ### 参数: - keyword: 搜索关键词 ### 返回: - 知乎搜索预测词  # [English] ### Purpose: - Get Zhihu Search Suggest ### Parameters: - keyword: Search Keywords ### Returns: - Zhihu Search Suggest  # [示例/Example] keyword = \"deepseek\"
         * @summary 知乎搜索预测词/Get Zhihu Search Suggest
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet(keyword: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 知乎搜索预测词 ### 参数: - keyword: 搜索关键词 ### 返回: - 知乎搜索预测词  # [English] ### Purpose: - Get Zhihu Search Suggest ### Parameters: - keyword: Search Keywords ### Returns: - Zhihu Search Suggest  # [示例/Example] keyword = \"deepseek\"
         * @summary 知乎搜索预测词/Get Zhihu Search Suggest
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet_19(keyword: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet_19(keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎子评论区V5 ### 参数: - comment_id: 评论ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎子评论区V5  # [English] ### Purpose: - Get Zhihu Sub Comment V5 ### Parameters: - comment_id: Comment ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Sub Comment V5  # [示例/Example] comment_id = \"11100789728\" order_by = \"score\" limit = \"20\" offset = \"\"
         * @summary 获取知乎子评论区V5/Get Zhihu Sub Comment V5
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [orderBy] 排序/Sort
         * @param {string} [limit] 每页评论数量/Number of comments per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get(commentId: string, orderBy?: string, limit?: string, offset?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get(commentId, orderBy, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎子评论区V5 ### 参数: - comment_id: 评论ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎子评论区V5  # [English] ### Purpose: - Get Zhihu Sub Comment V5 ### Parameters: - comment_id: Comment ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Sub Comment V5  # [示例/Example] comment_id = \"11100789728\" order_by = \"score\" limit = \"20\" offset = \"\"
         * @summary 获取知乎子评论区V5/Get Zhihu Sub Comment V5
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [orderBy] 排序/Sort
         * @param {string} [limit] 每页评论数量/Number of comments per page
         * @param {string} [offset] 偏移量/Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get_20(commentId: string, orderBy?: string, limit?: string, offset?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get_20(commentId, orderBy, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎话题搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎话题搜索V3  # [English] ### Purpose: - Get Zhihu Topic Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu Topic Search V3  # [示例/Example] keyword = \"deepseek\" offset = \"0\" limit = \"25\"
         * @summary 获取知乎话题搜索V3/Get Zhihu Topic Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页话题数量/Number of topics per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get(keyword: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get(keyword, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎话题搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎话题搜索V3  # [English] ### Purpose: - Get Zhihu Topic Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu Topic Search V3  # [示例/Example] keyword = \"deepseek\" offset = \"0\" limit = \"25\"
         * @summary 获取知乎话题搜索V3/Get Zhihu Topic Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页话题数量/Number of topics per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get_21(keyword: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get_21(keyword, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注的收藏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页收藏数量 ### 返回: - 知乎用户关注的收藏  # [English] ### Purpose: - Get Zhihu User Follow Collections ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of collections per page ### Returns: - Zhihu User Follow Collections  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注的收藏/Get Zhihu User Follow Collections
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页收藏数量/Number of collections per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet(userUrlToken, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注的收藏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页收藏数量 ### 返回: - 知乎用户关注的收藏  # [English] ### Purpose: - Get Zhihu User Follow Collections ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of collections per page ### Returns: - Zhihu User Follow Collections  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注的收藏/Get Zhihu User Follow Collections
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页收藏数量/Number of collections per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet_22(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet_22(userUrlToken, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户订阅的专栏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页专栏数量 ### 返回: - 知乎用户订阅的专栏  # [English] ### Purpose: - Get Zhihu User Columns ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of columns per page ### Returns: - Zhihu User Columns  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户订阅的专栏/Get Zhihu User Columns
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页专栏数量/Number of columns per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet(userUrlToken, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户订阅的专栏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页专栏数量 ### 返回: - 知乎用户订阅的专栏  # [English] ### Purpose: - Get Zhihu User Columns ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of columns per page ### Returns: - Zhihu User Columns  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户订阅的专栏/Get Zhihu User Columns
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页专栏数量/Number of columns per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet_23(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet_23(userUrlToken, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注的问题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页问题数量 ### 返回: - 知乎用户关注的问题  # [English] ### Purpose: - Get Zhihu User Follow Questions ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of questions per page ### Returns: - Zhihu User Follow Questions  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注的问题/Get Zhihu User Follow Questions
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页问题数量/Number of questions per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet(userUrlToken, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注的问题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页问题数量 ### 返回: - 知乎用户关注的问题  # [English] ### Purpose: - Get Zhihu User Follow Questions ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of questions per page ### Returns: - Zhihu User Follow Questions  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注的问题/Get Zhihu User Follow Questions
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页问题数量/Number of questions per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet_24(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet_24(userUrlToken, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注的话题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎用户关注的话题  # [English] ### Purpose: - Get Zhihu User Follow Topics ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu User Follow Topics  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注的话题/Get Zhihu User Follow Topics
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页话题数量/Number of topics per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet(userUrlToken, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注的话题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎用户关注的话题  # [English] ### Purpose: - Get Zhihu User Follow Topics ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu User Follow Topics  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注的话题/Get Zhihu User Follow Topics
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页话题数量/Number of topics per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet_25(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet_25(userUrlToken, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户关注列表  # [English] ### Purpose: - Get Zhihu User Following ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Following  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注列表/Get Zhihu User Following
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页用户数量/Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet(userUrlToken, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户关注列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户关注列表  # [English] ### Purpose: - Get Zhihu User Following ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Following  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户关注列表/Get Zhihu User Following
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页用户数量/Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet_26(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet_26(userUrlToken, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户粉丝列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户粉丝列表  # [English] ### Purpose: - Get Zhihu User Followers ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Followers  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户粉丝列表/Get Zhihu User Followers
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页用户数量/Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet(userUrlToken, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户粉丝列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户粉丝列表  # [English] ### Purpose: - Get Zhihu User Followers ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Followers  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
         * @summary 获取知乎用户粉丝列表/Get Zhihu User Followers
         * @param {string} userUrlToken 用户ID/User ID
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页用户数量/Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet_27(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet_27(userUrlToken, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户信息 ### 参数: - user_url_token: 用户ID ### 返回: - 知乎用户信息  # [English] ### Purpose: - Get Zhihu User Info ### Parameters: - user_url_token: User ID ### Returns: - Zhihu User Info  # [示例/Example] user_url_token = \"ming-he-43-93\"
         * @summary 获取知乎用户信息/Get Zhihu User Info
         * @param {string} userUrlToken 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1ZhihuWebFetchUserInfoGet(userUrlToken: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchUserInfoApiV1ZhihuWebFetchUserInfoGet(userUrlToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户信息 ### 参数: - user_url_token: 用户ID ### 返回: - 知乎用户信息  # [English] ### Purpose: - Get Zhihu User Info ### Parameters: - user_url_token: User ID ### Returns: - Zhihu User Info  # [示例/Example] user_url_token = \"ming-he-43-93\"
         * @summary 获取知乎用户信息/Get Zhihu User Info
         * @param {string} userUrlToken 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1ZhihuWebFetchUserInfoGet_28(userUrlToken: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchUserInfoApiV1ZhihuWebFetchUserInfoGet_28(userUrlToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户搜索V3  # [English] ### Purpose: - Get Zhihu User Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Search V3  # [示例/Example] keyword = \"deepseek\" offset = \"0\" limit = \"25\"
         * @summary 获取知乎用户搜索V3/Get Zhihu User Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页用户数量/Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get(keyword: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get(keyword, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎用户搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户搜索V3  # [English] ### Purpose: - Get Zhihu User Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Search V3  # [示例/Example] keyword = \"deepseek\" offset = \"0\" limit = \"25\"
         * @summary 获取知乎用户搜索V3/Get Zhihu User Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页用户数量/Number of users per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get_29(keyword: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get_29(keyword, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎首页视频榜 ### 参数: - offset: 偏移量 - limit: 每页视频数量 ### 返回: - 知乎首页视频榜  # [English] ### Purpose: - Get Zhihu Video List ### Parameters: - offset: Offset - limit: Number of videos per page ### Returns: - Zhihu Video List  # [示例/Example] offset = \"\" limit = \"12\"
         * @summary 获取知乎首页视频榜/Get Zhihu Video List
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页视频数量/Number of videos per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoListApiV1ZhihuWebFetchVideoListGet(offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchVideoListApiV1ZhihuWebFetchVideoListGet(offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎首页视频榜 ### 参数: - offset: 偏移量 - limit: 每页视频数量 ### 返回: - 知乎首页视频榜  # [English] ### Purpose: - Get Zhihu Video List ### Parameters: - offset: Offset - limit: Number of videos per page ### Returns: - Zhihu Video List  # [示例/Example] offset = \"\" limit = \"12\"
         * @summary 获取知乎首页视频榜/Get Zhihu Video List
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [limit] 每页视频数量/Number of videos per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoListApiV1ZhihuWebFetchVideoListGet_30(offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchVideoListApiV1ZhihuWebFetchVideoListGet_30(offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎视频搜索V3 ### 参数: - keyword: 搜索关键词 - limit: 每页视频数量 - offset: 偏移量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎视频搜索V3  # [English] ### Purpose: - Get Zhihu Video Search V3 ### Parameters: - keyword: Search Keywords - limit: Number of videos per page - offset: Offset - search_hash_id: Search Hash ID ### Returns: - Zhihu Video Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎视频搜索V3/Get Zhihu Video Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [limit] 每页视频数量/Number of videos per page
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get(keyword: string, limit?: string, offset?: string, searchHashId?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get(keyword, limit, offset, searchHashId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取知乎视频搜索V3 ### 参数: - keyword: 搜索关键词 - limit: 每页视频数量 - offset: 偏移量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎视频搜索V3  # [English] ### Purpose: - Get Zhihu Video Search V3 ### Parameters: - keyword: Search Keywords - limit: Number of videos per page - offset: Offset - search_hash_id: Search Hash ID ### Returns: - Zhihu Video Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
         * @summary 获取知乎视频搜索V3/Get Zhihu Video Search V3
         * @param {string} keyword 搜索关键词/Search Keywords
         * @param {string} [limit] 每页视频数量/Number of videos per page
         * @param {string} [offset] 偏移量/Offset
         * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get_31(keyword: string, limit?: string, offset?: string, searchHashId?: string, options?: any): AxiosPromise<ResponseModel> {
            return ZhihuWebAPIApiFp(configuration).fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get_31(keyword, limit, offset, searchHashId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ZhihuWebAPIApi - interface
 * @export
 * @interface ZhihuWebAPIApi
 */
export interface ZhihuWebAPIApiInterface {
    /**
     * # [中文] ### 用途: - 获取知乎AI搜索 ### 参数: - message_content: 搜索内容 ### 返回: - 知乎AI搜索消息ID，用于请求搜索结果  # [English] ### Purpose: - Get Zhihu AI Search ### Parameters: - message_content: Search Content ### Returns: - Zhihu AI Search Message ID for requesting search results  # [示例/Example] message_content = \"deepseek\"
     * @summary 获取知乎AI搜索/Get Zhihu AI Search
     * @param {string} messageContent 搜索内容/Search Content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchAiSearchApiV1ZhihuWebFetchAiSearchGet(messageContent: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎AI搜索 ### 参数: - message_content: 搜索内容 ### 返回: - 知乎AI搜索消息ID，用于请求搜索结果  # [English] ### Purpose: - Get Zhihu AI Search ### Parameters: - message_content: Search Content ### Returns: - Zhihu AI Search Message ID for requesting search results  # [示例/Example] message_content = \"deepseek\"
     * @summary 获取知乎AI搜索/Get Zhihu AI Search
     * @param {string} messageContent 搜索内容/Search Content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchAiSearchApiV1ZhihuWebFetchAiSearchGet_1(messageContent: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎AI搜索结果 ### 参数: - message_id: 消息ID ### 返回: - 知乎AI搜索结果  # [English] ### Purpose: - Get Zhihu AI Search Result ### Parameters: - message_id: Message ID ### Returns: - Zhihu AI Search Result  # [示例/Example] message_id = \"5f8b4f4a-0b7c-4d1b-8c4f-2e5c0d6c1b9d\"
     * @summary 获取知乎AI搜索结果/Get Zhihu AI Search Result
     * @param {string} messageId 消息ID/Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet(messageId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎AI搜索结果 ### 参数: - message_id: 消息ID ### 返回: - 知乎AI搜索结果  # [English] ### Purpose: - Get Zhihu AI Search Result ### Parameters: - message_id: Message ID ### Returns: - Zhihu AI Search Result  # [示例/Example] message_id = \"5f8b4f4a-0b7c-4d1b-8c4f-2e5c0d6c1b9d\"
     * @summary 获取知乎AI搜索结果/Get Zhihu AI Search Result
     * @param {string} messageId 消息ID/Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet_2(messageId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎文章搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页文章数量 - show_all_topics: 显示所有主题，     - 0 不显示话题     - 1 显示话题 - search_source: 搜索来源     - Filter 过滤参数生效     - Normal 为普通结果 - search_hash_id: 搜索哈希ID，用于过滤重复搜索结果 - vertical: 空 不限类型     - answer 只看回答     - article 只看文章     - zvideo 只看视频 - sort: 空 综合排序     - upvoted_count 最多赞同     - created_time 最新发布 - time_interval: 时间间隔     - 空 不限时间     - a_day 一天内     - a_week 一周内     - a_month 一个月内     - three_months 三个月内     - half_a_year 半年内     - a_year 一年内 - vertical_info: 垂类信息     - 0,0,0,0,0,0,0,0,0,0,0,0 不限类型，不会设置勿填 ### 返回: - 知乎文章搜索V3  # [English] ### Purpose: - Get Zhihu Article Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of articles per page - show_all_topics: Show all topics     - 0 Do not show topics     - 1 Show topics - search_source: Search Source     - Filter parameter takes effect     - Normal is normal result - search_hash_id: Search Hash ID, used to filter duplicate search results - vertical: Empty unlimited type     - answer only see answers     - article only see articles     - zvideo only see videos - sort: Empty comprehensive sorting     - upvoted_count most upvoted     - created_time latest release - time_interval: Time interval     - Empty unlimited time     - a_day within a day     - a_week within a week     - a_month within a month     - three_months within three months     - half_a_year within half a year     - a_year within a year - vertical_info: Vertical information     - 0,0,0,0,0,0,0,0,0,0,0,0 unlimited type, do not set do not fill ### Returns: - Zhihu Article Search V3  # [示例/Example] # 默认搜索，综合排序，不限时间 keyword = \"deepseek\" offset = \"0\" limit = \"20\" show_all_topics = 0 search_source = \"Normal\" search_hash_id = \"\" vertical = \"\" sort = \"\" time_interval = \"\" vertical_info = \"\"  # 只看回答，最多赞同，三月内 keyword = \"deepseek\" offset = \"0\" limit = \"20\" show_all_topics = 0 search_source = \"Filter\" search_hash_id = \"\" vertical = \"answer\" sort = \"upvoted_count\" time_interval = \"three_months\" vertical_info = \"0,0,0,0,0,0,0,0,0,0,0,0\"
     * @summary 获取知乎文章搜索V3/Get Zhihu Article Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页文章数量/Number of articles per page
     * @param {number} [showAllTopics] 显示所有主题/Show all topics
     * @param {string} [searchSource] 搜索来源/Search Source
     * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
     * @param {string} [vertical] 垂类/Vertical Type
     * @param {string} [sort] 排序/Sort
     * @param {string} [timeInterval] 时间间隔/Time Interval
     * @param {string} [verticalInfo] 垂类信息/Vertical Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get(keyword: string, offset?: string, limit?: string, showAllTopics?: number, searchSource?: string, searchHashId?: string, vertical?: string, sort?: string, timeInterval?: string, verticalInfo?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎文章搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页文章数量 - show_all_topics: 显示所有主题，     - 0 不显示话题     - 1 显示话题 - search_source: 搜索来源     - Filter 过滤参数生效     - Normal 为普通结果 - search_hash_id: 搜索哈希ID，用于过滤重复搜索结果 - vertical: 空 不限类型     - answer 只看回答     - article 只看文章     - zvideo 只看视频 - sort: 空 综合排序     - upvoted_count 最多赞同     - created_time 最新发布 - time_interval: 时间间隔     - 空 不限时间     - a_day 一天内     - a_week 一周内     - a_month 一个月内     - three_months 三个月内     - half_a_year 半年内     - a_year 一年内 - vertical_info: 垂类信息     - 0,0,0,0,0,0,0,0,0,0,0,0 不限类型，不会设置勿填 ### 返回: - 知乎文章搜索V3  # [English] ### Purpose: - Get Zhihu Article Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of articles per page - show_all_topics: Show all topics     - 0 Do not show topics     - 1 Show topics - search_source: Search Source     - Filter parameter takes effect     - Normal is normal result - search_hash_id: Search Hash ID, used to filter duplicate search results - vertical: Empty unlimited type     - answer only see answers     - article only see articles     - zvideo only see videos - sort: Empty comprehensive sorting     - upvoted_count most upvoted     - created_time latest release - time_interval: Time interval     - Empty unlimited time     - a_day within a day     - a_week within a week     - a_month within a month     - three_months within three months     - half_a_year within half a year     - a_year within a year - vertical_info: Vertical information     - 0,0,0,0,0,0,0,0,0,0,0,0 unlimited type, do not set do not fill ### Returns: - Zhihu Article Search V3  # [示例/Example] # 默认搜索，综合排序，不限时间 keyword = \"deepseek\" offset = \"0\" limit = \"20\" show_all_topics = 0 search_source = \"Normal\" search_hash_id = \"\" vertical = \"\" sort = \"\" time_interval = \"\" vertical_info = \"\"  # 只看回答，最多赞同，三月内 keyword = \"deepseek\" offset = \"0\" limit = \"20\" show_all_topics = 0 search_source = \"Filter\" search_hash_id = \"\" vertical = \"answer\" sort = \"upvoted_count\" time_interval = \"three_months\" vertical_info = \"0,0,0,0,0,0,0,0,0,0,0,0\"
     * @summary 获取知乎文章搜索V3/Get Zhihu Article Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页文章数量/Number of articles per page
     * @param {number} [showAllTopics] 显示所有主题/Show all topics
     * @param {string} [searchSource] 搜索来源/Search Source
     * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
     * @param {string} [vertical] 垂类/Vertical Type
     * @param {string} [sort] 排序/Sort
     * @param {string} [timeInterval] 时间间隔/Time Interval
     * @param {string} [verticalInfo] 垂类信息/Vertical Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get_3(keyword: string, offset?: string, limit?: string, showAllTopics?: number, searchSource?: string, searchHashId?: string, vertical?: string, sort?: string, timeInterval?: string, verticalInfo?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎专栏文章详情 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏文章详情  # [English] ### Purpose: - Get Zhihu Column Article Detail ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Article Detail  # [示例/Example] article_id = \"669214677\"
     * @summary 获取知乎专栏文章详情/Get Zhihu Column Article Detail
     * @param {string} articleId 文章ID/Article ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet(articleId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎专栏文章详情 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏文章详情  # [English] ### Purpose: - Get Zhihu Column Article Detail ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Article Detail  # [示例/Example] article_id = \"669214677\"
     * @summary 获取知乎专栏文章详情/Get Zhihu Column Article Detail
     * @param {string} articleId 文章ID/Article ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet_4(articleId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎专栏文章列表 ### 参数: - column_id: 专栏ID - limit: 每页文章数量 - offset: 偏移量 ### 返回: - 知乎专栏文章列表  # [English] ### Purpose: - Get Zhihu Column Articles ### Parameters: - column_id: Column ID - limit: Number of articles per page - offset: Offset ### Returns: - Zhihu Column Articles  # [示例/Example] column_id = \"zhangjiawei\" limit = \"10\" offset = \"0\"
     * @summary 获取知乎专栏文章列表/Get Zhihu Column Articles
     * @param {string} columnId 专栏ID/Column ID
     * @param {string} [limit] 每页文章数量/Number of articles per page
     * @param {string} [offset] 偏移量/Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet(columnId: string, limit?: string, offset?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎专栏文章列表 ### 参数: - column_id: 专栏ID - limit: 每页文章数量 - offset: 偏移量 ### 返回: - 知乎专栏文章列表  # [English] ### Purpose: - Get Zhihu Column Articles ### Parameters: - column_id: Column ID - limit: Number of articles per page - offset: Offset ### Returns: - Zhihu Column Articles  # [示例/Example] column_id = \"zhangjiawei\" limit = \"10\" offset = \"0\"
     * @summary 获取知乎专栏文章列表/Get Zhihu Column Articles
     * @param {string} columnId 专栏ID/Column ID
     * @param {string} [limit] 每页文章数量/Number of articles per page
     * @param {string} [offset] 偏移量/Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet_5(columnId: string, limit?: string, offset?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎专栏评论区配置 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏评论区配置  # [English] ### Purpose: - Get Zhihu Column Comment Config ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Comment Config  # [示例/Example] article_id = \"669214677\"
     * @summary 获取知乎专栏评论区配置/Get Zhihu Column Comment Config
     * @param {string} articleId 文章ID/Article ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet(articleId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎专栏评论区配置 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏评论区配置  # [English] ### Purpose: - Get Zhihu Column Comment Config ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Comment Config  # [示例/Example] article_id = \"669214677\"
     * @summary 获取知乎专栏评论区配置/Get Zhihu Column Comment Config
     * @param {string} articleId 文章ID/Article ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet_6(articleId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎相似专栏推荐 ### 参数: - article_id: 文章ID - limit: 每页专栏数量 - offset: 偏移量 ### 返回: - 知乎相似专栏推荐  # [English] ### Purpose: - Get Zhihu Similar Column Recommend ### Parameters: - article_id: Article ID - limit: Number of columns per page - offset: Offset ### Returns: - Zhihu Similar Column Recommend  # [示例/Example] article_id = \"669214677\" limit = \"12\" offset = \"0\"
     * @summary 获取知乎相似专栏推荐/Get Zhihu Similar Column Recommend
     * @param {string} articleId 文章ID/Article ID
     * @param {string} [limit] 每页专栏数量/Number of columns per page
     * @param {string} [offset] 偏移量/Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet(articleId: string, limit?: string, offset?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎相似专栏推荐 ### 参数: - article_id: 文章ID - limit: 每页专栏数量 - offset: 偏移量 ### 返回: - 知乎相似专栏推荐  # [English] ### Purpose: - Get Zhihu Similar Column Recommend ### Parameters: - article_id: Article ID - limit: Number of columns per page - offset: Offset ### Returns: - Zhihu Similar Column Recommend  # [示例/Example] article_id = \"669214677\" limit = \"12\" offset = \"0\"
     * @summary 获取知乎相似专栏推荐/Get Zhihu Similar Column Recommend
     * @param {string} articleId 文章ID/Article ID
     * @param {string} [limit] 每页专栏数量/Number of columns per page
     * @param {string} [offset] 偏移量/Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet_7(articleId: string, limit?: string, offset?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎专栏文章互动关系 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏互动关系  # [English] ### Purpose: - Get Zhihu Column Relationship ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Relationship  # [示例/Example] article_id = \"669214677\"
     * @summary 获取知乎专栏文章互动关系/Get Zhihu Column Article Relationship
     * @param {string} articleId 文章ID/Article ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet(articleId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎专栏文章互动关系 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏互动关系  # [English] ### Purpose: - Get Zhihu Column Relationship ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Relationship  # [示例/Example] article_id = \"669214677\"
     * @summary 获取知乎专栏文章互动关系/Get Zhihu Column Article Relationship
     * @param {string} articleId 文章ID/Article ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet_8(articleId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎专栏搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页专栏数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎专栏搜索V3  # [English] ### Purpose: - Get Zhihu Column Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of columns per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Column Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
     * @summary 获取知乎专栏搜索V3/Get Zhihu Column Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页专栏数量/Number of columns per page
     * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎专栏搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页专栏数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎专栏搜索V3  # [English] ### Purpose: - Get Zhihu Column Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of columns per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Column Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
     * @summary 获取知乎专栏搜索V3/Get Zhihu Column Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页专栏数量/Number of columns per page
     * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get_9(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎评论区V5 ### 参数: - answer_id: 回答ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎评论区V5  # [English] ### Purpose: - Get Zhihu Comment V5 ### Parameters: - answer_id: Answer ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Comment V5  # [示例/Example] answer_id = \"89226347214\" order_by = \"score\" limit = \"20\" offset = \"\" # 1739257701_11108372663_0
     * @summary 获取知乎评论区V5/Get Zhihu Comment V5
     * @param {string} answerId 回答ID/Answer ID
     * @param {string} [orderBy] 排序/Sort
     * @param {string} [limit] 每页评论数量/Number of comments per page
     * @param {string} [offset] 偏移量/Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get(answerId: string, orderBy?: string, limit?: string, offset?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎评论区V5 ### 参数: - answer_id: 回答ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎评论区V5  # [English] ### Purpose: - Get Zhihu Comment V5 ### Parameters: - answer_id: Answer ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Comment V5  # [示例/Example] answer_id = \"89226347214\" order_by = \"score\" limit = \"20\" offset = \"\" # 1739257701_11108372663_0
     * @summary 获取知乎评论区V5/Get Zhihu Comment V5
     * @param {string} answerId 回答ID/Answer ID
     * @param {string} [orderBy] 排序/Sort
     * @param {string} [limit] 每页评论数量/Number of comments per page
     * @param {string} [offset] 偏移量/Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get_10(answerId: string, orderBy?: string, limit?: string, offset?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎电子书搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页电子书数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎电子书搜索V3  # [English] ### Purpose: - Get Zhihu Ebook Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of ebooks per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Ebook Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
     * @summary 获取知乎电子书搜索V3/Get Zhihu Ebook Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页电子书数量/Number of ebooks per page
     * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎电子书搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页电子书数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎电子书搜索V3  # [English] ### Purpose: - Get Zhihu Ebook Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of ebooks per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Ebook Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
     * @summary 获取知乎电子书搜索V3/Get Zhihu Ebook Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页电子书数量/Number of ebooks per page
     * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get_11(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎首页热榜 ### 参数: - limit: 每页文章数量 - desktop: 是否为桌面端 ### 返回: - 知乎首页热榜  # [English] ### Purpose: - Get Zhihu Hot List ### Parameters: - limit: Number of articles per page - desktop: Is it a desktop ### Returns: - Zhihu Hot List  # [示例/Example] limit = \"50\" desktop = \"true\"
     * @summary 获取知乎首页热榜/Get Zhihu Hot List
     * @param {string} [limit] 每页文章数量/Number of articles per page
     * @param {string} [desktop] 是否为桌面端/Is it a desktop
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchHotListApiV1ZhihuWebFetchHotListGet(limit?: string, desktop?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎首页热榜 ### 参数: - limit: 每页文章数量 - desktop: 是否为桌面端 ### 返回: - 知乎首页热榜  # [English] ### Purpose: - Get Zhihu Hot List ### Parameters: - limit: Number of articles per page - desktop: Is it a desktop ### Returns: - Zhihu Hot List  # [示例/Example] limit = \"50\" desktop = \"true\"
     * @summary 获取知乎首页热榜/Get Zhihu Hot List
     * @param {string} [limit] 每页文章数量/Number of articles per page
     * @param {string} [desktop] 是否为桌面端/Is it a desktop
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchHotListApiV1ZhihuWebFetchHotListGet_12(limit?: string, desktop?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎首页推荐 ### 参数: - offset: 偏移量 - page_number: 页码 - session_token: 会话令牌 ### 返回: - 知乎首页推荐  # [English] ### Purpose: - Get Zhihu Hot Recommend ### Parameters: - offset: Offset - page_number: Page Number - session_token: Session Token  # [示例/Example] offset = \"0\" page_number = \"1\" session_token = \"\"
     * @summary 获取知乎首页推荐/Get Zhihu Hot Recommend
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [pageNumber] 页码/Page Number
     * @param {string} [sessionToken] 会话令牌/Session Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchHotRecommendApiV1ZhihuWebFetchHotRecommendGet(offset?: string, pageNumber?: string, sessionToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎首页推荐 ### 参数: - offset: 偏移量 - page_number: 页码 - session_token: 会话令牌 ### 返回: - 知乎首页推荐  # [English] ### Purpose: - Get Zhihu Hot Recommend ### Parameters: - offset: Offset - page_number: Page Number - session_token: Session Token  # [示例/Example] offset = \"0\" page_number = \"1\" session_token = \"\"
     * @summary 获取知乎首页推荐/Get Zhihu Hot Recommend
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [pageNumber] 页码/Page Number
     * @param {string} [sessionToken] 会话令牌/Session Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchHotRecommendApiV1ZhihuWebFetchHotRecommendGet_13(offset?: string, pageNumber?: string, sessionToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎搜索预设词 ### 参数: - 无 ### 返回: - 知乎搜索预设词  # [English] ### Purpose: - Get Zhihu Preset Search ### Parameters: - None ### Returns: - Zhihu Preset Search
     * @summary 获取知乎搜索预设词/Get Zhihu Preset Search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchPresetSearchApiV1ZhihuWebFetchPresetSearchGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎搜索预设词 ### 参数: - 无 ### 返回: - 知乎搜索预设词  # [English] ### Purpose: - Get Zhihu Preset Search ### Parameters: - None ### Returns: - Zhihu Preset Search
     * @summary 获取知乎搜索预设词/Get Zhihu Preset Search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchPresetSearchApiV1ZhihuWebFetchPresetSearchGet_14(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎推荐关注列表 ### 参数: - 无 ### 返回: - 知乎推荐关注列表  # [English] ### Purpose: - Get Zhihu Recommend Followees ### Parameters: - None ### Returns: - Zhihu Recommend Followees
     * @summary 获取知乎推荐关注列表/Get Zhihu Recommend Followees
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchRecommendFolloweesApiV1ZhihuWebFetchRecommendFolloweesGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎推荐关注列表 ### 参数: - 无 ### 返回: - 知乎推荐关注列表  # [English] ### Purpose: - Get Zhihu Recommend Followees ### Parameters: - None ### Returns: - Zhihu Recommend Followees
     * @summary 获取知乎推荐关注列表/Get Zhihu Recommend Followees
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchRecommendFolloweesApiV1ZhihuWebFetchRecommendFolloweesGet_15(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎盐选内容搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页内容数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎盐选内容搜索V3  # [English] ### Purpose: - Get Zhihu Salt Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of contents per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Salt Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
     * @summary 获取知乎盐选内容搜索V3/Get Zhihu Salt Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页内容数量/Number of contents per page
     * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎盐选内容搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页内容数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎盐选内容搜索V3  # [English] ### Purpose: - Get Zhihu Salt Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of contents per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Salt Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
     * @summary 获取知乎盐选内容搜索V3/Get Zhihu Salt Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页内容数量/Number of contents per page
     * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get_16(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎论文搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页论文数量 - filter_fields: 过滤字段 ### 返回: - 知乎论文搜索V3  # [English] ### Purpose: - Get Zhihu Scholar Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of papers per page - filter_fields: Filter Fields ### Returns: - Zhihu Scholar Search V3  # [示例/Example] keyword = \"人工智能\" offset = \"0\" limit = \"25\"
     * @summary 获取知乎论文搜索V3/Get Zhihu Scholar Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页论文数量/Number of papers per page
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post(keyword: string, offset?: string, limit?: string, body?: object, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎论文搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页论文数量 - filter_fields: 过滤字段 ### 返回: - 知乎论文搜索V3  # [English] ### Purpose: - Get Zhihu Scholar Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of papers per page - filter_fields: Filter Fields ### Returns: - Zhihu Scholar Search V3  # [示例/Example] keyword = \"人工智能\" offset = \"0\" limit = \"25\"
     * @summary 获取知乎论文搜索V3/Get Zhihu Scholar Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页论文数量/Number of papers per page
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post_17(keyword: string, offset?: string, limit?: string, body?: object, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎搜索发现 ### 参数: - 无 ### 返回: - 知乎搜索发现  # [English] ### Purpose: - Get Zhihu Search Recommend ### Parameters: - None ### Returns: - Zhihu Search Recommend
     * @summary 获取知乎搜索发现/Get Zhihu Search Recommend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchSearchRecommendApiV1ZhihuWebFetchSearchRecommendGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎搜索发现 ### 参数: - 无 ### 返回: - 知乎搜索发现  # [English] ### Purpose: - Get Zhihu Search Recommend ### Parameters: - None ### Returns: - Zhihu Search Recommend
     * @summary 获取知乎搜索发现/Get Zhihu Search Recommend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchSearchRecommendApiV1ZhihuWebFetchSearchRecommendGet_18(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 知乎搜索预测词 ### 参数: - keyword: 搜索关键词 ### 返回: - 知乎搜索预测词  # [English] ### Purpose: - Get Zhihu Search Suggest ### Parameters: - keyword: Search Keywords ### Returns: - Zhihu Search Suggest  # [示例/Example] keyword = \"deepseek\"
     * @summary 知乎搜索预测词/Get Zhihu Search Suggest
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet(keyword: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 知乎搜索预测词 ### 参数: - keyword: 搜索关键词 ### 返回: - 知乎搜索预测词  # [English] ### Purpose: - Get Zhihu Search Suggest ### Parameters: - keyword: Search Keywords ### Returns: - Zhihu Search Suggest  # [示例/Example] keyword = \"deepseek\"
     * @summary 知乎搜索预测词/Get Zhihu Search Suggest
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet_19(keyword: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎子评论区V5 ### 参数: - comment_id: 评论ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎子评论区V5  # [English] ### Purpose: - Get Zhihu Sub Comment V5 ### Parameters: - comment_id: Comment ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Sub Comment V5  # [示例/Example] comment_id = \"11100789728\" order_by = \"score\" limit = \"20\" offset = \"\"
     * @summary 获取知乎子评论区V5/Get Zhihu Sub Comment V5
     * @param {string} commentId 评论ID/Comment ID
     * @param {string} [orderBy] 排序/Sort
     * @param {string} [limit] 每页评论数量/Number of comments per page
     * @param {string} [offset] 偏移量/Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get(commentId: string, orderBy?: string, limit?: string, offset?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎子评论区V5 ### 参数: - comment_id: 评论ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎子评论区V5  # [English] ### Purpose: - Get Zhihu Sub Comment V5 ### Parameters: - comment_id: Comment ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Sub Comment V5  # [示例/Example] comment_id = \"11100789728\" order_by = \"score\" limit = \"20\" offset = \"\"
     * @summary 获取知乎子评论区V5/Get Zhihu Sub Comment V5
     * @param {string} commentId 评论ID/Comment ID
     * @param {string} [orderBy] 排序/Sort
     * @param {string} [limit] 每页评论数量/Number of comments per page
     * @param {string} [offset] 偏移量/Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get_20(commentId: string, orderBy?: string, limit?: string, offset?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎话题搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎话题搜索V3  # [English] ### Purpose: - Get Zhihu Topic Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu Topic Search V3  # [示例/Example] keyword = \"deepseek\" offset = \"0\" limit = \"25\"
     * @summary 获取知乎话题搜索V3/Get Zhihu Topic Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页话题数量/Number of topics per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get(keyword: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎话题搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎话题搜索V3  # [English] ### Purpose: - Get Zhihu Topic Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu Topic Search V3  # [示例/Example] keyword = \"deepseek\" offset = \"0\" limit = \"25\"
     * @summary 获取知乎话题搜索V3/Get Zhihu Topic Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页话题数量/Number of topics per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get_21(keyword: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎用户关注的收藏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页收藏数量 ### 返回: - 知乎用户关注的收藏  # [English] ### Purpose: - Get Zhihu User Follow Collections ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of collections per page ### Returns: - Zhihu User Follow Collections  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户关注的收藏/Get Zhihu User Follow Collections
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页收藏数量/Number of collections per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎用户关注的收藏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页收藏数量 ### 返回: - 知乎用户关注的收藏  # [English] ### Purpose: - Get Zhihu User Follow Collections ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of collections per page ### Returns: - Zhihu User Follow Collections  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户关注的收藏/Get Zhihu User Follow Collections
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页收藏数量/Number of collections per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet_22(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎用户订阅的专栏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页专栏数量 ### 返回: - 知乎用户订阅的专栏  # [English] ### Purpose: - Get Zhihu User Columns ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of columns per page ### Returns: - Zhihu User Columns  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户订阅的专栏/Get Zhihu User Columns
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页专栏数量/Number of columns per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎用户订阅的专栏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页专栏数量 ### 返回: - 知乎用户订阅的专栏  # [English] ### Purpose: - Get Zhihu User Columns ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of columns per page ### Returns: - Zhihu User Columns  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户订阅的专栏/Get Zhihu User Columns
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页专栏数量/Number of columns per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet_23(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎用户关注的问题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页问题数量 ### 返回: - 知乎用户关注的问题  # [English] ### Purpose: - Get Zhihu User Follow Questions ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of questions per page ### Returns: - Zhihu User Follow Questions  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户关注的问题/Get Zhihu User Follow Questions
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页问题数量/Number of questions per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎用户关注的问题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页问题数量 ### 返回: - 知乎用户关注的问题  # [English] ### Purpose: - Get Zhihu User Follow Questions ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of questions per page ### Returns: - Zhihu User Follow Questions  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户关注的问题/Get Zhihu User Follow Questions
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页问题数量/Number of questions per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet_24(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎用户关注的话题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎用户关注的话题  # [English] ### Purpose: - Get Zhihu User Follow Topics ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu User Follow Topics  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户关注的话题/Get Zhihu User Follow Topics
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页话题数量/Number of topics per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎用户关注的话题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎用户关注的话题  # [English] ### Purpose: - Get Zhihu User Follow Topics ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu User Follow Topics  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户关注的话题/Get Zhihu User Follow Topics
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页话题数量/Number of topics per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet_25(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎用户关注列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户关注列表  # [English] ### Purpose: - Get Zhihu User Following ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Following  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户关注列表/Get Zhihu User Following
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页用户数量/Number of users per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎用户关注列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户关注列表  # [English] ### Purpose: - Get Zhihu User Following ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Following  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户关注列表/Get Zhihu User Following
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页用户数量/Number of users per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet_26(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎用户粉丝列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户粉丝列表  # [English] ### Purpose: - Get Zhihu User Followers ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Followers  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户粉丝列表/Get Zhihu User Followers
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页用户数量/Number of users per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎用户粉丝列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户粉丝列表  # [English] ### Purpose: - Get Zhihu User Followers ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Followers  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户粉丝列表/Get Zhihu User Followers
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页用户数量/Number of users per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet_27(userUrlToken: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎用户信息 ### 参数: - user_url_token: 用户ID ### 返回: - 知乎用户信息  # [English] ### Purpose: - Get Zhihu User Info ### Parameters: - user_url_token: User ID ### Returns: - Zhihu User Info  # [示例/Example] user_url_token = \"ming-he-43-93\"
     * @summary 获取知乎用户信息/Get Zhihu User Info
     * @param {string} userUrlToken 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchUserInfoApiV1ZhihuWebFetchUserInfoGet(userUrlToken: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎用户信息 ### 参数: - user_url_token: 用户ID ### 返回: - 知乎用户信息  # [English] ### Purpose: - Get Zhihu User Info ### Parameters: - user_url_token: User ID ### Returns: - Zhihu User Info  # [示例/Example] user_url_token = \"ming-he-43-93\"
     * @summary 获取知乎用户信息/Get Zhihu User Info
     * @param {string} userUrlToken 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchUserInfoApiV1ZhihuWebFetchUserInfoGet_28(userUrlToken: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎用户搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户搜索V3  # [English] ### Purpose: - Get Zhihu User Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Search V3  # [示例/Example] keyword = \"deepseek\" offset = \"0\" limit = \"25\"
     * @summary 获取知乎用户搜索V3/Get Zhihu User Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页用户数量/Number of users per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get(keyword: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎用户搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户搜索V3  # [English] ### Purpose: - Get Zhihu User Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Search V3  # [示例/Example] keyword = \"deepseek\" offset = \"0\" limit = \"25\"
     * @summary 获取知乎用户搜索V3/Get Zhihu User Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页用户数量/Number of users per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get_29(keyword: string, offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎首页视频榜 ### 参数: - offset: 偏移量 - limit: 每页视频数量 ### 返回: - 知乎首页视频榜  # [English] ### Purpose: - Get Zhihu Video List ### Parameters: - offset: Offset - limit: Number of videos per page ### Returns: - Zhihu Video List  # [示例/Example] offset = \"\" limit = \"12\"
     * @summary 获取知乎首页视频榜/Get Zhihu Video List
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页视频数量/Number of videos per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchVideoListApiV1ZhihuWebFetchVideoListGet(offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎首页视频榜 ### 参数: - offset: 偏移量 - limit: 每页视频数量 ### 返回: - 知乎首页视频榜  # [English] ### Purpose: - Get Zhihu Video List ### Parameters: - offset: Offset - limit: Number of videos per page ### Returns: - Zhihu Video List  # [示例/Example] offset = \"\" limit = \"12\"
     * @summary 获取知乎首页视频榜/Get Zhihu Video List
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页视频数量/Number of videos per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchVideoListApiV1ZhihuWebFetchVideoListGet_30(offset?: string, limit?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎视频搜索V3 ### 参数: - keyword: 搜索关键词 - limit: 每页视频数量 - offset: 偏移量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎视频搜索V3  # [English] ### Purpose: - Get Zhihu Video Search V3 ### Parameters: - keyword: Search Keywords - limit: Number of videos per page - offset: Offset - search_hash_id: Search Hash ID ### Returns: - Zhihu Video Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
     * @summary 获取知乎视频搜索V3/Get Zhihu Video Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [limit] 每页视频数量/Number of videos per page
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get(keyword: string, limit?: string, offset?: string, searchHashId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取知乎视频搜索V3 ### 参数: - keyword: 搜索关键词 - limit: 每页视频数量 - offset: 偏移量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎视频搜索V3  # [English] ### Purpose: - Get Zhihu Video Search V3 ### Parameters: - keyword: Search Keywords - limit: Number of videos per page - offset: Offset - search_hash_id: Search Hash ID ### Returns: - Zhihu Video Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
     * @summary 获取知乎视频搜索V3/Get Zhihu Video Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [limit] 每页视频数量/Number of videos per page
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApiInterface
     */
    fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get_31(keyword: string, limit?: string, offset?: string, searchHashId?: string, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * ZhihuWebAPIApi - object-oriented interface
 * @export
 * @class ZhihuWebAPIApi
 * @extends {BaseAPI}
 */
export class ZhihuWebAPIApi extends BaseAPI implements ZhihuWebAPIApiInterface {
    /**
     * # [中文] ### 用途: - 获取知乎AI搜索 ### 参数: - message_content: 搜索内容 ### 返回: - 知乎AI搜索消息ID，用于请求搜索结果  # [English] ### Purpose: - Get Zhihu AI Search ### Parameters: - message_content: Search Content ### Returns: - Zhihu AI Search Message ID for requesting search results  # [示例/Example] message_content = \"deepseek\"
     * @summary 获取知乎AI搜索/Get Zhihu AI Search
     * @param {string} messageContent 搜索内容/Search Content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchAiSearchApiV1ZhihuWebFetchAiSearchGet(messageContent: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchAiSearchApiV1ZhihuWebFetchAiSearchGet(messageContent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎AI搜索 ### 参数: - message_content: 搜索内容 ### 返回: - 知乎AI搜索消息ID，用于请求搜索结果  # [English] ### Purpose: - Get Zhihu AI Search ### Parameters: - message_content: Search Content ### Returns: - Zhihu AI Search Message ID for requesting search results  # [示例/Example] message_content = \"deepseek\"
     * @summary 获取知乎AI搜索/Get Zhihu AI Search
     * @param {string} messageContent 搜索内容/Search Content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchAiSearchApiV1ZhihuWebFetchAiSearchGet_1(messageContent: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchAiSearchApiV1ZhihuWebFetchAiSearchGet_1(messageContent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎AI搜索结果 ### 参数: - message_id: 消息ID ### 返回: - 知乎AI搜索结果  # [English] ### Purpose: - Get Zhihu AI Search Result ### Parameters: - message_id: Message ID ### Returns: - Zhihu AI Search Result  # [示例/Example] message_id = \"5f8b4f4a-0b7c-4d1b-8c4f-2e5c0d6c1b9d\"
     * @summary 获取知乎AI搜索结果/Get Zhihu AI Search Result
     * @param {string} messageId 消息ID/Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet(messageId: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet(messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎AI搜索结果 ### 参数: - message_id: 消息ID ### 返回: - 知乎AI搜索结果  # [English] ### Purpose: - Get Zhihu AI Search Result ### Parameters: - message_id: Message ID ### Returns: - Zhihu AI Search Result  # [示例/Example] message_id = \"5f8b4f4a-0b7c-4d1b-8c4f-2e5c0d6c1b9d\"
     * @summary 获取知乎AI搜索结果/Get Zhihu AI Search Result
     * @param {string} messageId 消息ID/Message ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet_2(messageId: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchAiSearchResultApiV1ZhihuWebFetchAiSearchResultGet_2(messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎文章搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页文章数量 - show_all_topics: 显示所有主题，     - 0 不显示话题     - 1 显示话题 - search_source: 搜索来源     - Filter 过滤参数生效     - Normal 为普通结果 - search_hash_id: 搜索哈希ID，用于过滤重复搜索结果 - vertical: 空 不限类型     - answer 只看回答     - article 只看文章     - zvideo 只看视频 - sort: 空 综合排序     - upvoted_count 最多赞同     - created_time 最新发布 - time_interval: 时间间隔     - 空 不限时间     - a_day 一天内     - a_week 一周内     - a_month 一个月内     - three_months 三个月内     - half_a_year 半年内     - a_year 一年内 - vertical_info: 垂类信息     - 0,0,0,0,0,0,0,0,0,0,0,0 不限类型，不会设置勿填 ### 返回: - 知乎文章搜索V3  # [English] ### Purpose: - Get Zhihu Article Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of articles per page - show_all_topics: Show all topics     - 0 Do not show topics     - 1 Show topics - search_source: Search Source     - Filter parameter takes effect     - Normal is normal result - search_hash_id: Search Hash ID, used to filter duplicate search results - vertical: Empty unlimited type     - answer only see answers     - article only see articles     - zvideo only see videos - sort: Empty comprehensive sorting     - upvoted_count most upvoted     - created_time latest release - time_interval: Time interval     - Empty unlimited time     - a_day within a day     - a_week within a week     - a_month within a month     - three_months within three months     - half_a_year within half a year     - a_year within a year - vertical_info: Vertical information     - 0,0,0,0,0,0,0,0,0,0,0,0 unlimited type, do not set do not fill ### Returns: - Zhihu Article Search V3  # [示例/Example] # 默认搜索，综合排序，不限时间 keyword = \"deepseek\" offset = \"0\" limit = \"20\" show_all_topics = 0 search_source = \"Normal\" search_hash_id = \"\" vertical = \"\" sort = \"\" time_interval = \"\" vertical_info = \"\"  # 只看回答，最多赞同，三月内 keyword = \"deepseek\" offset = \"0\" limit = \"20\" show_all_topics = 0 search_source = \"Filter\" search_hash_id = \"\" vertical = \"answer\" sort = \"upvoted_count\" time_interval = \"three_months\" vertical_info = \"0,0,0,0,0,0,0,0,0,0,0,0\"
     * @summary 获取知乎文章搜索V3/Get Zhihu Article Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页文章数量/Number of articles per page
     * @param {number} [showAllTopics] 显示所有主题/Show all topics
     * @param {string} [searchSource] 搜索来源/Search Source
     * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
     * @param {string} [vertical] 垂类/Vertical Type
     * @param {string} [sort] 排序/Sort
     * @param {string} [timeInterval] 时间间隔/Time Interval
     * @param {string} [verticalInfo] 垂类信息/Vertical Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get(keyword: string, offset?: string, limit?: string, showAllTopics?: number, searchSource?: string, searchHashId?: string, vertical?: string, sort?: string, timeInterval?: string, verticalInfo?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get(keyword, offset, limit, showAllTopics, searchSource, searchHashId, vertical, sort, timeInterval, verticalInfo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎文章搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页文章数量 - show_all_topics: 显示所有主题，     - 0 不显示话题     - 1 显示话题 - search_source: 搜索来源     - Filter 过滤参数生效     - Normal 为普通结果 - search_hash_id: 搜索哈希ID，用于过滤重复搜索结果 - vertical: 空 不限类型     - answer 只看回答     - article 只看文章     - zvideo 只看视频 - sort: 空 综合排序     - upvoted_count 最多赞同     - created_time 最新发布 - time_interval: 时间间隔     - 空 不限时间     - a_day 一天内     - a_week 一周内     - a_month 一个月内     - three_months 三个月内     - half_a_year 半年内     - a_year 一年内 - vertical_info: 垂类信息     - 0,0,0,0,0,0,0,0,0,0,0,0 不限类型，不会设置勿填 ### 返回: - 知乎文章搜索V3  # [English] ### Purpose: - Get Zhihu Article Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of articles per page - show_all_topics: Show all topics     - 0 Do not show topics     - 1 Show topics - search_source: Search Source     - Filter parameter takes effect     - Normal is normal result - search_hash_id: Search Hash ID, used to filter duplicate search results - vertical: Empty unlimited type     - answer only see answers     - article only see articles     - zvideo only see videos - sort: Empty comprehensive sorting     - upvoted_count most upvoted     - created_time latest release - time_interval: Time interval     - Empty unlimited time     - a_day within a day     - a_week within a week     - a_month within a month     - three_months within three months     - half_a_year within half a year     - a_year within a year - vertical_info: Vertical information     - 0,0,0,0,0,0,0,0,0,0,0,0 unlimited type, do not set do not fill ### Returns: - Zhihu Article Search V3  # [示例/Example] # 默认搜索，综合排序，不限时间 keyword = \"deepseek\" offset = \"0\" limit = \"20\" show_all_topics = 0 search_source = \"Normal\" search_hash_id = \"\" vertical = \"\" sort = \"\" time_interval = \"\" vertical_info = \"\"  # 只看回答，最多赞同，三月内 keyword = \"deepseek\" offset = \"0\" limit = \"20\" show_all_topics = 0 search_source = \"Filter\" search_hash_id = \"\" vertical = \"answer\" sort = \"upvoted_count\" time_interval = \"three_months\" vertical_info = \"0,0,0,0,0,0,0,0,0,0,0,0\"
     * @summary 获取知乎文章搜索V3/Get Zhihu Article Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页文章数量/Number of articles per page
     * @param {number} [showAllTopics] 显示所有主题/Show all topics
     * @param {string} [searchSource] 搜索来源/Search Source
     * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
     * @param {string} [vertical] 垂类/Vertical Type
     * @param {string} [sort] 排序/Sort
     * @param {string} [timeInterval] 时间间隔/Time Interval
     * @param {string} [verticalInfo] 垂类信息/Vertical Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get_3(keyword: string, offset?: string, limit?: string, showAllTopics?: number, searchSource?: string, searchHashId?: string, vertical?: string, sort?: string, timeInterval?: string, verticalInfo?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchArticleSearchV3ApiV1ZhihuWebFetchArticleSearchV3Get_3(keyword, offset, limit, showAllTopics, searchSource, searchHashId, vertical, sort, timeInterval, verticalInfo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎专栏文章详情 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏文章详情  # [English] ### Purpose: - Get Zhihu Column Article Detail ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Article Detail  # [示例/Example] article_id = \"669214677\"
     * @summary 获取知乎专栏文章详情/Get Zhihu Column Article Detail
     * @param {string} articleId 文章ID/Article ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet(articleId: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet(articleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎专栏文章详情 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏文章详情  # [English] ### Purpose: - Get Zhihu Column Article Detail ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Article Detail  # [示例/Example] article_id = \"669214677\"
     * @summary 获取知乎专栏文章详情/Get Zhihu Column Article Detail
     * @param {string} articleId 文章ID/Article ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet_4(articleId: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchColumnArticleDetailApiV1ZhihuWebFetchColumnArticleDetailGet_4(articleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎专栏文章列表 ### 参数: - column_id: 专栏ID - limit: 每页文章数量 - offset: 偏移量 ### 返回: - 知乎专栏文章列表  # [English] ### Purpose: - Get Zhihu Column Articles ### Parameters: - column_id: Column ID - limit: Number of articles per page - offset: Offset ### Returns: - Zhihu Column Articles  # [示例/Example] column_id = \"zhangjiawei\" limit = \"10\" offset = \"0\"
     * @summary 获取知乎专栏文章列表/Get Zhihu Column Articles
     * @param {string} columnId 专栏ID/Column ID
     * @param {string} [limit] 每页文章数量/Number of articles per page
     * @param {string} [offset] 偏移量/Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet(columnId: string, limit?: string, offset?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet(columnId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎专栏文章列表 ### 参数: - column_id: 专栏ID - limit: 每页文章数量 - offset: 偏移量 ### 返回: - 知乎专栏文章列表  # [English] ### Purpose: - Get Zhihu Column Articles ### Parameters: - column_id: Column ID - limit: Number of articles per page - offset: Offset ### Returns: - Zhihu Column Articles  # [示例/Example] column_id = \"zhangjiawei\" limit = \"10\" offset = \"0\"
     * @summary 获取知乎专栏文章列表/Get Zhihu Column Articles
     * @param {string} columnId 专栏ID/Column ID
     * @param {string} [limit] 每页文章数量/Number of articles per page
     * @param {string} [offset] 偏移量/Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet_5(columnId: string, limit?: string, offset?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchColumnArticlesApiV1ZhihuWebFetchColumnArticlesGet_5(columnId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎专栏评论区配置 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏评论区配置  # [English] ### Purpose: - Get Zhihu Column Comment Config ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Comment Config  # [示例/Example] article_id = \"669214677\"
     * @summary 获取知乎专栏评论区配置/Get Zhihu Column Comment Config
     * @param {string} articleId 文章ID/Article ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet(articleId: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet(articleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎专栏评论区配置 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏评论区配置  # [English] ### Purpose: - Get Zhihu Column Comment Config ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Comment Config  # [示例/Example] article_id = \"669214677\"
     * @summary 获取知乎专栏评论区配置/Get Zhihu Column Comment Config
     * @param {string} articleId 文章ID/Article ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet_6(articleId: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchColumnCommentConfigApiV1ZhihuWebFetchColumnCommentConfigGet_6(articleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎相似专栏推荐 ### 参数: - article_id: 文章ID - limit: 每页专栏数量 - offset: 偏移量 ### 返回: - 知乎相似专栏推荐  # [English] ### Purpose: - Get Zhihu Similar Column Recommend ### Parameters: - article_id: Article ID - limit: Number of columns per page - offset: Offset ### Returns: - Zhihu Similar Column Recommend  # [示例/Example] article_id = \"669214677\" limit = \"12\" offset = \"0\"
     * @summary 获取知乎相似专栏推荐/Get Zhihu Similar Column Recommend
     * @param {string} articleId 文章ID/Article ID
     * @param {string} [limit] 每页专栏数量/Number of columns per page
     * @param {string} [offset] 偏移量/Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet(articleId: string, limit?: string, offset?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet(articleId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎相似专栏推荐 ### 参数: - article_id: 文章ID - limit: 每页专栏数量 - offset: 偏移量 ### 返回: - 知乎相似专栏推荐  # [English] ### Purpose: - Get Zhihu Similar Column Recommend ### Parameters: - article_id: Article ID - limit: Number of columns per page - offset: Offset ### Returns: - Zhihu Similar Column Recommend  # [示例/Example] article_id = \"669214677\" limit = \"12\" offset = \"0\"
     * @summary 获取知乎相似专栏推荐/Get Zhihu Similar Column Recommend
     * @param {string} articleId 文章ID/Article ID
     * @param {string} [limit] 每页专栏数量/Number of columns per page
     * @param {string} [offset] 偏移量/Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet_7(articleId: string, limit?: string, offset?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchColumnRecommendApiV1ZhihuWebFetchColumnRecommendGet_7(articleId, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎专栏文章互动关系 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏互动关系  # [English] ### Purpose: - Get Zhihu Column Relationship ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Relationship  # [示例/Example] article_id = \"669214677\"
     * @summary 获取知乎专栏文章互动关系/Get Zhihu Column Article Relationship
     * @param {string} articleId 文章ID/Article ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet(articleId: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet(articleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎专栏文章互动关系 ### 参数: - article_id: 文章ID ### 返回: - 知乎专栏互动关系  # [English] ### Purpose: - Get Zhihu Column Relationship ### Parameters: - article_id: Article ID ### Returns: - Zhihu Column Relationship  # [示例/Example] article_id = \"669214677\"
     * @summary 获取知乎专栏文章互动关系/Get Zhihu Column Article Relationship
     * @param {string} articleId 文章ID/Article ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet_8(articleId: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchColumnRelationshipApiV1ZhihuWebFetchColumnRelationshipGet_8(articleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎专栏搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页专栏数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎专栏搜索V3  # [English] ### Purpose: - Get Zhihu Column Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of columns per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Column Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
     * @summary 获取知乎专栏搜索V3/Get Zhihu Column Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页专栏数量/Number of columns per page
     * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get(keyword, offset, limit, searchHashId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎专栏搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页专栏数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎专栏搜索V3  # [English] ### Purpose: - Get Zhihu Column Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of columns per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Column Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
     * @summary 获取知乎专栏搜索V3/Get Zhihu Column Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页专栏数量/Number of columns per page
     * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get_9(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchColumnSearchV3ApiV1ZhihuWebFetchColumnSearchV3Get_9(keyword, offset, limit, searchHashId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎评论区V5 ### 参数: - answer_id: 回答ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎评论区V5  # [English] ### Purpose: - Get Zhihu Comment V5 ### Parameters: - answer_id: Answer ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Comment V5  # [示例/Example] answer_id = \"89226347214\" order_by = \"score\" limit = \"20\" offset = \"\" # 1739257701_11108372663_0
     * @summary 获取知乎评论区V5/Get Zhihu Comment V5
     * @param {string} answerId 回答ID/Answer ID
     * @param {string} [orderBy] 排序/Sort
     * @param {string} [limit] 每页评论数量/Number of comments per page
     * @param {string} [offset] 偏移量/Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get(answerId: string, orderBy?: string, limit?: string, offset?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get(answerId, orderBy, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎评论区V5 ### 参数: - answer_id: 回答ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎评论区V5  # [English] ### Purpose: - Get Zhihu Comment V5 ### Parameters: - answer_id: Answer ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Comment V5  # [示例/Example] answer_id = \"89226347214\" order_by = \"score\" limit = \"20\" offset = \"\" # 1739257701_11108372663_0
     * @summary 获取知乎评论区V5/Get Zhihu Comment V5
     * @param {string} answerId 回答ID/Answer ID
     * @param {string} [orderBy] 排序/Sort
     * @param {string} [limit] 每页评论数量/Number of comments per page
     * @param {string} [offset] 偏移量/Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get_10(answerId: string, orderBy?: string, limit?: string, offset?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchCommentV5ApiV1ZhihuWebFetchCommentV5Get_10(answerId, orderBy, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎电子书搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页电子书数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎电子书搜索V3  # [English] ### Purpose: - Get Zhihu Ebook Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of ebooks per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Ebook Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
     * @summary 获取知乎电子书搜索V3/Get Zhihu Ebook Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页电子书数量/Number of ebooks per page
     * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get(keyword, offset, limit, searchHashId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎电子书搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页电子书数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎电子书搜索V3  # [English] ### Purpose: - Get Zhihu Ebook Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of ebooks per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Ebook Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
     * @summary 获取知乎电子书搜索V3/Get Zhihu Ebook Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页电子书数量/Number of ebooks per page
     * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get_11(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchEbookSearchV3ApiV1ZhihuWebFetchEbookSearchV3Get_11(keyword, offset, limit, searchHashId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎首页热榜 ### 参数: - limit: 每页文章数量 - desktop: 是否为桌面端 ### 返回: - 知乎首页热榜  # [English] ### Purpose: - Get Zhihu Hot List ### Parameters: - limit: Number of articles per page - desktop: Is it a desktop ### Returns: - Zhihu Hot List  # [示例/Example] limit = \"50\" desktop = \"true\"
     * @summary 获取知乎首页热榜/Get Zhihu Hot List
     * @param {string} [limit] 每页文章数量/Number of articles per page
     * @param {string} [desktop] 是否为桌面端/Is it a desktop
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchHotListApiV1ZhihuWebFetchHotListGet(limit?: string, desktop?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchHotListApiV1ZhihuWebFetchHotListGet(limit, desktop, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎首页热榜 ### 参数: - limit: 每页文章数量 - desktop: 是否为桌面端 ### 返回: - 知乎首页热榜  # [English] ### Purpose: - Get Zhihu Hot List ### Parameters: - limit: Number of articles per page - desktop: Is it a desktop ### Returns: - Zhihu Hot List  # [示例/Example] limit = \"50\" desktop = \"true\"
     * @summary 获取知乎首页热榜/Get Zhihu Hot List
     * @param {string} [limit] 每页文章数量/Number of articles per page
     * @param {string} [desktop] 是否为桌面端/Is it a desktop
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchHotListApiV1ZhihuWebFetchHotListGet_12(limit?: string, desktop?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchHotListApiV1ZhihuWebFetchHotListGet_12(limit, desktop, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎首页推荐 ### 参数: - offset: 偏移量 - page_number: 页码 - session_token: 会话令牌 ### 返回: - 知乎首页推荐  # [English] ### Purpose: - Get Zhihu Hot Recommend ### Parameters: - offset: Offset - page_number: Page Number - session_token: Session Token  # [示例/Example] offset = \"0\" page_number = \"1\" session_token = \"\"
     * @summary 获取知乎首页推荐/Get Zhihu Hot Recommend
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [pageNumber] 页码/Page Number
     * @param {string} [sessionToken] 会话令牌/Session Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchHotRecommendApiV1ZhihuWebFetchHotRecommendGet(offset?: string, pageNumber?: string, sessionToken?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchHotRecommendApiV1ZhihuWebFetchHotRecommendGet(offset, pageNumber, sessionToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎首页推荐 ### 参数: - offset: 偏移量 - page_number: 页码 - session_token: 会话令牌 ### 返回: - 知乎首页推荐  # [English] ### Purpose: - Get Zhihu Hot Recommend ### Parameters: - offset: Offset - page_number: Page Number - session_token: Session Token  # [示例/Example] offset = \"0\" page_number = \"1\" session_token = \"\"
     * @summary 获取知乎首页推荐/Get Zhihu Hot Recommend
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [pageNumber] 页码/Page Number
     * @param {string} [sessionToken] 会话令牌/Session Token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchHotRecommendApiV1ZhihuWebFetchHotRecommendGet_13(offset?: string, pageNumber?: string, sessionToken?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchHotRecommendApiV1ZhihuWebFetchHotRecommendGet_13(offset, pageNumber, sessionToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎搜索预设词 ### 参数: - 无 ### 返回: - 知乎搜索预设词  # [English] ### Purpose: - Get Zhihu Preset Search ### Parameters: - None ### Returns: - Zhihu Preset Search
     * @summary 获取知乎搜索预设词/Get Zhihu Preset Search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchPresetSearchApiV1ZhihuWebFetchPresetSearchGet(options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchPresetSearchApiV1ZhihuWebFetchPresetSearchGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎搜索预设词 ### 参数: - 无 ### 返回: - 知乎搜索预设词  # [English] ### Purpose: - Get Zhihu Preset Search ### Parameters: - None ### Returns: - Zhihu Preset Search
     * @summary 获取知乎搜索预设词/Get Zhihu Preset Search
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchPresetSearchApiV1ZhihuWebFetchPresetSearchGet_14(options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchPresetSearchApiV1ZhihuWebFetchPresetSearchGet_14(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎推荐关注列表 ### 参数: - 无 ### 返回: - 知乎推荐关注列表  # [English] ### Purpose: - Get Zhihu Recommend Followees ### Parameters: - None ### Returns: - Zhihu Recommend Followees
     * @summary 获取知乎推荐关注列表/Get Zhihu Recommend Followees
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchRecommendFolloweesApiV1ZhihuWebFetchRecommendFolloweesGet(options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchRecommendFolloweesApiV1ZhihuWebFetchRecommendFolloweesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎推荐关注列表 ### 参数: - 无 ### 返回: - 知乎推荐关注列表  # [English] ### Purpose: - Get Zhihu Recommend Followees ### Parameters: - None ### Returns: - Zhihu Recommend Followees
     * @summary 获取知乎推荐关注列表/Get Zhihu Recommend Followees
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchRecommendFolloweesApiV1ZhihuWebFetchRecommendFolloweesGet_15(options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchRecommendFolloweesApiV1ZhihuWebFetchRecommendFolloweesGet_15(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎盐选内容搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页内容数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎盐选内容搜索V3  # [English] ### Purpose: - Get Zhihu Salt Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of contents per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Salt Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
     * @summary 获取知乎盐选内容搜索V3/Get Zhihu Salt Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页内容数量/Number of contents per page
     * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get(keyword, offset, limit, searchHashId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎盐选内容搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页内容数量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎盐选内容搜索V3  # [English] ### Purpose: - Get Zhihu Salt Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of contents per page - search_hash_id: Search Hash ID ### Returns: - Zhihu Salt Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
     * @summary 获取知乎盐选内容搜索V3/Get Zhihu Salt Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页内容数量/Number of contents per page
     * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get_16(keyword: string, offset?: string, limit?: string, searchHashId?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchSaltSearchV3ApiV1ZhihuWebFetchSaltSearchV3Get_16(keyword, offset, limit, searchHashId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎论文搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页论文数量 - filter_fields: 过滤字段 ### 返回: - 知乎论文搜索V3  # [English] ### Purpose: - Get Zhihu Scholar Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of papers per page - filter_fields: Filter Fields ### Returns: - Zhihu Scholar Search V3  # [示例/Example] keyword = \"人工智能\" offset = \"0\" limit = \"25\"
     * @summary 获取知乎论文搜索V3/Get Zhihu Scholar Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页论文数量/Number of papers per page
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post(keyword: string, offset?: string, limit?: string, body?: object, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post(keyword, offset, limit, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎论文搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页论文数量 - filter_fields: 过滤字段 ### 返回: - 知乎论文搜索V3  # [English] ### Purpose: - Get Zhihu Scholar Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of papers per page - filter_fields: Filter Fields ### Returns: - Zhihu Scholar Search V3  # [示例/Example] keyword = \"人工智能\" offset = \"0\" limit = \"25\"
     * @summary 获取知乎论文搜索V3/Get Zhihu Scholar Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页论文数量/Number of papers per page
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post_17(keyword: string, offset?: string, limit?: string, body?: object, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchScholarSearchV3ApiV1ZhihuWebFetchScholarSearchV3Post_17(keyword, offset, limit, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎搜索发现 ### 参数: - 无 ### 返回: - 知乎搜索发现  # [English] ### Purpose: - Get Zhihu Search Recommend ### Parameters: - None ### Returns: - Zhihu Search Recommend
     * @summary 获取知乎搜索发现/Get Zhihu Search Recommend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchSearchRecommendApiV1ZhihuWebFetchSearchRecommendGet(options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchSearchRecommendApiV1ZhihuWebFetchSearchRecommendGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎搜索发现 ### 参数: - 无 ### 返回: - 知乎搜索发现  # [English] ### Purpose: - Get Zhihu Search Recommend ### Parameters: - None ### Returns: - Zhihu Search Recommend
     * @summary 获取知乎搜索发现/Get Zhihu Search Recommend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchSearchRecommendApiV1ZhihuWebFetchSearchRecommendGet_18(options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchSearchRecommendApiV1ZhihuWebFetchSearchRecommendGet_18(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 知乎搜索预测词 ### 参数: - keyword: 搜索关键词 ### 返回: - 知乎搜索预测词  # [English] ### Purpose: - Get Zhihu Search Suggest ### Parameters: - keyword: Search Keywords ### Returns: - Zhihu Search Suggest  # [示例/Example] keyword = \"deepseek\"
     * @summary 知乎搜索预测词/Get Zhihu Search Suggest
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet(keyword: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 知乎搜索预测词 ### 参数: - keyword: 搜索关键词 ### 返回: - 知乎搜索预测词  # [English] ### Purpose: - Get Zhihu Search Suggest ### Parameters: - keyword: Search Keywords ### Returns: - Zhihu Search Suggest  # [示例/Example] keyword = \"deepseek\"
     * @summary 知乎搜索预测词/Get Zhihu Search Suggest
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet_19(keyword: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchSearchSuggestApiV1ZhihuWebFetchSearchSuggestGet_19(keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎子评论区V5 ### 参数: - comment_id: 评论ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎子评论区V5  # [English] ### Purpose: - Get Zhihu Sub Comment V5 ### Parameters: - comment_id: Comment ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Sub Comment V5  # [示例/Example] comment_id = \"11100789728\" order_by = \"score\" limit = \"20\" offset = \"\"
     * @summary 获取知乎子评论区V5/Get Zhihu Sub Comment V5
     * @param {string} commentId 评论ID/Comment ID
     * @param {string} [orderBy] 排序/Sort
     * @param {string} [limit] 每页评论数量/Number of comments per page
     * @param {string} [offset] 偏移量/Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get(commentId: string, orderBy?: string, limit?: string, offset?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get(commentId, orderBy, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎子评论区V5 ### 参数: - comment_id: 评论ID - order_by: 排序     - score 最热排序     - ts 最新排序 - limit: 每页评论数量 - offset: 偏移量/页码 ### 返回: - 知乎子评论区V5  # [English] ### Purpose: - Get Zhihu Sub Comment V5 ### Parameters: - comment_id: Comment ID - order_by: Sort     - score Hottest Sort     - ts Latest Sort - limit: Number of comments per page - offset: Offset/Page Number ### Returns: - Zhihu Sub Comment V5  # [示例/Example] comment_id = \"11100789728\" order_by = \"score\" limit = \"20\" offset = \"\"
     * @summary 获取知乎子评论区V5/Get Zhihu Sub Comment V5
     * @param {string} commentId 评论ID/Comment ID
     * @param {string} [orderBy] 排序/Sort
     * @param {string} [limit] 每页评论数量/Number of comments per page
     * @param {string} [offset] 偏移量/Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get_20(commentId: string, orderBy?: string, limit?: string, offset?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchSubCommentV5ApiV1ZhihuWebFetchSubCommentV5Get_20(commentId, orderBy, limit, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎话题搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎话题搜索V3  # [English] ### Purpose: - Get Zhihu Topic Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu Topic Search V3  # [示例/Example] keyword = \"deepseek\" offset = \"0\" limit = \"25\"
     * @summary 获取知乎话题搜索V3/Get Zhihu Topic Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页话题数量/Number of topics per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get(keyword: string, offset?: string, limit?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get(keyword, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎话题搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎话题搜索V3  # [English] ### Purpose: - Get Zhihu Topic Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu Topic Search V3  # [示例/Example] keyword = \"deepseek\" offset = \"0\" limit = \"25\"
     * @summary 获取知乎话题搜索V3/Get Zhihu Topic Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页话题数量/Number of topics per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get_21(keyword: string, offset?: string, limit?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchTopicSearchV3ApiV1ZhihuWebFetchTopicSearchV3Get_21(keyword, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎用户关注的收藏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页收藏数量 ### 返回: - 知乎用户关注的收藏  # [English] ### Purpose: - Get Zhihu User Follow Collections ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of collections per page ### Returns: - Zhihu User Follow Collections  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户关注的收藏/Get Zhihu User Follow Collections
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页收藏数量/Number of collections per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet(userUrlToken: string, offset?: string, limit?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet(userUrlToken, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎用户关注的收藏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页收藏数量 ### 返回: - 知乎用户关注的收藏  # [English] ### Purpose: - Get Zhihu User Follow Collections ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of collections per page ### Returns: - Zhihu User Follow Collections  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户关注的收藏/Get Zhihu User Follow Collections
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页收藏数量/Number of collections per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet_22(userUrlToken: string, offset?: string, limit?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchUserFollowCollectionsApiV1ZhihuWebFetchUserFollowCollectionsGet_22(userUrlToken, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎用户订阅的专栏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页专栏数量 ### 返回: - 知乎用户订阅的专栏  # [English] ### Purpose: - Get Zhihu User Columns ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of columns per page ### Returns: - Zhihu User Columns  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户订阅的专栏/Get Zhihu User Columns
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页专栏数量/Number of columns per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet(userUrlToken: string, offset?: string, limit?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet(userUrlToken, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎用户订阅的专栏 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页专栏数量 ### 返回: - 知乎用户订阅的专栏  # [English] ### Purpose: - Get Zhihu User Columns ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of columns per page ### Returns: - Zhihu User Columns  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户订阅的专栏/Get Zhihu User Columns
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页专栏数量/Number of columns per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet_23(userUrlToken: string, offset?: string, limit?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchUserFollowColumnsApiV1ZhihuWebFetchUserFollowColumnsGet_23(userUrlToken, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎用户关注的问题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页问题数量 ### 返回: - 知乎用户关注的问题  # [English] ### Purpose: - Get Zhihu User Follow Questions ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of questions per page ### Returns: - Zhihu User Follow Questions  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户关注的问题/Get Zhihu User Follow Questions
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页问题数量/Number of questions per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet(userUrlToken: string, offset?: string, limit?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet(userUrlToken, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎用户关注的问题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页问题数量 ### 返回: - 知乎用户关注的问题  # [English] ### Purpose: - Get Zhihu User Follow Questions ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of questions per page ### Returns: - Zhihu User Follow Questions  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户关注的问题/Get Zhihu User Follow Questions
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页问题数量/Number of questions per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet_24(userUrlToken: string, offset?: string, limit?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchUserFollowQuestionsApiV1ZhihuWebFetchUserFollowQuestionsGet_24(userUrlToken, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎用户关注的话题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎用户关注的话题  # [English] ### Purpose: - Get Zhihu User Follow Topics ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu User Follow Topics  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户关注的话题/Get Zhihu User Follow Topics
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页话题数量/Number of topics per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet(userUrlToken: string, offset?: string, limit?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet(userUrlToken, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎用户关注的话题 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页话题数量 ### 返回: - 知乎用户关注的话题  # [English] ### Purpose: - Get Zhihu User Follow Topics ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of topics per page ### Returns: - Zhihu User Follow Topics  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户关注的话题/Get Zhihu User Follow Topics
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页话题数量/Number of topics per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet_25(userUrlToken: string, offset?: string, limit?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchUserFollowTopicsApiV1ZhihuWebFetchUserFollowTopicsGet_25(userUrlToken, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎用户关注列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户关注列表  # [English] ### Purpose: - Get Zhihu User Following ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Following  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户关注列表/Get Zhihu User Following
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页用户数量/Number of users per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet(userUrlToken: string, offset?: string, limit?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet(userUrlToken, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎用户关注列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户关注列表  # [English] ### Purpose: - Get Zhihu User Following ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Following  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户关注列表/Get Zhihu User Following
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页用户数量/Number of users per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet_26(userUrlToken: string, offset?: string, limit?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchUserFolloweesApiV1ZhihuWebFetchUserFolloweesGet_26(userUrlToken, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎用户粉丝列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户粉丝列表  # [English] ### Purpose: - Get Zhihu User Followers ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Followers  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户粉丝列表/Get Zhihu User Followers
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页用户数量/Number of users per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet(userUrlToken: string, offset?: string, limit?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet(userUrlToken, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎用户粉丝列表 ### 参数: - user_url_token: 用户ID - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户粉丝列表  # [English] ### Purpose: - Get Zhihu User Followers ### Parameters: - user_url_token: User ID - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Followers  # [示例/Example] user_url_token = \"ming-he-43-93\" offset = \"0\" limit = \"20\"
     * @summary 获取知乎用户粉丝列表/Get Zhihu User Followers
     * @param {string} userUrlToken 用户ID/User ID
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页用户数量/Number of users per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet_27(userUrlToken: string, offset?: string, limit?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchUserFollowersApiV1ZhihuWebFetchUserFollowersGet_27(userUrlToken, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎用户信息 ### 参数: - user_url_token: 用户ID ### 返回: - 知乎用户信息  # [English] ### Purpose: - Get Zhihu User Info ### Parameters: - user_url_token: User ID ### Returns: - Zhihu User Info  # [示例/Example] user_url_token = \"ming-he-43-93\"
     * @summary 获取知乎用户信息/Get Zhihu User Info
     * @param {string} userUrlToken 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchUserInfoApiV1ZhihuWebFetchUserInfoGet(userUrlToken: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchUserInfoApiV1ZhihuWebFetchUserInfoGet(userUrlToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎用户信息 ### 参数: - user_url_token: 用户ID ### 返回: - 知乎用户信息  # [English] ### Purpose: - Get Zhihu User Info ### Parameters: - user_url_token: User ID ### Returns: - Zhihu User Info  # [示例/Example] user_url_token = \"ming-he-43-93\"
     * @summary 获取知乎用户信息/Get Zhihu User Info
     * @param {string} userUrlToken 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchUserInfoApiV1ZhihuWebFetchUserInfoGet_28(userUrlToken: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchUserInfoApiV1ZhihuWebFetchUserInfoGet_28(userUrlToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎用户搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户搜索V3  # [English] ### Purpose: - Get Zhihu User Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Search V3  # [示例/Example] keyword = \"deepseek\" offset = \"0\" limit = \"25\"
     * @summary 获取知乎用户搜索V3/Get Zhihu User Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页用户数量/Number of users per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get(keyword: string, offset?: string, limit?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get(keyword, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎用户搜索V3 ### 参数: - keyword: 搜索关键词 - offset: 偏移量 - limit: 每页用户数量 ### 返回: - 知乎用户搜索V3  # [English] ### Purpose: - Get Zhihu User Search V3 ### Parameters: - keyword: Search Keywords - offset: Offset - limit: Number of users per page ### Returns: - Zhihu User Search V3  # [示例/Example] keyword = \"deepseek\" offset = \"0\" limit = \"25\"
     * @summary 获取知乎用户搜索V3/Get Zhihu User Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页用户数量/Number of users per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get_29(keyword: string, offset?: string, limit?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchUserSearchV3ApiV1ZhihuWebFetchUserSearchV3Get_29(keyword, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎首页视频榜 ### 参数: - offset: 偏移量 - limit: 每页视频数量 ### 返回: - 知乎首页视频榜  # [English] ### Purpose: - Get Zhihu Video List ### Parameters: - offset: Offset - limit: Number of videos per page ### Returns: - Zhihu Video List  # [示例/Example] offset = \"\" limit = \"12\"
     * @summary 获取知乎首页视频榜/Get Zhihu Video List
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页视频数量/Number of videos per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchVideoListApiV1ZhihuWebFetchVideoListGet(offset?: string, limit?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchVideoListApiV1ZhihuWebFetchVideoListGet(offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎首页视频榜 ### 参数: - offset: 偏移量 - limit: 每页视频数量 ### 返回: - 知乎首页视频榜  # [English] ### Purpose: - Get Zhihu Video List ### Parameters: - offset: Offset - limit: Number of videos per page ### Returns: - Zhihu Video List  # [示例/Example] offset = \"\" limit = \"12\"
     * @summary 获取知乎首页视频榜/Get Zhihu Video List
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [limit] 每页视频数量/Number of videos per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchVideoListApiV1ZhihuWebFetchVideoListGet_30(offset?: string, limit?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchVideoListApiV1ZhihuWebFetchVideoListGet_30(offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎视频搜索V3 ### 参数: - keyword: 搜索关键词 - limit: 每页视频数量 - offset: 偏移量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎视频搜索V3  # [English] ### Purpose: - Get Zhihu Video Search V3 ### Parameters: - keyword: Search Keywords - limit: Number of videos per page - offset: Offset - search_hash_id: Search Hash ID ### Returns: - Zhihu Video Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
     * @summary 获取知乎视频搜索V3/Get Zhihu Video Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [limit] 每页视频数量/Number of videos per page
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get(keyword: string, limit?: string, offset?: string, searchHashId?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get(keyword, limit, offset, searchHashId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取知乎视频搜索V3 ### 参数: - keyword: 搜索关键词 - limit: 每页视频数量 - offset: 偏移量 - search_hash_id: 搜索哈希ID ### 返回: - 知乎视频搜索V3  # [English] ### Purpose: - Get Zhihu Video Search V3 ### Parameters: - keyword: Search Keywords - limit: Number of videos per page - offset: Offset - search_hash_id: Search Hash ID ### Returns: - Zhihu Video Search V3  # [示例/Example] keyword = \"deepseek\" limit = \"20\" offset = \"0\" search_hash_id = \"\"
     * @summary 获取知乎视频搜索V3/Get Zhihu Video Search V3
     * @param {string} keyword 搜索关键词/Search Keywords
     * @param {string} [limit] 每页视频数量/Number of videos per page
     * @param {string} [offset] 偏移量/Offset
     * @param {string} [searchHashId] 搜索哈希ID/Search Hash ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ZhihuWebAPIApi
     */
    public fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get_31(keyword: string, limit?: string, offset?: string, searchHashId?: string, options?: any) {
        return ZhihuWebAPIApiFp(this.configuration).fetchVideoSearchV3ApiV1ZhihuWebFetchVideoSearchV3Get_31(keyword, limit, offset, searchHashId, options).then((request) => request(this.axios, this.basePath));
    }

}
