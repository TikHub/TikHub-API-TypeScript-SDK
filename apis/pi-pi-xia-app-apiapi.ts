// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
/**
 * PiPiXiaAppAPIApi - axios parameter creator
 * @export
 */
export const PiPiXiaAppAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取话题详情数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 ### 返回: - 话题详情数据  # [English] ### Purpose: - Get hashtag detail data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. ### Return: - Hashtag detail data # [示例/Example] hashtag_id = \"129559\"
         * @summary 获取话题详情/Get hashtag detail
         * @param {string} hashtagId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1PipixiaAppFetchHashtagDetailGet: async (hashtagId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'hashtagId' is not null or undefined
            if (hashtagId === null || hashtagId === undefined) {
                throw new RequiredError('hashtagId','Required parameter hashtagId was null or undefined when calling fetchHashtagDetailApiV1PipixiaAppFetchHashtagDetailGet.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_hashtag_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (hashtagId !== undefined) {
                localVarQueryParameter['hashtag_id'] = hashtagId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题详情数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 ### 返回: - 话题详情数据  # [English] ### Purpose: - Get hashtag detail data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. ### Return: - Hashtag detail data # [示例/Example] hashtag_id = \"129559\"
         * @summary 获取话题详情/Get hashtag detail
         * @param {string} hashtagId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1PipixiaAppFetchHashtagDetailGet_1: async (hashtagId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'hashtagId' is not null or undefined
            if (hashtagId === null || hashtagId === undefined) {
                throw new RequiredError('hashtagId','Required parameter hashtagId was null or undefined when calling fetchHashtagDetailApiV1PipixiaAppFetchHashtagDetailGet_1.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_hashtag_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (hashtagId !== undefined) {
                localVarQueryParameter['hashtag_id'] = hashtagId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题作品列表数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 - hashtag_request_type: 话题请求类型，默认为0，可用值如下：     - 0: 热门     - 1: 最新     - 2: 精华 - hashtag_sort_type: 话题排序类型，默认为3，可用值如下：     - 3: 按热度     - 2: 按时间，从新到旧     - 1: 精华 ### 返回: - 话题作品列表数据  # [English] ### Purpose: - Get hashtag post list data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - Hashtag post list data  # [示例/Example] hashtag_id = \"129559\" cursor = \"0\" feed_count = \"0\"
         * @summary 获取话题作品列表/Get hashtag post list
         * @param {string} hashtagId 话题id/Hashtag id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {string} [feedCount] 翻页数量/Page count
         * @param {string} [hashtagRequestType] 话题请求类型/Hashtag request type
         * @param {string} [hashtagSortType] 话题排序类型/Hashtag sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagPostListApiV1PipixiaAppFetchHashtagPostListGet: async (hashtagId: string, cursor?: string, feedCount?: string, hashtagRequestType?: string, hashtagSortType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'hashtagId' is not null or undefined
            if (hashtagId === null || hashtagId === undefined) {
                throw new RequiredError('hashtagId','Required parameter hashtagId was null or undefined when calling fetchHashtagPostListApiV1PipixiaAppFetchHashtagPostListGet.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_hashtag_post_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (hashtagId !== undefined) {
                localVarQueryParameter['hashtag_id'] = hashtagId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (feedCount !== undefined) {
                localVarQueryParameter['feed_count'] = feedCount;
            }

            if (hashtagRequestType !== undefined) {
                localVarQueryParameter['hashtag_request_type'] = hashtagRequestType;
            }

            if (hashtagSortType !== undefined) {
                localVarQueryParameter['hashtag_sort_type'] = hashtagSortType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题作品列表数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 - hashtag_request_type: 话题请求类型，默认为0，可用值如下：     - 0: 热门     - 1: 最新     - 2: 精华 - hashtag_sort_type: 话题排序类型，默认为3，可用值如下：     - 3: 按热度     - 2: 按时间，从新到旧     - 1: 精华 ### 返回: - 话题作品列表数据  # [English] ### Purpose: - Get hashtag post list data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - Hashtag post list data  # [示例/Example] hashtag_id = \"129559\" cursor = \"0\" feed_count = \"0\"
         * @summary 获取话题作品列表/Get hashtag post list
         * @param {string} hashtagId 话题id/Hashtag id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {string} [feedCount] 翻页数量/Page count
         * @param {string} [hashtagRequestType] 话题请求类型/Hashtag request type
         * @param {string} [hashtagSortType] 话题排序类型/Hashtag sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagPostListApiV1PipixiaAppFetchHashtagPostListGet_2: async (hashtagId: string, cursor?: string, feedCount?: string, hashtagRequestType?: string, hashtagSortType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'hashtagId' is not null or undefined
            if (hashtagId === null || hashtagId === undefined) {
                throw new RequiredError('hashtagId','Required parameter hashtagId was null or undefined when calling fetchHashtagPostListApiV1PipixiaAppFetchHashtagPostListGet_2.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_hashtag_post_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (hashtagId !== undefined) {
                localVarQueryParameter['hashtag_id'] = hashtagId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (feedCount !== undefined) {
                localVarQueryParameter['feed_count'] = feedCount;
            }

            if (hashtagRequestType !== undefined) {
                localVarQueryParameter['hashtag_request_type'] = hashtagRequestType;
            }

            if (hashtagSortType !== undefined) {
                localVarQueryParameter['hashtag_sort_type'] = hashtagSortType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取首页推荐数据。 ### 参数: - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 首页推荐数据  # [English] ### Purpose: - Get home feed data. ### Parameters: - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - Home feed data  # [示例/Example] cursor = \"0\"
         * @summary 获取首页推荐/Get home feed
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeFeedApiV1PipixiaAppFetchHomeFeedGet: async (cursor?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/pipixia/app/fetch_home_feed`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取首页推荐数据。 ### 参数: - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 首页推荐数据  # [English] ### Purpose: - Get home feed data. ### Parameters: - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - Home feed data  # [示例/Example] cursor = \"0\"
         * @summary 获取首页推荐/Get home feed
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeFeedApiV1PipixiaAppFetchHomeFeedGet_3: async (cursor?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/pipixia/app/fetch_home_feed`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取首页短剧推荐数据。 ### 参数: - page: 页码，默认为1，每次翻页加1。 ### 返回: - 首页短剧推荐数据  # [English] ### Purpose: - Get home short drama feed data. ### Parameters: - page: Page number, default is 1, add 1 for each page. ### Return: - Home short drama feed data  # [示例/Example] page = 1
         * @summary 获取首页短剧推荐/Get home short drama feed
         * @param {number} [page] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeShortDramaFeedApiV1PipixiaAppFetchHomeShortDramaFeedGet: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/pipixia/app/fetch_home_short_drama_feed`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取首页短剧推荐数据。 ### 参数: - page: 页码，默认为1，每次翻页加1。 ### 返回: - 首页短剧推荐数据  # [English] ### Purpose: - Get home short drama feed data. ### Parameters: - page: Page number, default is 1, add 1 for each page. ### Return: - Home short drama feed data  # [示例/Example] page = 1
         * @summary 获取首页短剧推荐/Get home short drama feed
         * @param {number} [page] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeShortDramaFeedApiV1PipixiaAppFetchHomeShortDramaFeedGet_4: async (page?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/pipixia/app/fetch_home_short_drama_feed`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取热搜榜单详情数据。 ### 参数: - block_type: 榜单类型，可以从`/fetch_hot_search_board_list`接口中获取。 ### 返回: - 热搜榜单详情数据  # [English] ### Purpose: - Get hot search board detail data. ### Parameters: - block_type: Board type, can be obtained from the `/fetch_hot_search_board_list` interface. ### Return: - Hot search board detail data  # [示例/Example] block_type = 12
         * @summary 获取热搜榜单详情/Get hot search board detail
         * @param {number} blockType 榜单类型/Board type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchBoardDetailApiV1PipixiaAppFetchHotSearchBoardDetailGet: async (blockType: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'blockType' is not null or undefined
            if (blockType === null || blockType === undefined) {
                throw new RequiredError('blockType','Required parameter blockType was null or undefined when calling fetchHotSearchBoardDetailApiV1PipixiaAppFetchHotSearchBoardDetailGet.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_hot_search_board_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (blockType !== undefined) {
                localVarQueryParameter['block_type'] = blockType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取热搜榜单详情数据。 ### 参数: - block_type: 榜单类型，可以从`/fetch_hot_search_board_list`接口中获取。 ### 返回: - 热搜榜单详情数据  # [English] ### Purpose: - Get hot search board detail data. ### Parameters: - block_type: Board type, can be obtained from the `/fetch_hot_search_board_list` interface. ### Return: - Hot search board detail data  # [示例/Example] block_type = 12
         * @summary 获取热搜榜单详情/Get hot search board detail
         * @param {number} blockType 榜单类型/Board type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchBoardDetailApiV1PipixiaAppFetchHotSearchBoardDetailGet_5: async (blockType: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'blockType' is not null or undefined
            if (blockType === null || blockType === undefined) {
                throw new RequiredError('blockType','Required parameter blockType was null or undefined when calling fetchHotSearchBoardDetailApiV1PipixiaAppFetchHotSearchBoardDetailGet_5.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_hot_search_board_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (blockType !== undefined) {
                localVarQueryParameter['block_type'] = blockType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取热搜榜单列表数据。 ### 返回: - 热搜榜单列表数据  # [English] ### Purpose: - Get hot search board list data. ### Return: - Hot search board list data  # [示例/Example] 无/None
         * @summary 获取热搜榜单列表/Get hot search board list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchBoardListApiV1PipixiaAppFetchHotSearchBoardListGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/pipixia/app/fetch_hot_search_board_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取热搜榜单列表数据。 ### 返回: - 热搜榜单列表数据  # [English] ### Purpose: - Get hot search board list data. ### Return: - Hot search board list data  # [示例/Example] 无/None
         * @summary 获取热搜榜单列表/Get hot search board list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchBoardListApiV1PipixiaAppFetchHotSearchBoardListGet_6: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/pipixia/app/fetch_hot_search_board_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取热搜词条数据。 ### 返回: - 热搜词条数据  # [English] ### Purpose: - Get hot search words data. ### Return: - Hot search words data  # [示例/Example] 无/None
         * @summary 获取热搜词条/Get hot search words
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchWordsApiV1PipixiaAppFetchHotSearchWordsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/pipixia/app/fetch_hot_search_words`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取热搜词条数据。 ### 返回: - 热搜词条数据  # [English] ### Purpose: - Get hot search words data. ### Return: - Hot search words data  # [示例/Example] 无/None
         * @summary 获取热搜词条/Get hot search words
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchWordsApiV1PipixiaAppFetchHotSearchWordsGet_7: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/pipixia/app/fetch_hot_search_words`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 增加作品浏览数。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 执行结果  # [English] ### Purpose: - Increase post view count. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Execution result  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1
         * @summary 增加作品浏览数/Increase post view count
         * @param {string} cellId 作品id/Video id
         * @param {number} [cellType] 作品类型/Video type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchIncreasePostViewCountApiV1PipixiaAppFetchIncreasePostViewCountGet: async (cellId: string, cellType?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cellId' is not null or undefined
            if (cellId === null || cellId === undefined) {
                throw new RequiredError('cellId','Required parameter cellId was null or undefined when calling fetchIncreasePostViewCountApiV1PipixiaAppFetchIncreasePostViewCountGet.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_increase_post_view_count`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (cellId !== undefined) {
                localVarQueryParameter['cell_id'] = cellId;
            }

            if (cellType !== undefined) {
                localVarQueryParameter['cell_type'] = cellType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 增加作品浏览数。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 执行结果  # [English] ### Purpose: - Increase post view count. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Execution result  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1
         * @summary 增加作品浏览数/Increase post view count
         * @param {string} cellId 作品id/Video id
         * @param {number} [cellType] 作品类型/Video type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchIncreasePostViewCountApiV1PipixiaAppFetchIncreasePostViewCountGet_8: async (cellId: string, cellType?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cellId' is not null or undefined
            if (cellId === null || cellId === undefined) {
                throw new RequiredError('cellId','Required parameter cellId was null or undefined when calling fetchIncreasePostViewCountApiV1PipixiaAppFetchIncreasePostViewCountGet_8.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_increase_post_view_count`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (cellId !== undefined) {
                localVarQueryParameter['cell_id'] = cellId;
            }

            if (cellType !== undefined) {
                localVarQueryParameter['cell_type'] = cellType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品的评论列表。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 ### 返回: - 作品评论列表  # [English] ### Purpose: - Get the comment list of a post. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. ### Return: - Post comment list  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1 offset = \"0\"
         * @summary 获取作品评论列表/Get post comment list
         * @param {string} cellId 作品id/Video id
         * @param {number} [cellType] 作品类型/Video type
         * @param {string} [offset] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentListApiV1PipixiaAppFetchPostCommentListGet: async (cellId: string, cellType?: number, offset?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cellId' is not null or undefined
            if (cellId === null || cellId === undefined) {
                throw new RequiredError('cellId','Required parameter cellId was null or undefined when calling fetchPostCommentListApiV1PipixiaAppFetchPostCommentListGet.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_post_comment_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (cellId !== undefined) {
                localVarQueryParameter['cell_id'] = cellId;
            }

            if (cellType !== undefined) {
                localVarQueryParameter['cell_type'] = cellType;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品的评论列表。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 ### 返回: - 作品评论列表  # [English] ### Purpose: - Get the comment list of a post. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. ### Return: - Post comment list  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1 offset = \"0\"
         * @summary 获取作品评论列表/Get post comment list
         * @param {string} cellId 作品id/Video id
         * @param {number} [cellType] 作品类型/Video type
         * @param {string} [offset] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentListApiV1PipixiaAppFetchPostCommentListGet_9: async (cellId: string, cellType?: number, offset?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cellId' is not null or undefined
            if (cellId === null || cellId === undefined) {
                throw new RequiredError('cellId','Required parameter cellId was null or undefined when calling fetchPostCommentListApiV1PipixiaAppFetchPostCommentListGet_9.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_post_comment_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (cellId !== undefined) {
                localVarQueryParameter['cell_id'] = cellId;
            }

            if (cellType !== undefined) {
                localVarQueryParameter['cell_type'] = cellType;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Video data  # [示例/Example] cell_id = \"7411193113223371043\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} cellId 作品id/Video id
         * @param {number} [cellType] 作品类型/Video type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostDetailApiV1PipixiaAppFetchPostDetailGet: async (cellId: string, cellType?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cellId' is not null or undefined
            if (cellId === null || cellId === undefined) {
                throw new RequiredError('cellId','Required parameter cellId was null or undefined when calling fetchPostDetailApiV1PipixiaAppFetchPostDetailGet.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_post_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (cellId !== undefined) {
                localVarQueryParameter['cell_id'] = cellId;
            }

            if (cellType !== undefined) {
                localVarQueryParameter['cell_type'] = cellType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Video data  # [示例/Example] cell_id = \"7411193113223371043\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} cellId 作品id/Video id
         * @param {number} [cellType] 作品类型/Video type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostDetailApiV1PipixiaAppFetchPostDetailGet_10: async (cellId: string, cellType?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cellId' is not null or undefined
            if (cellId === null || cellId === undefined) {
                throw new RequiredError('cellId','Required parameter cellId was null or undefined when calling fetchPostDetailApiV1PipixiaAppFetchPostDetailGet_10.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_post_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (cellId !== undefined) {
                localVarQueryParameter['cell_id'] = cellId;
            }

            if (cellType !== undefined) {
                localVarQueryParameter['cell_type'] = cellType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品的统计数据，如点赞数、评论数、转发数等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistics of a single post, such as the number of likes, comments, reposts, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. ### Return: - Post statistics  # [示例/Example] cell_id = \"7411193113223371043\"
         * @summary 获取作品统计数据/Get post statistics
         * @param {string} cellId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostStatisticsApiV1PipixiaAppFetchPostStatisticsGet: async (cellId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cellId' is not null or undefined
            if (cellId === null || cellId === undefined) {
                throw new RequiredError('cellId','Required parameter cellId was null or undefined when calling fetchPostStatisticsApiV1PipixiaAppFetchPostStatisticsGet.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_post_statistics`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (cellId !== undefined) {
                localVarQueryParameter['cell_id'] = cellId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品的统计数据，如点赞数、评论数、转发数等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistics of a single post, such as the number of likes, comments, reposts, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. ### Return: - Post statistics  # [示例/Example] cell_id = \"7411193113223371043\"
         * @summary 获取作品统计数据/Get post statistics
         * @param {string} cellId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostStatisticsApiV1PipixiaAppFetchPostStatisticsGet_11: async (cellId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cellId' is not null or undefined
            if (cellId === null || cellId === undefined) {
                throw new RequiredError('cellId','Required parameter cellId was null or undefined when calling fetchPostStatisticsApiV1PipixiaAppFetchPostStatisticsGet_11.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_post_statistics`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (cellId !== undefined) {
                localVarQueryParameter['cell_id'] = cellId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索接口，支持搜索用户、作品等。 ### 参数: - keyword: 搜索关键词。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 - search_type: 搜索类型，可用值如下：     - 1: 综合     - 8: 热门     - 9: 新鲜     - 2：视频     - 3：图文     - 4：用户     - 5：话题 ### 返回: - 搜索结果  # [English] ### Purpose: - Search API, support search user, post, etc. ### Parameters: - keyword: Search keyword. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. - search_type: Search type, available values are as follows:     - 1: Comprehensive     - 8: Hot     - 9: Fresh     - 2: Video     - 3: Photo     - 4: User     - 5: Hashtag ### Return: - Search result  # [示例/Example] keyword = \"皮皮虾\" offset = \"0\" search_type = \"1\"
         * @summary 搜索接口/Search API
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {string} [offset] 翻页游标/Page cursor
         * @param {string} [searchType] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchApiV1PipixiaAppFetchSearchGet: async (keyword: string, offset?: string, searchType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchApiV1PipixiaAppFetchSearchGet.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (searchType !== undefined) {
                localVarQueryParameter['search_type'] = searchType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索接口，支持搜索用户、作品等。 ### 参数: - keyword: 搜索关键词。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 - search_type: 搜索类型，可用值如下：     - 1: 综合     - 8: 热门     - 9: 新鲜     - 2：视频     - 3：图文     - 4：用户     - 5：话题 ### 返回: - 搜索结果  # [English] ### Purpose: - Search API, support search user, post, etc. ### Parameters: - keyword: Search keyword. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. - search_type: Search type, available values are as follows:     - 1: Comprehensive     - 8: Hot     - 9: Fresh     - 2: Video     - 3: Photo     - 4: User     - 5: Hashtag ### Return: - Search result  # [示例/Example] keyword = \"皮皮虾\" offset = \"0\" search_type = \"1\"
         * @summary 搜索接口/Search API
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {string} [offset] 翻页游标/Page cursor
         * @param {string} [searchType] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchApiV1PipixiaAppFetchSearchGet_12: async (keyword: string, offset?: string, searchType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchApiV1PipixiaAppFetchSearchGet_12.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (searchType !== undefined) {
                localVarQueryParameter['search_type'] = searchType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成短连接。 ### 参数: - original_url: 原始链接，可以是任意链接。 ### 返回: - 短连接  # [English] ### Purpose: - Generate short URL. ### Parameters: - original_url: Original URL, can be any link. ### Return: - Short URL  # [示例/Example] original_url = \"https://h5.pipix.com/item/7385813877985909043\"
         * @summary 生成短连接/Generate short URL
         * @param {string} originalUrl 原始链接/Original URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShortUrlApiV1PipixiaAppFetchShortUrlGet: async (originalUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'originalUrl' is not null or undefined
            if (originalUrl === null || originalUrl === undefined) {
                throw new RequiredError('originalUrl','Required parameter originalUrl was null or undefined when calling fetchShortUrlApiV1PipixiaAppFetchShortUrlGet.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_short_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (originalUrl !== undefined) {
                localVarQueryParameter['original_url'] = originalUrl;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成短连接。 ### 参数: - original_url: 原始链接，可以是任意链接。 ### 返回: - 短连接  # [English] ### Purpose: - Generate short URL. ### Parameters: - original_url: Original URL, can be any link. ### Return: - Short URL  # [示例/Example] original_url = \"https://h5.pipix.com/item/7385813877985909043\"
         * @summary 生成短连接/Generate short URL
         * @param {string} originalUrl 原始链接/Original URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShortUrlApiV1PipixiaAppFetchShortUrlGet_13: async (originalUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'originalUrl' is not null or undefined
            if (originalUrl === null || originalUrl === undefined) {
                throw new RequiredError('originalUrl','Required parameter originalUrl was null or undefined when calling fetchShortUrlApiV1PipixiaAppFetchShortUrlGet_13.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_short_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (originalUrl !== undefined) {
                localVarQueryParameter['original_url'] = originalUrl;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的粉丝列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get user\'s follower list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User follower list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"
         * @summary 获取用户粉丝列表/Get user follower list
         * @param {string} userId 用户id/User id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowerListApiV1PipixiaAppFetchUserFollowerListGet: async (userId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserFollowerListApiV1PipixiaAppFetchUserFollowerListGet.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_user_follower_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的粉丝列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get user\'s follower list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User follower list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"
         * @summary 获取用户粉丝列表/Get user follower list
         * @param {string} userId 用户id/User id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowerListApiV1PipixiaAppFetchUserFollowerListGet_14: async (userId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserFollowerListApiV1PipixiaAppFetchUserFollowerListGet_14.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_user_follower_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的关注列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get user\'s following list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User following list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"
         * @summary 获取用户关注列表/Get user following list
         * @param {string} userId 用户id/User id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1PipixiaAppFetchUserFollowingListGet: async (userId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserFollowingListApiV1PipixiaAppFetchUserFollowingListGet.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_user_following_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的关注列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get user\'s following list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User following list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"
         * @summary 获取用户关注列表/Get user following list
         * @param {string} userId 用户id/User id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1PipixiaAppFetchUserFollowingListGet_15: async (userId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserFollowingListApiV1PipixiaAppFetchUserFollowingListGet_15.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_user_following_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息，如昵称、性别、头像等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information, such as nickname and avatar. ### Parameters: - user_id: AKA user id, can be obtained from the share link. ### Return: - User information  # [示例/Example] user_id = \"1310254082831248\"
         * @summary 获取用户信息/Get user information
         * @param {string} userId 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1PipixiaAppFetchUserInfoGet: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserInfoApiV1PipixiaAppFetchUserInfoGet.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_user_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息，如昵称、性别、头像等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information, such as nickname and avatar. ### Parameters: - user_id: AKA user id, can be obtained from the share link. ### Return: - User information  # [示例/Example] user_id = \"1310254082831248\"
         * @summary 获取用户信息/Get user information
         * @param {string} userId 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1PipixiaAppFetchUserInfoGet_16: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserInfoApiV1PipixiaAppFetchUserInfoGet_16.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_user_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户作品列表，如视频、图文等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 ### 返回: - 用户作品列表  # [English] ### Purpose: - Get user post list, such as videos, photos, etc. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - User post list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\" feed_count = \"0\"
         * @summary 获取用户作品列表/Get user post list
         * @param {string} userId 用户id/User id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {string} [feedCount] 翻页数量/Page count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostListApiV1PipixiaAppFetchUserPostListGet: async (userId: string, cursor?: string, feedCount?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserPostListApiV1PipixiaAppFetchUserPostListGet.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_user_post_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (feedCount !== undefined) {
                localVarQueryParameter['feed_count'] = feedCount;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户作品列表，如视频、图文等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 ### 返回: - 用户作品列表  # [English] ### Purpose: - Get user post list, such as videos, photos, etc. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - User post list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\" feed_count = \"0\"
         * @summary 获取用户作品列表/Get user post list
         * @param {string} userId 用户id/User id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {string} [feedCount] 翻页数量/Page count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostListApiV1PipixiaAppFetchUserPostListGet_17: async (userId: string, cursor?: string, feedCount?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserPostListApiV1PipixiaAppFetchUserPostListGet_17.');
            }
            const localVarPath = `/api/v1/pipixia/app/fetch_user_post_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (feedCount !== undefined) {
                localVarQueryParameter['feed_count'] = feedCount;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PiPiXiaAppAPIApi - functional programming interface
 * @export
 */
export const PiPiXiaAppAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取话题详情数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 ### 返回: - 话题详情数据  # [English] ### Purpose: - Get hashtag detail data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. ### Return: - Hashtag detail data # [示例/Example] hashtag_id = \"129559\"
         * @summary 获取话题详情/Get hashtag detail
         * @param {string} hashtagId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagDetailApiV1PipixiaAppFetchHashtagDetailGet(hashtagId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchHashtagDetailApiV1PipixiaAppFetchHashtagDetailGet(hashtagId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题详情数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 ### 返回: - 话题详情数据  # [English] ### Purpose: - Get hashtag detail data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. ### Return: - Hashtag detail data # [示例/Example] hashtag_id = \"129559\"
         * @summary 获取话题详情/Get hashtag detail
         * @param {string} hashtagId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagDetailApiV1PipixiaAppFetchHashtagDetailGet_1(hashtagId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchHashtagDetailApiV1PipixiaAppFetchHashtagDetailGet_1(hashtagId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题作品列表数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 - hashtag_request_type: 话题请求类型，默认为0，可用值如下：     - 0: 热门     - 1: 最新     - 2: 精华 - hashtag_sort_type: 话题排序类型，默认为3，可用值如下：     - 3: 按热度     - 2: 按时间，从新到旧     - 1: 精华 ### 返回: - 话题作品列表数据  # [English] ### Purpose: - Get hashtag post list data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - Hashtag post list data  # [示例/Example] hashtag_id = \"129559\" cursor = \"0\" feed_count = \"0\"
         * @summary 获取话题作品列表/Get hashtag post list
         * @param {string} hashtagId 话题id/Hashtag id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {string} [feedCount] 翻页数量/Page count
         * @param {string} [hashtagRequestType] 话题请求类型/Hashtag request type
         * @param {string} [hashtagSortType] 话题排序类型/Hashtag sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagPostListApiV1PipixiaAppFetchHashtagPostListGet(hashtagId: string, cursor?: string, feedCount?: string, hashtagRequestType?: string, hashtagSortType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchHashtagPostListApiV1PipixiaAppFetchHashtagPostListGet(hashtagId, cursor, feedCount, hashtagRequestType, hashtagSortType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题作品列表数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 - hashtag_request_type: 话题请求类型，默认为0，可用值如下：     - 0: 热门     - 1: 最新     - 2: 精华 - hashtag_sort_type: 话题排序类型，默认为3，可用值如下：     - 3: 按热度     - 2: 按时间，从新到旧     - 1: 精华 ### 返回: - 话题作品列表数据  # [English] ### Purpose: - Get hashtag post list data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - Hashtag post list data  # [示例/Example] hashtag_id = \"129559\" cursor = \"0\" feed_count = \"0\"
         * @summary 获取话题作品列表/Get hashtag post list
         * @param {string} hashtagId 话题id/Hashtag id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {string} [feedCount] 翻页数量/Page count
         * @param {string} [hashtagRequestType] 话题请求类型/Hashtag request type
         * @param {string} [hashtagSortType] 话题排序类型/Hashtag sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagPostListApiV1PipixiaAppFetchHashtagPostListGet_2(hashtagId: string, cursor?: string, feedCount?: string, hashtagRequestType?: string, hashtagSortType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchHashtagPostListApiV1PipixiaAppFetchHashtagPostListGet_2(hashtagId, cursor, feedCount, hashtagRequestType, hashtagSortType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取首页推荐数据。 ### 参数: - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 首页推荐数据  # [English] ### Purpose: - Get home feed data. ### Parameters: - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - Home feed data  # [示例/Example] cursor = \"0\"
         * @summary 获取首页推荐/Get home feed
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHomeFeedApiV1PipixiaAppFetchHomeFeedGet(cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchHomeFeedApiV1PipixiaAppFetchHomeFeedGet(cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取首页推荐数据。 ### 参数: - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 首页推荐数据  # [English] ### Purpose: - Get home feed data. ### Parameters: - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - Home feed data  # [示例/Example] cursor = \"0\"
         * @summary 获取首页推荐/Get home feed
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHomeFeedApiV1PipixiaAppFetchHomeFeedGet_3(cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchHomeFeedApiV1PipixiaAppFetchHomeFeedGet_3(cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取首页短剧推荐数据。 ### 参数: - page: 页码，默认为1，每次翻页加1。 ### 返回: - 首页短剧推荐数据  # [English] ### Purpose: - Get home short drama feed data. ### Parameters: - page: Page number, default is 1, add 1 for each page. ### Return: - Home short drama feed data  # [示例/Example] page = 1
         * @summary 获取首页短剧推荐/Get home short drama feed
         * @param {number} [page] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHomeShortDramaFeedApiV1PipixiaAppFetchHomeShortDramaFeedGet(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchHomeShortDramaFeedApiV1PipixiaAppFetchHomeShortDramaFeedGet(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取首页短剧推荐数据。 ### 参数: - page: 页码，默认为1，每次翻页加1。 ### 返回: - 首页短剧推荐数据  # [English] ### Purpose: - Get home short drama feed data. ### Parameters: - page: Page number, default is 1, add 1 for each page. ### Return: - Home short drama feed data  # [示例/Example] page = 1
         * @summary 获取首页短剧推荐/Get home short drama feed
         * @param {number} [page] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHomeShortDramaFeedApiV1PipixiaAppFetchHomeShortDramaFeedGet_4(page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchHomeShortDramaFeedApiV1PipixiaAppFetchHomeShortDramaFeedGet_4(page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取热搜榜单详情数据。 ### 参数: - block_type: 榜单类型，可以从`/fetch_hot_search_board_list`接口中获取。 ### 返回: - 热搜榜单详情数据  # [English] ### Purpose: - Get hot search board detail data. ### Parameters: - block_type: Board type, can be obtained from the `/fetch_hot_search_board_list` interface. ### Return: - Hot search board detail data  # [示例/Example] block_type = 12
         * @summary 获取热搜榜单详情/Get hot search board detail
         * @param {number} blockType 榜单类型/Board type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotSearchBoardDetailApiV1PipixiaAppFetchHotSearchBoardDetailGet(blockType: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchHotSearchBoardDetailApiV1PipixiaAppFetchHotSearchBoardDetailGet(blockType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取热搜榜单详情数据。 ### 参数: - block_type: 榜单类型，可以从`/fetch_hot_search_board_list`接口中获取。 ### 返回: - 热搜榜单详情数据  # [English] ### Purpose: - Get hot search board detail data. ### Parameters: - block_type: Board type, can be obtained from the `/fetch_hot_search_board_list` interface. ### Return: - Hot search board detail data  # [示例/Example] block_type = 12
         * @summary 获取热搜榜单详情/Get hot search board detail
         * @param {number} blockType 榜单类型/Board type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotSearchBoardDetailApiV1PipixiaAppFetchHotSearchBoardDetailGet_5(blockType: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchHotSearchBoardDetailApiV1PipixiaAppFetchHotSearchBoardDetailGet_5(blockType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取热搜榜单列表数据。 ### 返回: - 热搜榜单列表数据  # [English] ### Purpose: - Get hot search board list data. ### Return: - Hot search board list data  # [示例/Example] 无/None
         * @summary 获取热搜榜单列表/Get hot search board list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotSearchBoardListApiV1PipixiaAppFetchHotSearchBoardListGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchHotSearchBoardListApiV1PipixiaAppFetchHotSearchBoardListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取热搜榜单列表数据。 ### 返回: - 热搜榜单列表数据  # [English] ### Purpose: - Get hot search board list data. ### Return: - Hot search board list data  # [示例/Example] 无/None
         * @summary 获取热搜榜单列表/Get hot search board list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotSearchBoardListApiV1PipixiaAppFetchHotSearchBoardListGet_6(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchHotSearchBoardListApiV1PipixiaAppFetchHotSearchBoardListGet_6(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取热搜词条数据。 ### 返回: - 热搜词条数据  # [English] ### Purpose: - Get hot search words data. ### Return: - Hot search words data  # [示例/Example] 无/None
         * @summary 获取热搜词条/Get hot search words
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotSearchWordsApiV1PipixiaAppFetchHotSearchWordsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchHotSearchWordsApiV1PipixiaAppFetchHotSearchWordsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取热搜词条数据。 ### 返回: - 热搜词条数据  # [English] ### Purpose: - Get hot search words data. ### Return: - Hot search words data  # [示例/Example] 无/None
         * @summary 获取热搜词条/Get hot search words
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotSearchWordsApiV1PipixiaAppFetchHotSearchWordsGet_7(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchHotSearchWordsApiV1PipixiaAppFetchHotSearchWordsGet_7(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 增加作品浏览数。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 执行结果  # [English] ### Purpose: - Increase post view count. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Execution result  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1
         * @summary 增加作品浏览数/Increase post view count
         * @param {string} cellId 作品id/Video id
         * @param {number} [cellType] 作品类型/Video type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchIncreasePostViewCountApiV1PipixiaAppFetchIncreasePostViewCountGet(cellId: string, cellType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchIncreasePostViewCountApiV1PipixiaAppFetchIncreasePostViewCountGet(cellId, cellType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 增加作品浏览数。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 执行结果  # [English] ### Purpose: - Increase post view count. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Execution result  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1
         * @summary 增加作品浏览数/Increase post view count
         * @param {string} cellId 作品id/Video id
         * @param {number} [cellType] 作品类型/Video type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchIncreasePostViewCountApiV1PipixiaAppFetchIncreasePostViewCountGet_8(cellId: string, cellType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchIncreasePostViewCountApiV1PipixiaAppFetchIncreasePostViewCountGet_8(cellId, cellType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品的评论列表。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 ### 返回: - 作品评论列表  # [English] ### Purpose: - Get the comment list of a post. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. ### Return: - Post comment list  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1 offset = \"0\"
         * @summary 获取作品评论列表/Get post comment list
         * @param {string} cellId 作品id/Video id
         * @param {number} [cellType] 作品类型/Video type
         * @param {string} [offset] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostCommentListApiV1PipixiaAppFetchPostCommentListGet(cellId: string, cellType?: number, offset?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchPostCommentListApiV1PipixiaAppFetchPostCommentListGet(cellId, cellType, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品的评论列表。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 ### 返回: - 作品评论列表  # [English] ### Purpose: - Get the comment list of a post. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. ### Return: - Post comment list  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1 offset = \"0\"
         * @summary 获取作品评论列表/Get post comment list
         * @param {string} cellId 作品id/Video id
         * @param {number} [cellType] 作品类型/Video type
         * @param {string} [offset] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostCommentListApiV1PipixiaAppFetchPostCommentListGet_9(cellId: string, cellType?: number, offset?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchPostCommentListApiV1PipixiaAppFetchPostCommentListGet_9(cellId, cellType, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Video data  # [示例/Example] cell_id = \"7411193113223371043\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} cellId 作品id/Video id
         * @param {number} [cellType] 作品类型/Video type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostDetailApiV1PipixiaAppFetchPostDetailGet(cellId: string, cellType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchPostDetailApiV1PipixiaAppFetchPostDetailGet(cellId, cellType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Video data  # [示例/Example] cell_id = \"7411193113223371043\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} cellId 作品id/Video id
         * @param {number} [cellType] 作品类型/Video type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostDetailApiV1PipixiaAppFetchPostDetailGet_10(cellId: string, cellType?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchPostDetailApiV1PipixiaAppFetchPostDetailGet_10(cellId, cellType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品的统计数据，如点赞数、评论数、转发数等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistics of a single post, such as the number of likes, comments, reposts, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. ### Return: - Post statistics  # [示例/Example] cell_id = \"7411193113223371043\"
         * @summary 获取作品统计数据/Get post statistics
         * @param {string} cellId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostStatisticsApiV1PipixiaAppFetchPostStatisticsGet(cellId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchPostStatisticsApiV1PipixiaAppFetchPostStatisticsGet(cellId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品的统计数据，如点赞数、评论数、转发数等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistics of a single post, such as the number of likes, comments, reposts, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. ### Return: - Post statistics  # [示例/Example] cell_id = \"7411193113223371043\"
         * @summary 获取作品统计数据/Get post statistics
         * @param {string} cellId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostStatisticsApiV1PipixiaAppFetchPostStatisticsGet_11(cellId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchPostStatisticsApiV1PipixiaAppFetchPostStatisticsGet_11(cellId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索接口，支持搜索用户、作品等。 ### 参数: - keyword: 搜索关键词。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 - search_type: 搜索类型，可用值如下：     - 1: 综合     - 8: 热门     - 9: 新鲜     - 2：视频     - 3：图文     - 4：用户     - 5：话题 ### 返回: - 搜索结果  # [English] ### Purpose: - Search API, support search user, post, etc. ### Parameters: - keyword: Search keyword. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. - search_type: Search type, available values are as follows:     - 1: Comprehensive     - 8: Hot     - 9: Fresh     - 2: Video     - 3: Photo     - 4: User     - 5: Hashtag ### Return: - Search result  # [示例/Example] keyword = \"皮皮虾\" offset = \"0\" search_type = \"1\"
         * @summary 搜索接口/Search API
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {string} [offset] 翻页游标/Page cursor
         * @param {string} [searchType] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchApiV1PipixiaAppFetchSearchGet(keyword: string, offset?: string, searchType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchSearchApiV1PipixiaAppFetchSearchGet(keyword, offset, searchType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索接口，支持搜索用户、作品等。 ### 参数: - keyword: 搜索关键词。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 - search_type: 搜索类型，可用值如下：     - 1: 综合     - 8: 热门     - 9: 新鲜     - 2：视频     - 3：图文     - 4：用户     - 5：话题 ### 返回: - 搜索结果  # [English] ### Purpose: - Search API, support search user, post, etc. ### Parameters: - keyword: Search keyword. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. - search_type: Search type, available values are as follows:     - 1: Comprehensive     - 8: Hot     - 9: Fresh     - 2: Video     - 3: Photo     - 4: User     - 5: Hashtag ### Return: - Search result  # [示例/Example] keyword = \"皮皮虾\" offset = \"0\" search_type = \"1\"
         * @summary 搜索接口/Search API
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {string} [offset] 翻页游标/Page cursor
         * @param {string} [searchType] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchApiV1PipixiaAppFetchSearchGet_12(keyword: string, offset?: string, searchType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchSearchApiV1PipixiaAppFetchSearchGet_12(keyword, offset, searchType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成短连接。 ### 参数: - original_url: 原始链接，可以是任意链接。 ### 返回: - 短连接  # [English] ### Purpose: - Generate short URL. ### Parameters: - original_url: Original URL, can be any link. ### Return: - Short URL  # [示例/Example] original_url = \"https://h5.pipix.com/item/7385813877985909043\"
         * @summary 生成短连接/Generate short URL
         * @param {string} originalUrl 原始链接/Original URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShortUrlApiV1PipixiaAppFetchShortUrlGet(originalUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchShortUrlApiV1PipixiaAppFetchShortUrlGet(originalUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成短连接。 ### 参数: - original_url: 原始链接，可以是任意链接。 ### 返回: - 短连接  # [English] ### Purpose: - Generate short URL. ### Parameters: - original_url: Original URL, can be any link. ### Return: - Short URL  # [示例/Example] original_url = \"https://h5.pipix.com/item/7385813877985909043\"
         * @summary 生成短连接/Generate short URL
         * @param {string} originalUrl 原始链接/Original URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShortUrlApiV1PipixiaAppFetchShortUrlGet_13(originalUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchShortUrlApiV1PipixiaAppFetchShortUrlGet_13(originalUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的粉丝列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get user\'s follower list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User follower list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"
         * @summary 获取用户粉丝列表/Get user follower list
         * @param {string} userId 用户id/User id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowerListApiV1PipixiaAppFetchUserFollowerListGet(userId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchUserFollowerListApiV1PipixiaAppFetchUserFollowerListGet(userId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的粉丝列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get user\'s follower list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User follower list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"
         * @summary 获取用户粉丝列表/Get user follower list
         * @param {string} userId 用户id/User id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowerListApiV1PipixiaAppFetchUserFollowerListGet_14(userId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchUserFollowerListApiV1PipixiaAppFetchUserFollowerListGet_14(userId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的关注列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get user\'s following list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User following list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"
         * @summary 获取用户关注列表/Get user following list
         * @param {string} userId 用户id/User id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowingListApiV1PipixiaAppFetchUserFollowingListGet(userId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchUserFollowingListApiV1PipixiaAppFetchUserFollowingListGet(userId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的关注列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get user\'s following list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User following list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"
         * @summary 获取用户关注列表/Get user following list
         * @param {string} userId 用户id/User id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowingListApiV1PipixiaAppFetchUserFollowingListGet_15(userId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchUserFollowingListApiV1PipixiaAppFetchUserFollowingListGet_15(userId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息，如昵称、性别、头像等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information, such as nickname and avatar. ### Parameters: - user_id: AKA user id, can be obtained from the share link. ### Return: - User information  # [示例/Example] user_id = \"1310254082831248\"
         * @summary 获取用户信息/Get user information
         * @param {string} userId 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoApiV1PipixiaAppFetchUserInfoGet(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchUserInfoApiV1PipixiaAppFetchUserInfoGet(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息，如昵称、性别、头像等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information, such as nickname and avatar. ### Parameters: - user_id: AKA user id, can be obtained from the share link. ### Return: - User information  # [示例/Example] user_id = \"1310254082831248\"
         * @summary 获取用户信息/Get user information
         * @param {string} userId 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoApiV1PipixiaAppFetchUserInfoGet_16(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchUserInfoApiV1PipixiaAppFetchUserInfoGet_16(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户作品列表，如视频、图文等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 ### 返回: - 用户作品列表  # [English] ### Purpose: - Get user post list, such as videos, photos, etc. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - User post list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\" feed_count = \"0\"
         * @summary 获取用户作品列表/Get user post list
         * @param {string} userId 用户id/User id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {string} [feedCount] 翻页数量/Page count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostListApiV1PipixiaAppFetchUserPostListGet(userId: string, cursor?: string, feedCount?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchUserPostListApiV1PipixiaAppFetchUserPostListGet(userId, cursor, feedCount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户作品列表，如视频、图文等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 ### 返回: - 用户作品列表  # [English] ### Purpose: - Get user post list, such as videos, photos, etc. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - User post list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\" feed_count = \"0\"
         * @summary 获取用户作品列表/Get user post list
         * @param {string} userId 用户id/User id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {string} [feedCount] 翻页数量/Page count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostListApiV1PipixiaAppFetchUserPostListGet_17(userId: string, cursor?: string, feedCount?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await PiPiXiaAppAPIApiAxiosParamCreator(configuration).fetchUserPostListApiV1PipixiaAppFetchUserPostListGet_17(userId, cursor, feedCount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PiPiXiaAppAPIApi - factory interface
 * @export
 */
export const PiPiXiaAppAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 获取话题详情数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 ### 返回: - 话题详情数据  # [English] ### Purpose: - Get hashtag detail data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. ### Return: - Hashtag detail data # [示例/Example] hashtag_id = \"129559\"
         * @summary 获取话题详情/Get hashtag detail
         * @param {string} hashtagId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1PipixiaAppFetchHashtagDetailGet(hashtagId: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchHashtagDetailApiV1PipixiaAppFetchHashtagDetailGet(hashtagId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取话题详情数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 ### 返回: - 话题详情数据  # [English] ### Purpose: - Get hashtag detail data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. ### Return: - Hashtag detail data # [示例/Example] hashtag_id = \"129559\"
         * @summary 获取话题详情/Get hashtag detail
         * @param {string} hashtagId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1PipixiaAppFetchHashtagDetailGet_1(hashtagId: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchHashtagDetailApiV1PipixiaAppFetchHashtagDetailGet_1(hashtagId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取话题作品列表数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 - hashtag_request_type: 话题请求类型，默认为0，可用值如下：     - 0: 热门     - 1: 最新     - 2: 精华 - hashtag_sort_type: 话题排序类型，默认为3，可用值如下：     - 3: 按热度     - 2: 按时间，从新到旧     - 1: 精华 ### 返回: - 话题作品列表数据  # [English] ### Purpose: - Get hashtag post list data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - Hashtag post list data  # [示例/Example] hashtag_id = \"129559\" cursor = \"0\" feed_count = \"0\"
         * @summary 获取话题作品列表/Get hashtag post list
         * @param {string} hashtagId 话题id/Hashtag id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {string} [feedCount] 翻页数量/Page count
         * @param {string} [hashtagRequestType] 话题请求类型/Hashtag request type
         * @param {string} [hashtagSortType] 话题排序类型/Hashtag sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagPostListApiV1PipixiaAppFetchHashtagPostListGet(hashtagId: string, cursor?: string, feedCount?: string, hashtagRequestType?: string, hashtagSortType?: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchHashtagPostListApiV1PipixiaAppFetchHashtagPostListGet(hashtagId, cursor, feedCount, hashtagRequestType, hashtagSortType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取话题作品列表数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 - hashtag_request_type: 话题请求类型，默认为0，可用值如下：     - 0: 热门     - 1: 最新     - 2: 精华 - hashtag_sort_type: 话题排序类型，默认为3，可用值如下：     - 3: 按热度     - 2: 按时间，从新到旧     - 1: 精华 ### 返回: - 话题作品列表数据  # [English] ### Purpose: - Get hashtag post list data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - Hashtag post list data  # [示例/Example] hashtag_id = \"129559\" cursor = \"0\" feed_count = \"0\"
         * @summary 获取话题作品列表/Get hashtag post list
         * @param {string} hashtagId 话题id/Hashtag id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {string} [feedCount] 翻页数量/Page count
         * @param {string} [hashtagRequestType] 话题请求类型/Hashtag request type
         * @param {string} [hashtagSortType] 话题排序类型/Hashtag sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagPostListApiV1PipixiaAppFetchHashtagPostListGet_2(hashtagId: string, cursor?: string, feedCount?: string, hashtagRequestType?: string, hashtagSortType?: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchHashtagPostListApiV1PipixiaAppFetchHashtagPostListGet_2(hashtagId, cursor, feedCount, hashtagRequestType, hashtagSortType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取首页推荐数据。 ### 参数: - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 首页推荐数据  # [English] ### Purpose: - Get home feed data. ### Parameters: - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - Home feed data  # [示例/Example] cursor = \"0\"
         * @summary 获取首页推荐/Get home feed
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeFeedApiV1PipixiaAppFetchHomeFeedGet(cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchHomeFeedApiV1PipixiaAppFetchHomeFeedGet(cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取首页推荐数据。 ### 参数: - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 首页推荐数据  # [English] ### Purpose: - Get home feed data. ### Parameters: - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - Home feed data  # [示例/Example] cursor = \"0\"
         * @summary 获取首页推荐/Get home feed
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeFeedApiV1PipixiaAppFetchHomeFeedGet_3(cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchHomeFeedApiV1PipixiaAppFetchHomeFeedGet_3(cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取首页短剧推荐数据。 ### 参数: - page: 页码，默认为1，每次翻页加1。 ### 返回: - 首页短剧推荐数据  # [English] ### Purpose: - Get home short drama feed data. ### Parameters: - page: Page number, default is 1, add 1 for each page. ### Return: - Home short drama feed data  # [示例/Example] page = 1
         * @summary 获取首页短剧推荐/Get home short drama feed
         * @param {number} [page] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeShortDramaFeedApiV1PipixiaAppFetchHomeShortDramaFeedGet(page?: number, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchHomeShortDramaFeedApiV1PipixiaAppFetchHomeShortDramaFeedGet(page, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取首页短剧推荐数据。 ### 参数: - page: 页码，默认为1，每次翻页加1。 ### 返回: - 首页短剧推荐数据  # [English] ### Purpose: - Get home short drama feed data. ### Parameters: - page: Page number, default is 1, add 1 for each page. ### Return: - Home short drama feed data  # [示例/Example] page = 1
         * @summary 获取首页短剧推荐/Get home short drama feed
         * @param {number} [page] 页码/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeShortDramaFeedApiV1PipixiaAppFetchHomeShortDramaFeedGet_4(page?: number, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchHomeShortDramaFeedApiV1PipixiaAppFetchHomeShortDramaFeedGet_4(page, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取热搜榜单详情数据。 ### 参数: - block_type: 榜单类型，可以从`/fetch_hot_search_board_list`接口中获取。 ### 返回: - 热搜榜单详情数据  # [English] ### Purpose: - Get hot search board detail data. ### Parameters: - block_type: Board type, can be obtained from the `/fetch_hot_search_board_list` interface. ### Return: - Hot search board detail data  # [示例/Example] block_type = 12
         * @summary 获取热搜榜单详情/Get hot search board detail
         * @param {number} blockType 榜单类型/Board type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchBoardDetailApiV1PipixiaAppFetchHotSearchBoardDetailGet(blockType: number, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchHotSearchBoardDetailApiV1PipixiaAppFetchHotSearchBoardDetailGet(blockType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取热搜榜单详情数据。 ### 参数: - block_type: 榜单类型，可以从`/fetch_hot_search_board_list`接口中获取。 ### 返回: - 热搜榜单详情数据  # [English] ### Purpose: - Get hot search board detail data. ### Parameters: - block_type: Board type, can be obtained from the `/fetch_hot_search_board_list` interface. ### Return: - Hot search board detail data  # [示例/Example] block_type = 12
         * @summary 获取热搜榜单详情/Get hot search board detail
         * @param {number} blockType 榜单类型/Board type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchBoardDetailApiV1PipixiaAppFetchHotSearchBoardDetailGet_5(blockType: number, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchHotSearchBoardDetailApiV1PipixiaAppFetchHotSearchBoardDetailGet_5(blockType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取热搜榜单列表数据。 ### 返回: - 热搜榜单列表数据  # [English] ### Purpose: - Get hot search board list data. ### Return: - Hot search board list data  # [示例/Example] 无/None
         * @summary 获取热搜榜单列表/Get hot search board list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchBoardListApiV1PipixiaAppFetchHotSearchBoardListGet(options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchHotSearchBoardListApiV1PipixiaAppFetchHotSearchBoardListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取热搜榜单列表数据。 ### 返回: - 热搜榜单列表数据  # [English] ### Purpose: - Get hot search board list data. ### Return: - Hot search board list data  # [示例/Example] 无/None
         * @summary 获取热搜榜单列表/Get hot search board list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchBoardListApiV1PipixiaAppFetchHotSearchBoardListGet_6(options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchHotSearchBoardListApiV1PipixiaAppFetchHotSearchBoardListGet_6(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取热搜词条数据。 ### 返回: - 热搜词条数据  # [English] ### Purpose: - Get hot search words data. ### Return: - Hot search words data  # [示例/Example] 无/None
         * @summary 获取热搜词条/Get hot search words
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchWordsApiV1PipixiaAppFetchHotSearchWordsGet(options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchHotSearchWordsApiV1PipixiaAppFetchHotSearchWordsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取热搜词条数据。 ### 返回: - 热搜词条数据  # [English] ### Purpose: - Get hot search words data. ### Return: - Hot search words data  # [示例/Example] 无/None
         * @summary 获取热搜词条/Get hot search words
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchWordsApiV1PipixiaAppFetchHotSearchWordsGet_7(options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchHotSearchWordsApiV1PipixiaAppFetchHotSearchWordsGet_7(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 增加作品浏览数。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 执行结果  # [English] ### Purpose: - Increase post view count. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Execution result  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1
         * @summary 增加作品浏览数/Increase post view count
         * @param {string} cellId 作品id/Video id
         * @param {number} [cellType] 作品类型/Video type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchIncreasePostViewCountApiV1PipixiaAppFetchIncreasePostViewCountGet(cellId: string, cellType?: number, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchIncreasePostViewCountApiV1PipixiaAppFetchIncreasePostViewCountGet(cellId, cellType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 增加作品浏览数。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 执行结果  # [English] ### Purpose: - Increase post view count. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Execution result  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1
         * @summary 增加作品浏览数/Increase post view count
         * @param {string} cellId 作品id/Video id
         * @param {number} [cellType] 作品类型/Video type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchIncreasePostViewCountApiV1PipixiaAppFetchIncreasePostViewCountGet_8(cellId: string, cellType?: number, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchIncreasePostViewCountApiV1PipixiaAppFetchIncreasePostViewCountGet_8(cellId, cellType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取作品的评论列表。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 ### 返回: - 作品评论列表  # [English] ### Purpose: - Get the comment list of a post. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. ### Return: - Post comment list  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1 offset = \"0\"
         * @summary 获取作品评论列表/Get post comment list
         * @param {string} cellId 作品id/Video id
         * @param {number} [cellType] 作品类型/Video type
         * @param {string} [offset] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentListApiV1PipixiaAppFetchPostCommentListGet(cellId: string, cellType?: number, offset?: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchPostCommentListApiV1PipixiaAppFetchPostCommentListGet(cellId, cellType, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取作品的评论列表。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 ### 返回: - 作品评论列表  # [English] ### Purpose: - Get the comment list of a post. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. ### Return: - Post comment list  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1 offset = \"0\"
         * @summary 获取作品评论列表/Get post comment list
         * @param {string} cellId 作品id/Video id
         * @param {number} [cellType] 作品类型/Video type
         * @param {string} [offset] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentListApiV1PipixiaAppFetchPostCommentListGet_9(cellId: string, cellType?: number, offset?: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchPostCommentListApiV1PipixiaAppFetchPostCommentListGet_9(cellId, cellType, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Video data  # [示例/Example] cell_id = \"7411193113223371043\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} cellId 作品id/Video id
         * @param {number} [cellType] 作品类型/Video type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostDetailApiV1PipixiaAppFetchPostDetailGet(cellId: string, cellType?: number, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchPostDetailApiV1PipixiaAppFetchPostDetailGet(cellId, cellType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Video data  # [示例/Example] cell_id = \"7411193113223371043\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} cellId 作品id/Video id
         * @param {number} [cellType] 作品类型/Video type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostDetailApiV1PipixiaAppFetchPostDetailGet_10(cellId: string, cellType?: number, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchPostDetailApiV1PipixiaAppFetchPostDetailGet_10(cellId, cellType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品的统计数据，如点赞数、评论数、转发数等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistics of a single post, such as the number of likes, comments, reposts, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. ### Return: - Post statistics  # [示例/Example] cell_id = \"7411193113223371043\"
         * @summary 获取作品统计数据/Get post statistics
         * @param {string} cellId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostStatisticsApiV1PipixiaAppFetchPostStatisticsGet(cellId: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchPostStatisticsApiV1PipixiaAppFetchPostStatisticsGet(cellId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品的统计数据，如点赞数、评论数、转发数等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistics of a single post, such as the number of likes, comments, reposts, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. ### Return: - Post statistics  # [示例/Example] cell_id = \"7411193113223371043\"
         * @summary 获取作品统计数据/Get post statistics
         * @param {string} cellId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostStatisticsApiV1PipixiaAppFetchPostStatisticsGet_11(cellId: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchPostStatisticsApiV1PipixiaAppFetchPostStatisticsGet_11(cellId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索接口，支持搜索用户、作品等。 ### 参数: - keyword: 搜索关键词。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 - search_type: 搜索类型，可用值如下：     - 1: 综合     - 8: 热门     - 9: 新鲜     - 2：视频     - 3：图文     - 4：用户     - 5：话题 ### 返回: - 搜索结果  # [English] ### Purpose: - Search API, support search user, post, etc. ### Parameters: - keyword: Search keyword. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. - search_type: Search type, available values are as follows:     - 1: Comprehensive     - 8: Hot     - 9: Fresh     - 2: Video     - 3: Photo     - 4: User     - 5: Hashtag ### Return: - Search result  # [示例/Example] keyword = \"皮皮虾\" offset = \"0\" search_type = \"1\"
         * @summary 搜索接口/Search API
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {string} [offset] 翻页游标/Page cursor
         * @param {string} [searchType] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchApiV1PipixiaAppFetchSearchGet(keyword: string, offset?: string, searchType?: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchSearchApiV1PipixiaAppFetchSearchGet(keyword, offset, searchType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索接口，支持搜索用户、作品等。 ### 参数: - keyword: 搜索关键词。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 - search_type: 搜索类型，可用值如下：     - 1: 综合     - 8: 热门     - 9: 新鲜     - 2：视频     - 3：图文     - 4：用户     - 5：话题 ### 返回: - 搜索结果  # [English] ### Purpose: - Search API, support search user, post, etc. ### Parameters: - keyword: Search keyword. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. - search_type: Search type, available values are as follows:     - 1: Comprehensive     - 8: Hot     - 9: Fresh     - 2: Video     - 3: Photo     - 4: User     - 5: Hashtag ### Return: - Search result  # [示例/Example] keyword = \"皮皮虾\" offset = \"0\" search_type = \"1\"
         * @summary 搜索接口/Search API
         * @param {string} keyword 搜索关键词/Search keyword
         * @param {string} [offset] 翻页游标/Page cursor
         * @param {string} [searchType] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchApiV1PipixiaAppFetchSearchGet_12(keyword: string, offset?: string, searchType?: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchSearchApiV1PipixiaAppFetchSearchGet_12(keyword, offset, searchType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成短连接。 ### 参数: - original_url: 原始链接，可以是任意链接。 ### 返回: - 短连接  # [English] ### Purpose: - Generate short URL. ### Parameters: - original_url: Original URL, can be any link. ### Return: - Short URL  # [示例/Example] original_url = \"https://h5.pipix.com/item/7385813877985909043\"
         * @summary 生成短连接/Generate short URL
         * @param {string} originalUrl 原始链接/Original URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShortUrlApiV1PipixiaAppFetchShortUrlGet(originalUrl: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchShortUrlApiV1PipixiaAppFetchShortUrlGet(originalUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成短连接。 ### 参数: - original_url: 原始链接，可以是任意链接。 ### 返回: - 短连接  # [English] ### Purpose: - Generate short URL. ### Parameters: - original_url: Original URL, can be any link. ### Return: - Short URL  # [示例/Example] original_url = \"https://h5.pipix.com/item/7385813877985909043\"
         * @summary 生成短连接/Generate short URL
         * @param {string} originalUrl 原始链接/Original URL
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShortUrlApiV1PipixiaAppFetchShortUrlGet_13(originalUrl: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchShortUrlApiV1PipixiaAppFetchShortUrlGet_13(originalUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的粉丝列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get user\'s follower list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User follower list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"
         * @summary 获取用户粉丝列表/Get user follower list
         * @param {string} userId 用户id/User id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowerListApiV1PipixiaAppFetchUserFollowerListGet(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchUserFollowerListApiV1PipixiaAppFetchUserFollowerListGet(userId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的粉丝列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get user\'s follower list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User follower list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"
         * @summary 获取用户粉丝列表/Get user follower list
         * @param {string} userId 用户id/User id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowerListApiV1PipixiaAppFetchUserFollowerListGet_14(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchUserFollowerListApiV1PipixiaAppFetchUserFollowerListGet_14(userId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的关注列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get user\'s following list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User following list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"
         * @summary 获取用户关注列表/Get user following list
         * @param {string} userId 用户id/User id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1PipixiaAppFetchUserFollowingListGet(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchUserFollowingListApiV1PipixiaAppFetchUserFollowingListGet(userId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的关注列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get user\'s following list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User following list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"
         * @summary 获取用户关注列表/Get user following list
         * @param {string} userId 用户id/User id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1PipixiaAppFetchUserFollowingListGet_15(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchUserFollowingListApiV1PipixiaAppFetchUserFollowingListGet_15(userId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户信息，如昵称、性别、头像等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information, such as nickname and avatar. ### Parameters: - user_id: AKA user id, can be obtained from the share link. ### Return: - User information  # [示例/Example] user_id = \"1310254082831248\"
         * @summary 获取用户信息/Get user information
         * @param {string} userId 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1PipixiaAppFetchUserInfoGet(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchUserInfoApiV1PipixiaAppFetchUserInfoGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户信息，如昵称、性别、头像等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information, such as nickname and avatar. ### Parameters: - user_id: AKA user id, can be obtained from the share link. ### Return: - User information  # [示例/Example] user_id = \"1310254082831248\"
         * @summary 获取用户信息/Get user information
         * @param {string} userId 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1PipixiaAppFetchUserInfoGet_16(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchUserInfoApiV1PipixiaAppFetchUserInfoGet_16(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户作品列表，如视频、图文等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 ### 返回: - 用户作品列表  # [English] ### Purpose: - Get user post list, such as videos, photos, etc. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - User post list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\" feed_count = \"0\"
         * @summary 获取用户作品列表/Get user post list
         * @param {string} userId 用户id/User id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {string} [feedCount] 翻页数量/Page count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostListApiV1PipixiaAppFetchUserPostListGet(userId: string, cursor?: string, feedCount?: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchUserPostListApiV1PipixiaAppFetchUserPostListGet(userId, cursor, feedCount, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户作品列表，如视频、图文等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 ### 返回: - 用户作品列表  # [English] ### Purpose: - Get user post list, such as videos, photos, etc. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - User post list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\" feed_count = \"0\"
         * @summary 获取用户作品列表/Get user post list
         * @param {string} userId 用户id/User id
         * @param {string} [cursor] 翻页游标/Page cursor
         * @param {string} [feedCount] 翻页数量/Page count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostListApiV1PipixiaAppFetchUserPostListGet_17(userId: string, cursor?: string, feedCount?: string, options?: any): AxiosPromise<ResponseModel> {
            return PiPiXiaAppAPIApiFp(configuration).fetchUserPostListApiV1PipixiaAppFetchUserPostListGet_17(userId, cursor, feedCount, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PiPiXiaAppAPIApi - interface
 * @export
 * @interface PiPiXiaAppAPIApi
 */
export interface PiPiXiaAppAPIApiInterface {
    /**
     * # [中文] ### 用途: - 获取话题详情数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 ### 返回: - 话题详情数据  # [English] ### Purpose: - Get hashtag detail data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. ### Return: - Hashtag detail data # [示例/Example] hashtag_id = \"129559\"
     * @summary 获取话题详情/Get hashtag detail
     * @param {string} hashtagId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchHashtagDetailApiV1PipixiaAppFetchHashtagDetailGet(hashtagId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取话题详情数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 ### 返回: - 话题详情数据  # [English] ### Purpose: - Get hashtag detail data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. ### Return: - Hashtag detail data # [示例/Example] hashtag_id = \"129559\"
     * @summary 获取话题详情/Get hashtag detail
     * @param {string} hashtagId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchHashtagDetailApiV1PipixiaAppFetchHashtagDetailGet_1(hashtagId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取话题作品列表数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 - hashtag_request_type: 话题请求类型，默认为0，可用值如下：     - 0: 热门     - 1: 最新     - 2: 精华 - hashtag_sort_type: 话题排序类型，默认为3，可用值如下：     - 3: 按热度     - 2: 按时间，从新到旧     - 1: 精华 ### 返回: - 话题作品列表数据  # [English] ### Purpose: - Get hashtag post list data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - Hashtag post list data  # [示例/Example] hashtag_id = \"129559\" cursor = \"0\" feed_count = \"0\"
     * @summary 获取话题作品列表/Get hashtag post list
     * @param {string} hashtagId 话题id/Hashtag id
     * @param {string} [cursor] 翻页游标/Page cursor
     * @param {string} [feedCount] 翻页数量/Page count
     * @param {string} [hashtagRequestType] 话题请求类型/Hashtag request type
     * @param {string} [hashtagSortType] 话题排序类型/Hashtag sort type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchHashtagPostListApiV1PipixiaAppFetchHashtagPostListGet(hashtagId: string, cursor?: string, feedCount?: string, hashtagRequestType?: string, hashtagSortType?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取话题作品列表数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 - hashtag_request_type: 话题请求类型，默认为0，可用值如下：     - 0: 热门     - 1: 最新     - 2: 精华 - hashtag_sort_type: 话题排序类型，默认为3，可用值如下：     - 3: 按热度     - 2: 按时间，从新到旧     - 1: 精华 ### 返回: - 话题作品列表数据  # [English] ### Purpose: - Get hashtag post list data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - Hashtag post list data  # [示例/Example] hashtag_id = \"129559\" cursor = \"0\" feed_count = \"0\"
     * @summary 获取话题作品列表/Get hashtag post list
     * @param {string} hashtagId 话题id/Hashtag id
     * @param {string} [cursor] 翻页游标/Page cursor
     * @param {string} [feedCount] 翻页数量/Page count
     * @param {string} [hashtagRequestType] 话题请求类型/Hashtag request type
     * @param {string} [hashtagSortType] 话题排序类型/Hashtag sort type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchHashtagPostListApiV1PipixiaAppFetchHashtagPostListGet_2(hashtagId: string, cursor?: string, feedCount?: string, hashtagRequestType?: string, hashtagSortType?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取首页推荐数据。 ### 参数: - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 首页推荐数据  # [English] ### Purpose: - Get home feed data. ### Parameters: - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - Home feed data  # [示例/Example] cursor = \"0\"
     * @summary 获取首页推荐/Get home feed
     * @param {string} [cursor] 翻页游标/Page cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchHomeFeedApiV1PipixiaAppFetchHomeFeedGet(cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取首页推荐数据。 ### 参数: - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 首页推荐数据  # [English] ### Purpose: - Get home feed data. ### Parameters: - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - Home feed data  # [示例/Example] cursor = \"0\"
     * @summary 获取首页推荐/Get home feed
     * @param {string} [cursor] 翻页游标/Page cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchHomeFeedApiV1PipixiaAppFetchHomeFeedGet_3(cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取首页短剧推荐数据。 ### 参数: - page: 页码，默认为1，每次翻页加1。 ### 返回: - 首页短剧推荐数据  # [English] ### Purpose: - Get home short drama feed data. ### Parameters: - page: Page number, default is 1, add 1 for each page. ### Return: - Home short drama feed data  # [示例/Example] page = 1
     * @summary 获取首页短剧推荐/Get home short drama feed
     * @param {number} [page] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchHomeShortDramaFeedApiV1PipixiaAppFetchHomeShortDramaFeedGet(page?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取首页短剧推荐数据。 ### 参数: - page: 页码，默认为1，每次翻页加1。 ### 返回: - 首页短剧推荐数据  # [English] ### Purpose: - Get home short drama feed data. ### Parameters: - page: Page number, default is 1, add 1 for each page. ### Return: - Home short drama feed data  # [示例/Example] page = 1
     * @summary 获取首页短剧推荐/Get home short drama feed
     * @param {number} [page] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchHomeShortDramaFeedApiV1PipixiaAppFetchHomeShortDramaFeedGet_4(page?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取热搜榜单详情数据。 ### 参数: - block_type: 榜单类型，可以从`/fetch_hot_search_board_list`接口中获取。 ### 返回: - 热搜榜单详情数据  # [English] ### Purpose: - Get hot search board detail data. ### Parameters: - block_type: Board type, can be obtained from the `/fetch_hot_search_board_list` interface. ### Return: - Hot search board detail data  # [示例/Example] block_type = 12
     * @summary 获取热搜榜单详情/Get hot search board detail
     * @param {number} blockType 榜单类型/Board type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchHotSearchBoardDetailApiV1PipixiaAppFetchHotSearchBoardDetailGet(blockType: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取热搜榜单详情数据。 ### 参数: - block_type: 榜单类型，可以从`/fetch_hot_search_board_list`接口中获取。 ### 返回: - 热搜榜单详情数据  # [English] ### Purpose: - Get hot search board detail data. ### Parameters: - block_type: Board type, can be obtained from the `/fetch_hot_search_board_list` interface. ### Return: - Hot search board detail data  # [示例/Example] block_type = 12
     * @summary 获取热搜榜单详情/Get hot search board detail
     * @param {number} blockType 榜单类型/Board type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchHotSearchBoardDetailApiV1PipixiaAppFetchHotSearchBoardDetailGet_5(blockType: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取热搜榜单列表数据。 ### 返回: - 热搜榜单列表数据  # [English] ### Purpose: - Get hot search board list data. ### Return: - Hot search board list data  # [示例/Example] 无/None
     * @summary 获取热搜榜单列表/Get hot search board list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchHotSearchBoardListApiV1PipixiaAppFetchHotSearchBoardListGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取热搜榜单列表数据。 ### 返回: - 热搜榜单列表数据  # [English] ### Purpose: - Get hot search board list data. ### Return: - Hot search board list data  # [示例/Example] 无/None
     * @summary 获取热搜榜单列表/Get hot search board list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchHotSearchBoardListApiV1PipixiaAppFetchHotSearchBoardListGet_6(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取热搜词条数据。 ### 返回: - 热搜词条数据  # [English] ### Purpose: - Get hot search words data. ### Return: - Hot search words data  # [示例/Example] 无/None
     * @summary 获取热搜词条/Get hot search words
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchHotSearchWordsApiV1PipixiaAppFetchHotSearchWordsGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取热搜词条数据。 ### 返回: - 热搜词条数据  # [English] ### Purpose: - Get hot search words data. ### Return: - Hot search words data  # [示例/Example] 无/None
     * @summary 获取热搜词条/Get hot search words
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchHotSearchWordsApiV1PipixiaAppFetchHotSearchWordsGet_7(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 增加作品浏览数。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 执行结果  # [English] ### Purpose: - Increase post view count. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Execution result  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1
     * @summary 增加作品浏览数/Increase post view count
     * @param {string} cellId 作品id/Video id
     * @param {number} [cellType] 作品类型/Video type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchIncreasePostViewCountApiV1PipixiaAppFetchIncreasePostViewCountGet(cellId: string, cellType?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 增加作品浏览数。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 执行结果  # [English] ### Purpose: - Increase post view count. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Execution result  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1
     * @summary 增加作品浏览数/Increase post view count
     * @param {string} cellId 作品id/Video id
     * @param {number} [cellType] 作品类型/Video type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchIncreasePostViewCountApiV1PipixiaAppFetchIncreasePostViewCountGet_8(cellId: string, cellType?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取作品的评论列表。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 ### 返回: - 作品评论列表  # [English] ### Purpose: - Get the comment list of a post. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. ### Return: - Post comment list  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1 offset = \"0\"
     * @summary 获取作品评论列表/Get post comment list
     * @param {string} cellId 作品id/Video id
     * @param {number} [cellType] 作品类型/Video type
     * @param {string} [offset] 翻页游标/Page cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchPostCommentListApiV1PipixiaAppFetchPostCommentListGet(cellId: string, cellType?: number, offset?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取作品的评论列表。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 ### 返回: - 作品评论列表  # [English] ### Purpose: - Get the comment list of a post. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. ### Return: - Post comment list  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1 offset = \"0\"
     * @summary 获取作品评论列表/Get post comment list
     * @param {string} cellId 作品id/Video id
     * @param {number} [cellType] 作品类型/Video type
     * @param {string} [offset] 翻页游标/Page cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchPostCommentListApiV1PipixiaAppFetchPostCommentListGet_9(cellId: string, cellType?: number, offset?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Video data  # [示例/Example] cell_id = \"7411193113223371043\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} cellId 作品id/Video id
     * @param {number} [cellType] 作品类型/Video type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchPostDetailApiV1PipixiaAppFetchPostDetailGet(cellId: string, cellType?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Video data  # [示例/Example] cell_id = \"7411193113223371043\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} cellId 作品id/Video id
     * @param {number} [cellType] 作品类型/Video type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchPostDetailApiV1PipixiaAppFetchPostDetailGet_10(cellId: string, cellType?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品的统计数据，如点赞数、评论数、转发数等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistics of a single post, such as the number of likes, comments, reposts, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. ### Return: - Post statistics  # [示例/Example] cell_id = \"7411193113223371043\"
     * @summary 获取作品统计数据/Get post statistics
     * @param {string} cellId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchPostStatisticsApiV1PipixiaAppFetchPostStatisticsGet(cellId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品的统计数据，如点赞数、评论数、转发数等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistics of a single post, such as the number of likes, comments, reposts, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. ### Return: - Post statistics  # [示例/Example] cell_id = \"7411193113223371043\"
     * @summary 获取作品统计数据/Get post statistics
     * @param {string} cellId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchPostStatisticsApiV1PipixiaAppFetchPostStatisticsGet_11(cellId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索接口，支持搜索用户、作品等。 ### 参数: - keyword: 搜索关键词。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 - search_type: 搜索类型，可用值如下：     - 1: 综合     - 8: 热门     - 9: 新鲜     - 2：视频     - 3：图文     - 4：用户     - 5：话题 ### 返回: - 搜索结果  # [English] ### Purpose: - Search API, support search user, post, etc. ### Parameters: - keyword: Search keyword. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. - search_type: Search type, available values are as follows:     - 1: Comprehensive     - 8: Hot     - 9: Fresh     - 2: Video     - 3: Photo     - 4: User     - 5: Hashtag ### Return: - Search result  # [示例/Example] keyword = \"皮皮虾\" offset = \"0\" search_type = \"1\"
     * @summary 搜索接口/Search API
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {string} [offset] 翻页游标/Page cursor
     * @param {string} [searchType] 搜索类型/Search type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchSearchApiV1PipixiaAppFetchSearchGet(keyword: string, offset?: string, searchType?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索接口，支持搜索用户、作品等。 ### 参数: - keyword: 搜索关键词。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 - search_type: 搜索类型，可用值如下：     - 1: 综合     - 8: 热门     - 9: 新鲜     - 2：视频     - 3：图文     - 4：用户     - 5：话题 ### 返回: - 搜索结果  # [English] ### Purpose: - Search API, support search user, post, etc. ### Parameters: - keyword: Search keyword. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. - search_type: Search type, available values are as follows:     - 1: Comprehensive     - 8: Hot     - 9: Fresh     - 2: Video     - 3: Photo     - 4: User     - 5: Hashtag ### Return: - Search result  # [示例/Example] keyword = \"皮皮虾\" offset = \"0\" search_type = \"1\"
     * @summary 搜索接口/Search API
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {string} [offset] 翻页游标/Page cursor
     * @param {string} [searchType] 搜索类型/Search type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchSearchApiV1PipixiaAppFetchSearchGet_12(keyword: string, offset?: string, searchType?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成短连接。 ### 参数: - original_url: 原始链接，可以是任意链接。 ### 返回: - 短连接  # [English] ### Purpose: - Generate short URL. ### Parameters: - original_url: Original URL, can be any link. ### Return: - Short URL  # [示例/Example] original_url = \"https://h5.pipix.com/item/7385813877985909043\"
     * @summary 生成短连接/Generate short URL
     * @param {string} originalUrl 原始链接/Original URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchShortUrlApiV1PipixiaAppFetchShortUrlGet(originalUrl: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成短连接。 ### 参数: - original_url: 原始链接，可以是任意链接。 ### 返回: - 短连接  # [English] ### Purpose: - Generate short URL. ### Parameters: - original_url: Original URL, can be any link. ### Return: - Short URL  # [示例/Example] original_url = \"https://h5.pipix.com/item/7385813877985909043\"
     * @summary 生成短连接/Generate short URL
     * @param {string} originalUrl 原始链接/Original URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchShortUrlApiV1PipixiaAppFetchShortUrlGet_13(originalUrl: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的粉丝列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get user\'s follower list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User follower list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"
     * @summary 获取用户粉丝列表/Get user follower list
     * @param {string} userId 用户id/User id
     * @param {string} [cursor] 翻页游标/Page cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchUserFollowerListApiV1PipixiaAppFetchUserFollowerListGet(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的粉丝列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get user\'s follower list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User follower list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"
     * @summary 获取用户粉丝列表/Get user follower list
     * @param {string} userId 用户id/User id
     * @param {string} [cursor] 翻页游标/Page cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchUserFollowerListApiV1PipixiaAppFetchUserFollowerListGet_14(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的关注列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get user\'s following list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User following list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"
     * @summary 获取用户关注列表/Get user following list
     * @param {string} userId 用户id/User id
     * @param {string} [cursor] 翻页游标/Page cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchUserFollowingListApiV1PipixiaAppFetchUserFollowingListGet(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的关注列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get user\'s following list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User following list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"
     * @summary 获取用户关注列表/Get user following list
     * @param {string} userId 用户id/User id
     * @param {string} [cursor] 翻页游标/Page cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchUserFollowingListApiV1PipixiaAppFetchUserFollowingListGet_15(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户信息，如昵称、性别、头像等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information, such as nickname and avatar. ### Parameters: - user_id: AKA user id, can be obtained from the share link. ### Return: - User information  # [示例/Example] user_id = \"1310254082831248\"
     * @summary 获取用户信息/Get user information
     * @param {string} userId 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchUserInfoApiV1PipixiaAppFetchUserInfoGet(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户信息，如昵称、性别、头像等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information, such as nickname and avatar. ### Parameters: - user_id: AKA user id, can be obtained from the share link. ### Return: - User information  # [示例/Example] user_id = \"1310254082831248\"
     * @summary 获取用户信息/Get user information
     * @param {string} userId 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchUserInfoApiV1PipixiaAppFetchUserInfoGet_16(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户作品列表，如视频、图文等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 ### 返回: - 用户作品列表  # [English] ### Purpose: - Get user post list, such as videos, photos, etc. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - User post list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\" feed_count = \"0\"
     * @summary 获取用户作品列表/Get user post list
     * @param {string} userId 用户id/User id
     * @param {string} [cursor] 翻页游标/Page cursor
     * @param {string} [feedCount] 翻页数量/Page count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchUserPostListApiV1PipixiaAppFetchUserPostListGet(userId: string, cursor?: string, feedCount?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户作品列表，如视频、图文等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 ### 返回: - 用户作品列表  # [English] ### Purpose: - Get user post list, such as videos, photos, etc. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - User post list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\" feed_count = \"0\"
     * @summary 获取用户作品列表/Get user post list
     * @param {string} userId 用户id/User id
     * @param {string} [cursor] 翻页游标/Page cursor
     * @param {string} [feedCount] 翻页数量/Page count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApiInterface
     */
    fetchUserPostListApiV1PipixiaAppFetchUserPostListGet_17(userId: string, cursor?: string, feedCount?: string, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * PiPiXiaAppAPIApi - object-oriented interface
 * @export
 * @class PiPiXiaAppAPIApi
 * @extends {BaseAPI}
 */
export class PiPiXiaAppAPIApi extends BaseAPI implements PiPiXiaAppAPIApiInterface {
    /**
     * # [中文] ### 用途: - 获取话题详情数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 ### 返回: - 话题详情数据  # [English] ### Purpose: - Get hashtag detail data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. ### Return: - Hashtag detail data # [示例/Example] hashtag_id = \"129559\"
     * @summary 获取话题详情/Get hashtag detail
     * @param {string} hashtagId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchHashtagDetailApiV1PipixiaAppFetchHashtagDetailGet(hashtagId: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchHashtagDetailApiV1PipixiaAppFetchHashtagDetailGet(hashtagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取话题详情数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 ### 返回: - 话题详情数据  # [English] ### Purpose: - Get hashtag detail data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. ### Return: - Hashtag detail data # [示例/Example] hashtag_id = \"129559\"
     * @summary 获取话题详情/Get hashtag detail
     * @param {string} hashtagId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchHashtagDetailApiV1PipixiaAppFetchHashtagDetailGet_1(hashtagId: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchHashtagDetailApiV1PipixiaAppFetchHashtagDetailGet_1(hashtagId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取话题作品列表数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 - hashtag_request_type: 话题请求类型，默认为0，可用值如下：     - 0: 热门     - 1: 最新     - 2: 精华 - hashtag_sort_type: 话题排序类型，默认为3，可用值如下：     - 3: 按热度     - 2: 按时间，从新到旧     - 1: 精华 ### 返回: - 话题作品列表数据  # [English] ### Purpose: - Get hashtag post list data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - Hashtag post list data  # [示例/Example] hashtag_id = \"129559\" cursor = \"0\" feed_count = \"0\"
     * @summary 获取话题作品列表/Get hashtag post list
     * @param {string} hashtagId 话题id/Hashtag id
     * @param {string} [cursor] 翻页游标/Page cursor
     * @param {string} [feedCount] 翻页数量/Page count
     * @param {string} [hashtagRequestType] 话题请求类型/Hashtag request type
     * @param {string} [hashtagSortType] 话题排序类型/Hashtag sort type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchHashtagPostListApiV1PipixiaAppFetchHashtagPostListGet(hashtagId: string, cursor?: string, feedCount?: string, hashtagRequestType?: string, hashtagSortType?: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchHashtagPostListApiV1PipixiaAppFetchHashtagPostListGet(hashtagId, cursor, feedCount, hashtagRequestType, hashtagSortType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取话题作品列表数据。 ### 参数: - hashtag_id: 话题id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 - hashtag_request_type: 话题请求类型，默认为0，可用值如下：     - 0: 热门     - 1: 最新     - 2: 精华 - hashtag_sort_type: 话题排序类型，默认为3，可用值如下：     - 3: 按热度     - 2: 按时间，从新到旧     - 1: 精华 ### 返回: - 话题作品列表数据  # [English] ### Purpose: - Get hashtag post list data. ### Parameters: - hashtag_id: AKA hashtag id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - Hashtag post list data  # [示例/Example] hashtag_id = \"129559\" cursor = \"0\" feed_count = \"0\"
     * @summary 获取话题作品列表/Get hashtag post list
     * @param {string} hashtagId 话题id/Hashtag id
     * @param {string} [cursor] 翻页游标/Page cursor
     * @param {string} [feedCount] 翻页数量/Page count
     * @param {string} [hashtagRequestType] 话题请求类型/Hashtag request type
     * @param {string} [hashtagSortType] 话题排序类型/Hashtag sort type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchHashtagPostListApiV1PipixiaAppFetchHashtagPostListGet_2(hashtagId: string, cursor?: string, feedCount?: string, hashtagRequestType?: string, hashtagSortType?: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchHashtagPostListApiV1PipixiaAppFetchHashtagPostListGet_2(hashtagId, cursor, feedCount, hashtagRequestType, hashtagSortType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取首页推荐数据。 ### 参数: - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 首页推荐数据  # [English] ### Purpose: - Get home feed data. ### Parameters: - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - Home feed data  # [示例/Example] cursor = \"0\"
     * @summary 获取首页推荐/Get home feed
     * @param {string} [cursor] 翻页游标/Page cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchHomeFeedApiV1PipixiaAppFetchHomeFeedGet(cursor?: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchHomeFeedApiV1PipixiaAppFetchHomeFeedGet(cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取首页推荐数据。 ### 参数: - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 首页推荐数据  # [English] ### Purpose: - Get home feed data. ### Parameters: - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - Home feed data  # [示例/Example] cursor = \"0\"
     * @summary 获取首页推荐/Get home feed
     * @param {string} [cursor] 翻页游标/Page cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchHomeFeedApiV1PipixiaAppFetchHomeFeedGet_3(cursor?: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchHomeFeedApiV1PipixiaAppFetchHomeFeedGet_3(cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取首页短剧推荐数据。 ### 参数: - page: 页码，默认为1，每次翻页加1。 ### 返回: - 首页短剧推荐数据  # [English] ### Purpose: - Get home short drama feed data. ### Parameters: - page: Page number, default is 1, add 1 for each page. ### Return: - Home short drama feed data  # [示例/Example] page = 1
     * @summary 获取首页短剧推荐/Get home short drama feed
     * @param {number} [page] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchHomeShortDramaFeedApiV1PipixiaAppFetchHomeShortDramaFeedGet(page?: number, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchHomeShortDramaFeedApiV1PipixiaAppFetchHomeShortDramaFeedGet(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取首页短剧推荐数据。 ### 参数: - page: 页码，默认为1，每次翻页加1。 ### 返回: - 首页短剧推荐数据  # [English] ### Purpose: - Get home short drama feed data. ### Parameters: - page: Page number, default is 1, add 1 for each page. ### Return: - Home short drama feed data  # [示例/Example] page = 1
     * @summary 获取首页短剧推荐/Get home short drama feed
     * @param {number} [page] 页码/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchHomeShortDramaFeedApiV1PipixiaAppFetchHomeShortDramaFeedGet_4(page?: number, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchHomeShortDramaFeedApiV1PipixiaAppFetchHomeShortDramaFeedGet_4(page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取热搜榜单详情数据。 ### 参数: - block_type: 榜单类型，可以从`/fetch_hot_search_board_list`接口中获取。 ### 返回: - 热搜榜单详情数据  # [English] ### Purpose: - Get hot search board detail data. ### Parameters: - block_type: Board type, can be obtained from the `/fetch_hot_search_board_list` interface. ### Return: - Hot search board detail data  # [示例/Example] block_type = 12
     * @summary 获取热搜榜单详情/Get hot search board detail
     * @param {number} blockType 榜单类型/Board type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchHotSearchBoardDetailApiV1PipixiaAppFetchHotSearchBoardDetailGet(blockType: number, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchHotSearchBoardDetailApiV1PipixiaAppFetchHotSearchBoardDetailGet(blockType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取热搜榜单详情数据。 ### 参数: - block_type: 榜单类型，可以从`/fetch_hot_search_board_list`接口中获取。 ### 返回: - 热搜榜单详情数据  # [English] ### Purpose: - Get hot search board detail data. ### Parameters: - block_type: Board type, can be obtained from the `/fetch_hot_search_board_list` interface. ### Return: - Hot search board detail data  # [示例/Example] block_type = 12
     * @summary 获取热搜榜单详情/Get hot search board detail
     * @param {number} blockType 榜单类型/Board type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchHotSearchBoardDetailApiV1PipixiaAppFetchHotSearchBoardDetailGet_5(blockType: number, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchHotSearchBoardDetailApiV1PipixiaAppFetchHotSearchBoardDetailGet_5(blockType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取热搜榜单列表数据。 ### 返回: - 热搜榜单列表数据  # [English] ### Purpose: - Get hot search board list data. ### Return: - Hot search board list data  # [示例/Example] 无/None
     * @summary 获取热搜榜单列表/Get hot search board list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchHotSearchBoardListApiV1PipixiaAppFetchHotSearchBoardListGet(options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchHotSearchBoardListApiV1PipixiaAppFetchHotSearchBoardListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取热搜榜单列表数据。 ### 返回: - 热搜榜单列表数据  # [English] ### Purpose: - Get hot search board list data. ### Return: - Hot search board list data  # [示例/Example] 无/None
     * @summary 获取热搜榜单列表/Get hot search board list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchHotSearchBoardListApiV1PipixiaAppFetchHotSearchBoardListGet_6(options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchHotSearchBoardListApiV1PipixiaAppFetchHotSearchBoardListGet_6(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取热搜词条数据。 ### 返回: - 热搜词条数据  # [English] ### Purpose: - Get hot search words data. ### Return: - Hot search words data  # [示例/Example] 无/None
     * @summary 获取热搜词条/Get hot search words
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchHotSearchWordsApiV1PipixiaAppFetchHotSearchWordsGet(options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchHotSearchWordsApiV1PipixiaAppFetchHotSearchWordsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取热搜词条数据。 ### 返回: - 热搜词条数据  # [English] ### Purpose: - Get hot search words data. ### Return: - Hot search words data  # [示例/Example] 无/None
     * @summary 获取热搜词条/Get hot search words
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchHotSearchWordsApiV1PipixiaAppFetchHotSearchWordsGet_7(options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchHotSearchWordsApiV1PipixiaAppFetchHotSearchWordsGet_7(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 增加作品浏览数。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 执行结果  # [English] ### Purpose: - Increase post view count. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Execution result  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1
     * @summary 增加作品浏览数/Increase post view count
     * @param {string} cellId 作品id/Video id
     * @param {number} [cellType] 作品类型/Video type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchIncreasePostViewCountApiV1PipixiaAppFetchIncreasePostViewCountGet(cellId: string, cellType?: number, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchIncreasePostViewCountApiV1PipixiaAppFetchIncreasePostViewCountGet(cellId, cellType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 增加作品浏览数。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 执行结果  # [English] ### Purpose: - Increase post view count. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Execution result  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1
     * @summary 增加作品浏览数/Increase post view count
     * @param {string} cellId 作品id/Video id
     * @param {number} [cellType] 作品类型/Video type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchIncreasePostViewCountApiV1PipixiaAppFetchIncreasePostViewCountGet_8(cellId: string, cellType?: number, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchIncreasePostViewCountApiV1PipixiaAppFetchIncreasePostViewCountGet_8(cellId, cellType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取作品的评论列表。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 ### 返回: - 作品评论列表  # [English] ### Purpose: - Get the comment list of a post. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. ### Return: - Post comment list  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1 offset = \"0\"
     * @summary 获取作品评论列表/Get post comment list
     * @param {string} cellId 作品id/Video id
     * @param {number} [cellType] 作品类型/Video type
     * @param {string} [offset] 翻页游标/Page cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchPostCommentListApiV1PipixiaAppFetchPostCommentListGet(cellId: string, cellType?: number, offset?: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchPostCommentListApiV1PipixiaAppFetchPostCommentListGet(cellId, cellType, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取作品的评论列表。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 ### 返回: - 作品评论列表  # [English] ### Purpose: - Get the comment list of a post. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. ### Return: - Post comment list  # [示例/Example] cell_id = \"7411193113223371043\" cell_type = 1 offset = \"0\"
     * @summary 获取作品评论列表/Get post comment list
     * @param {string} cellId 作品id/Video id
     * @param {number} [cellType] 作品类型/Video type
     * @param {string} [offset] 翻页游标/Page cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchPostCommentListApiV1PipixiaAppFetchPostCommentListGet_9(cellId: string, cellType?: number, offset?: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchPostCommentListApiV1PipixiaAppFetchPostCommentListGet_9(cellId, cellType, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Video data  # [示例/Example] cell_id = \"7411193113223371043\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} cellId 作品id/Video id
     * @param {number} [cellType] 作品类型/Video type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchPostDetailApiV1PipixiaAppFetchPostDetailGet(cellId: string, cellType?: number, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchPostDetailApiV1PipixiaAppFetchPostDetailGet(cellId, cellType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据，支持图文、视频等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 - cell_type: 作品类型，1为视频，多大数保持默认值即可。 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, support photo, video, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. - cell_type: Video type, 1 for video, keep the default value for other types. ### Return: - Video data  # [示例/Example] cell_id = \"7411193113223371043\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} cellId 作品id/Video id
     * @param {number} [cellType] 作品类型/Video type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchPostDetailApiV1PipixiaAppFetchPostDetailGet_10(cellId: string, cellType?: number, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchPostDetailApiV1PipixiaAppFetchPostDetailGet_10(cellId, cellType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品的统计数据，如点赞数、评论数、转发数等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistics of a single post, such as the number of likes, comments, reposts, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. ### Return: - Post statistics  # [示例/Example] cell_id = \"7411193113223371043\"
     * @summary 获取作品统计数据/Get post statistics
     * @param {string} cellId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchPostStatisticsApiV1PipixiaAppFetchPostStatisticsGet(cellId: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchPostStatisticsApiV1PipixiaAppFetchPostStatisticsGet(cellId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品的统计数据，如点赞数、评论数、转发数等。 ### 参数: - cell_id: 作品id，可以从分享链接中获取。 ### 返回: - 作品统计数据  # [English] ### Purpose: - Get the statistics of a single post, such as the number of likes, comments, reposts, etc. ### Parameters: - cell_id: AKA video id, can be obtained from the share link. ### Return: - Post statistics  # [示例/Example] cell_id = \"7411193113223371043\"
     * @summary 获取作品统计数据/Get post statistics
     * @param {string} cellId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchPostStatisticsApiV1PipixiaAppFetchPostStatisticsGet_11(cellId: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchPostStatisticsApiV1PipixiaAppFetchPostStatisticsGet_11(cellId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索接口，支持搜索用户、作品等。 ### 参数: - keyword: 搜索关键词。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 - search_type: 搜索类型，可用值如下：     - 1: 综合     - 8: 热门     - 9: 新鲜     - 2：视频     - 3：图文     - 4：用户     - 5：话题 ### 返回: - 搜索结果  # [English] ### Purpose: - Search API, support search user, post, etc. ### Parameters: - keyword: Search keyword. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. - search_type: Search type, available values are as follows:     - 1: Comprehensive     - 8: Hot     - 9: Fresh     - 2: Video     - 3: Photo     - 4: User     - 5: Hashtag ### Return: - Search result  # [示例/Example] keyword = \"皮皮虾\" offset = \"0\" search_type = \"1\"
     * @summary 搜索接口/Search API
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {string} [offset] 翻页游标/Page cursor
     * @param {string} [searchType] 搜索类型/Search type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchSearchApiV1PipixiaAppFetchSearchGet(keyword: string, offset?: string, searchType?: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchSearchApiV1PipixiaAppFetchSearchGet(keyword, offset, searchType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索接口，支持搜索用户、作品等。 ### 参数: - keyword: 搜索关键词。 - offset: 翻页游标，默认为0，后续页码从上一页返回的 `offset` Key中获取对应值。 - search_type: 搜索类型，可用值如下：     - 1: 综合     - 8: 热门     - 9: 新鲜     - 2：视频     - 3：图文     - 4：用户     - 5：话题 ### 返回: - 搜索结果  # [English] ### Purpose: - Search API, support search user, post, etc. ### Parameters: - keyword: Search keyword. - offset: Page cursor, default is 0, get the corresponding value from the `offset` Key in the previous page. - search_type: Search type, available values are as follows:     - 1: Comprehensive     - 8: Hot     - 9: Fresh     - 2: Video     - 3: Photo     - 4: User     - 5: Hashtag ### Return: - Search result  # [示例/Example] keyword = \"皮皮虾\" offset = \"0\" search_type = \"1\"
     * @summary 搜索接口/Search API
     * @param {string} keyword 搜索关键词/Search keyword
     * @param {string} [offset] 翻页游标/Page cursor
     * @param {string} [searchType] 搜索类型/Search type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchSearchApiV1PipixiaAppFetchSearchGet_12(keyword: string, offset?: string, searchType?: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchSearchApiV1PipixiaAppFetchSearchGet_12(keyword, offset, searchType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成短连接。 ### 参数: - original_url: 原始链接，可以是任意链接。 ### 返回: - 短连接  # [English] ### Purpose: - Generate short URL. ### Parameters: - original_url: Original URL, can be any link. ### Return: - Short URL  # [示例/Example] original_url = \"https://h5.pipix.com/item/7385813877985909043\"
     * @summary 生成短连接/Generate short URL
     * @param {string} originalUrl 原始链接/Original URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchShortUrlApiV1PipixiaAppFetchShortUrlGet(originalUrl: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchShortUrlApiV1PipixiaAppFetchShortUrlGet(originalUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成短连接。 ### 参数: - original_url: 原始链接，可以是任意链接。 ### 返回: - 短连接  # [English] ### Purpose: - Generate short URL. ### Parameters: - original_url: Original URL, can be any link. ### Return: - Short URL  # [示例/Example] original_url = \"https://h5.pipix.com/item/7385813877985909043\"
     * @summary 生成短连接/Generate short URL
     * @param {string} originalUrl 原始链接/Original URL
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchShortUrlApiV1PipixiaAppFetchShortUrlGet_13(originalUrl: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchShortUrlApiV1PipixiaAppFetchShortUrlGet_13(originalUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的粉丝列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get user\'s follower list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User follower list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"
     * @summary 获取用户粉丝列表/Get user follower list
     * @param {string} userId 用户id/User id
     * @param {string} [cursor] 翻页游标/Page cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchUserFollowerListApiV1PipixiaAppFetchUserFollowerListGet(userId: string, cursor?: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchUserFollowerListApiV1PipixiaAppFetchUserFollowerListGet(userId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的粉丝列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Get user\'s follower list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User follower list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"
     * @summary 获取用户粉丝列表/Get user follower list
     * @param {string} userId 用户id/User id
     * @param {string} [cursor] 翻页游标/Page cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchUserFollowerListApiV1PipixiaAppFetchUserFollowerListGet_14(userId: string, cursor?: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchUserFollowerListApiV1PipixiaAppFetchUserFollowerListGet_14(userId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的关注列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get user\'s following list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User following list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"
     * @summary 获取用户关注列表/Get user following list
     * @param {string} userId 用户id/User id
     * @param {string} [cursor] 翻页游标/Page cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchUserFollowingListApiV1PipixiaAppFetchUserFollowingListGet(userId: string, cursor?: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchUserFollowingListApiV1PipixiaAppFetchUserFollowingListGet(userId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的关注列表。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Get user\'s following list. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. ### Return: - User following list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\"
     * @summary 获取用户关注列表/Get user following list
     * @param {string} userId 用户id/User id
     * @param {string} [cursor] 翻页游标/Page cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchUserFollowingListApiV1PipixiaAppFetchUserFollowingListGet_15(userId: string, cursor?: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchUserFollowingListApiV1PipixiaAppFetchUserFollowingListGet_15(userId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户信息，如昵称、性别、头像等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information, such as nickname and avatar. ### Parameters: - user_id: AKA user id, can be obtained from the share link. ### Return: - User information  # [示例/Example] user_id = \"1310254082831248\"
     * @summary 获取用户信息/Get user information
     * @param {string} userId 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchUserInfoApiV1PipixiaAppFetchUserInfoGet(userId: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchUserInfoApiV1PipixiaAppFetchUserInfoGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户信息，如昵称、性别、头像等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information, such as nickname and avatar. ### Parameters: - user_id: AKA user id, can be obtained from the share link. ### Return: - User information  # [示例/Example] user_id = \"1310254082831248\"
     * @summary 获取用户信息/Get user information
     * @param {string} userId 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchUserInfoApiV1PipixiaAppFetchUserInfoGet_16(userId: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchUserInfoApiV1PipixiaAppFetchUserInfoGet_16(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户作品列表，如视频、图文等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 ### 返回: - 用户作品列表  # [English] ### Purpose: - Get user post list, such as videos, photos, etc. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - User post list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\" feed_count = \"0\"
     * @summary 获取用户作品列表/Get user post list
     * @param {string} userId 用户id/User id
     * @param {string} [cursor] 翻页游标/Page cursor
     * @param {string} [feedCount] 翻页数量/Page count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchUserPostListApiV1PipixiaAppFetchUserPostListGet(userId: string, cursor?: string, feedCount?: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchUserPostListApiV1PipixiaAppFetchUserPostListGet(userId, cursor, feedCount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户作品列表，如视频、图文等。 ### 参数: - user_id: 用户id，可以从分享链接中获取。 - cursor: 翻页游标，默认为0，后续页码从上一页返回的 `loadmore_cursor` Key中获取对应值。 - feed_count: 翻页数量，默认为0，后续每次翻页加1，比如第一页为0，第二页为1，第三页为2，以此类推。 ### 返回: - 用户作品列表  # [English] ### Purpose: - Get user post list, such as videos, photos, etc. ### Parameters: - user_id: AKA user id, can be obtained from the share link. - cursor: Page cursor, default is 0, get the corresponding value from the `loadmore_cursor` Key in the previous page. - feed_count: Page count, default is 0, add 1 for each page, such as 0 for the first page, 1 for the second page, 2 for the third page, and so on. ### Return: - User post list  # [示例/Example] user_id = \"1310254082831248\" cursor = \"0\" feed_count = \"0\"
     * @summary 获取用户作品列表/Get user post list
     * @param {string} userId 用户id/User id
     * @param {string} [cursor] 翻页游标/Page cursor
     * @param {string} [feedCount] 翻页数量/Page count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PiPiXiaAppAPIApi
     */
    public fetchUserPostListApiV1PipixiaAppFetchUserPostListGet_17(userId: string, cursor?: string, feedCount?: string, options?: any) {
        return PiPiXiaAppAPIApiFp(this.configuration).fetchUserPostListApiV1PipixiaAppFetchUserPostListGet_17(userId, cursor, feedCount, options).then((request) => request(this.axios, this.basePath));
    }

}
