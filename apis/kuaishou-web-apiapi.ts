// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
/**
 * KuaishouWebAPIApi - axios parameter creator
 * @export
 */
export const KuaishouWebAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 根据链接获取单个作品数据 ### 参数: - url: 作品链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL ### Parameters: - url: Photo URL ### Returns: - Video data  # [示例/Example] url = \"https://v.kuaishou.com/GKTpYm\"
         * @summary 根据链接获取单个作品数据/Fetch single video by URL
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByUrlApiV1KuaishouWebFetchOneVideoByUrlGet: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling fetchOneVideoByUrlApiV1KuaishouWebFetchOneVideoByUrlGet.');
            }
            const localVarPath = `/api/v1/kuaishou/web/fetch_one_video_by_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据链接获取单个作品数据 ### 参数: - url: 作品链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL ### Parameters: - url: Photo URL ### Returns: - Video data  # [示例/Example] url = \"https://v.kuaishou.com/GKTpYm\"
         * @summary 根据链接获取单个作品数据/Fetch single video by URL
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByUrlApiV1KuaishouWebFetchOneVideoByUrlGet_1: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            if (url === null || url === undefined) {
                throw new RequiredError('url','Required parameter url was null or undefined when calling fetchOneVideoByUrlApiV1KuaishouWebFetchOneVideoByUrlGet_1.');
            }
            const localVarPath = `/api/v1/kuaishou/web/fetch_one_video_by_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 快手单一视频查询接口V2 ### 参数: - photo_id: 作品ID，作品ID可以从作品链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Kuaishou single video query API V2 ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the photo link ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"
         * @summary 快手单一视频查询接口V2/Kuaishou single video query API V2
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV2ApiV1KuaishouWebFetchOneVideoV2Get: async (photoId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'photoId' is not null or undefined
            if (photoId === null || photoId === undefined) {
                throw new RequiredError('photoId','Required parameter photoId was null or undefined when calling fetchOneVideoV2ApiV1KuaishouWebFetchOneVideoV2Get.');
            }
            const localVarPath = `/api/v1/kuaishou/web/fetch_one_video_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (photoId !== undefined) {
                localVarQueryParameter['photo_id'] = photoId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 快手单一视频查询接口V2 ### 参数: - photo_id: 作品ID，作品ID可以从作品链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Kuaishou single video query API V2 ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the photo link ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"
         * @summary 快手单一视频查询接口V2/Kuaishou single video query API V2
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV2ApiV1KuaishouWebFetchOneVideoV2Get_2: async (photoId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'photoId' is not null or undefined
            if (photoId === null || photoId === undefined) {
                throw new RequiredError('photoId','Required parameter photoId was null or undefined when calling fetchOneVideoV2ApiV1KuaishouWebFetchOneVideoV2Get_2.');
            }
            const localVarPath = `/api/v1/kuaishou/web/fetch_one_video_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (photoId !== undefined) {
                localVarQueryParameter['photo_id'] = photoId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KuaishouWebAPIApi - functional programming interface
 * @export
 */
export const KuaishouWebAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 根据链接获取单个作品数据 ### 参数: - url: 作品链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL ### Parameters: - url: Photo URL ### Returns: - Video data  # [示例/Example] url = \"https://v.kuaishou.com/GKTpYm\"
         * @summary 根据链接获取单个作品数据/Fetch single video by URL
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoByUrlApiV1KuaishouWebFetchOneVideoByUrlGet(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouWebAPIApiAxiosParamCreator(configuration).fetchOneVideoByUrlApiV1KuaishouWebFetchOneVideoByUrlGet(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据链接获取单个作品数据 ### 参数: - url: 作品链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL ### Parameters: - url: Photo URL ### Returns: - Video data  # [示例/Example] url = \"https://v.kuaishou.com/GKTpYm\"
         * @summary 根据链接获取单个作品数据/Fetch single video by URL
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoByUrlApiV1KuaishouWebFetchOneVideoByUrlGet_1(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouWebAPIApiAxiosParamCreator(configuration).fetchOneVideoByUrlApiV1KuaishouWebFetchOneVideoByUrlGet_1(url, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 快手单一视频查询接口V2 ### 参数: - photo_id: 作品ID，作品ID可以从作品链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Kuaishou single video query API V2 ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the photo link ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"
         * @summary 快手单一视频查询接口V2/Kuaishou single video query API V2
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoV2ApiV1KuaishouWebFetchOneVideoV2Get(photoId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouWebAPIApiAxiosParamCreator(configuration).fetchOneVideoV2ApiV1KuaishouWebFetchOneVideoV2Get(photoId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 快手单一视频查询接口V2 ### 参数: - photo_id: 作品ID，作品ID可以从作品链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Kuaishou single video query API V2 ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the photo link ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"
         * @summary 快手单一视频查询接口V2/Kuaishou single video query API V2
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoV2ApiV1KuaishouWebFetchOneVideoV2Get_2(photoId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouWebAPIApiAxiosParamCreator(configuration).fetchOneVideoV2ApiV1KuaishouWebFetchOneVideoV2Get_2(photoId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * KuaishouWebAPIApi - factory interface
 * @export
 */
export const KuaishouWebAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 根据链接获取单个作品数据 ### 参数: - url: 作品链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL ### Parameters: - url: Photo URL ### Returns: - Video data  # [示例/Example] url = \"https://v.kuaishou.com/GKTpYm\"
         * @summary 根据链接获取单个作品数据/Fetch single video by URL
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByUrlApiV1KuaishouWebFetchOneVideoByUrlGet(url: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouWebAPIApiFp(configuration).fetchOneVideoByUrlApiV1KuaishouWebFetchOneVideoByUrlGet(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据链接获取单个作品数据 ### 参数: - url: 作品链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL ### Parameters: - url: Photo URL ### Returns: - Video data  # [示例/Example] url = \"https://v.kuaishou.com/GKTpYm\"
         * @summary 根据链接获取单个作品数据/Fetch single video by URL
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByUrlApiV1KuaishouWebFetchOneVideoByUrlGet_1(url: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouWebAPIApiFp(configuration).fetchOneVideoByUrlApiV1KuaishouWebFetchOneVideoByUrlGet_1(url, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 快手单一视频查询接口V2 ### 参数: - photo_id: 作品ID，作品ID可以从作品链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Kuaishou single video query API V2 ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the photo link ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"
         * @summary 快手单一视频查询接口V2/Kuaishou single video query API V2
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV2ApiV1KuaishouWebFetchOneVideoV2Get(photoId: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouWebAPIApiFp(configuration).fetchOneVideoV2ApiV1KuaishouWebFetchOneVideoV2Get(photoId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 快手单一视频查询接口V2 ### 参数: - photo_id: 作品ID，作品ID可以从作品链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Kuaishou single video query API V2 ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the photo link ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"
         * @summary 快手单一视频查询接口V2/Kuaishou single video query API V2
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV2ApiV1KuaishouWebFetchOneVideoV2Get_2(photoId: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouWebAPIApiFp(configuration).fetchOneVideoV2ApiV1KuaishouWebFetchOneVideoV2Get_2(photoId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * KuaishouWebAPIApi - interface
 * @export
 * @interface KuaishouWebAPIApi
 */
export interface KuaishouWebAPIApiInterface {
    /**
     * # [中文] ### 用途: - 根据链接获取单个作品数据 ### 参数: - url: 作品链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL ### Parameters: - url: Photo URL ### Returns: - Video data  # [示例/Example] url = \"https://v.kuaishou.com/GKTpYm\"
     * @summary 根据链接获取单个作品数据/Fetch single video by URL
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouWebAPIApiInterface
     */
    fetchOneVideoByUrlApiV1KuaishouWebFetchOneVideoByUrlGet(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据链接获取单个作品数据 ### 参数: - url: 作品链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL ### Parameters: - url: Photo URL ### Returns: - Video data  # [示例/Example] url = \"https://v.kuaishou.com/GKTpYm\"
     * @summary 根据链接获取单个作品数据/Fetch single video by URL
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouWebAPIApiInterface
     */
    fetchOneVideoByUrlApiV1KuaishouWebFetchOneVideoByUrlGet_1(url: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 快手单一视频查询接口V2 ### 参数: - photo_id: 作品ID，作品ID可以从作品链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Kuaishou single video query API V2 ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the photo link ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"
     * @summary 快手单一视频查询接口V2/Kuaishou single video query API V2
     * @param {string} photoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouWebAPIApiInterface
     */
    fetchOneVideoV2ApiV1KuaishouWebFetchOneVideoV2Get(photoId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 快手单一视频查询接口V2 ### 参数: - photo_id: 作品ID，作品ID可以从作品链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Kuaishou single video query API V2 ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the photo link ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"
     * @summary 快手单一视频查询接口V2/Kuaishou single video query API V2
     * @param {string} photoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouWebAPIApiInterface
     */
    fetchOneVideoV2ApiV1KuaishouWebFetchOneVideoV2Get_2(photoId: string, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * KuaishouWebAPIApi - object-oriented interface
 * @export
 * @class KuaishouWebAPIApi
 * @extends {BaseAPI}
 */
export class KuaishouWebAPIApi extends BaseAPI implements KuaishouWebAPIApiInterface {
    /**
     * # [中文] ### 用途: - 根据链接获取单个作品数据 ### 参数: - url: 作品链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL ### Parameters: - url: Photo URL ### Returns: - Video data  # [示例/Example] url = \"https://v.kuaishou.com/GKTpYm\"
     * @summary 根据链接获取单个作品数据/Fetch single video by URL
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouWebAPIApi
     */
    public fetchOneVideoByUrlApiV1KuaishouWebFetchOneVideoByUrlGet(url: string, options?: any) {
        return KuaishouWebAPIApiFp(this.configuration).fetchOneVideoByUrlApiV1KuaishouWebFetchOneVideoByUrlGet(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据链接获取单个作品数据 ### 参数: - url: 作品链接 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL ### Parameters: - url: Photo URL ### Returns: - Video data  # [示例/Example] url = \"https://v.kuaishou.com/GKTpYm\"
     * @summary 根据链接获取单个作品数据/Fetch single video by URL
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouWebAPIApi
     */
    public fetchOneVideoByUrlApiV1KuaishouWebFetchOneVideoByUrlGet_1(url: string, options?: any) {
        return KuaishouWebAPIApiFp(this.configuration).fetchOneVideoByUrlApiV1KuaishouWebFetchOneVideoByUrlGet_1(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 快手单一视频查询接口V2 ### 参数: - photo_id: 作品ID，作品ID可以从作品链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Kuaishou single video query API V2 ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the photo link ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"
     * @summary 快手单一视频查询接口V2/Kuaishou single video query API V2
     * @param {string} photoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouWebAPIApi
     */
    public fetchOneVideoV2ApiV1KuaishouWebFetchOneVideoV2Get(photoId: string, options?: any) {
        return KuaishouWebAPIApiFp(this.configuration).fetchOneVideoV2ApiV1KuaishouWebFetchOneVideoV2Get(photoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 快手单一视频查询接口V2 ### 参数: - photo_id: 作品ID，作品ID可以从作品链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Kuaishou single video query API V2 ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the photo link ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"
     * @summary 快手单一视频查询接口V2/Kuaishou single video query API V2
     * @param {string} photoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouWebAPIApi
     */
    public fetchOneVideoV2ApiV1KuaishouWebFetchOneVideoV2Get_2(photoId: string, options?: any) {
        return KuaishouWebAPIApiFp(this.configuration).fetchOneVideoV2ApiV1KuaishouWebFetchOneVideoV2Get_2(photoId, options).then((request) => request(this.axios, this.basePath));
    }

}
