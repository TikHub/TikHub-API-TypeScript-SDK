// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
/**
 * TikTokAppV2APIApi - axios parameter creator
 * @export
 */
export const TikTokAppV2APIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 检测直播间是否在线 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"
         * @summary 检测直播间是否在线/Check if live room is online
         * @param {string} roomId 直播间id/Live room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet: async (roomId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/check_live_room_online`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 检测直播间是否在线 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"
         * @summary 检测直播间是否在线/Check if live room is online
         * @param {string} roomId 直播间id/Live room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet_1: async (roomId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet_1.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/check_live_room_online`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_general_search_result） | Get comprehensive search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_general_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet: async (keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_general_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_general_search_result） | Get comprehensive search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_general_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet_2: async (keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet_2.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_general_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet: async (chId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chId' is not null or undefined
            if (chId === null || chId === undefined) {
                throw new RequiredError('chId','Required parameter chId was null or undefined when calling fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_hashtag_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (chId !== undefined) {
                localVarQueryParameter['ch_id'] = chId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet_3: async (chId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chId' is not null or undefined
            if (chId === null || chId === undefined) {
                throw new RequiredError('chId','Required parameter chId was null or undefined when calling fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet_3.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_hashtag_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (chId !== undefined) {
                localVarQueryParameter['ch_id'] = chId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_hashtag_search_result） | Get hashtag search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_hashtag_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_hashtag_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_hashtag_search_result） | Get hashtag search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_hashtag_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet_4: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet_4.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_hashtag_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet: async (chId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chId' is not null or undefined
            if (chId === null || chId === undefined) {
                throw new RequiredError('chId','Required parameter chId was null or undefined when calling fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_hashtag_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (chId !== undefined) {
                localVarQueryParameter['ch_id'] = chId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet_5: async (chId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chId' is not null or undefined
            if (chId === null || chId === undefined) {
                throw new RequiredError('chId','Required parameter chId was null or undefined when calling fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet_5.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_hashtag_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (chId !== undefined) {
                localVarQueryParameter['ch_id'] = chId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data
         * @summary 获取主页视频推荐数据/Get home feed(recommend) video data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeFeedApiV1TiktokAppV2FetchHomeFeedGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_home_feed`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data
         * @summary 获取主页视频推荐数据/Get home feed(recommend) video data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeFeedApiV1TiktokAppV2FetchHomeFeedGet_6: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_home_feed`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"
         * @summary 获取直播间排行榜数据/Get live room ranking list
         * @param {string} roomId 直播间id/Live room id
         * @param {string} [anchorId] 主播id/Anchor id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet: async (roomId: string, anchorId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_live_ranking_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }

            if (anchorId !== undefined) {
                localVarQueryParameter['anchor_id'] = anchorId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"
         * @summary 获取直播间排行榜数据/Get live room ranking list
         * @param {string} roomId 直播间id/Live room id
         * @param {string} [anchorId] 主播id/Anchor id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet_7: async (roomId: string, anchorId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            if (roomId === null || roomId === undefined) {
                throw new RequiredError('roomId','Required parameter roomId was null or undefined when calling fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet_7.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_live_ranking_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (roomId !== undefined) {
                localVarQueryParameter['room_id'] = roomId;
            }

            if (anchorId !== undefined) {
                localVarQueryParameter['anchor_id'] = anchorId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_live_search_result） | Get live search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_live_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_live_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_live_search_result） | Get live search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_live_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet_8: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet_8.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_live_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet: async (musicId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_music_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet_9: async (musicId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet_9.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_music_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_music_search_result） | Get music search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_music_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_music_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_music_search_result） | Get music search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_music_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet_10: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet_10.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_music_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet: async (musicId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_music_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet_11: async (musicId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet_11.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_music_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_one_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet_12: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet_12.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_one_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet: async (shareUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareUrl' is not null or undefined
            if (shareUrl === null || shareUrl === undefined) {
                throw new RequiredError('shareUrl','Required parameter shareUrl was null or undefined when calling fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_one_video_by_share_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareUrl !== undefined) {
                localVarQueryParameter['share_url'] = shareUrl;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet_13: async (shareUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareUrl' is not null or undefined
            if (shareUrl === null || shareUrl === undefined) {
                throw new RequiredError('shareUrl','Required parameter shareUrl was null or undefined when calling fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet_13.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_one_video_by_share_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareUrl !== undefined) {
                localVarQueryParameter['share_url'] = shareUrl;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的粉丝列表数据/Get follower list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet: async (secUserId: string, count?: number, minTime?: number, pageToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_user_follower_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (minTime !== undefined) {
                localVarQueryParameter['min_time'] = minTime;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的粉丝列表数据/Get follower list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet_14: async (secUserId: string, count?: number, minTime?: number, pageToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet_14.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_user_follower_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (minTime !== undefined) {
                localVarQueryParameter['min_time'] = minTime;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的关注列表数据/Get following list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet: async (secUserId: string, count?: number, minTime?: number, pageToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_user_following_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (minTime !== undefined) {
                localVarQueryParameter['min_time'] = minTime;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的关注列表数据/Get following list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet_15: async (secUserId: string, count?: number, minTime?: number, pageToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet_15.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_user_following_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (minTime !== undefined) {
                localVarQueryParameter['min_time'] = minTime;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['page_token'] = pageToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet: async (secUserId: string, maxCursor?: number, counts?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_user_like_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (counts !== undefined) {
                localVarQueryParameter['counts'] = counts;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet_16: async (secUserId: string, maxCursor?: number, counts?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet_16.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_user_like_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (counts !== undefined) {
                localVarQueryParameter['counts'] = counts;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet: async (secUserId: string, maxCursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_user_post_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet_17: async (secUserId: string, maxCursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet_17.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_user_post_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"
         * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_user_search_result） | Get user search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_user_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [userSearchFollowerCount] 根据粉丝数排序/Sort by number of followers
         * @param {string} [userSearchProfileType] 根据账号类型排序/Sort by account type
         * @param {string} [userSearchOtherPref] 根据其他偏好排序/Sort by other preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet: async (keyword: string, offset?: number, count?: number, userSearchFollowerCount?: string, userSearchProfileType?: string, userSearchOtherPref?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_user_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (userSearchFollowerCount !== undefined) {
                localVarQueryParameter['user_search_follower_count'] = userSearchFollowerCount;
            }

            if (userSearchProfileType !== undefined) {
                localVarQueryParameter['user_search_profile_type'] = userSearchProfileType;
            }

            if (userSearchOtherPref !== undefined) {
                localVarQueryParameter['user_search_other_pref'] = userSearchOtherPref;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"
         * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_user_search_result） | Get user search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_user_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [userSearchFollowerCount] 根据粉丝数排序/Sort by number of followers
         * @param {string} [userSearchProfileType] 根据账号类型排序/Sort by account type
         * @param {string} [userSearchOtherPref] 根据其他偏好排序/Sort by other preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet_18: async (keyword: string, offset?: number, count?: number, userSearchFollowerCount?: string, userSearchProfileType?: string, userSearchOtherPref?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet_18.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_user_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (userSearchFollowerCount !== undefined) {
                localVarQueryParameter['user_search_follower_count'] = userSearchFollowerCount;
            }

            if (userSearchProfileType !== undefined) {
                localVarQueryParameter['user_search_profile_type'] = userSearchProfileType;
            }

            if (userSearchOtherPref !== undefined) {
                localVarQueryParameter['user_search_other_pref'] = userSearchOtherPref;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet: async (awemeId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_video_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet_19: async (awemeId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet_19.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_video_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet: async (itemId: string, commentId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_video_comment_replies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet_20: async (itemId: string, commentId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet_20.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet_20.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_video_comment_replies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_video_search_result） | Get video search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_video_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet: async (keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_video_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_video_search_result） | Get video search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_video_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet_21: async (keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet_21.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/fetch_video_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet: async (secUserId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/handler_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet_22: async (secUserId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet_22.');
            }
            const localVarPath = `/api/v1/tiktok/app/v2/handler_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TikTokAppV2APIApi - functional programming interface
 * @export
 */
export const TikTokAppV2APIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 检测直播间是否在线 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"
         * @summary 检测直播间是否在线/Check if live room is online
         * @param {string} roomId 直播间id/Live room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet(roomId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet(roomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 检测直播间是否在线 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"
         * @summary 检测直播间是否在线/Check if live room is online
         * @param {string} roomId 直播间id/Live room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet_1(roomId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet_1(roomId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_general_search_result） | Get comprehensive search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_general_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet(keyword, offset, count, sortType, publishTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_general_search_result） | Get comprehensive search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_general_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet_2(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet_2(keyword, offset, count, sortType, publishTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet(chId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet(chId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet_3(chId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet_3(chId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_hashtag_search_result） | Get hashtag search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_hashtag_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_hashtag_search_result） | Get hashtag search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_hashtag_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet_4(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet_4(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet(chId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet(chId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet_5(chId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet_5(chId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data
         * @summary 获取主页视频推荐数据/Get home feed(recommend) video data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHomeFeedApiV1TiktokAppV2FetchHomeFeedGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchHomeFeedApiV1TiktokAppV2FetchHomeFeedGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data
         * @summary 获取主页视频推荐数据/Get home feed(recommend) video data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHomeFeedApiV1TiktokAppV2FetchHomeFeedGet_6(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchHomeFeedApiV1TiktokAppV2FetchHomeFeedGet_6(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"
         * @summary 获取直播间排行榜数据/Get live room ranking list
         * @param {string} roomId 直播间id/Live room id
         * @param {string} [anchorId] 主播id/Anchor id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet(roomId: string, anchorId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet(roomId, anchorId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"
         * @summary 获取直播间排行榜数据/Get live room ranking list
         * @param {string} roomId 直播间id/Live room id
         * @param {string} [anchorId] 主播id/Anchor id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet_7(roomId: string, anchorId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet_7(roomId, anchorId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_live_search_result） | Get live search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_live_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_live_search_result） | Get live search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_live_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet_8(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet_8(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet(musicId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet(musicId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet_9(musicId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet_9(musicId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_music_search_result） | Get music search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_music_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_music_search_result） | Get music search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_music_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet_10(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet_10(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet(musicId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet(musicId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet_11(musicId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet_11(musicId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet_12(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet_12(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet(shareUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet(shareUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet_13(shareUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet_13(shareUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的粉丝列表数据/Get follower list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet(secUserId, count, minTime, pageToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的粉丝列表数据/Get follower list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet_14(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet_14(secUserId, count, minTime, pageToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的关注列表数据/Get following list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet(secUserId, count, minTime, pageToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的关注列表数据/Get following list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet_15(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet_15(secUserId, count, minTime, pageToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet(secUserId, maxCursor, counts, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet_16(secUserId: string, maxCursor?: number, counts?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet_16(secUserId, maxCursor, counts, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet(secUserId: string, maxCursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet(secUserId, maxCursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet_17(secUserId: string, maxCursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet_17(secUserId, maxCursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"
         * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_user_search_result） | Get user search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_user_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [userSearchFollowerCount] 根据粉丝数排序/Sort by number of followers
         * @param {string} [userSearchProfileType] 根据账号类型排序/Sort by account type
         * @param {string} [userSearchOtherPref] 根据其他偏好排序/Sort by other preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet(keyword: string, offset?: number, count?: number, userSearchFollowerCount?: string, userSearchProfileType?: string, userSearchOtherPref?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet(keyword, offset, count, userSearchFollowerCount, userSearchProfileType, userSearchOtherPref, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"
         * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_user_search_result） | Get user search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_user_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [userSearchFollowerCount] 根据粉丝数排序/Sort by number of followers
         * @param {string} [userSearchProfileType] 根据账号类型排序/Sort by account type
         * @param {string} [userSearchOtherPref] 根据其他偏好排序/Sort by other preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet_18(keyword: string, offset?: number, count?: number, userSearchFollowerCount?: string, userSearchProfileType?: string, userSearchOtherPref?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet_18(keyword, offset, count, userSearchFollowerCount, userSearchProfileType, userSearchOtherPref, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet(awemeId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet_19(awemeId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet_19(awemeId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet(itemId, commentId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet_20(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet_20(itemId, commentId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_video_search_result） | Get video search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_video_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet(keyword, offset, count, sortType, publishTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_video_search_result） | Get video search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_video_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet_21(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet_21(keyword, offset, count, sortType, publishTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet(secUserId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet(secUserId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet_22(secUserId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TikTokAppV2APIApiAxiosParamCreator(configuration).handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet_22(secUserId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TikTokAppV2APIApi - factory interface
 * @export
 */
export const TikTokAppV2APIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 检测直播间是否在线 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"
         * @summary 检测直播间是否在线/Check if live room is online
         * @param {string} roomId 直播间id/Live room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet(roomId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 检测直播间是否在线 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"
         * @summary 检测直播间是否在线/Check if live room is online
         * @param {string} roomId 直播间id/Live room id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet_1(roomId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet_1(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_general_search_result） | Get comprehensive search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_general_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet(keyword, offset, count, sortType, publishTime, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_general_search_result） | Get comprehensive search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_general_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet_2(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet_2(keyword, offset, count, sortType, publishTime, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet(chId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet(chId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet_3(chId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet_3(chId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_hashtag_search_result） | Get hashtag search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_hashtag_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_hashtag_search_result） | Get hashtag search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_hashtag_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet_4(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet_4(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet(chId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet(chId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {string} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet_5(chId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet_5(chId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data
         * @summary 获取主页视频推荐数据/Get home feed(recommend) video data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeFeedApiV1TiktokAppV2FetchHomeFeedGet(options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchHomeFeedApiV1TiktokAppV2FetchHomeFeedGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data
         * @summary 获取主页视频推荐数据/Get home feed(recommend) video data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHomeFeedApiV1TiktokAppV2FetchHomeFeedGet_6(options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchHomeFeedApiV1TiktokAppV2FetchHomeFeedGet_6(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"
         * @summary 获取直播间排行榜数据/Get live room ranking list
         * @param {string} roomId 直播间id/Live room id
         * @param {string} [anchorId] 主播id/Anchor id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet(roomId: string, anchorId?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet(roomId, anchorId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"
         * @summary 获取直播间排行榜数据/Get live room ranking list
         * @param {string} roomId 直播间id/Live room id
         * @param {string} [anchorId] 主播id/Anchor id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet_7(roomId: string, anchorId?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet_7(roomId, anchorId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_live_search_result） | Get live search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_live_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_live_search_result） | Get live search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_live_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet_8(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet_8(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet(musicId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet(musicId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet_9(musicId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet_9(musicId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_music_search_result） | Get music search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_music_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_music_search_result） | Get music search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_music_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet_10(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet_10(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet(musicId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet(musicId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet_11(musicId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet_11(musicId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet_12(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet_12(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet(shareUrl: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet(shareUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet_13(shareUrl: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet_13(shareUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的粉丝列表数据/Get follower list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet(secUserId, count, minTime, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的粉丝列表数据/Get follower list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet_14(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet_14(secUserId, count, minTime, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的关注列表数据/Get following list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet(secUserId, count, minTime, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
         * @summary 获取指定用户的关注列表数据/Get following list of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [count] 数量/Number
         * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
         * @param {string} [pageToken] 翻页token/Page token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet_15(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet_15(secUserId, count, minTime, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet(secUserId, maxCursor, counts, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet_16(secUserId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet_16(secUserId, maxCursor, counts, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet(secUserId: string, maxCursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet(secUserId, maxCursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet_17(secUserId: string, maxCursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet_17(secUserId, maxCursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"
         * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_user_search_result） | Get user search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_user_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [userSearchFollowerCount] 根据粉丝数排序/Sort by number of followers
         * @param {string} [userSearchProfileType] 根据账号类型排序/Sort by account type
         * @param {string} [userSearchOtherPref] 根据其他偏好排序/Sort by other preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet(keyword: string, offset?: number, count?: number, userSearchFollowerCount?: string, userSearchProfileType?: string, userSearchOtherPref?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet(keyword, offset, count, userSearchFollowerCount, userSearchProfileType, userSearchOtherPref, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"
         * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_user_search_result） | Get user search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_user_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {string} [userSearchFollowerCount] 根据粉丝数排序/Sort by number of followers
         * @param {string} [userSearchProfileType] 根据账号类型排序/Sort by account type
         * @param {string} [userSearchOtherPref] 根据其他偏好排序/Sort by other preferences
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet_18(keyword: string, offset?: number, count?: number, userSearchFollowerCount?: string, userSearchProfileType?: string, userSearchOtherPref?: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet_18(keyword, offset, count, userSearchFollowerCount, userSearchProfileType, userSearchOtherPref, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet(awemeId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet_19(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet_19(awemeId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet(itemId, commentId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet_20(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet_20(itemId, commentId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_video_search_result） | Get video search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_video_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet(keyword, offset, count, sortType, publishTime, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_video_search_result） | Get video search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_video_search_result)
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet_21(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet_21(keyword, offset, count, sortType, publishTime, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet(secUserId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet(secUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet_22(secUserId: string, options?: any): AxiosPromise<ResponseModel> {
            return TikTokAppV2APIApiFp(configuration).handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet_22(secUserId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TikTokAppV2APIApi - interface
 * @export
 * @interface TikTokAppV2APIApi
 */
export interface TikTokAppV2APIApiInterface {
    /**
     * # [中文] ### 用途: - 检测直播间是否在线 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"
     * @summary 检测直播间是否在线/Check if live room is online
     * @param {string} roomId 直播间id/Live room id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet(roomId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 检测直播间是否在线 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"
     * @summary 检测直播间是否在线/Check if live room is online
     * @param {string} roomId 直播间id/Live room id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet_1(roomId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_general_search_result） | Get comprehensive search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_general_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_general_search_result） | Get comprehensive search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_general_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet_2(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"
     * @summary 获取指定话题的详情数据/Get details of specified hashtag
     * @param {string} chId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet(chId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"
     * @summary 获取指定话题的详情数据/Get details of specified hashtag
     * @param {string} chId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet_3(chId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_hashtag_search_result） | Get hashtag search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_hashtag_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_hashtag_search_result） | Get hashtag search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_hashtag_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet_4(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10
     * @summary 获取指定话题的作品数据/Get video list of specified hashtag
     * @param {string} chId 话题id/Hashtag id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet(chId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10
     * @summary 获取指定话题的作品数据/Get video list of specified hashtag
     * @param {string} chId 话题id/Hashtag id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet_5(chId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data
     * @summary 获取主页视频推荐数据/Get home feed(recommend) video data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchHomeFeedApiV1TiktokAppV2FetchHomeFeedGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data
     * @summary 获取主页视频推荐数据/Get home feed(recommend) video data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchHomeFeedApiV1TiktokAppV2FetchHomeFeedGet_6(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"
     * @summary 获取直播间排行榜数据/Get live room ranking list
     * @param {string} roomId 直播间id/Live room id
     * @param {string} [anchorId] 主播id/Anchor id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet(roomId: string, anchorId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"
     * @summary 获取直播间排行榜数据/Get live room ranking list
     * @param {string} roomId 直播间id/Live room id
     * @param {string} [anchorId] 主播id/Anchor id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet_7(roomId: string, anchorId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_live_search_result） | Get live search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_live_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_live_search_result） | Get live search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_live_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet_8(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"
     * @summary 获取指定音乐的详情数据/Get details of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet(musicId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"
     * @summary 获取指定音乐的详情数据/Get details of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet_9(musicId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_music_search_result） | Get music search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_music_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_music_search_result） | Get music search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_music_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet_10(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10
     * @summary 获取指定音乐的视频列表数据/Get video list of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet(musicId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10
     * @summary 获取指定音乐的视频列表数据/Get video list of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet_11(musicId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet_12(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet(shareUrl: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet_13(shareUrl: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
     * @summary 获取指定用户的粉丝列表数据/Get follower list of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [count] 数量/Number
     * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
     * @param {string} [pageToken] 翻页token/Page token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
     * @summary 获取指定用户的粉丝列表数据/Get follower list of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [count] 数量/Number
     * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
     * @param {string} [pageToken] 翻页token/Page token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet_14(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
     * @summary 获取指定用户的关注列表数据/Get following list of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [count] 数量/Number
     * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
     * @param {string} [pageToken] 翻页token/Page token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
     * @summary 获取指定用户的关注列表数据/Get following list of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [count] 数量/Number
     * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
     * @param {string} [pageToken] 翻页token/Page token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet_15(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet_16(secUserId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet(secUserId: string, maxCursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet_17(secUserId: string, maxCursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"
     * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_user_search_result） | Get user search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_user_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [userSearchFollowerCount] 根据粉丝数排序/Sort by number of followers
     * @param {string} [userSearchProfileType] 根据账号类型排序/Sort by account type
     * @param {string} [userSearchOtherPref] 根据其他偏好排序/Sort by other preferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet(keyword: string, offset?: number, count?: number, userSearchFollowerCount?: string, userSearchProfileType?: string, userSearchOtherPref?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"
     * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_user_search_result） | Get user search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_user_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [userSearchFollowerCount] 根据粉丝数排序/Sort by number of followers
     * @param {string} [userSearchProfileType] 根据账号类型排序/Sort by account type
     * @param {string} [userSearchOtherPref] 根据其他偏好排序/Sort by other preferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet_18(keyword: string, offset?: number, count?: number, userSearchFollowerCount?: string, userSearchProfileType?: string, userSearchOtherPref?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet_19(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet_20(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_video_search_result） | Get video search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_video_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_video_search_result） | Get video search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_video_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet_21(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet(secUserId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApiInterface
     */
    handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet_22(secUserId: string, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * TikTokAppV2APIApi - object-oriented interface
 * @export
 * @class TikTokAppV2APIApi
 * @extends {BaseAPI}
 */
export class TikTokAppV2APIApi extends BaseAPI implements TikTokAppV2APIApiInterface {
    /**
     * # [中文] ### 用途: - 检测直播间是否在线 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"
     * @summary 检测直播间是否在线/Check if live room is online
     * @param {string} roomId 直播间id/Live room id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet(roomId: string, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 检测直播间是否在线 ### 参数: - room_id: 直播间id ### 返回: - 是否在线  # [English] ### Purpose: - Check if live room is online ### Parameters: - room_id: Live room id ### Return: - Whether online  # [示例/Example] room_id = \"7358603858249009962\"
     * @summary 检测直播间是否在线/Check if live room is online
     * @param {string} roomId 直播间id/Live room id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet_1(roomId: string, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).checkLiveRoomOnlineApiV1TiktokAppV2CheckLiveRoomOnlineGet_1(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_general_search_result） | Get comprehensive search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_general_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet(keyword, offset, count, sortType, publishTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的综合搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_general_search_result） | Get comprehensive search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_general_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet_2(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchGeneralSearchResultApiV1TiktokAppV2FetchGeneralSearchResultGet_2(keyword, offset, count, sortType, publishTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"
     * @summary 获取指定话题的详情数据/Get details of specified hashtag
     * @param {string} chId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet(chId: string, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet(chId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = \"7551\"
     * @summary 获取指定话题的详情数据/Get details of specified hashtag
     * @param {string} chId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet_3(chId: string, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchHashtagDetailApiV1TiktokAppV2FetchHashtagDetailGet_3(chId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_hashtag_search_result） | Get hashtag search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_hashtag_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet(keyword: string, offset?: number, count?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Hashtag search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的话题搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_hashtag_search_result） | Get hashtag search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_hashtag_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet_4(keyword: string, offset?: number, count?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchHashtagSearchResultApiV1TiktokAppV2FetchHashtagSearchResultGet_4(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10
     * @summary 获取指定话题的作品数据/Get video list of specified hashtag
     * @param {string} chId 话题id/Hashtag id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet(chId: string, cursor?: number, count?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet(chId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Hashtag video list data  # [示例/Example] ch_id = \"7551\" cursor = 0 sort_type = 0 count = 10
     * @summary 获取指定话题的作品数据/Get video list of specified hashtag
     * @param {string} chId 话题id/Hashtag id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet_5(chId: string, cursor?: number, count?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchHashtagVideoListApiV1TiktokAppV2FetchHashtagVideoListGet_5(chId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data
     * @summary 获取主页视频推荐数据/Get home feed(recommend) video data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchHomeFeedApiV1TiktokAppV2FetchHomeFeedGet(options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchHomeFeedApiV1TiktokAppV2FetchHomeFeedGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取主页视频推荐数据 ### 参数: - 无 ### 返回: - 视频推荐数据  # [English] ### Purpose: - Get home feed(recommend) video data ### Parameters: - None ### Return: - Video recommend data
     * @summary 获取主页视频推荐数据/Get home feed(recommend) video data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchHomeFeedApiV1TiktokAppV2FetchHomeFeedGet_6(options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchHomeFeedApiV1TiktokAppV2FetchHomeFeedGet_6(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"
     * @summary 获取直播间排行榜数据/Get live room ranking list
     * @param {string} roomId 直播间id/Live room id
     * @param {string} [anchorId] 主播id/Anchor id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet(roomId: string, anchorId?: string, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet(roomId, anchorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取直播间内观众的排行榜数据 ### 参数: - room_id: 直播间id - anchor_id: 主播id ### 返回: - 排行榜数据  # [English] ### Purpose: - Get ranking list of audience in live room ### Parameters: - room_id: Live room id - anchor_id: Anchor id ### Return: - Ranking list data  # [示例/Example] room_id = \"7358603858249009962\" anchor_id = \"7222941468722758702\"
     * @summary 获取直播间排行榜数据/Get live room ranking list
     * @param {string} roomId 直播间id/Live room id
     * @param {string} [anchorId] 主播id/Anchor id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet_7(roomId: string, anchorId?: string, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchLiveRankingListApiV1TiktokAppV2FetchLiveRankingListGet_7(roomId, anchorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_live_search_result） | Get live search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_live_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet(keyword: string, offset?: number, count?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的直播搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 直播搜索结果  # [English] ### Purpose: - Get live search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Live search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的直播搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_live_search_result） | Get live search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_live_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet_8(keyword: string, offset?: number, count?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchLiveSearchResultApiV1TiktokAppV2FetchLiveSearchResultGet_8(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"
     * @summary 获取指定音乐的详情数据/Get details of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet(musicId: string, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet(musicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"6943027371519772674\"
     * @summary 获取指定音乐的详情数据/Get details of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet_9(musicId: string, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchMusicDetailApiV1TiktokAppV2FetchMusicDetailGet_9(musicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_music_search_result） | Get music search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_music_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet(keyword: string, offset?: number, count?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number ### Return: - Music search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20
     * @summary 获取指定关键词的音乐搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_music_search_result） | Get music search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_music_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet_10(keyword: string, offset?: number, count?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchMusicSearchResultApiV1TiktokAppV2FetchMusicSearchResultGet_10(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10
     * @summary 获取指定音乐的视频列表数据/Get video list of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet(musicId: string, cursor?: number, count?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet(musicId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Music video list data  # [示例/Example] music_id = \"6943027371519772674\" cursor = 0 count = 10
     * @summary 获取指定音乐的视频列表数据/Get video list of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet_11(musicId: string, cursor?: number, count?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchMusicVideoListApiV1TiktokAppV2FetchMusicVideoListGet_11(musicId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet(awemeId: string, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7350810998023949599\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet_12(awemeId: string, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchOneVideoApiV1TiktokAppV2FetchOneVideoGet_12(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet(shareUrl: string, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet(shareUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://www.tiktok.com/t/ZTFNEj8Hk/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet_13(shareUrl: string, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchOneVideoByShareUrlApiV1TiktokAppV2FetchOneVideoByShareUrlGet_13(shareUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
     * @summary 获取指定用户的粉丝列表数据/Get follower list of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [count] 数量/Number
     * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
     * @param {string} [pageToken] 翻页token/Page token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet(secUserId, count, minTime, pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的粉丝列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 粉丝列表数据  # [English] ### Purpose: - Get follower list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Follower list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 40 min_time = 1719570100 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE5NTcwMTg3LCJtaW5fY3Vyc29yIjoxNzE5NTcwMTAwLCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
     * @summary 获取指定用户的粉丝列表数据/Get follower list of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [count] 数量/Number
     * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
     * @param {string} [pageToken] 翻页token/Page token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet_14(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchUserFollowerListApiV1TiktokAppV2FetchUserFollowerListGet_14(secUserId, count, minTime, pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
     * @summary 获取指定用户的关注列表数据/Get following list of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [count] 数量/Number
     * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
     * @param {string} [pageToken] 翻页token/Page token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet(secUserId, count, minTime, pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的关注列表数据 ### 参数: - sec_user_id: 用户sec_user_id - count: 数量 - min_time: 最小时间，用于翻页，第一次请求使用默认值0，后续请求使用上一次请求返回的min_time值。 - page_token: 翻页token，第一次请求使用默认值\"\"，后续请求使用上一次请求返回的page_token值。 ### 返回: - 关注列表数据  # [English] ### Purpose: - Get following list of specified user ### Parameters: - sec_user_id: User sec_user_id - count: Number - min_time: Minimum time for paging, use default value 0 for the first request, and use the min_time value returned by the last request for subsequent requests. - page_token: Page token, use default value \"\" for the first request, and use the page_token value returned by the last request for subsequent requests. ### Return: - Following list data  # [示例/Example] sec_user = \"MS4wLjABAAAAXqqA-cLDC0hfQPIrS5APYNsg04zkl-socWCkqkI3UIOaEe6_Qnokg0GcWpLnMNQP\" count = 20 min_time = 1639642146 page_token = \"eyJtYXhfY3Vyc29yIjoxNzE4NzIzNTY0LCJtaW5fY3Vyc29yIjoxNjM5NjQyMTQ2LCJmaW5pc2hfaW5zZXJ0X21hZiI6dHJ1ZX0=\"
     * @summary 获取指定用户的关注列表数据/Get following list of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [count] 数量/Number
     * @param {number} [minTime] 最小时间，用于翻页/Minimum time for paging
     * @param {string} [pageToken] 翻页token/Page token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet_15(secUserId: string, count?: number, minTime?: number, pageToken?: string, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchUserFollowingListApiV1TiktokAppV2FetchUserFollowingListGet_15(secUserId, count, minTime, pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet(secUserId, maxCursor, counts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet_16(secUserId: string, maxCursor?: number, counts?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchUserLikeVideosApiV1TiktokAppV2FetchUserLikeVideosGet_16(secUserId, maxCursor, counts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet(secUserId: string, maxCursor?: number, count?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet(secUserId, maxCursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAA5u9HhzjGAj-leViCcvZD6b4-qyqHHgr9lVJmcPMzcBUX_Q2NpBeCgz8Uh6KugkfS\" max_cursor = 0 counts = 20
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet_17(secUserId: string, maxCursor?: number, count?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchUserPostVideosApiV1TiktokAppV2FetchUserPostVideosGet_17(secUserId, maxCursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"
     * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_user_search_result） | Get user search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_user_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [userSearchFollowerCount] 根据粉丝数排序/Sort by number of followers
     * @param {string} [userSearchProfileType] 根据账号类型排序/Sort by account type
     * @param {string} [userSearchOtherPref] 根据其他偏好排序/Sort by other preferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet(keyword: string, offset?: number, count?: number, userSearchFollowerCount?: string, userSearchProfileType?: string, userSearchOtherPref?: string, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet(keyword, offset, count, userSearchFollowerCount, userSearchProfileType, userSearchOtherPref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - user_search_follower_count（根据粉丝数排序）:     - 空-不限制，     - ZERO_TO_ONE_K = 0-1K，     - ONE_K_TO_TEN_K-1K = 1K-10K，     - TEN_K_TO_ONE_H_K = 10K-100K，     - ONE_H_K_PLUS = 100K以上 - user_search_profile_type（根据账号类型排序）:     - 空-不限制，     - VERIFIED = 认证用户 - user_search_other_pref（根据其他偏好排序）:     - USERNAME = 根据用户名相关性 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - user_search_follower_count（Sort by number of followers）:     - Empty-Unlimited,     - ZERO_TO_ONE_K = 0-1K,     - ONE_K_TO_TEN_K-1K = 1K-10K,     - TEN_K_TO_ONE_H_K = 10K-100K,     - ONE_H_K_PLUS = 100K and above - user_search_profile_type（Sort by account type）:     - Empty-Unlimited,     - VERIFIED = Verified user - user_search_other_pref（Sort by other preferences）:     - USERNAME = Sort by username relevance ### Return: - User search results  # [示例/Example] keyword = \"Cat\" offset = 0 count = 20 user_search_follower_count = \"\" user_search_profile_type = \"\" user_search_other_pref = \"\"
     * @summary 获取指定关键词的用户搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_user_search_result） | Get user search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_user_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {string} [userSearchFollowerCount] 根据粉丝数排序/Sort by number of followers
     * @param {string} [userSearchProfileType] 根据账号类型排序/Sort by account type
     * @param {string} [userSearchOtherPref] 根据其他偏好排序/Sort by other preferences
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet_18(keyword: string, offset?: number, count?: number, userSearchFollowerCount?: string, userSearchProfileType?: string, userSearchOtherPref?: string, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchUserSearchResultApiV1TiktokAppV2FetchUserSearchResultGet_18(keyword, offset, count, userSearchFollowerCount, userSearchProfileType, userSearchOtherPref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet(awemeId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comments data  # [示例/Example] aweme_id = \"7326156045968067873\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet_19(awemeId: string, cursor?: number, count?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchVideoCommentsApiV1TiktokAppV2FetchVideoCommentsGet_19(awemeId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet(itemId, commentId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7326156045968067873\" comment_id = \"7327061675382260482\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet_20(itemId: string, commentId: string, cursor?: number, count?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchVideoCommentsReplyApiV1TiktokAppV2FetchVideoCommentRepliesGet_20(itemId, commentId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_video_search_result） | Get video search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_video_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet(keyword, offset, count, sortType, publishTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量 - sort_type: 0-相关度，1-最多点赞 - publish_time: 0-不限制，1-最近一天，7-最近一周，30-最近一个月，90-最近三个月，180-最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number - sort_type: 0-Relatedness, 1-Most likes - publish_time: 0-Unlimited, 1-Last day, 7-Last week, 30-Last month, 90-Last three months, 180-Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的视频搜索结果（弃用，替代接口：/api/v1/tiktok/app/v3/fetch_video_search_result） | Get video search results of specified keywords (deprecated, replaced by interface: /api/v1/tiktok/app/v3/fetch_video_search_result)
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet_21(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).fetchVideoSearchResultApiV1TiktokAppV2FetchVideoSearchResultGet_21(keyword, offset, count, sortType, publishTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet(secUserId: string, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet(secUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAv7iSuuXDJGDvJkmH_vz1qkDZYo1apxgzaxdBSeIuPiM\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TikTokAppV2APIApi
     */
    public handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet_22(secUserId: string, options?: any) {
        return TikTokAppV2APIApiFp(this.configuration).handlerUserProfileApiV1TiktokAppV2HandlerUserProfileGet_22(secUserId, options).then((request) => request(this.axios, this.basePath));
    }

}
