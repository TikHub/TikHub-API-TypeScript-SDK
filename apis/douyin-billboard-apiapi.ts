// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BodyFetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost } from '../models';
// @ts-ignore
import { BodyFetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost } from '../models';
// @ts-ignore
import { BodyFetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost } from '../models';
// @ts-ignore
import { BodyFetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost } from '../models';
// @ts-ignore
import { BodyFetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost } from '../models';
// @ts-ignore
import { BodyFetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost } from '../models';
// @ts-ignore
import { BodyFetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost } from '../models';
// @ts-ignore
import { BodyFetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost } from '../models';
// @ts-ignore
import { BodyFetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost } from '../models';
// @ts-ignore
import { BodyFetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost } from '../models';
// @ts-ignore
import { BodyFetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost } from '../models';
// @ts-ignore
import { BodyFetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost } from '../models';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
// @ts-ignore
import { UNKNOWN_BASE_TYPE } from '../models';
/**
 * DouyinBillboardAPIApi - axios parameter creator
 * @export
 */
export const DouyinBillboardAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取城市列表 ### 参数: - 无 ### 返回: - 中国城市列表  # [English] ### Purpose: - Get city list ### Parameters: - None ### Return: - Chinese city list
         * @summary 获取中国城市列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCityListApiV1DouyinBillboardFetchCityListGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_city_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取城市列表 ### 参数: - 无 ### 返回: - 中国城市列表  # [English] ### Purpose: - Get city list ### Parameters: - None ### Return: - Chinese city list
         * @summary 获取中国城市列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCityListApiV1DouyinBillboardFetchCityListGet_1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_city_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取垂类内容标签 ### 参数: - 无 ### 返回: - 垂类内容标签 ### 注意: - 该接口用于获取垂类内容标签，用于query_tag参数构建 ### 示例: 已知顶级垂类内容标签 `美食`，它的顶级垂类id为 `628`；`美食` 的子垂类标签 `品酒教学`，它的子垂类id为 `62802`。 那么构建标签查询参数为 `{\"value\": 628, \"children\": [{\"value\": 62808}]}`  如果需要多个子垂类标签，所有的美食子垂类标签为 `{\"value\":628,\"children\":[{\"value\":62808},{\"value\":62804},{\"value\":62806},{\"value\":62803},{\"value\":62802},{\"value\":62801},{\"value\":62811},{\"value\":62807},{\"value\":62805},{\"value\":62810}]}`  # [English] ### Purpose: - Get vertical content tags ### Parameters: - None ### Return: - Vertical content tags ### Note: - This interface is used to obtain vertical content tags, used to construct the query_tag parameter ### Example: Given the top-level vertical content tag `Food`, its top-level vertical id is `628`; `Food`\'s sub-vertical tag `Wine Tasting`, its sub-vertical id is `62802`. Then the constructed tag query parameter is `{\"value\": 628, \"children\": [{\"value\": 62808}]}`  If you need multiple sub-vertical tags, all food sub-vertical tags are `{\"value\":628,\"children\":[{\"value\":62808},{\"value\":62804},{\"value\":62806},{\"value\":62803},{\"value\":62802},{\"value\":62801},{\"value\":62811},{\"value\":62807},{\"value\":62805},{\"value\":62810}]}`
         * @summary 获取垂类内容标签
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchContentTagApiV1DouyinBillboardFetchContentTagGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_content_tag`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取垂类内容标签 ### 参数: - 无 ### 返回: - 垂类内容标签 ### 注意: - 该接口用于获取垂类内容标签，用于query_tag参数构建 ### 示例: 已知顶级垂类内容标签 `美食`，它的顶级垂类id为 `628`；`美食` 的子垂类标签 `品酒教学`，它的子垂类id为 `62802`。 那么构建标签查询参数为 `{\"value\": 628, \"children\": [{\"value\": 62808}]}`  如果需要多个子垂类标签，所有的美食子垂类标签为 `{\"value\":628,\"children\":[{\"value\":62808},{\"value\":62804},{\"value\":62806},{\"value\":62803},{\"value\":62802},{\"value\":62801},{\"value\":62811},{\"value\":62807},{\"value\":62805},{\"value\":62810}]}`  # [English] ### Purpose: - Get vertical content tags ### Parameters: - None ### Return: - Vertical content tags ### Note: - This interface is used to obtain vertical content tags, used to construct the query_tag parameter ### Example: Given the top-level vertical content tag `Food`, its top-level vertical id is `628`; `Food`\'s sub-vertical tag `Wine Tasting`, its sub-vertical id is `62802`. Then the constructed tag query parameter is `{\"value\": 628, \"children\": [{\"value\": 62808}]}`  If you need multiple sub-vertical tags, all food sub-vertical tags are `{\"value\":628,\"children\":[{\"value\":62808},{\"value\":62804},{\"value\":62806},{\"value\":62803},{\"value\":62802},{\"value\":62801},{\"value\":62811},{\"value\":62807},{\"value\":62805},{\"value\":62810}]}`
         * @summary 获取垂类内容标签
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchContentTagApiV1DouyinBillboardFetchContentTagGet_2: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_content_tag`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取粉丝兴趣作者 20个用户 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝兴趣作者 20个用户  # [English] ### Purpose: - Get the fan interest author 20 users ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest author 20 users
         * @summary 获取粉丝兴趣作者 20个用户
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet: async (secUid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_account_fans_interest_account_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取粉丝兴趣作者 20个用户 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝兴趣作者 20个用户  # [English] ### Purpose: - Get the fan interest author 20 users ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest author 20 users
         * @summary 获取粉丝兴趣作者 20个用户
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet_3: async (secUid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet_3.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_account_fans_interest_account_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取粉丝近3天搜索词 10个搜索词 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天搜索词 10个搜索词  # [English] ### Purpose: - Get the fan interest search term in the last 3 days 10 search terms ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest search term in the last 3 days 10 search terms
         * @summary 获取粉丝近3天搜索词 10个搜索词
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet: async (secUid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_account_fans_interest_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取粉丝近3天搜索词 10个搜索词 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天搜索词 10个搜索词  # [English] ### Purpose: - Get the fan interest search term in the last 3 days 10 search terms ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest search term in the last 3 days 10 search terms
         * @summary 获取粉丝近3天搜索词 10个搜索词
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet_4: async (secUid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet_4.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_account_fans_interest_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取粉丝近3天感兴趣的话题 10个话题 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天感兴趣的话题 10个话题  # [English] ### Purpose: - Get the fan interest topic in the last 3 days 10 topics ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest topic in the last 3 days 10 topics
         * @summary 获取粉丝近3天感兴趣的话题 10个话题
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet: async (secUid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_account_fans_interest_topic_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取粉丝近3天感兴趣的话题 10个话题 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天感兴趣的话题 10个话题  # [English] ### Purpose: - Get the fan interest topic in the last 3 days 10 topics ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest topic in the last 3 days 10 topics
         * @summary 获取粉丝近3天感兴趣的话题 10个话题
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet_5: async (secUid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet_5.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_account_fans_interest_topic_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取粉丝画像 ### 参数: - sec_uid: 用户sec_id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比 ### 返回: - 粉丝画像  # [English] ### Purpose: - Get the fan portrait ### Parameters: - sec_uid: User sec_id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution     - 8 Interest tag analysis percentage ### Return: - Fan portrait
         * @summary 获取粉丝画像
         * @param {string} secUid 用户sec_id
         * @param {string} option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet: async (secUid: string, option: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet.');
            }
            // verify required parameter 'option' is not null or undefined
            if (option === null || option === undefined) {
                throw new RequiredError('option','Required parameter option was null or undefined when calling fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_account_fans_portrait_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }

            if (option !== undefined) {
                localVarQueryParameter['option'] = option;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取粉丝画像 ### 参数: - sec_uid: 用户sec_id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比 ### 返回: - 粉丝画像  # [English] ### Purpose: - Get the fan portrait ### Parameters: - sec_uid: User sec_id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution     - 8 Interest tag analysis percentage ### Return: - Fan portrait
         * @summary 获取粉丝画像
         * @param {string} secUid 用户sec_id
         * @param {string} option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet_6: async (secUid: string, option: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet_6.');
            }
            // verify required parameter 'option' is not null or undefined
            if (option === null || option === undefined) {
                throw new RequiredError('option','Required parameter option was null or undefined when calling fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet_6.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_account_fans_portrait_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }

            if (option !== undefined) {
                localVarQueryParameter['option'] = option;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取账号作品分析 ### 参数: - sec_uid: 用户sec_id - day: 天数，默认7天 ### 返回: - 账号作品分析  # [English] ### Purpose: - Get the account work analysis ### Parameters: - sec_uid: User sec_id - day: Number of days, default 7 days ### Return: - Account work analysis
         * @summary 获取账号作品分析-上周
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet: async (secUid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_account_item_analysis_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取账号作品分析 ### 参数: - sec_uid: 用户sec_id - day: 天数，默认7天 ### 返回: - 账号作品分析  # [English] ### Purpose: - Get the account work analysis ### Parameters: - sec_uid: User sec_id - day: Number of days, default 7 days ### Return: - Account work analysis
         * @summary 获取账号作品分析-上周
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet_7: async (secUid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet_7.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_account_item_analysis_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取热门账号 ### 参数: - date_window: 时间窗口，格式 小时，默认24小时 - page_num: 页码，默认1 - page_size: 每页数量，默认20 - query_tag: 子级垂类标签，空则为全部，多个标签需传入 {\"value\": \"{顶级垂类标签id}\", \"children\": [     {\"value\": \"{子级垂类标签id}\"},     {\"value\": \"{子级垂类标签id}\"} ]} ### 返回: - 热门账号  # [English] ### Purpose: - Get the hot account ### Parameters: - date_window: Time window, format hour, default 24 hours - page_num: Page number, default 1 - page_size: Number of items per page, default 20 - query_tag: Sub-level vertical category tag, empty for all, multiple tags need to be passed in {\"value\": \"{top-level vertical category id}\", \"children\": [     {\"value\": \"{sub-level vertical category id}\"},     {\"value\": \"{sub-level vertical category id}\"} ]} ### Return: - Hot account
         * @summary 获取热门账号
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_account_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取热门账号 ### 参数: - date_window: 时间窗口，格式 小时，默认24小时 - page_num: 页码，默认1 - page_size: 每页数量，默认20 - query_tag: 子级垂类标签，空则为全部，多个标签需传入 {\"value\": \"{顶级垂类标签id}\", \"children\": [     {\"value\": \"{子级垂类标签id}\"},     {\"value\": \"{子级垂类标签id}\"} ]} ### 返回: - 热门账号  # [English] ### Purpose: - Get the hot account ### Parameters: - date_window: Time window, format hour, default 24 hours - page_num: Page number, default 1 - page_size: Number of items per page, default 20 - query_tag: Sub-level vertical category tag, empty for all, multiple tags need to be passed in {\"value\": \"{top-level vertical category id}\", \"children\": [     {\"value\": \"{sub-level vertical category id}\"},     {\"value\": \"{sub-level vertical category id}\"} ]} ### Return: - Hot account
         * @summary 获取热门账号
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost_8: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_account_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取搜索用户名或抖音号 ### 参数: - keyword: 搜索的用户名或抖音号 - cursor: 游标，默认空 ### 返回: - 搜索结果  # [English] ### Purpose: - Get the search username or Douyin number ### Parameters: - keyword: Search username or Douyin number - cursor: Cursor, default empty ### Return: - Search result
         * @summary 获取搜索用户名或抖音号
         * @param {string} keyword 搜索的用户名或抖音号
         * @param {number} cursor 游标，默认空
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet: async (keyword: string, cursor: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet.');
            }
            // verify required parameter 'cursor' is not null or undefined
            if (cursor === null || cursor === undefined) {
                throw new RequiredError('cursor','Required parameter cursor was null or undefined when calling fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_account_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取搜索用户名或抖音号 ### 参数: - keyword: 搜索的用户名或抖音号 - cursor: 游标，默认空 ### 返回: - 搜索结果  # [English] ### Purpose: - Get the search username or Douyin number ### Parameters: - keyword: Search username or Douyin number - cursor: Cursor, default empty ### Return: - Search result
         * @summary 获取搜索用户名或抖音号
         * @param {string} keyword 搜索的用户名或抖音号
         * @param {number} cursor 游标，默认空
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet_9: async (keyword: string, cursor: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet_9.');
            }
            // verify required parameter 'cursor' is not null or undefined
            if (cursor === null || cursor === undefined) {
                throw new RequiredError('cursor','Required parameter cursor was null or undefined when calling fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet_9.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_account_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取账号粉丝数据趋势 ### 参数: - sec_uid: 用户sec_id - option: 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 账号粉丝数据趋势  # [English] ### Purpose: - Get the account fan data trend ### Parameters: - sec_uid: User sec_id - option: Option, 2 New like 3 New work 4 New comment 5 New share - date_window: Time window, 1 by hour 2 by day ### Return: - Account fan data trend
         * @summary 获取账号粉丝数据趋势
         * @param {string} secUid 用户sec_id
         * @param {string} option 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量
         * @param {string} dateWindow 时间窗口，1 按小时 2 按天
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet: async (secUid: string, option: string, dateWindow: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet.');
            }
            // verify required parameter 'option' is not null or undefined
            if (option === null || option === undefined) {
                throw new RequiredError('option','Required parameter option was null or undefined when calling fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet.');
            }
            // verify required parameter 'dateWindow' is not null or undefined
            if (dateWindow === null || dateWindow === undefined) {
                throw new RequiredError('dateWindow','Required parameter dateWindow was null or undefined when calling fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_account_trends_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }

            if (option !== undefined) {
                localVarQueryParameter['option'] = option;
            }

            if (dateWindow !== undefined) {
                localVarQueryParameter['date_window'] = dateWindow;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取账号粉丝数据趋势 ### 参数: - sec_uid: 用户sec_id - option: 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 账号粉丝数据趋势  # [English] ### Purpose: - Get the account fan data trend ### Parameters: - sec_uid: User sec_id - option: Option, 2 New like 3 New work 4 New comment 5 New share - date_window: Time window, 1 by hour 2 by day ### Return: - Account fan data trend
         * @summary 获取账号粉丝数据趋势
         * @param {string} secUid 用户sec_id
         * @param {string} option 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量
         * @param {string} dateWindow 时间窗口，1 按小时 2 按天
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet_10: async (secUid: string, option: string, dateWindow: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUid' is not null or undefined
            if (secUid === null || secUid === undefined) {
                throw new RequiredError('secUid','Required parameter secUid was null or undefined when calling fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet_10.');
            }
            // verify required parameter 'option' is not null or undefined
            if (option === null || option === undefined) {
                throw new RequiredError('option','Required parameter option was null or undefined when calling fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet_10.');
            }
            // verify required parameter 'dateWindow' is not null or undefined
            if (dateWindow === null || dateWindow === undefined) {
                throw new RequiredError('dateWindow','Required parameter dateWindow was null or undefined when calling fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet_10.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_account_trends_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUid !== undefined) {
                localVarQueryParameter['sec_uid'] = secUid;
            }

            if (option !== undefined) {
                localVarQueryParameter['option'] = option;
            }

            if (dateWindow !== undefined) {
                localVarQueryParameter['date_window'] = dateWindow;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取活动日历详情 ### 参数: - calendar_id: 活动id ### 返回: - 活动日历详情  # [English] ### Purpose: - Get the activity calendar details ### Parameters: - calendar_id: Activity id ### Return: - Activity calendar details
         * @summary 获取活动日历详情
         * @param {string} calendarId 活动id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet: async (calendarId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_calendar_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (calendarId !== undefined) {
                localVarQueryParameter['calendar_id'] = calendarId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取活动日历详情 ### 参数: - calendar_id: 活动id ### 返回: - 活动日历详情  # [English] ### Purpose: - Get the activity calendar details ### Parameters: - calendar_id: Activity id ### Return: - Activity calendar details
         * @summary 获取活动日历详情
         * @param {string} calendarId 活动id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet_11: async (calendarId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'calendarId' is not null or undefined
            if (calendarId === null || calendarId === undefined) {
                throw new RequiredError('calendarId','Required parameter calendarId was null or undefined when calling fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet_11.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_calendar_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (calendarId !== undefined) {
                localVarQueryParameter['calendar_id'] = calendarId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取活动日历 ### 参数: - city_code: 城市编码，从城市列表获取，空为全部 - category_code: 热点榜分类编码，从热点榜分类获取，空为全部 - end_date: 快照结束时间 格式10位时间戳 - start_date: 快照开始时间 格式10位时间戳 ### 返回: - 活动日历  # [English] ### Purpose: - Get the activity calendar ### Parameters: - city_code: City code, get from city list, empty for all - category_code: Hot list category code, get from hot list category, empty for all - end_date: Snapshot end time format 10 digit timestamp - start_date: Snapshot start time format 10 digit timestamp ### Return: - Activity calendar
         * @summary 获取活动日历
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_calendar_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取活动日历 ### 参数: - city_code: 城市编码，从城市列表获取，空为全部 - category_code: 热点榜分类编码，从热点榜分类获取，空为全部 - end_date: 快照结束时间 格式10位时间戳 - start_date: 快照开始时间 格式10位时间戳 ### 返回: - 活动日历  # [English] ### Purpose: - Get the activity calendar ### Parameters: - city_code: City code, get from city list, empty for all - category_code: Hot list category code, get from hot list category, empty for all - end_date: Snapshot end time format 10 digit timestamp - start_date: Snapshot start time format 10 digit timestamp ### Return: - Activity calendar
         * @summary 获取活动日历
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost_12: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_calendar_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取热点榜分类的id与热度 - 注意：使用start_date和end_date参数需要移除snapshot_time参数才可以生效 ### 参数: - billboard_type: 榜单类型     - rise 上升热点榜     - city 城市热点榜     - total 热点总榜 - snapshot_time: 快照时间 - start_date: 快照开始时间 - end_date: 快照结束时间 - keyword: 热点搜索词 ### 返回: - 热点榜分类  # [English] ### Purpose: - Get the id and popularity of the hot list category - Note: Using start_date and end_date parameters requires removing the snapshot_time parameter - Note: snapshot_time and start_date, end_date parameters cannot be empty at the same time ### Parameters: - billboard_type: Billboard type     - rise Rising hot list     - city City hot list     - total Total hot list - snapshot_time: Snapshot time - start_date: Snapshot start time - end_date: Snapshot end time - keyword: Hot search term ### Return: - Hot category list
         * @summary 获取热点榜分类
         * @param {string} billboardType 榜单类型
         * @param {string} [snapshotTime] 快照时间 格式yyyyMMddHHmmss
         * @param {string} [startDate] 快照开始时间 格式yyyyMMdd
         * @param {string} [endDate] 快照结束时间 格式yyyyMMdd
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet: async (billboardType: string, snapshotTime?: string, startDate?: string, endDate?: string, keyword?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'billboardType' is not null or undefined
            if (billboardType === null || billboardType === undefined) {
                throw new RequiredError('billboardType','Required parameter billboardType was null or undefined when calling fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_category_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (billboardType !== undefined) {
                localVarQueryParameter['billboard_type'] = billboardType;
            }

            if (snapshotTime !== undefined) {
                localVarQueryParameter['snapshot_time'] = snapshotTime;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取热点榜分类的id与热度 - 注意：使用start_date和end_date参数需要移除snapshot_time参数才可以生效 ### 参数: - billboard_type: 榜单类型     - rise 上升热点榜     - city 城市热点榜     - total 热点总榜 - snapshot_time: 快照时间 - start_date: 快照开始时间 - end_date: 快照结束时间 - keyword: 热点搜索词 ### 返回: - 热点榜分类  # [English] ### Purpose: - Get the id and popularity of the hot list category - Note: Using start_date and end_date parameters requires removing the snapshot_time parameter - Note: snapshot_time and start_date, end_date parameters cannot be empty at the same time ### Parameters: - billboard_type: Billboard type     - rise Rising hot list     - city City hot list     - total Total hot list - snapshot_time: Snapshot time - start_date: Snapshot start time - end_date: Snapshot end time - keyword: Hot search term ### Return: - Hot category list
         * @summary 获取热点榜分类
         * @param {string} billboardType 榜单类型
         * @param {string} [snapshotTime] 快照时间 格式yyyyMMddHHmmss
         * @param {string} [startDate] 快照开始时间 格式yyyyMMdd
         * @param {string} [endDate] 快照结束时间 格式yyyyMMdd
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet_13: async (billboardType: string, snapshotTime?: string, startDate?: string, endDate?: string, keyword?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'billboardType' is not null or undefined
            if (billboardType === null || billboardType === undefined) {
                throw new RequiredError('billboardType','Required parameter billboardType was null or undefined when calling fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet_13.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_category_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (billboardType !== undefined) {
                localVarQueryParameter['billboard_type'] = billboardType;
            }

            if (snapshotTime !== undefined) {
                localVarQueryParameter['snapshot_time'] = snapshotTime;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取挑战榜 ### 参数: - page: 页码 - page_size: 每页数量 - keyword: 热点搜索词 ### 返回: - 挑战榜  # [English] ### Purpose: - Get the challenge list ### Parameters: - page: Page number - page_size: Number of items per page - keyword: Hot search term ### Return: - Challenge list
         * @summary 获取挑战榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet: async (page: number, pageSize: number, keyword?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_challenge_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取挑战榜 ### 参数: - page: 页码 - page_size: 每页数量 - keyword: 热点搜索词 ### 返回: - 挑战榜  # [English] ### Purpose: - Get the challenge list ### Parameters: - page: Page number - page_size: Number of items per page - keyword: Hot search term ### Return: - Challenge list
         * @summary 获取挑战榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet_14: async (page: number, pageSize: number, keyword?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet_14.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet_14.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_challenge_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取同城热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - city_code: 城市编码，从城市列表获取，空为全部 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 同城热点榜  # [English] ### Purpose: - Get the city hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - city_code: City code, get from city list, empty for all - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - City hot list
         * @summary 获取同城热点榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} order 排序方式
         * @param {string} [cityCode] 城市编码，从城市列表获取，空为全部
         * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet: async (page: number, pageSize: number, order: string, cityCode?: string, sentenceTag?: string, keyword?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet.');
            }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order','Required parameter order was null or undefined when calling fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_city_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (cityCode !== undefined) {
                localVarQueryParameter['city_code'] = cityCode;
            }

            if (sentenceTag !== undefined) {
                localVarQueryParameter['sentence_tag'] = sentenceTag;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取同城热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - city_code: 城市编码，从城市列表获取，空为全部 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 同城热点榜  # [English] ### Purpose: - Get the city hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - city_code: City code, get from city list, empty for all - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - City hot list
         * @summary 获取同城热点榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} order 排序方式
         * @param {string} [cityCode] 城市编码，从城市列表获取，空为全部
         * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet_15: async (page: number, pageSize: number, order: string, cityCode?: string, sentenceTag?: string, keyword?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet_15.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet_15.');
            }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order','Required parameter order was null or undefined when calling fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet_15.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_city_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (cityCode !== undefined) {
                localVarQueryParameter['city_code'] = cityCode;
            }

            if (sentenceTag !== undefined) {
                localVarQueryParameter['sentence_tag'] = sentenceTag;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品评论分析-词云权重 ### 参数: - aweme_id: 作品id ### 返回: - 作品评论分析-词云权重  # [English] ### Purpose: - Get the work comment analysis word cloud weight ### Parameters: - aweme_id: Work id ### Return: - Work comment analysis word cloud weight
         * @summary 获取作品评论分析-词云权重
         * @param {string} awemeId 作品id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_comment_word_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品评论分析-词云权重 ### 参数: - aweme_id: 作品id ### 返回: - 作品评论分析-词云权重  # [English] ### Purpose: - Get the work comment analysis word cloud weight ### Parameters: - aweme_id: Work id ### Return: - Work comment analysis word cloud weight
         * @summary 获取作品评论分析-词云权重
         * @param {string} awemeId 作品id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet_16: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet_16.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_comment_word_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品数据趋势 ### 参数: - aweme_id: 作品id - option: 选项，7 点赞量 8 分享量 9 评论量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 作品数据趋势  # [English] ### Purpose: - Get the work data trend ### Parameters: - aweme_id: Work id - option: Option, 7 Like 8 Share 9 Comment - date_window: Time window, 1 by hour 2 by day ### Return: - Work data trend
         * @summary 获取作品数据趋势
         * @param {string} option 选项，7 点赞量 8 分享量 9 评论量
         * @param {string} dateWindow 时间窗口，1 按小时 2 按天
         * @param {string} [awemeId] 作品id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet: async (option: string, dateWindow: string, awemeId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'option' is not null or undefined
            if (option === null || option === undefined) {
                throw new RequiredError('option','Required parameter option was null or undefined when calling fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet.');
            }
            // verify required parameter 'dateWindow' is not null or undefined
            if (dateWindow === null || dateWindow === undefined) {
                throw new RequiredError('dateWindow','Required parameter dateWindow was null or undefined when calling fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_item_trends_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (option !== undefined) {
                localVarQueryParameter['option'] = option;
            }

            if (dateWindow !== undefined) {
                localVarQueryParameter['date_window'] = dateWindow;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品数据趋势 ### 参数: - aweme_id: 作品id - option: 选项，7 点赞量 8 分享量 9 评论量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 作品数据趋势  # [English] ### Purpose: - Get the work data trend ### Parameters: - aweme_id: Work id - option: Option, 7 Like 8 Share 9 Comment - date_window: Time window, 1 by hour 2 by day ### Return: - Work data trend
         * @summary 获取作品数据趋势
         * @param {string} option 选项，7 点赞量 8 分享量 9 评论量
         * @param {string} dateWindow 时间窗口，1 按小时 2 按天
         * @param {string} [awemeId] 作品id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet_17: async (option: string, dateWindow: string, awemeId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'option' is not null or undefined
            if (option === null || option === undefined) {
                throw new RequiredError('option','Required parameter option was null or undefined when calling fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet_17.');
            }
            // verify required parameter 'dateWindow' is not null or undefined
            if (dateWindow === null || dateWindow === undefined) {
                throw new RequiredError('dateWindow','Required parameter dateWindow was null or undefined when calling fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet_17.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_item_trends_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (option !== undefined) {
                localVarQueryParameter['option'] = option;
            }

            if (dateWindow !== undefined) {
                localVarQueryParameter['date_window'] = dateWindow;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取上升热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 上升热点榜  # [English] ### Purpose: - Get the rising hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Rising hot list
         * @summary 获取上升热点榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} order 排序方式
         * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet: async (page: number, pageSize: number, order: string, sentenceTag?: string, keyword?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet.');
            }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order','Required parameter order was null or undefined when calling fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_rise_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sentenceTag !== undefined) {
                localVarQueryParameter['sentence_tag'] = sentenceTag;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取上升热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 上升热点榜  # [English] ### Purpose: - Get the rising hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Rising hot list
         * @summary 获取上升热点榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} order 排序方式
         * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet_18: async (page: number, pageSize: number, order: string, sentenceTag?: string, keyword?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet_18.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet_18.');
            }
            // verify required parameter 'order' is not null or undefined
            if (order === null || order === undefined) {
                throw new RequiredError('order','Required parameter order was null or undefined when calling fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet_18.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_rise_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (sentenceTag !== undefined) {
                localVarQueryParameter['sentence_tag'] = sentenceTag;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取高涨粉率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高涨粉率榜  # [English] ### Purpose: - Get the high fan rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High fan rate list
         * @summary 获取高涨粉率榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_high_fan_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取高涨粉率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高涨粉率榜  # [English] ### Purpose: - Get the high fan rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High fan rate list
         * @summary 获取高涨粉率榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost_19: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_high_fan_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取高点赞率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高点赞率榜  # [English] ### Purpose: - Get the high like rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High like rate list
         * @summary 获取高点赞率榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_high_like_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取高点赞率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高点赞率榜  # [English] ### Purpose: - Get the high like rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High like rate list
         * @summary 获取高点赞率榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost_20: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_high_like_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取高完播率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高完播率榜  # [English] ### Purpose: - Get the high completion rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High completion rate list
         * @summary 获取高完播率榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_high_play_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取高完播率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高完播率榜  # [English] ### Purpose: - Get the high completion rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High completion rate list
         * @summary 获取高完播率榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost_21: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_high_play_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取热度飙升的搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 热度飙升的搜索榜  # [English] ### Purpose: - Get the search list with rising popularity ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list with rising popularity
         * @summary 获取热度飙升的搜索榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_high_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取热度飙升的搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 热度飙升的搜索榜  # [English] ### Purpose: - Get the search list with rising popularity ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list with rising popularity
         * @summary 获取热度飙升的搜索榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost_22: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_high_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取热度飙升的话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 热度飙升的话题榜  # [English] ### Purpose: - Get the topic list with rising popularity ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Topic list with rising popularity
         * @summary 获取热度飙升的话题榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_high_topic_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取热度飙升的话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 热度飙升的话题榜  # [English] ### Purpose: - Get the topic list with rising popularity ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Topic list with rising popularity
         * @summary 获取热度飙升的话题榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost_23: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_high_topic_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取内容词详情 ### 参数: - keyword: 搜索关键字 - word_id: 内容词id - query_day: 查询日期，格式为YYYYMMDD ### 返回: - 内容词详情  # [English] ### Purpose: - Get the details of content words ### Parameters: - keyword: Search keyword - word_id: Content word id - query_day: Query date, format is YYYYMMDD ### Return: - Details of content words
         * @summary 获取内容词详情
         * @param {string} keyword 搜索关键字
         * @param {string} wordId 内容词id
         * @param {number} queryDay 查询日期，格式为YYYYMMDD，需为当日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet: async (keyword: string, wordId: string, queryDay: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet.');
            }
            // verify required parameter 'wordId' is not null or undefined
            if (wordId === null || wordId === undefined) {
                throw new RequiredError('wordId','Required parameter wordId was null or undefined when calling fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet.');
            }
            // verify required parameter 'queryDay' is not null or undefined
            if (queryDay === null || queryDay === undefined) {
                throw new RequiredError('queryDay','Required parameter queryDay was null or undefined when calling fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_hot_word_detail_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (wordId !== undefined) {
                localVarQueryParameter['word_id'] = wordId;
            }

            if (queryDay !== undefined) {
                localVarQueryParameter['query_day'] = queryDay;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取内容词详情 ### 参数: - keyword: 搜索关键字 - word_id: 内容词id - query_day: 查询日期，格式为YYYYMMDD ### 返回: - 内容词详情  # [English] ### Purpose: - Get the details of content words ### Parameters: - keyword: Search keyword - word_id: Content word id - query_day: Query date, format is YYYYMMDD ### Return: - Details of content words
         * @summary 获取内容词详情
         * @param {string} keyword 搜索关键字
         * @param {string} wordId 内容词id
         * @param {number} queryDay 查询日期，格式为YYYYMMDD，需为当日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet_24: async (keyword: string, wordId: string, queryDay: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet_24.');
            }
            // verify required parameter 'wordId' is not null or undefined
            if (wordId === null || wordId === undefined) {
                throw new RequiredError('wordId','Required parameter wordId was null or undefined when calling fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet_24.');
            }
            // verify required parameter 'queryDay' is not null or undefined
            if (queryDay === null || queryDay === undefined) {
                throw new RequiredError('queryDay','Required parameter queryDay was null or undefined when calling fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet_24.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_hot_word_detail_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (wordId !== undefined) {
                localVarQueryParameter['word_id'] = wordId;
            }

            if (queryDay !== undefined) {
                localVarQueryParameter['query_day'] = queryDay;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取全部内容词 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 全部内容词  # [English] ### Purpose: - Get the list of all content words ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - List of all content words
         * @summary 获取全部内容词
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_hot_word_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取全部内容词 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 全部内容词  # [English] ### Purpose: - Get the list of all content words ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - List of all content words
         * @summary 获取全部内容词
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost_25: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_hot_word_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取热点总榜 ### 参数: - page: 页码 - page_size: 每页数量 - type: 快照类型 snapshot 按时刻查看 range 按时间范围。     - 备注：snapshot_time 在 snapshot时有效，start_date 和 end_date 在 range 时有效 - snapshot_time: 快照时间 格式yyyyMMddHHmmss - start_date: 快照开始时间 格式yyyyMMdd - end_date: 快照结束时间 格式yyyyMMdd - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 热点总榜  # [English] ### Purpose: - Get the total hot list ### Parameters: - page: Page number - page_size: Number of items per page - type: Snapshot type snapshot view by time range view by time range.     - Note: snapshot_time is valid when snapshot, start_date and end_date are valid when range - snapshot_time: Snapshot time format yyyyMMddHHmmss - start_date: Snapshot start time format yyyyMMdd - end_date: Snapshot end time format yyyyMMdd - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Total hot list
         * @summary 获取热点总榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} type 快照类型 snapshot 按时刻查看 range 按时间范围
         * @param {string} [snapshotTime] 快照时间 格式yyyyMMddHHmmss
         * @param {string} [startDate] 快照开始时间 格式yyyyMMdd
         * @param {string} [endDate] 快照结束时间 格式yyyyMMdd
         * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet: async (page: number, pageSize: number, type: string, snapshotTime?: string, startDate?: string, endDate?: string, sentenceTag?: string, keyword?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (snapshotTime !== undefined) {
                localVarQueryParameter['snapshot_time'] = snapshotTime;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (sentenceTag !== undefined) {
                localVarQueryParameter['sentence_tag'] = sentenceTag;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取热点总榜 ### 参数: - page: 页码 - page_size: 每页数量 - type: 快照类型 snapshot 按时刻查看 range 按时间范围。     - 备注：snapshot_time 在 snapshot时有效，start_date 和 end_date 在 range 时有效 - snapshot_time: 快照时间 格式yyyyMMddHHmmss - start_date: 快照开始时间 格式yyyyMMdd - end_date: 快照结束时间 格式yyyyMMdd - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 热点总榜  # [English] ### Purpose: - Get the total hot list ### Parameters: - page: Page number - page_size: Number of items per page - type: Snapshot type snapshot view by time range view by time range.     - Note: snapshot_time is valid when snapshot, start_date and end_date are valid when range - snapshot_time: Snapshot time format yyyyMMddHHmmss - start_date: Snapshot start time format yyyyMMdd - end_date: Snapshot end time format yyyyMMdd - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Total hot list
         * @summary 获取热点总榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} type 快照类型 snapshot 按时刻查看 range 按时间范围
         * @param {string} [snapshotTime] 快照时间 格式yyyyMMddHHmmss
         * @param {string} [startDate] 快照开始时间 格式yyyyMMdd
         * @param {string} [endDate] 快照结束时间 格式yyyyMMdd
         * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet_26: async (page: number, pageSize: number, type: string, snapshotTime?: string, startDate?: string, endDate?: string, sentenceTag?: string, keyword?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet_26.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet_26.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet_26.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (snapshotTime !== undefined) {
                localVarQueryParameter['snapshot_time'] = snapshotTime;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['start_date'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['end_date'] = endDate;
            }

            if (sentenceTag !== undefined) {
                localVarQueryParameter['sentence_tag'] = sentenceTag;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取低粉爆款榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 低粉爆款榜  # [English] ### Purpose: - Get the low fan explosion list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Low fan explosion list
         * @summary 获取低粉爆款榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_low_fan_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取低粉爆款榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 低粉爆款榜  # [English] ### Purpose: - Get the low fan explosion list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Low fan explosion list
         * @summary 获取低粉爆款榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost_27: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_low_fan_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 搜索榜  # [English] ### Purpose: - Get the search list ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list
         * @summary 获取搜索榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 搜索榜  # [English] ### Purpose: - Get the search list ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list
         * @summary 获取搜索榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost_28: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 话题榜  # [English] ### Purpose: - Get the topic list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Topic list
         * @summary 获取话题榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_topic_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 话题榜  # [English] ### Purpose: - Get the topic list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Topic list
         * @summary 获取话题榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost_29: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_topic_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取视频榜 ### 参数: - page: 页码，默认1 - page_size: 每页数量，默认10 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 视频榜  # [English] ### Purpose: - Get the video list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Video list
         * @summary 获取视频榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取视频榜 ### 参数: - page: 页码，默认1 - page_size: 每页数量，默认10 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 视频榜  # [English] ### Purpose: - Get the video list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Video list
         * @summary 获取视频榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost_30: async (uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_total_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof uNKNOWNBASETYPE !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(uNKNOWNBASETYPE !== undefined ? uNKNOWNBASETYPE : {}) : (uNKNOWNBASETYPE || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品点赞观众画像 ### 参数: - aweme_id: 作品id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 ### 返回: - 作品点赞观众画像  # [English] ### Purpose: - Get the work like audience portrait ### Parameters: - aweme_id: Work id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution ### Return: - Work like audience portrait
         * @summary 获取作品点赞观众画像-仅限热门榜
         * @param {string} awemeId 作品id
         * @param {string} option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet: async (awemeId: string, option: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet.');
            }
            // verify required parameter 'option' is not null or undefined
            if (option === null || option === undefined) {
                throw new RequiredError('option','Required parameter option was null or undefined when calling fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_user_portrait_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (option !== undefined) {
                localVarQueryParameter['option'] = option;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品点赞观众画像 ### 参数: - aweme_id: 作品id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 ### 返回: - 作品点赞观众画像  # [English] ### Purpose: - Get the work like audience portrait ### Parameters: - aweme_id: Work id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution ### Return: - Work like audience portrait
         * @summary 获取作品点赞观众画像-仅限热门榜
         * @param {string} awemeId 作品id
         * @param {string} option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet_31: async (awemeId: string, option: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet_31.');
            }
            // verify required parameter 'option' is not null or undefined
            if (option === null || option === undefined) {
                throw new RequiredError('option','Required parameter option was null or undefined when calling fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet_31.');
            }
            const localVarPath = `/api/v1/douyin/billboard/fetch_hot_user_portrait_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (option !== undefined) {
                localVarQueryParameter['option'] = option;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DouyinBillboardAPIApi - functional programming interface
 * @export
 */
export const DouyinBillboardAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取城市列表 ### 参数: - 无 ### 返回: - 中国城市列表  # [English] ### Purpose: - Get city list ### Parameters: - None ### Return: - Chinese city list
         * @summary 获取中国城市列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCityListApiV1DouyinBillboardFetchCityListGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchCityListApiV1DouyinBillboardFetchCityListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取城市列表 ### 参数: - 无 ### 返回: - 中国城市列表  # [English] ### Purpose: - Get city list ### Parameters: - None ### Return: - Chinese city list
         * @summary 获取中国城市列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchCityListApiV1DouyinBillboardFetchCityListGet_1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchCityListApiV1DouyinBillboardFetchCityListGet_1(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取垂类内容标签 ### 参数: - 无 ### 返回: - 垂类内容标签 ### 注意: - 该接口用于获取垂类内容标签，用于query_tag参数构建 ### 示例: 已知顶级垂类内容标签 `美食`，它的顶级垂类id为 `628`；`美食` 的子垂类标签 `品酒教学`，它的子垂类id为 `62802`。 那么构建标签查询参数为 `{\"value\": 628, \"children\": [{\"value\": 62808}]}`  如果需要多个子垂类标签，所有的美食子垂类标签为 `{\"value\":628,\"children\":[{\"value\":62808},{\"value\":62804},{\"value\":62806},{\"value\":62803},{\"value\":62802},{\"value\":62801},{\"value\":62811},{\"value\":62807},{\"value\":62805},{\"value\":62810}]}`  # [English] ### Purpose: - Get vertical content tags ### Parameters: - None ### Return: - Vertical content tags ### Note: - This interface is used to obtain vertical content tags, used to construct the query_tag parameter ### Example: Given the top-level vertical content tag `Food`, its top-level vertical id is `628`; `Food`\'s sub-vertical tag `Wine Tasting`, its sub-vertical id is `62802`. Then the constructed tag query parameter is `{\"value\": 628, \"children\": [{\"value\": 62808}]}`  If you need multiple sub-vertical tags, all food sub-vertical tags are `{\"value\":628,\"children\":[{\"value\":62808},{\"value\":62804},{\"value\":62806},{\"value\":62803},{\"value\":62802},{\"value\":62801},{\"value\":62811},{\"value\":62807},{\"value\":62805},{\"value\":62810}]}`
         * @summary 获取垂类内容标签
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchContentTagApiV1DouyinBillboardFetchContentTagGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchContentTagApiV1DouyinBillboardFetchContentTagGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取垂类内容标签 ### 参数: - 无 ### 返回: - 垂类内容标签 ### 注意: - 该接口用于获取垂类内容标签，用于query_tag参数构建 ### 示例: 已知顶级垂类内容标签 `美食`，它的顶级垂类id为 `628`；`美食` 的子垂类标签 `品酒教学`，它的子垂类id为 `62802`。 那么构建标签查询参数为 `{\"value\": 628, \"children\": [{\"value\": 62808}]}`  如果需要多个子垂类标签，所有的美食子垂类标签为 `{\"value\":628,\"children\":[{\"value\":62808},{\"value\":62804},{\"value\":62806},{\"value\":62803},{\"value\":62802},{\"value\":62801},{\"value\":62811},{\"value\":62807},{\"value\":62805},{\"value\":62810}]}`  # [English] ### Purpose: - Get vertical content tags ### Parameters: - None ### Return: - Vertical content tags ### Note: - This interface is used to obtain vertical content tags, used to construct the query_tag parameter ### Example: Given the top-level vertical content tag `Food`, its top-level vertical id is `628`; `Food`\'s sub-vertical tag `Wine Tasting`, its sub-vertical id is `62802`. Then the constructed tag query parameter is `{\"value\": 628, \"children\": [{\"value\": 62808}]}`  If you need multiple sub-vertical tags, all food sub-vertical tags are `{\"value\":628,\"children\":[{\"value\":62808},{\"value\":62804},{\"value\":62806},{\"value\":62803},{\"value\":62802},{\"value\":62801},{\"value\":62811},{\"value\":62807},{\"value\":62805},{\"value\":62810}]}`
         * @summary 获取垂类内容标签
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchContentTagApiV1DouyinBillboardFetchContentTagGet_2(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchContentTagApiV1DouyinBillboardFetchContentTagGet_2(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取粉丝兴趣作者 20个用户 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝兴趣作者 20个用户  # [English] ### Purpose: - Get the fan interest author 20 users ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest author 20 users
         * @summary 获取粉丝兴趣作者 20个用户
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet(secUid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet(secUid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取粉丝兴趣作者 20个用户 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝兴趣作者 20个用户  # [English] ### Purpose: - Get the fan interest author 20 users ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest author 20 users
         * @summary 获取粉丝兴趣作者 20个用户
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet_3(secUid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet_3(secUid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取粉丝近3天搜索词 10个搜索词 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天搜索词 10个搜索词  # [English] ### Purpose: - Get the fan interest search term in the last 3 days 10 search terms ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest search term in the last 3 days 10 search terms
         * @summary 获取粉丝近3天搜索词 10个搜索词
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet(secUid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet(secUid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取粉丝近3天搜索词 10个搜索词 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天搜索词 10个搜索词  # [English] ### Purpose: - Get the fan interest search term in the last 3 days 10 search terms ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest search term in the last 3 days 10 search terms
         * @summary 获取粉丝近3天搜索词 10个搜索词
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet_4(secUid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet_4(secUid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取粉丝近3天感兴趣的话题 10个话题 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天感兴趣的话题 10个话题  # [English] ### Purpose: - Get the fan interest topic in the last 3 days 10 topics ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest topic in the last 3 days 10 topics
         * @summary 获取粉丝近3天感兴趣的话题 10个话题
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet(secUid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet(secUid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取粉丝近3天感兴趣的话题 10个话题 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天感兴趣的话题 10个话题  # [English] ### Purpose: - Get the fan interest topic in the last 3 days 10 topics ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest topic in the last 3 days 10 topics
         * @summary 获取粉丝近3天感兴趣的话题 10个话题
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet_5(secUid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet_5(secUid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取粉丝画像 ### 参数: - sec_uid: 用户sec_id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比 ### 返回: - 粉丝画像  # [English] ### Purpose: - Get the fan portrait ### Parameters: - sec_uid: User sec_id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution     - 8 Interest tag analysis percentage ### Return: - Fan portrait
         * @summary 获取粉丝画像
         * @param {string} secUid 用户sec_id
         * @param {string} option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet(secUid: string, option: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet(secUid, option, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取粉丝画像 ### 参数: - sec_uid: 用户sec_id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比 ### 返回: - 粉丝画像  # [English] ### Purpose: - Get the fan portrait ### Parameters: - sec_uid: User sec_id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution     - 8 Interest tag analysis percentage ### Return: - Fan portrait
         * @summary 获取粉丝画像
         * @param {string} secUid 用户sec_id
         * @param {string} option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet_6(secUid: string, option: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet_6(secUid, option, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取账号作品分析 ### 参数: - sec_uid: 用户sec_id - day: 天数，默认7天 ### 返回: - 账号作品分析  # [English] ### Purpose: - Get the account work analysis ### Parameters: - sec_uid: User sec_id - day: Number of days, default 7 days ### Return: - Account work analysis
         * @summary 获取账号作品分析-上周
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet(secUid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet(secUid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取账号作品分析 ### 参数: - sec_uid: 用户sec_id - day: 天数，默认7天 ### 返回: - 账号作品分析  # [English] ### Purpose: - Get the account work analysis ### Parameters: - sec_uid: User sec_id - day: Number of days, default 7 days ### Return: - Account work analysis
         * @summary 获取账号作品分析-上周
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet_7(secUid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet_7(secUid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取热门账号 ### 参数: - date_window: 时间窗口，格式 小时，默认24小时 - page_num: 页码，默认1 - page_size: 每页数量，默认20 - query_tag: 子级垂类标签，空则为全部，多个标签需传入 {\"value\": \"{顶级垂类标签id}\", \"children\": [     {\"value\": \"{子级垂类标签id}\"},     {\"value\": \"{子级垂类标签id}\"} ]} ### 返回: - 热门账号  # [English] ### Purpose: - Get the hot account ### Parameters: - date_window: Time window, format hour, default 24 hours - page_num: Page number, default 1 - page_size: Number of items per page, default 20 - query_tag: Sub-level vertical category tag, empty for all, multiple tags need to be passed in {\"value\": \"{top-level vertical category id}\", \"children\": [     {\"value\": \"{sub-level vertical category id}\"},     {\"value\": \"{sub-level vertical category id}\"} ]} ### Return: - Hot account
         * @summary 获取热门账号
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取热门账号 ### 参数: - date_window: 时间窗口，格式 小时，默认24小时 - page_num: 页码，默认1 - page_size: 每页数量，默认20 - query_tag: 子级垂类标签，空则为全部，多个标签需传入 {\"value\": \"{顶级垂类标签id}\", \"children\": [     {\"value\": \"{子级垂类标签id}\"},     {\"value\": \"{子级垂类标签id}\"} ]} ### 返回: - 热门账号  # [English] ### Purpose: - Get the hot account ### Parameters: - date_window: Time window, format hour, default 24 hours - page_num: Page number, default 1 - page_size: Number of items per page, default 20 - query_tag: Sub-level vertical category tag, empty for all, multiple tags need to be passed in {\"value\": \"{top-level vertical category id}\", \"children\": [     {\"value\": \"{sub-level vertical category id}\"},     {\"value\": \"{sub-level vertical category id}\"} ]} ### Return: - Hot account
         * @summary 获取热门账号
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost_8(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost_8(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取搜索用户名或抖音号 ### 参数: - keyword: 搜索的用户名或抖音号 - cursor: 游标，默认空 ### 返回: - 搜索结果  # [English] ### Purpose: - Get the search username or Douyin number ### Parameters: - keyword: Search username or Douyin number - cursor: Cursor, default empty ### Return: - Search result
         * @summary 获取搜索用户名或抖音号
         * @param {string} keyword 搜索的用户名或抖音号
         * @param {number} cursor 游标，默认空
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet(keyword: string, cursor: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet(keyword, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取搜索用户名或抖音号 ### 参数: - keyword: 搜索的用户名或抖音号 - cursor: 游标，默认空 ### 返回: - 搜索结果  # [English] ### Purpose: - Get the search username or Douyin number ### Parameters: - keyword: Search username or Douyin number - cursor: Cursor, default empty ### Return: - Search result
         * @summary 获取搜索用户名或抖音号
         * @param {string} keyword 搜索的用户名或抖音号
         * @param {number} cursor 游标，默认空
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet_9(keyword: string, cursor: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet_9(keyword, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取账号粉丝数据趋势 ### 参数: - sec_uid: 用户sec_id - option: 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 账号粉丝数据趋势  # [English] ### Purpose: - Get the account fan data trend ### Parameters: - sec_uid: User sec_id - option: Option, 2 New like 3 New work 4 New comment 5 New share - date_window: Time window, 1 by hour 2 by day ### Return: - Account fan data trend
         * @summary 获取账号粉丝数据趋势
         * @param {string} secUid 用户sec_id
         * @param {string} option 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量
         * @param {string} dateWindow 时间窗口，1 按小时 2 按天
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet(secUid: string, option: string, dateWindow: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet(secUid, option, dateWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取账号粉丝数据趋势 ### 参数: - sec_uid: 用户sec_id - option: 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 账号粉丝数据趋势  # [English] ### Purpose: - Get the account fan data trend ### Parameters: - sec_uid: User sec_id - option: Option, 2 New like 3 New work 4 New comment 5 New share - date_window: Time window, 1 by hour 2 by day ### Return: - Account fan data trend
         * @summary 获取账号粉丝数据趋势
         * @param {string} secUid 用户sec_id
         * @param {string} option 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量
         * @param {string} dateWindow 时间窗口，1 按小时 2 按天
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet_10(secUid: string, option: string, dateWindow: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet_10(secUid, option, dateWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取活动日历详情 ### 参数: - calendar_id: 活动id ### 返回: - 活动日历详情  # [English] ### Purpose: - Get the activity calendar details ### Parameters: - calendar_id: Activity id ### Return: - Activity calendar details
         * @summary 获取活动日历详情
         * @param {string} calendarId 活动id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet(calendarId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet(calendarId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取活动日历详情 ### 参数: - calendar_id: 活动id ### 返回: - 活动日历详情  # [English] ### Purpose: - Get the activity calendar details ### Parameters: - calendar_id: Activity id ### Return: - Activity calendar details
         * @summary 获取活动日历详情
         * @param {string} calendarId 活动id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet_11(calendarId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet_11(calendarId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取活动日历 ### 参数: - city_code: 城市编码，从城市列表获取，空为全部 - category_code: 热点榜分类编码，从热点榜分类获取，空为全部 - end_date: 快照结束时间 格式10位时间戳 - start_date: 快照开始时间 格式10位时间戳 ### 返回: - 活动日历  # [English] ### Purpose: - Get the activity calendar ### Parameters: - city_code: City code, get from city list, empty for all - category_code: Hot list category code, get from hot list category, empty for all - end_date: Snapshot end time format 10 digit timestamp - start_date: Snapshot start time format 10 digit timestamp ### Return: - Activity calendar
         * @summary 获取活动日历
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取活动日历 ### 参数: - city_code: 城市编码，从城市列表获取，空为全部 - category_code: 热点榜分类编码，从热点榜分类获取，空为全部 - end_date: 快照结束时间 格式10位时间戳 - start_date: 快照开始时间 格式10位时间戳 ### 返回: - 活动日历  # [English] ### Purpose: - Get the activity calendar ### Parameters: - city_code: City code, get from city list, empty for all - category_code: Hot list category code, get from hot list category, empty for all - end_date: Snapshot end time format 10 digit timestamp - start_date: Snapshot start time format 10 digit timestamp ### Return: - Activity calendar
         * @summary 获取活动日历
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost_12(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost_12(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取热点榜分类的id与热度 - 注意：使用start_date和end_date参数需要移除snapshot_time参数才可以生效 ### 参数: - billboard_type: 榜单类型     - rise 上升热点榜     - city 城市热点榜     - total 热点总榜 - snapshot_time: 快照时间 - start_date: 快照开始时间 - end_date: 快照结束时间 - keyword: 热点搜索词 ### 返回: - 热点榜分类  # [English] ### Purpose: - Get the id and popularity of the hot list category - Note: Using start_date and end_date parameters requires removing the snapshot_time parameter - Note: snapshot_time and start_date, end_date parameters cannot be empty at the same time ### Parameters: - billboard_type: Billboard type     - rise Rising hot list     - city City hot list     - total Total hot list - snapshot_time: Snapshot time - start_date: Snapshot start time - end_date: Snapshot end time - keyword: Hot search term ### Return: - Hot category list
         * @summary 获取热点榜分类
         * @param {string} billboardType 榜单类型
         * @param {string} [snapshotTime] 快照时间 格式yyyyMMddHHmmss
         * @param {string} [startDate] 快照开始时间 格式yyyyMMdd
         * @param {string} [endDate] 快照结束时间 格式yyyyMMdd
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet(billboardType: string, snapshotTime?: string, startDate?: string, endDate?: string, keyword?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet(billboardType, snapshotTime, startDate, endDate, keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取热点榜分类的id与热度 - 注意：使用start_date和end_date参数需要移除snapshot_time参数才可以生效 ### 参数: - billboard_type: 榜单类型     - rise 上升热点榜     - city 城市热点榜     - total 热点总榜 - snapshot_time: 快照时间 - start_date: 快照开始时间 - end_date: 快照结束时间 - keyword: 热点搜索词 ### 返回: - 热点榜分类  # [English] ### Purpose: - Get the id and popularity of the hot list category - Note: Using start_date and end_date parameters requires removing the snapshot_time parameter - Note: snapshot_time and start_date, end_date parameters cannot be empty at the same time ### Parameters: - billboard_type: Billboard type     - rise Rising hot list     - city City hot list     - total Total hot list - snapshot_time: Snapshot time - start_date: Snapshot start time - end_date: Snapshot end time - keyword: Hot search term ### Return: - Hot category list
         * @summary 获取热点榜分类
         * @param {string} billboardType 榜单类型
         * @param {string} [snapshotTime] 快照时间 格式yyyyMMddHHmmss
         * @param {string} [startDate] 快照开始时间 格式yyyyMMdd
         * @param {string} [endDate] 快照结束时间 格式yyyyMMdd
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet_13(billboardType: string, snapshotTime?: string, startDate?: string, endDate?: string, keyword?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet_13(billboardType, snapshotTime, startDate, endDate, keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取挑战榜 ### 参数: - page: 页码 - page_size: 每页数量 - keyword: 热点搜索词 ### 返回: - 挑战榜  # [English] ### Purpose: - Get the challenge list ### Parameters: - page: Page number - page_size: Number of items per page - keyword: Hot search term ### Return: - Challenge list
         * @summary 获取挑战榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet(page: number, pageSize: number, keyword?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet(page, pageSize, keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取挑战榜 ### 参数: - page: 页码 - page_size: 每页数量 - keyword: 热点搜索词 ### 返回: - 挑战榜  # [English] ### Purpose: - Get the challenge list ### Parameters: - page: Page number - page_size: Number of items per page - keyword: Hot search term ### Return: - Challenge list
         * @summary 获取挑战榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet_14(page: number, pageSize: number, keyword?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet_14(page, pageSize, keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取同城热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - city_code: 城市编码，从城市列表获取，空为全部 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 同城热点榜  # [English] ### Purpose: - Get the city hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - city_code: City code, get from city list, empty for all - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - City hot list
         * @summary 获取同城热点榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} order 排序方式
         * @param {string} [cityCode] 城市编码，从城市列表获取，空为全部
         * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet(page: number, pageSize: number, order: string, cityCode?: string, sentenceTag?: string, keyword?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet(page, pageSize, order, cityCode, sentenceTag, keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取同城热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - city_code: 城市编码，从城市列表获取，空为全部 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 同城热点榜  # [English] ### Purpose: - Get the city hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - city_code: City code, get from city list, empty for all - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - City hot list
         * @summary 获取同城热点榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} order 排序方式
         * @param {string} [cityCode] 城市编码，从城市列表获取，空为全部
         * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet_15(page: number, pageSize: number, order: string, cityCode?: string, sentenceTag?: string, keyword?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet_15(page, pageSize, order, cityCode, sentenceTag, keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品评论分析-词云权重 ### 参数: - aweme_id: 作品id ### 返回: - 作品评论分析-词云权重  # [English] ### Purpose: - Get the work comment analysis word cloud weight ### Parameters: - aweme_id: Work id ### Return: - Work comment analysis word cloud weight
         * @summary 获取作品评论分析-词云权重
         * @param {string} awemeId 作品id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品评论分析-词云权重 ### 参数: - aweme_id: 作品id ### 返回: - 作品评论分析-词云权重  # [English] ### Purpose: - Get the work comment analysis word cloud weight ### Parameters: - aweme_id: Work id ### Return: - Work comment analysis word cloud weight
         * @summary 获取作品评论分析-词云权重
         * @param {string} awemeId 作品id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet_16(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet_16(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品数据趋势 ### 参数: - aweme_id: 作品id - option: 选项，7 点赞量 8 分享量 9 评论量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 作品数据趋势  # [English] ### Purpose: - Get the work data trend ### Parameters: - aweme_id: Work id - option: Option, 7 Like 8 Share 9 Comment - date_window: Time window, 1 by hour 2 by day ### Return: - Work data trend
         * @summary 获取作品数据趋势
         * @param {string} option 选项，7 点赞量 8 分享量 9 评论量
         * @param {string} dateWindow 时间窗口，1 按小时 2 按天
         * @param {string} [awemeId] 作品id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet(option: string, dateWindow: string, awemeId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet(option, dateWindow, awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品数据趋势 ### 参数: - aweme_id: 作品id - option: 选项，7 点赞量 8 分享量 9 评论量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 作品数据趋势  # [English] ### Purpose: - Get the work data trend ### Parameters: - aweme_id: Work id - option: Option, 7 Like 8 Share 9 Comment - date_window: Time window, 1 by hour 2 by day ### Return: - Work data trend
         * @summary 获取作品数据趋势
         * @param {string} option 选项，7 点赞量 8 分享量 9 评论量
         * @param {string} dateWindow 时间窗口，1 按小时 2 按天
         * @param {string} [awemeId] 作品id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet_17(option: string, dateWindow: string, awemeId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet_17(option, dateWindow, awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取上升热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 上升热点榜  # [English] ### Purpose: - Get the rising hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Rising hot list
         * @summary 获取上升热点榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} order 排序方式
         * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet(page: number, pageSize: number, order: string, sentenceTag?: string, keyword?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet(page, pageSize, order, sentenceTag, keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取上升热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 上升热点榜  # [English] ### Purpose: - Get the rising hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Rising hot list
         * @summary 获取上升热点榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} order 排序方式
         * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet_18(page: number, pageSize: number, order: string, sentenceTag?: string, keyword?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet_18(page, pageSize, order, sentenceTag, keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取高涨粉率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高涨粉率榜  # [English] ### Purpose: - Get the high fan rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High fan rate list
         * @summary 获取高涨粉率榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取高涨粉率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高涨粉率榜  # [English] ### Purpose: - Get the high fan rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High fan rate list
         * @summary 获取高涨粉率榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost_19(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost_19(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取高点赞率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高点赞率榜  # [English] ### Purpose: - Get the high like rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High like rate list
         * @summary 获取高点赞率榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取高点赞率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高点赞率榜  # [English] ### Purpose: - Get the high like rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High like rate list
         * @summary 获取高点赞率榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost_20(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost_20(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取高完播率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高完播率榜  # [English] ### Purpose: - Get the high completion rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High completion rate list
         * @summary 获取高完播率榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取高完播率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高完播率榜  # [English] ### Purpose: - Get the high completion rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High completion rate list
         * @summary 获取高完播率榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost_21(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost_21(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取热度飙升的搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 热度飙升的搜索榜  # [English] ### Purpose: - Get the search list with rising popularity ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list with rising popularity
         * @summary 获取热度飙升的搜索榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取热度飙升的搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 热度飙升的搜索榜  # [English] ### Purpose: - Get the search list with rising popularity ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list with rising popularity
         * @summary 获取热度飙升的搜索榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost_22(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost_22(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取热度飙升的话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 热度飙升的话题榜  # [English] ### Purpose: - Get the topic list with rising popularity ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Topic list with rising popularity
         * @summary 获取热度飙升的话题榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取热度飙升的话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 热度飙升的话题榜  # [English] ### Purpose: - Get the topic list with rising popularity ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Topic list with rising popularity
         * @summary 获取热度飙升的话题榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost_23(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost_23(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取内容词详情 ### 参数: - keyword: 搜索关键字 - word_id: 内容词id - query_day: 查询日期，格式为YYYYMMDD ### 返回: - 内容词详情  # [English] ### Purpose: - Get the details of content words ### Parameters: - keyword: Search keyword - word_id: Content word id - query_day: Query date, format is YYYYMMDD ### Return: - Details of content words
         * @summary 获取内容词详情
         * @param {string} keyword 搜索关键字
         * @param {string} wordId 内容词id
         * @param {number} queryDay 查询日期，格式为YYYYMMDD，需为当日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet(keyword: string, wordId: string, queryDay: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet(keyword, wordId, queryDay, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取内容词详情 ### 参数: - keyword: 搜索关键字 - word_id: 内容词id - query_day: 查询日期，格式为YYYYMMDD ### 返回: - 内容词详情  # [English] ### Purpose: - Get the details of content words ### Parameters: - keyword: Search keyword - word_id: Content word id - query_day: Query date, format is YYYYMMDD ### Return: - Details of content words
         * @summary 获取内容词详情
         * @param {string} keyword 搜索关键字
         * @param {string} wordId 内容词id
         * @param {number} queryDay 查询日期，格式为YYYYMMDD，需为当日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet_24(keyword: string, wordId: string, queryDay: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet_24(keyword, wordId, queryDay, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取全部内容词 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 全部内容词  # [English] ### Purpose: - Get the list of all content words ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - List of all content words
         * @summary 获取全部内容词
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取全部内容词 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 全部内容词  # [English] ### Purpose: - Get the list of all content words ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - List of all content words
         * @summary 获取全部内容词
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost_25(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost_25(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取热点总榜 ### 参数: - page: 页码 - page_size: 每页数量 - type: 快照类型 snapshot 按时刻查看 range 按时间范围。     - 备注：snapshot_time 在 snapshot时有效，start_date 和 end_date 在 range 时有效 - snapshot_time: 快照时间 格式yyyyMMddHHmmss - start_date: 快照开始时间 格式yyyyMMdd - end_date: 快照结束时间 格式yyyyMMdd - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 热点总榜  # [English] ### Purpose: - Get the total hot list ### Parameters: - page: Page number - page_size: Number of items per page - type: Snapshot type snapshot view by time range view by time range.     - Note: snapshot_time is valid when snapshot, start_date and end_date are valid when range - snapshot_time: Snapshot time format yyyyMMddHHmmss - start_date: Snapshot start time format yyyyMMdd - end_date: Snapshot end time format yyyyMMdd - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Total hot list
         * @summary 获取热点总榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} type 快照类型 snapshot 按时刻查看 range 按时间范围
         * @param {string} [snapshotTime] 快照时间 格式yyyyMMddHHmmss
         * @param {string} [startDate] 快照开始时间 格式yyyyMMdd
         * @param {string} [endDate] 快照结束时间 格式yyyyMMdd
         * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet(page: number, pageSize: number, type: string, snapshotTime?: string, startDate?: string, endDate?: string, sentenceTag?: string, keyword?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet(page, pageSize, type, snapshotTime, startDate, endDate, sentenceTag, keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取热点总榜 ### 参数: - page: 页码 - page_size: 每页数量 - type: 快照类型 snapshot 按时刻查看 range 按时间范围。     - 备注：snapshot_time 在 snapshot时有效，start_date 和 end_date 在 range 时有效 - snapshot_time: 快照时间 格式yyyyMMddHHmmss - start_date: 快照开始时间 格式yyyyMMdd - end_date: 快照结束时间 格式yyyyMMdd - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 热点总榜  # [English] ### Purpose: - Get the total hot list ### Parameters: - page: Page number - page_size: Number of items per page - type: Snapshot type snapshot view by time range view by time range.     - Note: snapshot_time is valid when snapshot, start_date and end_date are valid when range - snapshot_time: Snapshot time format yyyyMMddHHmmss - start_date: Snapshot start time format yyyyMMdd - end_date: Snapshot end time format yyyyMMdd - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Total hot list
         * @summary 获取热点总榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} type 快照类型 snapshot 按时刻查看 range 按时间范围
         * @param {string} [snapshotTime] 快照时间 格式yyyyMMddHHmmss
         * @param {string} [startDate] 快照开始时间 格式yyyyMMdd
         * @param {string} [endDate] 快照结束时间 格式yyyyMMdd
         * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet_26(page: number, pageSize: number, type: string, snapshotTime?: string, startDate?: string, endDate?: string, sentenceTag?: string, keyword?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet_26(page, pageSize, type, snapshotTime, startDate, endDate, sentenceTag, keyword, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取低粉爆款榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 低粉爆款榜  # [English] ### Purpose: - Get the low fan explosion list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Low fan explosion list
         * @summary 获取低粉爆款榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取低粉爆款榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 低粉爆款榜  # [English] ### Purpose: - Get the low fan explosion list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Low fan explosion list
         * @summary 获取低粉爆款榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost_27(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost_27(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 搜索榜  # [English] ### Purpose: - Get the search list ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list
         * @summary 获取搜索榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 搜索榜  # [English] ### Purpose: - Get the search list ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list
         * @summary 获取搜索榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost_28(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost_28(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 话题榜  # [English] ### Purpose: - Get the topic list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Topic list
         * @summary 获取话题榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 话题榜  # [English] ### Purpose: - Get the topic list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Topic list
         * @summary 获取话题榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost_29(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost_29(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取视频榜 ### 参数: - page: 页码，默认1 - page_size: 每页数量，默认10 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 视频榜  # [English] ### Purpose: - Get the video list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Video list
         * @summary 获取视频榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取视频榜 ### 参数: - page: 页码，默认1 - page_size: 每页数量，默认10 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 视频榜  # [English] ### Purpose: - Get the video list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Video list
         * @summary 获取视频榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost_30(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost_30(uNKNOWNBASETYPE, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品点赞观众画像 ### 参数: - aweme_id: 作品id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 ### 返回: - 作品点赞观众画像  # [English] ### Purpose: - Get the work like audience portrait ### Parameters: - aweme_id: Work id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution ### Return: - Work like audience portrait
         * @summary 获取作品点赞观众画像-仅限热门榜
         * @param {string} awemeId 作品id
         * @param {string} option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet(awemeId: string, option: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet(awemeId, option, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取作品点赞观众画像 ### 参数: - aweme_id: 作品id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 ### 返回: - 作品点赞观众画像  # [English] ### Purpose: - Get the work like audience portrait ### Parameters: - aweme_id: Work id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution ### Return: - Work like audience portrait
         * @summary 获取作品点赞观众画像-仅限热门榜
         * @param {string} awemeId 作品id
         * @param {string} option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet_31(awemeId: string, option: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinBillboardAPIApiAxiosParamCreator(configuration).fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet_31(awemeId, option, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DouyinBillboardAPIApi - factory interface
 * @export
 */
export const DouyinBillboardAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 获取城市列表 ### 参数: - 无 ### 返回: - 中国城市列表  # [English] ### Purpose: - Get city list ### Parameters: - None ### Return: - Chinese city list
         * @summary 获取中国城市列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCityListApiV1DouyinBillboardFetchCityListGet(options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchCityListApiV1DouyinBillboardFetchCityListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取城市列表 ### 参数: - 无 ### 返回: - 中国城市列表  # [English] ### Purpose: - Get city list ### Parameters: - None ### Return: - Chinese city list
         * @summary 获取中国城市列表
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchCityListApiV1DouyinBillboardFetchCityListGet_1(options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchCityListApiV1DouyinBillboardFetchCityListGet_1(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取垂类内容标签 ### 参数: - 无 ### 返回: - 垂类内容标签 ### 注意: - 该接口用于获取垂类内容标签，用于query_tag参数构建 ### 示例: 已知顶级垂类内容标签 `美食`，它的顶级垂类id为 `628`；`美食` 的子垂类标签 `品酒教学`，它的子垂类id为 `62802`。 那么构建标签查询参数为 `{\"value\": 628, \"children\": [{\"value\": 62808}]}`  如果需要多个子垂类标签，所有的美食子垂类标签为 `{\"value\":628,\"children\":[{\"value\":62808},{\"value\":62804},{\"value\":62806},{\"value\":62803},{\"value\":62802},{\"value\":62801},{\"value\":62811},{\"value\":62807},{\"value\":62805},{\"value\":62810}]}`  # [English] ### Purpose: - Get vertical content tags ### Parameters: - None ### Return: - Vertical content tags ### Note: - This interface is used to obtain vertical content tags, used to construct the query_tag parameter ### Example: Given the top-level vertical content tag `Food`, its top-level vertical id is `628`; `Food`\'s sub-vertical tag `Wine Tasting`, its sub-vertical id is `62802`. Then the constructed tag query parameter is `{\"value\": 628, \"children\": [{\"value\": 62808}]}`  If you need multiple sub-vertical tags, all food sub-vertical tags are `{\"value\":628,\"children\":[{\"value\":62808},{\"value\":62804},{\"value\":62806},{\"value\":62803},{\"value\":62802},{\"value\":62801},{\"value\":62811},{\"value\":62807},{\"value\":62805},{\"value\":62810}]}`
         * @summary 获取垂类内容标签
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchContentTagApiV1DouyinBillboardFetchContentTagGet(options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchContentTagApiV1DouyinBillboardFetchContentTagGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取垂类内容标签 ### 参数: - 无 ### 返回: - 垂类内容标签 ### 注意: - 该接口用于获取垂类内容标签，用于query_tag参数构建 ### 示例: 已知顶级垂类内容标签 `美食`，它的顶级垂类id为 `628`；`美食` 的子垂类标签 `品酒教学`，它的子垂类id为 `62802`。 那么构建标签查询参数为 `{\"value\": 628, \"children\": [{\"value\": 62808}]}`  如果需要多个子垂类标签，所有的美食子垂类标签为 `{\"value\":628,\"children\":[{\"value\":62808},{\"value\":62804},{\"value\":62806},{\"value\":62803},{\"value\":62802},{\"value\":62801},{\"value\":62811},{\"value\":62807},{\"value\":62805},{\"value\":62810}]}`  # [English] ### Purpose: - Get vertical content tags ### Parameters: - None ### Return: - Vertical content tags ### Note: - This interface is used to obtain vertical content tags, used to construct the query_tag parameter ### Example: Given the top-level vertical content tag `Food`, its top-level vertical id is `628`; `Food`\'s sub-vertical tag `Wine Tasting`, its sub-vertical id is `62802`. Then the constructed tag query parameter is `{\"value\": 628, \"children\": [{\"value\": 62808}]}`  If you need multiple sub-vertical tags, all food sub-vertical tags are `{\"value\":628,\"children\":[{\"value\":62808},{\"value\":62804},{\"value\":62806},{\"value\":62803},{\"value\":62802},{\"value\":62801},{\"value\":62811},{\"value\":62807},{\"value\":62805},{\"value\":62810}]}`
         * @summary 获取垂类内容标签
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchContentTagApiV1DouyinBillboardFetchContentTagGet_2(options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchContentTagApiV1DouyinBillboardFetchContentTagGet_2(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取粉丝兴趣作者 20个用户 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝兴趣作者 20个用户  # [English] ### Purpose: - Get the fan interest author 20 users ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest author 20 users
         * @summary 获取粉丝兴趣作者 20个用户
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet(secUid: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet(secUid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取粉丝兴趣作者 20个用户 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝兴趣作者 20个用户  # [English] ### Purpose: - Get the fan interest author 20 users ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest author 20 users
         * @summary 获取粉丝兴趣作者 20个用户
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet_3(secUid: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet_3(secUid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取粉丝近3天搜索词 10个搜索词 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天搜索词 10个搜索词  # [English] ### Purpose: - Get the fan interest search term in the last 3 days 10 search terms ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest search term in the last 3 days 10 search terms
         * @summary 获取粉丝近3天搜索词 10个搜索词
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet(secUid: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet(secUid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取粉丝近3天搜索词 10个搜索词 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天搜索词 10个搜索词  # [English] ### Purpose: - Get the fan interest search term in the last 3 days 10 search terms ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest search term in the last 3 days 10 search terms
         * @summary 获取粉丝近3天搜索词 10个搜索词
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet_4(secUid: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet_4(secUid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取粉丝近3天感兴趣的话题 10个话题 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天感兴趣的话题 10个话题  # [English] ### Purpose: - Get the fan interest topic in the last 3 days 10 topics ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest topic in the last 3 days 10 topics
         * @summary 获取粉丝近3天感兴趣的话题 10个话题
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet(secUid: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet(secUid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取粉丝近3天感兴趣的话题 10个话题 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天感兴趣的话题 10个话题  # [English] ### Purpose: - Get the fan interest topic in the last 3 days 10 topics ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest topic in the last 3 days 10 topics
         * @summary 获取粉丝近3天感兴趣的话题 10个话题
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet_5(secUid: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet_5(secUid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取粉丝画像 ### 参数: - sec_uid: 用户sec_id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比 ### 返回: - 粉丝画像  # [English] ### Purpose: - Get the fan portrait ### Parameters: - sec_uid: User sec_id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution     - 8 Interest tag analysis percentage ### Return: - Fan portrait
         * @summary 获取粉丝画像
         * @param {string} secUid 用户sec_id
         * @param {string} option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet(secUid: string, option: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet(secUid, option, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取粉丝画像 ### 参数: - sec_uid: 用户sec_id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比 ### 返回: - 粉丝画像  # [English] ### Purpose: - Get the fan portrait ### Parameters: - sec_uid: User sec_id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution     - 8 Interest tag analysis percentage ### Return: - Fan portrait
         * @summary 获取粉丝画像
         * @param {string} secUid 用户sec_id
         * @param {string} option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet_6(secUid: string, option: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet_6(secUid, option, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取账号作品分析 ### 参数: - sec_uid: 用户sec_id - day: 天数，默认7天 ### 返回: - 账号作品分析  # [English] ### Purpose: - Get the account work analysis ### Parameters: - sec_uid: User sec_id - day: Number of days, default 7 days ### Return: - Account work analysis
         * @summary 获取账号作品分析-上周
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet(secUid: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet(secUid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取账号作品分析 ### 参数: - sec_uid: 用户sec_id - day: 天数，默认7天 ### 返回: - 账号作品分析  # [English] ### Purpose: - Get the account work analysis ### Parameters: - sec_uid: User sec_id - day: Number of days, default 7 days ### Return: - Account work analysis
         * @summary 获取账号作品分析-上周
         * @param {string} secUid 用户sec_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet_7(secUid: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet_7(secUid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取热门账号 ### 参数: - date_window: 时间窗口，格式 小时，默认24小时 - page_num: 页码，默认1 - page_size: 每页数量，默认20 - query_tag: 子级垂类标签，空则为全部，多个标签需传入 {\"value\": \"{顶级垂类标签id}\", \"children\": [     {\"value\": \"{子级垂类标签id}\"},     {\"value\": \"{子级垂类标签id}\"} ]} ### 返回: - 热门账号  # [English] ### Purpose: - Get the hot account ### Parameters: - date_window: Time window, format hour, default 24 hours - page_num: Page number, default 1 - page_size: Number of items per page, default 20 - query_tag: Sub-level vertical category tag, empty for all, multiple tags need to be passed in {\"value\": \"{top-level vertical category id}\", \"children\": [     {\"value\": \"{sub-level vertical category id}\"},     {\"value\": \"{sub-level vertical category id}\"} ]} ### Return: - Hot account
         * @summary 获取热门账号
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取热门账号 ### 参数: - date_window: 时间窗口，格式 小时，默认24小时 - page_num: 页码，默认1 - page_size: 每页数量，默认20 - query_tag: 子级垂类标签，空则为全部，多个标签需传入 {\"value\": \"{顶级垂类标签id}\", \"children\": [     {\"value\": \"{子级垂类标签id}\"},     {\"value\": \"{子级垂类标签id}\"} ]} ### 返回: - 热门账号  # [English] ### Purpose: - Get the hot account ### Parameters: - date_window: Time window, format hour, default 24 hours - page_num: Page number, default 1 - page_size: Number of items per page, default 20 - query_tag: Sub-level vertical category tag, empty for all, multiple tags need to be passed in {\"value\": \"{top-level vertical category id}\", \"children\": [     {\"value\": \"{sub-level vertical category id}\"},     {\"value\": \"{sub-level vertical category id}\"} ]} ### Return: - Hot account
         * @summary 获取热门账号
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost_8(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost_8(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取搜索用户名或抖音号 ### 参数: - keyword: 搜索的用户名或抖音号 - cursor: 游标，默认空 ### 返回: - 搜索结果  # [English] ### Purpose: - Get the search username or Douyin number ### Parameters: - keyword: Search username or Douyin number - cursor: Cursor, default empty ### Return: - Search result
         * @summary 获取搜索用户名或抖音号
         * @param {string} keyword 搜索的用户名或抖音号
         * @param {number} cursor 游标，默认空
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet(keyword: string, cursor: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet(keyword, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取搜索用户名或抖音号 ### 参数: - keyword: 搜索的用户名或抖音号 - cursor: 游标，默认空 ### 返回: - 搜索结果  # [English] ### Purpose: - Get the search username or Douyin number ### Parameters: - keyword: Search username or Douyin number - cursor: Cursor, default empty ### Return: - Search result
         * @summary 获取搜索用户名或抖音号
         * @param {string} keyword 搜索的用户名或抖音号
         * @param {number} cursor 游标，默认空
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet_9(keyword: string, cursor: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet_9(keyword, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取账号粉丝数据趋势 ### 参数: - sec_uid: 用户sec_id - option: 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 账号粉丝数据趋势  # [English] ### Purpose: - Get the account fan data trend ### Parameters: - sec_uid: User sec_id - option: Option, 2 New like 3 New work 4 New comment 5 New share - date_window: Time window, 1 by hour 2 by day ### Return: - Account fan data trend
         * @summary 获取账号粉丝数据趋势
         * @param {string} secUid 用户sec_id
         * @param {string} option 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量
         * @param {string} dateWindow 时间窗口，1 按小时 2 按天
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet(secUid: string, option: string, dateWindow: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet(secUid, option, dateWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取账号粉丝数据趋势 ### 参数: - sec_uid: 用户sec_id - option: 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 账号粉丝数据趋势  # [English] ### Purpose: - Get the account fan data trend ### Parameters: - sec_uid: User sec_id - option: Option, 2 New like 3 New work 4 New comment 5 New share - date_window: Time window, 1 by hour 2 by day ### Return: - Account fan data trend
         * @summary 获取账号粉丝数据趋势
         * @param {string} secUid 用户sec_id
         * @param {string} option 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量
         * @param {string} dateWindow 时间窗口，1 按小时 2 按天
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet_10(secUid: string, option: string, dateWindow: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet_10(secUid, option, dateWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取活动日历详情 ### 参数: - calendar_id: 活动id ### 返回: - 活动日历详情  # [English] ### Purpose: - Get the activity calendar details ### Parameters: - calendar_id: Activity id ### Return: - Activity calendar details
         * @summary 获取活动日历详情
         * @param {string} calendarId 活动id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet(calendarId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet(calendarId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取活动日历详情 ### 参数: - calendar_id: 活动id ### 返回: - 活动日历详情  # [English] ### Purpose: - Get the activity calendar details ### Parameters: - calendar_id: Activity id ### Return: - Activity calendar details
         * @summary 获取活动日历详情
         * @param {string} calendarId 活动id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet_11(calendarId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet_11(calendarId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取活动日历 ### 参数: - city_code: 城市编码，从城市列表获取，空为全部 - category_code: 热点榜分类编码，从热点榜分类获取，空为全部 - end_date: 快照结束时间 格式10位时间戳 - start_date: 快照开始时间 格式10位时间戳 ### 返回: - 活动日历  # [English] ### Purpose: - Get the activity calendar ### Parameters: - city_code: City code, get from city list, empty for all - category_code: Hot list category code, get from hot list category, empty for all - end_date: Snapshot end time format 10 digit timestamp - start_date: Snapshot start time format 10 digit timestamp ### Return: - Activity calendar
         * @summary 获取活动日历
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取活动日历 ### 参数: - city_code: 城市编码，从城市列表获取，空为全部 - category_code: 热点榜分类编码，从热点榜分类获取，空为全部 - end_date: 快照结束时间 格式10位时间戳 - start_date: 快照开始时间 格式10位时间戳 ### 返回: - 活动日历  # [English] ### Purpose: - Get the activity calendar ### Parameters: - city_code: City code, get from city list, empty for all - category_code: Hot list category code, get from hot list category, empty for all - end_date: Snapshot end time format 10 digit timestamp - start_date: Snapshot start time format 10 digit timestamp ### Return: - Activity calendar
         * @summary 获取活动日历
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost_12(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost_12(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取热点榜分类的id与热度 - 注意：使用start_date和end_date参数需要移除snapshot_time参数才可以生效 ### 参数: - billboard_type: 榜单类型     - rise 上升热点榜     - city 城市热点榜     - total 热点总榜 - snapshot_time: 快照时间 - start_date: 快照开始时间 - end_date: 快照结束时间 - keyword: 热点搜索词 ### 返回: - 热点榜分类  # [English] ### Purpose: - Get the id and popularity of the hot list category - Note: Using start_date and end_date parameters requires removing the snapshot_time parameter - Note: snapshot_time and start_date, end_date parameters cannot be empty at the same time ### Parameters: - billboard_type: Billboard type     - rise Rising hot list     - city City hot list     - total Total hot list - snapshot_time: Snapshot time - start_date: Snapshot start time - end_date: Snapshot end time - keyword: Hot search term ### Return: - Hot category list
         * @summary 获取热点榜分类
         * @param {string} billboardType 榜单类型
         * @param {string} [snapshotTime] 快照时间 格式yyyyMMddHHmmss
         * @param {string} [startDate] 快照开始时间 格式yyyyMMdd
         * @param {string} [endDate] 快照结束时间 格式yyyyMMdd
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet(billboardType: string, snapshotTime?: string, startDate?: string, endDate?: string, keyword?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet(billboardType, snapshotTime, startDate, endDate, keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取热点榜分类的id与热度 - 注意：使用start_date和end_date参数需要移除snapshot_time参数才可以生效 ### 参数: - billboard_type: 榜单类型     - rise 上升热点榜     - city 城市热点榜     - total 热点总榜 - snapshot_time: 快照时间 - start_date: 快照开始时间 - end_date: 快照结束时间 - keyword: 热点搜索词 ### 返回: - 热点榜分类  # [English] ### Purpose: - Get the id and popularity of the hot list category - Note: Using start_date and end_date parameters requires removing the snapshot_time parameter - Note: snapshot_time and start_date, end_date parameters cannot be empty at the same time ### Parameters: - billboard_type: Billboard type     - rise Rising hot list     - city City hot list     - total Total hot list - snapshot_time: Snapshot time - start_date: Snapshot start time - end_date: Snapshot end time - keyword: Hot search term ### Return: - Hot category list
         * @summary 获取热点榜分类
         * @param {string} billboardType 榜单类型
         * @param {string} [snapshotTime] 快照时间 格式yyyyMMddHHmmss
         * @param {string} [startDate] 快照开始时间 格式yyyyMMdd
         * @param {string} [endDate] 快照结束时间 格式yyyyMMdd
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet_13(billboardType: string, snapshotTime?: string, startDate?: string, endDate?: string, keyword?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet_13(billboardType, snapshotTime, startDate, endDate, keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取挑战榜 ### 参数: - page: 页码 - page_size: 每页数量 - keyword: 热点搜索词 ### 返回: - 挑战榜  # [English] ### Purpose: - Get the challenge list ### Parameters: - page: Page number - page_size: Number of items per page - keyword: Hot search term ### Return: - Challenge list
         * @summary 获取挑战榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet(page: number, pageSize: number, keyword?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet(page, pageSize, keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取挑战榜 ### 参数: - page: 页码 - page_size: 每页数量 - keyword: 热点搜索词 ### 返回: - 挑战榜  # [English] ### Purpose: - Get the challenge list ### Parameters: - page: Page number - page_size: Number of items per page - keyword: Hot search term ### Return: - Challenge list
         * @summary 获取挑战榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet_14(page: number, pageSize: number, keyword?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet_14(page, pageSize, keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取同城热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - city_code: 城市编码，从城市列表获取，空为全部 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 同城热点榜  # [English] ### Purpose: - Get the city hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - city_code: City code, get from city list, empty for all - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - City hot list
         * @summary 获取同城热点榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} order 排序方式
         * @param {string} [cityCode] 城市编码，从城市列表获取，空为全部
         * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet(page: number, pageSize: number, order: string, cityCode?: string, sentenceTag?: string, keyword?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet(page, pageSize, order, cityCode, sentenceTag, keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取同城热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - city_code: 城市编码，从城市列表获取，空为全部 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 同城热点榜  # [English] ### Purpose: - Get the city hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - city_code: City code, get from city list, empty for all - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - City hot list
         * @summary 获取同城热点榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} order 排序方式
         * @param {string} [cityCode] 城市编码，从城市列表获取，空为全部
         * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet_15(page: number, pageSize: number, order: string, cityCode?: string, sentenceTag?: string, keyword?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet_15(page, pageSize, order, cityCode, sentenceTag, keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取作品评论分析-词云权重 ### 参数: - aweme_id: 作品id ### 返回: - 作品评论分析-词云权重  # [English] ### Purpose: - Get the work comment analysis word cloud weight ### Parameters: - aweme_id: Work id ### Return: - Work comment analysis word cloud weight
         * @summary 获取作品评论分析-词云权重
         * @param {string} awemeId 作品id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取作品评论分析-词云权重 ### 参数: - aweme_id: 作品id ### 返回: - 作品评论分析-词云权重  # [English] ### Purpose: - Get the work comment analysis word cloud weight ### Parameters: - aweme_id: Work id ### Return: - Work comment analysis word cloud weight
         * @summary 获取作品评论分析-词云权重
         * @param {string} awemeId 作品id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet_16(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet_16(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取作品数据趋势 ### 参数: - aweme_id: 作品id - option: 选项，7 点赞量 8 分享量 9 评论量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 作品数据趋势  # [English] ### Purpose: - Get the work data trend ### Parameters: - aweme_id: Work id - option: Option, 7 Like 8 Share 9 Comment - date_window: Time window, 1 by hour 2 by day ### Return: - Work data trend
         * @summary 获取作品数据趋势
         * @param {string} option 选项，7 点赞量 8 分享量 9 评论量
         * @param {string} dateWindow 时间窗口，1 按小时 2 按天
         * @param {string} [awemeId] 作品id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet(option: string, dateWindow: string, awemeId?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet(option, dateWindow, awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取作品数据趋势 ### 参数: - aweme_id: 作品id - option: 选项，7 点赞量 8 分享量 9 评论量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 作品数据趋势  # [English] ### Purpose: - Get the work data trend ### Parameters: - aweme_id: Work id - option: Option, 7 Like 8 Share 9 Comment - date_window: Time window, 1 by hour 2 by day ### Return: - Work data trend
         * @summary 获取作品数据趋势
         * @param {string} option 选项，7 点赞量 8 分享量 9 评论量
         * @param {string} dateWindow 时间窗口，1 按小时 2 按天
         * @param {string} [awemeId] 作品id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet_17(option: string, dateWindow: string, awemeId?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet_17(option, dateWindow, awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取上升热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 上升热点榜  # [English] ### Purpose: - Get the rising hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Rising hot list
         * @summary 获取上升热点榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} order 排序方式
         * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet(page: number, pageSize: number, order: string, sentenceTag?: string, keyword?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet(page, pageSize, order, sentenceTag, keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取上升热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 上升热点榜  # [English] ### Purpose: - Get the rising hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Rising hot list
         * @summary 获取上升热点榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} order 排序方式
         * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet_18(page: number, pageSize: number, order: string, sentenceTag?: string, keyword?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet_18(page, pageSize, order, sentenceTag, keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取高涨粉率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高涨粉率榜  # [English] ### Purpose: - Get the high fan rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High fan rate list
         * @summary 获取高涨粉率榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取高涨粉率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高涨粉率榜  # [English] ### Purpose: - Get the high fan rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High fan rate list
         * @summary 获取高涨粉率榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost_19(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost_19(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取高点赞率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高点赞率榜  # [English] ### Purpose: - Get the high like rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High like rate list
         * @summary 获取高点赞率榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取高点赞率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高点赞率榜  # [English] ### Purpose: - Get the high like rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High like rate list
         * @summary 获取高点赞率榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost_20(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost_20(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取高完播率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高完播率榜  # [English] ### Purpose: - Get the high completion rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High completion rate list
         * @summary 获取高完播率榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取高完播率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高完播率榜  # [English] ### Purpose: - Get the high completion rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High completion rate list
         * @summary 获取高完播率榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost_21(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost_21(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取热度飙升的搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 热度飙升的搜索榜  # [English] ### Purpose: - Get the search list with rising popularity ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list with rising popularity
         * @summary 获取热度飙升的搜索榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取热度飙升的搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 热度飙升的搜索榜  # [English] ### Purpose: - Get the search list with rising popularity ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list with rising popularity
         * @summary 获取热度飙升的搜索榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost_22(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost_22(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取热度飙升的话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 热度飙升的话题榜  # [English] ### Purpose: - Get the topic list with rising popularity ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Topic list with rising popularity
         * @summary 获取热度飙升的话题榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取热度飙升的话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 热度飙升的话题榜  # [English] ### Purpose: - Get the topic list with rising popularity ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Topic list with rising popularity
         * @summary 获取热度飙升的话题榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost_23(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost_23(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取内容词详情 ### 参数: - keyword: 搜索关键字 - word_id: 内容词id - query_day: 查询日期，格式为YYYYMMDD ### 返回: - 内容词详情  # [English] ### Purpose: - Get the details of content words ### Parameters: - keyword: Search keyword - word_id: Content word id - query_day: Query date, format is YYYYMMDD ### Return: - Details of content words
         * @summary 获取内容词详情
         * @param {string} keyword 搜索关键字
         * @param {string} wordId 内容词id
         * @param {number} queryDay 查询日期，格式为YYYYMMDD，需为当日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet(keyword: string, wordId: string, queryDay: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet(keyword, wordId, queryDay, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取内容词详情 ### 参数: - keyword: 搜索关键字 - word_id: 内容词id - query_day: 查询日期，格式为YYYYMMDD ### 返回: - 内容词详情  # [English] ### Purpose: - Get the details of content words ### Parameters: - keyword: Search keyword - word_id: Content word id - query_day: Query date, format is YYYYMMDD ### Return: - Details of content words
         * @summary 获取内容词详情
         * @param {string} keyword 搜索关键字
         * @param {string} wordId 内容词id
         * @param {number} queryDay 查询日期，格式为YYYYMMDD，需为当日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet_24(keyword: string, wordId: string, queryDay: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet_24(keyword, wordId, queryDay, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取全部内容词 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 全部内容词  # [English] ### Purpose: - Get the list of all content words ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - List of all content words
         * @summary 获取全部内容词
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取全部内容词 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 全部内容词  # [English] ### Purpose: - Get the list of all content words ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - List of all content words
         * @summary 获取全部内容词
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost_25(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost_25(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取热点总榜 ### 参数: - page: 页码 - page_size: 每页数量 - type: 快照类型 snapshot 按时刻查看 range 按时间范围。     - 备注：snapshot_time 在 snapshot时有效，start_date 和 end_date 在 range 时有效 - snapshot_time: 快照时间 格式yyyyMMddHHmmss - start_date: 快照开始时间 格式yyyyMMdd - end_date: 快照结束时间 格式yyyyMMdd - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 热点总榜  # [English] ### Purpose: - Get the total hot list ### Parameters: - page: Page number - page_size: Number of items per page - type: Snapshot type snapshot view by time range view by time range.     - Note: snapshot_time is valid when snapshot, start_date and end_date are valid when range - snapshot_time: Snapshot time format yyyyMMddHHmmss - start_date: Snapshot start time format yyyyMMdd - end_date: Snapshot end time format yyyyMMdd - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Total hot list
         * @summary 获取热点总榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} type 快照类型 snapshot 按时刻查看 range 按时间范围
         * @param {string} [snapshotTime] 快照时间 格式yyyyMMddHHmmss
         * @param {string} [startDate] 快照开始时间 格式yyyyMMdd
         * @param {string} [endDate] 快照结束时间 格式yyyyMMdd
         * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet(page: number, pageSize: number, type: string, snapshotTime?: string, startDate?: string, endDate?: string, sentenceTag?: string, keyword?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet(page, pageSize, type, snapshotTime, startDate, endDate, sentenceTag, keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取热点总榜 ### 参数: - page: 页码 - page_size: 每页数量 - type: 快照类型 snapshot 按时刻查看 range 按时间范围。     - 备注：snapshot_time 在 snapshot时有效，start_date 和 end_date 在 range 时有效 - snapshot_time: 快照时间 格式yyyyMMddHHmmss - start_date: 快照开始时间 格式yyyyMMdd - end_date: 快照结束时间 格式yyyyMMdd - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 热点总榜  # [English] ### Purpose: - Get the total hot list ### Parameters: - page: Page number - page_size: Number of items per page - type: Snapshot type snapshot view by time range view by time range.     - Note: snapshot_time is valid when snapshot, start_date and end_date are valid when range - snapshot_time: Snapshot time format yyyyMMddHHmmss - start_date: Snapshot start time format yyyyMMdd - end_date: Snapshot end time format yyyyMMdd - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Total hot list
         * @summary 获取热点总榜
         * @param {number} page 页码
         * @param {number} pageSize 每页数量
         * @param {string} type 快照类型 snapshot 按时刻查看 range 按时间范围
         * @param {string} [snapshotTime] 快照时间 格式yyyyMMddHHmmss
         * @param {string} [startDate] 快照开始时间 格式yyyyMMdd
         * @param {string} [endDate] 快照结束时间 格式yyyyMMdd
         * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
         * @param {string} [keyword] 热点搜索词
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet_26(page: number, pageSize: number, type: string, snapshotTime?: string, startDate?: string, endDate?: string, sentenceTag?: string, keyword?: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet_26(page, pageSize, type, snapshotTime, startDate, endDate, sentenceTag, keyword, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取低粉爆款榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 低粉爆款榜  # [English] ### Purpose: - Get the low fan explosion list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Low fan explosion list
         * @summary 获取低粉爆款榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取低粉爆款榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 低粉爆款榜  # [English] ### Purpose: - Get the low fan explosion list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Low fan explosion list
         * @summary 获取低粉爆款榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost_27(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost_27(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 搜索榜  # [English] ### Purpose: - Get the search list ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list
         * @summary 获取搜索榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 搜索榜  # [English] ### Purpose: - Get the search list ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list
         * @summary 获取搜索榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost_28(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost_28(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 话题榜  # [English] ### Purpose: - Get the topic list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Topic list
         * @summary 获取话题榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 话题榜  # [English] ### Purpose: - Get the topic list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Topic list
         * @summary 获取话题榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost_29(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost_29(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取视频榜 ### 参数: - page: 页码，默认1 - page_size: 每页数量，默认10 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 视频榜  # [English] ### Purpose: - Get the video list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Video list
         * @summary 获取视频榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取视频榜 ### 参数: - page: 页码，默认1 - page_size: 每页数量，默认10 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 视频榜  # [English] ### Purpose: - Get the video list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Video list
         * @summary 获取视频榜
         * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost_30(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost_30(uNKNOWNBASETYPE, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取作品点赞观众画像 ### 参数: - aweme_id: 作品id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 ### 返回: - 作品点赞观众画像  # [English] ### Purpose: - Get the work like audience portrait ### Parameters: - aweme_id: Work id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution ### Return: - Work like audience portrait
         * @summary 获取作品点赞观众画像-仅限热门榜
         * @param {string} awemeId 作品id
         * @param {string} option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet(awemeId: string, option: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet(awemeId, option, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取作品点赞观众画像 ### 参数: - aweme_id: 作品id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 ### 返回: - 作品点赞观众画像  # [English] ### Purpose: - Get the work like audience portrait ### Parameters: - aweme_id: Work id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution ### Return: - Work like audience portrait
         * @summary 获取作品点赞观众画像-仅限热门榜
         * @param {string} awemeId 作品id
         * @param {string} option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet_31(awemeId: string, option: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinBillboardAPIApiFp(configuration).fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet_31(awemeId, option, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DouyinBillboardAPIApi - interface
 * @export
 * @interface DouyinBillboardAPIApi
 */
export interface DouyinBillboardAPIApiInterface {
    /**
     * # [中文] ### 用途: - 获取城市列表 ### 参数: - 无 ### 返回: - 中国城市列表  # [English] ### Purpose: - Get city list ### Parameters: - None ### Return: - Chinese city list
     * @summary 获取中国城市列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchCityListApiV1DouyinBillboardFetchCityListGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取城市列表 ### 参数: - 无 ### 返回: - 中国城市列表  # [English] ### Purpose: - Get city list ### Parameters: - None ### Return: - Chinese city list
     * @summary 获取中国城市列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchCityListApiV1DouyinBillboardFetchCityListGet_1(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取垂类内容标签 ### 参数: - 无 ### 返回: - 垂类内容标签 ### 注意: - 该接口用于获取垂类内容标签，用于query_tag参数构建 ### 示例: 已知顶级垂类内容标签 `美食`，它的顶级垂类id为 `628`；`美食` 的子垂类标签 `品酒教学`，它的子垂类id为 `62802`。 那么构建标签查询参数为 `{\"value\": 628, \"children\": [{\"value\": 62808}]}`  如果需要多个子垂类标签，所有的美食子垂类标签为 `{\"value\":628,\"children\":[{\"value\":62808},{\"value\":62804},{\"value\":62806},{\"value\":62803},{\"value\":62802},{\"value\":62801},{\"value\":62811},{\"value\":62807},{\"value\":62805},{\"value\":62810}]}`  # [English] ### Purpose: - Get vertical content tags ### Parameters: - None ### Return: - Vertical content tags ### Note: - This interface is used to obtain vertical content tags, used to construct the query_tag parameter ### Example: Given the top-level vertical content tag `Food`, its top-level vertical id is `628`; `Food`\'s sub-vertical tag `Wine Tasting`, its sub-vertical id is `62802`. Then the constructed tag query parameter is `{\"value\": 628, \"children\": [{\"value\": 62808}]}`  If you need multiple sub-vertical tags, all food sub-vertical tags are `{\"value\":628,\"children\":[{\"value\":62808},{\"value\":62804},{\"value\":62806},{\"value\":62803},{\"value\":62802},{\"value\":62801},{\"value\":62811},{\"value\":62807},{\"value\":62805},{\"value\":62810}]}`
     * @summary 获取垂类内容标签
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchContentTagApiV1DouyinBillboardFetchContentTagGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取垂类内容标签 ### 参数: - 无 ### 返回: - 垂类内容标签 ### 注意: - 该接口用于获取垂类内容标签，用于query_tag参数构建 ### 示例: 已知顶级垂类内容标签 `美食`，它的顶级垂类id为 `628`；`美食` 的子垂类标签 `品酒教学`，它的子垂类id为 `62802`。 那么构建标签查询参数为 `{\"value\": 628, \"children\": [{\"value\": 62808}]}`  如果需要多个子垂类标签，所有的美食子垂类标签为 `{\"value\":628,\"children\":[{\"value\":62808},{\"value\":62804},{\"value\":62806},{\"value\":62803},{\"value\":62802},{\"value\":62801},{\"value\":62811},{\"value\":62807},{\"value\":62805},{\"value\":62810}]}`  # [English] ### Purpose: - Get vertical content tags ### Parameters: - None ### Return: - Vertical content tags ### Note: - This interface is used to obtain vertical content tags, used to construct the query_tag parameter ### Example: Given the top-level vertical content tag `Food`, its top-level vertical id is `628`; `Food`\'s sub-vertical tag `Wine Tasting`, its sub-vertical id is `62802`. Then the constructed tag query parameter is `{\"value\": 628, \"children\": [{\"value\": 62808}]}`  If you need multiple sub-vertical tags, all food sub-vertical tags are `{\"value\":628,\"children\":[{\"value\":62808},{\"value\":62804},{\"value\":62806},{\"value\":62803},{\"value\":62802},{\"value\":62801},{\"value\":62811},{\"value\":62807},{\"value\":62805},{\"value\":62810}]}`
     * @summary 获取垂类内容标签
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchContentTagApiV1DouyinBillboardFetchContentTagGet_2(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取粉丝兴趣作者 20个用户 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝兴趣作者 20个用户  # [English] ### Purpose: - Get the fan interest author 20 users ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest author 20 users
     * @summary 获取粉丝兴趣作者 20个用户
     * @param {string} secUid 用户sec_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet(secUid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取粉丝兴趣作者 20个用户 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝兴趣作者 20个用户  # [English] ### Purpose: - Get the fan interest author 20 users ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest author 20 users
     * @summary 获取粉丝兴趣作者 20个用户
     * @param {string} secUid 用户sec_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet_3(secUid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取粉丝近3天搜索词 10个搜索词 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天搜索词 10个搜索词  # [English] ### Purpose: - Get the fan interest search term in the last 3 days 10 search terms ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest search term in the last 3 days 10 search terms
     * @summary 获取粉丝近3天搜索词 10个搜索词
     * @param {string} secUid 用户sec_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet(secUid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取粉丝近3天搜索词 10个搜索词 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天搜索词 10个搜索词  # [English] ### Purpose: - Get the fan interest search term in the last 3 days 10 search terms ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest search term in the last 3 days 10 search terms
     * @summary 获取粉丝近3天搜索词 10个搜索词
     * @param {string} secUid 用户sec_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet_4(secUid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取粉丝近3天感兴趣的话题 10个话题 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天感兴趣的话题 10个话题  # [English] ### Purpose: - Get the fan interest topic in the last 3 days 10 topics ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest topic in the last 3 days 10 topics
     * @summary 获取粉丝近3天感兴趣的话题 10个话题
     * @param {string} secUid 用户sec_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet(secUid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取粉丝近3天感兴趣的话题 10个话题 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天感兴趣的话题 10个话题  # [English] ### Purpose: - Get the fan interest topic in the last 3 days 10 topics ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest topic in the last 3 days 10 topics
     * @summary 获取粉丝近3天感兴趣的话题 10个话题
     * @param {string} secUid 用户sec_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet_5(secUid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取粉丝画像 ### 参数: - sec_uid: 用户sec_id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比 ### 返回: - 粉丝画像  # [English] ### Purpose: - Get the fan portrait ### Parameters: - sec_uid: User sec_id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution     - 8 Interest tag analysis percentage ### Return: - Fan portrait
     * @summary 获取粉丝画像
     * @param {string} secUid 用户sec_id
     * @param {string} option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet(secUid: string, option: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取粉丝画像 ### 参数: - sec_uid: 用户sec_id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比 ### 返回: - 粉丝画像  # [English] ### Purpose: - Get the fan portrait ### Parameters: - sec_uid: User sec_id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution     - 8 Interest tag analysis percentage ### Return: - Fan portrait
     * @summary 获取粉丝画像
     * @param {string} secUid 用户sec_id
     * @param {string} option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet_6(secUid: string, option: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取账号作品分析 ### 参数: - sec_uid: 用户sec_id - day: 天数，默认7天 ### 返回: - 账号作品分析  # [English] ### Purpose: - Get the account work analysis ### Parameters: - sec_uid: User sec_id - day: Number of days, default 7 days ### Return: - Account work analysis
     * @summary 获取账号作品分析-上周
     * @param {string} secUid 用户sec_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet(secUid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取账号作品分析 ### 参数: - sec_uid: 用户sec_id - day: 天数，默认7天 ### 返回: - 账号作品分析  # [English] ### Purpose: - Get the account work analysis ### Parameters: - sec_uid: User sec_id - day: Number of days, default 7 days ### Return: - Account work analysis
     * @summary 获取账号作品分析-上周
     * @param {string} secUid 用户sec_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet_7(secUid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取热门账号 ### 参数: - date_window: 时间窗口，格式 小时，默认24小时 - page_num: 页码，默认1 - page_size: 每页数量，默认20 - query_tag: 子级垂类标签，空则为全部，多个标签需传入 {\"value\": \"{顶级垂类标签id}\", \"children\": [     {\"value\": \"{子级垂类标签id}\"},     {\"value\": \"{子级垂类标签id}\"} ]} ### 返回: - 热门账号  # [English] ### Purpose: - Get the hot account ### Parameters: - date_window: Time window, format hour, default 24 hours - page_num: Page number, default 1 - page_size: Number of items per page, default 20 - query_tag: Sub-level vertical category tag, empty for all, multiple tags need to be passed in {\"value\": \"{top-level vertical category id}\", \"children\": [     {\"value\": \"{sub-level vertical category id}\"},     {\"value\": \"{sub-level vertical category id}\"} ]} ### Return: - Hot account
     * @summary 获取热门账号
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取热门账号 ### 参数: - date_window: 时间窗口，格式 小时，默认24小时 - page_num: 页码，默认1 - page_size: 每页数量，默认20 - query_tag: 子级垂类标签，空则为全部，多个标签需传入 {\"value\": \"{顶级垂类标签id}\", \"children\": [     {\"value\": \"{子级垂类标签id}\"},     {\"value\": \"{子级垂类标签id}\"} ]} ### 返回: - 热门账号  # [English] ### Purpose: - Get the hot account ### Parameters: - date_window: Time window, format hour, default 24 hours - page_num: Page number, default 1 - page_size: Number of items per page, default 20 - query_tag: Sub-level vertical category tag, empty for all, multiple tags need to be passed in {\"value\": \"{top-level vertical category id}\", \"children\": [     {\"value\": \"{sub-level vertical category id}\"},     {\"value\": \"{sub-level vertical category id}\"} ]} ### Return: - Hot account
     * @summary 获取热门账号
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost_8(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取搜索用户名或抖音号 ### 参数: - keyword: 搜索的用户名或抖音号 - cursor: 游标，默认空 ### 返回: - 搜索结果  # [English] ### Purpose: - Get the search username or Douyin number ### Parameters: - keyword: Search username or Douyin number - cursor: Cursor, default empty ### Return: - Search result
     * @summary 获取搜索用户名或抖音号
     * @param {string} keyword 搜索的用户名或抖音号
     * @param {number} cursor 游标，默认空
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet(keyword: string, cursor: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取搜索用户名或抖音号 ### 参数: - keyword: 搜索的用户名或抖音号 - cursor: 游标，默认空 ### 返回: - 搜索结果  # [English] ### Purpose: - Get the search username or Douyin number ### Parameters: - keyword: Search username or Douyin number - cursor: Cursor, default empty ### Return: - Search result
     * @summary 获取搜索用户名或抖音号
     * @param {string} keyword 搜索的用户名或抖音号
     * @param {number} cursor 游标，默认空
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet_9(keyword: string, cursor: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取账号粉丝数据趋势 ### 参数: - sec_uid: 用户sec_id - option: 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 账号粉丝数据趋势  # [English] ### Purpose: - Get the account fan data trend ### Parameters: - sec_uid: User sec_id - option: Option, 2 New like 3 New work 4 New comment 5 New share - date_window: Time window, 1 by hour 2 by day ### Return: - Account fan data trend
     * @summary 获取账号粉丝数据趋势
     * @param {string} secUid 用户sec_id
     * @param {string} option 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量
     * @param {string} dateWindow 时间窗口，1 按小时 2 按天
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet(secUid: string, option: string, dateWindow: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取账号粉丝数据趋势 ### 参数: - sec_uid: 用户sec_id - option: 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 账号粉丝数据趋势  # [English] ### Purpose: - Get the account fan data trend ### Parameters: - sec_uid: User sec_id - option: Option, 2 New like 3 New work 4 New comment 5 New share - date_window: Time window, 1 by hour 2 by day ### Return: - Account fan data trend
     * @summary 获取账号粉丝数据趋势
     * @param {string} secUid 用户sec_id
     * @param {string} option 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量
     * @param {string} dateWindow 时间窗口，1 按小时 2 按天
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet_10(secUid: string, option: string, dateWindow: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取活动日历详情 ### 参数: - calendar_id: 活动id ### 返回: - 活动日历详情  # [English] ### Purpose: - Get the activity calendar details ### Parameters: - calendar_id: Activity id ### Return: - Activity calendar details
     * @summary 获取活动日历详情
     * @param {string} calendarId 活动id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet(calendarId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取活动日历详情 ### 参数: - calendar_id: 活动id ### 返回: - 活动日历详情  # [English] ### Purpose: - Get the activity calendar details ### Parameters: - calendar_id: Activity id ### Return: - Activity calendar details
     * @summary 获取活动日历详情
     * @param {string} calendarId 活动id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet_11(calendarId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取活动日历 ### 参数: - city_code: 城市编码，从城市列表获取，空为全部 - category_code: 热点榜分类编码，从热点榜分类获取，空为全部 - end_date: 快照结束时间 格式10位时间戳 - start_date: 快照开始时间 格式10位时间戳 ### 返回: - 活动日历  # [English] ### Purpose: - Get the activity calendar ### Parameters: - city_code: City code, get from city list, empty for all - category_code: Hot list category code, get from hot list category, empty for all - end_date: Snapshot end time format 10 digit timestamp - start_date: Snapshot start time format 10 digit timestamp ### Return: - Activity calendar
     * @summary 获取活动日历
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取活动日历 ### 参数: - city_code: 城市编码，从城市列表获取，空为全部 - category_code: 热点榜分类编码，从热点榜分类获取，空为全部 - end_date: 快照结束时间 格式10位时间戳 - start_date: 快照开始时间 格式10位时间戳 ### 返回: - 活动日历  # [English] ### Purpose: - Get the activity calendar ### Parameters: - city_code: City code, get from city list, empty for all - category_code: Hot list category code, get from hot list category, empty for all - end_date: Snapshot end time format 10 digit timestamp - start_date: Snapshot start time format 10 digit timestamp ### Return: - Activity calendar
     * @summary 获取活动日历
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost_12(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取热点榜分类的id与热度 - 注意：使用start_date和end_date参数需要移除snapshot_time参数才可以生效 ### 参数: - billboard_type: 榜单类型     - rise 上升热点榜     - city 城市热点榜     - total 热点总榜 - snapshot_time: 快照时间 - start_date: 快照开始时间 - end_date: 快照结束时间 - keyword: 热点搜索词 ### 返回: - 热点榜分类  # [English] ### Purpose: - Get the id and popularity of the hot list category - Note: Using start_date and end_date parameters requires removing the snapshot_time parameter - Note: snapshot_time and start_date, end_date parameters cannot be empty at the same time ### Parameters: - billboard_type: Billboard type     - rise Rising hot list     - city City hot list     - total Total hot list - snapshot_time: Snapshot time - start_date: Snapshot start time - end_date: Snapshot end time - keyword: Hot search term ### Return: - Hot category list
     * @summary 获取热点榜分类
     * @param {string} billboardType 榜单类型
     * @param {string} [snapshotTime] 快照时间 格式yyyyMMddHHmmss
     * @param {string} [startDate] 快照开始时间 格式yyyyMMdd
     * @param {string} [endDate] 快照结束时间 格式yyyyMMdd
     * @param {string} [keyword] 热点搜索词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet(billboardType: string, snapshotTime?: string, startDate?: string, endDate?: string, keyword?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取热点榜分类的id与热度 - 注意：使用start_date和end_date参数需要移除snapshot_time参数才可以生效 ### 参数: - billboard_type: 榜单类型     - rise 上升热点榜     - city 城市热点榜     - total 热点总榜 - snapshot_time: 快照时间 - start_date: 快照开始时间 - end_date: 快照结束时间 - keyword: 热点搜索词 ### 返回: - 热点榜分类  # [English] ### Purpose: - Get the id and popularity of the hot list category - Note: Using start_date and end_date parameters requires removing the snapshot_time parameter - Note: snapshot_time and start_date, end_date parameters cannot be empty at the same time ### Parameters: - billboard_type: Billboard type     - rise Rising hot list     - city City hot list     - total Total hot list - snapshot_time: Snapshot time - start_date: Snapshot start time - end_date: Snapshot end time - keyword: Hot search term ### Return: - Hot category list
     * @summary 获取热点榜分类
     * @param {string} billboardType 榜单类型
     * @param {string} [snapshotTime] 快照时间 格式yyyyMMddHHmmss
     * @param {string} [startDate] 快照开始时间 格式yyyyMMdd
     * @param {string} [endDate] 快照结束时间 格式yyyyMMdd
     * @param {string} [keyword] 热点搜索词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet_13(billboardType: string, snapshotTime?: string, startDate?: string, endDate?: string, keyword?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取挑战榜 ### 参数: - page: 页码 - page_size: 每页数量 - keyword: 热点搜索词 ### 返回: - 挑战榜  # [English] ### Purpose: - Get the challenge list ### Parameters: - page: Page number - page_size: Number of items per page - keyword: Hot search term ### Return: - Challenge list
     * @summary 获取挑战榜
     * @param {number} page 页码
     * @param {number} pageSize 每页数量
     * @param {string} [keyword] 热点搜索词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet(page: number, pageSize: number, keyword?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取挑战榜 ### 参数: - page: 页码 - page_size: 每页数量 - keyword: 热点搜索词 ### 返回: - 挑战榜  # [English] ### Purpose: - Get the challenge list ### Parameters: - page: Page number - page_size: Number of items per page - keyword: Hot search term ### Return: - Challenge list
     * @summary 获取挑战榜
     * @param {number} page 页码
     * @param {number} pageSize 每页数量
     * @param {string} [keyword] 热点搜索词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet_14(page: number, pageSize: number, keyword?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取同城热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - city_code: 城市编码，从城市列表获取，空为全部 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 同城热点榜  # [English] ### Purpose: - Get the city hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - city_code: City code, get from city list, empty for all - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - City hot list
     * @summary 获取同城热点榜
     * @param {number} page 页码
     * @param {number} pageSize 每页数量
     * @param {string} order 排序方式
     * @param {string} [cityCode] 城市编码，从城市列表获取，空为全部
     * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
     * @param {string} [keyword] 热点搜索词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet(page: number, pageSize: number, order: string, cityCode?: string, sentenceTag?: string, keyword?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取同城热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - city_code: 城市编码，从城市列表获取，空为全部 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 同城热点榜  # [English] ### Purpose: - Get the city hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - city_code: City code, get from city list, empty for all - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - City hot list
     * @summary 获取同城热点榜
     * @param {number} page 页码
     * @param {number} pageSize 每页数量
     * @param {string} order 排序方式
     * @param {string} [cityCode] 城市编码，从城市列表获取，空为全部
     * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
     * @param {string} [keyword] 热点搜索词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet_15(page: number, pageSize: number, order: string, cityCode?: string, sentenceTag?: string, keyword?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取作品评论分析-词云权重 ### 参数: - aweme_id: 作品id ### 返回: - 作品评论分析-词云权重  # [English] ### Purpose: - Get the work comment analysis word cloud weight ### Parameters: - aweme_id: Work id ### Return: - Work comment analysis word cloud weight
     * @summary 获取作品评论分析-词云权重
     * @param {string} awemeId 作品id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取作品评论分析-词云权重 ### 参数: - aweme_id: 作品id ### 返回: - 作品评论分析-词云权重  # [English] ### Purpose: - Get the work comment analysis word cloud weight ### Parameters: - aweme_id: Work id ### Return: - Work comment analysis word cloud weight
     * @summary 获取作品评论分析-词云权重
     * @param {string} awemeId 作品id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet_16(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取作品数据趋势 ### 参数: - aweme_id: 作品id - option: 选项，7 点赞量 8 分享量 9 评论量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 作品数据趋势  # [English] ### Purpose: - Get the work data trend ### Parameters: - aweme_id: Work id - option: Option, 7 Like 8 Share 9 Comment - date_window: Time window, 1 by hour 2 by day ### Return: - Work data trend
     * @summary 获取作品数据趋势
     * @param {string} option 选项，7 点赞量 8 分享量 9 评论量
     * @param {string} dateWindow 时间窗口，1 按小时 2 按天
     * @param {string} [awemeId] 作品id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet(option: string, dateWindow: string, awemeId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取作品数据趋势 ### 参数: - aweme_id: 作品id - option: 选项，7 点赞量 8 分享量 9 评论量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 作品数据趋势  # [English] ### Purpose: - Get the work data trend ### Parameters: - aweme_id: Work id - option: Option, 7 Like 8 Share 9 Comment - date_window: Time window, 1 by hour 2 by day ### Return: - Work data trend
     * @summary 获取作品数据趋势
     * @param {string} option 选项，7 点赞量 8 分享量 9 评论量
     * @param {string} dateWindow 时间窗口，1 按小时 2 按天
     * @param {string} [awemeId] 作品id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet_17(option: string, dateWindow: string, awemeId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取上升热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 上升热点榜  # [English] ### Purpose: - Get the rising hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Rising hot list
     * @summary 获取上升热点榜
     * @param {number} page 页码
     * @param {number} pageSize 每页数量
     * @param {string} order 排序方式
     * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
     * @param {string} [keyword] 热点搜索词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet(page: number, pageSize: number, order: string, sentenceTag?: string, keyword?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取上升热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 上升热点榜  # [English] ### Purpose: - Get the rising hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Rising hot list
     * @summary 获取上升热点榜
     * @param {number} page 页码
     * @param {number} pageSize 每页数量
     * @param {string} order 排序方式
     * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
     * @param {string} [keyword] 热点搜索词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet_18(page: number, pageSize: number, order: string, sentenceTag?: string, keyword?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取高涨粉率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高涨粉率榜  # [English] ### Purpose: - Get the high fan rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High fan rate list
     * @summary 获取高涨粉率榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取高涨粉率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高涨粉率榜  # [English] ### Purpose: - Get the high fan rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High fan rate list
     * @summary 获取高涨粉率榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost_19(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取高点赞率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高点赞率榜  # [English] ### Purpose: - Get the high like rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High like rate list
     * @summary 获取高点赞率榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取高点赞率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高点赞率榜  # [English] ### Purpose: - Get the high like rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High like rate list
     * @summary 获取高点赞率榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost_20(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取高完播率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高完播率榜  # [English] ### Purpose: - Get the high completion rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High completion rate list
     * @summary 获取高完播率榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取高完播率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高完播率榜  # [English] ### Purpose: - Get the high completion rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High completion rate list
     * @summary 获取高完播率榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost_21(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取热度飙升的搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 热度飙升的搜索榜  # [English] ### Purpose: - Get the search list with rising popularity ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list with rising popularity
     * @summary 获取热度飙升的搜索榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取热度飙升的搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 热度飙升的搜索榜  # [English] ### Purpose: - Get the search list with rising popularity ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list with rising popularity
     * @summary 获取热度飙升的搜索榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost_22(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取热度飙升的话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 热度飙升的话题榜  # [English] ### Purpose: - Get the topic list with rising popularity ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Topic list with rising popularity
     * @summary 获取热度飙升的话题榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取热度飙升的话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 热度飙升的话题榜  # [English] ### Purpose: - Get the topic list with rising popularity ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Topic list with rising popularity
     * @summary 获取热度飙升的话题榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost_23(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取内容词详情 ### 参数: - keyword: 搜索关键字 - word_id: 内容词id - query_day: 查询日期，格式为YYYYMMDD ### 返回: - 内容词详情  # [English] ### Purpose: - Get the details of content words ### Parameters: - keyword: Search keyword - word_id: Content word id - query_day: Query date, format is YYYYMMDD ### Return: - Details of content words
     * @summary 获取内容词详情
     * @param {string} keyword 搜索关键字
     * @param {string} wordId 内容词id
     * @param {number} queryDay 查询日期，格式为YYYYMMDD，需为当日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet(keyword: string, wordId: string, queryDay: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取内容词详情 ### 参数: - keyword: 搜索关键字 - word_id: 内容词id - query_day: 查询日期，格式为YYYYMMDD ### 返回: - 内容词详情  # [English] ### Purpose: - Get the details of content words ### Parameters: - keyword: Search keyword - word_id: Content word id - query_day: Query date, format is YYYYMMDD ### Return: - Details of content words
     * @summary 获取内容词详情
     * @param {string} keyword 搜索关键字
     * @param {string} wordId 内容词id
     * @param {number} queryDay 查询日期，格式为YYYYMMDD，需为当日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet_24(keyword: string, wordId: string, queryDay: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取全部内容词 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 全部内容词  # [English] ### Purpose: - Get the list of all content words ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - List of all content words
     * @summary 获取全部内容词
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取全部内容词 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 全部内容词  # [English] ### Purpose: - Get the list of all content words ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - List of all content words
     * @summary 获取全部内容词
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost_25(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取热点总榜 ### 参数: - page: 页码 - page_size: 每页数量 - type: 快照类型 snapshot 按时刻查看 range 按时间范围。     - 备注：snapshot_time 在 snapshot时有效，start_date 和 end_date 在 range 时有效 - snapshot_time: 快照时间 格式yyyyMMddHHmmss - start_date: 快照开始时间 格式yyyyMMdd - end_date: 快照结束时间 格式yyyyMMdd - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 热点总榜  # [English] ### Purpose: - Get the total hot list ### Parameters: - page: Page number - page_size: Number of items per page - type: Snapshot type snapshot view by time range view by time range.     - Note: snapshot_time is valid when snapshot, start_date and end_date are valid when range - snapshot_time: Snapshot time format yyyyMMddHHmmss - start_date: Snapshot start time format yyyyMMdd - end_date: Snapshot end time format yyyyMMdd - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Total hot list
     * @summary 获取热点总榜
     * @param {number} page 页码
     * @param {number} pageSize 每页数量
     * @param {string} type 快照类型 snapshot 按时刻查看 range 按时间范围
     * @param {string} [snapshotTime] 快照时间 格式yyyyMMddHHmmss
     * @param {string} [startDate] 快照开始时间 格式yyyyMMdd
     * @param {string} [endDate] 快照结束时间 格式yyyyMMdd
     * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
     * @param {string} [keyword] 热点搜索词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet(page: number, pageSize: number, type: string, snapshotTime?: string, startDate?: string, endDate?: string, sentenceTag?: string, keyword?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取热点总榜 ### 参数: - page: 页码 - page_size: 每页数量 - type: 快照类型 snapshot 按时刻查看 range 按时间范围。     - 备注：snapshot_time 在 snapshot时有效，start_date 和 end_date 在 range 时有效 - snapshot_time: 快照时间 格式yyyyMMddHHmmss - start_date: 快照开始时间 格式yyyyMMdd - end_date: 快照结束时间 格式yyyyMMdd - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 热点总榜  # [English] ### Purpose: - Get the total hot list ### Parameters: - page: Page number - page_size: Number of items per page - type: Snapshot type snapshot view by time range view by time range.     - Note: snapshot_time is valid when snapshot, start_date and end_date are valid when range - snapshot_time: Snapshot time format yyyyMMddHHmmss - start_date: Snapshot start time format yyyyMMdd - end_date: Snapshot end time format yyyyMMdd - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Total hot list
     * @summary 获取热点总榜
     * @param {number} page 页码
     * @param {number} pageSize 每页数量
     * @param {string} type 快照类型 snapshot 按时刻查看 range 按时间范围
     * @param {string} [snapshotTime] 快照时间 格式yyyyMMddHHmmss
     * @param {string} [startDate] 快照开始时间 格式yyyyMMdd
     * @param {string} [endDate] 快照结束时间 格式yyyyMMdd
     * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
     * @param {string} [keyword] 热点搜索词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet_26(page: number, pageSize: number, type: string, snapshotTime?: string, startDate?: string, endDate?: string, sentenceTag?: string, keyword?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取低粉爆款榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 低粉爆款榜  # [English] ### Purpose: - Get the low fan explosion list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Low fan explosion list
     * @summary 获取低粉爆款榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取低粉爆款榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 低粉爆款榜  # [English] ### Purpose: - Get the low fan explosion list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Low fan explosion list
     * @summary 获取低粉爆款榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost_27(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 搜索榜  # [English] ### Purpose: - Get the search list ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list
     * @summary 获取搜索榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 搜索榜  # [English] ### Purpose: - Get the search list ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list
     * @summary 获取搜索榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost_28(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 话题榜  # [English] ### Purpose: - Get the topic list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Topic list
     * @summary 获取话题榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 话题榜  # [English] ### Purpose: - Get the topic list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Topic list
     * @summary 获取话题榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost_29(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取视频榜 ### 参数: - page: 页码，默认1 - page_size: 每页数量，默认10 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 视频榜  # [English] ### Purpose: - Get the video list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Video list
     * @summary 获取视频榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取视频榜 ### 参数: - page: 页码，默认1 - page_size: 每页数量，默认10 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 视频榜  # [English] ### Purpose: - Get the video list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Video list
     * @summary 获取视频榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost_30(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取作品点赞观众画像 ### 参数: - aweme_id: 作品id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 ### 返回: - 作品点赞观众画像  # [English] ### Purpose: - Get the work like audience portrait ### Parameters: - aweme_id: Work id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution ### Return: - Work like audience portrait
     * @summary 获取作品点赞观众画像-仅限热门榜
     * @param {string} awemeId 作品id
     * @param {string} option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet(awemeId: string, option: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取作品点赞观众画像 ### 参数: - aweme_id: 作品id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 ### 返回: - 作品点赞观众画像  # [English] ### Purpose: - Get the work like audience portrait ### Parameters: - aweme_id: Work id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution ### Return: - Work like audience portrait
     * @summary 获取作品点赞观众画像-仅限热门榜
     * @param {string} awemeId 作品id
     * @param {string} option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApiInterface
     */
    fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet_31(awemeId: string, option: string, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * DouyinBillboardAPIApi - object-oriented interface
 * @export
 * @class DouyinBillboardAPIApi
 * @extends {BaseAPI}
 */
export class DouyinBillboardAPIApi extends BaseAPI implements DouyinBillboardAPIApiInterface {
    /**
     * # [中文] ### 用途: - 获取城市列表 ### 参数: - 无 ### 返回: - 中国城市列表  # [English] ### Purpose: - Get city list ### Parameters: - None ### Return: - Chinese city list
     * @summary 获取中国城市列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchCityListApiV1DouyinBillboardFetchCityListGet(options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchCityListApiV1DouyinBillboardFetchCityListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取城市列表 ### 参数: - 无 ### 返回: - 中国城市列表  # [English] ### Purpose: - Get city list ### Parameters: - None ### Return: - Chinese city list
     * @summary 获取中国城市列表
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchCityListApiV1DouyinBillboardFetchCityListGet_1(options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchCityListApiV1DouyinBillboardFetchCityListGet_1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取垂类内容标签 ### 参数: - 无 ### 返回: - 垂类内容标签 ### 注意: - 该接口用于获取垂类内容标签，用于query_tag参数构建 ### 示例: 已知顶级垂类内容标签 `美食`，它的顶级垂类id为 `628`；`美食` 的子垂类标签 `品酒教学`，它的子垂类id为 `62802`。 那么构建标签查询参数为 `{\"value\": 628, \"children\": [{\"value\": 62808}]}`  如果需要多个子垂类标签，所有的美食子垂类标签为 `{\"value\":628,\"children\":[{\"value\":62808},{\"value\":62804},{\"value\":62806},{\"value\":62803},{\"value\":62802},{\"value\":62801},{\"value\":62811},{\"value\":62807},{\"value\":62805},{\"value\":62810}]}`  # [English] ### Purpose: - Get vertical content tags ### Parameters: - None ### Return: - Vertical content tags ### Note: - This interface is used to obtain vertical content tags, used to construct the query_tag parameter ### Example: Given the top-level vertical content tag `Food`, its top-level vertical id is `628`; `Food`\'s sub-vertical tag `Wine Tasting`, its sub-vertical id is `62802`. Then the constructed tag query parameter is `{\"value\": 628, \"children\": [{\"value\": 62808}]}`  If you need multiple sub-vertical tags, all food sub-vertical tags are `{\"value\":628,\"children\":[{\"value\":62808},{\"value\":62804},{\"value\":62806},{\"value\":62803},{\"value\":62802},{\"value\":62801},{\"value\":62811},{\"value\":62807},{\"value\":62805},{\"value\":62810}]}`
     * @summary 获取垂类内容标签
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchContentTagApiV1DouyinBillboardFetchContentTagGet(options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchContentTagApiV1DouyinBillboardFetchContentTagGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取垂类内容标签 ### 参数: - 无 ### 返回: - 垂类内容标签 ### 注意: - 该接口用于获取垂类内容标签，用于query_tag参数构建 ### 示例: 已知顶级垂类内容标签 `美食`，它的顶级垂类id为 `628`；`美食` 的子垂类标签 `品酒教学`，它的子垂类id为 `62802`。 那么构建标签查询参数为 `{\"value\": 628, \"children\": [{\"value\": 62808}]}`  如果需要多个子垂类标签，所有的美食子垂类标签为 `{\"value\":628,\"children\":[{\"value\":62808},{\"value\":62804},{\"value\":62806},{\"value\":62803},{\"value\":62802},{\"value\":62801},{\"value\":62811},{\"value\":62807},{\"value\":62805},{\"value\":62810}]}`  # [English] ### Purpose: - Get vertical content tags ### Parameters: - None ### Return: - Vertical content tags ### Note: - This interface is used to obtain vertical content tags, used to construct the query_tag parameter ### Example: Given the top-level vertical content tag `Food`, its top-level vertical id is `628`; `Food`\'s sub-vertical tag `Wine Tasting`, its sub-vertical id is `62802`. Then the constructed tag query parameter is `{\"value\": 628, \"children\": [{\"value\": 62808}]}`  If you need multiple sub-vertical tags, all food sub-vertical tags are `{\"value\":628,\"children\":[{\"value\":62808},{\"value\":62804},{\"value\":62806},{\"value\":62803},{\"value\":62802},{\"value\":62801},{\"value\":62811},{\"value\":62807},{\"value\":62805},{\"value\":62810}]}`
     * @summary 获取垂类内容标签
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchContentTagApiV1DouyinBillboardFetchContentTagGet_2(options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchContentTagApiV1DouyinBillboardFetchContentTagGet_2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取粉丝兴趣作者 20个用户 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝兴趣作者 20个用户  # [English] ### Purpose: - Get the fan interest author 20 users ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest author 20 users
     * @summary 获取粉丝兴趣作者 20个用户
     * @param {string} secUid 用户sec_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet(secUid: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet(secUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取粉丝兴趣作者 20个用户 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝兴趣作者 20个用户  # [English] ### Purpose: - Get the fan interest author 20 users ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest author 20 users
     * @summary 获取粉丝兴趣作者 20个用户
     * @param {string} secUid 用户sec_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet_3(secUid: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotAccountFansInterestAccountListApiV1DouyinBillboardFetchHotAccountFansInterestAccountListGet_3(secUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取粉丝近3天搜索词 10个搜索词 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天搜索词 10个搜索词  # [English] ### Purpose: - Get the fan interest search term in the last 3 days 10 search terms ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest search term in the last 3 days 10 search terms
     * @summary 获取粉丝近3天搜索词 10个搜索词
     * @param {string} secUid 用户sec_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet(secUid: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet(secUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取粉丝近3天搜索词 10个搜索词 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天搜索词 10个搜索词  # [English] ### Purpose: - Get the fan interest search term in the last 3 days 10 search terms ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest search term in the last 3 days 10 search terms
     * @summary 获取粉丝近3天搜索词 10个搜索词
     * @param {string} secUid 用户sec_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet_4(secUid: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotAccountFansInterestSearchListApiV1DouyinBillboardFetchHotAccountFansInterestSearchListGet_4(secUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取粉丝近3天感兴趣的话题 10个话题 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天感兴趣的话题 10个话题  # [English] ### Purpose: - Get the fan interest topic in the last 3 days 10 topics ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest topic in the last 3 days 10 topics
     * @summary 获取粉丝近3天感兴趣的话题 10个话题
     * @param {string} secUid 用户sec_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet(secUid: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet(secUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取粉丝近3天感兴趣的话题 10个话题 ### 参数: - sec_uid: 用户sec_id ### 返回: - 粉丝近3天感兴趣的话题 10个话题  # [English] ### Purpose: - Get the fan interest topic in the last 3 days 10 topics ### Parameters: - sec_uid: User sec_id ### Return: - Fan interest topic in the last 3 days 10 topics
     * @summary 获取粉丝近3天感兴趣的话题 10个话题
     * @param {string} secUid 用户sec_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet_5(secUid: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotAccountFansInterestTopicListApiV1DouyinBillboardFetchHotAccountFansInterestTopicListGet_5(secUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取粉丝画像 ### 参数: - sec_uid: 用户sec_id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比 ### 返回: - 粉丝画像  # [English] ### Purpose: - Get the fan portrait ### Parameters: - sec_uid: User sec_id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution     - 8 Interest tag analysis percentage ### Return: - Fan portrait
     * @summary 获取粉丝画像
     * @param {string} secUid 用户sec_id
     * @param {string} option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet(secUid: string, option: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet(secUid, option, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取粉丝画像 ### 参数: - sec_uid: 用户sec_id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比 ### 返回: - 粉丝画像  # [English] ### Purpose: - Get the fan portrait ### Parameters: - sec_uid: User sec_id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution     - 8 Interest tag analysis percentage ### Return: - Fan portrait
     * @summary 获取粉丝画像
     * @param {string} secUid 用户sec_id
     * @param {string} option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 8 兴趣标签分析 百分比
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet_6(secUid: string, option: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotAccountFansPortraitListApiV1DouyinBillboardFetchHotAccountFansPortraitListGet_6(secUid, option, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取账号作品分析 ### 参数: - sec_uid: 用户sec_id - day: 天数，默认7天 ### 返回: - 账号作品分析  # [English] ### Purpose: - Get the account work analysis ### Parameters: - sec_uid: User sec_id - day: Number of days, default 7 days ### Return: - Account work analysis
     * @summary 获取账号作品分析-上周
     * @param {string} secUid 用户sec_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet(secUid: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet(secUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取账号作品分析 ### 参数: - sec_uid: 用户sec_id - day: 天数，默认7天 ### 返回: - 账号作品分析  # [English] ### Purpose: - Get the account work analysis ### Parameters: - sec_uid: User sec_id - day: Number of days, default 7 days ### Return: - Account work analysis
     * @summary 获取账号作品分析-上周
     * @param {string} secUid 用户sec_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet_7(secUid: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotAccountItemAnalysisListApiV1DouyinBillboardFetchHotAccountItemAnalysisListGet_7(secUid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取热门账号 ### 参数: - date_window: 时间窗口，格式 小时，默认24小时 - page_num: 页码，默认1 - page_size: 每页数量，默认20 - query_tag: 子级垂类标签，空则为全部，多个标签需传入 {\"value\": \"{顶级垂类标签id}\", \"children\": [     {\"value\": \"{子级垂类标签id}\"},     {\"value\": \"{子级垂类标签id}\"} ]} ### 返回: - 热门账号  # [English] ### Purpose: - Get the hot account ### Parameters: - date_window: Time window, format hour, default 24 hours - page_num: Page number, default 1 - page_size: Number of items per page, default 20 - query_tag: Sub-level vertical category tag, empty for all, multiple tags need to be passed in {\"value\": \"{top-level vertical category id}\", \"children\": [     {\"value\": \"{sub-level vertical category id}\"},     {\"value\": \"{sub-level vertical category id}\"} ]} ### Return: - Hot account
     * @summary 获取热门账号
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取热门账号 ### 参数: - date_window: 时间窗口，格式 小时，默认24小时 - page_num: 页码，默认1 - page_size: 每页数量，默认20 - query_tag: 子级垂类标签，空则为全部，多个标签需传入 {\"value\": \"{顶级垂类标签id}\", \"children\": [     {\"value\": \"{子级垂类标签id}\"},     {\"value\": \"{子级垂类标签id}\"} ]} ### 返回: - 热门账号  # [English] ### Purpose: - Get the hot account ### Parameters: - date_window: Time window, format hour, default 24 hours - page_num: Page number, default 1 - page_size: Number of items per page, default 20 - query_tag: Sub-level vertical category tag, empty for all, multiple tags need to be passed in {\"value\": \"{top-level vertical category id}\", \"children\": [     {\"value\": \"{sub-level vertical category id}\"},     {\"value\": \"{sub-level vertical category id}\"} ]} ### Return: - Hot account
     * @summary 获取热门账号
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost_8(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotAccountListApiV1DouyinBillboardFetchHotAccountListPost_8(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取搜索用户名或抖音号 ### 参数: - keyword: 搜索的用户名或抖音号 - cursor: 游标，默认空 ### 返回: - 搜索结果  # [English] ### Purpose: - Get the search username or Douyin number ### Parameters: - keyword: Search username or Douyin number - cursor: Cursor, default empty ### Return: - Search result
     * @summary 获取搜索用户名或抖音号
     * @param {string} keyword 搜索的用户名或抖音号
     * @param {number} cursor 游标，默认空
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet(keyword: string, cursor: number, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet(keyword, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取搜索用户名或抖音号 ### 参数: - keyword: 搜索的用户名或抖音号 - cursor: 游标，默认空 ### 返回: - 搜索结果  # [English] ### Purpose: - Get the search username or Douyin number ### Parameters: - keyword: Search username or Douyin number - cursor: Cursor, default empty ### Return: - Search result
     * @summary 获取搜索用户名或抖音号
     * @param {string} keyword 搜索的用户名或抖音号
     * @param {number} cursor 游标，默认空
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet_9(keyword: string, cursor: number, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotAccountSearchListApiV1DouyinBillboardFetchHotAccountSearchListGet_9(keyword, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取账号粉丝数据趋势 ### 参数: - sec_uid: 用户sec_id - option: 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 账号粉丝数据趋势  # [English] ### Purpose: - Get the account fan data trend ### Parameters: - sec_uid: User sec_id - option: Option, 2 New like 3 New work 4 New comment 5 New share - date_window: Time window, 1 by hour 2 by day ### Return: - Account fan data trend
     * @summary 获取账号粉丝数据趋势
     * @param {string} secUid 用户sec_id
     * @param {string} option 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量
     * @param {string} dateWindow 时间窗口，1 按小时 2 按天
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet(secUid: string, option: string, dateWindow: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet(secUid, option, dateWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取账号粉丝数据趋势 ### 参数: - sec_uid: 用户sec_id - option: 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 账号粉丝数据趋势  # [English] ### Purpose: - Get the account fan data trend ### Parameters: - sec_uid: User sec_id - option: Option, 2 New like 3 New work 4 New comment 5 New share - date_window: Time window, 1 by hour 2 by day ### Return: - Account fan data trend
     * @summary 获取账号粉丝数据趋势
     * @param {string} secUid 用户sec_id
     * @param {string} option 选项，2 新增点赞量 3 新增作品量 4 新增评论量 5 新增分享量
     * @param {string} dateWindow 时间窗口，1 按小时 2 按天
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet_10(secUid: string, option: string, dateWindow: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotAccountTrendsListApiV1DouyinBillboardFetchHotAccountTrendsListGet_10(secUid, option, dateWindow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取活动日历详情 ### 参数: - calendar_id: 活动id ### 返回: - 活动日历详情  # [English] ### Purpose: - Get the activity calendar details ### Parameters: - calendar_id: Activity id ### Return: - Activity calendar details
     * @summary 获取活动日历详情
     * @param {string} calendarId 活动id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet(calendarId: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet(calendarId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取活动日历详情 ### 参数: - calendar_id: 活动id ### 返回: - 活动日历详情  # [English] ### Purpose: - Get the activity calendar details ### Parameters: - calendar_id: Activity id ### Return: - Activity calendar details
     * @summary 获取活动日历详情
     * @param {string} calendarId 活动id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet_11(calendarId: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotCalendarDetailApiV1DouyinBillboardFetchHotCalendarDetailGet_11(calendarId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取活动日历 ### 参数: - city_code: 城市编码，从城市列表获取，空为全部 - category_code: 热点榜分类编码，从热点榜分类获取，空为全部 - end_date: 快照结束时间 格式10位时间戳 - start_date: 快照开始时间 格式10位时间戳 ### 返回: - 活动日历  # [English] ### Purpose: - Get the activity calendar ### Parameters: - city_code: City code, get from city list, empty for all - category_code: Hot list category code, get from hot list category, empty for all - end_date: Snapshot end time format 10 digit timestamp - start_date: Snapshot start time format 10 digit timestamp ### Return: - Activity calendar
     * @summary 获取活动日历
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取活动日历 ### 参数: - city_code: 城市编码，从城市列表获取，空为全部 - category_code: 热点榜分类编码，从热点榜分类获取，空为全部 - end_date: 快照结束时间 格式10位时间戳 - start_date: 快照开始时间 格式10位时间戳 ### 返回: - 活动日历  # [English] ### Purpose: - Get the activity calendar ### Parameters: - city_code: City code, get from city list, empty for all - category_code: Hot list category code, get from hot list category, empty for all - end_date: Snapshot end time format 10 digit timestamp - start_date: Snapshot start time format 10 digit timestamp ### Return: - Activity calendar
     * @summary 获取活动日历
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost_12(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotCalendarListApiV1DouyinBillboardFetchHotCalendarListPost_12(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取热点榜分类的id与热度 - 注意：使用start_date和end_date参数需要移除snapshot_time参数才可以生效 ### 参数: - billboard_type: 榜单类型     - rise 上升热点榜     - city 城市热点榜     - total 热点总榜 - snapshot_time: 快照时间 - start_date: 快照开始时间 - end_date: 快照结束时间 - keyword: 热点搜索词 ### 返回: - 热点榜分类  # [English] ### Purpose: - Get the id and popularity of the hot list category - Note: Using start_date and end_date parameters requires removing the snapshot_time parameter - Note: snapshot_time and start_date, end_date parameters cannot be empty at the same time ### Parameters: - billboard_type: Billboard type     - rise Rising hot list     - city City hot list     - total Total hot list - snapshot_time: Snapshot time - start_date: Snapshot start time - end_date: Snapshot end time - keyword: Hot search term ### Return: - Hot category list
     * @summary 获取热点榜分类
     * @param {string} billboardType 榜单类型
     * @param {string} [snapshotTime] 快照时间 格式yyyyMMddHHmmss
     * @param {string} [startDate] 快照开始时间 格式yyyyMMdd
     * @param {string} [endDate] 快照结束时间 格式yyyyMMdd
     * @param {string} [keyword] 热点搜索词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet(billboardType: string, snapshotTime?: string, startDate?: string, endDate?: string, keyword?: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet(billboardType, snapshotTime, startDate, endDate, keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取热点榜分类的id与热度 - 注意：使用start_date和end_date参数需要移除snapshot_time参数才可以生效 ### 参数: - billboard_type: 榜单类型     - rise 上升热点榜     - city 城市热点榜     - total 热点总榜 - snapshot_time: 快照时间 - start_date: 快照开始时间 - end_date: 快照结束时间 - keyword: 热点搜索词 ### 返回: - 热点榜分类  # [English] ### Purpose: - Get the id and popularity of the hot list category - Note: Using start_date and end_date parameters requires removing the snapshot_time parameter - Note: snapshot_time and start_date, end_date parameters cannot be empty at the same time ### Parameters: - billboard_type: Billboard type     - rise Rising hot list     - city City hot list     - total Total hot list - snapshot_time: Snapshot time - start_date: Snapshot start time - end_date: Snapshot end time - keyword: Hot search term ### Return: - Hot category list
     * @summary 获取热点榜分类
     * @param {string} billboardType 榜单类型
     * @param {string} [snapshotTime] 快照时间 格式yyyyMMddHHmmss
     * @param {string} [startDate] 快照开始时间 格式yyyyMMdd
     * @param {string} [endDate] 快照结束时间 格式yyyyMMdd
     * @param {string} [keyword] 热点搜索词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet_13(billboardType: string, snapshotTime?: string, startDate?: string, endDate?: string, keyword?: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotCategoryListApiV1DouyinBillboardFetchHotCategoryListGet_13(billboardType, snapshotTime, startDate, endDate, keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取挑战榜 ### 参数: - page: 页码 - page_size: 每页数量 - keyword: 热点搜索词 ### 返回: - 挑战榜  # [English] ### Purpose: - Get the challenge list ### Parameters: - page: Page number - page_size: Number of items per page - keyword: Hot search term ### Return: - Challenge list
     * @summary 获取挑战榜
     * @param {number} page 页码
     * @param {number} pageSize 每页数量
     * @param {string} [keyword] 热点搜索词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet(page: number, pageSize: number, keyword?: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet(page, pageSize, keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取挑战榜 ### 参数: - page: 页码 - page_size: 每页数量 - keyword: 热点搜索词 ### 返回: - 挑战榜  # [English] ### Purpose: - Get the challenge list ### Parameters: - page: Page number - page_size: Number of items per page - keyword: Hot search term ### Return: - Challenge list
     * @summary 获取挑战榜
     * @param {number} page 页码
     * @param {number} pageSize 每页数量
     * @param {string} [keyword] 热点搜索词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet_14(page: number, pageSize: number, keyword?: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotChallengeListApiV1DouyinBillboardFetchHotChallengeListGet_14(page, pageSize, keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取同城热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - city_code: 城市编码，从城市列表获取，空为全部 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 同城热点榜  # [English] ### Purpose: - Get the city hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - city_code: City code, get from city list, empty for all - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - City hot list
     * @summary 获取同城热点榜
     * @param {number} page 页码
     * @param {number} pageSize 每页数量
     * @param {string} order 排序方式
     * @param {string} [cityCode] 城市编码，从城市列表获取，空为全部
     * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
     * @param {string} [keyword] 热点搜索词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet(page: number, pageSize: number, order: string, cityCode?: string, sentenceTag?: string, keyword?: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet(page, pageSize, order, cityCode, sentenceTag, keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取同城热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - city_code: 城市编码，从城市列表获取，空为全部 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 同城热点榜  # [English] ### Purpose: - Get the city hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - city_code: City code, get from city list, empty for all - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - City hot list
     * @summary 获取同城热点榜
     * @param {number} page 页码
     * @param {number} pageSize 每页数量
     * @param {string} order 排序方式
     * @param {string} [cityCode] 城市编码，从城市列表获取，空为全部
     * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
     * @param {string} [keyword] 热点搜索词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet_15(page: number, pageSize: number, order: string, cityCode?: string, sentenceTag?: string, keyword?: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotCityListApiV1DouyinBillboardFetchHotCityListGet_15(page, pageSize, order, cityCode, sentenceTag, keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取作品评论分析-词云权重 ### 参数: - aweme_id: 作品id ### 返回: - 作品评论分析-词云权重  # [English] ### Purpose: - Get the work comment analysis word cloud weight ### Parameters: - aweme_id: Work id ### Return: - Work comment analysis word cloud weight
     * @summary 获取作品评论分析-词云权重
     * @param {string} awemeId 作品id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet(awemeId: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取作品评论分析-词云权重 ### 参数: - aweme_id: 作品id ### 返回: - 作品评论分析-词云权重  # [English] ### Purpose: - Get the work comment analysis word cloud weight ### Parameters: - aweme_id: Work id ### Return: - Work comment analysis word cloud weight
     * @summary 获取作品评论分析-词云权重
     * @param {string} awemeId 作品id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet_16(awemeId: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotCommentWordListApiV1DouyinBillboardFetchHotCommentWordListGet_16(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取作品数据趋势 ### 参数: - aweme_id: 作品id - option: 选项，7 点赞量 8 分享量 9 评论量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 作品数据趋势  # [English] ### Purpose: - Get the work data trend ### Parameters: - aweme_id: Work id - option: Option, 7 Like 8 Share 9 Comment - date_window: Time window, 1 by hour 2 by day ### Return: - Work data trend
     * @summary 获取作品数据趋势
     * @param {string} option 选项，7 点赞量 8 分享量 9 评论量
     * @param {string} dateWindow 时间窗口，1 按小时 2 按天
     * @param {string} [awemeId] 作品id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet(option: string, dateWindow: string, awemeId?: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet(option, dateWindow, awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取作品数据趋势 ### 参数: - aweme_id: 作品id - option: 选项，7 点赞量 8 分享量 9 评论量 - date_window: 时间窗口，1 按小时 2 按天 ### 返回: - 作品数据趋势  # [English] ### Purpose: - Get the work data trend ### Parameters: - aweme_id: Work id - option: Option, 7 Like 8 Share 9 Comment - date_window: Time window, 1 by hour 2 by day ### Return: - Work data trend
     * @summary 获取作品数据趋势
     * @param {string} option 选项，7 点赞量 8 分享量 9 评论量
     * @param {string} dateWindow 时间窗口，1 按小时 2 按天
     * @param {string} [awemeId] 作品id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet_17(option: string, dateWindow: string, awemeId?: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotItemTrendsListApiV1DouyinBillboardFetchHotItemTrendsListGet_17(option, dateWindow, awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取上升热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 上升热点榜  # [English] ### Purpose: - Get the rising hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Rising hot list
     * @summary 获取上升热点榜
     * @param {number} page 页码
     * @param {number} pageSize 每页数量
     * @param {string} order 排序方式
     * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
     * @param {string} [keyword] 热点搜索词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet(page: number, pageSize: number, order: string, sentenceTag?: string, keyword?: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet(page, pageSize, order, sentenceTag, keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取上升热点榜 ### 参数: - page: 页码 - page_size: 每页数量 - order: 排序方式     - rank 按热度排序     - rank_diff 按排名变化 - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 上升热点榜  # [English] ### Purpose: - Get the rising hot list ### Parameters: - page: Page number - page_size: Number of items per page - order: Sorting method     - rank Sort by popularity     - rank_diff Sort by ranking change - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Rising hot list
     * @summary 获取上升热点榜
     * @param {number} page 页码
     * @param {number} pageSize 每页数量
     * @param {string} order 排序方式
     * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
     * @param {string} [keyword] 热点搜索词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet_18(page: number, pageSize: number, order: string, sentenceTag?: string, keyword?: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotRiseListApiV1DouyinBillboardFetchHotRiseListGet_18(page, pageSize, order, sentenceTag, keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取高涨粉率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高涨粉率榜  # [English] ### Purpose: - Get the high fan rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High fan rate list
     * @summary 获取高涨粉率榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取高涨粉率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高涨粉率榜  # [English] ### Purpose: - Get the high fan rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High fan rate list
     * @summary 获取高涨粉率榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost_19(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalHighFanListApiV1DouyinBillboardFetchHotTotalHighFanListPost_19(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取高点赞率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高点赞率榜  # [English] ### Purpose: - Get the high like rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High like rate list
     * @summary 获取高点赞率榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取高点赞率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高点赞率榜  # [English] ### Purpose: - Get the high like rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High like rate list
     * @summary 获取高点赞率榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost_20(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalHighLikeListApiV1DouyinBillboardFetchHotTotalHighLikeListPost_20(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取高完播率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高完播率榜  # [English] ### Purpose: - Get the high completion rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High completion rate list
     * @summary 获取高完播率榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取高完播率榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 高完播率榜  # [English] ### Purpose: - Get the high completion rate list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - High completion rate list
     * @summary 获取高完播率榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost_21(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalHighPlayListApiV1DouyinBillboardFetchHotTotalHighPlayListPost_21(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取热度飙升的搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 热度飙升的搜索榜  # [English] ### Purpose: - Get the search list with rising popularity ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list with rising popularity
     * @summary 获取热度飙升的搜索榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取热度飙升的搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 热度飙升的搜索榜  # [English] ### Purpose: - Get the search list with rising popularity ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list with rising popularity
     * @summary 获取热度飙升的搜索榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost_22(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalHighSearchListApiV1DouyinBillboardFetchHotTotalHighSearchListPost_22(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取热度飙升的话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 热度飙升的话题榜  # [English] ### Purpose: - Get the topic list with rising popularity ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Topic list with rising popularity
     * @summary 获取热度飙升的话题榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取热度飙升的话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 热度飙升的话题榜  # [English] ### Purpose: - Get the topic list with rising popularity ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Topic list with rising popularity
     * @summary 获取热度飙升的话题榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost_23(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalHighTopicListApiV1DouyinBillboardFetchHotTotalHighTopicListPost_23(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取内容词详情 ### 参数: - keyword: 搜索关键字 - word_id: 内容词id - query_day: 查询日期，格式为YYYYMMDD ### 返回: - 内容词详情  # [English] ### Purpose: - Get the details of content words ### Parameters: - keyword: Search keyword - word_id: Content word id - query_day: Query date, format is YYYYMMDD ### Return: - Details of content words
     * @summary 获取内容词详情
     * @param {string} keyword 搜索关键字
     * @param {string} wordId 内容词id
     * @param {number} queryDay 查询日期，格式为YYYYMMDD，需为当日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet(keyword: string, wordId: string, queryDay: number, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet(keyword, wordId, queryDay, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取内容词详情 ### 参数: - keyword: 搜索关键字 - word_id: 内容词id - query_day: 查询日期，格式为YYYYMMDD ### 返回: - 内容词详情  # [English] ### Purpose: - Get the details of content words ### Parameters: - keyword: Search keyword - word_id: Content word id - query_day: Query date, format is YYYYMMDD ### Return: - Details of content words
     * @summary 获取内容词详情
     * @param {string} keyword 搜索关键字
     * @param {string} wordId 内容词id
     * @param {number} queryDay 查询日期，格式为YYYYMMDD，需为当日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet_24(keyword: string, wordId: string, queryDay: number, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalHotWordDetailListApiV1DouyinBillboardFetchHotTotalHotWordDetailListGet_24(keyword, wordId, queryDay, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取全部内容词 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 全部内容词  # [English] ### Purpose: - Get the list of all content words ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - List of all content words
     * @summary 获取全部内容词
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取全部内容词 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 全部内容词  # [English] ### Purpose: - Get the list of all content words ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - List of all content words
     * @summary 获取全部内容词
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost_25(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalHotWordListApiV1DouyinBillboardFetchHotTotalHotWordListPost_25(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取热点总榜 ### 参数: - page: 页码 - page_size: 每页数量 - type: 快照类型 snapshot 按时刻查看 range 按时间范围。     - 备注：snapshot_time 在 snapshot时有效，start_date 和 end_date 在 range 时有效 - snapshot_time: 快照时间 格式yyyyMMddHHmmss - start_date: 快照开始时间 格式yyyyMMdd - end_date: 快照结束时间 格式yyyyMMdd - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 热点总榜  # [English] ### Purpose: - Get the total hot list ### Parameters: - page: Page number - page_size: Number of items per page - type: Snapshot type snapshot view by time range view by time range.     - Note: snapshot_time is valid when snapshot, start_date and end_date are valid when range - snapshot_time: Snapshot time format yyyyMMddHHmmss - start_date: Snapshot start time format yyyyMMdd - end_date: Snapshot end time format yyyyMMdd - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Total hot list
     * @summary 获取热点总榜
     * @param {number} page 页码
     * @param {number} pageSize 每页数量
     * @param {string} type 快照类型 snapshot 按时刻查看 range 按时间范围
     * @param {string} [snapshotTime] 快照时间 格式yyyyMMddHHmmss
     * @param {string} [startDate] 快照开始时间 格式yyyyMMdd
     * @param {string} [endDate] 快照结束时间 格式yyyyMMdd
     * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
     * @param {string} [keyword] 热点搜索词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet(page: number, pageSize: number, type: string, snapshotTime?: string, startDate?: string, endDate?: string, sentenceTag?: string, keyword?: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet(page, pageSize, type, snapshotTime, startDate, endDate, sentenceTag, keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取热点总榜 ### 参数: - page: 页码 - page_size: 每页数量 - type: 快照类型 snapshot 按时刻查看 range 按时间范围。     - 备注：snapshot_time 在 snapshot时有效，start_date 和 end_date 在 range 时有效 - snapshot_time: 快照时间 格式yyyyMMddHHmmss - start_date: 快照开始时间 格式yyyyMMdd - end_date: 快照结束时间 格式yyyyMMdd - sentence_tag: 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部 - keyword: 热点搜索词 ### 返回: - 热点总榜  # [English] ### Purpose: - Get the total hot list ### Parameters: - page: Page number - page_size: Number of items per page - type: Snapshot type snapshot view by time range view by time range.     - Note: snapshot_time is valid when snapshot, start_date and end_date are valid when range - snapshot_time: Snapshot time format yyyyMMddHHmmss - start_date: Snapshot start time format yyyyMMdd - end_date: Snapshot end time format yyyyMMdd - sentence_tag: Hot category tag, get from hot list category, multiple categories separated by commas, empty for all - keyword: Hot search term ### Return: - Total hot list
     * @summary 获取热点总榜
     * @param {number} page 页码
     * @param {number} pageSize 每页数量
     * @param {string} type 快照类型 snapshot 按时刻查看 range 按时间范围
     * @param {string} [snapshotTime] 快照时间 格式yyyyMMddHHmmss
     * @param {string} [startDate] 快照开始时间 格式yyyyMMdd
     * @param {string} [endDate] 快照结束时间 格式yyyyMMdd
     * @param {string} [sentenceTag] 热点分类标签，从热点榜分类获取，多个分类用逗号分隔，空为全部
     * @param {string} [keyword] 热点搜索词
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet_26(page: number, pageSize: number, type: string, snapshotTime?: string, startDate?: string, endDate?: string, sentenceTag?: string, keyword?: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalListApiV1DouyinBillboardFetchHotTotalListGet_26(page, pageSize, type, snapshotTime, startDate, endDate, sentenceTag, keyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取低粉爆款榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 低粉爆款榜  # [English] ### Purpose: - Get the low fan explosion list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Low fan explosion list
     * @summary 获取低粉爆款榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取低粉爆款榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 低粉爆款榜  # [English] ### Purpose: - Get the low fan explosion list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Low fan explosion list
     * @summary 获取低粉爆款榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost_27(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalLowFanListApiV1DouyinBillboardFetchHotTotalLowFanListPost_27(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 搜索榜  # [English] ### Purpose: - Get the search list ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list
     * @summary 获取搜索榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取搜索榜 ### 参数: - page_num: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - keyword: 搜索关键字 ### 返回: - 搜索榜  # [English] ### Purpose: - Get the search list ### Parameters: - page_num: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - keyword: Search keyword ### Return: - Search list
     * @summary 获取搜索榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost_28(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalSearchListApiV1DouyinBillboardFetchHotTotalSearchListPost_28(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 话题榜  # [English] ### Purpose: - Get the topic list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Topic list
     * @summary 获取话题榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取话题榜 ### 参数: - page: 页码 - page_size: 每页数量 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 话题榜  # [English] ### Purpose: - Get the topic list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Topic list
     * @summary 获取话题榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost_29(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalTopicListApiV1DouyinBillboardFetchHotTotalTopicListPost_29(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取视频榜 ### 参数: - page: 页码，默认1 - page_size: 每页数量，默认10 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 视频榜  # [English] ### Purpose: - Get the video list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Video list
     * @summary 获取视频榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取视频榜 ### 参数: - page: 页码，默认1 - page_size: 每页数量，默认10 - date_window: 时间窗口，1 按小时 2 按天 - tags: 子级垂类标签，空则为全部，多个标签需传入     {\"value\": \"{顶级垂类标签id}\", \"children\": [         {\"value\": \"{子级垂类标签id}\"},         {\"value\": \"{子级垂类标签id}\"}     ]} ### 返回: - 视频榜  # [English] ### Purpose: - Get the video list ### Parameters: - page: Page number - page_size: Number of items per page - date_window: Time window, 1 by hour 2 by day - tags: Sub-level vertical category tag, empty for all, multiple tags need to be passed in     {\"value\": \"{top-level vertical category id}\", \"children\": [         {\"value\": \"{sub-level vertical category id}\"},         {\"value\": \"{sub-level vertical category id}\"}     ]} ### Return: - Video list
     * @summary 获取视频榜
     * @param {UNKNOWN_BASE_TYPE} [uNKNOWNBASETYPE] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost_30(uNKNOWNBASETYPE?: UNKNOWN_BASE_TYPE, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotTotalVideoListApiV1DouyinBillboardFetchHotTotalVideoListPost_30(uNKNOWNBASETYPE, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取作品点赞观众画像 ### 参数: - aweme_id: 作品id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 ### 返回: - 作品点赞观众画像  # [English] ### Purpose: - Get the work like audience portrait ### Parameters: - aweme_id: Work id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution ### Return: - Work like audience portrait
     * @summary 获取作品点赞观众画像-仅限热门榜
     * @param {string} awemeId 作品id
     * @param {string} option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet(awemeId: string, option: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet(awemeId, option, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取作品点赞观众画像 ### 参数: - aweme_id: 作品id - option: 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布 ### 返回: - 作品点赞观众画像  # [English] ### Purpose: - Get the work like audience portrait ### Parameters: - aweme_id: Work id - option: Option     - 1 Mobile price     - 2 Gender distribution     - 3 Age distribution     - 4 Regional distribution - province     - 5 Regional distribution - city     - 6 City level     - 7 Mobile brand distribution ### Return: - Work like audience portrait
     * @summary 获取作品点赞观众画像-仅限热门榜
     * @param {string} awemeId 作品id
     * @param {string} option 选项，1 手机价格分布 2 性别分布 3 年龄分布 4 地域分布-省份 5 地域分布-城市 6 城市等级 7 手机品牌分布
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinBillboardAPIApi
     */
    public fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet_31(awemeId: string, option: string, options?: any) {
        return DouyinBillboardAPIApiFp(this.configuration).fetchHotUserPortraitListApiV1DouyinBillboardFetchHotUserPortraitListGet_31(awemeId, option, options).then((request) => request(this.axios, this.basePath));
    }

}
