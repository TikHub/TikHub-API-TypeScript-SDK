// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
/**
 * Lemon8AppAPIApi - axios parameter creator
 * @export
 */
export const Lemon8AppAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取发现页Banner（搜索页上方的滚动内容） ### 返回: - Banner列表  # [English] ### Purpose: - Get banners of discover page ### Return: - Banners list  # [示例/Example]
         * @summary 获取发现页Banner/Get banners of discover page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDiscoverBannersApiV1Lemon8AppFetchDiscoverBannersGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/lemon8/app/fetch_discover_banners`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取发现页Banner（搜索页上方的滚动内容） ### 返回: - Banner列表  # [English] ### Purpose: - Get banners of discover page ### Return: - Banners list  # [示例/Example]
         * @summary 获取发现页Banner/Get banners of discover page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDiscoverBannersApiV1Lemon8AppFetchDiscoverBannersGet_1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/lemon8/app/fetch_discover_banners`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取发现页（搜索页主体内容） ### 返回: - 主体内容  # [English] ### Purpose: - Get main content of discover page ### Return: - Main content  # [示例/Example]
         * @summary 获取发现页主体内容/Get main content of discover page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDiscoverTabApiV1Lemon8AppFetchDiscoverTabGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/lemon8/app/fetch_discover_tab`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取发现页（搜索页主体内容） ### 返回: - 主体内容  # [English] ### Purpose: - Get main content of discover page ### Return: - Main content  # [示例/Example]
         * @summary 获取发现页主体内容/Get main content of discover page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDiscoverTabApiV1Lemon8AppFetchDiscoverTabGet_2: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/lemon8/app/fetch_discover_tab`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取发现页（搜索页下方的推荐内容 - Editor\'s Picks） ### 返回: - 推荐内容  # [English] ### Purpose: - Get Editor\'s Picks of discover page ### Return: - Editor\'s Picks  # [示例/Example]
         * @summary 获取发现页的 Editor\'s Picks/Get Editor\'s Picks of discover page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDiscoverTabInformationTabsApiV1Lemon8AppFetchDiscoverTabInformationTabsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/lemon8/app/fetch_discover_tab_information_tabs`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取发现页（搜索页下方的推荐内容 - Editor\'s Picks） ### 返回: - 推荐内容  # [English] ### Purpose: - Get Editor\'s Picks of discover page ### Return: - Editor\'s Picks  # [示例/Example]
         * @summary 获取发现页的 Editor\'s Picks/Get Editor\'s Picks of discover page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDiscoverTabInformationTabsApiV1Lemon8AppFetchDiscoverTabInformationTabsGet_3: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/lemon8/app/fetch_discover_tab_information_tabs`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取热搜关键词 ### 返回: - 热搜关键词列表  # [English] ### Purpose: - Get hot search keywords ### Return: - Hot search keywords list  # [示例/Example]
         * @summary 获取热搜关键词/Get hot search keywords
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchKeywordsApiV1Lemon8AppFetchHotSearchKeywordsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/lemon8/app/fetch_hot_search_keywords`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取热搜关键词 ### 返回: - 热搜关键词列表  # [English] ### Purpose: - Get hot search keywords ### Return: - Hot search keywords list  # [示例/Example]
         * @summary 获取热搜关键词/Get hot search keywords
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchKeywordsApiV1Lemon8AppFetchHotSearchKeywordsGet_4: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/lemon8/app/fetch_hot_search_keywords`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定作品的评论列表 ### 参数: - group_id: 作品的group_id，可以从接口`/lemon8/app/fetch_post_detail`获取 - item_id: 作品的item_id，可以从接口`/lemon8/app/fetch_post_detail` 或 `/lemon8/app/get_item_id`获取 - media_id: 作品的media_id，可以从接口`/lemon8/app/fetch_post_detail`获取 - offset: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的offset进行翻页。 ### 返回: - 评论列表  # [English] ### Purpose: - Get comments list of specified post ### Parameters: - group_id: Post\'s group_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` - item_id: Post\'s item_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` or `/lemon8/app/get_item_id` - media_id: Post\'s media_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` - offset: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the offset returned by the last request is used for subsequent requests. ### Return: - Comments list  # [示例/Example] group_id = \"7361926875709129222\" item_id = \"7361926875709129222\" media_id = \"7428056850216862763\"
         * @summary 获取指定作品的评论列表/Get comments list of specified post
         * @param {string} groupId 作品的group_id/Post\&#39;s group_id
         * @param {string} itemId 作品的item_id/Post\&#39;s item_id
         * @param {string} mediaId 作品的media_id/Post\&#39;s media_id
         * @param {string} [offset] 翻页参数/Pagination parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet: async (groupId: string, itemId: string, mediaId: string, offset?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet.');
            }
            // verify required parameter 'mediaId' is not null or undefined
            if (mediaId === null || mediaId === undefined) {
                throw new RequiredError('mediaId','Required parameter mediaId was null or undefined when calling fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet.');
            }
            const localVarPath = `/api/v1/lemon8/app/fetch_post_comment_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (mediaId !== undefined) {
                localVarQueryParameter['media_id'] = mediaId;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定作品的评论列表 ### 参数: - group_id: 作品的group_id，可以从接口`/lemon8/app/fetch_post_detail`获取 - item_id: 作品的item_id，可以从接口`/lemon8/app/fetch_post_detail` 或 `/lemon8/app/get_item_id`获取 - media_id: 作品的media_id，可以从接口`/lemon8/app/fetch_post_detail`获取 - offset: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的offset进行翻页。 ### 返回: - 评论列表  # [English] ### Purpose: - Get comments list of specified post ### Parameters: - group_id: Post\'s group_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` - item_id: Post\'s item_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` or `/lemon8/app/get_item_id` - media_id: Post\'s media_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` - offset: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the offset returned by the last request is used for subsequent requests. ### Return: - Comments list  # [示例/Example] group_id = \"7361926875709129222\" item_id = \"7361926875709129222\" media_id = \"7428056850216862763\"
         * @summary 获取指定作品的评论列表/Get comments list of specified post
         * @param {string} groupId 作品的group_id/Post\&#39;s group_id
         * @param {string} itemId 作品的item_id/Post\&#39;s item_id
         * @param {string} mediaId 作品的media_id/Post\&#39;s media_id
         * @param {string} [offset] 翻页参数/Pagination parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet_5: async (groupId: string, itemId: string, mediaId: string, offset?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet_5.');
            }
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet_5.');
            }
            // verify required parameter 'mediaId' is not null or undefined
            if (mediaId === null || mediaId === undefined) {
                throw new RequiredError('mediaId','Required parameter mediaId was null or undefined when calling fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet_5.');
            }
            const localVarPath = `/api/v1/lemon8/app/fetch_post_comment_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (groupId !== undefined) {
                localVarQueryParameter['group_id'] = groupId;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (mediaId !== undefined) {
                localVarQueryParameter['media_id'] = mediaId;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定作品的信息 ### 参数: - item_id: 作品ID，可以从接口`/lemon8/app/get_item_id`获取 ### 返回: - 作品信息  # [English] ### Purpose: - Get information of specified post ### Parameters: - item_id: Post ID, can be obtained from the interface `/lemon8/app/get_item_id` ### Return: - Post information  # [示例/Example] item_id = \"7361926875709129222\"
         * @summary 获取指定作品的信息/Get information of specified post
         * @param {string} itemId 作品ID/Post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostDetailApiV1Lemon8AppFetchPostDetailGet: async (itemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchPostDetailApiV1Lemon8AppFetchPostDetailGet.');
            }
            const localVarPath = `/api/v1/lemon8/app/fetch_post_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定作品的信息 ### 参数: - item_id: 作品ID，可以从接口`/lemon8/app/get_item_id`获取 ### 返回: - 作品信息  # [English] ### Purpose: - Get information of specified post ### Parameters: - item_id: Post ID, can be obtained from the interface `/lemon8/app/get_item_id` ### Return: - Post information  # [示例/Example] item_id = \"7361926875709129222\"
         * @summary 获取指定作品的信息/Get information of specified post
         * @param {string} itemId 作品ID/Post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostDetailApiV1Lemon8AppFetchPostDetailGet_6: async (itemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchPostDetailApiV1Lemon8AppFetchPostDetailGet_6.');
            }
            const localVarPath = `/api/v1/lemon8/app/fetch_post_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索接口 ### 参数: - query: 搜索关键词 - max_cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的`max_cursor`进行翻页，可以通过返回结果的`has_more`字段判断是否还有更多数据。 - filter_type: 搜索过滤类型，默认为空字符串，可选值如下：     - 空字符串：All（全部，默认使用此参数搜索）     - video：只搜索视频作品     - posts：只搜索文章作品 - order_by: 搜索排序方式，默认为空字符串，可选值如下：     - 空字符串：Relevance（相关度，默认使用此参数排序）     - popular：流行度排序     - recent：从新到旧排序 - search_tab: 搜索类型，默认为`main`，可选值如下：     - main：APP中显示为 `Top`（综合搜索，默认使用此参数搜索）     - user：APP中显示为 `Accounts` （搜索用户账号）     - hashtag：APP中显示为 `Hashtags`（搜索话题）     - article：APP中显示为 `Posts`（搜索文章） ### 返回: - 搜索结果  # [English] ### Purpose: - Search API ### Parameters: - query: Search keyword - max_cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the `max_cursor` returned by the last request is used for subsequent requests. You can judge whether there is more data by the `has_more` field in the return result. - filter_type: Search filter type, default is an empty string, optional values are as follows:     - Empty string: All (default using this parameter to search)     - video: Search only video     - posts: Search only posts - order_by: Search sort type, default is an empty string, optional values are as follows:     - Empty string: Relevance (default using this parameter to sort)     - popular: Sort by popularity     - recent: Sort from new to old - search_tab: Search type, default is `main`, optional values are as follows:     - main: Display as `Top` in the APP (comprehensive search, default using this parameter to search)     - user: Display as `Accounts` in the APP (search user accounts)     - hashtag: Display as `Hashtags` in the APP (search hashtags)     - article: Display as `Posts` in the APP (search articles) ### Return: - Search results  # [示例/Example] query = \"lemon8\" max_cursor = \"\" filter_type = \"\" order_by = \"\" search_tab = \"main\"
         * @summary 搜索接口/Search API
         * @param {string} query 搜索关键词/Search keyword
         * @param {string} [maxCursor] 翻页参数/Pagination parameter
         * @param {string} [filterType] 搜索过滤类型/Search filter type
         * @param {string} [orderBy] 搜索排序方式/Search sort type
         * @param {string} [searchTab] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchApiV1Lemon8AppFetchSearchGet: async (query: string, maxCursor?: string, filterType?: string, orderBy?: string, searchTab?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query','Required parameter query was null or undefined when calling fetchSearchApiV1Lemon8AppFetchSearchGet.');
            }
            const localVarPath = `/api/v1/lemon8/app/fetch_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (filterType !== undefined) {
                localVarQueryParameter['filter_type'] = filterType;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (searchTab !== undefined) {
                localVarQueryParameter['search_tab'] = searchTab;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索接口 ### 参数: - query: 搜索关键词 - max_cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的`max_cursor`进行翻页，可以通过返回结果的`has_more`字段判断是否还有更多数据。 - filter_type: 搜索过滤类型，默认为空字符串，可选值如下：     - 空字符串：All（全部，默认使用此参数搜索）     - video：只搜索视频作品     - posts：只搜索文章作品 - order_by: 搜索排序方式，默认为空字符串，可选值如下：     - 空字符串：Relevance（相关度，默认使用此参数排序）     - popular：流行度排序     - recent：从新到旧排序 - search_tab: 搜索类型，默认为`main`，可选值如下：     - main：APP中显示为 `Top`（综合搜索，默认使用此参数搜索）     - user：APP中显示为 `Accounts` （搜索用户账号）     - hashtag：APP中显示为 `Hashtags`（搜索话题）     - article：APP中显示为 `Posts`（搜索文章） ### 返回: - 搜索结果  # [English] ### Purpose: - Search API ### Parameters: - query: Search keyword - max_cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the `max_cursor` returned by the last request is used for subsequent requests. You can judge whether there is more data by the `has_more` field in the return result. - filter_type: Search filter type, default is an empty string, optional values are as follows:     - Empty string: All (default using this parameter to search)     - video: Search only video     - posts: Search only posts - order_by: Search sort type, default is an empty string, optional values are as follows:     - Empty string: Relevance (default using this parameter to sort)     - popular: Sort by popularity     - recent: Sort from new to old - search_tab: Search type, default is `main`, optional values are as follows:     - main: Display as `Top` in the APP (comprehensive search, default using this parameter to search)     - user: Display as `Accounts` in the APP (search user accounts)     - hashtag: Display as `Hashtags` in the APP (search hashtags)     - article: Display as `Posts` in the APP (search articles) ### Return: - Search results  # [示例/Example] query = \"lemon8\" max_cursor = \"\" filter_type = \"\" order_by = \"\" search_tab = \"main\"
         * @summary 搜索接口/Search API
         * @param {string} query 搜索关键词/Search keyword
         * @param {string} [maxCursor] 翻页参数/Pagination parameter
         * @param {string} [filterType] 搜索过滤类型/Search filter type
         * @param {string} [orderBy] 搜索排序方式/Search sort type
         * @param {string} [searchTab] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchApiV1Lemon8AppFetchSearchGet_7: async (query: string, maxCursor?: string, filterType?: string, orderBy?: string, searchTab?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query','Required parameter query was null or undefined when calling fetchSearchApiV1Lemon8AppFetchSearchGet_7.');
            }
            const localVarPath = `/api/v1/lemon8/app/fetch_search`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (filterType !== undefined) {
                localVarQueryParameter['filter_type'] = filterType;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (searchTab !== undefined) {
                localVarQueryParameter['search_tab'] = searchTab;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题信息 ### 参数: - forum_id: 话题ID，可以从下面的接口获取     - 获取指定作品的信息：`/lemon8/app/fetch_post_detail`     - 获取发现页的 Editor\'s Picks：`/lemon8/app/fetch_discover_tab_information_tabs`     - 通过接口搜索 Hashtag：`/lemon8/app/fetch_search?search_tab=hashtag&keyword=lemon8` ### 返回: - 话题信息  # [English] ### Purpose: - Get topic information ### Parameters: - forum_id: Topic ID, can be obtained from the following interfaces     - Get information of specified post: `/lemon8/app/fetch_post_detail`     - Get Editor\'s Picks of discover page: `/lemon8/app/fetch_discover_tab_information_tabs`     - Search Hashtag through interface: `/lemon8/app/fetch_search?search_tab=hashtag&keyword=lemon8` ### Return: - Topic information  # [示例/Example] forum_id = \"7174447913778593798\"
         * @summary 获取话题信息/Get topic information
         * @param {string} forumId 话题ID/Topic ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet: async (forumId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'forumId' is not null or undefined
            if (forumId === null || forumId === undefined) {
                throw new RequiredError('forumId','Required parameter forumId was null or undefined when calling fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet.');
            }
            const localVarPath = `/api/v1/lemon8/app/fetch_topic_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (forumId !== undefined) {
                localVarQueryParameter['forum_id'] = forumId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题信息 ### 参数: - forum_id: 话题ID，可以从下面的接口获取     - 获取指定作品的信息：`/lemon8/app/fetch_post_detail`     - 获取发现页的 Editor\'s Picks：`/lemon8/app/fetch_discover_tab_information_tabs`     - 通过接口搜索 Hashtag：`/lemon8/app/fetch_search?search_tab=hashtag&keyword=lemon8` ### 返回: - 话题信息  # [English] ### Purpose: - Get topic information ### Parameters: - forum_id: Topic ID, can be obtained from the following interfaces     - Get information of specified post: `/lemon8/app/fetch_post_detail`     - Get Editor\'s Picks of discover page: `/lemon8/app/fetch_discover_tab_information_tabs`     - Search Hashtag through interface: `/lemon8/app/fetch_search?search_tab=hashtag&keyword=lemon8` ### Return: - Topic information  # [示例/Example] forum_id = \"7174447913778593798\"
         * @summary 获取话题信息/Get topic information
         * @param {string} forumId 话题ID/Topic ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet_8: async (forumId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'forumId' is not null or undefined
            if (forumId === null || forumId === undefined) {
                throw new RequiredError('forumId','Required parameter forumId was null or undefined when calling fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet_8.');
            }
            const localVarPath = `/api/v1/lemon8/app/fetch_topic_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (forumId !== undefined) {
                localVarQueryParameter['forum_id'] = forumId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题作品列表 ### 参数: - category: 话题分类 ID，可以从接口`/lemon8/app/fetch_topic_info`获取 - max_behot_time: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的max_behot_time进行翻页。 - category_parameter: 分类参数ID，可以从接口`/lemon8/app/fetch_topic_info`获取 - hashtag_name: Hashtag名称，可以从接口`/lemon8/app/fetch_topic_info`获取 - sort_type: 排序方式，0为默认排序，当前只支持使用默认排序，请不要传入其他值。 ### 返回: - 作品列表  # [English] ### Purpose: - Get topic post list ### Parameters: - category: Topic category ID, can be obtained from the interface `/lemon8/app/fetch_topic_info` - max_behot_time: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the max_behot_time returned by the last request is used for subsequent requests. - category_parameter: Category parameter ID, can be obtained from the interface `/lemon8/app/fetch_topic_info` - hashtag_name: Hashtag name, can be obtained from the interface `/lemon8/app/fetch_topic_info` - sort_type: Sort type, 0 for default sort, currently only support default sort, please do not pass other values. ### Return: - Post list  # [示例/Example] category = \"590\" max_behot_time = \"\" category_parameter = \"7174447913778593798\" hashtag_name = \"lemon8christmas\" sort_type = \"0\"
         * @summary 获取话题作品列表/Get topic post list
         * @param {string} category 话题分类 ID/Topic category ID
         * @param {string} categoryParameter 分类参数/Category parameter
         * @param {string} hashtagName Hashtag名称/Hashtag name
         * @param {string} [maxBehotTime] 翻页参数/Pagination parameter
         * @param {string} [sortType] 排序方式/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet: async (category: string, categoryParameter: string, hashtagName: string, maxBehotTime?: string, sortType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet.');
            }
            // verify required parameter 'categoryParameter' is not null or undefined
            if (categoryParameter === null || categoryParameter === undefined) {
                throw new RequiredError('categoryParameter','Required parameter categoryParameter was null or undefined when calling fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet.');
            }
            // verify required parameter 'hashtagName' is not null or undefined
            if (hashtagName === null || hashtagName === undefined) {
                throw new RequiredError('hashtagName','Required parameter hashtagName was null or undefined when calling fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet.');
            }
            const localVarPath = `/api/v1/lemon8/app/fetch_topic_post_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (maxBehotTime !== undefined) {
                localVarQueryParameter['max_behot_time'] = maxBehotTime;
            }

            if (categoryParameter !== undefined) {
                localVarQueryParameter['category_parameter'] = categoryParameter;
            }

            if (hashtagName !== undefined) {
                localVarQueryParameter['hashtag_name'] = hashtagName;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题作品列表 ### 参数: - category: 话题分类 ID，可以从接口`/lemon8/app/fetch_topic_info`获取 - max_behot_time: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的max_behot_time进行翻页。 - category_parameter: 分类参数ID，可以从接口`/lemon8/app/fetch_topic_info`获取 - hashtag_name: Hashtag名称，可以从接口`/lemon8/app/fetch_topic_info`获取 - sort_type: 排序方式，0为默认排序，当前只支持使用默认排序，请不要传入其他值。 ### 返回: - 作品列表  # [English] ### Purpose: - Get topic post list ### Parameters: - category: Topic category ID, can be obtained from the interface `/lemon8/app/fetch_topic_info` - max_behot_time: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the max_behot_time returned by the last request is used for subsequent requests. - category_parameter: Category parameter ID, can be obtained from the interface `/lemon8/app/fetch_topic_info` - hashtag_name: Hashtag name, can be obtained from the interface `/lemon8/app/fetch_topic_info` - sort_type: Sort type, 0 for default sort, currently only support default sort, please do not pass other values. ### Return: - Post list  # [示例/Example] category = \"590\" max_behot_time = \"\" category_parameter = \"7174447913778593798\" hashtag_name = \"lemon8christmas\" sort_type = \"0\"
         * @summary 获取话题作品列表/Get topic post list
         * @param {string} category 话题分类 ID/Topic category ID
         * @param {string} categoryParameter 分类参数/Category parameter
         * @param {string} hashtagName Hashtag名称/Hashtag name
         * @param {string} [maxBehotTime] 翻页参数/Pagination parameter
         * @param {string} [sortType] 排序方式/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet_9: async (category: string, categoryParameter: string, hashtagName: string, maxBehotTime?: string, sortType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'category' is not null or undefined
            if (category === null || category === undefined) {
                throw new RequiredError('category','Required parameter category was null or undefined when calling fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet_9.');
            }
            // verify required parameter 'categoryParameter' is not null or undefined
            if (categoryParameter === null || categoryParameter === undefined) {
                throw new RequiredError('categoryParameter','Required parameter categoryParameter was null or undefined when calling fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet_9.');
            }
            // verify required parameter 'hashtagName' is not null or undefined
            if (hashtagName === null || hashtagName === undefined) {
                throw new RequiredError('hashtagName','Required parameter hashtagName was null or undefined when calling fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet_9.');
            }
            const localVarPath = `/api/v1/lemon8/app/fetch_topic_post_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (category !== undefined) {
                localVarQueryParameter['category'] = category;
            }

            if (maxBehotTime !== undefined) {
                localVarQueryParameter['max_behot_time'] = maxBehotTime;
            }

            if (categoryParameter !== undefined) {
                localVarQueryParameter['category_parameter'] = categoryParameter;
            }

            if (hashtagName !== undefined) {
                localVarQueryParameter['hashtag_name'] = hashtagName;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的粉丝列表 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get fans list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Fans list  # [示例/Example] user_id = \"7428056850216862763\"
         * @summary 获取指定用户的粉丝列表/Get fans list of specified user
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 翻页参数/Pagination parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet: async (userId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet.');
            }
            const localVarPath = `/api/v1/lemon8/app/fetch_user_follower_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的粉丝列表 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get fans list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Fans list  # [示例/Example] user_id = \"7428056850216862763\"
         * @summary 获取指定用户的粉丝列表/Get fans list of specified user
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 翻页参数/Pagination parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet_10: async (userId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet_10.');
            }
            const localVarPath = `/api/v1/lemon8/app/fetch_user_follower_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的关注列表 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 关注列表  # [English] ### Purpose: - Get following list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Following list  # [示例/Example] user_id = \"7428056850216862763\"
         * @summary 获取指定用户的关注列表/Get following list of specified user
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 翻页参数/Pagination parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet: async (userId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet.');
            }
            const localVarPath = `/api/v1/lemon8/app/fetch_user_following_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的关注列表 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 关注列表  # [English] ### Purpose: - Get following list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Following list  # [示例/Example] user_id = \"7428056850216862763\"
         * @summary 获取指定用户的关注列表/Get following list of specified user
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 翻页参数/Pagination parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet_11: async (userId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet_11.');
            }
            const localVarPath = `/api/v1/lemon8/app/fetch_user_following_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取作品ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID  # [English] ### Purpose: - Get post ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post ID  # [示例/Example] share_text = \"https://www.lemon8-app.com/@deathlabs_/7445613324903006766\" share_text = \"https://v.lemon8-app.com/al/OghwFTppx\"
         * @summary 通过分享链接获取作品ID/Get post ID through sharing link
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemIdApiV1Lemon8AppGetItemIdGet: async (shareText: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareText' is not null or undefined
            if (shareText === null || shareText === undefined) {
                throw new RequiredError('shareText','Required parameter shareText was null or undefined when calling getItemIdApiV1Lemon8AppGetItemIdGet.');
            }
            const localVarPath = `/api/v1/lemon8/app/get_item_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareText !== undefined) {
                localVarQueryParameter['share_text'] = shareText;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取作品ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID  # [English] ### Purpose: - Get post ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post ID  # [示例/Example] share_text = \"https://www.lemon8-app.com/@deathlabs_/7445613324903006766\" share_text = \"https://v.lemon8-app.com/al/OghwFTppx\"
         * @summary 通过分享链接获取作品ID/Get post ID through sharing link
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemIdApiV1Lemon8AppGetItemIdGet_12: async (shareText: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareText' is not null or undefined
            if (shareText === null || shareText === undefined) {
                throw new RequiredError('shareText','Required parameter shareText was null or undefined when calling getItemIdApiV1Lemon8AppGetItemIdGet_12.');
            }
            const localVarPath = `/api/v1/lemon8/app/get_item_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareText !== undefined) {
                localVarQueryParameter['share_text'] = shareText;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接批量获取作品ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID列表  # [English] ### Purpose: - Get post IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post IDs list  # [示例/Example] share_texts = [     \"https://www.lemon8-app.com/@deathlabs_/7445613324903006766\",     \"https://v.lemon8-app.com/al/OghwFTppx\" ]
         * @summary 通过分享链接批量获取作品ID/Get post IDs in batch through sharing links
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemIdsApiV1Lemon8AppGetItemIdsPost: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/lemon8/app/get_item_ids`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接批量获取作品ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID列表  # [English] ### Purpose: - Get post IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post IDs list  # [示例/Example] share_texts = [     \"https://www.lemon8-app.com/@deathlabs_/7445613324903006766\",     \"https://v.lemon8-app.com/al/OghwFTppx\" ]
         * @summary 通过分享链接批量获取作品ID/Get post IDs in batch through sharing links
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemIdsApiV1Lemon8AppGetItemIdsPost_13: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/lemon8/app/get_item_ids`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取用户ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID  # [English] ### Purpose: - Get user ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User ID  # [示例/Example] share_text = \"https://www.lemon8-app.com/lemon8cars?region=us\" share_text = \"https://v.lemon8-app.com/al/OgZrsUppx\"
         * @summary 通过分享链接获取用户ID/Get user ID through sharing link
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserIdApiV1Lemon8AppGetUserIdGet: async (shareText: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareText' is not null or undefined
            if (shareText === null || shareText === undefined) {
                throw new RequiredError('shareText','Required parameter shareText was null or undefined when calling getUserIdApiV1Lemon8AppGetUserIdGet.');
            }
            const localVarPath = `/api/v1/lemon8/app/get_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareText !== undefined) {
                localVarQueryParameter['share_text'] = shareText;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取用户ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID  # [English] ### Purpose: - Get user ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User ID  # [示例/Example] share_text = \"https://www.lemon8-app.com/lemon8cars?region=us\" share_text = \"https://v.lemon8-app.com/al/OgZrsUppx\"
         * @summary 通过分享链接获取用户ID/Get user ID through sharing link
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserIdApiV1Lemon8AppGetUserIdGet_14: async (shareText: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareText' is not null or undefined
            if (shareText === null || shareText === undefined) {
                throw new RequiredError('shareText','Required parameter shareText was null or undefined when calling getUserIdApiV1Lemon8AppGetUserIdGet_14.');
            }
            const localVarPath = `/api/v1/lemon8/app/get_user_id`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareText !== undefined) {
                localVarQueryParameter['share_text'] = shareText;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接批量获取用户ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID列表  # [English] ### Purpose: - Get user IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User IDs list  # [示例/Example] share_texts = [     \"https://www.lemon8-app.com/lemon8cars?region=us\",     \"https://v.lemon8-app.com/al/OgZrsUppx\" ]
         * @summary 通过分享链接批量获取用户ID/Get user IDs in batch through sharing links
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserIdsApiV1Lemon8AppGetUserIdsPost: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/lemon8/app/get_user_ids`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接批量获取用户ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID列表  # [English] ### Purpose: - Get user IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User IDs list  # [示例/Example] share_texts = [     \"https://www.lemon8-app.com/lemon8cars?region=us\",     \"https://v.lemon8-app.com/al/OgZrsUppx\" ]
         * @summary 通过分享链接批量获取用户ID/Get user IDs in batch through sharing links
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserIdsApiV1Lemon8AppGetUserIdsPost_15: async (requestBody?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/lemon8/app/get_user_ids`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` ### Return: - User information  # [示例/Example] user_id = \"7217844966059656197
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1Lemon8AppFetchUserProfileGet: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling handlerUserProfileApiV1Lemon8AppFetchUserProfileGet.');
            }
            const localVarPath = `/api/v1/lemon8/app/fetch_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` ### Return: - User information  # [示例/Example] user_id = \"7217844966059656197
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1Lemon8AppFetchUserProfileGet_16: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling handlerUserProfileApiV1Lemon8AppFetchUserProfileGet_16.');
            }
            const localVarPath = `/api/v1/lemon8/app/fetch_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * Lemon8AppAPIApi - functional programming interface
 * @export
 */
export const Lemon8AppAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取发现页Banner（搜索页上方的滚动内容） ### 返回: - Banner列表  # [English] ### Purpose: - Get banners of discover page ### Return: - Banners list  # [示例/Example]
         * @summary 获取发现页Banner/Get banners of discover page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDiscoverBannersApiV1Lemon8AppFetchDiscoverBannersGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchDiscoverBannersApiV1Lemon8AppFetchDiscoverBannersGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取发现页Banner（搜索页上方的滚动内容） ### 返回: - Banner列表  # [English] ### Purpose: - Get banners of discover page ### Return: - Banners list  # [示例/Example]
         * @summary 获取发现页Banner/Get banners of discover page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDiscoverBannersApiV1Lemon8AppFetchDiscoverBannersGet_1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchDiscoverBannersApiV1Lemon8AppFetchDiscoverBannersGet_1(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取发现页（搜索页主体内容） ### 返回: - 主体内容  # [English] ### Purpose: - Get main content of discover page ### Return: - Main content  # [示例/Example]
         * @summary 获取发现页主体内容/Get main content of discover page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDiscoverTabApiV1Lemon8AppFetchDiscoverTabGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchDiscoverTabApiV1Lemon8AppFetchDiscoverTabGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取发现页（搜索页主体内容） ### 返回: - 主体内容  # [English] ### Purpose: - Get main content of discover page ### Return: - Main content  # [示例/Example]
         * @summary 获取发现页主体内容/Get main content of discover page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDiscoverTabApiV1Lemon8AppFetchDiscoverTabGet_2(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchDiscoverTabApiV1Lemon8AppFetchDiscoverTabGet_2(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取发现页（搜索页下方的推荐内容 - Editor\'s Picks） ### 返回: - 推荐内容  # [English] ### Purpose: - Get Editor\'s Picks of discover page ### Return: - Editor\'s Picks  # [示例/Example]
         * @summary 获取发现页的 Editor\'s Picks/Get Editor\'s Picks of discover page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDiscoverTabInformationTabsApiV1Lemon8AppFetchDiscoverTabInformationTabsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchDiscoverTabInformationTabsApiV1Lemon8AppFetchDiscoverTabInformationTabsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取发现页（搜索页下方的推荐内容 - Editor\'s Picks） ### 返回: - 推荐内容  # [English] ### Purpose: - Get Editor\'s Picks of discover page ### Return: - Editor\'s Picks  # [示例/Example]
         * @summary 获取发现页的 Editor\'s Picks/Get Editor\'s Picks of discover page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchDiscoverTabInformationTabsApiV1Lemon8AppFetchDiscoverTabInformationTabsGet_3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchDiscoverTabInformationTabsApiV1Lemon8AppFetchDiscoverTabInformationTabsGet_3(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取热搜关键词 ### 返回: - 热搜关键词列表  # [English] ### Purpose: - Get hot search keywords ### Return: - Hot search keywords list  # [示例/Example]
         * @summary 获取热搜关键词/Get hot search keywords
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotSearchKeywordsApiV1Lemon8AppFetchHotSearchKeywordsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchHotSearchKeywordsApiV1Lemon8AppFetchHotSearchKeywordsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取热搜关键词 ### 返回: - 热搜关键词列表  # [English] ### Purpose: - Get hot search keywords ### Return: - Hot search keywords list  # [示例/Example]
         * @summary 获取热搜关键词/Get hot search keywords
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotSearchKeywordsApiV1Lemon8AppFetchHotSearchKeywordsGet_4(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchHotSearchKeywordsApiV1Lemon8AppFetchHotSearchKeywordsGet_4(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定作品的评论列表 ### 参数: - group_id: 作品的group_id，可以从接口`/lemon8/app/fetch_post_detail`获取 - item_id: 作品的item_id，可以从接口`/lemon8/app/fetch_post_detail` 或 `/lemon8/app/get_item_id`获取 - media_id: 作品的media_id，可以从接口`/lemon8/app/fetch_post_detail`获取 - offset: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的offset进行翻页。 ### 返回: - 评论列表  # [English] ### Purpose: - Get comments list of specified post ### Parameters: - group_id: Post\'s group_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` - item_id: Post\'s item_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` or `/lemon8/app/get_item_id` - media_id: Post\'s media_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` - offset: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the offset returned by the last request is used for subsequent requests. ### Return: - Comments list  # [示例/Example] group_id = \"7361926875709129222\" item_id = \"7361926875709129222\" media_id = \"7428056850216862763\"
         * @summary 获取指定作品的评论列表/Get comments list of specified post
         * @param {string} groupId 作品的group_id/Post\&#39;s group_id
         * @param {string} itemId 作品的item_id/Post\&#39;s item_id
         * @param {string} mediaId 作品的media_id/Post\&#39;s media_id
         * @param {string} [offset] 翻页参数/Pagination parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet(groupId: string, itemId: string, mediaId: string, offset?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet(groupId, itemId, mediaId, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定作品的评论列表 ### 参数: - group_id: 作品的group_id，可以从接口`/lemon8/app/fetch_post_detail`获取 - item_id: 作品的item_id，可以从接口`/lemon8/app/fetch_post_detail` 或 `/lemon8/app/get_item_id`获取 - media_id: 作品的media_id，可以从接口`/lemon8/app/fetch_post_detail`获取 - offset: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的offset进行翻页。 ### 返回: - 评论列表  # [English] ### Purpose: - Get comments list of specified post ### Parameters: - group_id: Post\'s group_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` - item_id: Post\'s item_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` or `/lemon8/app/get_item_id` - media_id: Post\'s media_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` - offset: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the offset returned by the last request is used for subsequent requests. ### Return: - Comments list  # [示例/Example] group_id = \"7361926875709129222\" item_id = \"7361926875709129222\" media_id = \"7428056850216862763\"
         * @summary 获取指定作品的评论列表/Get comments list of specified post
         * @param {string} groupId 作品的group_id/Post\&#39;s group_id
         * @param {string} itemId 作品的item_id/Post\&#39;s item_id
         * @param {string} mediaId 作品的media_id/Post\&#39;s media_id
         * @param {string} [offset] 翻页参数/Pagination parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet_5(groupId: string, itemId: string, mediaId: string, offset?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet_5(groupId, itemId, mediaId, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定作品的信息 ### 参数: - item_id: 作品ID，可以从接口`/lemon8/app/get_item_id`获取 ### 返回: - 作品信息  # [English] ### Purpose: - Get information of specified post ### Parameters: - item_id: Post ID, can be obtained from the interface `/lemon8/app/get_item_id` ### Return: - Post information  # [示例/Example] item_id = \"7361926875709129222\"
         * @summary 获取指定作品的信息/Get information of specified post
         * @param {string} itemId 作品ID/Post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostDetailApiV1Lemon8AppFetchPostDetailGet(itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchPostDetailApiV1Lemon8AppFetchPostDetailGet(itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定作品的信息 ### 参数: - item_id: 作品ID，可以从接口`/lemon8/app/get_item_id`获取 ### 返回: - 作品信息  # [English] ### Purpose: - Get information of specified post ### Parameters: - item_id: Post ID, can be obtained from the interface `/lemon8/app/get_item_id` ### Return: - Post information  # [示例/Example] item_id = \"7361926875709129222\"
         * @summary 获取指定作品的信息/Get information of specified post
         * @param {string} itemId 作品ID/Post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostDetailApiV1Lemon8AppFetchPostDetailGet_6(itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchPostDetailApiV1Lemon8AppFetchPostDetailGet_6(itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索接口 ### 参数: - query: 搜索关键词 - max_cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的`max_cursor`进行翻页，可以通过返回结果的`has_more`字段判断是否还有更多数据。 - filter_type: 搜索过滤类型，默认为空字符串，可选值如下：     - 空字符串：All（全部，默认使用此参数搜索）     - video：只搜索视频作品     - posts：只搜索文章作品 - order_by: 搜索排序方式，默认为空字符串，可选值如下：     - 空字符串：Relevance（相关度，默认使用此参数排序）     - popular：流行度排序     - recent：从新到旧排序 - search_tab: 搜索类型，默认为`main`，可选值如下：     - main：APP中显示为 `Top`（综合搜索，默认使用此参数搜索）     - user：APP中显示为 `Accounts` （搜索用户账号）     - hashtag：APP中显示为 `Hashtags`（搜索话题）     - article：APP中显示为 `Posts`（搜索文章） ### 返回: - 搜索结果  # [English] ### Purpose: - Search API ### Parameters: - query: Search keyword - max_cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the `max_cursor` returned by the last request is used for subsequent requests. You can judge whether there is more data by the `has_more` field in the return result. - filter_type: Search filter type, default is an empty string, optional values are as follows:     - Empty string: All (default using this parameter to search)     - video: Search only video     - posts: Search only posts - order_by: Search sort type, default is an empty string, optional values are as follows:     - Empty string: Relevance (default using this parameter to sort)     - popular: Sort by popularity     - recent: Sort from new to old - search_tab: Search type, default is `main`, optional values are as follows:     - main: Display as `Top` in the APP (comprehensive search, default using this parameter to search)     - user: Display as `Accounts` in the APP (search user accounts)     - hashtag: Display as `Hashtags` in the APP (search hashtags)     - article: Display as `Posts` in the APP (search articles) ### Return: - Search results  # [示例/Example] query = \"lemon8\" max_cursor = \"\" filter_type = \"\" order_by = \"\" search_tab = \"main\"
         * @summary 搜索接口/Search API
         * @param {string} query 搜索关键词/Search keyword
         * @param {string} [maxCursor] 翻页参数/Pagination parameter
         * @param {string} [filterType] 搜索过滤类型/Search filter type
         * @param {string} [orderBy] 搜索排序方式/Search sort type
         * @param {string} [searchTab] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchApiV1Lemon8AppFetchSearchGet(query: string, maxCursor?: string, filterType?: string, orderBy?: string, searchTab?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchSearchApiV1Lemon8AppFetchSearchGet(query, maxCursor, filterType, orderBy, searchTab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索接口 ### 参数: - query: 搜索关键词 - max_cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的`max_cursor`进行翻页，可以通过返回结果的`has_more`字段判断是否还有更多数据。 - filter_type: 搜索过滤类型，默认为空字符串，可选值如下：     - 空字符串：All（全部，默认使用此参数搜索）     - video：只搜索视频作品     - posts：只搜索文章作品 - order_by: 搜索排序方式，默认为空字符串，可选值如下：     - 空字符串：Relevance（相关度，默认使用此参数排序）     - popular：流行度排序     - recent：从新到旧排序 - search_tab: 搜索类型，默认为`main`，可选值如下：     - main：APP中显示为 `Top`（综合搜索，默认使用此参数搜索）     - user：APP中显示为 `Accounts` （搜索用户账号）     - hashtag：APP中显示为 `Hashtags`（搜索话题）     - article：APP中显示为 `Posts`（搜索文章） ### 返回: - 搜索结果  # [English] ### Purpose: - Search API ### Parameters: - query: Search keyword - max_cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the `max_cursor` returned by the last request is used for subsequent requests. You can judge whether there is more data by the `has_more` field in the return result. - filter_type: Search filter type, default is an empty string, optional values are as follows:     - Empty string: All (default using this parameter to search)     - video: Search only video     - posts: Search only posts - order_by: Search sort type, default is an empty string, optional values are as follows:     - Empty string: Relevance (default using this parameter to sort)     - popular: Sort by popularity     - recent: Sort from new to old - search_tab: Search type, default is `main`, optional values are as follows:     - main: Display as `Top` in the APP (comprehensive search, default using this parameter to search)     - user: Display as `Accounts` in the APP (search user accounts)     - hashtag: Display as `Hashtags` in the APP (search hashtags)     - article: Display as `Posts` in the APP (search articles) ### Return: - Search results  # [示例/Example] query = \"lemon8\" max_cursor = \"\" filter_type = \"\" order_by = \"\" search_tab = \"main\"
         * @summary 搜索接口/Search API
         * @param {string} query 搜索关键词/Search keyword
         * @param {string} [maxCursor] 翻页参数/Pagination parameter
         * @param {string} [filterType] 搜索过滤类型/Search filter type
         * @param {string} [orderBy] 搜索排序方式/Search sort type
         * @param {string} [searchTab] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchApiV1Lemon8AppFetchSearchGet_7(query: string, maxCursor?: string, filterType?: string, orderBy?: string, searchTab?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchSearchApiV1Lemon8AppFetchSearchGet_7(query, maxCursor, filterType, orderBy, searchTab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题信息 ### 参数: - forum_id: 话题ID，可以从下面的接口获取     - 获取指定作品的信息：`/lemon8/app/fetch_post_detail`     - 获取发现页的 Editor\'s Picks：`/lemon8/app/fetch_discover_tab_information_tabs`     - 通过接口搜索 Hashtag：`/lemon8/app/fetch_search?search_tab=hashtag&keyword=lemon8` ### 返回: - 话题信息  # [English] ### Purpose: - Get topic information ### Parameters: - forum_id: Topic ID, can be obtained from the following interfaces     - Get information of specified post: `/lemon8/app/fetch_post_detail`     - Get Editor\'s Picks of discover page: `/lemon8/app/fetch_discover_tab_information_tabs`     - Search Hashtag through interface: `/lemon8/app/fetch_search?search_tab=hashtag&keyword=lemon8` ### Return: - Topic information  # [示例/Example] forum_id = \"7174447913778593798\"
         * @summary 获取话题信息/Get topic information
         * @param {string} forumId 话题ID/Topic ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet(forumId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet(forumId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题信息 ### 参数: - forum_id: 话题ID，可以从下面的接口获取     - 获取指定作品的信息：`/lemon8/app/fetch_post_detail`     - 获取发现页的 Editor\'s Picks：`/lemon8/app/fetch_discover_tab_information_tabs`     - 通过接口搜索 Hashtag：`/lemon8/app/fetch_search?search_tab=hashtag&keyword=lemon8` ### 返回: - 话题信息  # [English] ### Purpose: - Get topic information ### Parameters: - forum_id: Topic ID, can be obtained from the following interfaces     - Get information of specified post: `/lemon8/app/fetch_post_detail`     - Get Editor\'s Picks of discover page: `/lemon8/app/fetch_discover_tab_information_tabs`     - Search Hashtag through interface: `/lemon8/app/fetch_search?search_tab=hashtag&keyword=lemon8` ### Return: - Topic information  # [示例/Example] forum_id = \"7174447913778593798\"
         * @summary 获取话题信息/Get topic information
         * @param {string} forumId 话题ID/Topic ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet_8(forumId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet_8(forumId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题作品列表 ### 参数: - category: 话题分类 ID，可以从接口`/lemon8/app/fetch_topic_info`获取 - max_behot_time: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的max_behot_time进行翻页。 - category_parameter: 分类参数ID，可以从接口`/lemon8/app/fetch_topic_info`获取 - hashtag_name: Hashtag名称，可以从接口`/lemon8/app/fetch_topic_info`获取 - sort_type: 排序方式，0为默认排序，当前只支持使用默认排序，请不要传入其他值。 ### 返回: - 作品列表  # [English] ### Purpose: - Get topic post list ### Parameters: - category: Topic category ID, can be obtained from the interface `/lemon8/app/fetch_topic_info` - max_behot_time: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the max_behot_time returned by the last request is used for subsequent requests. - category_parameter: Category parameter ID, can be obtained from the interface `/lemon8/app/fetch_topic_info` - hashtag_name: Hashtag name, can be obtained from the interface `/lemon8/app/fetch_topic_info` - sort_type: Sort type, 0 for default sort, currently only support default sort, please do not pass other values. ### Return: - Post list  # [示例/Example] category = \"590\" max_behot_time = \"\" category_parameter = \"7174447913778593798\" hashtag_name = \"lemon8christmas\" sort_type = \"0\"
         * @summary 获取话题作品列表/Get topic post list
         * @param {string} category 话题分类 ID/Topic category ID
         * @param {string} categoryParameter 分类参数/Category parameter
         * @param {string} hashtagName Hashtag名称/Hashtag name
         * @param {string} [maxBehotTime] 翻页参数/Pagination parameter
         * @param {string} [sortType] 排序方式/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet(category: string, categoryParameter: string, hashtagName: string, maxBehotTime?: string, sortType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet(category, categoryParameter, hashtagName, maxBehotTime, sortType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题作品列表 ### 参数: - category: 话题分类 ID，可以从接口`/lemon8/app/fetch_topic_info`获取 - max_behot_time: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的max_behot_time进行翻页。 - category_parameter: 分类参数ID，可以从接口`/lemon8/app/fetch_topic_info`获取 - hashtag_name: Hashtag名称，可以从接口`/lemon8/app/fetch_topic_info`获取 - sort_type: 排序方式，0为默认排序，当前只支持使用默认排序，请不要传入其他值。 ### 返回: - 作品列表  # [English] ### Purpose: - Get topic post list ### Parameters: - category: Topic category ID, can be obtained from the interface `/lemon8/app/fetch_topic_info` - max_behot_time: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the max_behot_time returned by the last request is used for subsequent requests. - category_parameter: Category parameter ID, can be obtained from the interface `/lemon8/app/fetch_topic_info` - hashtag_name: Hashtag name, can be obtained from the interface `/lemon8/app/fetch_topic_info` - sort_type: Sort type, 0 for default sort, currently only support default sort, please do not pass other values. ### Return: - Post list  # [示例/Example] category = \"590\" max_behot_time = \"\" category_parameter = \"7174447913778593798\" hashtag_name = \"lemon8christmas\" sort_type = \"0\"
         * @summary 获取话题作品列表/Get topic post list
         * @param {string} category 话题分类 ID/Topic category ID
         * @param {string} categoryParameter 分类参数/Category parameter
         * @param {string} hashtagName Hashtag名称/Hashtag name
         * @param {string} [maxBehotTime] 翻页参数/Pagination parameter
         * @param {string} [sortType] 排序方式/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet_9(category: string, categoryParameter: string, hashtagName: string, maxBehotTime?: string, sortType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet_9(category, categoryParameter, hashtagName, maxBehotTime, sortType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的粉丝列表 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get fans list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Fans list  # [示例/Example] user_id = \"7428056850216862763\"
         * @summary 获取指定用户的粉丝列表/Get fans list of specified user
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 翻页参数/Pagination parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet(userId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet(userId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的粉丝列表 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get fans list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Fans list  # [示例/Example] user_id = \"7428056850216862763\"
         * @summary 获取指定用户的粉丝列表/Get fans list of specified user
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 翻页参数/Pagination parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet_10(userId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet_10(userId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的关注列表 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 关注列表  # [English] ### Purpose: - Get following list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Following list  # [示例/Example] user_id = \"7428056850216862763\"
         * @summary 获取指定用户的关注列表/Get following list of specified user
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 翻页参数/Pagination parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet(userId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet(userId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的关注列表 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 关注列表  # [English] ### Purpose: - Get following list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Following list  # [示例/Example] user_id = \"7428056850216862763\"
         * @summary 获取指定用户的关注列表/Get following list of specified user
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 翻页参数/Pagination parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet_11(userId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet_11(userId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取作品ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID  # [English] ### Purpose: - Get post ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post ID  # [示例/Example] share_text = \"https://www.lemon8-app.com/@deathlabs_/7445613324903006766\" share_text = \"https://v.lemon8-app.com/al/OghwFTppx\"
         * @summary 通过分享链接获取作品ID/Get post ID through sharing link
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemIdApiV1Lemon8AppGetItemIdGet(shareText: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).getItemIdApiV1Lemon8AppGetItemIdGet(shareText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取作品ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID  # [English] ### Purpose: - Get post ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post ID  # [示例/Example] share_text = \"https://www.lemon8-app.com/@deathlabs_/7445613324903006766\" share_text = \"https://v.lemon8-app.com/al/OghwFTppx\"
         * @summary 通过分享链接获取作品ID/Get post ID through sharing link
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemIdApiV1Lemon8AppGetItemIdGet_12(shareText: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).getItemIdApiV1Lemon8AppGetItemIdGet_12(shareText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接批量获取作品ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID列表  # [English] ### Purpose: - Get post IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post IDs list  # [示例/Example] share_texts = [     \"https://www.lemon8-app.com/@deathlabs_/7445613324903006766\",     \"https://v.lemon8-app.com/al/OghwFTppx\" ]
         * @summary 通过分享链接批量获取作品ID/Get post IDs in batch through sharing links
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemIdsApiV1Lemon8AppGetItemIdsPost(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).getItemIdsApiV1Lemon8AppGetItemIdsPost(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接批量获取作品ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID列表  # [English] ### Purpose: - Get post IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post IDs list  # [示例/Example] share_texts = [     \"https://www.lemon8-app.com/@deathlabs_/7445613324903006766\",     \"https://v.lemon8-app.com/al/OghwFTppx\" ]
         * @summary 通过分享链接批量获取作品ID/Get post IDs in batch through sharing links
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemIdsApiV1Lemon8AppGetItemIdsPost_13(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).getItemIdsApiV1Lemon8AppGetItemIdsPost_13(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取用户ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID  # [English] ### Purpose: - Get user ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User ID  # [示例/Example] share_text = \"https://www.lemon8-app.com/lemon8cars?region=us\" share_text = \"https://v.lemon8-app.com/al/OgZrsUppx\"
         * @summary 通过分享链接获取用户ID/Get user ID through sharing link
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserIdApiV1Lemon8AppGetUserIdGet(shareText: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).getUserIdApiV1Lemon8AppGetUserIdGet(shareText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取用户ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID  # [English] ### Purpose: - Get user ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User ID  # [示例/Example] share_text = \"https://www.lemon8-app.com/lemon8cars?region=us\" share_text = \"https://v.lemon8-app.com/al/OgZrsUppx\"
         * @summary 通过分享链接获取用户ID/Get user ID through sharing link
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserIdApiV1Lemon8AppGetUserIdGet_14(shareText: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).getUserIdApiV1Lemon8AppGetUserIdGet_14(shareText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接批量获取用户ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID列表  # [English] ### Purpose: - Get user IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User IDs list  # [示例/Example] share_texts = [     \"https://www.lemon8-app.com/lemon8cars?region=us\",     \"https://v.lemon8-app.com/al/OgZrsUppx\" ]
         * @summary 通过分享链接批量获取用户ID/Get user IDs in batch through sharing links
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserIdsApiV1Lemon8AppGetUserIdsPost(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).getUserIdsApiV1Lemon8AppGetUserIdsPost(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接批量获取用户ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID列表  # [English] ### Purpose: - Get user IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User IDs list  # [示例/Example] share_texts = [     \"https://www.lemon8-app.com/lemon8cars?region=us\",     \"https://v.lemon8-app.com/al/OgZrsUppx\" ]
         * @summary 通过分享链接批量获取用户ID/Get user IDs in batch through sharing links
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserIdsApiV1Lemon8AppGetUserIdsPost_15(requestBody?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).getUserIdsApiV1Lemon8AppGetUserIdsPost_15(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` ### Return: - User information  # [示例/Example] user_id = \"7217844966059656197
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlerUserProfileApiV1Lemon8AppFetchUserProfileGet(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).handlerUserProfileApiV1Lemon8AppFetchUserProfileGet(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` ### Return: - User information  # [示例/Example] user_id = \"7217844966059656197
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlerUserProfileApiV1Lemon8AppFetchUserProfileGet_16(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await Lemon8AppAPIApiAxiosParamCreator(configuration).handlerUserProfileApiV1Lemon8AppFetchUserProfileGet_16(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * Lemon8AppAPIApi - factory interface
 * @export
 */
export const Lemon8AppAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 获取发现页Banner（搜索页上方的滚动内容） ### 返回: - Banner列表  # [English] ### Purpose: - Get banners of discover page ### Return: - Banners list  # [示例/Example]
         * @summary 获取发现页Banner/Get banners of discover page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDiscoverBannersApiV1Lemon8AppFetchDiscoverBannersGet(options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchDiscoverBannersApiV1Lemon8AppFetchDiscoverBannersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取发现页Banner（搜索页上方的滚动内容） ### 返回: - Banner列表  # [English] ### Purpose: - Get banners of discover page ### Return: - Banners list  # [示例/Example]
         * @summary 获取发现页Banner/Get banners of discover page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDiscoverBannersApiV1Lemon8AppFetchDiscoverBannersGet_1(options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchDiscoverBannersApiV1Lemon8AppFetchDiscoverBannersGet_1(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取发现页（搜索页主体内容） ### 返回: - 主体内容  # [English] ### Purpose: - Get main content of discover page ### Return: - Main content  # [示例/Example]
         * @summary 获取发现页主体内容/Get main content of discover page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDiscoverTabApiV1Lemon8AppFetchDiscoverTabGet(options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchDiscoverTabApiV1Lemon8AppFetchDiscoverTabGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取发现页（搜索页主体内容） ### 返回: - 主体内容  # [English] ### Purpose: - Get main content of discover page ### Return: - Main content  # [示例/Example]
         * @summary 获取发现页主体内容/Get main content of discover page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDiscoverTabApiV1Lemon8AppFetchDiscoverTabGet_2(options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchDiscoverTabApiV1Lemon8AppFetchDiscoverTabGet_2(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取发现页（搜索页下方的推荐内容 - Editor\'s Picks） ### 返回: - 推荐内容  # [English] ### Purpose: - Get Editor\'s Picks of discover page ### Return: - Editor\'s Picks  # [示例/Example]
         * @summary 获取发现页的 Editor\'s Picks/Get Editor\'s Picks of discover page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDiscoverTabInformationTabsApiV1Lemon8AppFetchDiscoverTabInformationTabsGet(options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchDiscoverTabInformationTabsApiV1Lemon8AppFetchDiscoverTabInformationTabsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取发现页（搜索页下方的推荐内容 - Editor\'s Picks） ### 返回: - 推荐内容  # [English] ### Purpose: - Get Editor\'s Picks of discover page ### Return: - Editor\'s Picks  # [示例/Example]
         * @summary 获取发现页的 Editor\'s Picks/Get Editor\'s Picks of discover page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchDiscoverTabInformationTabsApiV1Lemon8AppFetchDiscoverTabInformationTabsGet_3(options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchDiscoverTabInformationTabsApiV1Lemon8AppFetchDiscoverTabInformationTabsGet_3(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取热搜关键词 ### 返回: - 热搜关键词列表  # [English] ### Purpose: - Get hot search keywords ### Return: - Hot search keywords list  # [示例/Example]
         * @summary 获取热搜关键词/Get hot search keywords
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchKeywordsApiV1Lemon8AppFetchHotSearchKeywordsGet(options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchHotSearchKeywordsApiV1Lemon8AppFetchHotSearchKeywordsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取热搜关键词 ### 返回: - 热搜关键词列表  # [English] ### Purpose: - Get hot search keywords ### Return: - Hot search keywords list  # [示例/Example]
         * @summary 获取热搜关键词/Get hot search keywords
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchKeywordsApiV1Lemon8AppFetchHotSearchKeywordsGet_4(options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchHotSearchKeywordsApiV1Lemon8AppFetchHotSearchKeywordsGet_4(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定作品的评论列表 ### 参数: - group_id: 作品的group_id，可以从接口`/lemon8/app/fetch_post_detail`获取 - item_id: 作品的item_id，可以从接口`/lemon8/app/fetch_post_detail` 或 `/lemon8/app/get_item_id`获取 - media_id: 作品的media_id，可以从接口`/lemon8/app/fetch_post_detail`获取 - offset: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的offset进行翻页。 ### 返回: - 评论列表  # [English] ### Purpose: - Get comments list of specified post ### Parameters: - group_id: Post\'s group_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` - item_id: Post\'s item_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` or `/lemon8/app/get_item_id` - media_id: Post\'s media_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` - offset: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the offset returned by the last request is used for subsequent requests. ### Return: - Comments list  # [示例/Example] group_id = \"7361926875709129222\" item_id = \"7361926875709129222\" media_id = \"7428056850216862763\"
         * @summary 获取指定作品的评论列表/Get comments list of specified post
         * @param {string} groupId 作品的group_id/Post\&#39;s group_id
         * @param {string} itemId 作品的item_id/Post\&#39;s item_id
         * @param {string} mediaId 作品的media_id/Post\&#39;s media_id
         * @param {string} [offset] 翻页参数/Pagination parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet(groupId: string, itemId: string, mediaId: string, offset?: string, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet(groupId, itemId, mediaId, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定作品的评论列表 ### 参数: - group_id: 作品的group_id，可以从接口`/lemon8/app/fetch_post_detail`获取 - item_id: 作品的item_id，可以从接口`/lemon8/app/fetch_post_detail` 或 `/lemon8/app/get_item_id`获取 - media_id: 作品的media_id，可以从接口`/lemon8/app/fetch_post_detail`获取 - offset: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的offset进行翻页。 ### 返回: - 评论列表  # [English] ### Purpose: - Get comments list of specified post ### Parameters: - group_id: Post\'s group_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` - item_id: Post\'s item_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` or `/lemon8/app/get_item_id` - media_id: Post\'s media_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` - offset: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the offset returned by the last request is used for subsequent requests. ### Return: - Comments list  # [示例/Example] group_id = \"7361926875709129222\" item_id = \"7361926875709129222\" media_id = \"7428056850216862763\"
         * @summary 获取指定作品的评论列表/Get comments list of specified post
         * @param {string} groupId 作品的group_id/Post\&#39;s group_id
         * @param {string} itemId 作品的item_id/Post\&#39;s item_id
         * @param {string} mediaId 作品的media_id/Post\&#39;s media_id
         * @param {string} [offset] 翻页参数/Pagination parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet_5(groupId: string, itemId: string, mediaId: string, offset?: string, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet_5(groupId, itemId, mediaId, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定作品的信息 ### 参数: - item_id: 作品ID，可以从接口`/lemon8/app/get_item_id`获取 ### 返回: - 作品信息  # [English] ### Purpose: - Get information of specified post ### Parameters: - item_id: Post ID, can be obtained from the interface `/lemon8/app/get_item_id` ### Return: - Post information  # [示例/Example] item_id = \"7361926875709129222\"
         * @summary 获取指定作品的信息/Get information of specified post
         * @param {string} itemId 作品ID/Post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostDetailApiV1Lemon8AppFetchPostDetailGet(itemId: string, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchPostDetailApiV1Lemon8AppFetchPostDetailGet(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定作品的信息 ### 参数: - item_id: 作品ID，可以从接口`/lemon8/app/get_item_id`获取 ### 返回: - 作品信息  # [English] ### Purpose: - Get information of specified post ### Parameters: - item_id: Post ID, can be obtained from the interface `/lemon8/app/get_item_id` ### Return: - Post information  # [示例/Example] item_id = \"7361926875709129222\"
         * @summary 获取指定作品的信息/Get information of specified post
         * @param {string} itemId 作品ID/Post ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostDetailApiV1Lemon8AppFetchPostDetailGet_6(itemId: string, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchPostDetailApiV1Lemon8AppFetchPostDetailGet_6(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索接口 ### 参数: - query: 搜索关键词 - max_cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的`max_cursor`进行翻页，可以通过返回结果的`has_more`字段判断是否还有更多数据。 - filter_type: 搜索过滤类型，默认为空字符串，可选值如下：     - 空字符串：All（全部，默认使用此参数搜索）     - video：只搜索视频作品     - posts：只搜索文章作品 - order_by: 搜索排序方式，默认为空字符串，可选值如下：     - 空字符串：Relevance（相关度，默认使用此参数排序）     - popular：流行度排序     - recent：从新到旧排序 - search_tab: 搜索类型，默认为`main`，可选值如下：     - main：APP中显示为 `Top`（综合搜索，默认使用此参数搜索）     - user：APP中显示为 `Accounts` （搜索用户账号）     - hashtag：APP中显示为 `Hashtags`（搜索话题）     - article：APP中显示为 `Posts`（搜索文章） ### 返回: - 搜索结果  # [English] ### Purpose: - Search API ### Parameters: - query: Search keyword - max_cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the `max_cursor` returned by the last request is used for subsequent requests. You can judge whether there is more data by the `has_more` field in the return result. - filter_type: Search filter type, default is an empty string, optional values are as follows:     - Empty string: All (default using this parameter to search)     - video: Search only video     - posts: Search only posts - order_by: Search sort type, default is an empty string, optional values are as follows:     - Empty string: Relevance (default using this parameter to sort)     - popular: Sort by popularity     - recent: Sort from new to old - search_tab: Search type, default is `main`, optional values are as follows:     - main: Display as `Top` in the APP (comprehensive search, default using this parameter to search)     - user: Display as `Accounts` in the APP (search user accounts)     - hashtag: Display as `Hashtags` in the APP (search hashtags)     - article: Display as `Posts` in the APP (search articles) ### Return: - Search results  # [示例/Example] query = \"lemon8\" max_cursor = \"\" filter_type = \"\" order_by = \"\" search_tab = \"main\"
         * @summary 搜索接口/Search API
         * @param {string} query 搜索关键词/Search keyword
         * @param {string} [maxCursor] 翻页参数/Pagination parameter
         * @param {string} [filterType] 搜索过滤类型/Search filter type
         * @param {string} [orderBy] 搜索排序方式/Search sort type
         * @param {string} [searchTab] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchApiV1Lemon8AppFetchSearchGet(query: string, maxCursor?: string, filterType?: string, orderBy?: string, searchTab?: string, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchSearchApiV1Lemon8AppFetchSearchGet(query, maxCursor, filterType, orderBy, searchTab, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索接口 ### 参数: - query: 搜索关键词 - max_cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的`max_cursor`进行翻页，可以通过返回结果的`has_more`字段判断是否还有更多数据。 - filter_type: 搜索过滤类型，默认为空字符串，可选值如下：     - 空字符串：All（全部，默认使用此参数搜索）     - video：只搜索视频作品     - posts：只搜索文章作品 - order_by: 搜索排序方式，默认为空字符串，可选值如下：     - 空字符串：Relevance（相关度，默认使用此参数排序）     - popular：流行度排序     - recent：从新到旧排序 - search_tab: 搜索类型，默认为`main`，可选值如下：     - main：APP中显示为 `Top`（综合搜索，默认使用此参数搜索）     - user：APP中显示为 `Accounts` （搜索用户账号）     - hashtag：APP中显示为 `Hashtags`（搜索话题）     - article：APP中显示为 `Posts`（搜索文章） ### 返回: - 搜索结果  # [English] ### Purpose: - Search API ### Parameters: - query: Search keyword - max_cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the `max_cursor` returned by the last request is used for subsequent requests. You can judge whether there is more data by the `has_more` field in the return result. - filter_type: Search filter type, default is an empty string, optional values are as follows:     - Empty string: All (default using this parameter to search)     - video: Search only video     - posts: Search only posts - order_by: Search sort type, default is an empty string, optional values are as follows:     - Empty string: Relevance (default using this parameter to sort)     - popular: Sort by popularity     - recent: Sort from new to old - search_tab: Search type, default is `main`, optional values are as follows:     - main: Display as `Top` in the APP (comprehensive search, default using this parameter to search)     - user: Display as `Accounts` in the APP (search user accounts)     - hashtag: Display as `Hashtags` in the APP (search hashtags)     - article: Display as `Posts` in the APP (search articles) ### Return: - Search results  # [示例/Example] query = \"lemon8\" max_cursor = \"\" filter_type = \"\" order_by = \"\" search_tab = \"main\"
         * @summary 搜索接口/Search API
         * @param {string} query 搜索关键词/Search keyword
         * @param {string} [maxCursor] 翻页参数/Pagination parameter
         * @param {string} [filterType] 搜索过滤类型/Search filter type
         * @param {string} [orderBy] 搜索排序方式/Search sort type
         * @param {string} [searchTab] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchApiV1Lemon8AppFetchSearchGet_7(query: string, maxCursor?: string, filterType?: string, orderBy?: string, searchTab?: string, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchSearchApiV1Lemon8AppFetchSearchGet_7(query, maxCursor, filterType, orderBy, searchTab, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取话题信息 ### 参数: - forum_id: 话题ID，可以从下面的接口获取     - 获取指定作品的信息：`/lemon8/app/fetch_post_detail`     - 获取发现页的 Editor\'s Picks：`/lemon8/app/fetch_discover_tab_information_tabs`     - 通过接口搜索 Hashtag：`/lemon8/app/fetch_search?search_tab=hashtag&keyword=lemon8` ### 返回: - 话题信息  # [English] ### Purpose: - Get topic information ### Parameters: - forum_id: Topic ID, can be obtained from the following interfaces     - Get information of specified post: `/lemon8/app/fetch_post_detail`     - Get Editor\'s Picks of discover page: `/lemon8/app/fetch_discover_tab_information_tabs`     - Search Hashtag through interface: `/lemon8/app/fetch_search?search_tab=hashtag&keyword=lemon8` ### Return: - Topic information  # [示例/Example] forum_id = \"7174447913778593798\"
         * @summary 获取话题信息/Get topic information
         * @param {string} forumId 话题ID/Topic ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet(forumId: string, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet(forumId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取话题信息 ### 参数: - forum_id: 话题ID，可以从下面的接口获取     - 获取指定作品的信息：`/lemon8/app/fetch_post_detail`     - 获取发现页的 Editor\'s Picks：`/lemon8/app/fetch_discover_tab_information_tabs`     - 通过接口搜索 Hashtag：`/lemon8/app/fetch_search?search_tab=hashtag&keyword=lemon8` ### 返回: - 话题信息  # [English] ### Purpose: - Get topic information ### Parameters: - forum_id: Topic ID, can be obtained from the following interfaces     - Get information of specified post: `/lemon8/app/fetch_post_detail`     - Get Editor\'s Picks of discover page: `/lemon8/app/fetch_discover_tab_information_tabs`     - Search Hashtag through interface: `/lemon8/app/fetch_search?search_tab=hashtag&keyword=lemon8` ### Return: - Topic information  # [示例/Example] forum_id = \"7174447913778593798\"
         * @summary 获取话题信息/Get topic information
         * @param {string} forumId 话题ID/Topic ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet_8(forumId: string, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet_8(forumId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取话题作品列表 ### 参数: - category: 话题分类 ID，可以从接口`/lemon8/app/fetch_topic_info`获取 - max_behot_time: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的max_behot_time进行翻页。 - category_parameter: 分类参数ID，可以从接口`/lemon8/app/fetch_topic_info`获取 - hashtag_name: Hashtag名称，可以从接口`/lemon8/app/fetch_topic_info`获取 - sort_type: 排序方式，0为默认排序，当前只支持使用默认排序，请不要传入其他值。 ### 返回: - 作品列表  # [English] ### Purpose: - Get topic post list ### Parameters: - category: Topic category ID, can be obtained from the interface `/lemon8/app/fetch_topic_info` - max_behot_time: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the max_behot_time returned by the last request is used for subsequent requests. - category_parameter: Category parameter ID, can be obtained from the interface `/lemon8/app/fetch_topic_info` - hashtag_name: Hashtag name, can be obtained from the interface `/lemon8/app/fetch_topic_info` - sort_type: Sort type, 0 for default sort, currently only support default sort, please do not pass other values. ### Return: - Post list  # [示例/Example] category = \"590\" max_behot_time = \"\" category_parameter = \"7174447913778593798\" hashtag_name = \"lemon8christmas\" sort_type = \"0\"
         * @summary 获取话题作品列表/Get topic post list
         * @param {string} category 话题分类 ID/Topic category ID
         * @param {string} categoryParameter 分类参数/Category parameter
         * @param {string} hashtagName Hashtag名称/Hashtag name
         * @param {string} [maxBehotTime] 翻页参数/Pagination parameter
         * @param {string} [sortType] 排序方式/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet(category: string, categoryParameter: string, hashtagName: string, maxBehotTime?: string, sortType?: string, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet(category, categoryParameter, hashtagName, maxBehotTime, sortType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取话题作品列表 ### 参数: - category: 话题分类 ID，可以从接口`/lemon8/app/fetch_topic_info`获取 - max_behot_time: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的max_behot_time进行翻页。 - category_parameter: 分类参数ID，可以从接口`/lemon8/app/fetch_topic_info`获取 - hashtag_name: Hashtag名称，可以从接口`/lemon8/app/fetch_topic_info`获取 - sort_type: 排序方式，0为默认排序，当前只支持使用默认排序，请不要传入其他值。 ### 返回: - 作品列表  # [English] ### Purpose: - Get topic post list ### Parameters: - category: Topic category ID, can be obtained from the interface `/lemon8/app/fetch_topic_info` - max_behot_time: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the max_behot_time returned by the last request is used for subsequent requests. - category_parameter: Category parameter ID, can be obtained from the interface `/lemon8/app/fetch_topic_info` - hashtag_name: Hashtag name, can be obtained from the interface `/lemon8/app/fetch_topic_info` - sort_type: Sort type, 0 for default sort, currently only support default sort, please do not pass other values. ### Return: - Post list  # [示例/Example] category = \"590\" max_behot_time = \"\" category_parameter = \"7174447913778593798\" hashtag_name = \"lemon8christmas\" sort_type = \"0\"
         * @summary 获取话题作品列表/Get topic post list
         * @param {string} category 话题分类 ID/Topic category ID
         * @param {string} categoryParameter 分类参数/Category parameter
         * @param {string} hashtagName Hashtag名称/Hashtag name
         * @param {string} [maxBehotTime] 翻页参数/Pagination parameter
         * @param {string} [sortType] 排序方式/Sort type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet_9(category: string, categoryParameter: string, hashtagName: string, maxBehotTime?: string, sortType?: string, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet_9(category, categoryParameter, hashtagName, maxBehotTime, sortType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的粉丝列表 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get fans list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Fans list  # [示例/Example] user_id = \"7428056850216862763\"
         * @summary 获取指定用户的粉丝列表/Get fans list of specified user
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 翻页参数/Pagination parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet(userId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的粉丝列表 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get fans list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Fans list  # [示例/Example] user_id = \"7428056850216862763\"
         * @summary 获取指定用户的粉丝列表/Get fans list of specified user
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 翻页参数/Pagination parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet_10(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet_10(userId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的关注列表 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 关注列表  # [English] ### Purpose: - Get following list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Following list  # [示例/Example] user_id = \"7428056850216862763\"
         * @summary 获取指定用户的关注列表/Get following list of specified user
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 翻页参数/Pagination parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet(userId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的关注列表 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 关注列表  # [English] ### Purpose: - Get following list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Following list  # [示例/Example] user_id = \"7428056850216862763\"
         * @summary 获取指定用户的关注列表/Get following list of specified user
         * @param {string} userId 用户ID/User ID
         * @param {string} [cursor] 翻页参数/Pagination parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet_11(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet_11(userId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取作品ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID  # [English] ### Purpose: - Get post ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post ID  # [示例/Example] share_text = \"https://www.lemon8-app.com/@deathlabs_/7445613324903006766\" share_text = \"https://v.lemon8-app.com/al/OghwFTppx\"
         * @summary 通过分享链接获取作品ID/Get post ID through sharing link
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemIdApiV1Lemon8AppGetItemIdGet(shareText: string, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).getItemIdApiV1Lemon8AppGetItemIdGet(shareText, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取作品ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID  # [English] ### Purpose: - Get post ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post ID  # [示例/Example] share_text = \"https://www.lemon8-app.com/@deathlabs_/7445613324903006766\" share_text = \"https://v.lemon8-app.com/al/OghwFTppx\"
         * @summary 通过分享链接获取作品ID/Get post ID through sharing link
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemIdApiV1Lemon8AppGetItemIdGet_12(shareText: string, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).getItemIdApiV1Lemon8AppGetItemIdGet_12(shareText, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过分享链接批量获取作品ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID列表  # [English] ### Purpose: - Get post IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post IDs list  # [示例/Example] share_texts = [     \"https://www.lemon8-app.com/@deathlabs_/7445613324903006766\",     \"https://v.lemon8-app.com/al/OghwFTppx\" ]
         * @summary 通过分享链接批量获取作品ID/Get post IDs in batch through sharing links
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemIdsApiV1Lemon8AppGetItemIdsPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).getItemIdsApiV1Lemon8AppGetItemIdsPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过分享链接批量获取作品ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID列表  # [English] ### Purpose: - Get post IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post IDs list  # [示例/Example] share_texts = [     \"https://www.lemon8-app.com/@deathlabs_/7445613324903006766\",     \"https://v.lemon8-app.com/al/OghwFTppx\" ]
         * @summary 通过分享链接批量获取作品ID/Get post IDs in batch through sharing links
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemIdsApiV1Lemon8AppGetItemIdsPost_13(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).getItemIdsApiV1Lemon8AppGetItemIdsPost_13(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取用户ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID  # [English] ### Purpose: - Get user ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User ID  # [示例/Example] share_text = \"https://www.lemon8-app.com/lemon8cars?region=us\" share_text = \"https://v.lemon8-app.com/al/OgZrsUppx\"
         * @summary 通过分享链接获取用户ID/Get user ID through sharing link
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserIdApiV1Lemon8AppGetUserIdGet(shareText: string, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).getUserIdApiV1Lemon8AppGetUserIdGet(shareText, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取用户ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID  # [English] ### Purpose: - Get user ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User ID  # [示例/Example] share_text = \"https://www.lemon8-app.com/lemon8cars?region=us\" share_text = \"https://v.lemon8-app.com/al/OgZrsUppx\"
         * @summary 通过分享链接获取用户ID/Get user ID through sharing link
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserIdApiV1Lemon8AppGetUserIdGet_14(shareText: string, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).getUserIdApiV1Lemon8AppGetUserIdGet_14(shareText, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过分享链接批量获取用户ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID列表  # [English] ### Purpose: - Get user IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User IDs list  # [示例/Example] share_texts = [     \"https://www.lemon8-app.com/lemon8cars?region=us\",     \"https://v.lemon8-app.com/al/OgZrsUppx\" ]
         * @summary 通过分享链接批量获取用户ID/Get user IDs in batch through sharing links
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserIdsApiV1Lemon8AppGetUserIdsPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).getUserIdsApiV1Lemon8AppGetUserIdsPost(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过分享链接批量获取用户ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID列表  # [English] ### Purpose: - Get user IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User IDs list  # [示例/Example] share_texts = [     \"https://www.lemon8-app.com/lemon8cars?region=us\",     \"https://v.lemon8-app.com/al/OgZrsUppx\" ]
         * @summary 通过分享链接批量获取用户ID/Get user IDs in batch through sharing links
         * @param {Array<string>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserIdsApiV1Lemon8AppGetUserIdsPost_15(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).getUserIdsApiV1Lemon8AppGetUserIdsPost_15(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` ### Return: - User information  # [示例/Example] user_id = \"7217844966059656197
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1Lemon8AppFetchUserProfileGet(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).handlerUserProfileApiV1Lemon8AppFetchUserProfileGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` ### Return: - User information  # [示例/Example] user_id = \"7217844966059656197
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1Lemon8AppFetchUserProfileGet_16(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return Lemon8AppAPIApiFp(configuration).handlerUserProfileApiV1Lemon8AppFetchUserProfileGet_16(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Lemon8AppAPIApi - interface
 * @export
 * @interface Lemon8AppAPIApi
 */
export interface Lemon8AppAPIApiInterface {
    /**
     * # [中文] ### 用途: - 获取发现页Banner（搜索页上方的滚动内容） ### 返回: - Banner列表  # [English] ### Purpose: - Get banners of discover page ### Return: - Banners list  # [示例/Example]
     * @summary 获取发现页Banner/Get banners of discover page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchDiscoverBannersApiV1Lemon8AppFetchDiscoverBannersGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取发现页Banner（搜索页上方的滚动内容） ### 返回: - Banner列表  # [English] ### Purpose: - Get banners of discover page ### Return: - Banners list  # [示例/Example]
     * @summary 获取发现页Banner/Get banners of discover page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchDiscoverBannersApiV1Lemon8AppFetchDiscoverBannersGet_1(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取发现页（搜索页主体内容） ### 返回: - 主体内容  # [English] ### Purpose: - Get main content of discover page ### Return: - Main content  # [示例/Example]
     * @summary 获取发现页主体内容/Get main content of discover page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchDiscoverTabApiV1Lemon8AppFetchDiscoverTabGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取发现页（搜索页主体内容） ### 返回: - 主体内容  # [English] ### Purpose: - Get main content of discover page ### Return: - Main content  # [示例/Example]
     * @summary 获取发现页主体内容/Get main content of discover page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchDiscoverTabApiV1Lemon8AppFetchDiscoverTabGet_2(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取发现页（搜索页下方的推荐内容 - Editor\'s Picks） ### 返回: - 推荐内容  # [English] ### Purpose: - Get Editor\'s Picks of discover page ### Return: - Editor\'s Picks  # [示例/Example]
     * @summary 获取发现页的 Editor\'s Picks/Get Editor\'s Picks of discover page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchDiscoverTabInformationTabsApiV1Lemon8AppFetchDiscoverTabInformationTabsGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取发现页（搜索页下方的推荐内容 - Editor\'s Picks） ### 返回: - 推荐内容  # [English] ### Purpose: - Get Editor\'s Picks of discover page ### Return: - Editor\'s Picks  # [示例/Example]
     * @summary 获取发现页的 Editor\'s Picks/Get Editor\'s Picks of discover page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchDiscoverTabInformationTabsApiV1Lemon8AppFetchDiscoverTabInformationTabsGet_3(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取热搜关键词 ### 返回: - 热搜关键词列表  # [English] ### Purpose: - Get hot search keywords ### Return: - Hot search keywords list  # [示例/Example]
     * @summary 获取热搜关键词/Get hot search keywords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchHotSearchKeywordsApiV1Lemon8AppFetchHotSearchKeywordsGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取热搜关键词 ### 返回: - 热搜关键词列表  # [English] ### Purpose: - Get hot search keywords ### Return: - Hot search keywords list  # [示例/Example]
     * @summary 获取热搜关键词/Get hot search keywords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchHotSearchKeywordsApiV1Lemon8AppFetchHotSearchKeywordsGet_4(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定作品的评论列表 ### 参数: - group_id: 作品的group_id，可以从接口`/lemon8/app/fetch_post_detail`获取 - item_id: 作品的item_id，可以从接口`/lemon8/app/fetch_post_detail` 或 `/lemon8/app/get_item_id`获取 - media_id: 作品的media_id，可以从接口`/lemon8/app/fetch_post_detail`获取 - offset: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的offset进行翻页。 ### 返回: - 评论列表  # [English] ### Purpose: - Get comments list of specified post ### Parameters: - group_id: Post\'s group_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` - item_id: Post\'s item_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` or `/lemon8/app/get_item_id` - media_id: Post\'s media_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` - offset: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the offset returned by the last request is used for subsequent requests. ### Return: - Comments list  # [示例/Example] group_id = \"7361926875709129222\" item_id = \"7361926875709129222\" media_id = \"7428056850216862763\"
     * @summary 获取指定作品的评论列表/Get comments list of specified post
     * @param {string} groupId 作品的group_id/Post\&#39;s group_id
     * @param {string} itemId 作品的item_id/Post\&#39;s item_id
     * @param {string} mediaId 作品的media_id/Post\&#39;s media_id
     * @param {string} [offset] 翻页参数/Pagination parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet(groupId: string, itemId: string, mediaId: string, offset?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定作品的评论列表 ### 参数: - group_id: 作品的group_id，可以从接口`/lemon8/app/fetch_post_detail`获取 - item_id: 作品的item_id，可以从接口`/lemon8/app/fetch_post_detail` 或 `/lemon8/app/get_item_id`获取 - media_id: 作品的media_id，可以从接口`/lemon8/app/fetch_post_detail`获取 - offset: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的offset进行翻页。 ### 返回: - 评论列表  # [English] ### Purpose: - Get comments list of specified post ### Parameters: - group_id: Post\'s group_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` - item_id: Post\'s item_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` or `/lemon8/app/get_item_id` - media_id: Post\'s media_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` - offset: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the offset returned by the last request is used for subsequent requests. ### Return: - Comments list  # [示例/Example] group_id = \"7361926875709129222\" item_id = \"7361926875709129222\" media_id = \"7428056850216862763\"
     * @summary 获取指定作品的评论列表/Get comments list of specified post
     * @param {string} groupId 作品的group_id/Post\&#39;s group_id
     * @param {string} itemId 作品的item_id/Post\&#39;s item_id
     * @param {string} mediaId 作品的media_id/Post\&#39;s media_id
     * @param {string} [offset] 翻页参数/Pagination parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet_5(groupId: string, itemId: string, mediaId: string, offset?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定作品的信息 ### 参数: - item_id: 作品ID，可以从接口`/lemon8/app/get_item_id`获取 ### 返回: - 作品信息  # [English] ### Purpose: - Get information of specified post ### Parameters: - item_id: Post ID, can be obtained from the interface `/lemon8/app/get_item_id` ### Return: - Post information  # [示例/Example] item_id = \"7361926875709129222\"
     * @summary 获取指定作品的信息/Get information of specified post
     * @param {string} itemId 作品ID/Post ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchPostDetailApiV1Lemon8AppFetchPostDetailGet(itemId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定作品的信息 ### 参数: - item_id: 作品ID，可以从接口`/lemon8/app/get_item_id`获取 ### 返回: - 作品信息  # [English] ### Purpose: - Get information of specified post ### Parameters: - item_id: Post ID, can be obtained from the interface `/lemon8/app/get_item_id` ### Return: - Post information  # [示例/Example] item_id = \"7361926875709129222\"
     * @summary 获取指定作品的信息/Get information of specified post
     * @param {string} itemId 作品ID/Post ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchPostDetailApiV1Lemon8AppFetchPostDetailGet_6(itemId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索接口 ### 参数: - query: 搜索关键词 - max_cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的`max_cursor`进行翻页，可以通过返回结果的`has_more`字段判断是否还有更多数据。 - filter_type: 搜索过滤类型，默认为空字符串，可选值如下：     - 空字符串：All（全部，默认使用此参数搜索）     - video：只搜索视频作品     - posts：只搜索文章作品 - order_by: 搜索排序方式，默认为空字符串，可选值如下：     - 空字符串：Relevance（相关度，默认使用此参数排序）     - popular：流行度排序     - recent：从新到旧排序 - search_tab: 搜索类型，默认为`main`，可选值如下：     - main：APP中显示为 `Top`（综合搜索，默认使用此参数搜索）     - user：APP中显示为 `Accounts` （搜索用户账号）     - hashtag：APP中显示为 `Hashtags`（搜索话题）     - article：APP中显示为 `Posts`（搜索文章） ### 返回: - 搜索结果  # [English] ### Purpose: - Search API ### Parameters: - query: Search keyword - max_cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the `max_cursor` returned by the last request is used for subsequent requests. You can judge whether there is more data by the `has_more` field in the return result. - filter_type: Search filter type, default is an empty string, optional values are as follows:     - Empty string: All (default using this parameter to search)     - video: Search only video     - posts: Search only posts - order_by: Search sort type, default is an empty string, optional values are as follows:     - Empty string: Relevance (default using this parameter to sort)     - popular: Sort by popularity     - recent: Sort from new to old - search_tab: Search type, default is `main`, optional values are as follows:     - main: Display as `Top` in the APP (comprehensive search, default using this parameter to search)     - user: Display as `Accounts` in the APP (search user accounts)     - hashtag: Display as `Hashtags` in the APP (search hashtags)     - article: Display as `Posts` in the APP (search articles) ### Return: - Search results  # [示例/Example] query = \"lemon8\" max_cursor = \"\" filter_type = \"\" order_by = \"\" search_tab = \"main\"
     * @summary 搜索接口/Search API
     * @param {string} query 搜索关键词/Search keyword
     * @param {string} [maxCursor] 翻页参数/Pagination parameter
     * @param {string} [filterType] 搜索过滤类型/Search filter type
     * @param {string} [orderBy] 搜索排序方式/Search sort type
     * @param {string} [searchTab] 搜索类型/Search type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchSearchApiV1Lemon8AppFetchSearchGet(query: string, maxCursor?: string, filterType?: string, orderBy?: string, searchTab?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索接口 ### 参数: - query: 搜索关键词 - max_cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的`max_cursor`进行翻页，可以通过返回结果的`has_more`字段判断是否还有更多数据。 - filter_type: 搜索过滤类型，默认为空字符串，可选值如下：     - 空字符串：All（全部，默认使用此参数搜索）     - video：只搜索视频作品     - posts：只搜索文章作品 - order_by: 搜索排序方式，默认为空字符串，可选值如下：     - 空字符串：Relevance（相关度，默认使用此参数排序）     - popular：流行度排序     - recent：从新到旧排序 - search_tab: 搜索类型，默认为`main`，可选值如下：     - main：APP中显示为 `Top`（综合搜索，默认使用此参数搜索）     - user：APP中显示为 `Accounts` （搜索用户账号）     - hashtag：APP中显示为 `Hashtags`（搜索话题）     - article：APP中显示为 `Posts`（搜索文章） ### 返回: - 搜索结果  # [English] ### Purpose: - Search API ### Parameters: - query: Search keyword - max_cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the `max_cursor` returned by the last request is used for subsequent requests. You can judge whether there is more data by the `has_more` field in the return result. - filter_type: Search filter type, default is an empty string, optional values are as follows:     - Empty string: All (default using this parameter to search)     - video: Search only video     - posts: Search only posts - order_by: Search sort type, default is an empty string, optional values are as follows:     - Empty string: Relevance (default using this parameter to sort)     - popular: Sort by popularity     - recent: Sort from new to old - search_tab: Search type, default is `main`, optional values are as follows:     - main: Display as `Top` in the APP (comprehensive search, default using this parameter to search)     - user: Display as `Accounts` in the APP (search user accounts)     - hashtag: Display as `Hashtags` in the APP (search hashtags)     - article: Display as `Posts` in the APP (search articles) ### Return: - Search results  # [示例/Example] query = \"lemon8\" max_cursor = \"\" filter_type = \"\" order_by = \"\" search_tab = \"main\"
     * @summary 搜索接口/Search API
     * @param {string} query 搜索关键词/Search keyword
     * @param {string} [maxCursor] 翻页参数/Pagination parameter
     * @param {string} [filterType] 搜索过滤类型/Search filter type
     * @param {string} [orderBy] 搜索排序方式/Search sort type
     * @param {string} [searchTab] 搜索类型/Search type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchSearchApiV1Lemon8AppFetchSearchGet_7(query: string, maxCursor?: string, filterType?: string, orderBy?: string, searchTab?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取话题信息 ### 参数: - forum_id: 话题ID，可以从下面的接口获取     - 获取指定作品的信息：`/lemon8/app/fetch_post_detail`     - 获取发现页的 Editor\'s Picks：`/lemon8/app/fetch_discover_tab_information_tabs`     - 通过接口搜索 Hashtag：`/lemon8/app/fetch_search?search_tab=hashtag&keyword=lemon8` ### 返回: - 话题信息  # [English] ### Purpose: - Get topic information ### Parameters: - forum_id: Topic ID, can be obtained from the following interfaces     - Get information of specified post: `/lemon8/app/fetch_post_detail`     - Get Editor\'s Picks of discover page: `/lemon8/app/fetch_discover_tab_information_tabs`     - Search Hashtag through interface: `/lemon8/app/fetch_search?search_tab=hashtag&keyword=lemon8` ### Return: - Topic information  # [示例/Example] forum_id = \"7174447913778593798\"
     * @summary 获取话题信息/Get topic information
     * @param {string} forumId 话题ID/Topic ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet(forumId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取话题信息 ### 参数: - forum_id: 话题ID，可以从下面的接口获取     - 获取指定作品的信息：`/lemon8/app/fetch_post_detail`     - 获取发现页的 Editor\'s Picks：`/lemon8/app/fetch_discover_tab_information_tabs`     - 通过接口搜索 Hashtag：`/lemon8/app/fetch_search?search_tab=hashtag&keyword=lemon8` ### 返回: - 话题信息  # [English] ### Purpose: - Get topic information ### Parameters: - forum_id: Topic ID, can be obtained from the following interfaces     - Get information of specified post: `/lemon8/app/fetch_post_detail`     - Get Editor\'s Picks of discover page: `/lemon8/app/fetch_discover_tab_information_tabs`     - Search Hashtag through interface: `/lemon8/app/fetch_search?search_tab=hashtag&keyword=lemon8` ### Return: - Topic information  # [示例/Example] forum_id = \"7174447913778593798\"
     * @summary 获取话题信息/Get topic information
     * @param {string} forumId 话题ID/Topic ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet_8(forumId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取话题作品列表 ### 参数: - category: 话题分类 ID，可以从接口`/lemon8/app/fetch_topic_info`获取 - max_behot_time: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的max_behot_time进行翻页。 - category_parameter: 分类参数ID，可以从接口`/lemon8/app/fetch_topic_info`获取 - hashtag_name: Hashtag名称，可以从接口`/lemon8/app/fetch_topic_info`获取 - sort_type: 排序方式，0为默认排序，当前只支持使用默认排序，请不要传入其他值。 ### 返回: - 作品列表  # [English] ### Purpose: - Get topic post list ### Parameters: - category: Topic category ID, can be obtained from the interface `/lemon8/app/fetch_topic_info` - max_behot_time: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the max_behot_time returned by the last request is used for subsequent requests. - category_parameter: Category parameter ID, can be obtained from the interface `/lemon8/app/fetch_topic_info` - hashtag_name: Hashtag name, can be obtained from the interface `/lemon8/app/fetch_topic_info` - sort_type: Sort type, 0 for default sort, currently only support default sort, please do not pass other values. ### Return: - Post list  # [示例/Example] category = \"590\" max_behot_time = \"\" category_parameter = \"7174447913778593798\" hashtag_name = \"lemon8christmas\" sort_type = \"0\"
     * @summary 获取话题作品列表/Get topic post list
     * @param {string} category 话题分类 ID/Topic category ID
     * @param {string} categoryParameter 分类参数/Category parameter
     * @param {string} hashtagName Hashtag名称/Hashtag name
     * @param {string} [maxBehotTime] 翻页参数/Pagination parameter
     * @param {string} [sortType] 排序方式/Sort type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet(category: string, categoryParameter: string, hashtagName: string, maxBehotTime?: string, sortType?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取话题作品列表 ### 参数: - category: 话题分类 ID，可以从接口`/lemon8/app/fetch_topic_info`获取 - max_behot_time: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的max_behot_time进行翻页。 - category_parameter: 分类参数ID，可以从接口`/lemon8/app/fetch_topic_info`获取 - hashtag_name: Hashtag名称，可以从接口`/lemon8/app/fetch_topic_info`获取 - sort_type: 排序方式，0为默认排序，当前只支持使用默认排序，请不要传入其他值。 ### 返回: - 作品列表  # [English] ### Purpose: - Get topic post list ### Parameters: - category: Topic category ID, can be obtained from the interface `/lemon8/app/fetch_topic_info` - max_behot_time: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the max_behot_time returned by the last request is used for subsequent requests. - category_parameter: Category parameter ID, can be obtained from the interface `/lemon8/app/fetch_topic_info` - hashtag_name: Hashtag name, can be obtained from the interface `/lemon8/app/fetch_topic_info` - sort_type: Sort type, 0 for default sort, currently only support default sort, please do not pass other values. ### Return: - Post list  # [示例/Example] category = \"590\" max_behot_time = \"\" category_parameter = \"7174447913778593798\" hashtag_name = \"lemon8christmas\" sort_type = \"0\"
     * @summary 获取话题作品列表/Get topic post list
     * @param {string} category 话题分类 ID/Topic category ID
     * @param {string} categoryParameter 分类参数/Category parameter
     * @param {string} hashtagName Hashtag名称/Hashtag name
     * @param {string} [maxBehotTime] 翻页参数/Pagination parameter
     * @param {string} [sortType] 排序方式/Sort type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet_9(category: string, categoryParameter: string, hashtagName: string, maxBehotTime?: string, sortType?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的粉丝列表 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get fans list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Fans list  # [示例/Example] user_id = \"7428056850216862763\"
     * @summary 获取指定用户的粉丝列表/Get fans list of specified user
     * @param {string} userId 用户ID/User ID
     * @param {string} [cursor] 翻页参数/Pagination parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的粉丝列表 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get fans list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Fans list  # [示例/Example] user_id = \"7428056850216862763\"
     * @summary 获取指定用户的粉丝列表/Get fans list of specified user
     * @param {string} userId 用户ID/User ID
     * @param {string} [cursor] 翻页参数/Pagination parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet_10(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的关注列表 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 关注列表  # [English] ### Purpose: - Get following list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Following list  # [示例/Example] user_id = \"7428056850216862763\"
     * @summary 获取指定用户的关注列表/Get following list of specified user
     * @param {string} userId 用户ID/User ID
     * @param {string} [cursor] 翻页参数/Pagination parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的关注列表 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 关注列表  # [English] ### Purpose: - Get following list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Following list  # [示例/Example] user_id = \"7428056850216862763\"
     * @summary 获取指定用户的关注列表/Get following list of specified user
     * @param {string} userId 用户ID/User ID
     * @param {string} [cursor] 翻页参数/Pagination parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet_11(userId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过分享链接获取作品ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID  # [English] ### Purpose: - Get post ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post ID  # [示例/Example] share_text = \"https://www.lemon8-app.com/@deathlabs_/7445613324903006766\" share_text = \"https://v.lemon8-app.com/al/OghwFTppx\"
     * @summary 通过分享链接获取作品ID/Get post ID through sharing link
     * @param {string} shareText 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    getItemIdApiV1Lemon8AppGetItemIdGet(shareText: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过分享链接获取作品ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID  # [English] ### Purpose: - Get post ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post ID  # [示例/Example] share_text = \"https://www.lemon8-app.com/@deathlabs_/7445613324903006766\" share_text = \"https://v.lemon8-app.com/al/OghwFTppx\"
     * @summary 通过分享链接获取作品ID/Get post ID through sharing link
     * @param {string} shareText 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    getItemIdApiV1Lemon8AppGetItemIdGet_12(shareText: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过分享链接批量获取作品ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID列表  # [English] ### Purpose: - Get post IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post IDs list  # [示例/Example] share_texts = [     \"https://www.lemon8-app.com/@deathlabs_/7445613324903006766\",     \"https://v.lemon8-app.com/al/OghwFTppx\" ]
     * @summary 通过分享链接批量获取作品ID/Get post IDs in batch through sharing links
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    getItemIdsApiV1Lemon8AppGetItemIdsPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过分享链接批量获取作品ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID列表  # [English] ### Purpose: - Get post IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post IDs list  # [示例/Example] share_texts = [     \"https://www.lemon8-app.com/@deathlabs_/7445613324903006766\",     \"https://v.lemon8-app.com/al/OghwFTppx\" ]
     * @summary 通过分享链接批量获取作品ID/Get post IDs in batch through sharing links
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    getItemIdsApiV1Lemon8AppGetItemIdsPost_13(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过分享链接获取用户ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID  # [English] ### Purpose: - Get user ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User ID  # [示例/Example] share_text = \"https://www.lemon8-app.com/lemon8cars?region=us\" share_text = \"https://v.lemon8-app.com/al/OgZrsUppx\"
     * @summary 通过分享链接获取用户ID/Get user ID through sharing link
     * @param {string} shareText 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    getUserIdApiV1Lemon8AppGetUserIdGet(shareText: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过分享链接获取用户ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID  # [English] ### Purpose: - Get user ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User ID  # [示例/Example] share_text = \"https://www.lemon8-app.com/lemon8cars?region=us\" share_text = \"https://v.lemon8-app.com/al/OgZrsUppx\"
     * @summary 通过分享链接获取用户ID/Get user ID through sharing link
     * @param {string} shareText 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    getUserIdApiV1Lemon8AppGetUserIdGet_14(shareText: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过分享链接批量获取用户ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID列表  # [English] ### Purpose: - Get user IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User IDs list  # [示例/Example] share_texts = [     \"https://www.lemon8-app.com/lemon8cars?region=us\",     \"https://v.lemon8-app.com/al/OgZrsUppx\" ]
     * @summary 通过分享链接批量获取用户ID/Get user IDs in batch through sharing links
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    getUserIdsApiV1Lemon8AppGetUserIdsPost(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过分享链接批量获取用户ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID列表  # [English] ### Purpose: - Get user IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User IDs list  # [示例/Example] share_texts = [     \"https://www.lemon8-app.com/lemon8cars?region=us\",     \"https://v.lemon8-app.com/al/OgZrsUppx\" ]
     * @summary 通过分享链接批量获取用户ID/Get user IDs in batch through sharing links
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    getUserIdsApiV1Lemon8AppGetUserIdsPost_15(requestBody?: Array<string>, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` ### Return: - User information  # [示例/Example] user_id = \"7217844966059656197
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} userId 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    handlerUserProfileApiV1Lemon8AppFetchUserProfileGet(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` ### Return: - User information  # [示例/Example] user_id = \"7217844966059656197
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} userId 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApiInterface
     */
    handlerUserProfileApiV1Lemon8AppFetchUserProfileGet_16(userId: string, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * Lemon8AppAPIApi - object-oriented interface
 * @export
 * @class Lemon8AppAPIApi
 * @extends {BaseAPI}
 */
export class Lemon8AppAPIApi extends BaseAPI implements Lemon8AppAPIApiInterface {
    /**
     * # [中文] ### 用途: - 获取发现页Banner（搜索页上方的滚动内容） ### 返回: - Banner列表  # [English] ### Purpose: - Get banners of discover page ### Return: - Banners list  # [示例/Example]
     * @summary 获取发现页Banner/Get banners of discover page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchDiscoverBannersApiV1Lemon8AppFetchDiscoverBannersGet(options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchDiscoverBannersApiV1Lemon8AppFetchDiscoverBannersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取发现页Banner（搜索页上方的滚动内容） ### 返回: - Banner列表  # [English] ### Purpose: - Get banners of discover page ### Return: - Banners list  # [示例/Example]
     * @summary 获取发现页Banner/Get banners of discover page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchDiscoverBannersApiV1Lemon8AppFetchDiscoverBannersGet_1(options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchDiscoverBannersApiV1Lemon8AppFetchDiscoverBannersGet_1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取发现页（搜索页主体内容） ### 返回: - 主体内容  # [English] ### Purpose: - Get main content of discover page ### Return: - Main content  # [示例/Example]
     * @summary 获取发现页主体内容/Get main content of discover page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchDiscoverTabApiV1Lemon8AppFetchDiscoverTabGet(options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchDiscoverTabApiV1Lemon8AppFetchDiscoverTabGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取发现页（搜索页主体内容） ### 返回: - 主体内容  # [English] ### Purpose: - Get main content of discover page ### Return: - Main content  # [示例/Example]
     * @summary 获取发现页主体内容/Get main content of discover page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchDiscoverTabApiV1Lemon8AppFetchDiscoverTabGet_2(options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchDiscoverTabApiV1Lemon8AppFetchDiscoverTabGet_2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取发现页（搜索页下方的推荐内容 - Editor\'s Picks） ### 返回: - 推荐内容  # [English] ### Purpose: - Get Editor\'s Picks of discover page ### Return: - Editor\'s Picks  # [示例/Example]
     * @summary 获取发现页的 Editor\'s Picks/Get Editor\'s Picks of discover page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchDiscoverTabInformationTabsApiV1Lemon8AppFetchDiscoverTabInformationTabsGet(options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchDiscoverTabInformationTabsApiV1Lemon8AppFetchDiscoverTabInformationTabsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取发现页（搜索页下方的推荐内容 - Editor\'s Picks） ### 返回: - 推荐内容  # [English] ### Purpose: - Get Editor\'s Picks of discover page ### Return: - Editor\'s Picks  # [示例/Example]
     * @summary 获取发现页的 Editor\'s Picks/Get Editor\'s Picks of discover page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchDiscoverTabInformationTabsApiV1Lemon8AppFetchDiscoverTabInformationTabsGet_3(options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchDiscoverTabInformationTabsApiV1Lemon8AppFetchDiscoverTabInformationTabsGet_3(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取热搜关键词 ### 返回: - 热搜关键词列表  # [English] ### Purpose: - Get hot search keywords ### Return: - Hot search keywords list  # [示例/Example]
     * @summary 获取热搜关键词/Get hot search keywords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchHotSearchKeywordsApiV1Lemon8AppFetchHotSearchKeywordsGet(options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchHotSearchKeywordsApiV1Lemon8AppFetchHotSearchKeywordsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取热搜关键词 ### 返回: - 热搜关键词列表  # [English] ### Purpose: - Get hot search keywords ### Return: - Hot search keywords list  # [示例/Example]
     * @summary 获取热搜关键词/Get hot search keywords
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchHotSearchKeywordsApiV1Lemon8AppFetchHotSearchKeywordsGet_4(options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchHotSearchKeywordsApiV1Lemon8AppFetchHotSearchKeywordsGet_4(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定作品的评论列表 ### 参数: - group_id: 作品的group_id，可以从接口`/lemon8/app/fetch_post_detail`获取 - item_id: 作品的item_id，可以从接口`/lemon8/app/fetch_post_detail` 或 `/lemon8/app/get_item_id`获取 - media_id: 作品的media_id，可以从接口`/lemon8/app/fetch_post_detail`获取 - offset: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的offset进行翻页。 ### 返回: - 评论列表  # [English] ### Purpose: - Get comments list of specified post ### Parameters: - group_id: Post\'s group_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` - item_id: Post\'s item_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` or `/lemon8/app/get_item_id` - media_id: Post\'s media_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` - offset: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the offset returned by the last request is used for subsequent requests. ### Return: - Comments list  # [示例/Example] group_id = \"7361926875709129222\" item_id = \"7361926875709129222\" media_id = \"7428056850216862763\"
     * @summary 获取指定作品的评论列表/Get comments list of specified post
     * @param {string} groupId 作品的group_id/Post\&#39;s group_id
     * @param {string} itemId 作品的item_id/Post\&#39;s item_id
     * @param {string} mediaId 作品的media_id/Post\&#39;s media_id
     * @param {string} [offset] 翻页参数/Pagination parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet(groupId: string, itemId: string, mediaId: string, offset?: string, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet(groupId, itemId, mediaId, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定作品的评论列表 ### 参数: - group_id: 作品的group_id，可以从接口`/lemon8/app/fetch_post_detail`获取 - item_id: 作品的item_id，可以从接口`/lemon8/app/fetch_post_detail` 或 `/lemon8/app/get_item_id`获取 - media_id: 作品的media_id，可以从接口`/lemon8/app/fetch_post_detail`获取 - offset: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的offset进行翻页。 ### 返回: - 评论列表  # [English] ### Purpose: - Get comments list of specified post ### Parameters: - group_id: Post\'s group_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` - item_id: Post\'s item_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` or `/lemon8/app/get_item_id` - media_id: Post\'s media_id, can be obtained from the interface `/lemon8/app/fetch_post_detail` - offset: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the offset returned by the last request is used for subsequent requests. ### Return: - Comments list  # [示例/Example] group_id = \"7361926875709129222\" item_id = \"7361926875709129222\" media_id = \"7428056850216862763\"
     * @summary 获取指定作品的评论列表/Get comments list of specified post
     * @param {string} groupId 作品的group_id/Post\&#39;s group_id
     * @param {string} itemId 作品的item_id/Post\&#39;s item_id
     * @param {string} mediaId 作品的media_id/Post\&#39;s media_id
     * @param {string} [offset] 翻页参数/Pagination parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet_5(groupId: string, itemId: string, mediaId: string, offset?: string, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchPostCommentListApiV1Lemon8AppFetchPostCommentListGet_5(groupId, itemId, mediaId, offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定作品的信息 ### 参数: - item_id: 作品ID，可以从接口`/lemon8/app/get_item_id`获取 ### 返回: - 作品信息  # [English] ### Purpose: - Get information of specified post ### Parameters: - item_id: Post ID, can be obtained from the interface `/lemon8/app/get_item_id` ### Return: - Post information  # [示例/Example] item_id = \"7361926875709129222\"
     * @summary 获取指定作品的信息/Get information of specified post
     * @param {string} itemId 作品ID/Post ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchPostDetailApiV1Lemon8AppFetchPostDetailGet(itemId: string, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchPostDetailApiV1Lemon8AppFetchPostDetailGet(itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定作品的信息 ### 参数: - item_id: 作品ID，可以从接口`/lemon8/app/get_item_id`获取 ### 返回: - 作品信息  # [English] ### Purpose: - Get information of specified post ### Parameters: - item_id: Post ID, can be obtained from the interface `/lemon8/app/get_item_id` ### Return: - Post information  # [示例/Example] item_id = \"7361926875709129222\"
     * @summary 获取指定作品的信息/Get information of specified post
     * @param {string} itemId 作品ID/Post ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchPostDetailApiV1Lemon8AppFetchPostDetailGet_6(itemId: string, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchPostDetailApiV1Lemon8AppFetchPostDetailGet_6(itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索接口 ### 参数: - query: 搜索关键词 - max_cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的`max_cursor`进行翻页，可以通过返回结果的`has_more`字段判断是否还有更多数据。 - filter_type: 搜索过滤类型，默认为空字符串，可选值如下：     - 空字符串：All（全部，默认使用此参数搜索）     - video：只搜索视频作品     - posts：只搜索文章作品 - order_by: 搜索排序方式，默认为空字符串，可选值如下：     - 空字符串：Relevance（相关度，默认使用此参数排序）     - popular：流行度排序     - recent：从新到旧排序 - search_tab: 搜索类型，默认为`main`，可选值如下：     - main：APP中显示为 `Top`（综合搜索，默认使用此参数搜索）     - user：APP中显示为 `Accounts` （搜索用户账号）     - hashtag：APP中显示为 `Hashtags`（搜索话题）     - article：APP中显示为 `Posts`（搜索文章） ### 返回: - 搜索结果  # [English] ### Purpose: - Search API ### Parameters: - query: Search keyword - max_cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the `max_cursor` returned by the last request is used for subsequent requests. You can judge whether there is more data by the `has_more` field in the return result. - filter_type: Search filter type, default is an empty string, optional values are as follows:     - Empty string: All (default using this parameter to search)     - video: Search only video     - posts: Search only posts - order_by: Search sort type, default is an empty string, optional values are as follows:     - Empty string: Relevance (default using this parameter to sort)     - popular: Sort by popularity     - recent: Sort from new to old - search_tab: Search type, default is `main`, optional values are as follows:     - main: Display as `Top` in the APP (comprehensive search, default using this parameter to search)     - user: Display as `Accounts` in the APP (search user accounts)     - hashtag: Display as `Hashtags` in the APP (search hashtags)     - article: Display as `Posts` in the APP (search articles) ### Return: - Search results  # [示例/Example] query = \"lemon8\" max_cursor = \"\" filter_type = \"\" order_by = \"\" search_tab = \"main\"
     * @summary 搜索接口/Search API
     * @param {string} query 搜索关键词/Search keyword
     * @param {string} [maxCursor] 翻页参数/Pagination parameter
     * @param {string} [filterType] 搜索过滤类型/Search filter type
     * @param {string} [orderBy] 搜索排序方式/Search sort type
     * @param {string} [searchTab] 搜索类型/Search type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchSearchApiV1Lemon8AppFetchSearchGet(query: string, maxCursor?: string, filterType?: string, orderBy?: string, searchTab?: string, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchSearchApiV1Lemon8AppFetchSearchGet(query, maxCursor, filterType, orderBy, searchTab, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索接口 ### 参数: - query: 搜索关键词 - max_cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的`max_cursor`进行翻页，可以通过返回结果的`has_more`字段判断是否还有更多数据。 - filter_type: 搜索过滤类型，默认为空字符串，可选值如下：     - 空字符串：All（全部，默认使用此参数搜索）     - video：只搜索视频作品     - posts：只搜索文章作品 - order_by: 搜索排序方式，默认为空字符串，可选值如下：     - 空字符串：Relevance（相关度，默认使用此参数排序）     - popular：流行度排序     - recent：从新到旧排序 - search_tab: 搜索类型，默认为`main`，可选值如下：     - main：APP中显示为 `Top`（综合搜索，默认使用此参数搜索）     - user：APP中显示为 `Accounts` （搜索用户账号）     - hashtag：APP中显示为 `Hashtags`（搜索话题）     - article：APP中显示为 `Posts`（搜索文章） ### 返回: - 搜索结果  # [English] ### Purpose: - Search API ### Parameters: - query: Search keyword - max_cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the `max_cursor` returned by the last request is used for subsequent requests. You can judge whether there is more data by the `has_more` field in the return result. - filter_type: Search filter type, default is an empty string, optional values are as follows:     - Empty string: All (default using this parameter to search)     - video: Search only video     - posts: Search only posts - order_by: Search sort type, default is an empty string, optional values are as follows:     - Empty string: Relevance (default using this parameter to sort)     - popular: Sort by popularity     - recent: Sort from new to old - search_tab: Search type, default is `main`, optional values are as follows:     - main: Display as `Top` in the APP (comprehensive search, default using this parameter to search)     - user: Display as `Accounts` in the APP (search user accounts)     - hashtag: Display as `Hashtags` in the APP (search hashtags)     - article: Display as `Posts` in the APP (search articles) ### Return: - Search results  # [示例/Example] query = \"lemon8\" max_cursor = \"\" filter_type = \"\" order_by = \"\" search_tab = \"main\"
     * @summary 搜索接口/Search API
     * @param {string} query 搜索关键词/Search keyword
     * @param {string} [maxCursor] 翻页参数/Pagination parameter
     * @param {string} [filterType] 搜索过滤类型/Search filter type
     * @param {string} [orderBy] 搜索排序方式/Search sort type
     * @param {string} [searchTab] 搜索类型/Search type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchSearchApiV1Lemon8AppFetchSearchGet_7(query: string, maxCursor?: string, filterType?: string, orderBy?: string, searchTab?: string, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchSearchApiV1Lemon8AppFetchSearchGet_7(query, maxCursor, filterType, orderBy, searchTab, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取话题信息 ### 参数: - forum_id: 话题ID，可以从下面的接口获取     - 获取指定作品的信息：`/lemon8/app/fetch_post_detail`     - 获取发现页的 Editor\'s Picks：`/lemon8/app/fetch_discover_tab_information_tabs`     - 通过接口搜索 Hashtag：`/lemon8/app/fetch_search?search_tab=hashtag&keyword=lemon8` ### 返回: - 话题信息  # [English] ### Purpose: - Get topic information ### Parameters: - forum_id: Topic ID, can be obtained from the following interfaces     - Get information of specified post: `/lemon8/app/fetch_post_detail`     - Get Editor\'s Picks of discover page: `/lemon8/app/fetch_discover_tab_information_tabs`     - Search Hashtag through interface: `/lemon8/app/fetch_search?search_tab=hashtag&keyword=lemon8` ### Return: - Topic information  # [示例/Example] forum_id = \"7174447913778593798\"
     * @summary 获取话题信息/Get topic information
     * @param {string} forumId 话题ID/Topic ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet(forumId: string, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet(forumId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取话题信息 ### 参数: - forum_id: 话题ID，可以从下面的接口获取     - 获取指定作品的信息：`/lemon8/app/fetch_post_detail`     - 获取发现页的 Editor\'s Picks：`/lemon8/app/fetch_discover_tab_information_tabs`     - 通过接口搜索 Hashtag：`/lemon8/app/fetch_search?search_tab=hashtag&keyword=lemon8` ### 返回: - 话题信息  # [English] ### Purpose: - Get topic information ### Parameters: - forum_id: Topic ID, can be obtained from the following interfaces     - Get information of specified post: `/lemon8/app/fetch_post_detail`     - Get Editor\'s Picks of discover page: `/lemon8/app/fetch_discover_tab_information_tabs`     - Search Hashtag through interface: `/lemon8/app/fetch_search?search_tab=hashtag&keyword=lemon8` ### Return: - Topic information  # [示例/Example] forum_id = \"7174447913778593798\"
     * @summary 获取话题信息/Get topic information
     * @param {string} forumId 话题ID/Topic ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet_8(forumId: string, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchTopicInfoApiV1Lemon8AppFetchTopicInfoGet_8(forumId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取话题作品列表 ### 参数: - category: 话题分类 ID，可以从接口`/lemon8/app/fetch_topic_info`获取 - max_behot_time: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的max_behot_time进行翻页。 - category_parameter: 分类参数ID，可以从接口`/lemon8/app/fetch_topic_info`获取 - hashtag_name: Hashtag名称，可以从接口`/lemon8/app/fetch_topic_info`获取 - sort_type: 排序方式，0为默认排序，当前只支持使用默认排序，请不要传入其他值。 ### 返回: - 作品列表  # [English] ### Purpose: - Get topic post list ### Parameters: - category: Topic category ID, can be obtained from the interface `/lemon8/app/fetch_topic_info` - max_behot_time: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the max_behot_time returned by the last request is used for subsequent requests. - category_parameter: Category parameter ID, can be obtained from the interface `/lemon8/app/fetch_topic_info` - hashtag_name: Hashtag name, can be obtained from the interface `/lemon8/app/fetch_topic_info` - sort_type: Sort type, 0 for default sort, currently only support default sort, please do not pass other values. ### Return: - Post list  # [示例/Example] category = \"590\" max_behot_time = \"\" category_parameter = \"7174447913778593798\" hashtag_name = \"lemon8christmas\" sort_type = \"0\"
     * @summary 获取话题作品列表/Get topic post list
     * @param {string} category 话题分类 ID/Topic category ID
     * @param {string} categoryParameter 分类参数/Category parameter
     * @param {string} hashtagName Hashtag名称/Hashtag name
     * @param {string} [maxBehotTime] 翻页参数/Pagination parameter
     * @param {string} [sortType] 排序方式/Sort type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet(category: string, categoryParameter: string, hashtagName: string, maxBehotTime?: string, sortType?: string, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet(category, categoryParameter, hashtagName, maxBehotTime, sortType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取话题作品列表 ### 参数: - category: 话题分类 ID，可以从接口`/lemon8/app/fetch_topic_info`获取 - max_behot_time: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的max_behot_time进行翻页。 - category_parameter: 分类参数ID，可以从接口`/lemon8/app/fetch_topic_info`获取 - hashtag_name: Hashtag名称，可以从接口`/lemon8/app/fetch_topic_info`获取 - sort_type: 排序方式，0为默认排序，当前只支持使用默认排序，请不要传入其他值。 ### 返回: - 作品列表  # [English] ### Purpose: - Get topic post list ### Parameters: - category: Topic category ID, can be obtained from the interface `/lemon8/app/fetch_topic_info` - max_behot_time: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the max_behot_time returned by the last request is used for subsequent requests. - category_parameter: Category parameter ID, can be obtained from the interface `/lemon8/app/fetch_topic_info` - hashtag_name: Hashtag name, can be obtained from the interface `/lemon8/app/fetch_topic_info` - sort_type: Sort type, 0 for default sort, currently only support default sort, please do not pass other values. ### Return: - Post list  # [示例/Example] category = \"590\" max_behot_time = \"\" category_parameter = \"7174447913778593798\" hashtag_name = \"lemon8christmas\" sort_type = \"0\"
     * @summary 获取话题作品列表/Get topic post list
     * @param {string} category 话题分类 ID/Topic category ID
     * @param {string} categoryParameter 分类参数/Category parameter
     * @param {string} hashtagName Hashtag名称/Hashtag name
     * @param {string} [maxBehotTime] 翻页参数/Pagination parameter
     * @param {string} [sortType] 排序方式/Sort type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet_9(category: string, categoryParameter: string, hashtagName: string, maxBehotTime?: string, sortType?: string, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchTopicPostListApiV1Lemon8AppFetchTopicPostListGet_9(category, categoryParameter, hashtagName, maxBehotTime, sortType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的粉丝列表 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get fans list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Fans list  # [示例/Example] user_id = \"7428056850216862763\"
     * @summary 获取指定用户的粉丝列表/Get fans list of specified user
     * @param {string} userId 用户ID/User ID
     * @param {string} [cursor] 翻页参数/Pagination parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet(userId: string, cursor?: string, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet(userId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的粉丝列表 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 粉丝列表  # [English] ### Purpose: - Get fans list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Fans list  # [示例/Example] user_id = \"7428056850216862763\"
     * @summary 获取指定用户的粉丝列表/Get fans list of specified user
     * @param {string} userId 用户ID/User ID
     * @param {string} [cursor] 翻页参数/Pagination parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet_10(userId: string, cursor?: string, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchUserFollowerListApiV1Lemon8AppFetchUserFollowerListGet_10(userId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的关注列表 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 关注列表  # [English] ### Purpose: - Get following list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Following list  # [示例/Example] user_id = \"7428056850216862763\"
     * @summary 获取指定用户的关注列表/Get following list of specified user
     * @param {string} userId 用户ID/User ID
     * @param {string} [cursor] 翻页参数/Pagination parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet(userId: string, cursor?: string, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet(userId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的关注列表 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 - cursor: 翻页参数，可以从上一次请求的返回结果中获取，第一次请求为空，后续请求使用上一次请求返回的cursor进行翻页。 ### 返回: - 关注列表  # [English] ### Purpose: - Get following list of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` - cursor: Pagination parameter, can be obtained from the return result of the last request. It is empty for the first request, and the cursor returned by the last request is used for subsequent requests. ### Return: - Following list  # [示例/Example] user_id = \"7428056850216862763\"
     * @summary 获取指定用户的关注列表/Get following list of specified user
     * @param {string} userId 用户ID/User ID
     * @param {string} [cursor] 翻页参数/Pagination parameter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet_11(userId: string, cursor?: string, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).fetchUserFollowingListApiV1Lemon8AppFetchUserFollowingListGet_11(userId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过分享链接获取作品ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID  # [English] ### Purpose: - Get post ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post ID  # [示例/Example] share_text = \"https://www.lemon8-app.com/@deathlabs_/7445613324903006766\" share_text = \"https://v.lemon8-app.com/al/OghwFTppx\"
     * @summary 通过分享链接获取作品ID/Get post ID through sharing link
     * @param {string} shareText 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public getItemIdApiV1Lemon8AppGetItemIdGet(shareText: string, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).getItemIdApiV1Lemon8AppGetItemIdGet(shareText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过分享链接获取作品ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID  # [English] ### Purpose: - Get post ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post ID  # [示例/Example] share_text = \"https://www.lemon8-app.com/@deathlabs_/7445613324903006766\" share_text = \"https://v.lemon8-app.com/al/OghwFTppx\"
     * @summary 通过分享链接获取作品ID/Get post ID through sharing link
     * @param {string} shareText 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public getItemIdApiV1Lemon8AppGetItemIdGet_12(shareText: string, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).getItemIdApiV1Lemon8AppGetItemIdGet_12(shareText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过分享链接批量获取作品ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID列表  # [English] ### Purpose: - Get post IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post IDs list  # [示例/Example] share_texts = [     \"https://www.lemon8-app.com/@deathlabs_/7445613324903006766\",     \"https://v.lemon8-app.com/al/OghwFTppx\" ]
     * @summary 通过分享链接批量获取作品ID/Get post IDs in batch through sharing links
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public getItemIdsApiV1Lemon8AppGetItemIdsPost(requestBody?: Array<string>, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).getItemIdsApiV1Lemon8AppGetItemIdsPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过分享链接批量获取作品ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 作品ID列表  # [English] ### Purpose: - Get post IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - Post IDs list  # [示例/Example] share_texts = [     \"https://www.lemon8-app.com/@deathlabs_/7445613324903006766\",     \"https://v.lemon8-app.com/al/OghwFTppx\" ]
     * @summary 通过分享链接批量获取作品ID/Get post IDs in batch through sharing links
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public getItemIdsApiV1Lemon8AppGetItemIdsPost_13(requestBody?: Array<string>, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).getItemIdsApiV1Lemon8AppGetItemIdsPost_13(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过分享链接获取用户ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID  # [English] ### Purpose: - Get user ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User ID  # [示例/Example] share_text = \"https://www.lemon8-app.com/lemon8cars?region=us\" share_text = \"https://v.lemon8-app.com/al/OgZrsUppx\"
     * @summary 通过分享链接获取用户ID/Get user ID through sharing link
     * @param {string} shareText 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public getUserIdApiV1Lemon8AppGetUserIdGet(shareText: string, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).getUserIdApiV1Lemon8AppGetUserIdGet(shareText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过分享链接获取用户ID ### 参数: - share_text: 分享链接，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID  # [English] ### Purpose: - Get user ID through sharing link ### Parameters: - share_text: Share link, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User ID  # [示例/Example] share_text = \"https://www.lemon8-app.com/lemon8cars?region=us\" share_text = \"https://v.lemon8-app.com/al/OgZrsUppx\"
     * @summary 通过分享链接获取用户ID/Get user ID through sharing link
     * @param {string} shareText 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public getUserIdApiV1Lemon8AppGetUserIdGet_14(shareText: string, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).getUserIdApiV1Lemon8AppGetUserIdGet_14(shareText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过分享链接批量获取用户ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID列表  # [English] ### Purpose: - Get user IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User IDs list  # [示例/Example] share_texts = [     \"https://www.lemon8-app.com/lemon8cars?region=us\",     \"https://v.lemon8-app.com/al/OgZrsUppx\" ]
     * @summary 通过分享链接批量获取用户ID/Get user IDs in batch through sharing links
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public getUserIdsApiV1Lemon8AppGetUserIdsPost(requestBody?: Array<string>, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).getUserIdsApiV1Lemon8AppGetUserIdsPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过分享链接批量获取用户ID，一次最多获取10个 ### 参数: - share_texts: 分享链接列表，支持长链接和短链接，可以从网页端以及APP中的分享按钮获取并复制。 ### 返回: - 用户ID列表  # [English] ### Purpose: - Get user IDs in batch through sharing links, up to 10 at a time ### Parameters: - share_texts: Share links list, supports long links and short links, can be obtained and copied from the share button on the web and APP. ### Return: - User IDs list  # [示例/Example] share_texts = [     \"https://www.lemon8-app.com/lemon8cars?region=us\",     \"https://v.lemon8-app.com/al/OgZrsUppx\" ]
     * @summary 通过分享链接批量获取用户ID/Get user IDs in batch through sharing links
     * @param {Array<string>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public getUserIdsApiV1Lemon8AppGetUserIdsPost_15(requestBody?: Array<string>, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).getUserIdsApiV1Lemon8AppGetUserIdsPost_15(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` ### Return: - User information  # [示例/Example] user_id = \"7217844966059656197
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} userId 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public handlerUserProfileApiV1Lemon8AppFetchUserProfileGet(userId: string, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).handlerUserProfileApiV1Lemon8AppFetchUserProfileGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - user_id: 用户ID，可以从接口`/lemon8/app/get_user_id`获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - user_id: User ID, can be obtained from the interface `/lemon8/app/get_user_id` ### Return: - User information  # [示例/Example] user_id = \"7217844966059656197
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} userId 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof Lemon8AppAPIApi
     */
    public handlerUserProfileApiV1Lemon8AppFetchUserProfileGet_16(userId: string, options?: any) {
        return Lemon8AppAPIApiFp(this.configuration).handlerUserProfileApiV1Lemon8AppFetchUserProfileGet_16(userId, options).then((request) => request(this.axios, this.basePath));
    }

}
