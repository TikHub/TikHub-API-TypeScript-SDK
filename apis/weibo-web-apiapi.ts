// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
/**
 * WeiboWebAPIApi - axios parameter creator
 * @export
 */
export const WeiboWebAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - id: 作品id，从分享链接中获取  - https://weibo.com/5819018196/5092682368025584  - 作品id为：5092682368025584 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - id: Post id, obtained from the sharing link     - https://weibo.com/5819018196/5092682368025584     - The post id is: 5092682368025584 ### Return: - Post data  # [示例/Example] id = \"5092682368025584\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} id 作品id/Post id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostDetailApiV1WeiboWebFetchPostDetailGet: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling fetchPostDetailApiV1WeiboWebFetchPostDetailGet.');
            }
            const localVarPath = `/api/v1/weibo/web/fetch_post_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - id: 作品id，从分享链接中获取  - https://weibo.com/5819018196/5092682368025584  - 作品id为：5092682368025584 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - id: Post id, obtained from the sharing link     - https://weibo.com/5819018196/5092682368025584     - The post id is: 5092682368025584 ### Return: - Post data  # [示例/Example] id = \"5092682368025584\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} id 作品id/Post id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostDetailApiV1WeiboWebFetchPostDetailGet_1: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling fetchPostDetailApiV1WeiboWebFetchPostDetailGet_1.');
            }
            const localVarPath = `/api/v1/weibo/web/fetch_post_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取搜索数据 ### 参数: - keyword: 关键词 - page: 页数 - search_type: 搜索类型     - **1**: 综合     - **61**: 实时     - **3**: 用户     - **60**: 热门     - **64**: 视频     - **63**: 图片     - **21**: 文章     - **38**: 话题     - **98**: 超话 ### 返回: - 搜索数据  # [English] ### Purpose: - Get search data ### Parameters: - keyword: Keyword - page: Page number - search_type: Search type     - **1**: Comprehensive     - **61**: Real-time     - **3**: User     - **60**: Hot     - **64**: Video     - **63**: Picture     - **21**: Article     - **38**: Topic     - **98**: Super topic ### Return: - Search data  # [示例/Example] keyword = \"游戏\" page = \"1\" search_type = \"1\"
         * @summary 获取搜索数据/Get search data
         * @param {string} keyword 关键词/Keyword
         * @param {string} [page] 页数/Page number
         * @param {string} [searchType] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchDataApiV1WeiboWebFetchSearchDataGet: async (keyword: string, page?: string, searchType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchDataApiV1WeiboWebFetchSearchDataGet.');
            }
            const localVarPath = `/api/v1/weibo/web/fetch_search_data`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (searchType !== undefined) {
                localVarQueryParameter['search_type'] = searchType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取搜索数据 ### 参数: - keyword: 关键词 - page: 页数 - search_type: 搜索类型     - **1**: 综合     - **61**: 实时     - **3**: 用户     - **60**: 热门     - **64**: 视频     - **63**: 图片     - **21**: 文章     - **38**: 话题     - **98**: 超话 ### 返回: - 搜索数据  # [English] ### Purpose: - Get search data ### Parameters: - keyword: Keyword - page: Page number - search_type: Search type     - **1**: Comprehensive     - **61**: Real-time     - **3**: User     - **60**: Hot     - **64**: Video     - **63**: Picture     - **21**: Article     - **38**: Topic     - **98**: Super topic ### Return: - Search data  # [示例/Example] keyword = \"游戏\" page = \"1\" search_type = \"1\"
         * @summary 获取搜索数据/Get search data
         * @param {string} keyword 关键词/Keyword
         * @param {string} [page] 页数/Page number
         * @param {string} [searchType] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchDataApiV1WeiboWebFetchSearchDataGet_2: async (keyword: string, page?: string, searchType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchDataApiV1WeiboWebFetchSearchDataGet_2.');
            }
            const localVarPath = `/api/v1/weibo/web/fetch_search_data`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (searchType !== undefined) {
                localVarQueryParameter['search_type'] = searchType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取短视频数据 ### 参数: - share_text: 视频分享链接 ### 返回: - 短视频数据  # [English] ### Purpose: - Get short video data ### Parameters: - share_text: Video sharing link ### Return: - Short video data  # [示例/Example] share_text = \"https://video.weibo.com/show?fid=1034:4986069612167172\"
         * @summary 获取短视频数据/Get short video data
         * @param {string} shareText 视频分享链接/Video sharing link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShortVideoDataApiV1WeiboWebFetchShortVideoDataGet: async (shareText: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareText' is not null or undefined
            if (shareText === null || shareText === undefined) {
                throw new RequiredError('shareText','Required parameter shareText was null or undefined when calling fetchShortVideoDataApiV1WeiboWebFetchShortVideoDataGet.');
            }
            const localVarPath = `/api/v1/weibo/web/fetch_short_video_data`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareText !== undefined) {
                localVarQueryParameter['share_text'] = shareText;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取短视频数据 ### 参数: - share_text: 视频分享链接 ### 返回: - 短视频数据  # [English] ### Purpose: - Get short video data ### Parameters: - share_text: Video sharing link ### Return: - Short video data  # [示例/Example] share_text = \"https://video.weibo.com/show?fid=1034:4986069612167172\"
         * @summary 获取短视频数据/Get short video data
         * @param {string} shareText 视频分享链接/Video sharing link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShortVideoDataApiV1WeiboWebFetchShortVideoDataGet_3: async (shareText: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareText' is not null or undefined
            if (shareText === null || shareText === undefined) {
                throw new RequiredError('shareText','Required parameter shareText was null or undefined when calling fetchShortVideoDataApiV1WeiboWebFetchShortVideoDataGet_3.');
            }
            const localVarPath = `/api/v1/weibo/web/fetch_short_video_data`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareText !== undefined) {
                localVarQueryParameter['share_text'] = shareText;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题详情 ### 参数: - topic_name: 话题名称 - page: 页数 ### 返回: - 话题详情  # [English] ### Purpose: - Get topic details ### Parameters: - topic_name: Topic name - page: Page number ### Return: - Topic details  # [示例/Example] topic_name = \"游戏\" page = \"\"
         * @summary 获取话题详情/Get topic details
         * @param {string} topicName 话题名称/Topic name
         * @param {string} [page] 页数/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicDetailApiV1WeiboWebFetchTopicDetailGet: async (topicName: string, page?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'topicName' is not null or undefined
            if (topicName === null || topicName === undefined) {
                throw new RequiredError('topicName','Required parameter topicName was null or undefined when calling fetchTopicDetailApiV1WeiboWebFetchTopicDetailGet.');
            }
            const localVarPath = `/api/v1/weibo/web/fetch_topic_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (topicName !== undefined) {
                localVarQueryParameter['topic_name'] = topicName;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题详情 ### 参数: - topic_name: 话题名称 - page: 页数 ### 返回: - 话题详情  # [English] ### Purpose: - Get topic details ### Parameters: - topic_name: Topic name - page: Page number ### Return: - Topic details  # [示例/Example] topic_name = \"游戏\" page = \"\"
         * @summary 获取话题详情/Get topic details
         * @param {string} topicName 话题名称/Topic name
         * @param {string} [page] 页数/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicDetailApiV1WeiboWebFetchTopicDetailGet_4: async (topicName: string, page?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'topicName' is not null or undefined
            if (topicName === null || topicName === undefined) {
                throw new RequiredError('topicName','Required parameter topicName was null or undefined when calling fetchTopicDetailApiV1WeiboWebFetchTopicDetailGet_4.');
            }
            const localVarPath = `/api/v1/weibo/web/fetch_topic_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (topicName !== undefined) {
                localVarQueryParameter['topic_name'] = topicName;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题统计数据 ### 参数: - topic_name: 话题名称 ### 返回: - 话题统计数据  # [English] ### Purpose: - Get topic statistics ### Parameters: - topic_name: Topic name ### Return: - Topic statistics  # [示例/Example] topic_name = \"游戏\"
         * @summary 获取话题统计数据/Get topic statistics
         * @param {string} topicName 话题名称/Topic name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicStatsApiV1WeiboWebFetchTopicStatsGet: async (topicName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'topicName' is not null or undefined
            if (topicName === null || topicName === undefined) {
                throw new RequiredError('topicName','Required parameter topicName was null or undefined when calling fetchTopicStatsApiV1WeiboWebFetchTopicStatsGet.');
            }
            const localVarPath = `/api/v1/weibo/web/fetch_topic_stats`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (topicName !== undefined) {
                localVarQueryParameter['topic_name'] = topicName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题统计数据 ### 参数: - topic_name: 话题名称 ### 返回: - 话题统计数据  # [English] ### Purpose: - Get topic statistics ### Parameters: - topic_name: Topic name ### Return: - Topic statistics  # [示例/Example] topic_name = \"游戏\"
         * @summary 获取话题统计数据/Get topic statistics
         * @param {string} topicName 话题名称/Topic name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicStatsApiV1WeiboWebFetchTopicStatsGet_5: async (topicName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'topicName' is not null or undefined
            if (topicName === null || topicName === undefined) {
                throw new RequiredError('topicName','Required parameter topicName was null or undefined when calling fetchTopicStatsApiV1WeiboWebFetchTopicStatsGet_5.');
            }
            const localVarPath = `/api/v1/weibo/web/fetch_topic_stats`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (topicName !== undefined) {
                localVarQueryParameter['topic_name'] = topicName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 ### 参数: - uid: 用户id ### 返回: - 用户信息  # [English] ### Purpose: - Get user information ### Parameters: - uid: User id ### Return: - User information  # [示例/Example] uid = \"7277477906\"
         * @summary 获取用户信息/Get user information
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1WeiboWebFetchUserInfoGet: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserInfoApiV1WeiboWebFetchUserInfoGet.');
            }
            const localVarPath = `/api/v1/weibo/web/fetch_user_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 ### 参数: - uid: 用户id ### 返回: - 用户信息  # [English] ### Purpose: - Get user information ### Parameters: - uid: User id ### Return: - User information  # [示例/Example] uid = \"7277477906\"
         * @summary 获取用户信息/Get user information
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1WeiboWebFetchUserInfoGet_6: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserInfoApiV1WeiboWebFetchUserInfoGet_6.');
            }
            const localVarPath = `/api/v1/weibo/web/fetch_user_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息V2 ### 参数: - uid: 用户id ### 返回: - 用户信息  # [English] ### Purpose: - Get user information V2 ### Parameters: - uid: User id ### Return: - User information  # [示例/Example] uid = \"7277477906\"
         * @summary 获取用户信息V2/Get user information V2
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoV2ApiV1WeiboWebFetchUserInfoV2Get: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserInfoV2ApiV1WeiboWebFetchUserInfoV2Get.');
            }
            const localVarPath = `/api/v1/weibo/web/fetch_user_info_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息V2 ### 参数: - uid: 用户id ### 返回: - 用户信息  # [English] ### Purpose: - Get user information V2 ### Parameters: - uid: User id ### Return: - User information  # [示例/Example] uid = \"7277477906\"
         * @summary 获取用户信息V2/Get user information V2
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoV2ApiV1WeiboWebFetchUserInfoV2Get_7: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserInfoV2ApiV1WeiboWebFetchUserInfoV2Get_7.');
            }
            const localVarPath = `/api/v1/weibo/web/fetch_user_info_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取微博用户文章数据 ### 参数: - uid: 用户id - page: 页数 - feature: 特征 ### 返回: - 用户文章数据  # [English] ### Purpose: - Get Weibo user article data ### Parameters: - uid: User id - page: Page number - feature: Feature ### Return: - User article data  # [示例/Example] uid = \"7277477906\" page = 1 feature = 0
         * @summary 获取微博用户文章数据/Get Weibo user article data
         * @param {string} uid 用户id/User id
         * @param {number} [page] 页数/Page number
         * @param {number} [feature] 特征/Feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostsApiV1WeiboWebFetchUserPostsGet: async (uid: string, page?: number, feature?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserPostsApiV1WeiboWebFetchUserPostsGet.');
            }
            const localVarPath = `/api/v1/weibo/web/fetch_user_posts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (feature !== undefined) {
                localVarQueryParameter['feature'] = feature;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取微博用户文章数据 ### 参数: - uid: 用户id - page: 页数 - feature: 特征 ### 返回: - 用户文章数据  # [English] ### Purpose: - Get Weibo user article data ### Parameters: - uid: User id - page: Page number - feature: Feature ### Return: - User article data  # [示例/Example] uid = \"7277477906\" page = 1 feature = 0
         * @summary 获取微博用户文章数据/Get Weibo user article data
         * @param {string} uid 用户id/User id
         * @param {number} [page] 页数/Page number
         * @param {number} [feature] 特征/Feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostsApiV1WeiboWebFetchUserPostsGet_8: async (uid: string, page?: number, feature?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserPostsApiV1WeiboWebFetchUserPostsGet_8.');
            }
            const localVarPath = `/api/v1/weibo/web/fetch_user_posts`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (feature !== undefined) {
                localVarQueryParameter['feature'] = feature;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WeiboWebAPIApi - functional programming interface
 * @export
 */
export const WeiboWebAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - id: 作品id，从分享链接中获取  - https://weibo.com/5819018196/5092682368025584  - 作品id为：5092682368025584 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - id: Post id, obtained from the sharing link     - https://weibo.com/5819018196/5092682368025584     - The post id is: 5092682368025584 ### Return: - Post data  # [示例/Example] id = \"5092682368025584\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} id 作品id/Post id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostDetailApiV1WeiboWebFetchPostDetailGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await WeiboWebAPIApiAxiosParamCreator(configuration).fetchPostDetailApiV1WeiboWebFetchPostDetailGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - id: 作品id，从分享链接中获取  - https://weibo.com/5819018196/5092682368025584  - 作品id为：5092682368025584 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - id: Post id, obtained from the sharing link     - https://weibo.com/5819018196/5092682368025584     - The post id is: 5092682368025584 ### Return: - Post data  # [示例/Example] id = \"5092682368025584\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} id 作品id/Post id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostDetailApiV1WeiboWebFetchPostDetailGet_1(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await WeiboWebAPIApiAxiosParamCreator(configuration).fetchPostDetailApiV1WeiboWebFetchPostDetailGet_1(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取搜索数据 ### 参数: - keyword: 关键词 - page: 页数 - search_type: 搜索类型     - **1**: 综合     - **61**: 实时     - **3**: 用户     - **60**: 热门     - **64**: 视频     - **63**: 图片     - **21**: 文章     - **38**: 话题     - **98**: 超话 ### 返回: - 搜索数据  # [English] ### Purpose: - Get search data ### Parameters: - keyword: Keyword - page: Page number - search_type: Search type     - **1**: Comprehensive     - **61**: Real-time     - **3**: User     - **60**: Hot     - **64**: Video     - **63**: Picture     - **21**: Article     - **38**: Topic     - **98**: Super topic ### Return: - Search data  # [示例/Example] keyword = \"游戏\" page = \"1\" search_type = \"1\"
         * @summary 获取搜索数据/Get search data
         * @param {string} keyword 关键词/Keyword
         * @param {string} [page] 页数/Page number
         * @param {string} [searchType] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchDataApiV1WeiboWebFetchSearchDataGet(keyword: string, page?: string, searchType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await WeiboWebAPIApiAxiosParamCreator(configuration).fetchSearchDataApiV1WeiboWebFetchSearchDataGet(keyword, page, searchType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取搜索数据 ### 参数: - keyword: 关键词 - page: 页数 - search_type: 搜索类型     - **1**: 综合     - **61**: 实时     - **3**: 用户     - **60**: 热门     - **64**: 视频     - **63**: 图片     - **21**: 文章     - **38**: 话题     - **98**: 超话 ### 返回: - 搜索数据  # [English] ### Purpose: - Get search data ### Parameters: - keyword: Keyword - page: Page number - search_type: Search type     - **1**: Comprehensive     - **61**: Real-time     - **3**: User     - **60**: Hot     - **64**: Video     - **63**: Picture     - **21**: Article     - **38**: Topic     - **98**: Super topic ### Return: - Search data  # [示例/Example] keyword = \"游戏\" page = \"1\" search_type = \"1\"
         * @summary 获取搜索数据/Get search data
         * @param {string} keyword 关键词/Keyword
         * @param {string} [page] 页数/Page number
         * @param {string} [searchType] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchDataApiV1WeiboWebFetchSearchDataGet_2(keyword: string, page?: string, searchType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await WeiboWebAPIApiAxiosParamCreator(configuration).fetchSearchDataApiV1WeiboWebFetchSearchDataGet_2(keyword, page, searchType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取短视频数据 ### 参数: - share_text: 视频分享链接 ### 返回: - 短视频数据  # [English] ### Purpose: - Get short video data ### Parameters: - share_text: Video sharing link ### Return: - Short video data  # [示例/Example] share_text = \"https://video.weibo.com/show?fid=1034:4986069612167172\"
         * @summary 获取短视频数据/Get short video data
         * @param {string} shareText 视频分享链接/Video sharing link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShortVideoDataApiV1WeiboWebFetchShortVideoDataGet(shareText: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await WeiboWebAPIApiAxiosParamCreator(configuration).fetchShortVideoDataApiV1WeiboWebFetchShortVideoDataGet(shareText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取短视频数据 ### 参数: - share_text: 视频分享链接 ### 返回: - 短视频数据  # [English] ### Purpose: - Get short video data ### Parameters: - share_text: Video sharing link ### Return: - Short video data  # [示例/Example] share_text = \"https://video.weibo.com/show?fid=1034:4986069612167172\"
         * @summary 获取短视频数据/Get short video data
         * @param {string} shareText 视频分享链接/Video sharing link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShortVideoDataApiV1WeiboWebFetchShortVideoDataGet_3(shareText: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await WeiboWebAPIApiAxiosParamCreator(configuration).fetchShortVideoDataApiV1WeiboWebFetchShortVideoDataGet_3(shareText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题详情 ### 参数: - topic_name: 话题名称 - page: 页数 ### 返回: - 话题详情  # [English] ### Purpose: - Get topic details ### Parameters: - topic_name: Topic name - page: Page number ### Return: - Topic details  # [示例/Example] topic_name = \"游戏\" page = \"\"
         * @summary 获取话题详情/Get topic details
         * @param {string} topicName 话题名称/Topic name
         * @param {string} [page] 页数/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTopicDetailApiV1WeiboWebFetchTopicDetailGet(topicName: string, page?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await WeiboWebAPIApiAxiosParamCreator(configuration).fetchTopicDetailApiV1WeiboWebFetchTopicDetailGet(topicName, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题详情 ### 参数: - topic_name: 话题名称 - page: 页数 ### 返回: - 话题详情  # [English] ### Purpose: - Get topic details ### Parameters: - topic_name: Topic name - page: Page number ### Return: - Topic details  # [示例/Example] topic_name = \"游戏\" page = \"\"
         * @summary 获取话题详情/Get topic details
         * @param {string} topicName 话题名称/Topic name
         * @param {string} [page] 页数/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTopicDetailApiV1WeiboWebFetchTopicDetailGet_4(topicName: string, page?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await WeiboWebAPIApiAxiosParamCreator(configuration).fetchTopicDetailApiV1WeiboWebFetchTopicDetailGet_4(topicName, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题统计数据 ### 参数: - topic_name: 话题名称 ### 返回: - 话题统计数据  # [English] ### Purpose: - Get topic statistics ### Parameters: - topic_name: Topic name ### Return: - Topic statistics  # [示例/Example] topic_name = \"游戏\"
         * @summary 获取话题统计数据/Get topic statistics
         * @param {string} topicName 话题名称/Topic name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTopicStatsApiV1WeiboWebFetchTopicStatsGet(topicName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await WeiboWebAPIApiAxiosParamCreator(configuration).fetchTopicStatsApiV1WeiboWebFetchTopicStatsGet(topicName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取话题统计数据 ### 参数: - topic_name: 话题名称 ### 返回: - 话题统计数据  # [English] ### Purpose: - Get topic statistics ### Parameters: - topic_name: Topic name ### Return: - Topic statistics  # [示例/Example] topic_name = \"游戏\"
         * @summary 获取话题统计数据/Get topic statistics
         * @param {string} topicName 话题名称/Topic name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTopicStatsApiV1WeiboWebFetchTopicStatsGet_5(topicName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await WeiboWebAPIApiAxiosParamCreator(configuration).fetchTopicStatsApiV1WeiboWebFetchTopicStatsGet_5(topicName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 ### 参数: - uid: 用户id ### 返回: - 用户信息  # [English] ### Purpose: - Get user information ### Parameters: - uid: User id ### Return: - User information  # [示例/Example] uid = \"7277477906\"
         * @summary 获取用户信息/Get user information
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoApiV1WeiboWebFetchUserInfoGet(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await WeiboWebAPIApiAxiosParamCreator(configuration).fetchUserInfoApiV1WeiboWebFetchUserInfoGet(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 ### 参数: - uid: 用户id ### 返回: - 用户信息  # [English] ### Purpose: - Get user information ### Parameters: - uid: User id ### Return: - User information  # [示例/Example] uid = \"7277477906\"
         * @summary 获取用户信息/Get user information
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoApiV1WeiboWebFetchUserInfoGet_6(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await WeiboWebAPIApiAxiosParamCreator(configuration).fetchUserInfoApiV1WeiboWebFetchUserInfoGet_6(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息V2 ### 参数: - uid: 用户id ### 返回: - 用户信息  # [English] ### Purpose: - Get user information V2 ### Parameters: - uid: User id ### Return: - User information  # [示例/Example] uid = \"7277477906\"
         * @summary 获取用户信息V2/Get user information V2
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoV2ApiV1WeiboWebFetchUserInfoV2Get(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await WeiboWebAPIApiAxiosParamCreator(configuration).fetchUserInfoV2ApiV1WeiboWebFetchUserInfoV2Get(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息V2 ### 参数: - uid: 用户id ### 返回: - 用户信息  # [English] ### Purpose: - Get user information V2 ### Parameters: - uid: User id ### Return: - User information  # [示例/Example] uid = \"7277477906\"
         * @summary 获取用户信息V2/Get user information V2
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoV2ApiV1WeiboWebFetchUserInfoV2Get_7(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await WeiboWebAPIApiAxiosParamCreator(configuration).fetchUserInfoV2ApiV1WeiboWebFetchUserInfoV2Get_7(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取微博用户文章数据 ### 参数: - uid: 用户id - page: 页数 - feature: 特征 ### 返回: - 用户文章数据  # [English] ### Purpose: - Get Weibo user article data ### Parameters: - uid: User id - page: Page number - feature: Feature ### Return: - User article data  # [示例/Example] uid = \"7277477906\" page = 1 feature = 0
         * @summary 获取微博用户文章数据/Get Weibo user article data
         * @param {string} uid 用户id/User id
         * @param {number} [page] 页数/Page number
         * @param {number} [feature] 特征/Feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostsApiV1WeiboWebFetchUserPostsGet(uid: string, page?: number, feature?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await WeiboWebAPIApiAxiosParamCreator(configuration).fetchUserPostsApiV1WeiboWebFetchUserPostsGet(uid, page, feature, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取微博用户文章数据 ### 参数: - uid: 用户id - page: 页数 - feature: 特征 ### 返回: - 用户文章数据  # [English] ### Purpose: - Get Weibo user article data ### Parameters: - uid: User id - page: Page number - feature: Feature ### Return: - User article data  # [示例/Example] uid = \"7277477906\" page = 1 feature = 0
         * @summary 获取微博用户文章数据/Get Weibo user article data
         * @param {string} uid 用户id/User id
         * @param {number} [page] 页数/Page number
         * @param {number} [feature] 特征/Feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostsApiV1WeiboWebFetchUserPostsGet_8(uid: string, page?: number, feature?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await WeiboWebAPIApiAxiosParamCreator(configuration).fetchUserPostsApiV1WeiboWebFetchUserPostsGet_8(uid, page, feature, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WeiboWebAPIApi - factory interface
 * @export
 */
export const WeiboWebAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - id: 作品id，从分享链接中获取  - https://weibo.com/5819018196/5092682368025584  - 作品id为：5092682368025584 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - id: Post id, obtained from the sharing link     - https://weibo.com/5819018196/5092682368025584     - The post id is: 5092682368025584 ### Return: - Post data  # [示例/Example] id = \"5092682368025584\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} id 作品id/Post id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostDetailApiV1WeiboWebFetchPostDetailGet(id: string, options?: any): AxiosPromise<ResponseModel> {
            return WeiboWebAPIApiFp(configuration).fetchPostDetailApiV1WeiboWebFetchPostDetailGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - id: 作品id，从分享链接中获取  - https://weibo.com/5819018196/5092682368025584  - 作品id为：5092682368025584 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - id: Post id, obtained from the sharing link     - https://weibo.com/5819018196/5092682368025584     - The post id is: 5092682368025584 ### Return: - Post data  # [示例/Example] id = \"5092682368025584\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} id 作品id/Post id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostDetailApiV1WeiboWebFetchPostDetailGet_1(id: string, options?: any): AxiosPromise<ResponseModel> {
            return WeiboWebAPIApiFp(configuration).fetchPostDetailApiV1WeiboWebFetchPostDetailGet_1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取搜索数据 ### 参数: - keyword: 关键词 - page: 页数 - search_type: 搜索类型     - **1**: 综合     - **61**: 实时     - **3**: 用户     - **60**: 热门     - **64**: 视频     - **63**: 图片     - **21**: 文章     - **38**: 话题     - **98**: 超话 ### 返回: - 搜索数据  # [English] ### Purpose: - Get search data ### Parameters: - keyword: Keyword - page: Page number - search_type: Search type     - **1**: Comprehensive     - **61**: Real-time     - **3**: User     - **60**: Hot     - **64**: Video     - **63**: Picture     - **21**: Article     - **38**: Topic     - **98**: Super topic ### Return: - Search data  # [示例/Example] keyword = \"游戏\" page = \"1\" search_type = \"1\"
         * @summary 获取搜索数据/Get search data
         * @param {string} keyword 关键词/Keyword
         * @param {string} [page] 页数/Page number
         * @param {string} [searchType] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchDataApiV1WeiboWebFetchSearchDataGet(keyword: string, page?: string, searchType?: string, options?: any): AxiosPromise<ResponseModel> {
            return WeiboWebAPIApiFp(configuration).fetchSearchDataApiV1WeiboWebFetchSearchDataGet(keyword, page, searchType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取搜索数据 ### 参数: - keyword: 关键词 - page: 页数 - search_type: 搜索类型     - **1**: 综合     - **61**: 实时     - **3**: 用户     - **60**: 热门     - **64**: 视频     - **63**: 图片     - **21**: 文章     - **38**: 话题     - **98**: 超话 ### 返回: - 搜索数据  # [English] ### Purpose: - Get search data ### Parameters: - keyword: Keyword - page: Page number - search_type: Search type     - **1**: Comprehensive     - **61**: Real-time     - **3**: User     - **60**: Hot     - **64**: Video     - **63**: Picture     - **21**: Article     - **38**: Topic     - **98**: Super topic ### Return: - Search data  # [示例/Example] keyword = \"游戏\" page = \"1\" search_type = \"1\"
         * @summary 获取搜索数据/Get search data
         * @param {string} keyword 关键词/Keyword
         * @param {string} [page] 页数/Page number
         * @param {string} [searchType] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchDataApiV1WeiboWebFetchSearchDataGet_2(keyword: string, page?: string, searchType?: string, options?: any): AxiosPromise<ResponseModel> {
            return WeiboWebAPIApiFp(configuration).fetchSearchDataApiV1WeiboWebFetchSearchDataGet_2(keyword, page, searchType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取短视频数据 ### 参数: - share_text: 视频分享链接 ### 返回: - 短视频数据  # [English] ### Purpose: - Get short video data ### Parameters: - share_text: Video sharing link ### Return: - Short video data  # [示例/Example] share_text = \"https://video.weibo.com/show?fid=1034:4986069612167172\"
         * @summary 获取短视频数据/Get short video data
         * @param {string} shareText 视频分享链接/Video sharing link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShortVideoDataApiV1WeiboWebFetchShortVideoDataGet(shareText: string, options?: any): AxiosPromise<ResponseModel> {
            return WeiboWebAPIApiFp(configuration).fetchShortVideoDataApiV1WeiboWebFetchShortVideoDataGet(shareText, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取短视频数据 ### 参数: - share_text: 视频分享链接 ### 返回: - 短视频数据  # [English] ### Purpose: - Get short video data ### Parameters: - share_text: Video sharing link ### Return: - Short video data  # [示例/Example] share_text = \"https://video.weibo.com/show?fid=1034:4986069612167172\"
         * @summary 获取短视频数据/Get short video data
         * @param {string} shareText 视频分享链接/Video sharing link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShortVideoDataApiV1WeiboWebFetchShortVideoDataGet_3(shareText: string, options?: any): AxiosPromise<ResponseModel> {
            return WeiboWebAPIApiFp(configuration).fetchShortVideoDataApiV1WeiboWebFetchShortVideoDataGet_3(shareText, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取话题详情 ### 参数: - topic_name: 话题名称 - page: 页数 ### 返回: - 话题详情  # [English] ### Purpose: - Get topic details ### Parameters: - topic_name: Topic name - page: Page number ### Return: - Topic details  # [示例/Example] topic_name = \"游戏\" page = \"\"
         * @summary 获取话题详情/Get topic details
         * @param {string} topicName 话题名称/Topic name
         * @param {string} [page] 页数/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicDetailApiV1WeiboWebFetchTopicDetailGet(topicName: string, page?: string, options?: any): AxiosPromise<ResponseModel> {
            return WeiboWebAPIApiFp(configuration).fetchTopicDetailApiV1WeiboWebFetchTopicDetailGet(topicName, page, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取话题详情 ### 参数: - topic_name: 话题名称 - page: 页数 ### 返回: - 话题详情  # [English] ### Purpose: - Get topic details ### Parameters: - topic_name: Topic name - page: Page number ### Return: - Topic details  # [示例/Example] topic_name = \"游戏\" page = \"\"
         * @summary 获取话题详情/Get topic details
         * @param {string} topicName 话题名称/Topic name
         * @param {string} [page] 页数/Page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicDetailApiV1WeiboWebFetchTopicDetailGet_4(topicName: string, page?: string, options?: any): AxiosPromise<ResponseModel> {
            return WeiboWebAPIApiFp(configuration).fetchTopicDetailApiV1WeiboWebFetchTopicDetailGet_4(topicName, page, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取话题统计数据 ### 参数: - topic_name: 话题名称 ### 返回: - 话题统计数据  # [English] ### Purpose: - Get topic statistics ### Parameters: - topic_name: Topic name ### Return: - Topic statistics  # [示例/Example] topic_name = \"游戏\"
         * @summary 获取话题统计数据/Get topic statistics
         * @param {string} topicName 话题名称/Topic name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicStatsApiV1WeiboWebFetchTopicStatsGet(topicName: string, options?: any): AxiosPromise<ResponseModel> {
            return WeiboWebAPIApiFp(configuration).fetchTopicStatsApiV1WeiboWebFetchTopicStatsGet(topicName, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取话题统计数据 ### 参数: - topic_name: 话题名称 ### 返回: - 话题统计数据  # [English] ### Purpose: - Get topic statistics ### Parameters: - topic_name: Topic name ### Return: - Topic statistics  # [示例/Example] topic_name = \"游戏\"
         * @summary 获取话题统计数据/Get topic statistics
         * @param {string} topicName 话题名称/Topic name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTopicStatsApiV1WeiboWebFetchTopicStatsGet_5(topicName: string, options?: any): AxiosPromise<ResponseModel> {
            return WeiboWebAPIApiFp(configuration).fetchTopicStatsApiV1WeiboWebFetchTopicStatsGet_5(topicName, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 ### 参数: - uid: 用户id ### 返回: - 用户信息  # [English] ### Purpose: - Get user information ### Parameters: - uid: User id ### Return: - User information  # [示例/Example] uid = \"7277477906\"
         * @summary 获取用户信息/Get user information
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1WeiboWebFetchUserInfoGet(uid: string, options?: any): AxiosPromise<ResponseModel> {
            return WeiboWebAPIApiFp(configuration).fetchUserInfoApiV1WeiboWebFetchUserInfoGet(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 ### 参数: - uid: 用户id ### 返回: - 用户信息  # [English] ### Purpose: - Get user information ### Parameters: - uid: User id ### Return: - User information  # [示例/Example] uid = \"7277477906\"
         * @summary 获取用户信息/Get user information
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1WeiboWebFetchUserInfoGet_6(uid: string, options?: any): AxiosPromise<ResponseModel> {
            return WeiboWebAPIApiFp(configuration).fetchUserInfoApiV1WeiboWebFetchUserInfoGet_6(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户信息V2 ### 参数: - uid: 用户id ### 返回: - 用户信息  # [English] ### Purpose: - Get user information V2 ### Parameters: - uid: User id ### Return: - User information  # [示例/Example] uid = \"7277477906\"
         * @summary 获取用户信息V2/Get user information V2
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoV2ApiV1WeiboWebFetchUserInfoV2Get(uid: string, options?: any): AxiosPromise<ResponseModel> {
            return WeiboWebAPIApiFp(configuration).fetchUserInfoV2ApiV1WeiboWebFetchUserInfoV2Get(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户信息V2 ### 参数: - uid: 用户id ### 返回: - 用户信息  # [English] ### Purpose: - Get user information V2 ### Parameters: - uid: User id ### Return: - User information  # [示例/Example] uid = \"7277477906\"
         * @summary 获取用户信息V2/Get user information V2
         * @param {string} uid 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoV2ApiV1WeiboWebFetchUserInfoV2Get_7(uid: string, options?: any): AxiosPromise<ResponseModel> {
            return WeiboWebAPIApiFp(configuration).fetchUserInfoV2ApiV1WeiboWebFetchUserInfoV2Get_7(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取微博用户文章数据 ### 参数: - uid: 用户id - page: 页数 - feature: 特征 ### 返回: - 用户文章数据  # [English] ### Purpose: - Get Weibo user article data ### Parameters: - uid: User id - page: Page number - feature: Feature ### Return: - User article data  # [示例/Example] uid = \"7277477906\" page = 1 feature = 0
         * @summary 获取微博用户文章数据/Get Weibo user article data
         * @param {string} uid 用户id/User id
         * @param {number} [page] 页数/Page number
         * @param {number} [feature] 特征/Feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostsApiV1WeiboWebFetchUserPostsGet(uid: string, page?: number, feature?: number, options?: any): AxiosPromise<ResponseModel> {
            return WeiboWebAPIApiFp(configuration).fetchUserPostsApiV1WeiboWebFetchUserPostsGet(uid, page, feature, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取微博用户文章数据 ### 参数: - uid: 用户id - page: 页数 - feature: 特征 ### 返回: - 用户文章数据  # [English] ### Purpose: - Get Weibo user article data ### Parameters: - uid: User id - page: Page number - feature: Feature ### Return: - User article data  # [示例/Example] uid = \"7277477906\" page = 1 feature = 0
         * @summary 获取微博用户文章数据/Get Weibo user article data
         * @param {string} uid 用户id/User id
         * @param {number} [page] 页数/Page number
         * @param {number} [feature] 特征/Feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostsApiV1WeiboWebFetchUserPostsGet_8(uid: string, page?: number, feature?: number, options?: any): AxiosPromise<ResponseModel> {
            return WeiboWebAPIApiFp(configuration).fetchUserPostsApiV1WeiboWebFetchUserPostsGet_8(uid, page, feature, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WeiboWebAPIApi - interface
 * @export
 * @interface WeiboWebAPIApi
 */
export interface WeiboWebAPIApiInterface {
    /**
     * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - id: 作品id，从分享链接中获取  - https://weibo.com/5819018196/5092682368025584  - 作品id为：5092682368025584 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - id: Post id, obtained from the sharing link     - https://weibo.com/5819018196/5092682368025584     - The post id is: 5092682368025584 ### Return: - Post data  # [示例/Example] id = \"5092682368025584\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} id 作品id/Post id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApiInterface
     */
    fetchPostDetailApiV1WeiboWebFetchPostDetailGet(id: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - id: 作品id，从分享链接中获取  - https://weibo.com/5819018196/5092682368025584  - 作品id为：5092682368025584 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - id: Post id, obtained from the sharing link     - https://weibo.com/5819018196/5092682368025584     - The post id is: 5092682368025584 ### Return: - Post data  # [示例/Example] id = \"5092682368025584\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} id 作品id/Post id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApiInterface
     */
    fetchPostDetailApiV1WeiboWebFetchPostDetailGet_1(id: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取搜索数据 ### 参数: - keyword: 关键词 - page: 页数 - search_type: 搜索类型     - **1**: 综合     - **61**: 实时     - **3**: 用户     - **60**: 热门     - **64**: 视频     - **63**: 图片     - **21**: 文章     - **38**: 话题     - **98**: 超话 ### 返回: - 搜索数据  # [English] ### Purpose: - Get search data ### Parameters: - keyword: Keyword - page: Page number - search_type: Search type     - **1**: Comprehensive     - **61**: Real-time     - **3**: User     - **60**: Hot     - **64**: Video     - **63**: Picture     - **21**: Article     - **38**: Topic     - **98**: Super topic ### Return: - Search data  # [示例/Example] keyword = \"游戏\" page = \"1\" search_type = \"1\"
     * @summary 获取搜索数据/Get search data
     * @param {string} keyword 关键词/Keyword
     * @param {string} [page] 页数/Page number
     * @param {string} [searchType] 搜索类型/Search type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApiInterface
     */
    fetchSearchDataApiV1WeiboWebFetchSearchDataGet(keyword: string, page?: string, searchType?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取搜索数据 ### 参数: - keyword: 关键词 - page: 页数 - search_type: 搜索类型     - **1**: 综合     - **61**: 实时     - **3**: 用户     - **60**: 热门     - **64**: 视频     - **63**: 图片     - **21**: 文章     - **38**: 话题     - **98**: 超话 ### 返回: - 搜索数据  # [English] ### Purpose: - Get search data ### Parameters: - keyword: Keyword - page: Page number - search_type: Search type     - **1**: Comprehensive     - **61**: Real-time     - **3**: User     - **60**: Hot     - **64**: Video     - **63**: Picture     - **21**: Article     - **38**: Topic     - **98**: Super topic ### Return: - Search data  # [示例/Example] keyword = \"游戏\" page = \"1\" search_type = \"1\"
     * @summary 获取搜索数据/Get search data
     * @param {string} keyword 关键词/Keyword
     * @param {string} [page] 页数/Page number
     * @param {string} [searchType] 搜索类型/Search type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApiInterface
     */
    fetchSearchDataApiV1WeiboWebFetchSearchDataGet_2(keyword: string, page?: string, searchType?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取短视频数据 ### 参数: - share_text: 视频分享链接 ### 返回: - 短视频数据  # [English] ### Purpose: - Get short video data ### Parameters: - share_text: Video sharing link ### Return: - Short video data  # [示例/Example] share_text = \"https://video.weibo.com/show?fid=1034:4986069612167172\"
     * @summary 获取短视频数据/Get short video data
     * @param {string} shareText 视频分享链接/Video sharing link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApiInterface
     */
    fetchShortVideoDataApiV1WeiboWebFetchShortVideoDataGet(shareText: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取短视频数据 ### 参数: - share_text: 视频分享链接 ### 返回: - 短视频数据  # [English] ### Purpose: - Get short video data ### Parameters: - share_text: Video sharing link ### Return: - Short video data  # [示例/Example] share_text = \"https://video.weibo.com/show?fid=1034:4986069612167172\"
     * @summary 获取短视频数据/Get short video data
     * @param {string} shareText 视频分享链接/Video sharing link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApiInterface
     */
    fetchShortVideoDataApiV1WeiboWebFetchShortVideoDataGet_3(shareText: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取话题详情 ### 参数: - topic_name: 话题名称 - page: 页数 ### 返回: - 话题详情  # [English] ### Purpose: - Get topic details ### Parameters: - topic_name: Topic name - page: Page number ### Return: - Topic details  # [示例/Example] topic_name = \"游戏\" page = \"\"
     * @summary 获取话题详情/Get topic details
     * @param {string} topicName 话题名称/Topic name
     * @param {string} [page] 页数/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApiInterface
     */
    fetchTopicDetailApiV1WeiboWebFetchTopicDetailGet(topicName: string, page?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取话题详情 ### 参数: - topic_name: 话题名称 - page: 页数 ### 返回: - 话题详情  # [English] ### Purpose: - Get topic details ### Parameters: - topic_name: Topic name - page: Page number ### Return: - Topic details  # [示例/Example] topic_name = \"游戏\" page = \"\"
     * @summary 获取话题详情/Get topic details
     * @param {string} topicName 话题名称/Topic name
     * @param {string} [page] 页数/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApiInterface
     */
    fetchTopicDetailApiV1WeiboWebFetchTopicDetailGet_4(topicName: string, page?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取话题统计数据 ### 参数: - topic_name: 话题名称 ### 返回: - 话题统计数据  # [English] ### Purpose: - Get topic statistics ### Parameters: - topic_name: Topic name ### Return: - Topic statistics  # [示例/Example] topic_name = \"游戏\"
     * @summary 获取话题统计数据/Get topic statistics
     * @param {string} topicName 话题名称/Topic name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApiInterface
     */
    fetchTopicStatsApiV1WeiboWebFetchTopicStatsGet(topicName: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取话题统计数据 ### 参数: - topic_name: 话题名称 ### 返回: - 话题统计数据  # [English] ### Purpose: - Get topic statistics ### Parameters: - topic_name: Topic name ### Return: - Topic statistics  # [示例/Example] topic_name = \"游戏\"
     * @summary 获取话题统计数据/Get topic statistics
     * @param {string} topicName 话题名称/Topic name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApiInterface
     */
    fetchTopicStatsApiV1WeiboWebFetchTopicStatsGet_5(topicName: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户信息 ### 参数: - uid: 用户id ### 返回: - 用户信息  # [English] ### Purpose: - Get user information ### Parameters: - uid: User id ### Return: - User information  # [示例/Example] uid = \"7277477906\"
     * @summary 获取用户信息/Get user information
     * @param {string} uid 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApiInterface
     */
    fetchUserInfoApiV1WeiboWebFetchUserInfoGet(uid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户信息 ### 参数: - uid: 用户id ### 返回: - 用户信息  # [English] ### Purpose: - Get user information ### Parameters: - uid: User id ### Return: - User information  # [示例/Example] uid = \"7277477906\"
     * @summary 获取用户信息/Get user information
     * @param {string} uid 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApiInterface
     */
    fetchUserInfoApiV1WeiboWebFetchUserInfoGet_6(uid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户信息V2 ### 参数: - uid: 用户id ### 返回: - 用户信息  # [English] ### Purpose: - Get user information V2 ### Parameters: - uid: User id ### Return: - User information  # [示例/Example] uid = \"7277477906\"
     * @summary 获取用户信息V2/Get user information V2
     * @param {string} uid 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApiInterface
     */
    fetchUserInfoV2ApiV1WeiboWebFetchUserInfoV2Get(uid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户信息V2 ### 参数: - uid: 用户id ### 返回: - 用户信息  # [English] ### Purpose: - Get user information V2 ### Parameters: - uid: User id ### Return: - User information  # [示例/Example] uid = \"7277477906\"
     * @summary 获取用户信息V2/Get user information V2
     * @param {string} uid 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApiInterface
     */
    fetchUserInfoV2ApiV1WeiboWebFetchUserInfoV2Get_7(uid: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取微博用户文章数据 ### 参数: - uid: 用户id - page: 页数 - feature: 特征 ### 返回: - 用户文章数据  # [English] ### Purpose: - Get Weibo user article data ### Parameters: - uid: User id - page: Page number - feature: Feature ### Return: - User article data  # [示例/Example] uid = \"7277477906\" page = 1 feature = 0
     * @summary 获取微博用户文章数据/Get Weibo user article data
     * @param {string} uid 用户id/User id
     * @param {number} [page] 页数/Page number
     * @param {number} [feature] 特征/Feature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApiInterface
     */
    fetchUserPostsApiV1WeiboWebFetchUserPostsGet(uid: string, page?: number, feature?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取微博用户文章数据 ### 参数: - uid: 用户id - page: 页数 - feature: 特征 ### 返回: - 用户文章数据  # [English] ### Purpose: - Get Weibo user article data ### Parameters: - uid: User id - page: Page number - feature: Feature ### Return: - User article data  # [示例/Example] uid = \"7277477906\" page = 1 feature = 0
     * @summary 获取微博用户文章数据/Get Weibo user article data
     * @param {string} uid 用户id/User id
     * @param {number} [page] 页数/Page number
     * @param {number} [feature] 特征/Feature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApiInterface
     */
    fetchUserPostsApiV1WeiboWebFetchUserPostsGet_8(uid: string, page?: number, feature?: number, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * WeiboWebAPIApi - object-oriented interface
 * @export
 * @class WeiboWebAPIApi
 * @extends {BaseAPI}
 */
export class WeiboWebAPIApi extends BaseAPI implements WeiboWebAPIApiInterface {
    /**
     * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - id: 作品id，从分享链接中获取  - https://weibo.com/5819018196/5092682368025584  - 作品id为：5092682368025584 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - id: Post id, obtained from the sharing link     - https://weibo.com/5819018196/5092682368025584     - The post id is: 5092682368025584 ### Return: - Post data  # [示例/Example] id = \"5092682368025584\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} id 作品id/Post id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApi
     */
    public fetchPostDetailApiV1WeiboWebFetchPostDetailGet(id: string, options?: any) {
        return WeiboWebAPIApiFp(this.configuration).fetchPostDetailApiV1WeiboWebFetchPostDetailGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据 ### 参数: - id: 作品id，从分享链接中获取  - https://weibo.com/5819018196/5092682368025584  - 作品id为：5092682368025584 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data ### Parameters: - id: Post id, obtained from the sharing link     - https://weibo.com/5819018196/5092682368025584     - The post id is: 5092682368025584 ### Return: - Post data  # [示例/Example] id = \"5092682368025584\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} id 作品id/Post id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApi
     */
    public fetchPostDetailApiV1WeiboWebFetchPostDetailGet_1(id: string, options?: any) {
        return WeiboWebAPIApiFp(this.configuration).fetchPostDetailApiV1WeiboWebFetchPostDetailGet_1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取搜索数据 ### 参数: - keyword: 关键词 - page: 页数 - search_type: 搜索类型     - **1**: 综合     - **61**: 实时     - **3**: 用户     - **60**: 热门     - **64**: 视频     - **63**: 图片     - **21**: 文章     - **38**: 话题     - **98**: 超话 ### 返回: - 搜索数据  # [English] ### Purpose: - Get search data ### Parameters: - keyword: Keyword - page: Page number - search_type: Search type     - **1**: Comprehensive     - **61**: Real-time     - **3**: User     - **60**: Hot     - **64**: Video     - **63**: Picture     - **21**: Article     - **38**: Topic     - **98**: Super topic ### Return: - Search data  # [示例/Example] keyword = \"游戏\" page = \"1\" search_type = \"1\"
     * @summary 获取搜索数据/Get search data
     * @param {string} keyword 关键词/Keyword
     * @param {string} [page] 页数/Page number
     * @param {string} [searchType] 搜索类型/Search type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApi
     */
    public fetchSearchDataApiV1WeiboWebFetchSearchDataGet(keyword: string, page?: string, searchType?: string, options?: any) {
        return WeiboWebAPIApiFp(this.configuration).fetchSearchDataApiV1WeiboWebFetchSearchDataGet(keyword, page, searchType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取搜索数据 ### 参数: - keyword: 关键词 - page: 页数 - search_type: 搜索类型     - **1**: 综合     - **61**: 实时     - **3**: 用户     - **60**: 热门     - **64**: 视频     - **63**: 图片     - **21**: 文章     - **38**: 话题     - **98**: 超话 ### 返回: - 搜索数据  # [English] ### Purpose: - Get search data ### Parameters: - keyword: Keyword - page: Page number - search_type: Search type     - **1**: Comprehensive     - **61**: Real-time     - **3**: User     - **60**: Hot     - **64**: Video     - **63**: Picture     - **21**: Article     - **38**: Topic     - **98**: Super topic ### Return: - Search data  # [示例/Example] keyword = \"游戏\" page = \"1\" search_type = \"1\"
     * @summary 获取搜索数据/Get search data
     * @param {string} keyword 关键词/Keyword
     * @param {string} [page] 页数/Page number
     * @param {string} [searchType] 搜索类型/Search type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApi
     */
    public fetchSearchDataApiV1WeiboWebFetchSearchDataGet_2(keyword: string, page?: string, searchType?: string, options?: any) {
        return WeiboWebAPIApiFp(this.configuration).fetchSearchDataApiV1WeiboWebFetchSearchDataGet_2(keyword, page, searchType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取短视频数据 ### 参数: - share_text: 视频分享链接 ### 返回: - 短视频数据  # [English] ### Purpose: - Get short video data ### Parameters: - share_text: Video sharing link ### Return: - Short video data  # [示例/Example] share_text = \"https://video.weibo.com/show?fid=1034:4986069612167172\"
     * @summary 获取短视频数据/Get short video data
     * @param {string} shareText 视频分享链接/Video sharing link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApi
     */
    public fetchShortVideoDataApiV1WeiboWebFetchShortVideoDataGet(shareText: string, options?: any) {
        return WeiboWebAPIApiFp(this.configuration).fetchShortVideoDataApiV1WeiboWebFetchShortVideoDataGet(shareText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取短视频数据 ### 参数: - share_text: 视频分享链接 ### 返回: - 短视频数据  # [English] ### Purpose: - Get short video data ### Parameters: - share_text: Video sharing link ### Return: - Short video data  # [示例/Example] share_text = \"https://video.weibo.com/show?fid=1034:4986069612167172\"
     * @summary 获取短视频数据/Get short video data
     * @param {string} shareText 视频分享链接/Video sharing link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApi
     */
    public fetchShortVideoDataApiV1WeiboWebFetchShortVideoDataGet_3(shareText: string, options?: any) {
        return WeiboWebAPIApiFp(this.configuration).fetchShortVideoDataApiV1WeiboWebFetchShortVideoDataGet_3(shareText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取话题详情 ### 参数: - topic_name: 话题名称 - page: 页数 ### 返回: - 话题详情  # [English] ### Purpose: - Get topic details ### Parameters: - topic_name: Topic name - page: Page number ### Return: - Topic details  # [示例/Example] topic_name = \"游戏\" page = \"\"
     * @summary 获取话题详情/Get topic details
     * @param {string} topicName 话题名称/Topic name
     * @param {string} [page] 页数/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApi
     */
    public fetchTopicDetailApiV1WeiboWebFetchTopicDetailGet(topicName: string, page?: string, options?: any) {
        return WeiboWebAPIApiFp(this.configuration).fetchTopicDetailApiV1WeiboWebFetchTopicDetailGet(topicName, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取话题详情 ### 参数: - topic_name: 话题名称 - page: 页数 ### 返回: - 话题详情  # [English] ### Purpose: - Get topic details ### Parameters: - topic_name: Topic name - page: Page number ### Return: - Topic details  # [示例/Example] topic_name = \"游戏\" page = \"\"
     * @summary 获取话题详情/Get topic details
     * @param {string} topicName 话题名称/Topic name
     * @param {string} [page] 页数/Page number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApi
     */
    public fetchTopicDetailApiV1WeiboWebFetchTopicDetailGet_4(topicName: string, page?: string, options?: any) {
        return WeiboWebAPIApiFp(this.configuration).fetchTopicDetailApiV1WeiboWebFetchTopicDetailGet_4(topicName, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取话题统计数据 ### 参数: - topic_name: 话题名称 ### 返回: - 话题统计数据  # [English] ### Purpose: - Get topic statistics ### Parameters: - topic_name: Topic name ### Return: - Topic statistics  # [示例/Example] topic_name = \"游戏\"
     * @summary 获取话题统计数据/Get topic statistics
     * @param {string} topicName 话题名称/Topic name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApi
     */
    public fetchTopicStatsApiV1WeiboWebFetchTopicStatsGet(topicName: string, options?: any) {
        return WeiboWebAPIApiFp(this.configuration).fetchTopicStatsApiV1WeiboWebFetchTopicStatsGet(topicName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取话题统计数据 ### 参数: - topic_name: 话题名称 ### 返回: - 话题统计数据  # [English] ### Purpose: - Get topic statistics ### Parameters: - topic_name: Topic name ### Return: - Topic statistics  # [示例/Example] topic_name = \"游戏\"
     * @summary 获取话题统计数据/Get topic statistics
     * @param {string} topicName 话题名称/Topic name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApi
     */
    public fetchTopicStatsApiV1WeiboWebFetchTopicStatsGet_5(topicName: string, options?: any) {
        return WeiboWebAPIApiFp(this.configuration).fetchTopicStatsApiV1WeiboWebFetchTopicStatsGet_5(topicName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户信息 ### 参数: - uid: 用户id ### 返回: - 用户信息  # [English] ### Purpose: - Get user information ### Parameters: - uid: User id ### Return: - User information  # [示例/Example] uid = \"7277477906\"
     * @summary 获取用户信息/Get user information
     * @param {string} uid 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApi
     */
    public fetchUserInfoApiV1WeiboWebFetchUserInfoGet(uid: string, options?: any) {
        return WeiboWebAPIApiFp(this.configuration).fetchUserInfoApiV1WeiboWebFetchUserInfoGet(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户信息 ### 参数: - uid: 用户id ### 返回: - 用户信息  # [English] ### Purpose: - Get user information ### Parameters: - uid: User id ### Return: - User information  # [示例/Example] uid = \"7277477906\"
     * @summary 获取用户信息/Get user information
     * @param {string} uid 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApi
     */
    public fetchUserInfoApiV1WeiboWebFetchUserInfoGet_6(uid: string, options?: any) {
        return WeiboWebAPIApiFp(this.configuration).fetchUserInfoApiV1WeiboWebFetchUserInfoGet_6(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户信息V2 ### 参数: - uid: 用户id ### 返回: - 用户信息  # [English] ### Purpose: - Get user information V2 ### Parameters: - uid: User id ### Return: - User information  # [示例/Example] uid = \"7277477906\"
     * @summary 获取用户信息V2/Get user information V2
     * @param {string} uid 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApi
     */
    public fetchUserInfoV2ApiV1WeiboWebFetchUserInfoV2Get(uid: string, options?: any) {
        return WeiboWebAPIApiFp(this.configuration).fetchUserInfoV2ApiV1WeiboWebFetchUserInfoV2Get(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户信息V2 ### 参数: - uid: 用户id ### 返回: - 用户信息  # [English] ### Purpose: - Get user information V2 ### Parameters: - uid: User id ### Return: - User information  # [示例/Example] uid = \"7277477906\"
     * @summary 获取用户信息V2/Get user information V2
     * @param {string} uid 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApi
     */
    public fetchUserInfoV2ApiV1WeiboWebFetchUserInfoV2Get_7(uid: string, options?: any) {
        return WeiboWebAPIApiFp(this.configuration).fetchUserInfoV2ApiV1WeiboWebFetchUserInfoV2Get_7(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取微博用户文章数据 ### 参数: - uid: 用户id - page: 页数 - feature: 特征 ### 返回: - 用户文章数据  # [English] ### Purpose: - Get Weibo user article data ### Parameters: - uid: User id - page: Page number - feature: Feature ### Return: - User article data  # [示例/Example] uid = \"7277477906\" page = 1 feature = 0
     * @summary 获取微博用户文章数据/Get Weibo user article data
     * @param {string} uid 用户id/User id
     * @param {number} [page] 页数/Page number
     * @param {number} [feature] 特征/Feature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApi
     */
    public fetchUserPostsApiV1WeiboWebFetchUserPostsGet(uid: string, page?: number, feature?: number, options?: any) {
        return WeiboWebAPIApiFp(this.configuration).fetchUserPostsApiV1WeiboWebFetchUserPostsGet(uid, page, feature, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取微博用户文章数据 ### 参数: - uid: 用户id - page: 页数 - feature: 特征 ### 返回: - 用户文章数据  # [English] ### Purpose: - Get Weibo user article data ### Parameters: - uid: User id - page: Page number - feature: Feature ### Return: - User article data  # [示例/Example] uid = \"7277477906\" page = 1 feature = 0
     * @summary 获取微博用户文章数据/Get Weibo user article data
     * @param {string} uid 用户id/User id
     * @param {number} [page] 页数/Page number
     * @param {number} [feature] 特征/Feature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WeiboWebAPIApi
     */
    public fetchUserPostsApiV1WeiboWebFetchUserPostsGet_8(uid: string, page?: number, feature?: number, options?: any) {
        return WeiboWebAPIApiFp(this.configuration).fetchUserPostsApiV1WeiboWebFetchUserPostsGet_8(uid, page, feature, options).then((request) => request(this.axios, this.basePath));
    }

}
