// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
/**
 * DouyinAppV1APIApi - axios parameter creator
 * @export
 */
export const DouyinAppV1APIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1DouyinAppV1FetchGeneralSearchResultGet: async (keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchGeneralSearchResultApiV1DouyinAppV1FetchGeneralSearchResultGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_general_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1DouyinAppV1FetchGeneralSearchResultGet_1: async (keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchGeneralSearchResultApiV1DouyinAppV1FetchGeneralSearchResultGet_1.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_general_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1DouyinAppV1FetchHashtagDetailGet: async (chId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chId' is not null or undefined
            if (chId === null || chId === undefined) {
                throw new RequiredError('chId','Required parameter chId was null or undefined when calling fetchHashtagDetailApiV1DouyinAppV1FetchHashtagDetailGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_hashtag_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (chId !== undefined) {
                localVarQueryParameter['ch_id'] = chId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1DouyinAppV1FetchHashtagDetailGet_2: async (chId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chId' is not null or undefined
            if (chId === null || chId === undefined) {
                throw new RequiredError('chId','Required parameter chId was null or undefined when calling fetchHashtagDetailApiV1DouyinAppV1FetchHashtagDetailGet_2.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_hashtag_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (chId !== undefined) {
                localVarQueryParameter['ch_id'] = chId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagSearchResultApiV1DouyinAppV1FetchHashtagSearchResultGet: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchHashtagSearchResultApiV1DouyinAppV1FetchHashtagSearchResultGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_hashtag_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagSearchResultApiV1DouyinAppV1FetchHashtagSearchResultGet_3: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchHashtagSearchResultApiV1DouyinAppV1FetchHashtagSearchResultGet_3.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_hashtag_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagVideoListApiV1DouyinAppV1FetchHashtagVideoListGet: async (chId: number, cursor?: number, sortType?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chId' is not null or undefined
            if (chId === null || chId === undefined) {
                throw new RequiredError('chId','Required parameter chId was null or undefined when calling fetchHashtagVideoListApiV1DouyinAppV1FetchHashtagVideoListGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_hashtag_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (chId !== undefined) {
                localVarQueryParameter['ch_id'] = chId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagVideoListApiV1DouyinAppV1FetchHashtagVideoListGet_4: async (chId: number, cursor?: number, sortType?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'chId' is not null or undefined
            if (chId === null || chId === undefined) {
                throw new RequiredError('chId','Required parameter chId was null or undefined when calling fetchHashtagVideoListApiV1DouyinAppV1FetchHashtagVideoListGet_4.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_hashtag_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (chId !== undefined) {
                localVarQueryParameter['ch_id'] = chId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
         * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
         * @param {number} categoryId 分类id/Category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchApiV1DouyinAppV1FetchBrandHotSearchListDetailGet: async (categoryId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling fetchHotBrandSearchApiV1DouyinAppV1FetchBrandHotSearchListDetailGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_brand_hot_search_list_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['category_id'] = categoryId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
         * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
         * @param {number} categoryId 分类id/Category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchApiV1DouyinAppV1FetchBrandHotSearchListDetailGet_5: async (categoryId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryId' is not null or undefined
            if (categoryId === null || categoryId === undefined) {
                throw new RequiredError('categoryId','Required parameter categoryId was null or undefined when calling fetchHotBrandSearchApiV1DouyinAppV1FetchBrandHotSearchListDetailGet_5.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_brand_hot_search_list_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (categoryId !== undefined) {
                localVarQueryParameter['category_id'] = categoryId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
         * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchCategoryApiV1DouyinAppV1FetchBrandHotSearchListGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v1/fetch_brand_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
         * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchCategoryApiV1DouyinAppV1FetchBrandHotSearchListGet_6: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v1/fetch_brand_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音热搜榜数据 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data ### Return: - Hot search list data  # [示例/Example] pass
         * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchListApiV1DouyinAppV1FetchHotSearchListGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v1/fetch_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音热搜榜数据 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data ### Return: - Hot search list data  # [示例/Example] pass
         * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchListApiV1DouyinAppV1FetchHotSearchListGet_7: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v1/fetch_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
         * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveHotSearchListApiV1DouyinAppV1FetchLiveHotSearchListGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v1/fetch_live_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
         * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveHotSearchListApiV1DouyinAppV1FetchLiveHotSearchListGet_8: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v1/fetch_live_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicDetailApiV1DouyinAppV1FetchMusicDetailGet: async (musicId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicDetailApiV1DouyinAppV1FetchMusicDetailGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_music_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicDetailApiV1DouyinAppV1FetchMusicDetailGet_9: async (musicId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicDetailApiV1DouyinAppV1FetchMusicDetailGet_9.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_music_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
         * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicHotSearchListApiV1DouyinAppV1FetchMusicHotSearchListGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v1/fetch_music_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
         * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicHotSearchListApiV1DouyinAppV1FetchMusicHotSearchListGet_10: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/douyin/app/v1/fetch_music_hot_search_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicSearchResultApiV1DouyinAppV1FetchMusicSearchResultGet: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchMusicSearchResultApiV1DouyinAppV1FetchMusicSearchResultGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_music_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicSearchResultApiV1DouyinAppV1FetchMusicSearchResultGet_11: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchMusicSearchResultApiV1DouyinAppV1FetchMusicSearchResultGet_11.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_music_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，第一次为0，第二次为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, the first time is 0, the second time is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicVideoListApiV1DouyinAppV1FetchMusicVideoListGet: async (musicId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicVideoListApiV1DouyinAppV1FetchMusicVideoListGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_music_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，第一次为0，第二次为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, the first time is 0, the second time is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicVideoListApiV1DouyinAppV1FetchMusicVideoListGet_12: async (musicId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchMusicVideoListApiV1DouyinAppV1FetchMusicVideoListGet_12.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_music_video_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，APP V1版本接口只能获取视频数据，无法获取图文数据，如果需要获取图文数据，请使用APP V2或者V3版本的接口。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, the APP V1 version interface can only get video data, and cannot get graphic data. If you need to get graphic data, please use the interface of APP V2 or V3 version. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinAppV1FetchOneVideoGet: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchOneVideoApiV1DouyinAppV1FetchOneVideoGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_one_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，APP V1版本接口只能获取视频数据，无法获取图文数据，如果需要获取图文数据，请使用APP V2或者V3版本的接口。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, the APP V1 version interface can only get video data, and cannot get graphic data. If you need to get graphic data, please use the interface of APP V2 or V3 version. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinAppV1FetchOneVideoGet_13: async (awemeId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchOneVideoApiV1DouyinAppV1FetchOneVideoGet_13.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_one_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1DouyinAppV1FetchOneVideoByShareUrlGet: async (shareUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareUrl' is not null or undefined
            if (shareUrl === null || shareUrl === undefined) {
                throw new RequiredError('shareUrl','Required parameter shareUrl was null or undefined when calling fetchOneVideoByShareUrlApiV1DouyinAppV1FetchOneVideoByShareUrlGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_one_video_by_share_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareUrl !== undefined) {
                localVarQueryParameter['share_url'] = shareUrl;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1DouyinAppV1FetchOneVideoByShareUrlGet_14: async (shareUrl: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareUrl' is not null or undefined
            if (shareUrl === null || shareUrl === undefined) {
                throw new RequiredError('shareUrl','Required parameter shareUrl was null or undefined when calling fetchOneVideoByShareUrlApiV1DouyinAppV1FetchOneVideoByShareUrlGet_14.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_one_video_by_share_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareUrl !== undefined) {
                localVarQueryParameter['share_url'] = shareUrl;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1DouyinAppV1FetchUserLikeVideosGet: async (secUserId: string, maxCursor?: number, counts?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserLikeVideosApiV1DouyinAppV1FetchUserLikeVideosGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_user_like_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (counts !== undefined) {
                localVarQueryParameter['counts'] = counts;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1DouyinAppV1FetchUserLikeVideosGet_15: async (secUserId: string, maxCursor?: number, counts?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserLikeVideosApiV1DouyinAppV1FetchUserLikeVideosGet_15.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_user_like_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (counts !== undefined) {
                localVarQueryParameter['counts'] = counts;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1DouyinAppV1FetchUserPostVideosGet: async (secUserId: string, maxCursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserPostVideosApiV1DouyinAppV1FetchUserPostVideosGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_user_post_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1DouyinAppV1FetchUserPostVideosGet_16: async (secUserId: string, maxCursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling fetchUserPostVideosApiV1DouyinAppV1FetchUserPostVideosGet_16.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_user_post_videos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }

            if (maxCursor !== undefined) {
                localVarQueryParameter['max_cursor'] = maxCursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的用户搜索结果/Get user search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1DouyinAppV1FetchUserSearchResultGet: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchUserSearchResultApiV1DouyinAppV1FetchUserSearchResultGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_user_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的用户搜索结果/Get user search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1DouyinAppV1FetchUserSearchResultGet_17: async (keyword: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchUserSearchResultApiV1DouyinAppV1FetchUserSearchResultGet_17.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_user_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1DouyinAppV1FetchVideoCommentsGet: async (awemeId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchVideoCommentsApiV1DouyinAppV1FetchVideoCommentsGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_video_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1DouyinAppV1FetchVideoCommentsGet_18: async (awemeId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'awemeId' is not null or undefined
            if (awemeId === null || awemeId === undefined) {
                throw new RequiredError('awemeId','Required parameter awemeId was null or undefined when calling fetchVideoCommentsApiV1DouyinAppV1FetchVideoCommentsGet_18.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_video_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (awemeId !== undefined) {
                localVarQueryParameter['aweme_id'] = awemeId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1DouyinAppV1FetchVideoCommentRepliesGet: async (itemId: string, commentId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchVideoCommentsReplyApiV1DouyinAppV1FetchVideoCommentRepliesGet.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling fetchVideoCommentsReplyApiV1DouyinAppV1FetchVideoCommentRepliesGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_video_comment_replies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1DouyinAppV1FetchVideoCommentRepliesGet_19: async (itemId: string, commentId: string, cursor?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchVideoCommentsReplyApiV1DouyinAppV1FetchVideoCommentRepliesGet_19.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling fetchVideoCommentsReplyApiV1DouyinAppV1FetchVideoCommentRepliesGet_19.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_video_comment_replies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1DouyinAppV1FetchVideoSearchResultGet: async (keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchVideoSearchResultApiV1DouyinAppV1FetchVideoSearchResultGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_video_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1DouyinAppV1FetchVideoSearchResultGet_20: async (keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchVideoSearchResultApiV1DouyinAppV1FetchVideoSearchResultGet_20.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/fetch_video_search_result`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (sortType !== undefined) {
                localVarQueryParameter['sort_type'] = sortType;
            }

            if (publishTime !== undefined) {
                localVarQueryParameter['publish_time'] = publishTime;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1DouyinAppV1HandlerUserProfileGet: async (secUserId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling handlerUserProfileApiV1DouyinAppV1HandlerUserProfileGet.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/handler_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1DouyinAppV1HandlerUserProfileGet_21: async (secUserId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'secUserId' is not null or undefined
            if (secUserId === null || secUserId === undefined) {
                throw new RequiredError('secUserId','Required parameter secUserId was null or undefined when calling handlerUserProfileApiV1DouyinAppV1HandlerUserProfileGet_21.');
            }
            const localVarPath = `/api/v1/douyin/app/v1/handler_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (secUserId !== undefined) {
                localVarQueryParameter['sec_user_id'] = secUserId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DouyinAppV1APIApi - functional programming interface
 * @export
 */
export const DouyinAppV1APIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGeneralSearchResultApiV1DouyinAppV1FetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchGeneralSearchResultApiV1DouyinAppV1FetchGeneralSearchResultGet(keyword, offset, count, sortType, publishTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchGeneralSearchResultApiV1DouyinAppV1FetchGeneralSearchResultGet_1(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchGeneralSearchResultApiV1DouyinAppV1FetchGeneralSearchResultGet_1(keyword, offset, count, sortType, publishTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagDetailApiV1DouyinAppV1FetchHashtagDetailGet(chId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchHashtagDetailApiV1DouyinAppV1FetchHashtagDetailGet(chId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagDetailApiV1DouyinAppV1FetchHashtagDetailGet_2(chId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchHashtagDetailApiV1DouyinAppV1FetchHashtagDetailGet_2(chId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagSearchResultApiV1DouyinAppV1FetchHashtagSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchHashtagSearchResultApiV1DouyinAppV1FetchHashtagSearchResultGet(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagSearchResultApiV1DouyinAppV1FetchHashtagSearchResultGet_3(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchHashtagSearchResultApiV1DouyinAppV1FetchHashtagSearchResultGet_3(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagVideoListApiV1DouyinAppV1FetchHashtagVideoListGet(chId: number, cursor?: number, sortType?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchHashtagVideoListApiV1DouyinAppV1FetchHashtagVideoListGet(chId, cursor, sortType, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHashtagVideoListApiV1DouyinAppV1FetchHashtagVideoListGet_4(chId: number, cursor?: number, sortType?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchHashtagVideoListApiV1DouyinAppV1FetchHashtagVideoListGet_4(chId, cursor, sortType, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
         * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
         * @param {number} categoryId 分类id/Category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotBrandSearchApiV1DouyinAppV1FetchBrandHotSearchListDetailGet(categoryId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchHotBrandSearchApiV1DouyinAppV1FetchBrandHotSearchListDetailGet(categoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
         * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
         * @param {number} categoryId 分类id/Category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotBrandSearchApiV1DouyinAppV1FetchBrandHotSearchListDetailGet_5(categoryId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchHotBrandSearchApiV1DouyinAppV1FetchBrandHotSearchListDetailGet_5(categoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
         * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotBrandSearchCategoryApiV1DouyinAppV1FetchBrandHotSearchListGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchHotBrandSearchCategoryApiV1DouyinAppV1FetchBrandHotSearchListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
         * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotBrandSearchCategoryApiV1DouyinAppV1FetchBrandHotSearchListGet_6(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchHotBrandSearchCategoryApiV1DouyinAppV1FetchBrandHotSearchListGet_6(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音热搜榜数据 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data ### Return: - Hot search list data  # [示例/Example] pass
         * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotSearchListApiV1DouyinAppV1FetchHotSearchListGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchHotSearchListApiV1DouyinAppV1FetchHotSearchListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音热搜榜数据 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data ### Return: - Hot search list data  # [示例/Example] pass
         * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotSearchListApiV1DouyinAppV1FetchHotSearchListGet_7(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchHotSearchListApiV1DouyinAppV1FetchHotSearchListGet_7(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
         * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveHotSearchListApiV1DouyinAppV1FetchLiveHotSearchListGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchLiveHotSearchListApiV1DouyinAppV1FetchLiveHotSearchListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
         * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveHotSearchListApiV1DouyinAppV1FetchLiveHotSearchListGet_8(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchLiveHotSearchListApiV1DouyinAppV1FetchLiveHotSearchListGet_8(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicDetailApiV1DouyinAppV1FetchMusicDetailGet(musicId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchMusicDetailApiV1DouyinAppV1FetchMusicDetailGet(musicId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicDetailApiV1DouyinAppV1FetchMusicDetailGet_9(musicId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchMusicDetailApiV1DouyinAppV1FetchMusicDetailGet_9(musicId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
         * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicHotSearchListApiV1DouyinAppV1FetchMusicHotSearchListGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchMusicHotSearchListApiV1DouyinAppV1FetchMusicHotSearchListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
         * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicHotSearchListApiV1DouyinAppV1FetchMusicHotSearchListGet_10(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchMusicHotSearchListApiV1DouyinAppV1FetchMusicHotSearchListGet_10(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicSearchResultApiV1DouyinAppV1FetchMusicSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchMusicSearchResultApiV1DouyinAppV1FetchMusicSearchResultGet(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicSearchResultApiV1DouyinAppV1FetchMusicSearchResultGet_11(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchMusicSearchResultApiV1DouyinAppV1FetchMusicSearchResultGet_11(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，第一次为0，第二次为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, the first time is 0, the second time is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicVideoListApiV1DouyinAppV1FetchMusicVideoListGet(musicId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchMusicVideoListApiV1DouyinAppV1FetchMusicVideoListGet(musicId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，第一次为0，第二次为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, the first time is 0, the second time is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicVideoListApiV1DouyinAppV1FetchMusicVideoListGet_12(musicId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchMusicVideoListApiV1DouyinAppV1FetchMusicVideoListGet_12(musicId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，APP V1版本接口只能获取视频数据，无法获取图文数据，如果需要获取图文数据，请使用APP V2或者V3版本的接口。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, the APP V1 version interface can only get video data, and cannot get graphic data. If you need to get graphic data, please use the interface of APP V2 or V3 version. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1DouyinAppV1FetchOneVideoGet(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchOneVideoApiV1DouyinAppV1FetchOneVideoGet(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，APP V1版本接口只能获取视频数据，无法获取图文数据，如果需要获取图文数据，请使用APP V2或者V3版本的接口。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, the APP V1 version interface can only get video data, and cannot get graphic data. If you need to get graphic data, please use the interface of APP V2 or V3 version. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1DouyinAppV1FetchOneVideoGet_13(awemeId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchOneVideoApiV1DouyinAppV1FetchOneVideoGet_13(awemeId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoByShareUrlApiV1DouyinAppV1FetchOneVideoByShareUrlGet(shareUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchOneVideoByShareUrlApiV1DouyinAppV1FetchOneVideoByShareUrlGet(shareUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoByShareUrlApiV1DouyinAppV1FetchOneVideoByShareUrlGet_14(shareUrl: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchOneVideoByShareUrlApiV1DouyinAppV1FetchOneVideoByShareUrlGet_14(shareUrl, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLikeVideosApiV1DouyinAppV1FetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchUserLikeVideosApiV1DouyinAppV1FetchUserLikeVideosGet(secUserId, maxCursor, counts, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLikeVideosApiV1DouyinAppV1FetchUserLikeVideosGet_15(secUserId: string, maxCursor?: number, counts?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchUserLikeVideosApiV1DouyinAppV1FetchUserLikeVideosGet_15(secUserId, maxCursor, counts, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostVideosApiV1DouyinAppV1FetchUserPostVideosGet(secUserId: string, maxCursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchUserPostVideosApiV1DouyinAppV1FetchUserPostVideosGet(secUserId, maxCursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostVideosApiV1DouyinAppV1FetchUserPostVideosGet_16(secUserId: string, maxCursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchUserPostVideosApiV1DouyinAppV1FetchUserPostVideosGet_16(secUserId, maxCursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的用户搜索结果/Get user search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserSearchResultApiV1DouyinAppV1FetchUserSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchUserSearchResultApiV1DouyinAppV1FetchUserSearchResultGet(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的用户搜索结果/Get user search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserSearchResultApiV1DouyinAppV1FetchUserSearchResultGet_17(keyword: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchUserSearchResultApiV1DouyinAppV1FetchUserSearchResultGet_17(keyword, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsApiV1DouyinAppV1FetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchVideoCommentsApiV1DouyinAppV1FetchVideoCommentsGet(awemeId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsApiV1DouyinAppV1FetchVideoCommentsGet_18(awemeId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchVideoCommentsApiV1DouyinAppV1FetchVideoCommentsGet_18(awemeId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsReplyApiV1DouyinAppV1FetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchVideoCommentsReplyApiV1DouyinAppV1FetchVideoCommentRepliesGet(itemId, commentId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentsReplyApiV1DouyinAppV1FetchVideoCommentRepliesGet_19(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchVideoCommentsReplyApiV1DouyinAppV1FetchVideoCommentRepliesGet_19(itemId, commentId, cursor, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoSearchResultApiV1DouyinAppV1FetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchVideoSearchResultApiV1DouyinAppV1FetchVideoSearchResultGet(keyword, offset, count, sortType, publishTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoSearchResultApiV1DouyinAppV1FetchVideoSearchResultGet_20(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).fetchVideoSearchResultApiV1DouyinAppV1FetchVideoSearchResultGet_20(keyword, offset, count, sortType, publishTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlerUserProfileApiV1DouyinAppV1HandlerUserProfileGet(secUserId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).handlerUserProfileApiV1DouyinAppV1HandlerUserProfileGet(secUserId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async handlerUserProfileApiV1DouyinAppV1HandlerUserProfileGet_21(secUserId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await DouyinAppV1APIApiAxiosParamCreator(configuration).handlerUserProfileApiV1DouyinAppV1HandlerUserProfileGet_21(secUserId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DouyinAppV1APIApi - factory interface
 * @export
 */
export const DouyinAppV1APIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1DouyinAppV1FetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchGeneralSearchResultApiV1DouyinAppV1FetchGeneralSearchResultGet(keyword, offset, count, sortType, publishTime, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchGeneralSearchResultApiV1DouyinAppV1FetchGeneralSearchResultGet_1(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchGeneralSearchResultApiV1DouyinAppV1FetchGeneralSearchResultGet_1(keyword, offset, count, sortType, publishTime, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1DouyinAppV1FetchHashtagDetailGet(chId: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchHashtagDetailApiV1DouyinAppV1FetchHashtagDetailGet(chId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
         * @summary 获取指定话题的详情数据/Get details of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagDetailApiV1DouyinAppV1FetchHashtagDetailGet_2(chId: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchHashtagDetailApiV1DouyinAppV1FetchHashtagDetailGet_2(chId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagSearchResultApiV1DouyinAppV1FetchHashtagSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchHashtagSearchResultApiV1DouyinAppV1FetchHashtagSearchResultGet(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagSearchResultApiV1DouyinAppV1FetchHashtagSearchResultGet_3(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchHashtagSearchResultApiV1DouyinAppV1FetchHashtagSearchResultGet_3(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagVideoListApiV1DouyinAppV1FetchHashtagVideoListGet(chId: number, cursor?: number, sortType?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchHashtagVideoListApiV1DouyinAppV1FetchHashtagVideoListGet(chId, cursor, sortType, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
         * @summary 获取指定话题的作品数据/Get video list of specified hashtag
         * @param {number} chId 话题id/Hashtag id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHashtagVideoListApiV1DouyinAppV1FetchHashtagVideoListGet_4(chId: number, cursor?: number, sortType?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchHashtagVideoListApiV1DouyinAppV1FetchHashtagVideoListGet_4(chId, cursor, sortType, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
         * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
         * @param {number} categoryId 分类id/Category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchApiV1DouyinAppV1FetchBrandHotSearchListDetailGet(categoryId: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchHotBrandSearchApiV1DouyinAppV1FetchBrandHotSearchListDetailGet(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
         * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
         * @param {number} categoryId 分类id/Category id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchApiV1DouyinAppV1FetchBrandHotSearchListDetailGet_5(categoryId: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchHotBrandSearchApiV1DouyinAppV1FetchBrandHotSearchListDetailGet_5(categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
         * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchCategoryApiV1DouyinAppV1FetchBrandHotSearchListGet(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchHotBrandSearchCategoryApiV1DouyinAppV1FetchBrandHotSearchListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
         * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBrandSearchCategoryApiV1DouyinAppV1FetchBrandHotSearchListGet_6(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchHotBrandSearchCategoryApiV1DouyinAppV1FetchBrandHotSearchListGet_6(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音热搜榜数据 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data ### Return: - Hot search list data  # [示例/Example] pass
         * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchListApiV1DouyinAppV1FetchHotSearchListGet(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchHotSearchListApiV1DouyinAppV1FetchHotSearchListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音热搜榜数据 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data ### Return: - Hot search list data  # [示例/Example] pass
         * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchListApiV1DouyinAppV1FetchHotSearchListGet_7(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchHotSearchListApiV1DouyinAppV1FetchHotSearchListGet_7(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
         * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveHotSearchListApiV1DouyinAppV1FetchLiveHotSearchListGet(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchLiveHotSearchListApiV1DouyinAppV1FetchLiveHotSearchListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
         * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveHotSearchListApiV1DouyinAppV1FetchLiveHotSearchListGet_8(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchLiveHotSearchListApiV1DouyinAppV1FetchLiveHotSearchListGet_8(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicDetailApiV1DouyinAppV1FetchMusicDetailGet(musicId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchMusicDetailApiV1DouyinAppV1FetchMusicDetailGet(musicId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
         * @summary 获取指定音乐的详情数据/Get details of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicDetailApiV1DouyinAppV1FetchMusicDetailGet_9(musicId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchMusicDetailApiV1DouyinAppV1FetchMusicDetailGet_9(musicId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
         * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicHotSearchListApiV1DouyinAppV1FetchMusicHotSearchListGet(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchMusicHotSearchListApiV1DouyinAppV1FetchMusicHotSearchListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
         * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicHotSearchListApiV1DouyinAppV1FetchMusicHotSearchListGet_10(options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchMusicHotSearchListApiV1DouyinAppV1FetchMusicHotSearchListGet_10(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicSearchResultApiV1DouyinAppV1FetchMusicSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchMusicSearchResultApiV1DouyinAppV1FetchMusicSearchResultGet(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
         * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicSearchResultApiV1DouyinAppV1FetchMusicSearchResultGet_11(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchMusicSearchResultApiV1DouyinAppV1FetchMusicSearchResultGet_11(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，第一次为0，第二次为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, the first time is 0, the second time is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicVideoListApiV1DouyinAppV1FetchMusicVideoListGet(musicId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchMusicVideoListApiV1DouyinAppV1FetchMusicVideoListGet(musicId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，第一次为0，第二次为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, the first time is 0, the second time is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
         * @summary 获取指定音乐的视频列表数据/Get video list of specified music
         * @param {string} musicId 音乐id/Music id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicVideoListApiV1DouyinAppV1FetchMusicVideoListGet_12(musicId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchMusicVideoListApiV1DouyinAppV1FetchMusicVideoListGet_12(musicId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，APP V1版本接口只能获取视频数据，无法获取图文数据，如果需要获取图文数据，请使用APP V2或者V3版本的接口。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, the APP V1 version interface can only get video data, and cannot get graphic data. If you need to get graphic data, please use the interface of APP V2 or V3 version. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinAppV1FetchOneVideoGet(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchOneVideoApiV1DouyinAppV1FetchOneVideoGet(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，APP V1版本接口只能获取视频数据，无法获取图文数据，如果需要获取图文数据，请使用APP V2或者V3版本的接口。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, the APP V1 version interface can only get video data, and cannot get graphic data. If you need to get graphic data, please use the interface of APP V2 or V3 version. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} awemeId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1DouyinAppV1FetchOneVideoGet_13(awemeId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchOneVideoApiV1DouyinAppV1FetchOneVideoGet_13(awemeId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1DouyinAppV1FetchOneVideoByShareUrlGet(shareUrl: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchOneVideoByShareUrlApiV1DouyinAppV1FetchOneVideoByShareUrlGet(shareUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
         * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
         * @param {string} shareUrl 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareUrlApiV1DouyinAppV1FetchOneVideoByShareUrlGet_14(shareUrl: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchOneVideoByShareUrlApiV1DouyinAppV1FetchOneVideoByShareUrlGet_14(shareUrl, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1DouyinAppV1FetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchUserLikeVideosApiV1DouyinAppV1FetchUserLikeVideosGet(secUserId, maxCursor, counts, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
         * @summary 获取用户喜欢作品数据/Get user like video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [counts] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLikeVideosApiV1DouyinAppV1FetchUserLikeVideosGet_15(secUserId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchUserLikeVideosApiV1DouyinAppV1FetchUserLikeVideosGet_15(secUserId, maxCursor, counts, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1DouyinAppV1FetchUserPostVideosGet(secUserId: string, maxCursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchUserPostVideosApiV1DouyinAppV1FetchUserPostVideosGet(secUserId, maxCursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
         * @summary 获取用户主页作品数据/Get user homepage video data
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {number} [maxCursor] 最大游标/Maximum cursor
         * @param {number} [count] 每页数量/Number per page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostVideosApiV1DouyinAppV1FetchUserPostVideosGet_16(secUserId: string, maxCursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchUserPostVideosApiV1DouyinAppV1FetchUserPostVideosGet_16(secUserId, maxCursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的用户搜索结果/Get user search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1DouyinAppV1FetchUserSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchUserSearchResultApiV1DouyinAppV1FetchUserSearchResultGet(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
         * @summary 获取指定关键词的用户搜索结果/Get user search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserSearchResultApiV1DouyinAppV1FetchUserSearchResultGet_17(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchUserSearchResultApiV1DouyinAppV1FetchUserSearchResultGet_17(keyword, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1DouyinAppV1FetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchVideoCommentsApiV1DouyinAppV1FetchVideoCommentsGet(awemeId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
         * @summary 获取单个视频评论数据/Get single video comments data
         * @param {string} awemeId 作品id/Video id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsApiV1DouyinAppV1FetchVideoCommentsGet_18(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchVideoCommentsApiV1DouyinAppV1FetchVideoCommentsGet_18(awemeId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1DouyinAppV1FetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchVideoCommentsReplyApiV1DouyinAppV1FetchVideoCommentRepliesGet(itemId, commentId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
         * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
         * @param {string} itemId 作品id/Video id
         * @param {string} commentId 评论id/Comment id
         * @param {number} [cursor] 游标/Cursor
         * @param {number} [count] 数量/Number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentsReplyApiV1DouyinAppV1FetchVideoCommentRepliesGet_19(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchVideoCommentsReplyApiV1DouyinAppV1FetchVideoCommentRepliesGet_19(itemId, commentId, cursor, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1DouyinAppV1FetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchVideoSearchResultApiV1DouyinAppV1FetchVideoSearchResultGet(keyword, offset, count, sortType, publishTime, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
         * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Number
         * @param {number} [sortType] 排序类型/Sort type
         * @param {number} [publishTime] 发布时间/Publish time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoSearchResultApiV1DouyinAppV1FetchVideoSearchResultGet_20(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).fetchVideoSearchResultApiV1DouyinAppV1FetchVideoSearchResultGet_20(keyword, offset, count, sortType, publishTime, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1DouyinAppV1HandlerUserProfileGet(secUserId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).handlerUserProfileApiV1DouyinAppV1HandlerUserProfileGet(secUserId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
         * @summary 获取指定用户的信息/Get information of specified user
         * @param {string} secUserId 用户sec_user_id/User sec_user_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        handlerUserProfileApiV1DouyinAppV1HandlerUserProfileGet_21(secUserId: string, options?: any): AxiosPromise<ResponseModel> {
            return DouyinAppV1APIApiFp(configuration).handlerUserProfileApiV1DouyinAppV1HandlerUserProfileGet_21(secUserId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DouyinAppV1APIApi - interface
 * @export
 * @interface DouyinAppV1APIApi
 */
export interface DouyinAppV1APIApiInterface {
    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchGeneralSearchResultApiV1DouyinAppV1FetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchGeneralSearchResultApiV1DouyinAppV1FetchGeneralSearchResultGet_1(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
     * @summary 获取指定话题的详情数据/Get details of specified hashtag
     * @param {number} chId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchHashtagDetailApiV1DouyinAppV1FetchHashtagDetailGet(chId: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
     * @summary 获取指定话题的详情数据/Get details of specified hashtag
     * @param {number} chId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchHashtagDetailApiV1DouyinAppV1FetchHashtagDetailGet_2(chId: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchHashtagSearchResultApiV1DouyinAppV1FetchHashtagSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchHashtagSearchResultApiV1DouyinAppV1FetchHashtagSearchResultGet_3(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
     * @summary 获取指定话题的作品数据/Get video list of specified hashtag
     * @param {number} chId 话题id/Hashtag id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchHashtagVideoListApiV1DouyinAppV1FetchHashtagVideoListGet(chId: number, cursor?: number, sortType?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
     * @summary 获取指定话题的作品数据/Get video list of specified hashtag
     * @param {number} chId 话题id/Hashtag id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchHashtagVideoListApiV1DouyinAppV1FetchHashtagVideoListGet_4(chId: number, cursor?: number, sortType?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
     * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
     * @param {number} categoryId 分类id/Category id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchHotBrandSearchApiV1DouyinAppV1FetchBrandHotSearchListDetailGet(categoryId: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
     * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
     * @param {number} categoryId 分类id/Category id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchHotBrandSearchApiV1DouyinAppV1FetchBrandHotSearchListDetailGet_5(categoryId: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
     * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchHotBrandSearchCategoryApiV1DouyinAppV1FetchBrandHotSearchListGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
     * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchHotBrandSearchCategoryApiV1DouyinAppV1FetchBrandHotSearchListGet_6(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音热搜榜数据 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data ### Return: - Hot search list data  # [示例/Example] pass
     * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchHotSearchListApiV1DouyinAppV1FetchHotSearchListGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音热搜榜数据 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data ### Return: - Hot search list data  # [示例/Example] pass
     * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchHotSearchListApiV1DouyinAppV1FetchHotSearchListGet_7(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
     * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchLiveHotSearchListApiV1DouyinAppV1FetchLiveHotSearchListGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
     * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchLiveHotSearchListApiV1DouyinAppV1FetchLiveHotSearchListGet_8(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
     * @summary 获取指定音乐的详情数据/Get details of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchMusicDetailApiV1DouyinAppV1FetchMusicDetailGet(musicId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
     * @summary 获取指定音乐的详情数据/Get details of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchMusicDetailApiV1DouyinAppV1FetchMusicDetailGet_9(musicId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
     * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchMusicHotSearchListApiV1DouyinAppV1FetchMusicHotSearchListGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
     * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchMusicHotSearchListApiV1DouyinAppV1FetchMusicHotSearchListGet_10(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchMusicSearchResultApiV1DouyinAppV1FetchMusicSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchMusicSearchResultApiV1DouyinAppV1FetchMusicSearchResultGet_11(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，第一次为0，第二次为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, the first time is 0, the second time is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
     * @summary 获取指定音乐的视频列表数据/Get video list of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchMusicVideoListApiV1DouyinAppV1FetchMusicVideoListGet(musicId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，第一次为0，第二次为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, the first time is 0, the second time is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
     * @summary 获取指定音乐的视频列表数据/Get video list of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchMusicVideoListApiV1DouyinAppV1FetchMusicVideoListGet_12(musicId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据，APP V1版本接口只能获取视频数据，无法获取图文数据，如果需要获取图文数据，请使用APP V2或者V3版本的接口。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, the APP V1 version interface can only get video data, and cannot get graphic data. If you need to get graphic data, please use the interface of APP V2 or V3 version. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchOneVideoApiV1DouyinAppV1FetchOneVideoGet(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据，APP V1版本接口只能获取视频数据，无法获取图文数据，如果需要获取图文数据，请使用APP V2或者V3版本的接口。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, the APP V1 version interface can only get video data, and cannot get graphic data. If you need to get graphic data, please use the interface of APP V2 or V3 version. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchOneVideoApiV1DouyinAppV1FetchOneVideoGet_13(awemeId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchOneVideoByShareUrlApiV1DouyinAppV1FetchOneVideoByShareUrlGet(shareUrl: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchOneVideoByShareUrlApiV1DouyinAppV1FetchOneVideoByShareUrlGet_14(shareUrl: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchUserLikeVideosApiV1DouyinAppV1FetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchUserLikeVideosApiV1DouyinAppV1FetchUserLikeVideosGet_15(secUserId: string, maxCursor?: number, counts?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchUserPostVideosApiV1DouyinAppV1FetchUserPostVideosGet(secUserId: string, maxCursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchUserPostVideosApiV1DouyinAppV1FetchUserPostVideosGet_16(secUserId: string, maxCursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
     * @summary 获取指定关键词的用户搜索结果/Get user search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchUserSearchResultApiV1DouyinAppV1FetchUserSearchResultGet(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
     * @summary 获取指定关键词的用户搜索结果/Get user search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchUserSearchResultApiV1DouyinAppV1FetchUserSearchResultGet_17(keyword: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchVideoCommentsApiV1DouyinAppV1FetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchVideoCommentsApiV1DouyinAppV1FetchVideoCommentsGet_18(awemeId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchVideoCommentsReplyApiV1DouyinAppV1FetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchVideoCommentsReplyApiV1DouyinAppV1FetchVideoCommentRepliesGet_19(itemId: string, commentId: string, cursor?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchVideoSearchResultApiV1DouyinAppV1FetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    fetchVideoSearchResultApiV1DouyinAppV1FetchVideoSearchResultGet_20(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    handlerUserProfileApiV1DouyinAppV1HandlerUserProfileGet(secUserId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApiInterface
     */
    handlerUserProfileApiV1DouyinAppV1HandlerUserProfileGet_21(secUserId: string, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * DouyinAppV1APIApi - object-oriented interface
 * @export
 * @class DouyinAppV1APIApi
 * @extends {BaseAPI}
 */
export class DouyinAppV1APIApi extends BaseAPI implements DouyinAppV1APIApiInterface {
    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchGeneralSearchResultApiV1DouyinAppV1FetchGeneralSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchGeneralSearchResultApiV1DouyinAppV1FetchGeneralSearchResultGet(keyword, offset, count, sortType, publishTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的综合搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 综合搜索结果  # [English] ### Purpose: - Get comprehensive search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Comprehensive search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的综合搜索结果/Get comprehensive search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchGeneralSearchResultApiV1DouyinAppV1FetchGeneralSearchResultGet_1(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchGeneralSearchResultApiV1DouyinAppV1FetchGeneralSearchResultGet_1(keyword, offset, count, sortType, publishTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
     * @summary 获取指定话题的详情数据/Get details of specified hashtag
     * @param {number} chId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchHashtagDetailApiV1DouyinAppV1FetchHashtagDetailGet(chId: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchHashtagDetailApiV1DouyinAppV1FetchHashtagDetailGet(chId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定话题的详情数据 ### 参数: - ch_id: 话题id ### 返回: - 话题详情数据  # [English] ### Purpose: - Get details of specified hashtag ### Parameters: - ch_id: Hashtag id ### Return: - Hashtag details data  # [示例/Example] ch_id = 1575791821492238
     * @summary 获取指定话题的详情数据/Get details of specified hashtag
     * @param {number} chId 话题id/Hashtag id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchHashtagDetailApiV1DouyinAppV1FetchHashtagDetailGet_2(chId: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchHashtagDetailApiV1DouyinAppV1FetchHashtagDetailGet_2(chId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchHashtagSearchResultApiV1DouyinAppV1FetchHashtagSearchResultGet(keyword: string, offset?: number, count?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchHashtagSearchResultApiV1DouyinAppV1FetchHashtagSearchResultGet(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的话题搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题搜索结果  # [English] ### Purpose: - Get hashtag search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的话题搜索结果/Get hashtag search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchHashtagSearchResultApiV1DouyinAppV1FetchHashtagSearchResultGet_3(keyword: string, offset?: number, count?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchHashtagSearchResultApiV1DouyinAppV1FetchHashtagSearchResultGet_3(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
     * @summary 获取指定话题的作品数据/Get video list of specified hashtag
     * @param {number} chId 话题id/Hashtag id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchHashtagVideoListApiV1DouyinAppV1FetchHashtagVideoListGet(chId: number, cursor?: number, sortType?: number, count?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchHashtagVideoListApiV1DouyinAppV1FetchHashtagVideoListGet(chId, cursor, sortType, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定话题的作品数据 ### 参数: - ch_id: 话题id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 话题作品数据  # [English] ### Purpose: - Get video list of specified hashtag ### Parameters: - ch_id: Hashtag id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Hashtag video list data  # [示例/Example] ch_id = 1575791821492238 cursor = 0 sort_type = 0 count = 10
     * @summary 获取指定话题的作品数据/Get video list of specified hashtag
     * @param {number} chId 话题id/Hashtag id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchHashtagVideoListApiV1DouyinAppV1FetchHashtagVideoListGet_4(chId: number, cursor?: number, sortType?: number, count?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchHashtagVideoListApiV1DouyinAppV1FetchHashtagVideoListGet_4(chId, cursor, sortType, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
     * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
     * @param {number} categoryId 分类id/Category id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchHotBrandSearchApiV1DouyinAppV1FetchBrandHotSearchListDetailGet(categoryId: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchHotBrandSearchApiV1DouyinAppV1FetchBrandHotSearchListDetailGet(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜具体分类数据 ### 参数: - category_id: 分类id ### 返回: - 品牌热搜榜具体分类数据  # [English] ### Purpose: - Get Douyin brand hot search list detail data ### Parameters: - category_id: Category id ### Return: - Hot brand search list detail data  # [示例/Example] category_id = 10
     * @summary 获取抖音品牌热榜具体分类数据/Get Douyin brand hot search list detail data
     * @param {number} categoryId 分类id/Category id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchHotBrandSearchApiV1DouyinAppV1FetchBrandHotSearchListDetailGet_5(categoryId: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchHotBrandSearchApiV1DouyinAppV1FetchBrandHotSearchListDetailGet_5(categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
     * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchHotBrandSearchCategoryApiV1DouyinAppV1FetchBrandHotSearchListGet(options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchHotBrandSearchCategoryApiV1DouyinAppV1FetchBrandHotSearchListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音品牌热榜分类数据 ### 返回: - 品牌热搜榜分类数据  # [English] ### Purpose: - Get Douyin brand hot search category data ### Return: - Hot brand search category data  # [示例/Example] pass
     * @summary 获取抖音品牌热榜分类数据/Get Douyin brand hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchHotBrandSearchCategoryApiV1DouyinAppV1FetchBrandHotSearchListGet_6(options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchHotBrandSearchCategoryApiV1DouyinAppV1FetchBrandHotSearchListGet_6(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音热搜榜数据 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data ### Return: - Hot search list data  # [示例/Example] pass
     * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchHotSearchListApiV1DouyinAppV1FetchHotSearchListGet(options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchHotSearchListApiV1DouyinAppV1FetchHotSearchListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音热搜榜数据 ### 返回: - 热搜榜数据  # [English] ### Purpose: - Get Douyin hot search list data ### Return: - Hot search list data  # [示例/Example] pass
     * @summary 获取抖音热搜榜数据/Get Douyin hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchHotSearchListApiV1DouyinAppV1FetchHotSearchListGet_7(options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchHotSearchListApiV1DouyinAppV1FetchHotSearchListGet_7(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
     * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchLiveHotSearchListApiV1DouyinAppV1FetchLiveHotSearchListGet(options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchLiveHotSearchListApiV1DouyinAppV1FetchLiveHotSearchListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音直播热搜榜数据 ### 返回: - 直播热搜榜数据  # [English] ### Purpose: - Get Douyin live hot search list data ### Return: - Live hot search list data  # [示例/Example] pass
     * @summary 获取抖音直播热搜榜数据/Get Douyin live hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchLiveHotSearchListApiV1DouyinAppV1FetchLiveHotSearchListGet_8(options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchLiveHotSearchListApiV1DouyinAppV1FetchLiveHotSearchListGet_8(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
     * @summary 获取指定音乐的详情数据/Get details of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchMusicDetailApiV1DouyinAppV1FetchMusicDetailGet(musicId: string, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchMusicDetailApiV1DouyinAppV1FetchMusicDetailGet(musicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定音乐的详情数据 ### 参数: - music_id: 音乐id ### 返回: - 音乐详情数据  # [English] ### Purpose: - Get details of specified music ### Parameters: - music_id: Music id ### Return: - Music details data  # [示例/Example] music_id = \"7136850194742315016\"
     * @summary 获取指定音乐的详情数据/Get details of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchMusicDetailApiV1DouyinAppV1FetchMusicDetailGet_9(musicId: string, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchMusicDetailApiV1DouyinAppV1FetchMusicDetailGet_9(musicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
     * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchMusicHotSearchListApiV1DouyinAppV1FetchMusicHotSearchListGet(options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchMusicHotSearchListApiV1DouyinAppV1FetchMusicHotSearchListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取抖音音乐热榜数据 ### 返回: - 音乐热搜榜数据  # [English] ### Purpose: - Get Douyin music hot search list data ### Return: - Music hot search list data  # [示例/Example] pass
     * @summary 获取抖音音乐热榜数据/Get Douyin music hot search list data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchMusicHotSearchListApiV1DouyinAppV1FetchMusicHotSearchListGet_10(options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchMusicHotSearchListApiV1DouyinAppV1FetchMusicHotSearchListGet_10(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchMusicSearchResultApiV1DouyinAppV1FetchMusicSearchResultGet(keyword: string, offset?: number, count?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchMusicSearchResultApiV1DouyinAppV1FetchMusicSearchResultGet(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的音乐搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐搜索结果  # [English] ### Purpose: - Get music search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20
     * @summary 获取指定关键词的音乐搜索结果/Get music search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchMusicSearchResultApiV1DouyinAppV1FetchMusicSearchResultGet_11(keyword: string, offset?: number, count?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchMusicSearchResultApiV1DouyinAppV1FetchMusicSearchResultGet_11(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，第一次为0，第二次为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, the first time is 0, the second time is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
     * @summary 获取指定音乐的视频列表数据/Get video list of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchMusicVideoListApiV1DouyinAppV1FetchMusicVideoListGet(musicId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchMusicVideoListApiV1DouyinAppV1FetchMusicVideoListGet(musicId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定音乐的视频列表数据 ### 参数: - music_id: 音乐id - cursor: 游标，第一次为0，第二次为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 音乐视频列表数据  # [English] ### Purpose: - Get video list of specified music ### Parameters: - music_id: Music id - cursor: Cursor, the first time is 0, the second time is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Music video list data  # [示例/Example] music_id = \"7136850194742315016\" cursor = 0 count = 10
     * @summary 获取指定音乐的视频列表数据/Get video list of specified music
     * @param {string} musicId 音乐id/Music id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchMusicVideoListApiV1DouyinAppV1FetchMusicVideoListGet_12(musicId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchMusicVideoListApiV1DouyinAppV1FetchMusicVideoListGet_12(musicId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据，APP V1版本接口只能获取视频数据，无法获取图文数据，如果需要获取图文数据，请使用APP V2或者V3版本的接口。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, the APP V1 version interface can only get video data, and cannot get graphic data. If you need to get graphic data, please use the interface of APP V2 or V3 version. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchOneVideoApiV1DouyinAppV1FetchOneVideoGet(awemeId: string, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchOneVideoApiV1DouyinAppV1FetchOneVideoGet(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据，APP V1版本接口只能获取视频数据，无法获取图文数据，如果需要获取图文数据，请使用APP V2或者V3版本的接口。 ### 参数: - aweme_id: 作品id ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data, the APP V1 version interface can only get video data, and cannot get graphic data. If you need to get graphic data, please use the interface of APP V2 or V3 version. ### Parameters: - aweme_id: Video id ### Return: - Video data  # [示例/Example] aweme_id = \"7372484719365098803\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} awemeId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchOneVideoApiV1DouyinAppV1FetchOneVideoGet_13(awemeId: string, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchOneVideoApiV1DouyinAppV1FetchOneVideoGet_13(awemeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchOneVideoByShareUrlApiV1DouyinAppV1FetchOneVideoByShareUrlGet(shareUrl: string, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchOneVideoByShareUrlApiV1DouyinAppV1FetchOneVideoByShareUrlGet(shareUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据分享链接获取单个作品数据 ### 参数: - share_url: 分享链接 ### 返回: - 作品数据  # [English] ### Purpose: - Get single video data by sharing link ### Parameters: - share_url: Share link ### Return: - Video data  # [示例/Example] share_url = \"https://v.douyin.com/e3x2fjE/\"
     * @summary 根据分享链接获取单个作品数据/Get single video data by sharing link
     * @param {string} shareUrl 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchOneVideoByShareUrlApiV1DouyinAppV1FetchOneVideoByShareUrlGet_14(shareUrl: string, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchOneVideoByShareUrlApiV1DouyinAppV1FetchOneVideoByShareUrlGet_14(shareUrl, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchUserLikeVideosApiV1DouyinAppV1FetchUserLikeVideosGet(secUserId: string, maxCursor?: number, counts?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchUserLikeVideosApiV1DouyinAppV1FetchUserLikeVideosGet(secUserId, maxCursor, counts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户喜欢作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user like video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\" max_cursor = 0 counts = 20
     * @summary 获取用户喜欢作品数据/Get user like video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [counts] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchUserLikeVideosApiV1DouyinAppV1FetchUserLikeVideosGet_15(secUserId: string, maxCursor?: number, counts?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchUserLikeVideosApiV1DouyinAppV1FetchUserLikeVideosGet_15(secUserId, maxCursor, counts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchUserPostVideosApiV1DouyinAppV1FetchUserPostVideosGet(secUserId: string, maxCursor?: number, count?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchUserPostVideosApiV1DouyinAppV1FetchUserPostVideosGet(secUserId, maxCursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户主页作品数据 ### 参数: - sec_user_id: 用户sec_user_id - max_cursor: 最大游标，用于翻页，第一页为0，第二页为第一次响应中的max_cursor值。 - count: 最大数量 ### 返回: - 用户作品数据  # [English] ### Purpose: - Get user homepage video data ### Parameters: - sec_user_id: User sec_user_id - max_cursor: Maximum cursor, used for paging, the first page is 0, the second page is the max_cursor value in the first response. - count: Maximum count number ### Return: - User video data  # [示例/Example] sec_user_id = \"MS4wLjABAAAANXSltcLCzDGmdNFI2Q_QixVTr67NiYzjKOIP5s03CAE\" max_cursor = 0 counts = 20
     * @summary 获取用户主页作品数据/Get user homepage video data
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {number} [maxCursor] 最大游标/Maximum cursor
     * @param {number} [count] 每页数量/Number per page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchUserPostVideosApiV1DouyinAppV1FetchUserPostVideosGet_16(secUserId: string, maxCursor?: number, count?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchUserPostVideosApiV1DouyinAppV1FetchUserPostVideosGet_16(secUserId, maxCursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
     * @summary 获取指定关键词的用户搜索结果/Get user search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchUserSearchResultApiV1DouyinAppV1FetchUserSearchResultGet(keyword: string, offset?: number, count?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchUserSearchResultApiV1DouyinAppV1FetchUserSearchResultGet(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的用户搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 用户搜索结果  # [English] ### Purpose: - Get user search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. ### Return: - User search results  # [示例/Example] keyword = \"动漫\" offset = 0 count = 20
     * @summary 获取指定关键词的用户搜索结果/Get user search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchUserSearchResultApiV1DouyinAppV1FetchUserSearchResultGet_17(keyword: string, offset?: number, count?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchUserSearchResultApiV1DouyinAppV1FetchUserSearchResultGet_17(keyword, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchVideoCommentsApiV1DouyinAppV1FetchVideoCommentsGet(awemeId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchVideoCommentsApiV1DouyinAppV1FetchVideoCommentsGet(awemeId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个视频评论数据 ### 参数: - aweme_id: 作品id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论数据  # [English] ### Purpose: - Get single video comments data ### Parameters: - aweme_id: Video id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comments data  # [示例/Example] aweme_id = \"7372484719365098803\" cursor = 0 count = 20
     * @summary 获取单个视频评论数据/Get single video comments data
     * @param {string} awemeId 作品id/Video id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchVideoCommentsApiV1DouyinAppV1FetchVideoCommentsGet_18(awemeId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchVideoCommentsApiV1DouyinAppV1FetchVideoCommentsGet_18(awemeId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchVideoCommentsReplyApiV1DouyinAppV1FetchVideoCommentRepliesGet(itemId: string, commentId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchVideoCommentsReplyApiV1DouyinAppV1FetchVideoCommentRepliesGet(itemId, commentId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定视频的评论回复数据 ### 参数: - item_id: 作品id - comment_id: 评论id - cursor: 游标，用于翻页，第一页为0，第二页为第一次响应中的cursor值。 - count: 数量，请保持默认，否则会出现BUG。 ### 返回: - 评论回复数据  # [English] ### Purpose: - Get comment replies data of specified video ### Parameters: - item_id: Video id - comment_id: Comment id - cursor: Cursor, used for paging, the first page is 0, the second page is the cursor value in the first response. - count: Number Please keep the default, otherwise there will be BUG. ### Return: - Comment replies data  # [示例/Example] aweme_id = \"7354666303006723354\" comment_id = \"7354669356632638218\" cursor = 0 count = 20
     * @summary 获取指定视频的评论回复数据/Get comment replies data of specified video
     * @param {string} itemId 作品id/Video id
     * @param {string} commentId 评论id/Comment id
     * @param {number} [cursor] 游标/Cursor
     * @param {number} [count] 数量/Number
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchVideoCommentsReplyApiV1DouyinAppV1FetchVideoCommentRepliesGet_19(itemId: string, commentId: string, cursor?: number, count?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchVideoCommentsReplyApiV1DouyinAppV1FetchVideoCommentRepliesGet_19(itemId, commentId, cursor, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchVideoSearchResultApiV1DouyinAppV1FetchVideoSearchResultGet(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchVideoSearchResultApiV1DouyinAppV1FetchVideoSearchResultGet(keyword, offset, count, sortType, publishTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定关键词的视频搜索结果 ### 参数: - keyword: 关键词 - offset: 偏移量 - count: 数量，请保持默认，否则会出现BUG。 - sort_type: 0:综合排序 1:最多点赞 2:最新发布 - publish_time: 0:不限 1:最近一天 7:最近一周 183:最近半年 ### 返回: - 视频搜索结果  # [English] ### Purpose: - Get video search results of specified keywords ### Parameters: - keyword: Keyword - offset: Offset - count: Number Please keep the default, otherwise there will be BUG. - sort_type: 0: Comprehensive sorting 1: Most likes 2: Latest release - publish_time: 0: Unlimited 1: Last day 7: Last week 183: Last half year ### Return: - Video search results  # [示例/Example] keyword = \"中华娘\" offset = 0 count = 20 sort_type = 0 publish_time = 0
     * @summary 获取指定关键词的视频搜索结果/Get video search results of specified keywords
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Number
     * @param {number} [sortType] 排序类型/Sort type
     * @param {number} [publishTime] 发布时间/Publish time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public fetchVideoSearchResultApiV1DouyinAppV1FetchVideoSearchResultGet_20(keyword: string, offset?: number, count?: number, sortType?: number, publishTime?: number, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).fetchVideoSearchResultApiV1DouyinAppV1FetchVideoSearchResultGet_20(keyword, offset, count, sortType, publishTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public handlerUserProfileApiV1DouyinAppV1HandlerUserProfileGet(secUserId: string, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).handlerUserProfileApiV1DouyinAppV1HandlerUserProfileGet(secUserId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取指定用户的信息 ### 参数: - sec_user_id: 用户sec_user_id ### 返回: - 用户信息  # [English] ### Purpose: - Get information of specified user ### Parameters: - sec_user_id: User sec_user_id ### Return: - User information  # [示例/Example] sec_user_id = \"MS4wLjABAAAAW9FWcqS7RdQAWPd2AA5fL_ilmqsIFUCQ_Iym6Yh9_cUa6ZRqVLjVQSUjlHrfXY1Y\"
     * @summary 获取指定用户的信息/Get information of specified user
     * @param {string} secUserId 用户sec_user_id/User sec_user_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DouyinAppV1APIApi
     */
    public handlerUserProfileApiV1DouyinAppV1HandlerUserProfileGet_21(secUserId: string, options?: any) {
        return DouyinAppV1APIApiFp(this.configuration).handlerUserProfileApiV1DouyinAppV1HandlerUserProfileGet_21(secUserId, options).then((request) => request(this.axios, this.basePath));
    }

}
