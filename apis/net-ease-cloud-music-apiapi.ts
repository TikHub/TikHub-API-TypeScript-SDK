// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpValidationError } from '../models';
/**
 * NetEaseCloudMusicAPIApi - axios parameter creator
 * @export
 */
export const NetEaseCloudMusicAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 解密网易云音乐APP POST请求中的16进制payload。 ### 参数: - payload: 16进制payload。 ### 返回: - 解密后的payload  # [English] ### Purpose: - Decrypt the 16-bit payload in the POST request of NetEase Cloud Music APP. ### Parameters: - payload: 16-bit payload. ### Returns: - Decrypted payload  # [示例/Example] payload = \"4AEEAB033C3F4068DBB74379B8C889D2187585FBBBC7CA1ADA7D10714AA139AE279A615DE7B87483A83A9091ED52D70B70DA02A7FE8A20317AA40F0FF461AC33DB77371E30F9C7F57783E800559AE08DD1E10EFC9CDC69D6815ADCDBF5A7D3006AA3B102FBE7296AB0DB9EA5C46AD12B\"
         * @summary 解密POST请求中的16进制payload/Decrypt the 16-bit payload in the POST request
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/net_ease_cloud_music/app/decrypt_post_payload`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 解密网易云音乐APP POST请求中的16进制payload。 ### 参数: - payload: 16进制payload。 ### 返回: - 解密后的payload  # [English] ### Purpose: - Decrypt the 16-bit payload in the POST request of NetEase Cloud Music APP. ### Parameters: - payload: 16-bit payload. ### Returns: - Decrypted payload  # [示例/Example] payload = \"4AEEAB033C3F4068DBB74379B8C889D2187585FBBBC7CA1ADA7D10714AA139AE279A615DE7B87483A83A9091ED52D70B70DA02A7FE8A20317AA40F0FF461AC33DB77371E30F9C7F57783E800559AE08DD1E10EFC9CDC69D6815ADCDBF5A7D3006AA3B102FBE7296AB0DB9EA5C46AD12B\"
         * @summary 解密POST请求中的16进制payload/Decrypt the 16-bit payload in the POST request
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost_1: async (body?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/net_ease_cloud_music/app/decrypt_post_payload`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 加密POST请求中的payload并且返回16进制。 ### 参数: - payload: 需要加密的payload。 ### 返回: - 加密后的16进制payload  # [English] ### Purpose: - Encrypt the payload in the POST request and return 16 hexadecimal. ### Parameters: - payload: Payload to be encrypted. ### Returns: - Encrypted 16 hexadecimal payload  # [示例/Example] payload = {\"id\": 2135155051, \"br\": 192000}
         * @summary 加密POST请求中的payload并且返回16进制/Encrypt the payload in the POST request and return 16 hexadecimal
         * @param {string} uri 请求URI/Request URI
         * @param {boolean} [addVariable] 是否添加变量/Whether to add variables
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost: async (uri: string, addVariable?: boolean, body?: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uri' is not null or undefined
            if (uri === null || uri === undefined) {
                throw new RequiredError('uri','Required parameter uri was null or undefined when calling encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/encrypt_post_payload`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uri !== undefined) {
                localVarQueryParameter['uri'] = uri;
            }

            if (addVariable !== undefined) {
                localVarQueryParameter['add_variable'] = addVariable;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 加密POST请求中的payload并且返回16进制。 ### 参数: - payload: 需要加密的payload。 ### 返回: - 加密后的16进制payload  # [English] ### Purpose: - Encrypt the payload in the POST request and return 16 hexadecimal. ### Parameters: - payload: Payload to be encrypted. ### Returns: - Encrypted 16 hexadecimal payload  # [示例/Example] payload = {\"id\": 2135155051, \"br\": 192000}
         * @summary 加密POST请求中的payload并且返回16进制/Encrypt the payload in the POST request and return 16 hexadecimal
         * @param {string} uri 请求URI/Request URI
         * @param {boolean} [addVariable] 是否添加变量/Whether to add variables
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost_2: async (uri: string, addVariable?: boolean, body?: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uri' is not null or undefined
            if (uri === null || uri === undefined) {
                throw new RequiredError('uri','Required parameter uri was null or undefined when calling encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost_2.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/encrypt_post_payload`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uri !== undefined) {
                localVarQueryParameter['uri'] = uri;
            }

            if (addVariable !== undefined) {
                localVarQueryParameter['add_variable'] = addVariable;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取歌手信息。 ### 参数: - artist_id: 歌手ID。 ### 返回: - 歌手信息  # [English] ### Purpose: - Fetch artist detail. ### Parameters: - artist_id: Artist ID. ### Returns: - Artist detail  # [示例/Example] artist_id = \"12213291\"
         * @summary 获取歌手信息/Fetch artist detail
         * @param {string} artistId 歌手ID/Artist ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet: async (artistId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'artistId' is not null or undefined
            if (artistId === null || artistId === undefined) {
                throw new RequiredError('artistId','Required parameter artistId was null or undefined when calling fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_artist_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (artistId !== undefined) {
                localVarQueryParameter['artist_id'] = artistId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取歌手信息。 ### 参数: - artist_id: 歌手ID。 ### 返回: - 歌手信息  # [English] ### Purpose: - Fetch artist detail. ### Parameters: - artist_id: Artist ID. ### Returns: - Artist detail  # [示例/Example] artist_id = \"12213291\"
         * @summary 获取歌手信息/Fetch artist detail
         * @param {string} artistId 歌手ID/Artist ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet_3: async (artistId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'artistId' is not null or undefined
            if (artistId === null || artistId === undefined) {
                throw new RequiredError('artistId','Required parameter artistId was null or undefined when calling fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet_3.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_artist_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (artistId !== undefined) {
                localVarQueryParameter['artist_id'] = artistId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取歌曲评论。 ### 参数: - resource_id: 资源ID，可以是歌曲ID，专辑ID等。 - beforeTime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条评论的时间戳，或者查看返回的Next_Page_beforeTime字段。 - limit: 每页数量，默认为30。 ### 返回: - 歌曲评论  # [English] ### Purpose: - Fetch music comment. ### Parameters: - resource_id: Resource ID, can be song ID, album ID, etc. - beforeTime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last comment returned on the first page on the second page, or check the Next_Page_beforeTime field returned. - limit: Number per page, default is 30. ### Returns: - Music comment  # [示例/Example] resource_id = \"2135155051\" beforeTime = \"0\" limit = \"30\"
         * @summary 获取歌曲评论/Fetch music comment
         * @param {string} resourceId 资源ID/Resource ID
         * @param {string} [beforeTime] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet: async (resourceId: string, beforeTime?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_music_comment`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (resourceId !== undefined) {
                localVarQueryParameter['resource_id'] = resourceId;
            }

            if (beforeTime !== undefined) {
                localVarQueryParameter['beforeTime'] = beforeTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取歌曲评论。 ### 参数: - resource_id: 资源ID，可以是歌曲ID，专辑ID等。 - beforeTime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条评论的时间戳，或者查看返回的Next_Page_beforeTime字段。 - limit: 每页数量，默认为30。 ### 返回: - 歌曲评论  # [English] ### Purpose: - Fetch music comment. ### Parameters: - resource_id: Resource ID, can be song ID, album ID, etc. - beforeTime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last comment returned on the first page on the second page, or check the Next_Page_beforeTime field returned. - limit: Number per page, default is 30. ### Returns: - Music comment  # [示例/Example] resource_id = \"2135155051\" beforeTime = \"0\" limit = \"30\"
         * @summary 获取歌曲评论/Fetch music comment
         * @param {string} resourceId 资源ID/Resource ID
         * @param {string} [beforeTime] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet_4: async (resourceId: string, beforeTime?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceId' is not null or undefined
            if (resourceId === null || resourceId === undefined) {
                throw new RequiredError('resourceId','Required parameter resourceId was null or undefined when calling fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet_4.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_music_comment`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (resourceId !== undefined) {
                localVarQueryParameter['resource_id'] = resourceId;
            }

            if (beforeTime !== undefined) {
                localVarQueryParameter['beforeTime'] = beforeTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取Mlog（音乐视频）播放地址。 ### 参数: - mlogId: Mlog ID，可以在APP中点击分享按钮获取链接，链接中包含mlogId。 - resolution: 分辨率，默认为1080，保持默认即可。 ### 返回: - Mlog播放地址（有时候会有水印，根据视频源而定。）  # [English] ### Purpose: - Fetch Mlog (music video) playback address. ### Parameters: - mlogId: Mlog ID, you can get the link by clicking the share button in the APP, the link contains mlogId. - resolution: Resolution, default is 1080, keep the default. ### Returns: - Mlog playback address (sometimes there will be a watermark, depending on the video source.)  # [示例/Example] > 分享链接/Share link: https://fn.music.163.com/g/mlog/mlog-mobile/landing/mlog?id=a1qQQOQNVueO2g7&type=2 mlogId = \"a1qQQOQNVueO2g7\"
         * @summary Mlog（音乐视频）播放地址/Mlog (music video) playback address
         * @param {string} mlogId Mlog ID/Mlog ID
         * @param {string} [resolution] 分辨率/Resolution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet: async (mlogId: string, resolution?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mlogId' is not null or undefined
            if (mlogId === null || mlogId === undefined) {
                throw new RequiredError('mlogId','Required parameter mlogId was null or undefined when calling fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_music_log_video_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (mlogId !== undefined) {
                localVarQueryParameter['mlogId'] = mlogId;
            }

            if (resolution !== undefined) {
                localVarQueryParameter['resolution'] = resolution;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取Mlog（音乐视频）播放地址。 ### 参数: - mlogId: Mlog ID，可以在APP中点击分享按钮获取链接，链接中包含mlogId。 - resolution: 分辨率，默认为1080，保持默认即可。 ### 返回: - Mlog播放地址（有时候会有水印，根据视频源而定。）  # [English] ### Purpose: - Fetch Mlog (music video) playback address. ### Parameters: - mlogId: Mlog ID, you can get the link by clicking the share button in the APP, the link contains mlogId. - resolution: Resolution, default is 1080, keep the default. ### Returns: - Mlog playback address (sometimes there will be a watermark, depending on the video source.)  # [示例/Example] > 分享链接/Share link: https://fn.music.163.com/g/mlog/mlog-mobile/landing/mlog?id=a1qQQOQNVueO2g7&type=2 mlogId = \"a1qQQOQNVueO2g7\"
         * @summary Mlog（音乐视频）播放地址/Mlog (music video) playback address
         * @param {string} mlogId Mlog ID/Mlog ID
         * @param {string} [resolution] 分辨率/Resolution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet_5: async (mlogId: string, resolution?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mlogId' is not null or undefined
            if (mlogId === null || mlogId === undefined) {
                throw new RequiredError('mlogId','Required parameter mlogId was null or undefined when calling fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet_5.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_music_log_video_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (mlogId !== undefined) {
                localVarQueryParameter['mlogId'] = mlogId;
            }

            if (resolution !== undefined) {
                localVarQueryParameter['resolution'] = resolution;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐歌词。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐歌词  # [English] ### Purpose: - Fetch single music lyric. ### Parameters: - music_id: Music ID ### Returns: - Music lyric  # [示例/Example] music_id = \"2135155051\"
         * @summary 获取单一歌曲歌词/Fetch one music lyric
         * @param {string} musicId 歌曲ID/Music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet: async (musicId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_one_music_lyric`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐歌词。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐歌词  # [English] ### Purpose: - Fetch single music lyric. ### Parameters: - music_id: Music ID ### Returns: - Music lyric  # [示例/Example] music_id = \"2135155051\"
         * @summary 获取单一歌曲歌词/Fetch one music lyric
         * @param {string} musicId 歌曲ID/Music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet_6: async (musicId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet_6.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_one_music_lyric`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐播放地址，此接口只能返回MP3格式的音频文件链接。 ### 参数: - music_id: 音乐ID - br: 音质码率，分四个等级，128000,192000,320000,999000 ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface can only return MP3 format audio file link. ### Parameters: - music_id: Music ID - br: Bitrate, divided into four levels, 128000,192000,320000,999000 ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" br = \"192000\"
         * @summary 获取单一歌曲播放地址V1（只能返回MP3格式，支持参数较少）/Fetch one music URL V1 (only MP3 format is supported, with fewer parameters)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {string} [br] 音质码率/Bitrate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get: async (musicId: string, br?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_one_music_url_v1`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }

            if (br !== undefined) {
                localVarQueryParameter['br'] = br;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐播放地址，此接口只能返回MP3格式的音频文件链接。 ### 参数: - music_id: 音乐ID - br: 音质码率，分四个等级，128000,192000,320000,999000 ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface can only return MP3 format audio file link. ### Parameters: - music_id: Music ID - br: Bitrate, divided into four levels, 128000,192000,320000,999000 ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" br = \"192000\"
         * @summary 获取单一歌曲播放地址V1（只能返回MP3格式，支持参数较少）/Fetch one music URL V1 (only MP3 format is supported, with fewer parameters)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {string} [br] 音质码率/Bitrate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get_7: async (musicId: string, br?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get_7.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_one_music_url_v1`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }

            if (br !== undefined) {
                localVarQueryParameter['br'] = br;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐播放地址，此接口支持更多参数。 ### 参数: - music_id: 音乐ID - level: 音质等级，分五个等级，标准，较高，极高，无损，hires，后两个等级不一定有支持的音源。     - 标准：standard     - 较高：higher     - 极高：exhigh     - 无损：lossLess     - hires：hires - encodeType: 编码类型，分六种类型。     - aac：aac     - mp3：mp3（默认）     - flac：flac     - alac：alac     - ape：ape     - wav：wav ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface supports more parameters. ### Parameters: - music_id: Music ID - level: Quality level, divided into five levels, standard, higher, exhigh, lossLess, hires, the last two levels may not have supported audio sources.     - standard     - higher     - exhigh     - lossLess     - hires - encodeType: Encoding type, divided into six types.     - aac     - mp3 (default)     - flac     - alac     - ape     - wav ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" level = \"exhigh\" encodeType = \"mp3\"
         * @summary 获取单一歌曲播放地址V2（支持更多参数）/Fetch one music URL V2 (support more parameters)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {string} [level] 音质等级/Quality level
         * @param {string} [encodeType] 编码类型/Encoding type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get: async (musicId: string, level?: string, encodeType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_one_music_url_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            if (encodeType !== undefined) {
                localVarQueryParameter['encodeType'] = encodeType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐播放地址，此接口支持更多参数。 ### 参数: - music_id: 音乐ID - level: 音质等级，分五个等级，标准，较高，极高，无损，hires，后两个等级不一定有支持的音源。     - 标准：standard     - 较高：higher     - 极高：exhigh     - 无损：lossLess     - hires：hires - encodeType: 编码类型，分六种类型。     - aac：aac     - mp3：mp3（默认）     - flac：flac     - alac：alac     - ape：ape     - wav：wav ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface supports more parameters. ### Parameters: - music_id: Music ID - level: Quality level, divided into five levels, standard, higher, exhigh, lossLess, hires, the last two levels may not have supported audio sources.     - standard     - higher     - exhigh     - lossLess     - hires - encodeType: Encoding type, divided into six types.     - aac     - mp3 (default)     - flac     - alac     - ape     - wav ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" level = \"exhigh\" encodeType = \"mp3\"
         * @summary 获取单一歌曲播放地址V2（支持更多参数）/Fetch one music URL V2 (support more parameters)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {string} [level] 音质等级/Quality level
         * @param {string} [encodeType] 编码类型/Encoding type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get_8: async (musicId: string, level?: string, encodeType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get_8.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_one_music_url_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }

            if (level !== undefined) {
                localVarQueryParameter['level'] = level;
            }

            if (encodeType !== undefined) {
                localVarQueryParameter['encodeType'] = encodeType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"
         * @summary 获取单一歌曲信息V1（信息更全）| Fetch one music information V1 (more information)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get: async (musicId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_one_music_v1`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"
         * @summary 获取单一歌曲信息V1（信息更全）| Fetch one music information V1 (more information)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get_9: async (musicId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get_9.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_one_music_v1`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"
         * @summary 获取单一歌曲信息V2（信息更少）| Fetch one music information V2 (less information)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get: async (musicId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_one_music_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"
         * @summary 获取单一歌曲信息V2（信息更少）| Fetch one music information V2 (less information)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get_10: async (musicId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'musicId' is not null or undefined
            if (musicId === null || musicId === undefined) {
                throw new RequiredError('musicId','Required parameter musicId was null or undefined when calling fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get_10.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_one_music_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (musicId !== undefined) {
                localVarQueryParameter['music_id'] = musicId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户动态。 ### 参数: - uid: 用户ID。 - _time: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_time字段。 - limit: 每页数量，默认为10。 ### 返回: - 用户动态  # [English] ### Purpose: - Fetch user event. ### Parameters: - uid: User ID. - _time: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_time field returned. - limit: Number per page, default is 10. ### Returns: - User event  # [示例/Example] uid = \"254132915\" _time = \"-1\" limit = \"10\"
         * @summary 获取用户动态/Fetch user event
         * @param {string} uid 用户ID/User ID
         * @param {string} [time] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet: async (uid: string, time?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_user_event`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (time !== undefined) {
                localVarQueryParameter['_time'] = time;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户动态。 ### 参数: - uid: 用户ID。 - _time: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_time字段。 - limit: 每页数量，默认为10。 ### 返回: - 用户动态  # [English] ### Purpose: - Fetch user event. ### Parameters: - uid: User ID. - _time: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_time field returned. - limit: Number per page, default is 10. ### Returns: - User event  # [示例/Example] uid = \"254132915\" _time = \"-1\" limit = \"10\"
         * @summary 获取用户动态/Fetch user event
         * @param {string} uid 用户ID/User ID
         * @param {string} [time] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet_11: async (uid: string, time?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet_11.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_user_event`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (time !== undefined) {
                localVarQueryParameter['_time'] = time;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表。 ### 参数: - uid: 用户ID。 - lasttime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_lasttime字段。 - pagesize: 每页数量，保持默认即可。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Fetch user followers. ### Parameters: - uid: User ID. - lasttime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_lasttime field returned. - pagesize: Number per page, keep the default. ### Returns: - User followers list  # [示例/Example] uid = \"254132915\" lasttime = \"0\" pagesize = \"20\"
         * @summary 获取用户粉丝列表/Fetch user followers
         * @param {string} uid 用户ID/User ID
         * @param {string} [lasttime] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
         * @param {string} [pagesize] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet: async (uid: string, lasttime?: string, pagesize?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_user_followers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (lasttime !== undefined) {
                localVarQueryParameter['lasttime'] = lasttime;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表。 ### 参数: - uid: 用户ID。 - lasttime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_lasttime字段。 - pagesize: 每页数量，保持默认即可。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Fetch user followers. ### Parameters: - uid: User ID. - lasttime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_lasttime field returned. - pagesize: Number per page, keep the default. ### Returns: - User followers list  # [示例/Example] uid = \"254132915\" lasttime = \"0\" pagesize = \"20\"
         * @summary 获取用户粉丝列表/Fetch user followers
         * @param {string} uid 用户ID/User ID
         * @param {string} [lasttime] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
         * @param {string} [pagesize] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet_12: async (uid: string, lasttime?: string, pagesize?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet_12.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_user_followers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (lasttime !== undefined) {
                localVarQueryParameter['lasttime'] = lasttime;
            }

            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Fetch user follows. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User follows list  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"
         * @summary 获取用户关注列表/Fetch user follows
         * @param {string} uid 用户ID/User ID
         * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet: async (uid: string, offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_user_follows`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Fetch user follows. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User follows list  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"
         * @summary 获取用户关注列表/Fetch user follows
         * @param {string} uid 用户ID/User ID
         * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet_13: async (uid: string, offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet_13.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_user_follows`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息。 ### 参数: - uid: 用户ID。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information. ### Parameters: - uid: User ID. ### Returns: - User information  # [示例/Example] uid = \"254132915\"
         * @summary 获取用户信息/Get user information
         * @param {string} uid 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_user_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息。 ### 参数: - uid: 用户ID。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information. ### Parameters: - uid: User ID. ### Returns: - User information  # [示例/Example] uid = \"254132915\"
         * @summary 获取用户信息/Get user information
         * @param {string} uid 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet_14: async (uid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet_14.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_user_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户歌单。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户歌单  # [English] ### Purpose: - Get user playlist. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User playlist  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"
         * @summary 获取用户歌单/Get user playlist
         * @param {string} uid 用户ID/User ID
         * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet: async (uid: string, offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_user_playlist`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户歌单。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户歌单  # [English] ### Purpose: - Get user playlist. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User playlist  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"
         * @summary 获取用户歌单/Get user playlist
         * @param {string} uid 用户ID/User ID
         * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet_15: async (uid: string, offset?: string, limit?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            if (uid === null || uid === undefined) {
                throw new RequiredError('uid','Required parameter uid was null or undefined when calling fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet_15.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/fetch_user_playlist`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (uid !== undefined) {
                localVarQueryParameter['uid'] = uid;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索接口V1。 ### 参数: - keywords: 关键词。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 - _type: 搜索类型     **搜索类型 (`type`)**：     * 单曲搜索：`\"type\":\"1\"`     * 歌手搜索：`\"type\":\"100\"`     * 专辑搜索：`\"type\":\"10\"`     * 歌单搜索：`\"type\":\"1000\"`     * MV搜索：`\"type\":\"1004\"`     * 主播电台搜索：`\"type\":\"1009\"`     * 用户搜索：`\"type\":\"1002\"` ### 返回: - 搜索结果  # [English] ### Purpose: - Search interface V1. ### Parameters: - keywords: Keywords. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. - _type: Search type     **Search type (`type`)**:     * Single search: `\"type\":\"1\"`     * Singer search: `\"type\":\"100\"`     * Album search: `\"type\":\"10\"`     * Playlist search: `\"type\":\"1000\"`     * MV search: `\"type\":\"1004\"`     * Anchor radio search: `\"type\":\"1009\"`     * User search: `\"type\":\"1002\"` ### Returns: - Search results  # [示例/Example] keywords = \"周杰伦\" offset = \"0\" limit = \"20\" _type = \"1\"
         * @summary 搜索接口V1/Search interface V1
         * @param {string} keywords 关键词/Keywords
         * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {string} [type] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchV1ApiV1NetEaseCloudMusicAppSearchV1Get: async (keywords: string, offset?: string, limit?: string, type?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keywords' is not null or undefined
            if (keywords === null || keywords === undefined) {
                throw new RequiredError('keywords','Required parameter keywords was null or undefined when calling searchV1ApiV1NetEaseCloudMusicAppSearchV1Get.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/search_v1`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keywords !== undefined) {
                localVarQueryParameter['keywords'] = keywords;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (type !== undefined) {
                localVarQueryParameter['_type'] = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索接口V1。 ### 参数: - keywords: 关键词。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 - _type: 搜索类型     **搜索类型 (`type`)**：     * 单曲搜索：`\"type\":\"1\"`     * 歌手搜索：`\"type\":\"100\"`     * 专辑搜索：`\"type\":\"10\"`     * 歌单搜索：`\"type\":\"1000\"`     * MV搜索：`\"type\":\"1004\"`     * 主播电台搜索：`\"type\":\"1009\"`     * 用户搜索：`\"type\":\"1002\"` ### 返回: - 搜索结果  # [English] ### Purpose: - Search interface V1. ### Parameters: - keywords: Keywords. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. - _type: Search type     **Search type (`type`)**:     * Single search: `\"type\":\"1\"`     * Singer search: `\"type\":\"100\"`     * Album search: `\"type\":\"10\"`     * Playlist search: `\"type\":\"1000\"`     * MV search: `\"type\":\"1004\"`     * Anchor radio search: `\"type\":\"1009\"`     * User search: `\"type\":\"1002\"` ### Returns: - Search results  # [示例/Example] keywords = \"周杰伦\" offset = \"0\" limit = \"20\" _type = \"1\"
         * @summary 搜索接口V1/Search interface V1
         * @param {string} keywords 关键词/Keywords
         * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {string} [type] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchV1ApiV1NetEaseCloudMusicAppSearchV1Get_16: async (keywords: string, offset?: string, limit?: string, type?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keywords' is not null or undefined
            if (keywords === null || keywords === undefined) {
                throw new RequiredError('keywords','Required parameter keywords was null or undefined when calling searchV1ApiV1NetEaseCloudMusicAppSearchV1Get_16.');
            }
            const localVarPath = `/api/v1/net_ease_cloud_music/app/search_v1`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keywords !== undefined) {
                localVarQueryParameter['keywords'] = keywords;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (type !== undefined) {
                localVarQueryParameter['_type'] = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NetEaseCloudMusicAPIApi - functional programming interface
 * @export
 */
export const NetEaseCloudMusicAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 解密网易云音乐APP POST请求中的16进制payload。 ### 参数: - payload: 16进制payload。 ### 返回: - 解密后的payload  # [English] ### Purpose: - Decrypt the 16-bit payload in the POST request of NetEase Cloud Music APP. ### Parameters: - payload: 16-bit payload. ### Returns: - Decrypted payload  # [示例/Example] payload = \"4AEEAB033C3F4068DBB74379B8C889D2187585FBBBC7CA1ADA7D10714AA139AE279A615DE7B87483A83A9091ED52D70B70DA02A7FE8A20317AA40F0FF461AC33DB77371E30F9C7F57783E800559AE08DD1E10EFC9CDC69D6815ADCDBF5A7D3006AA3B102FBE7296AB0DB9EA5C46AD12B\"
         * @summary 解密POST请求中的16进制payload/Decrypt the 16-bit payload in the POST request
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async decryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).decryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 解密网易云音乐APP POST请求中的16进制payload。 ### 参数: - payload: 16进制payload。 ### 返回: - 解密后的payload  # [English] ### Purpose: - Decrypt the 16-bit payload in the POST request of NetEase Cloud Music APP. ### Parameters: - payload: 16-bit payload. ### Returns: - Decrypted payload  # [示例/Example] payload = \"4AEEAB033C3F4068DBB74379B8C889D2187585FBBBC7CA1ADA7D10714AA139AE279A615DE7B87483A83A9091ED52D70B70DA02A7FE8A20317AA40F0FF461AC33DB77371E30F9C7F57783E800559AE08DD1E10EFC9CDC69D6815ADCDBF5A7D3006AA3B102FBE7296AB0DB9EA5C46AD12B\"
         * @summary 解密POST请求中的16进制payload/Decrypt the 16-bit payload in the POST request
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async decryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost_1(body?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).decryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost_1(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 加密POST请求中的payload并且返回16进制。 ### 参数: - payload: 需要加密的payload。 ### 返回: - 加密后的16进制payload  # [English] ### Purpose: - Encrypt the payload in the POST request and return 16 hexadecimal. ### Parameters: - payload: Payload to be encrypted. ### Returns: - Encrypted 16 hexadecimal payload  # [示例/Example] payload = {\"id\": 2135155051, \"br\": 192000}
         * @summary 加密POST请求中的payload并且返回16进制/Encrypt the payload in the POST request and return 16 hexadecimal
         * @param {string} uri 请求URI/Request URI
         * @param {boolean} [addVariable] 是否添加变量/Whether to add variables
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost(uri: string, addVariable?: boolean, body?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost(uri, addVariable, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 加密POST请求中的payload并且返回16进制。 ### 参数: - payload: 需要加密的payload。 ### 返回: - 加密后的16进制payload  # [English] ### Purpose: - Encrypt the payload in the POST request and return 16 hexadecimal. ### Parameters: - payload: Payload to be encrypted. ### Returns: - Encrypted 16 hexadecimal payload  # [示例/Example] payload = {\"id\": 2135155051, \"br\": 192000}
         * @summary 加密POST请求中的payload并且返回16进制/Encrypt the payload in the POST request and return 16 hexadecimal
         * @param {string} uri 请求URI/Request URI
         * @param {boolean} [addVariable] 是否添加变量/Whether to add variables
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost_2(uri: string, addVariable?: boolean, body?: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost_2(uri, addVariable, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取歌手信息。 ### 参数: - artist_id: 歌手ID。 ### 返回: - 歌手信息  # [English] ### Purpose: - Fetch artist detail. ### Parameters: - artist_id: Artist ID. ### Returns: - Artist detail  # [示例/Example] artist_id = \"12213291\"
         * @summary 获取歌手信息/Fetch artist detail
         * @param {string} artistId 歌手ID/Artist ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet(artistId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet(artistId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取歌手信息。 ### 参数: - artist_id: 歌手ID。 ### 返回: - 歌手信息  # [English] ### Purpose: - Fetch artist detail. ### Parameters: - artist_id: Artist ID. ### Returns: - Artist detail  # [示例/Example] artist_id = \"12213291\"
         * @summary 获取歌手信息/Fetch artist detail
         * @param {string} artistId 歌手ID/Artist ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet_3(artistId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet_3(artistId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取歌曲评论。 ### 参数: - resource_id: 资源ID，可以是歌曲ID，专辑ID等。 - beforeTime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条评论的时间戳，或者查看返回的Next_Page_beforeTime字段。 - limit: 每页数量，默认为30。 ### 返回: - 歌曲评论  # [English] ### Purpose: - Fetch music comment. ### Parameters: - resource_id: Resource ID, can be song ID, album ID, etc. - beforeTime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last comment returned on the first page on the second page, or check the Next_Page_beforeTime field returned. - limit: Number per page, default is 30. ### Returns: - Music comment  # [示例/Example] resource_id = \"2135155051\" beforeTime = \"0\" limit = \"30\"
         * @summary 获取歌曲评论/Fetch music comment
         * @param {string} resourceId 资源ID/Resource ID
         * @param {string} [beforeTime] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet(resourceId: string, beforeTime?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet(resourceId, beforeTime, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取歌曲评论。 ### 参数: - resource_id: 资源ID，可以是歌曲ID，专辑ID等。 - beforeTime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条评论的时间戳，或者查看返回的Next_Page_beforeTime字段。 - limit: 每页数量，默认为30。 ### 返回: - 歌曲评论  # [English] ### Purpose: - Fetch music comment. ### Parameters: - resource_id: Resource ID, can be song ID, album ID, etc. - beforeTime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last comment returned on the first page on the second page, or check the Next_Page_beforeTime field returned. - limit: Number per page, default is 30. ### Returns: - Music comment  # [示例/Example] resource_id = \"2135155051\" beforeTime = \"0\" limit = \"30\"
         * @summary 获取歌曲评论/Fetch music comment
         * @param {string} resourceId 资源ID/Resource ID
         * @param {string} [beforeTime] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet_4(resourceId: string, beforeTime?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet_4(resourceId, beforeTime, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取Mlog（音乐视频）播放地址。 ### 参数: - mlogId: Mlog ID，可以在APP中点击分享按钮获取链接，链接中包含mlogId。 - resolution: 分辨率，默认为1080，保持默认即可。 ### 返回: - Mlog播放地址（有时候会有水印，根据视频源而定。）  # [English] ### Purpose: - Fetch Mlog (music video) playback address. ### Parameters: - mlogId: Mlog ID, you can get the link by clicking the share button in the APP, the link contains mlogId. - resolution: Resolution, default is 1080, keep the default. ### Returns: - Mlog playback address (sometimes there will be a watermark, depending on the video source.)  # [示例/Example] > 分享链接/Share link: https://fn.music.163.com/g/mlog/mlog-mobile/landing/mlog?id=a1qQQOQNVueO2g7&type=2 mlogId = \"a1qQQOQNVueO2g7\"
         * @summary Mlog（音乐视频）播放地址/Mlog (music video) playback address
         * @param {string} mlogId Mlog ID/Mlog ID
         * @param {string} [resolution] 分辨率/Resolution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet(mlogId: string, resolution?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet(mlogId, resolution, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取Mlog（音乐视频）播放地址。 ### 参数: - mlogId: Mlog ID，可以在APP中点击分享按钮获取链接，链接中包含mlogId。 - resolution: 分辨率，默认为1080，保持默认即可。 ### 返回: - Mlog播放地址（有时候会有水印，根据视频源而定。）  # [English] ### Purpose: - Fetch Mlog (music video) playback address. ### Parameters: - mlogId: Mlog ID, you can get the link by clicking the share button in the APP, the link contains mlogId. - resolution: Resolution, default is 1080, keep the default. ### Returns: - Mlog playback address (sometimes there will be a watermark, depending on the video source.)  # [示例/Example] > 分享链接/Share link: https://fn.music.163.com/g/mlog/mlog-mobile/landing/mlog?id=a1qQQOQNVueO2g7&type=2 mlogId = \"a1qQQOQNVueO2g7\"
         * @summary Mlog（音乐视频）播放地址/Mlog (music video) playback address
         * @param {string} mlogId Mlog ID/Mlog ID
         * @param {string} [resolution] 分辨率/Resolution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet_5(mlogId: string, resolution?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet_5(mlogId, resolution, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐歌词。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐歌词  # [English] ### Purpose: - Fetch single music lyric. ### Parameters: - music_id: Music ID ### Returns: - Music lyric  # [示例/Example] music_id = \"2135155051\"
         * @summary 获取单一歌曲歌词/Fetch one music lyric
         * @param {string} musicId 歌曲ID/Music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet(musicId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet(musicId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐歌词。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐歌词  # [English] ### Purpose: - Fetch single music lyric. ### Parameters: - music_id: Music ID ### Returns: - Music lyric  # [示例/Example] music_id = \"2135155051\"
         * @summary 获取单一歌曲歌词/Fetch one music lyric
         * @param {string} musicId 歌曲ID/Music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet_6(musicId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet_6(musicId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐播放地址，此接口只能返回MP3格式的音频文件链接。 ### 参数: - music_id: 音乐ID - br: 音质码率，分四个等级，128000,192000,320000,999000 ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface can only return MP3 format audio file link. ### Parameters: - music_id: Music ID - br: Bitrate, divided into four levels, 128000,192000,320000,999000 ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" br = \"192000\"
         * @summary 获取单一歌曲播放地址V1（只能返回MP3格式，支持参数较少）/Fetch one music URL V1 (only MP3 format is supported, with fewer parameters)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {string} [br] 音质码率/Bitrate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get(musicId: string, br?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get(musicId, br, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐播放地址，此接口只能返回MP3格式的音频文件链接。 ### 参数: - music_id: 音乐ID - br: 音质码率，分四个等级，128000,192000,320000,999000 ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface can only return MP3 format audio file link. ### Parameters: - music_id: Music ID - br: Bitrate, divided into four levels, 128000,192000,320000,999000 ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" br = \"192000\"
         * @summary 获取单一歌曲播放地址V1（只能返回MP3格式，支持参数较少）/Fetch one music URL V1 (only MP3 format is supported, with fewer parameters)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {string} [br] 音质码率/Bitrate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get_7(musicId: string, br?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get_7(musicId, br, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐播放地址，此接口支持更多参数。 ### 参数: - music_id: 音乐ID - level: 音质等级，分五个等级，标准，较高，极高，无损，hires，后两个等级不一定有支持的音源。     - 标准：standard     - 较高：higher     - 极高：exhigh     - 无损：lossLess     - hires：hires - encodeType: 编码类型，分六种类型。     - aac：aac     - mp3：mp3（默认）     - flac：flac     - alac：alac     - ape：ape     - wav：wav ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface supports more parameters. ### Parameters: - music_id: Music ID - level: Quality level, divided into five levels, standard, higher, exhigh, lossLess, hires, the last two levels may not have supported audio sources.     - standard     - higher     - exhigh     - lossLess     - hires - encodeType: Encoding type, divided into six types.     - aac     - mp3 (default)     - flac     - alac     - ape     - wav ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" level = \"exhigh\" encodeType = \"mp3\"
         * @summary 获取单一歌曲播放地址V2（支持更多参数）/Fetch one music URL V2 (support more parameters)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {string} [level] 音质等级/Quality level
         * @param {string} [encodeType] 编码类型/Encoding type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get(musicId: string, level?: string, encodeType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get(musicId, level, encodeType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐播放地址，此接口支持更多参数。 ### 参数: - music_id: 音乐ID - level: 音质等级，分五个等级，标准，较高，极高，无损，hires，后两个等级不一定有支持的音源。     - 标准：standard     - 较高：higher     - 极高：exhigh     - 无损：lossLess     - hires：hires - encodeType: 编码类型，分六种类型。     - aac：aac     - mp3：mp3（默认）     - flac：flac     - alac：alac     - ape：ape     - wav：wav ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface supports more parameters. ### Parameters: - music_id: Music ID - level: Quality level, divided into five levels, standard, higher, exhigh, lossLess, hires, the last two levels may not have supported audio sources.     - standard     - higher     - exhigh     - lossLess     - hires - encodeType: Encoding type, divided into six types.     - aac     - mp3 (default)     - flac     - alac     - ape     - wav ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" level = \"exhigh\" encodeType = \"mp3\"
         * @summary 获取单一歌曲播放地址V2（支持更多参数）/Fetch one music URL V2 (support more parameters)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {string} [level] 音质等级/Quality level
         * @param {string} [encodeType] 编码类型/Encoding type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get_8(musicId: string, level?: string, encodeType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get_8(musicId, level, encodeType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"
         * @summary 获取单一歌曲信息V1（信息更全）| Fetch one music information V1 (more information)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get(musicId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get(musicId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"
         * @summary 获取单一歌曲信息V1（信息更全）| Fetch one music information V1 (more information)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get_9(musicId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get_9(musicId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"
         * @summary 获取单一歌曲信息V2（信息更少）| Fetch one music information V2 (less information)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get(musicId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get(musicId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"
         * @summary 获取单一歌曲信息V2（信息更少）| Fetch one music information V2 (less information)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get_10(musicId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get_10(musicId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户动态。 ### 参数: - uid: 用户ID。 - _time: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_time字段。 - limit: 每页数量，默认为10。 ### 返回: - 用户动态  # [English] ### Purpose: - Fetch user event. ### Parameters: - uid: User ID. - _time: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_time field returned. - limit: Number per page, default is 10. ### Returns: - User event  # [示例/Example] uid = \"254132915\" _time = \"-1\" limit = \"10\"
         * @summary 获取用户动态/Fetch user event
         * @param {string} uid 用户ID/User ID
         * @param {string} [time] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet(uid: string, time?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet(uid, time, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户动态。 ### 参数: - uid: 用户ID。 - _time: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_time字段。 - limit: 每页数量，默认为10。 ### 返回: - 用户动态  # [English] ### Purpose: - Fetch user event. ### Parameters: - uid: User ID. - _time: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_time field returned. - limit: Number per page, default is 10. ### Returns: - User event  # [示例/Example] uid = \"254132915\" _time = \"-1\" limit = \"10\"
         * @summary 获取用户动态/Fetch user event
         * @param {string} uid 用户ID/User ID
         * @param {string} [time] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet_11(uid: string, time?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet_11(uid, time, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表。 ### 参数: - uid: 用户ID。 - lasttime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_lasttime字段。 - pagesize: 每页数量，保持默认即可。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Fetch user followers. ### Parameters: - uid: User ID. - lasttime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_lasttime field returned. - pagesize: Number per page, keep the default. ### Returns: - User followers list  # [示例/Example] uid = \"254132915\" lasttime = \"0\" pagesize = \"20\"
         * @summary 获取用户粉丝列表/Fetch user followers
         * @param {string} uid 用户ID/User ID
         * @param {string} [lasttime] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
         * @param {string} [pagesize] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet(uid: string, lasttime?: string, pagesize?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet(uid, lasttime, pagesize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表。 ### 参数: - uid: 用户ID。 - lasttime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_lasttime字段。 - pagesize: 每页数量，保持默认即可。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Fetch user followers. ### Parameters: - uid: User ID. - lasttime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_lasttime field returned. - pagesize: Number per page, keep the default. ### Returns: - User followers list  # [示例/Example] uid = \"254132915\" lasttime = \"0\" pagesize = \"20\"
         * @summary 获取用户粉丝列表/Fetch user followers
         * @param {string} uid 用户ID/User ID
         * @param {string} [lasttime] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
         * @param {string} [pagesize] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet_12(uid: string, lasttime?: string, pagesize?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet_12(uid, lasttime, pagesize, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Fetch user follows. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User follows list  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"
         * @summary 获取用户关注列表/Fetch user follows
         * @param {string} uid 用户ID/User ID
         * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet(uid: string, offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet(uid, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Fetch user follows. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User follows list  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"
         * @summary 获取用户关注列表/Fetch user follows
         * @param {string} uid 用户ID/User ID
         * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet_13(uid: string, offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet_13(uid, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息。 ### 参数: - uid: 用户ID。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information. ### Parameters: - uid: User ID. ### Returns: - User information  # [示例/Example] uid = \"254132915\"
         * @summary 获取用户信息/Get user information
         * @param {string} uid 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息。 ### 参数: - uid: 用户ID。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information. ### Parameters: - uid: User ID. ### Returns: - User information  # [示例/Example] uid = \"254132915\"
         * @summary 获取用户信息/Get user information
         * @param {string} uid 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet_14(uid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet_14(uid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户歌单。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户歌单  # [English] ### Purpose: - Get user playlist. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User playlist  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"
         * @summary 获取用户歌单/Get user playlist
         * @param {string} uid 用户ID/User ID
         * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet(uid: string, offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet(uid, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户歌单。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户歌单  # [English] ### Purpose: - Get user playlist. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User playlist  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"
         * @summary 获取用户歌单/Get user playlist
         * @param {string} uid 用户ID/User ID
         * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet_15(uid: string, offset?: string, limit?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet_15(uid, offset, limit, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索接口V1。 ### 参数: - keywords: 关键词。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 - _type: 搜索类型     **搜索类型 (`type`)**：     * 单曲搜索：`\"type\":\"1\"`     * 歌手搜索：`\"type\":\"100\"`     * 专辑搜索：`\"type\":\"10\"`     * 歌单搜索：`\"type\":\"1000\"`     * MV搜索：`\"type\":\"1004\"`     * 主播电台搜索：`\"type\":\"1009\"`     * 用户搜索：`\"type\":\"1002\"` ### 返回: - 搜索结果  # [English] ### Purpose: - Search interface V1. ### Parameters: - keywords: Keywords. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. - _type: Search type     **Search type (`type`)**:     * Single search: `\"type\":\"1\"`     * Singer search: `\"type\":\"100\"`     * Album search: `\"type\":\"10\"`     * Playlist search: `\"type\":\"1000\"`     * MV search: `\"type\":\"1004\"`     * Anchor radio search: `\"type\":\"1009\"`     * User search: `\"type\":\"1002\"` ### Returns: - Search results  # [示例/Example] keywords = \"周杰伦\" offset = \"0\" limit = \"20\" _type = \"1\"
         * @summary 搜索接口V1/Search interface V1
         * @param {string} keywords 关键词/Keywords
         * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {string} [type] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchV1ApiV1NetEaseCloudMusicAppSearchV1Get(keywords: string, offset?: string, limit?: string, type?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).searchV1ApiV1NetEaseCloudMusicAppSearchV1Get(keywords, offset, limit, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索接口V1。 ### 参数: - keywords: 关键词。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 - _type: 搜索类型     **搜索类型 (`type`)**：     * 单曲搜索：`\"type\":\"1\"`     * 歌手搜索：`\"type\":\"100\"`     * 专辑搜索：`\"type\":\"10\"`     * 歌单搜索：`\"type\":\"1000\"`     * MV搜索：`\"type\":\"1004\"`     * 主播电台搜索：`\"type\":\"1009\"`     * 用户搜索：`\"type\":\"1002\"` ### 返回: - 搜索结果  # [English] ### Purpose: - Search interface V1. ### Parameters: - keywords: Keywords. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. - _type: Search type     **Search type (`type`)**:     * Single search: `\"type\":\"1\"`     * Singer search: `\"type\":\"100\"`     * Album search: `\"type\":\"10\"`     * Playlist search: `\"type\":\"1000\"`     * MV search: `\"type\":\"1004\"`     * Anchor radio search: `\"type\":\"1009\"`     * User search: `\"type\":\"1002\"` ### Returns: - Search results  # [示例/Example] keywords = \"周杰伦\" offset = \"0\" limit = \"20\" _type = \"1\"
         * @summary 搜索接口V1/Search interface V1
         * @param {string} keywords 关键词/Keywords
         * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {string} [type] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchV1ApiV1NetEaseCloudMusicAppSearchV1Get_16(keywords: string, offset?: string, limit?: string, type?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await NetEaseCloudMusicAPIApiAxiosParamCreator(configuration).searchV1ApiV1NetEaseCloudMusicAppSearchV1Get_16(keywords, offset, limit, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * NetEaseCloudMusicAPIApi - factory interface
 * @export
 */
export const NetEaseCloudMusicAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 解密网易云音乐APP POST请求中的16进制payload。 ### 参数: - payload: 16进制payload。 ### 返回: - 解密后的payload  # [English] ### Purpose: - Decrypt the 16-bit payload in the POST request of NetEase Cloud Music APP. ### Parameters: - payload: 16-bit payload. ### Returns: - Decrypted payload  # [示例/Example] payload = \"4AEEAB033C3F4068DBB74379B8C889D2187585FBBBC7CA1ADA7D10714AA139AE279A615DE7B87483A83A9091ED52D70B70DA02A7FE8A20317AA40F0FF461AC33DB77371E30F9C7F57783E800559AE08DD1E10EFC9CDC69D6815ADCDBF5A7D3006AA3B102FBE7296AB0DB9EA5C46AD12B\"
         * @summary 解密POST请求中的16进制payload/Decrypt the 16-bit payload in the POST request
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost(body?: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).decryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 解密网易云音乐APP POST请求中的16进制payload。 ### 参数: - payload: 16进制payload。 ### 返回: - 解密后的payload  # [English] ### Purpose: - Decrypt the 16-bit payload in the POST request of NetEase Cloud Music APP. ### Parameters: - payload: 16-bit payload. ### Returns: - Decrypted payload  # [示例/Example] payload = \"4AEEAB033C3F4068DBB74379B8C889D2187585FBBBC7CA1ADA7D10714AA139AE279A615DE7B87483A83A9091ED52D70B70DA02A7FE8A20317AA40F0FF461AC33DB77371E30F9C7F57783E800559AE08DD1E10EFC9CDC69D6815ADCDBF5A7D3006AA3B102FBE7296AB0DB9EA5C46AD12B\"
         * @summary 解密POST请求中的16进制payload/Decrypt the 16-bit payload in the POST request
         * @param {string} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        decryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost_1(body?: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).decryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost_1(body, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 加密POST请求中的payload并且返回16进制。 ### 参数: - payload: 需要加密的payload。 ### 返回: - 加密后的16进制payload  # [English] ### Purpose: - Encrypt the payload in the POST request and return 16 hexadecimal. ### Parameters: - payload: Payload to be encrypted. ### Returns: - Encrypted 16 hexadecimal payload  # [示例/Example] payload = {\"id\": 2135155051, \"br\": 192000}
         * @summary 加密POST请求中的payload并且返回16进制/Encrypt the payload in the POST request and return 16 hexadecimal
         * @param {string} uri 请求URI/Request URI
         * @param {boolean} [addVariable] 是否添加变量/Whether to add variables
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost(uri: string, addVariable?: boolean, body?: object, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost(uri, addVariable, body, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 加密POST请求中的payload并且返回16进制。 ### 参数: - payload: 需要加密的payload。 ### 返回: - 加密后的16进制payload  # [English] ### Purpose: - Encrypt the payload in the POST request and return 16 hexadecimal. ### Parameters: - payload: Payload to be encrypted. ### Returns: - Encrypted 16 hexadecimal payload  # [示例/Example] payload = {\"id\": 2135155051, \"br\": 192000}
         * @summary 加密POST请求中的payload并且返回16进制/Encrypt the payload in the POST request and return 16 hexadecimal
         * @param {string} uri 请求URI/Request URI
         * @param {boolean} [addVariable] 是否添加变量/Whether to add variables
         * @param {object} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost_2(uri: string, addVariable?: boolean, body?: object, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost_2(uri, addVariable, body, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取歌手信息。 ### 参数: - artist_id: 歌手ID。 ### 返回: - 歌手信息  # [English] ### Purpose: - Fetch artist detail. ### Parameters: - artist_id: Artist ID. ### Returns: - Artist detail  # [示例/Example] artist_id = \"12213291\"
         * @summary 获取歌手信息/Fetch artist detail
         * @param {string} artistId 歌手ID/Artist ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet(artistId: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet(artistId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取歌手信息。 ### 参数: - artist_id: 歌手ID。 ### 返回: - 歌手信息  # [English] ### Purpose: - Fetch artist detail. ### Parameters: - artist_id: Artist ID. ### Returns: - Artist detail  # [示例/Example] artist_id = \"12213291\"
         * @summary 获取歌手信息/Fetch artist detail
         * @param {string} artistId 歌手ID/Artist ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet_3(artistId: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet_3(artistId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取歌曲评论。 ### 参数: - resource_id: 资源ID，可以是歌曲ID，专辑ID等。 - beforeTime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条评论的时间戳，或者查看返回的Next_Page_beforeTime字段。 - limit: 每页数量，默认为30。 ### 返回: - 歌曲评论  # [English] ### Purpose: - Fetch music comment. ### Parameters: - resource_id: Resource ID, can be song ID, album ID, etc. - beforeTime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last comment returned on the first page on the second page, or check the Next_Page_beforeTime field returned. - limit: Number per page, default is 30. ### Returns: - Music comment  # [示例/Example] resource_id = \"2135155051\" beforeTime = \"0\" limit = \"30\"
         * @summary 获取歌曲评论/Fetch music comment
         * @param {string} resourceId 资源ID/Resource ID
         * @param {string} [beforeTime] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet(resourceId: string, beforeTime?: string, limit?: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet(resourceId, beforeTime, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取歌曲评论。 ### 参数: - resource_id: 资源ID，可以是歌曲ID，专辑ID等。 - beforeTime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条评论的时间戳，或者查看返回的Next_Page_beforeTime字段。 - limit: 每页数量，默认为30。 ### 返回: - 歌曲评论  # [English] ### Purpose: - Fetch music comment. ### Parameters: - resource_id: Resource ID, can be song ID, album ID, etc. - beforeTime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last comment returned on the first page on the second page, or check the Next_Page_beforeTime field returned. - limit: Number per page, default is 30. ### Returns: - Music comment  # [示例/Example] resource_id = \"2135155051\" beforeTime = \"0\" limit = \"30\"
         * @summary 获取歌曲评论/Fetch music comment
         * @param {string} resourceId 资源ID/Resource ID
         * @param {string} [beforeTime] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet_4(resourceId: string, beforeTime?: string, limit?: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet_4(resourceId, beforeTime, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取Mlog（音乐视频）播放地址。 ### 参数: - mlogId: Mlog ID，可以在APP中点击分享按钮获取链接，链接中包含mlogId。 - resolution: 分辨率，默认为1080，保持默认即可。 ### 返回: - Mlog播放地址（有时候会有水印，根据视频源而定。）  # [English] ### Purpose: - Fetch Mlog (music video) playback address. ### Parameters: - mlogId: Mlog ID, you can get the link by clicking the share button in the APP, the link contains mlogId. - resolution: Resolution, default is 1080, keep the default. ### Returns: - Mlog playback address (sometimes there will be a watermark, depending on the video source.)  # [示例/Example] > 分享链接/Share link: https://fn.music.163.com/g/mlog/mlog-mobile/landing/mlog?id=a1qQQOQNVueO2g7&type=2 mlogId = \"a1qQQOQNVueO2g7\"
         * @summary Mlog（音乐视频）播放地址/Mlog (music video) playback address
         * @param {string} mlogId Mlog ID/Mlog ID
         * @param {string} [resolution] 分辨率/Resolution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet(mlogId: string, resolution?: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet(mlogId, resolution, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取Mlog（音乐视频）播放地址。 ### 参数: - mlogId: Mlog ID，可以在APP中点击分享按钮获取链接，链接中包含mlogId。 - resolution: 分辨率，默认为1080，保持默认即可。 ### 返回: - Mlog播放地址（有时候会有水印，根据视频源而定。）  # [English] ### Purpose: - Fetch Mlog (music video) playback address. ### Parameters: - mlogId: Mlog ID, you can get the link by clicking the share button in the APP, the link contains mlogId. - resolution: Resolution, default is 1080, keep the default. ### Returns: - Mlog playback address (sometimes there will be a watermark, depending on the video source.)  # [示例/Example] > 分享链接/Share link: https://fn.music.163.com/g/mlog/mlog-mobile/landing/mlog?id=a1qQQOQNVueO2g7&type=2 mlogId = \"a1qQQOQNVueO2g7\"
         * @summary Mlog（音乐视频）播放地址/Mlog (music video) playback address
         * @param {string} mlogId Mlog ID/Mlog ID
         * @param {string} [resolution] 分辨率/Resolution
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet_5(mlogId: string, resolution?: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet_5(mlogId, resolution, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐歌词。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐歌词  # [English] ### Purpose: - Fetch single music lyric. ### Parameters: - music_id: Music ID ### Returns: - Music lyric  # [示例/Example] music_id = \"2135155051\"
         * @summary 获取单一歌曲歌词/Fetch one music lyric
         * @param {string} musicId 歌曲ID/Music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet(musicId: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet(musicId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐歌词。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐歌词  # [English] ### Purpose: - Fetch single music lyric. ### Parameters: - music_id: Music ID ### Returns: - Music lyric  # [示例/Example] music_id = \"2135155051\"
         * @summary 获取单一歌曲歌词/Fetch one music lyric
         * @param {string} musicId 歌曲ID/Music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet_6(musicId: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet_6(musicId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐播放地址，此接口只能返回MP3格式的音频文件链接。 ### 参数: - music_id: 音乐ID - br: 音质码率，分四个等级，128000,192000,320000,999000 ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface can only return MP3 format audio file link. ### Parameters: - music_id: Music ID - br: Bitrate, divided into four levels, 128000,192000,320000,999000 ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" br = \"192000\"
         * @summary 获取单一歌曲播放地址V1（只能返回MP3格式，支持参数较少）/Fetch one music URL V1 (only MP3 format is supported, with fewer parameters)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {string} [br] 音质码率/Bitrate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get(musicId: string, br?: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get(musicId, br, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐播放地址，此接口只能返回MP3格式的音频文件链接。 ### 参数: - music_id: 音乐ID - br: 音质码率，分四个等级，128000,192000,320000,999000 ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface can only return MP3 format audio file link. ### Parameters: - music_id: Music ID - br: Bitrate, divided into four levels, 128000,192000,320000,999000 ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" br = \"192000\"
         * @summary 获取单一歌曲播放地址V1（只能返回MP3格式，支持参数较少）/Fetch one music URL V1 (only MP3 format is supported, with fewer parameters)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {string} [br] 音质码率/Bitrate
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get_7(musicId: string, br?: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get_7(musicId, br, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐播放地址，此接口支持更多参数。 ### 参数: - music_id: 音乐ID - level: 音质等级，分五个等级，标准，较高，极高，无损，hires，后两个等级不一定有支持的音源。     - 标准：standard     - 较高：higher     - 极高：exhigh     - 无损：lossLess     - hires：hires - encodeType: 编码类型，分六种类型。     - aac：aac     - mp3：mp3（默认）     - flac：flac     - alac：alac     - ape：ape     - wav：wav ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface supports more parameters. ### Parameters: - music_id: Music ID - level: Quality level, divided into five levels, standard, higher, exhigh, lossLess, hires, the last two levels may not have supported audio sources.     - standard     - higher     - exhigh     - lossLess     - hires - encodeType: Encoding type, divided into six types.     - aac     - mp3 (default)     - flac     - alac     - ape     - wav ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" level = \"exhigh\" encodeType = \"mp3\"
         * @summary 获取单一歌曲播放地址V2（支持更多参数）/Fetch one music URL V2 (support more parameters)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {string} [level] 音质等级/Quality level
         * @param {string} [encodeType] 编码类型/Encoding type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get(musicId: string, level?: string, encodeType?: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get(musicId, level, encodeType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐播放地址，此接口支持更多参数。 ### 参数: - music_id: 音乐ID - level: 音质等级，分五个等级，标准，较高，极高，无损，hires，后两个等级不一定有支持的音源。     - 标准：standard     - 较高：higher     - 极高：exhigh     - 无损：lossLess     - hires：hires - encodeType: 编码类型，分六种类型。     - aac：aac     - mp3：mp3（默认）     - flac：flac     - alac：alac     - ape：ape     - wav：wav ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface supports more parameters. ### Parameters: - music_id: Music ID - level: Quality level, divided into five levels, standard, higher, exhigh, lossLess, hires, the last two levels may not have supported audio sources.     - standard     - higher     - exhigh     - lossLess     - hires - encodeType: Encoding type, divided into six types.     - aac     - mp3 (default)     - flac     - alac     - ape     - wav ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" level = \"exhigh\" encodeType = \"mp3\"
         * @summary 获取单一歌曲播放地址V2（支持更多参数）/Fetch one music URL V2 (support more parameters)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {string} [level] 音质等级/Quality level
         * @param {string} [encodeType] 编码类型/Encoding type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get_8(musicId: string, level?: string, encodeType?: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get_8(musicId, level, encodeType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"
         * @summary 获取单一歌曲信息V1（信息更全）| Fetch one music information V1 (more information)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get(musicId: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get(musicId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"
         * @summary 获取单一歌曲信息V1（信息更全）| Fetch one music information V1 (more information)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get_9(musicId: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get_9(musicId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"
         * @summary 获取单一歌曲信息V2（信息更少）| Fetch one music information V2 (less information)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get(musicId: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get(musicId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"
         * @summary 获取单一歌曲信息V2（信息更少）| Fetch one music information V2 (less information)
         * @param {string} musicId 歌曲ID/Music ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get_10(musicId: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get_10(musicId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户动态。 ### 参数: - uid: 用户ID。 - _time: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_time字段。 - limit: 每页数量，默认为10。 ### 返回: - 用户动态  # [English] ### Purpose: - Fetch user event. ### Parameters: - uid: User ID. - _time: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_time field returned. - limit: Number per page, default is 10. ### Returns: - User event  # [示例/Example] uid = \"254132915\" _time = \"-1\" limit = \"10\"
         * @summary 获取用户动态/Fetch user event
         * @param {string} uid 用户ID/User ID
         * @param {string} [time] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet(uid: string, time?: string, limit?: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet(uid, time, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户动态。 ### 参数: - uid: 用户ID。 - _time: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_time字段。 - limit: 每页数量，默认为10。 ### 返回: - 用户动态  # [English] ### Purpose: - Fetch user event. ### Parameters: - uid: User ID. - _time: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_time field returned. - limit: Number per page, default is 10. ### Returns: - User event  # [示例/Example] uid = \"254132915\" _time = \"-1\" limit = \"10\"
         * @summary 获取用户动态/Fetch user event
         * @param {string} uid 用户ID/User ID
         * @param {string} [time] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet_11(uid: string, time?: string, limit?: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet_11(uid, time, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表。 ### 参数: - uid: 用户ID。 - lasttime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_lasttime字段。 - pagesize: 每页数量，保持默认即可。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Fetch user followers. ### Parameters: - uid: User ID. - lasttime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_lasttime field returned. - pagesize: Number per page, keep the default. ### Returns: - User followers list  # [示例/Example] uid = \"254132915\" lasttime = \"0\" pagesize = \"20\"
         * @summary 获取用户粉丝列表/Fetch user followers
         * @param {string} uid 用户ID/User ID
         * @param {string} [lasttime] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
         * @param {string} [pagesize] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet(uid: string, lasttime?: string, pagesize?: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet(uid, lasttime, pagesize, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝列表。 ### 参数: - uid: 用户ID。 - lasttime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_lasttime字段。 - pagesize: 每页数量，保持默认即可。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Fetch user followers. ### Parameters: - uid: User ID. - lasttime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_lasttime field returned. - pagesize: Number per page, keep the default. ### Returns: - User followers list  # [示例/Example] uid = \"254132915\" lasttime = \"0\" pagesize = \"20\"
         * @summary 获取用户粉丝列表/Fetch user followers
         * @param {string} uid 用户ID/User ID
         * @param {string} [lasttime] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
         * @param {string} [pagesize] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet_12(uid: string, lasttime?: string, pagesize?: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet_12(uid, lasttime, pagesize, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Fetch user follows. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User follows list  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"
         * @summary 获取用户关注列表/Fetch user follows
         * @param {string} uid 用户ID/User ID
         * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet(uid: string, offset?: string, limit?: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet(uid, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户关注列表。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Fetch user follows. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User follows list  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"
         * @summary 获取用户关注列表/Fetch user follows
         * @param {string} uid 用户ID/User ID
         * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet_13(uid: string, offset?: string, limit?: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet_13(uid, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户信息。 ### 参数: - uid: 用户ID。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information. ### Parameters: - uid: User ID. ### Returns: - User information  # [示例/Example] uid = \"254132915\"
         * @summary 获取用户信息/Get user information
         * @param {string} uid 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet(uid: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户信息。 ### 参数: - uid: 用户ID。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information. ### Parameters: - uid: User ID. ### Returns: - User information  # [示例/Example] uid = \"254132915\"
         * @summary 获取用户信息/Get user information
         * @param {string} uid 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet_14(uid: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet_14(uid, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户歌单。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户歌单  # [English] ### Purpose: - Get user playlist. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User playlist  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"
         * @summary 获取用户歌单/Get user playlist
         * @param {string} uid 用户ID/User ID
         * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet(uid: string, offset?: string, limit?: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet(uid, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户歌单。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户歌单  # [English] ### Purpose: - Get user playlist. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User playlist  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"
         * @summary 获取用户歌单/Get user playlist
         * @param {string} uid 用户ID/User ID
         * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet_15(uid: string, offset?: string, limit?: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet_15(uid, offset, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索接口V1。 ### 参数: - keywords: 关键词。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 - _type: 搜索类型     **搜索类型 (`type`)**：     * 单曲搜索：`\"type\":\"1\"`     * 歌手搜索：`\"type\":\"100\"`     * 专辑搜索：`\"type\":\"10\"`     * 歌单搜索：`\"type\":\"1000\"`     * MV搜索：`\"type\":\"1004\"`     * 主播电台搜索：`\"type\":\"1009\"`     * 用户搜索：`\"type\":\"1002\"` ### 返回: - 搜索结果  # [English] ### Purpose: - Search interface V1. ### Parameters: - keywords: Keywords. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. - _type: Search type     **Search type (`type`)**:     * Single search: `\"type\":\"1\"`     * Singer search: `\"type\":\"100\"`     * Album search: `\"type\":\"10\"`     * Playlist search: `\"type\":\"1000\"`     * MV search: `\"type\":\"1004\"`     * Anchor radio search: `\"type\":\"1009\"`     * User search: `\"type\":\"1002\"` ### Returns: - Search results  # [示例/Example] keywords = \"周杰伦\" offset = \"0\" limit = \"20\" _type = \"1\"
         * @summary 搜索接口V1/Search interface V1
         * @param {string} keywords 关键词/Keywords
         * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {string} [type] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchV1ApiV1NetEaseCloudMusicAppSearchV1Get(keywords: string, offset?: string, limit?: string, type?: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).searchV1ApiV1NetEaseCloudMusicAppSearchV1Get(keywords, offset, limit, type, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索接口V1。 ### 参数: - keywords: 关键词。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 - _type: 搜索类型     **搜索类型 (`type`)**：     * 单曲搜索：`\"type\":\"1\"`     * 歌手搜索：`\"type\":\"100\"`     * 专辑搜索：`\"type\":\"10\"`     * 歌单搜索：`\"type\":\"1000\"`     * MV搜索：`\"type\":\"1004\"`     * 主播电台搜索：`\"type\":\"1009\"`     * 用户搜索：`\"type\":\"1002\"` ### 返回: - 搜索结果  # [English] ### Purpose: - Search interface V1. ### Parameters: - keywords: Keywords. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. - _type: Search type     **Search type (`type`)**:     * Single search: `\"type\":\"1\"`     * Singer search: `\"type\":\"100\"`     * Album search: `\"type\":\"10\"`     * Playlist search: `\"type\":\"1000\"`     * MV search: `\"type\":\"1004\"`     * Anchor radio search: `\"type\":\"1009\"`     * User search: `\"type\":\"1002\"` ### Returns: - Search results  # [示例/Example] keywords = \"周杰伦\" offset = \"0\" limit = \"20\" _type = \"1\"
         * @summary 搜索接口V1/Search interface V1
         * @param {string} keywords 关键词/Keywords
         * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
         * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
         * @param {string} [type] 搜索类型/Search type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchV1ApiV1NetEaseCloudMusicAppSearchV1Get_16(keywords: string, offset?: string, limit?: string, type?: string, options?: any): AxiosPromise<string> {
            return NetEaseCloudMusicAPIApiFp(configuration).searchV1ApiV1NetEaseCloudMusicAppSearchV1Get_16(keywords, offset, limit, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NetEaseCloudMusicAPIApi - interface
 * @export
 * @interface NetEaseCloudMusicAPIApi
 */
export interface NetEaseCloudMusicAPIApiInterface {
    /**
     * # [中文] ### 用途: - 解密网易云音乐APP POST请求中的16进制payload。 ### 参数: - payload: 16进制payload。 ### 返回: - 解密后的payload  # [English] ### Purpose: - Decrypt the 16-bit payload in the POST request of NetEase Cloud Music APP. ### Parameters: - payload: 16-bit payload. ### Returns: - Decrypted payload  # [示例/Example] payload = \"4AEEAB033C3F4068DBB74379B8C889D2187585FBBBC7CA1ADA7D10714AA139AE279A615DE7B87483A83A9091ED52D70B70DA02A7FE8A20317AA40F0FF461AC33DB77371E30F9C7F57783E800559AE08DD1E10EFC9CDC69D6815ADCDBF5A7D3006AA3B102FBE7296AB0DB9EA5C46AD12B\"
     * @summary 解密POST请求中的16进制payload/Decrypt the 16-bit payload in the POST request
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    decryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost(body?: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 解密网易云音乐APP POST请求中的16进制payload。 ### 参数: - payload: 16进制payload。 ### 返回: - 解密后的payload  # [English] ### Purpose: - Decrypt the 16-bit payload in the POST request of NetEase Cloud Music APP. ### Parameters: - payload: 16-bit payload. ### Returns: - Decrypted payload  # [示例/Example] payload = \"4AEEAB033C3F4068DBB74379B8C889D2187585FBBBC7CA1ADA7D10714AA139AE279A615DE7B87483A83A9091ED52D70B70DA02A7FE8A20317AA40F0FF461AC33DB77371E30F9C7F57783E800559AE08DD1E10EFC9CDC69D6815ADCDBF5A7D3006AA3B102FBE7296AB0DB9EA5C46AD12B\"
     * @summary 解密POST请求中的16进制payload/Decrypt the 16-bit payload in the POST request
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    decryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost_1(body?: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 加密POST请求中的payload并且返回16进制。 ### 参数: - payload: 需要加密的payload。 ### 返回: - 加密后的16进制payload  # [English] ### Purpose: - Encrypt the payload in the POST request and return 16 hexadecimal. ### Parameters: - payload: Payload to be encrypted. ### Returns: - Encrypted 16 hexadecimal payload  # [示例/Example] payload = {\"id\": 2135155051, \"br\": 192000}
     * @summary 加密POST请求中的payload并且返回16进制/Encrypt the payload in the POST request and return 16 hexadecimal
     * @param {string} uri 请求URI/Request URI
     * @param {boolean} [addVariable] 是否添加变量/Whether to add variables
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost(uri: string, addVariable?: boolean, body?: object, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 加密POST请求中的payload并且返回16进制。 ### 参数: - payload: 需要加密的payload。 ### 返回: - 加密后的16进制payload  # [English] ### Purpose: - Encrypt the payload in the POST request and return 16 hexadecimal. ### Parameters: - payload: Payload to be encrypted. ### Returns: - Encrypted 16 hexadecimal payload  # [示例/Example] payload = {\"id\": 2135155051, \"br\": 192000}
     * @summary 加密POST请求中的payload并且返回16进制/Encrypt the payload in the POST request and return 16 hexadecimal
     * @param {string} uri 请求URI/Request URI
     * @param {boolean} [addVariable] 是否添加变量/Whether to add variables
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost_2(uri: string, addVariable?: boolean, body?: object, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取歌手信息。 ### 参数: - artist_id: 歌手ID。 ### 返回: - 歌手信息  # [English] ### Purpose: - Fetch artist detail. ### Parameters: - artist_id: Artist ID. ### Returns: - Artist detail  # [示例/Example] artist_id = \"12213291\"
     * @summary 获取歌手信息/Fetch artist detail
     * @param {string} artistId 歌手ID/Artist ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet(artistId: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取歌手信息。 ### 参数: - artist_id: 歌手ID。 ### 返回: - 歌手信息  # [English] ### Purpose: - Fetch artist detail. ### Parameters: - artist_id: Artist ID. ### Returns: - Artist detail  # [示例/Example] artist_id = \"12213291\"
     * @summary 获取歌手信息/Fetch artist detail
     * @param {string} artistId 歌手ID/Artist ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet_3(artistId: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取歌曲评论。 ### 参数: - resource_id: 资源ID，可以是歌曲ID，专辑ID等。 - beforeTime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条评论的时间戳，或者查看返回的Next_Page_beforeTime字段。 - limit: 每页数量，默认为30。 ### 返回: - 歌曲评论  # [English] ### Purpose: - Fetch music comment. ### Parameters: - resource_id: Resource ID, can be song ID, album ID, etc. - beforeTime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last comment returned on the first page on the second page, or check the Next_Page_beforeTime field returned. - limit: Number per page, default is 30. ### Returns: - Music comment  # [示例/Example] resource_id = \"2135155051\" beforeTime = \"0\" limit = \"30\"
     * @summary 获取歌曲评论/Fetch music comment
     * @param {string} resourceId 资源ID/Resource ID
     * @param {string} [beforeTime] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
     * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet(resourceId: string, beforeTime?: string, limit?: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取歌曲评论。 ### 参数: - resource_id: 资源ID，可以是歌曲ID，专辑ID等。 - beforeTime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条评论的时间戳，或者查看返回的Next_Page_beforeTime字段。 - limit: 每页数量，默认为30。 ### 返回: - 歌曲评论  # [English] ### Purpose: - Fetch music comment. ### Parameters: - resource_id: Resource ID, can be song ID, album ID, etc. - beforeTime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last comment returned on the first page on the second page, or check the Next_Page_beforeTime field returned. - limit: Number per page, default is 30. ### Returns: - Music comment  # [示例/Example] resource_id = \"2135155051\" beforeTime = \"0\" limit = \"30\"
     * @summary 获取歌曲评论/Fetch music comment
     * @param {string} resourceId 资源ID/Resource ID
     * @param {string} [beforeTime] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
     * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet_4(resourceId: string, beforeTime?: string, limit?: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取Mlog（音乐视频）播放地址。 ### 参数: - mlogId: Mlog ID，可以在APP中点击分享按钮获取链接，链接中包含mlogId。 - resolution: 分辨率，默认为1080，保持默认即可。 ### 返回: - Mlog播放地址（有时候会有水印，根据视频源而定。）  # [English] ### Purpose: - Fetch Mlog (music video) playback address. ### Parameters: - mlogId: Mlog ID, you can get the link by clicking the share button in the APP, the link contains mlogId. - resolution: Resolution, default is 1080, keep the default. ### Returns: - Mlog playback address (sometimes there will be a watermark, depending on the video source.)  # [示例/Example] > 分享链接/Share link: https://fn.music.163.com/g/mlog/mlog-mobile/landing/mlog?id=a1qQQOQNVueO2g7&type=2 mlogId = \"a1qQQOQNVueO2g7\"
     * @summary Mlog（音乐视频）播放地址/Mlog (music video) playback address
     * @param {string} mlogId Mlog ID/Mlog ID
     * @param {string} [resolution] 分辨率/Resolution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet(mlogId: string, resolution?: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取Mlog（音乐视频）播放地址。 ### 参数: - mlogId: Mlog ID，可以在APP中点击分享按钮获取链接，链接中包含mlogId。 - resolution: 分辨率，默认为1080，保持默认即可。 ### 返回: - Mlog播放地址（有时候会有水印，根据视频源而定。）  # [English] ### Purpose: - Fetch Mlog (music video) playback address. ### Parameters: - mlogId: Mlog ID, you can get the link by clicking the share button in the APP, the link contains mlogId. - resolution: Resolution, default is 1080, keep the default. ### Returns: - Mlog playback address (sometimes there will be a watermark, depending on the video source.)  # [示例/Example] > 分享链接/Share link: https://fn.music.163.com/g/mlog/mlog-mobile/landing/mlog?id=a1qQQOQNVueO2g7&type=2 mlogId = \"a1qQQOQNVueO2g7\"
     * @summary Mlog（音乐视频）播放地址/Mlog (music video) playback address
     * @param {string} mlogId Mlog ID/Mlog ID
     * @param {string} [resolution] 分辨率/Resolution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet_5(mlogId: string, resolution?: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取单个音乐歌词。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐歌词  # [English] ### Purpose: - Fetch single music lyric. ### Parameters: - music_id: Music ID ### Returns: - Music lyric  # [示例/Example] music_id = \"2135155051\"
     * @summary 获取单一歌曲歌词/Fetch one music lyric
     * @param {string} musicId 歌曲ID/Music ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet(musicId: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取单个音乐歌词。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐歌词  # [English] ### Purpose: - Fetch single music lyric. ### Parameters: - music_id: Music ID ### Returns: - Music lyric  # [示例/Example] music_id = \"2135155051\"
     * @summary 获取单一歌曲歌词/Fetch one music lyric
     * @param {string} musicId 歌曲ID/Music ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet_6(musicId: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取单个音乐播放地址，此接口只能返回MP3格式的音频文件链接。 ### 参数: - music_id: 音乐ID - br: 音质码率，分四个等级，128000,192000,320000,999000 ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface can only return MP3 format audio file link. ### Parameters: - music_id: Music ID - br: Bitrate, divided into four levels, 128000,192000,320000,999000 ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" br = \"192000\"
     * @summary 获取单一歌曲播放地址V1（只能返回MP3格式，支持参数较少）/Fetch one music URL V1 (only MP3 format is supported, with fewer parameters)
     * @param {string} musicId 歌曲ID/Music ID
     * @param {string} [br] 音质码率/Bitrate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get(musicId: string, br?: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取单个音乐播放地址，此接口只能返回MP3格式的音频文件链接。 ### 参数: - music_id: 音乐ID - br: 音质码率，分四个等级，128000,192000,320000,999000 ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface can only return MP3 format audio file link. ### Parameters: - music_id: Music ID - br: Bitrate, divided into four levels, 128000,192000,320000,999000 ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" br = \"192000\"
     * @summary 获取单一歌曲播放地址V1（只能返回MP3格式，支持参数较少）/Fetch one music URL V1 (only MP3 format is supported, with fewer parameters)
     * @param {string} musicId 歌曲ID/Music ID
     * @param {string} [br] 音质码率/Bitrate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get_7(musicId: string, br?: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取单个音乐播放地址，此接口支持更多参数。 ### 参数: - music_id: 音乐ID - level: 音质等级，分五个等级，标准，较高，极高，无损，hires，后两个等级不一定有支持的音源。     - 标准：standard     - 较高：higher     - 极高：exhigh     - 无损：lossLess     - hires：hires - encodeType: 编码类型，分六种类型。     - aac：aac     - mp3：mp3（默认）     - flac：flac     - alac：alac     - ape：ape     - wav：wav ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface supports more parameters. ### Parameters: - music_id: Music ID - level: Quality level, divided into five levels, standard, higher, exhigh, lossLess, hires, the last two levels may not have supported audio sources.     - standard     - higher     - exhigh     - lossLess     - hires - encodeType: Encoding type, divided into six types.     - aac     - mp3 (default)     - flac     - alac     - ape     - wav ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" level = \"exhigh\" encodeType = \"mp3\"
     * @summary 获取单一歌曲播放地址V2（支持更多参数）/Fetch one music URL V2 (support more parameters)
     * @param {string} musicId 歌曲ID/Music ID
     * @param {string} [level] 音质等级/Quality level
     * @param {string} [encodeType] 编码类型/Encoding type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get(musicId: string, level?: string, encodeType?: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取单个音乐播放地址，此接口支持更多参数。 ### 参数: - music_id: 音乐ID - level: 音质等级，分五个等级，标准，较高，极高，无损，hires，后两个等级不一定有支持的音源。     - 标准：standard     - 较高：higher     - 极高：exhigh     - 无损：lossLess     - hires：hires - encodeType: 编码类型，分六种类型。     - aac：aac     - mp3：mp3（默认）     - flac：flac     - alac：alac     - ape：ape     - wav：wav ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface supports more parameters. ### Parameters: - music_id: Music ID - level: Quality level, divided into five levels, standard, higher, exhigh, lossLess, hires, the last two levels may not have supported audio sources.     - standard     - higher     - exhigh     - lossLess     - hires - encodeType: Encoding type, divided into six types.     - aac     - mp3 (default)     - flac     - alac     - ape     - wav ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" level = \"exhigh\" encodeType = \"mp3\"
     * @summary 获取单一歌曲播放地址V2（支持更多参数）/Fetch one music URL V2 (support more parameters)
     * @param {string} musicId 歌曲ID/Music ID
     * @param {string} [level] 音质等级/Quality level
     * @param {string} [encodeType] 编码类型/Encoding type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get_8(musicId: string, level?: string, encodeType?: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"
     * @summary 获取单一歌曲信息V1（信息更全）| Fetch one music information V1 (more information)
     * @param {string} musicId 歌曲ID/Music ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get(musicId: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"
     * @summary 获取单一歌曲信息V1（信息更全）| Fetch one music information V1 (more information)
     * @param {string} musicId 歌曲ID/Music ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get_9(musicId: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"
     * @summary 获取单一歌曲信息V2（信息更少）| Fetch one music information V2 (less information)
     * @param {string} musicId 歌曲ID/Music ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get(musicId: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"
     * @summary 获取单一歌曲信息V2（信息更少）| Fetch one music information V2 (less information)
     * @param {string} musicId 歌曲ID/Music ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get_10(musicId: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取用户动态。 ### 参数: - uid: 用户ID。 - _time: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_time字段。 - limit: 每页数量，默认为10。 ### 返回: - 用户动态  # [English] ### Purpose: - Fetch user event. ### Parameters: - uid: User ID. - _time: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_time field returned. - limit: Number per page, default is 10. ### Returns: - User event  # [示例/Example] uid = \"254132915\" _time = \"-1\" limit = \"10\"
     * @summary 获取用户动态/Fetch user event
     * @param {string} uid 用户ID/User ID
     * @param {string} [time] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
     * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet(uid: string, time?: string, limit?: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取用户动态。 ### 参数: - uid: 用户ID。 - _time: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_time字段。 - limit: 每页数量，默认为10。 ### 返回: - 用户动态  # [English] ### Purpose: - Fetch user event. ### Parameters: - uid: User ID. - _time: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_time field returned. - limit: Number per page, default is 10. ### Returns: - User event  # [示例/Example] uid = \"254132915\" _time = \"-1\" limit = \"10\"
     * @summary 获取用户动态/Fetch user event
     * @param {string} uid 用户ID/User ID
     * @param {string} [time] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
     * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet_11(uid: string, time?: string, limit?: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取用户粉丝列表。 ### 参数: - uid: 用户ID。 - lasttime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_lasttime字段。 - pagesize: 每页数量，保持默认即可。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Fetch user followers. ### Parameters: - uid: User ID. - lasttime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_lasttime field returned. - pagesize: Number per page, keep the default. ### Returns: - User followers list  # [示例/Example] uid = \"254132915\" lasttime = \"0\" pagesize = \"20\"
     * @summary 获取用户粉丝列表/Fetch user followers
     * @param {string} uid 用户ID/User ID
     * @param {string} [lasttime] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
     * @param {string} [pagesize] 每页数量，保持默认即可/Number per page, keep the default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet(uid: string, lasttime?: string, pagesize?: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取用户粉丝列表。 ### 参数: - uid: 用户ID。 - lasttime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_lasttime字段。 - pagesize: 每页数量，保持默认即可。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Fetch user followers. ### Parameters: - uid: User ID. - lasttime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_lasttime field returned. - pagesize: Number per page, keep the default. ### Returns: - User followers list  # [示例/Example] uid = \"254132915\" lasttime = \"0\" pagesize = \"20\"
     * @summary 获取用户粉丝列表/Fetch user followers
     * @param {string} uid 用户ID/User ID
     * @param {string} [lasttime] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
     * @param {string} [pagesize] 每页数量，保持默认即可/Number per page, keep the default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet_12(uid: string, lasttime?: string, pagesize?: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取用户关注列表。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Fetch user follows. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User follows list  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"
     * @summary 获取用户关注列表/Fetch user follows
     * @param {string} uid 用户ID/User ID
     * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
     * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet(uid: string, offset?: string, limit?: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取用户关注列表。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Fetch user follows. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User follows list  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"
     * @summary 获取用户关注列表/Fetch user follows
     * @param {string} uid 用户ID/User ID
     * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
     * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet_13(uid: string, offset?: string, limit?: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取用户信息。 ### 参数: - uid: 用户ID。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information. ### Parameters: - uid: User ID. ### Returns: - User information  # [示例/Example] uid = \"254132915\"
     * @summary 获取用户信息/Get user information
     * @param {string} uid 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet(uid: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取用户信息。 ### 参数: - uid: 用户ID。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information. ### Parameters: - uid: User ID. ### Returns: - User information  # [示例/Example] uid = \"254132915\"
     * @summary 获取用户信息/Get user information
     * @param {string} uid 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet_14(uid: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取用户歌单。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户歌单  # [English] ### Purpose: - Get user playlist. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User playlist  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"
     * @summary 获取用户歌单/Get user playlist
     * @param {string} uid 用户ID/User ID
     * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
     * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet(uid: string, offset?: string, limit?: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 获取用户歌单。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户歌单  # [English] ### Purpose: - Get user playlist. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User playlist  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"
     * @summary 获取用户歌单/Get user playlist
     * @param {string} uid 用户ID/User ID
     * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
     * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet_15(uid: string, offset?: string, limit?: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 搜索接口V1。 ### 参数: - keywords: 关键词。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 - _type: 搜索类型     **搜索类型 (`type`)**：     * 单曲搜索：`\"type\":\"1\"`     * 歌手搜索：`\"type\":\"100\"`     * 专辑搜索：`\"type\":\"10\"`     * 歌单搜索：`\"type\":\"1000\"`     * MV搜索：`\"type\":\"1004\"`     * 主播电台搜索：`\"type\":\"1009\"`     * 用户搜索：`\"type\":\"1002\"` ### 返回: - 搜索结果  # [English] ### Purpose: - Search interface V1. ### Parameters: - keywords: Keywords. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. - _type: Search type     **Search type (`type`)**:     * Single search: `\"type\":\"1\"`     * Singer search: `\"type\":\"100\"`     * Album search: `\"type\":\"10\"`     * Playlist search: `\"type\":\"1000\"`     * MV search: `\"type\":\"1004\"`     * Anchor radio search: `\"type\":\"1009\"`     * User search: `\"type\":\"1002\"` ### Returns: - Search results  # [示例/Example] keywords = \"周杰伦\" offset = \"0\" limit = \"20\" _type = \"1\"
     * @summary 搜索接口V1/Search interface V1
     * @param {string} keywords 关键词/Keywords
     * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
     * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
     * @param {string} [type] 搜索类型/Search type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    searchV1ApiV1NetEaseCloudMusicAppSearchV1Get(keywords: string, offset?: string, limit?: string, type?: string, options?: any): AxiosPromise<string>;

    /**
     * # [中文] ### 用途: - 搜索接口V1。 ### 参数: - keywords: 关键词。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 - _type: 搜索类型     **搜索类型 (`type`)**：     * 单曲搜索：`\"type\":\"1\"`     * 歌手搜索：`\"type\":\"100\"`     * 专辑搜索：`\"type\":\"10\"`     * 歌单搜索：`\"type\":\"1000\"`     * MV搜索：`\"type\":\"1004\"`     * 主播电台搜索：`\"type\":\"1009\"`     * 用户搜索：`\"type\":\"1002\"` ### 返回: - 搜索结果  # [English] ### Purpose: - Search interface V1. ### Parameters: - keywords: Keywords. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. - _type: Search type     **Search type (`type`)**:     * Single search: `\"type\":\"1\"`     * Singer search: `\"type\":\"100\"`     * Album search: `\"type\":\"10\"`     * Playlist search: `\"type\":\"1000\"`     * MV search: `\"type\":\"1004\"`     * Anchor radio search: `\"type\":\"1009\"`     * User search: `\"type\":\"1002\"` ### Returns: - Search results  # [示例/Example] keywords = \"周杰伦\" offset = \"0\" limit = \"20\" _type = \"1\"
     * @summary 搜索接口V1/Search interface V1
     * @param {string} keywords 关键词/Keywords
     * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
     * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
     * @param {string} [type] 搜索类型/Search type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApiInterface
     */
    searchV1ApiV1NetEaseCloudMusicAppSearchV1Get_16(keywords: string, offset?: string, limit?: string, type?: string, options?: any): AxiosPromise<string>;

}

/**
 * NetEaseCloudMusicAPIApi - object-oriented interface
 * @export
 * @class NetEaseCloudMusicAPIApi
 * @extends {BaseAPI}
 */
export class NetEaseCloudMusicAPIApi extends BaseAPI implements NetEaseCloudMusicAPIApiInterface {
    /**
     * # [中文] ### 用途: - 解密网易云音乐APP POST请求中的16进制payload。 ### 参数: - payload: 16进制payload。 ### 返回: - 解密后的payload  # [English] ### Purpose: - Decrypt the 16-bit payload in the POST request of NetEase Cloud Music APP. ### Parameters: - payload: 16-bit payload. ### Returns: - Decrypted payload  # [示例/Example] payload = \"4AEEAB033C3F4068DBB74379B8C889D2187585FBBBC7CA1ADA7D10714AA139AE279A615DE7B87483A83A9091ED52D70B70DA02A7FE8A20317AA40F0FF461AC33DB77371E30F9C7F57783E800559AE08DD1E10EFC9CDC69D6815ADCDBF5A7D3006AA3B102FBE7296AB0DB9EA5C46AD12B\"
     * @summary 解密POST请求中的16进制payload/Decrypt the 16-bit payload in the POST request
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public decryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost(body?: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).decryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 解密网易云音乐APP POST请求中的16进制payload。 ### 参数: - payload: 16进制payload。 ### 返回: - 解密后的payload  # [English] ### Purpose: - Decrypt the 16-bit payload in the POST request of NetEase Cloud Music APP. ### Parameters: - payload: 16-bit payload. ### Returns: - Decrypted payload  # [示例/Example] payload = \"4AEEAB033C3F4068DBB74379B8C889D2187585FBBBC7CA1ADA7D10714AA139AE279A615DE7B87483A83A9091ED52D70B70DA02A7FE8A20317AA40F0FF461AC33DB77371E30F9C7F57783E800559AE08DD1E10EFC9CDC69D6815ADCDBF5A7D3006AA3B102FBE7296AB0DB9EA5C46AD12B\"
     * @summary 解密POST请求中的16进制payload/Decrypt the 16-bit payload in the POST request
     * @param {string} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public decryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost_1(body?: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).decryptPostPayloadApiV1NetEaseCloudMusicAppDecryptPostPayloadPost_1(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 加密POST请求中的payload并且返回16进制。 ### 参数: - payload: 需要加密的payload。 ### 返回: - 加密后的16进制payload  # [English] ### Purpose: - Encrypt the payload in the POST request and return 16 hexadecimal. ### Parameters: - payload: Payload to be encrypted. ### Returns: - Encrypted 16 hexadecimal payload  # [示例/Example] payload = {\"id\": 2135155051, \"br\": 192000}
     * @summary 加密POST请求中的payload并且返回16进制/Encrypt the payload in the POST request and return 16 hexadecimal
     * @param {string} uri 请求URI/Request URI
     * @param {boolean} [addVariable] 是否添加变量/Whether to add variables
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost(uri: string, addVariable?: boolean, body?: object, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost(uri, addVariable, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 加密POST请求中的payload并且返回16进制。 ### 参数: - payload: 需要加密的payload。 ### 返回: - 加密后的16进制payload  # [English] ### Purpose: - Encrypt the payload in the POST request and return 16 hexadecimal. ### Parameters: - payload: Payload to be encrypted. ### Returns: - Encrypted 16 hexadecimal payload  # [示例/Example] payload = {\"id\": 2135155051, \"br\": 192000}
     * @summary 加密POST请求中的payload并且返回16进制/Encrypt the payload in the POST request and return 16 hexadecimal
     * @param {string} uri 请求URI/Request URI
     * @param {boolean} [addVariable] 是否添加变量/Whether to add variables
     * @param {object} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost_2(uri: string, addVariable?: boolean, body?: object, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).encryptPostPayloadApiV1NetEaseCloudMusicAppEncryptPostPayloadPost_2(uri, addVariable, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取歌手信息。 ### 参数: - artist_id: 歌手ID。 ### 返回: - 歌手信息  # [English] ### Purpose: - Fetch artist detail. ### Parameters: - artist_id: Artist ID. ### Returns: - Artist detail  # [示例/Example] artist_id = \"12213291\"
     * @summary 获取歌手信息/Fetch artist detail
     * @param {string} artistId 歌手ID/Artist ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet(artistId: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet(artistId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取歌手信息。 ### 参数: - artist_id: 歌手ID。 ### 返回: - 歌手信息  # [English] ### Purpose: - Fetch artist detail. ### Parameters: - artist_id: Artist ID. ### Returns: - Artist detail  # [示例/Example] artist_id = \"12213291\"
     * @summary 获取歌手信息/Fetch artist detail
     * @param {string} artistId 歌手ID/Artist ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet_3(artistId: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchArtistDetailApiV1NetEaseCloudMusicAppFetchArtistDetailGet_3(artistId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取歌曲评论。 ### 参数: - resource_id: 资源ID，可以是歌曲ID，专辑ID等。 - beforeTime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条评论的时间戳，或者查看返回的Next_Page_beforeTime字段。 - limit: 每页数量，默认为30。 ### 返回: - 歌曲评论  # [English] ### Purpose: - Fetch music comment. ### Parameters: - resource_id: Resource ID, can be song ID, album ID, etc. - beforeTime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last comment returned on the first page on the second page, or check the Next_Page_beforeTime field returned. - limit: Number per page, default is 30. ### Returns: - Music comment  # [示例/Example] resource_id = \"2135155051\" beforeTime = \"0\" limit = \"30\"
     * @summary 获取歌曲评论/Fetch music comment
     * @param {string} resourceId 资源ID/Resource ID
     * @param {string} [beforeTime] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
     * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet(resourceId: string, beforeTime?: string, limit?: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet(resourceId, beforeTime, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取歌曲评论。 ### 参数: - resource_id: 资源ID，可以是歌曲ID，专辑ID等。 - beforeTime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条评论的时间戳，或者查看返回的Next_Page_beforeTime字段。 - limit: 每页数量，默认为30。 ### 返回: - 歌曲评论  # [English] ### Purpose: - Fetch music comment. ### Parameters: - resource_id: Resource ID, can be song ID, album ID, etc. - beforeTime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last comment returned on the first page on the second page, or check the Next_Page_beforeTime field returned. - limit: Number per page, default is 30. ### Returns: - Music comment  # [示例/Example] resource_id = \"2135155051\" beforeTime = \"0\" limit = \"30\"
     * @summary 获取歌曲评论/Fetch music comment
     * @param {string} resourceId 资源ID/Resource ID
     * @param {string} [beforeTime] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
     * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet_4(resourceId: string, beforeTime?: string, limit?: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchMusicCommentApiV1NetEaseCloudMusicAppFetchMusicCommentGet_4(resourceId, beforeTime, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取Mlog（音乐视频）播放地址。 ### 参数: - mlogId: Mlog ID，可以在APP中点击分享按钮获取链接，链接中包含mlogId。 - resolution: 分辨率，默认为1080，保持默认即可。 ### 返回: - Mlog播放地址（有时候会有水印，根据视频源而定。）  # [English] ### Purpose: - Fetch Mlog (music video) playback address. ### Parameters: - mlogId: Mlog ID, you can get the link by clicking the share button in the APP, the link contains mlogId. - resolution: Resolution, default is 1080, keep the default. ### Returns: - Mlog playback address (sometimes there will be a watermark, depending on the video source.)  # [示例/Example] > 分享链接/Share link: https://fn.music.163.com/g/mlog/mlog-mobile/landing/mlog?id=a1qQQOQNVueO2g7&type=2 mlogId = \"a1qQQOQNVueO2g7\"
     * @summary Mlog（音乐视频）播放地址/Mlog (music video) playback address
     * @param {string} mlogId Mlog ID/Mlog ID
     * @param {string} [resolution] 分辨率/Resolution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet(mlogId: string, resolution?: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet(mlogId, resolution, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取Mlog（音乐视频）播放地址。 ### 参数: - mlogId: Mlog ID，可以在APP中点击分享按钮获取链接，链接中包含mlogId。 - resolution: 分辨率，默认为1080，保持默认即可。 ### 返回: - Mlog播放地址（有时候会有水印，根据视频源而定。）  # [English] ### Purpose: - Fetch Mlog (music video) playback address. ### Parameters: - mlogId: Mlog ID, you can get the link by clicking the share button in the APP, the link contains mlogId. - resolution: Resolution, default is 1080, keep the default. ### Returns: - Mlog playback address (sometimes there will be a watermark, depending on the video source.)  # [示例/Example] > 分享链接/Share link: https://fn.music.163.com/g/mlog/mlog-mobile/landing/mlog?id=a1qQQOQNVueO2g7&type=2 mlogId = \"a1qQQOQNVueO2g7\"
     * @summary Mlog（音乐视频）播放地址/Mlog (music video) playback address
     * @param {string} mlogId Mlog ID/Mlog ID
     * @param {string} [resolution] 分辨率/Resolution
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet_5(mlogId: string, resolution?: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchMusicLogVideoUrlApiV1NetEaseCloudMusicAppFetchMusicLogVideoUrlGet_5(mlogId, resolution, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个音乐歌词。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐歌词  # [English] ### Purpose: - Fetch single music lyric. ### Parameters: - music_id: Music ID ### Returns: - Music lyric  # [示例/Example] music_id = \"2135155051\"
     * @summary 获取单一歌曲歌词/Fetch one music lyric
     * @param {string} musicId 歌曲ID/Music ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet(musicId: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet(musicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个音乐歌词。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐歌词  # [English] ### Purpose: - Fetch single music lyric. ### Parameters: - music_id: Music ID ### Returns: - Music lyric  # [示例/Example] music_id = \"2135155051\"
     * @summary 获取单一歌曲歌词/Fetch one music lyric
     * @param {string} musicId 歌曲ID/Music ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet_6(musicId: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchOneMusicLyricApiV1NetEaseCloudMusicAppFetchOneMusicLyricGet_6(musicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个音乐播放地址，此接口只能返回MP3格式的音频文件链接。 ### 参数: - music_id: 音乐ID - br: 音质码率，分四个等级，128000,192000,320000,999000 ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface can only return MP3 format audio file link. ### Parameters: - music_id: Music ID - br: Bitrate, divided into four levels, 128000,192000,320000,999000 ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" br = \"192000\"
     * @summary 获取单一歌曲播放地址V1（只能返回MP3格式，支持参数较少）/Fetch one music URL V1 (only MP3 format is supported, with fewer parameters)
     * @param {string} musicId 歌曲ID/Music ID
     * @param {string} [br] 音质码率/Bitrate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get(musicId: string, br?: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get(musicId, br, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个音乐播放地址，此接口只能返回MP3格式的音频文件链接。 ### 参数: - music_id: 音乐ID - br: 音质码率，分四个等级，128000,192000,320000,999000 ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface can only return MP3 format audio file link. ### Parameters: - music_id: Music ID - br: Bitrate, divided into four levels, 128000,192000,320000,999000 ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" br = \"192000\"
     * @summary 获取单一歌曲播放地址V1（只能返回MP3格式，支持参数较少）/Fetch one music URL V1 (only MP3 format is supported, with fewer parameters)
     * @param {string} musicId 歌曲ID/Music ID
     * @param {string} [br] 音质码率/Bitrate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get_7(musicId: string, br?: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchOneMusicUrlV1ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV1Get_7(musicId, br, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个音乐播放地址，此接口支持更多参数。 ### 参数: - music_id: 音乐ID - level: 音质等级，分五个等级，标准，较高，极高，无损，hires，后两个等级不一定有支持的音源。     - 标准：standard     - 较高：higher     - 极高：exhigh     - 无损：lossLess     - hires：hires - encodeType: 编码类型，分六种类型。     - aac：aac     - mp3：mp3（默认）     - flac：flac     - alac：alac     - ape：ape     - wav：wav ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface supports more parameters. ### Parameters: - music_id: Music ID - level: Quality level, divided into five levels, standard, higher, exhigh, lossLess, hires, the last two levels may not have supported audio sources.     - standard     - higher     - exhigh     - lossLess     - hires - encodeType: Encoding type, divided into six types.     - aac     - mp3 (default)     - flac     - alac     - ape     - wav ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" level = \"exhigh\" encodeType = \"mp3\"
     * @summary 获取单一歌曲播放地址V2（支持更多参数）/Fetch one music URL V2 (support more parameters)
     * @param {string} musicId 歌曲ID/Music ID
     * @param {string} [level] 音质等级/Quality level
     * @param {string} [encodeType] 编码类型/Encoding type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get(musicId: string, level?: string, encodeType?: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get(musicId, level, encodeType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个音乐播放地址，此接口支持更多参数。 ### 参数: - music_id: 音乐ID - level: 音质等级，分五个等级，标准，较高，极高，无损，hires，后两个等级不一定有支持的音源。     - 标准：standard     - 较高：higher     - 极高：exhigh     - 无损：lossLess     - hires：hires - encodeType: 编码类型，分六种类型。     - aac：aac     - mp3：mp3（默认）     - flac：flac     - alac：alac     - ape：ape     - wav：wav ### 返回: - 音乐播放地址  # [English] ### Purpose: - Fetch single music URL, this interface supports more parameters. ### Parameters: - music_id: Music ID - level: Quality level, divided into five levels, standard, higher, exhigh, lossLess, hires, the last two levels may not have supported audio sources.     - standard     - higher     - exhigh     - lossLess     - hires - encodeType: Encoding type, divided into six types.     - aac     - mp3 (default)     - flac     - alac     - ape     - wav ### Returns: - Music URL  # [示例/Example] music_id = \"2135155051\" level = \"exhigh\" encodeType = \"mp3\"
     * @summary 获取单一歌曲播放地址V2（支持更多参数）/Fetch one music URL V2 (support more parameters)
     * @param {string} musicId 歌曲ID/Music ID
     * @param {string} [level] 音质等级/Quality level
     * @param {string} [encodeType] 编码类型/Encoding type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get_8(musicId: string, level?: string, encodeType?: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchOneMusicUrlV2ApiV1NetEaseCloudMusicAppFetchOneMusicUrlV2Get_8(musicId, level, encodeType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"
     * @summary 获取单一歌曲信息V1（信息更全）| Fetch one music information V1 (more information)
     * @param {string} musicId 歌曲ID/Music ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get(musicId: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get(musicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"
     * @summary 获取单一歌曲信息V1（信息更全）| Fetch one music information V1 (more information)
     * @param {string} musicId 歌曲ID/Music ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get_9(musicId: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchOneMusicV1ApiV1NetEaseCloudMusicAppFetchOneMusicV1Get_9(musicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"
     * @summary 获取单一歌曲信息V2（信息更少）| Fetch one music information V2 (less information)
     * @param {string} musicId 歌曲ID/Music ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get(musicId: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get(musicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个音乐数据，此接口不会返回音频文件链接，仅返回音乐信息。 ### 参数: - music_id: 音乐ID ### 返回: - 音乐数据  # [English] ### Purpose: - Fetch single music data, this interface will not return audio file link, only return music information. ### Parameters: - music_id: Music ID ### Returns: - Music data  # [示例/Example] music_id = \"2135155051\"
     * @summary 获取单一歌曲信息V2（信息更少）| Fetch one music information V2 (less information)
     * @param {string} musicId 歌曲ID/Music ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get_10(musicId: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchOneMusicV2ApiV1NetEaseCloudMusicAppFetchOneMusicV2Get_10(musicId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户动态。 ### 参数: - uid: 用户ID。 - _time: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_time字段。 - limit: 每页数量，默认为10。 ### 返回: - 用户动态  # [English] ### Purpose: - Fetch user event. ### Parameters: - uid: User ID. - _time: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_time field returned. - limit: Number per page, default is 10. ### Returns: - User event  # [示例/Example] uid = \"254132915\" _time = \"-1\" limit = \"10\"
     * @summary 获取用户动态/Fetch user event
     * @param {string} uid 用户ID/User ID
     * @param {string} [time] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
     * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet(uid: string, time?: string, limit?: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet(uid, time, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户动态。 ### 参数: - uid: 用户ID。 - _time: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_time字段。 - limit: 每页数量，默认为10。 ### 返回: - 用户动态  # [English] ### Purpose: - Fetch user event. ### Parameters: - uid: User ID. - _time: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_time field returned. - limit: Number per page, default is 10. ### Returns: - User event  # [示例/Example] uid = \"254132915\" _time = \"-1\" limit = \"10\"
     * @summary 获取用户动态/Fetch user event
     * @param {string} uid 用户ID/User ID
     * @param {string} [time] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
     * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet_11(uid: string, time?: string, limit?: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchUserEventApiV1NetEaseCloudMusicAppFetchUserEventGet_11(uid, time, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户粉丝列表。 ### 参数: - uid: 用户ID。 - lasttime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_lasttime字段。 - pagesize: 每页数量，保持默认即可。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Fetch user followers. ### Parameters: - uid: User ID. - lasttime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_lasttime field returned. - pagesize: Number per page, keep the default. ### Returns: - User followers list  # [示例/Example] uid = \"254132915\" lasttime = \"0\" pagesize = \"20\"
     * @summary 获取用户粉丝列表/Fetch user followers
     * @param {string} uid 用户ID/User ID
     * @param {string} [lasttime] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
     * @param {string} [pagesize] 每页数量，保持默认即可/Number per page, keep the default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet(uid: string, lasttime?: string, pagesize?: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet(uid, lasttime, pagesize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户粉丝列表。 ### 参数: - uid: 用户ID。 - lasttime: 时间戳，用于翻页，第一页不需要传递，第二页传递第一页返回的最后一条动态的时间戳，或者查看返回的Next_Page_lasttime字段。 - pagesize: 每页数量，保持默认即可。 ### 返回: - 用户粉丝列表  # [English] ### Purpose: - Fetch user followers. ### Parameters: - uid: User ID. - lasttime: Time stamp, used for paging, no need to pass on the first page, pass the time stamp of the last event returned on the first page on the second page, or check the Next_Page_lasttime field returned. - pagesize: Number per page, keep the default. ### Returns: - User followers list  # [示例/Example] uid = \"254132915\" lasttime = \"0\" pagesize = \"20\"
     * @summary 获取用户粉丝列表/Fetch user followers
     * @param {string} uid 用户ID/User ID
     * @param {string} [lasttime] 时间戳，用于翻页，第一页不需要传递/Time stamp, used for paging, no need to pass on the first page
     * @param {string} [pagesize] 每页数量，保持默认即可/Number per page, keep the default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet_12(uid: string, lasttime?: string, pagesize?: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchUserFollowersApiV1NetEaseCloudMusicAppFetchUserFollowersGet_12(uid, lasttime, pagesize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户关注列表。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Fetch user follows. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User follows list  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"
     * @summary 获取用户关注列表/Fetch user follows
     * @param {string} uid 用户ID/User ID
     * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
     * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet(uid: string, offset?: string, limit?: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet(uid, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户关注列表。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户关注列表  # [English] ### Purpose: - Fetch user follows. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User follows list  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"
     * @summary 获取用户关注列表/Fetch user follows
     * @param {string} uid 用户ID/User ID
     * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
     * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet_13(uid: string, offset?: string, limit?: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchUserFollowsApiV1NetEaseCloudMusicAppFetchUserFollowsGet_13(uid, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户信息。 ### 参数: - uid: 用户ID。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information. ### Parameters: - uid: User ID. ### Returns: - User information  # [示例/Example] uid = \"254132915\"
     * @summary 获取用户信息/Get user information
     * @param {string} uid 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet(uid: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户信息。 ### 参数: - uid: 用户ID。 ### 返回: - 用户信息  # [English] ### Purpose: - Get user information. ### Parameters: - uid: User ID. ### Returns: - User information  # [示例/Example] uid = \"254132915\"
     * @summary 获取用户信息/Get user information
     * @param {string} uid 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet_14(uid: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchUserInfoApiV1NetEaseCloudMusicAppFetchUserInfoGet_14(uid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户歌单。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户歌单  # [English] ### Purpose: - Get user playlist. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User playlist  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"
     * @summary 获取用户歌单/Get user playlist
     * @param {string} uid 用户ID/User ID
     * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
     * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet(uid: string, offset?: string, limit?: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet(uid, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户歌单。 ### 参数: - uid: 用户ID。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 ### 返回: - 用户歌单  # [English] ### Purpose: - Get user playlist. ### Parameters: - uid: User ID. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. ### Returns: - User playlist  # [示例/Example] uid = \"254132915\" offset = \"0\" limit = \"20\"
     * @summary 获取用户歌单/Get user playlist
     * @param {string} uid 用户ID/User ID
     * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
     * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet_15(uid: string, offset?: string, limit?: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).fetchUserPlaylistApiV1NetEaseCloudMusicAppFetchUserPlaylistGet_15(uid, offset, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索接口V1。 ### 参数: - keywords: 关键词。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 - _type: 搜索类型     **搜索类型 (`type`)**：     * 单曲搜索：`\"type\":\"1\"`     * 歌手搜索：`\"type\":\"100\"`     * 专辑搜索：`\"type\":\"10\"`     * 歌单搜索：`\"type\":\"1000\"`     * MV搜索：`\"type\":\"1004\"`     * 主播电台搜索：`\"type\":\"1009\"`     * 用户搜索：`\"type\":\"1002\"` ### 返回: - 搜索结果  # [English] ### Purpose: - Search interface V1. ### Parameters: - keywords: Keywords. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. - _type: Search type     **Search type (`type`)**:     * Single search: `\"type\":\"1\"`     * Singer search: `\"type\":\"100\"`     * Album search: `\"type\":\"10\"`     * Playlist search: `\"type\":\"1000\"`     * MV search: `\"type\":\"1004\"`     * Anchor radio search: `\"type\":\"1009\"`     * User search: `\"type\":\"1002\"` ### Returns: - Search results  # [示例/Example] keywords = \"周杰伦\" offset = \"0\" limit = \"20\" _type = \"1\"
     * @summary 搜索接口V1/Search interface V1
     * @param {string} keywords 关键词/Keywords
     * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
     * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
     * @param {string} [type] 搜索类型/Search type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public searchV1ApiV1NetEaseCloudMusicAppSearchV1Get(keywords: string, offset?: string, limit?: string, type?: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).searchV1ApiV1NetEaseCloudMusicAppSearchV1Get(keywords, offset, limit, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索接口V1。 ### 参数: - keywords: 关键词。 - offset: 偏移量，第一次搜索传递0，第二次传递20，第三次传递40，以此类推。 - limit: 每页数量，保持默认即可。 - _type: 搜索类型     **搜索类型 (`type`)**：     * 单曲搜索：`\"type\":\"1\"`     * 歌手搜索：`\"type\":\"100\"`     * 专辑搜索：`\"type\":\"10\"`     * 歌单搜索：`\"type\":\"1000\"`     * MV搜索：`\"type\":\"1004\"`     * 主播电台搜索：`\"type\":\"1009\"`     * 用户搜索：`\"type\":\"1002\"` ### 返回: - 搜索结果  # [English] ### Purpose: - Search interface V1. ### Parameters: - keywords: Keywords. - offset: Offset, pass 0 for the first search, 20 for the second search, 40 for the third search, and so on. - limit: Number per page, keep the default. - _type: Search type     **Search type (`type`)**:     * Single search: `\"type\":\"1\"`     * Singer search: `\"type\":\"100\"`     * Album search: `\"type\":\"10\"`     * Playlist search: `\"type\":\"1000\"`     * MV search: `\"type\":\"1004\"`     * Anchor radio search: `\"type\":\"1009\"`     * User search: `\"type\":\"1002\"` ### Returns: - Search results  # [示例/Example] keywords = \"周杰伦\" offset = \"0\" limit = \"20\" _type = \"1\"
     * @summary 搜索接口V1/Search interface V1
     * @param {string} keywords 关键词/Keywords
     * @param {string} [offset] 偏移量，保持默认即可/Offset, keep the default
     * @param {string} [limit] 每页数量，保持默认即可/Number per page, keep the default
     * @param {string} [type] 搜索类型/Search type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetEaseCloudMusicAPIApi
     */
    public searchV1ApiV1NetEaseCloudMusicAppSearchV1Get_16(keywords: string, offset?: string, limit?: string, type?: string, options?: any) {
        return NetEaseCloudMusicAPIApiFp(this.configuration).searchV1ApiV1NetEaseCloudMusicAppSearchV1Get_16(keywords, offset, limit, type, options).then((request) => request(this.axios, this.basePath));
    }

}
