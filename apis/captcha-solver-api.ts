// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost } from '../models';
// @ts-ignore
import { BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost } from '../models';
// @ts-ignore
import { BodyHcaptchaApiV1CaptchaHcaptchaPost } from '../models';
// @ts-ignore
import { BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post } from '../models';
// @ts-ignore
import { BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post } from '../models';
// @ts-ignore
import { BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost } from '../models';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
/**
 * CaptchaSolverApi - axios parameter creator
 * @export
 */
export const CaptchaSolverApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - Amazon Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Amazon Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id = \"10000000\" url = \"https://www.amazon.com/\" proxy = None
         * @summary Amazon Captcha Solver/Amazon验证码解决器
         * @param {BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost} [bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amazonCaptchaApiV1CaptchaAmazonCaptchaPost: async (bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost?: BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/captcha/amazon_captcha`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost !== undefined ? bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost : {}) : (bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - Amazon Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Amazon Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id = \"10000000\" url = \"https://www.amazon.com/\" proxy = None
         * @summary Amazon Captcha Solver/Amazon验证码解决器
         * @param {BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost} [bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amazonCaptchaApiV1CaptchaAmazonCaptchaPost_1: async (bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost?: BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/captcha/amazon_captcha`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost !== undefined ? bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost : {}) : (bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - Cloudflare Turnstile验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Cloudflare Turnstile captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - action: Default is None - data: Default is None - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"1x00000000000000000000AA\" url = \"https://demo.turnstile.workers.dev\" proxy = None
         * @summary Cloudflare Turnstile Solver/Cloudflare Turnstile解决器
         * @param {BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost} [bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost: async (bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost?: BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/captcha/cloudflare_turnstile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost !== undefined ? bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost : {}) : (bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - Cloudflare Turnstile验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Cloudflare Turnstile captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - action: Default is None - data: Default is None - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"1x00000000000000000000AA\" url = \"https://demo.turnstile.workers.dev\" proxy = None
         * @summary Cloudflare Turnstile Solver/Cloudflare Turnstile解决器
         * @param {BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost} [bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_2: async (bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost?: BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/captcha/cloudflare_turnstile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost !== undefined ? bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost : {}) : (bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - hCaptcha验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - hCaptcha captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"10000000-ffff-ffff-ffff-000000000001\" url = \"https://www.hcaptcha.com/\" proxy = None
         * @summary hCaptcha Solver/hCaptcha解决器
         * @param {BodyHcaptchaApiV1CaptchaHcaptchaPost} [bodyHcaptchaApiV1CaptchaHcaptchaPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hcaptchaApiV1CaptchaHcaptchaPost: async (bodyHcaptchaApiV1CaptchaHcaptchaPost?: BodyHcaptchaApiV1CaptchaHcaptchaPost, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/captcha/hcaptcha`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bodyHcaptchaApiV1CaptchaHcaptchaPost !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bodyHcaptchaApiV1CaptchaHcaptchaPost !== undefined ? bodyHcaptchaApiV1CaptchaHcaptchaPost : {}) : (bodyHcaptchaApiV1CaptchaHcaptchaPost || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - hCaptcha验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - hCaptcha captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"10000000-ffff-ffff-ffff-000000000001\" url = \"https://www.hcaptcha.com/\" proxy = None
         * @summary hCaptcha Solver/hCaptcha解决器
         * @param {BodyHcaptchaApiV1CaptchaHcaptchaPost} [bodyHcaptchaApiV1CaptchaHcaptchaPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hcaptchaApiV1CaptchaHcaptchaPost_3: async (bodyHcaptchaApiV1CaptchaHcaptchaPost?: BodyHcaptchaApiV1CaptchaHcaptchaPost, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/captcha/hcaptcha`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bodyHcaptchaApiV1CaptchaHcaptchaPost !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bodyHcaptchaApiV1CaptchaHcaptchaPost !== undefined ? bodyHcaptchaApiV1CaptchaHcaptchaPost : {}) : (bodyHcaptchaApiV1CaptchaHcaptchaPost || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - Recaptcha V2验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V2 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\" url = \"https://www.google.com/recaptcha/api2/demo\" proxy = None
         * @summary Recaptcha V2 Solver/Recaptcha V2解决器
         * @param {BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post} [bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recaptchaV2ApiV1CaptchaRecaptchaV2Post: async (bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post?: BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/captcha/recaptcha_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post !== undefined ? bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post : {}) : (bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - Recaptcha V2验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V2 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\" url = \"https://www.google.com/recaptcha/api2/demo\" proxy = None
         * @summary Recaptcha V2 Solver/Recaptcha V2解决器
         * @param {BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post} [bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recaptchaV2ApiV1CaptchaRecaptchaV2Post_4: async (bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post?: BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/captcha/recaptcha_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post !== undefined ? bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post : {}) : (bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - Recaptcha V3验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V3 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\" url = \"https://www.google.com/recaptcha/api2/demo\" proxy = None
         * @summary Recaptcha V3 Solver/Recaptcha V3解决器
         * @param {BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post} [bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recaptchaV3ApiV1CaptchaRecaptchaV3Post: async (bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post?: BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/captcha/recaptcha_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post !== undefined ? bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post : {}) : (bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - Recaptcha V3验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V3 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\" url = \"https://www.google.com/recaptcha/api2/demo\" proxy = None
         * @summary Recaptcha V3 Solver/Recaptcha V3解决器
         * @param {BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post} [bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recaptchaV3ApiV1CaptchaRecaptchaV3Post_5: async (bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post?: BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/captcha/recaptcha_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post !== undefined ? bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post : {}) : (bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - Tencent Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Tencent Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id = \"10000000\" url = \"https://www.tencent.com/\" proxy = None
         * @summary Tencent Captcha Solver/Tencent验证码解决器
         * @param {BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost} [bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tencentCaptchaApiV1CaptchaTencentCaptchaPost: async (bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost?: BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/captcha/tencent_captcha`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost !== undefined ? bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost : {}) : (bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - Tencent Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Tencent Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id = \"10000000\" url = \"https://www.tencent.com/\" proxy = None
         * @summary Tencent Captcha Solver/Tencent验证码解决器
         * @param {BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost} [bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tencentCaptchaApiV1CaptchaTencentCaptchaPost_6: async (bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost?: BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/captcha/tencent_captcha`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost !== undefined ? bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost : {}) : (bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CaptchaSolverApi - functional programming interface
 * @export
 */
export const CaptchaSolverApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - Amazon Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Amazon Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id = \"10000000\" url = \"https://www.amazon.com/\" proxy = None
         * @summary Amazon Captcha Solver/Amazon验证码解决器
         * @param {BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost} [bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async amazonCaptchaApiV1CaptchaAmazonCaptchaPost(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost?: BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await CaptchaSolverApiAxiosParamCreator(configuration).amazonCaptchaApiV1CaptchaAmazonCaptchaPost(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - Amazon Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Amazon Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id = \"10000000\" url = \"https://www.amazon.com/\" proxy = None
         * @summary Amazon Captcha Solver/Amazon验证码解决器
         * @param {BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost} [bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async amazonCaptchaApiV1CaptchaAmazonCaptchaPost_1(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost?: BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await CaptchaSolverApiAxiosParamCreator(configuration).amazonCaptchaApiV1CaptchaAmazonCaptchaPost_1(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - Cloudflare Turnstile验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Cloudflare Turnstile captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - action: Default is None - data: Default is None - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"1x00000000000000000000AA\" url = \"https://demo.turnstile.workers.dev\" proxy = None
         * @summary Cloudflare Turnstile Solver/Cloudflare Turnstile解决器
         * @param {BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost} [bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost?: BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await CaptchaSolverApiAxiosParamCreator(configuration).cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - Cloudflare Turnstile验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Cloudflare Turnstile captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - action: Default is None - data: Default is None - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"1x00000000000000000000AA\" url = \"https://demo.turnstile.workers.dev\" proxy = None
         * @summary Cloudflare Turnstile Solver/Cloudflare Turnstile解决器
         * @param {BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost} [bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_2(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost?: BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await CaptchaSolverApiAxiosParamCreator(configuration).cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_2(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - hCaptcha验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - hCaptcha captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"10000000-ffff-ffff-ffff-000000000001\" url = \"https://www.hcaptcha.com/\" proxy = None
         * @summary hCaptcha Solver/hCaptcha解决器
         * @param {BodyHcaptchaApiV1CaptchaHcaptchaPost} [bodyHcaptchaApiV1CaptchaHcaptchaPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hcaptchaApiV1CaptchaHcaptchaPost(bodyHcaptchaApiV1CaptchaHcaptchaPost?: BodyHcaptchaApiV1CaptchaHcaptchaPost, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await CaptchaSolverApiAxiosParamCreator(configuration).hcaptchaApiV1CaptchaHcaptchaPost(bodyHcaptchaApiV1CaptchaHcaptchaPost, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - hCaptcha验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - hCaptcha captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"10000000-ffff-ffff-ffff-000000000001\" url = \"https://www.hcaptcha.com/\" proxy = None
         * @summary hCaptcha Solver/hCaptcha解决器
         * @param {BodyHcaptchaApiV1CaptchaHcaptchaPost} [bodyHcaptchaApiV1CaptchaHcaptchaPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async hcaptchaApiV1CaptchaHcaptchaPost_3(bodyHcaptchaApiV1CaptchaHcaptchaPost?: BodyHcaptchaApiV1CaptchaHcaptchaPost, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await CaptchaSolverApiAxiosParamCreator(configuration).hcaptchaApiV1CaptchaHcaptchaPost_3(bodyHcaptchaApiV1CaptchaHcaptchaPost, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - Recaptcha V2验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V2 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\" url = \"https://www.google.com/recaptcha/api2/demo\" proxy = None
         * @summary Recaptcha V2 Solver/Recaptcha V2解决器
         * @param {BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post} [bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recaptchaV2ApiV1CaptchaRecaptchaV2Post(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post?: BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await CaptchaSolverApiAxiosParamCreator(configuration).recaptchaV2ApiV1CaptchaRecaptchaV2Post(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - Recaptcha V2验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V2 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\" url = \"https://www.google.com/recaptcha/api2/demo\" proxy = None
         * @summary Recaptcha V2 Solver/Recaptcha V2解决器
         * @param {BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post} [bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recaptchaV2ApiV1CaptchaRecaptchaV2Post_4(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post?: BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await CaptchaSolverApiAxiosParamCreator(configuration).recaptchaV2ApiV1CaptchaRecaptchaV2Post_4(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - Recaptcha V3验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V3 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\" url = \"https://www.google.com/recaptcha/api2/demo\" proxy = None
         * @summary Recaptcha V3 Solver/Recaptcha V3解决器
         * @param {BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post} [bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recaptchaV3ApiV1CaptchaRecaptchaV3Post(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post?: BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await CaptchaSolverApiAxiosParamCreator(configuration).recaptchaV3ApiV1CaptchaRecaptchaV3Post(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - Recaptcha V3验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V3 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\" url = \"https://www.google.com/recaptcha/api2/demo\" proxy = None
         * @summary Recaptcha V3 Solver/Recaptcha V3解决器
         * @param {BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post} [bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recaptchaV3ApiV1CaptchaRecaptchaV3Post_5(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post?: BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await CaptchaSolverApiAxiosParamCreator(configuration).recaptchaV3ApiV1CaptchaRecaptchaV3Post_5(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - Tencent Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Tencent Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id = \"10000000\" url = \"https://www.tencent.com/\" proxy = None
         * @summary Tencent Captcha Solver/Tencent验证码解决器
         * @param {BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost} [bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tencentCaptchaApiV1CaptchaTencentCaptchaPost(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost?: BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await CaptchaSolverApiAxiosParamCreator(configuration).tencentCaptchaApiV1CaptchaTencentCaptchaPost(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - Tencent Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Tencent Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id = \"10000000\" url = \"https://www.tencent.com/\" proxy = None
         * @summary Tencent Captcha Solver/Tencent验证码解决器
         * @param {BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost} [bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tencentCaptchaApiV1CaptchaTencentCaptchaPost_6(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost?: BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await CaptchaSolverApiAxiosParamCreator(configuration).tencentCaptchaApiV1CaptchaTencentCaptchaPost_6(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CaptchaSolverApi - factory interface
 * @export
 */
export const CaptchaSolverApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - Amazon Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Amazon Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id = \"10000000\" url = \"https://www.amazon.com/\" proxy = None
         * @summary Amazon Captcha Solver/Amazon验证码解决器
         * @param {BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost} [bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amazonCaptchaApiV1CaptchaAmazonCaptchaPost(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost?: BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, options?: any): AxiosPromise<ResponseModel> {
            return CaptchaSolverApiFp(configuration).amazonCaptchaApiV1CaptchaAmazonCaptchaPost(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - Amazon Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Amazon Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id = \"10000000\" url = \"https://www.amazon.com/\" proxy = None
         * @summary Amazon Captcha Solver/Amazon验证码解决器
         * @param {BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost} [bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        amazonCaptchaApiV1CaptchaAmazonCaptchaPost_1(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost?: BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, options?: any): AxiosPromise<ResponseModel> {
            return CaptchaSolverApiFp(configuration).amazonCaptchaApiV1CaptchaAmazonCaptchaPost_1(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - Cloudflare Turnstile验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Cloudflare Turnstile captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - action: Default is None - data: Default is None - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"1x00000000000000000000AA\" url = \"https://demo.turnstile.workers.dev\" proxy = None
         * @summary Cloudflare Turnstile Solver/Cloudflare Turnstile解决器
         * @param {BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost} [bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost?: BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, options?: any): AxiosPromise<ResponseModel> {
            return CaptchaSolverApiFp(configuration).cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - Cloudflare Turnstile验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Cloudflare Turnstile captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - action: Default is None - data: Default is None - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"1x00000000000000000000AA\" url = \"https://demo.turnstile.workers.dev\" proxy = None
         * @summary Cloudflare Turnstile Solver/Cloudflare Turnstile解决器
         * @param {BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost} [bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_2(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost?: BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, options?: any): AxiosPromise<ResponseModel> {
            return CaptchaSolverApiFp(configuration).cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_2(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - hCaptcha验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - hCaptcha captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"10000000-ffff-ffff-ffff-000000000001\" url = \"https://www.hcaptcha.com/\" proxy = None
         * @summary hCaptcha Solver/hCaptcha解决器
         * @param {BodyHcaptchaApiV1CaptchaHcaptchaPost} [bodyHcaptchaApiV1CaptchaHcaptchaPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hcaptchaApiV1CaptchaHcaptchaPost(bodyHcaptchaApiV1CaptchaHcaptchaPost?: BodyHcaptchaApiV1CaptchaHcaptchaPost, options?: any): AxiosPromise<ResponseModel> {
            return CaptchaSolverApiFp(configuration).hcaptchaApiV1CaptchaHcaptchaPost(bodyHcaptchaApiV1CaptchaHcaptchaPost, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - hCaptcha验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - hCaptcha captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"10000000-ffff-ffff-ffff-000000000001\" url = \"https://www.hcaptcha.com/\" proxy = None
         * @summary hCaptcha Solver/hCaptcha解决器
         * @param {BodyHcaptchaApiV1CaptchaHcaptchaPost} [bodyHcaptchaApiV1CaptchaHcaptchaPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        hcaptchaApiV1CaptchaHcaptchaPost_3(bodyHcaptchaApiV1CaptchaHcaptchaPost?: BodyHcaptchaApiV1CaptchaHcaptchaPost, options?: any): AxiosPromise<ResponseModel> {
            return CaptchaSolverApiFp(configuration).hcaptchaApiV1CaptchaHcaptchaPost_3(bodyHcaptchaApiV1CaptchaHcaptchaPost, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - Recaptcha V2验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V2 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\" url = \"https://www.google.com/recaptcha/api2/demo\" proxy = None
         * @summary Recaptcha V2 Solver/Recaptcha V2解决器
         * @param {BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post} [bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recaptchaV2ApiV1CaptchaRecaptchaV2Post(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post?: BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, options?: any): AxiosPromise<ResponseModel> {
            return CaptchaSolverApiFp(configuration).recaptchaV2ApiV1CaptchaRecaptchaV2Post(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - Recaptcha V2验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V2 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\" url = \"https://www.google.com/recaptcha/api2/demo\" proxy = None
         * @summary Recaptcha V2 Solver/Recaptcha V2解决器
         * @param {BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post} [bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recaptchaV2ApiV1CaptchaRecaptchaV2Post_4(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post?: BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, options?: any): AxiosPromise<ResponseModel> {
            return CaptchaSolverApiFp(configuration).recaptchaV2ApiV1CaptchaRecaptchaV2Post_4(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - Recaptcha V3验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V3 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\" url = \"https://www.google.com/recaptcha/api2/demo\" proxy = None
         * @summary Recaptcha V3 Solver/Recaptcha V3解决器
         * @param {BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post} [bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recaptchaV3ApiV1CaptchaRecaptchaV3Post(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post?: BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, options?: any): AxiosPromise<ResponseModel> {
            return CaptchaSolverApiFp(configuration).recaptchaV3ApiV1CaptchaRecaptchaV3Post(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - Recaptcha V3验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V3 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\" url = \"https://www.google.com/recaptcha/api2/demo\" proxy = None
         * @summary Recaptcha V3 Solver/Recaptcha V3解决器
         * @param {BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post} [bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recaptchaV3ApiV1CaptchaRecaptchaV3Post_5(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post?: BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, options?: any): AxiosPromise<ResponseModel> {
            return CaptchaSolverApiFp(configuration).recaptchaV3ApiV1CaptchaRecaptchaV3Post_5(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - Tencent Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Tencent Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id = \"10000000\" url = \"https://www.tencent.com/\" proxy = None
         * @summary Tencent Captcha Solver/Tencent验证码解决器
         * @param {BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost} [bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tencentCaptchaApiV1CaptchaTencentCaptchaPost(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost?: BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, options?: any): AxiosPromise<ResponseModel> {
            return CaptchaSolverApiFp(configuration).tencentCaptchaApiV1CaptchaTencentCaptchaPost(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - Tencent Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Tencent Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id = \"10000000\" url = \"https://www.tencent.com/\" proxy = None
         * @summary Tencent Captcha Solver/Tencent验证码解决器
         * @param {BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost} [bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tencentCaptchaApiV1CaptchaTencentCaptchaPost_6(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost?: BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, options?: any): AxiosPromise<ResponseModel> {
            return CaptchaSolverApiFp(configuration).tencentCaptchaApiV1CaptchaTencentCaptchaPost_6(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CaptchaSolverApi - interface
 * @export
 * @interface CaptchaSolverApi
 */
export interface CaptchaSolverApiInterface {
    /**
     * # [中文] ### 用途: - Amazon Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Amazon Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id = \"10000000\" url = \"https://www.amazon.com/\" proxy = None
     * @summary Amazon Captcha Solver/Amazon验证码解决器
     * @param {BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost} [bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApiInterface
     */
    amazonCaptchaApiV1CaptchaAmazonCaptchaPost(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost?: BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - Amazon Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Amazon Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id = \"10000000\" url = \"https://www.amazon.com/\" proxy = None
     * @summary Amazon Captcha Solver/Amazon验证码解决器
     * @param {BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost} [bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApiInterface
     */
    amazonCaptchaApiV1CaptchaAmazonCaptchaPost_1(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost?: BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - Cloudflare Turnstile验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Cloudflare Turnstile captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - action: Default is None - data: Default is None - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"1x00000000000000000000AA\" url = \"https://demo.turnstile.workers.dev\" proxy = None
     * @summary Cloudflare Turnstile Solver/Cloudflare Turnstile解决器
     * @param {BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost} [bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApiInterface
     */
    cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost?: BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - Cloudflare Turnstile验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Cloudflare Turnstile captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - action: Default is None - data: Default is None - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"1x00000000000000000000AA\" url = \"https://demo.turnstile.workers.dev\" proxy = None
     * @summary Cloudflare Turnstile Solver/Cloudflare Turnstile解决器
     * @param {BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost} [bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApiInterface
     */
    cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_2(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost?: BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - hCaptcha验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - hCaptcha captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"10000000-ffff-ffff-ffff-000000000001\" url = \"https://www.hcaptcha.com/\" proxy = None
     * @summary hCaptcha Solver/hCaptcha解决器
     * @param {BodyHcaptchaApiV1CaptchaHcaptchaPost} [bodyHcaptchaApiV1CaptchaHcaptchaPost] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApiInterface
     */
    hcaptchaApiV1CaptchaHcaptchaPost(bodyHcaptchaApiV1CaptchaHcaptchaPost?: BodyHcaptchaApiV1CaptchaHcaptchaPost, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - hCaptcha验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - hCaptcha captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"10000000-ffff-ffff-ffff-000000000001\" url = \"https://www.hcaptcha.com/\" proxy = None
     * @summary hCaptcha Solver/hCaptcha解决器
     * @param {BodyHcaptchaApiV1CaptchaHcaptchaPost} [bodyHcaptchaApiV1CaptchaHcaptchaPost] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApiInterface
     */
    hcaptchaApiV1CaptchaHcaptchaPost_3(bodyHcaptchaApiV1CaptchaHcaptchaPost?: BodyHcaptchaApiV1CaptchaHcaptchaPost, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - Recaptcha V2验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V2 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\" url = \"https://www.google.com/recaptcha/api2/demo\" proxy = None
     * @summary Recaptcha V2 Solver/Recaptcha V2解决器
     * @param {BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post} [bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApiInterface
     */
    recaptchaV2ApiV1CaptchaRecaptchaV2Post(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post?: BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - Recaptcha V2验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V2 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\" url = \"https://www.google.com/recaptcha/api2/demo\" proxy = None
     * @summary Recaptcha V2 Solver/Recaptcha V2解决器
     * @param {BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post} [bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApiInterface
     */
    recaptchaV2ApiV1CaptchaRecaptchaV2Post_4(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post?: BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - Recaptcha V3验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V3 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\" url = \"https://www.google.com/recaptcha/api2/demo\" proxy = None
     * @summary Recaptcha V3 Solver/Recaptcha V3解决器
     * @param {BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post} [bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApiInterface
     */
    recaptchaV3ApiV1CaptchaRecaptchaV3Post(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post?: BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - Recaptcha V3验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V3 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\" url = \"https://www.google.com/recaptcha/api2/demo\" proxy = None
     * @summary Recaptcha V3 Solver/Recaptcha V3解决器
     * @param {BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post} [bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApiInterface
     */
    recaptchaV3ApiV1CaptchaRecaptchaV3Post_5(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post?: BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - Tencent Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Tencent Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id = \"10000000\" url = \"https://www.tencent.com/\" proxy = None
     * @summary Tencent Captcha Solver/Tencent验证码解决器
     * @param {BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost} [bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApiInterface
     */
    tencentCaptchaApiV1CaptchaTencentCaptchaPost(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost?: BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - Tencent Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Tencent Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id = \"10000000\" url = \"https://www.tencent.com/\" proxy = None
     * @summary Tencent Captcha Solver/Tencent验证码解决器
     * @param {BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost} [bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApiInterface
     */
    tencentCaptchaApiV1CaptchaTencentCaptchaPost_6(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost?: BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * CaptchaSolverApi - object-oriented interface
 * @export
 * @class CaptchaSolverApi
 * @extends {BaseAPI}
 */
export class CaptchaSolverApi extends BaseAPI implements CaptchaSolverApiInterface {
    /**
     * # [中文] ### 用途: - Amazon Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Amazon Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id = \"10000000\" url = \"https://www.amazon.com/\" proxy = None
     * @summary Amazon Captcha Solver/Amazon验证码解决器
     * @param {BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost} [bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApi
     */
    public amazonCaptchaApiV1CaptchaAmazonCaptchaPost(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost?: BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, options?: any) {
        return CaptchaSolverApiFp(this.configuration).amazonCaptchaApiV1CaptchaAmazonCaptchaPost(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - Amazon Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Amazon Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id = \"10000000\" url = \"https://www.amazon.com/\" proxy = None
     * @summary Amazon Captcha Solver/Amazon验证码解决器
     * @param {BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost} [bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApi
     */
    public amazonCaptchaApiV1CaptchaAmazonCaptchaPost_1(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost?: BodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, options?: any) {
        return CaptchaSolverApiFp(this.configuration).amazonCaptchaApiV1CaptchaAmazonCaptchaPost_1(bodyAmazonCaptchaApiV1CaptchaAmazonCaptchaPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - Cloudflare Turnstile验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Cloudflare Turnstile captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - action: Default is None - data: Default is None - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"1x00000000000000000000AA\" url = \"https://demo.turnstile.workers.dev\" proxy = None
     * @summary Cloudflare Turnstile Solver/Cloudflare Turnstile解决器
     * @param {BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost} [bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApi
     */
    public cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost?: BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, options?: any) {
        return CaptchaSolverApiFp(this.configuration).cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - Cloudflare Turnstile验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Cloudflare Turnstile captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - action: Default is None - data: Default is None - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"1x00000000000000000000AA\" url = \"https://demo.turnstile.workers.dev\" proxy = None
     * @summary Cloudflare Turnstile Solver/Cloudflare Turnstile解决器
     * @param {BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost} [bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApi
     */
    public cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_2(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost?: BodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, options?: any) {
        return CaptchaSolverApiFp(this.configuration).cloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost_2(bodyCloudflareTurnstileApiV1CaptchaCloudflareTurnstilePost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - hCaptcha验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - hCaptcha captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"10000000-ffff-ffff-ffff-000000000001\" url = \"https://www.hcaptcha.com/\" proxy = None
     * @summary hCaptcha Solver/hCaptcha解决器
     * @param {BodyHcaptchaApiV1CaptchaHcaptchaPost} [bodyHcaptchaApiV1CaptchaHcaptchaPost] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApi
     */
    public hcaptchaApiV1CaptchaHcaptchaPost(bodyHcaptchaApiV1CaptchaHcaptchaPost?: BodyHcaptchaApiV1CaptchaHcaptchaPost, options?: any) {
        return CaptchaSolverApiFp(this.configuration).hcaptchaApiV1CaptchaHcaptchaPost(bodyHcaptchaApiV1CaptchaHcaptchaPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - hCaptcha验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - hCaptcha captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"10000000-ffff-ffff-ffff-000000000001\" url = \"https://www.hcaptcha.com/\" proxy = None
     * @summary hCaptcha Solver/hCaptcha解决器
     * @param {BodyHcaptchaApiV1CaptchaHcaptchaPost} [bodyHcaptchaApiV1CaptchaHcaptchaPost] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApi
     */
    public hcaptchaApiV1CaptchaHcaptchaPost_3(bodyHcaptchaApiV1CaptchaHcaptchaPost?: BodyHcaptchaApiV1CaptchaHcaptchaPost, options?: any) {
        return CaptchaSolverApiFp(this.configuration).hcaptchaApiV1CaptchaHcaptchaPost_3(bodyHcaptchaApiV1CaptchaHcaptchaPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - Recaptcha V2验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V2 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\" url = \"https://www.google.com/recaptcha/api2/demo\" proxy = None
     * @summary Recaptcha V2 Solver/Recaptcha V2解决器
     * @param {BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post} [bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApi
     */
    public recaptchaV2ApiV1CaptchaRecaptchaV2Post(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post?: BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, options?: any) {
        return CaptchaSolverApiFp(this.configuration).recaptchaV2ApiV1CaptchaRecaptchaV2Post(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - Recaptcha V2验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V2 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\" url = \"https://www.google.com/recaptcha/api2/demo\" proxy = None
     * @summary Recaptcha V2 Solver/Recaptcha V2解决器
     * @param {BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post} [bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApi
     */
    public recaptchaV2ApiV1CaptchaRecaptchaV2Post_4(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post?: BodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, options?: any) {
        return CaptchaSolverApiFp(this.configuration).recaptchaV2ApiV1CaptchaRecaptchaV2Post_4(bodyRecaptchaV2ApiV1CaptchaRecaptchaV2Post, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - Recaptcha V3验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V3 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\" url = \"https://www.google.com/recaptcha/api2/demo\" proxy = None
     * @summary Recaptcha V3 Solver/Recaptcha V3解决器
     * @param {BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post} [bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApi
     */
    public recaptchaV3ApiV1CaptchaRecaptchaV3Post(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post?: BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, options?: any) {
        return CaptchaSolverApiFp(this.configuration).recaptchaV3ApiV1CaptchaRecaptchaV3Post(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - Recaptcha V3验证码解决器 ### 参数: - sitekey: 在HTML中可以找到网站对应的sitekey - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Recaptcha V3 captcha solver ### Parameters: - sitekey: The sitekey corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] sitekey = \"6Le-wvkSAAAAAPBMRTvw0Q4Muexq9bi0DJwx_mJ-\" url = \"https://www.google.com/recaptcha/api2/demo\" proxy = None
     * @summary Recaptcha V3 Solver/Recaptcha V3解决器
     * @param {BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post} [bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApi
     */
    public recaptchaV3ApiV1CaptchaRecaptchaV3Post_5(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post?: BodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, options?: any) {
        return CaptchaSolverApiFp(this.configuration).recaptchaV3ApiV1CaptchaRecaptchaV3Post_5(bodyRecaptchaV3ApiV1CaptchaRecaptchaV3Post, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - Tencent Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Tencent Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id = \"10000000\" url = \"https://www.tencent.com/\" proxy = None
     * @summary Tencent Captcha Solver/Tencent验证码解决器
     * @param {BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost} [bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApi
     */
    public tencentCaptchaApiV1CaptchaTencentCaptchaPost(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost?: BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, options?: any) {
        return CaptchaSolverApiFp(this.configuration).tencentCaptchaApiV1CaptchaTencentCaptchaPost(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - Tencent Captcha验证码解决器 ### 参数: - app_id: 在HTML中可以找到网站对应的app_id - url: 需要解决验证码的URL - proxy: 默认为None ### 返回: - 返回验证码解决结果  # [English] ### Purpose: - Tencent Captcha solver ### Parameters: - app_id: The app_id corresponding to the website can be found in the HTML - url: URL that needs to solve the captcha - proxy: Default is None ### Return: - Return the captcha solution result  # [Example/示例] app_id = \"10000000\" url = \"https://www.tencent.com/\" proxy = None
     * @summary Tencent Captcha Solver/Tencent验证码解决器
     * @param {BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost} [bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CaptchaSolverApi
     */
    public tencentCaptchaApiV1CaptchaTencentCaptchaPost_6(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost?: BodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, options?: any) {
        return CaptchaSolverApiFp(this.configuration).tencentCaptchaApiV1CaptchaTencentCaptchaPost_6(bodyTencentCaptchaApiV1CaptchaTencentCaptchaPost, options).then((request) => request(this.axios, this.basePath));
    }

}
