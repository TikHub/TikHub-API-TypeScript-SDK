// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
/**
 * KuaishouAppAPIApi - axios parameter creator
 * @export
 */
export const KuaishouAppAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 快手品牌榜单 ### 参数: 获取快手品牌榜单，支持多个子榜单，具体参数如下：  - 品牌榜单热门美妆榜对应参数：     - subTabId = 0     - subTabName = None - 品牌榜单热门服饰榜对应参数：     - subTabId = 131     - subTabName = \"服饰\" - 品牌榜单热门汽车榜对应参数：     - subTabId = 1     - subTabName = \"汽车\" - 品牌榜单热门游戏榜对应参数：     - subTabId = 25     - subTabName = \"游戏\" - 品牌榜单热门医疗健康榜对应参数：     - subTabId = 24     - subTabName = \"医疗健康\" - 品牌榜单热门3C数码榜对应参数：     - subTabId = 130     - subTabName = \"3C数码\" - 品牌榜单热门手机榜对应参数：     - subTabId = 128     - subTabName = \"手机\" - 品牌榜单热门家电榜对应参数：     - subTabId = 11     - subTabName = \"家电\" - 品牌榜单热门母婴榜对应参数：     - subTabId = 4     - subTabName = \"母婴\" - 品牌榜单热门食品饮料榜对应参数：     - subTabId = 2     - subTabName = \"食品饮料\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou brand top list ### Parameters: Get the Kuaishou brand top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the brand hot beauty list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the brand hot clothing list:     - subTabId = 131     - subTabName = \"Clothing\" - Corresponding parameters for the brand hot car list:     - subTabId = 1     - subTabName = \"Car\" - Corresponding parameters for the brand hot game list:     - subTabId = 25     - subTabName = \"Game\" - Corresponding parameters for the brand hot medical health list:     - subTabId = 24     - subTabName = \"Medical Health\" - Corresponding parameters for the brand hot 3C digital list:     - subTabId = 130     - subTabName = \"3C Digital\" - Corresponding parameters for the brand hot mobile phone list:     - subTabId = 128     - subTabName = \"Mobile Phone\" - Corresponding parameters for the brand hot home appliance list:     - subTabId = 11     - subTabName = \"Home Appliance\" - Corresponding parameters for the brand hot maternal and child list:     - subTabId = 4     - subTabName = \"Maternal and Child\" - Corresponding parameters for the brand hot food and beverage list:     - subTabId = 2     - subTabName = \"Food and Beverage\"   ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
         * @summary 快手品牌榜单/Kuaishou brand top list
         * @param {number} [subTabId] 
         * @param {string} [subTabName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet: async (subTabId?: number, subTabName?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kuaishou/app/fetch_brand_top_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (subTabId !== undefined) {
                localVarQueryParameter['subTabId'] = subTabId;
            }

            if (subTabName !== undefined) {
                localVarQueryParameter['subTabName'] = subTabName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 快手品牌榜单 ### 参数: 获取快手品牌榜单，支持多个子榜单，具体参数如下：  - 品牌榜单热门美妆榜对应参数：     - subTabId = 0     - subTabName = None - 品牌榜单热门服饰榜对应参数：     - subTabId = 131     - subTabName = \"服饰\" - 品牌榜单热门汽车榜对应参数：     - subTabId = 1     - subTabName = \"汽车\" - 品牌榜单热门游戏榜对应参数：     - subTabId = 25     - subTabName = \"游戏\" - 品牌榜单热门医疗健康榜对应参数：     - subTabId = 24     - subTabName = \"医疗健康\" - 品牌榜单热门3C数码榜对应参数：     - subTabId = 130     - subTabName = \"3C数码\" - 品牌榜单热门手机榜对应参数：     - subTabId = 128     - subTabName = \"手机\" - 品牌榜单热门家电榜对应参数：     - subTabId = 11     - subTabName = \"家电\" - 品牌榜单热门母婴榜对应参数：     - subTabId = 4     - subTabName = \"母婴\" - 品牌榜单热门食品饮料榜对应参数：     - subTabId = 2     - subTabName = \"食品饮料\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou brand top list ### Parameters: Get the Kuaishou brand top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the brand hot beauty list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the brand hot clothing list:     - subTabId = 131     - subTabName = \"Clothing\" - Corresponding parameters for the brand hot car list:     - subTabId = 1     - subTabName = \"Car\" - Corresponding parameters for the brand hot game list:     - subTabId = 25     - subTabName = \"Game\" - Corresponding parameters for the brand hot medical health list:     - subTabId = 24     - subTabName = \"Medical Health\" - Corresponding parameters for the brand hot 3C digital list:     - subTabId = 130     - subTabName = \"3C Digital\" - Corresponding parameters for the brand hot mobile phone list:     - subTabId = 128     - subTabName = \"Mobile Phone\" - Corresponding parameters for the brand hot home appliance list:     - subTabId = 11     - subTabName = \"Home Appliance\" - Corresponding parameters for the brand hot maternal and child list:     - subTabId = 4     - subTabName = \"Maternal and Child\" - Corresponding parameters for the brand hot food and beverage list:     - subTabId = 2     - subTabName = \"Food and Beverage\"   ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
         * @summary 快手品牌榜单/Kuaishou brand top list
         * @param {number} [subTabId] 
         * @param {string} [subTabName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet_1: async (subTabId?: number, subTabName?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kuaishou/app/fetch_brand_top_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (subTabId !== undefined) {
                localVarQueryParameter['subTabId'] = subTabId;
            }

            if (subTabName !== undefined) {
                localVarQueryParameter['subTabName'] = subTabName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 快手热榜分类 ### 返回: - 分类数据  # [English] ### Purpose: - Kuaishou hot categories ### Returns: - Categories data
         * @summary 快手热榜分类/Kuaishou hot categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kuaishou/app/fetch_hot_board_categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 快手热榜分类 ### 返回: - 分类数据  # [English] ### Purpose: - Kuaishou hot categories ### Returns: - Categories data
         * @summary 快手热榜分类/Kuaishou hot categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet_2: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kuaishou/app/fetch_hot_board_categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 快手热榜详情 ### 参数: - boardType: 榜单类型 - boardId: 榜单ID - boardType 和 boardId 可以从热榜分类接口中获取。 ### 返回: - 详情数据  # [English] ### Purpose: - Kuaishou hot board detail ### Parameters: - boardType: Board type - boardId: Board ID - boardType and boardId can be obtained from the hot board categories interface. ### Returns: - Detail data  # [示例/Example] boardType = 1 boardId = 1
         * @summary 快手热榜详情/Kuaishou hot board detail
         * @param {number} [boardType] 
         * @param {number} [boardId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet: async (boardType?: number, boardId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kuaishou/app/fetch_hot_board_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (boardType !== undefined) {
                localVarQueryParameter['boardType'] = boardType;
            }

            if (boardId !== undefined) {
                localVarQueryParameter['boardId'] = boardId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 快手热榜详情 ### 参数: - boardType: 榜单类型 - boardId: 榜单ID - boardType 和 boardId 可以从热榜分类接口中获取。 ### 返回: - 详情数据  # [English] ### Purpose: - Kuaishou hot board detail ### Parameters: - boardType: Board type - boardId: Board ID - boardType and boardId can be obtained from the hot board categories interface. ### Returns: - Detail data  # [示例/Example] boardType = 1 boardId = 1
         * @summary 快手热榜详情/Kuaishou hot board detail
         * @param {number} [boardType] 
         * @param {number} [boardId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet_3: async (boardType?: number, boardId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kuaishou/app/fetch_hot_board_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (boardType !== undefined) {
                localVarQueryParameter['boardType'] = boardType;
            }

            if (boardId !== undefined) {
                localVarQueryParameter['boardId'] = boardId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 快手热搜人物榜单 ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou hot search person board ### Returns: - Board data
         * @summary 快手热搜人物榜单/Kuaishou hot search person board
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kuaishou/app/fetch_hot_search_person`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 快手热搜人物榜单 ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou hot search person board ### Returns: - Board data
         * @summary 快手热搜人物榜单/Kuaishou hot search person board
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet_4: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kuaishou/app/fetch_hot_search_person`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 快手直播榜单 ### 参数: 获取快手直播榜单，支持多个子榜单，具体参数如下：  - 直播总榜对应参数：     - subTabId = 0     - subTabName = None - 直播音乐榜对应参数：     - subTabId = 102     - subTabName = \"音乐\" - 直播舞蹈榜对应参数：     - subTabId = 107     - subTabName = \"舞蹈\" - 直播颜值榜对应参数：     - subTabId = 101     - subTabName = \"颜值\" - 直播国艺榜对应参数：     - subTabId = 105     - subTabName = \"国艺\" - 直播相亲榜对应参数：     - subTabId = 111     - subTabName = \"相亲\" - 直播游戏榜对应参数：     - subTabId = 106     - subTabName = \"游戏\" - 直播二次元榜对应参数：     - subTabId = 110     - subTabName = \"二次元\" - 直播故事榜对应参数：     - subTabId = 104     - subTabName = \"故事\" - 直播团播榜对应参数：     - subTabId = 113     - subTabName = \"团播\" - 直播九宫格榜对应参数：     - subTabId = 114     - subTabName = \"九宫格\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou live top list ### Parameters: Get the Kuaishou live top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the live total list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the live music list:     - subTabId = 102     - subTabName = \"Music\" - Corresponding parameters for the live dance list:     - subTabId = 107     - subTabName = \"Dance\" - Corresponding parameters for the live beauty list:     - subTabId = 101     - subTabName = \"Beauty\" - Corresponding parameters for the live national art list:     - subTabId = 105     - subTabName = \"National Art\" - Corresponding parameters for the live blind date list:     - subTabId = 111     - subTabName = \"Blind Date\" - Corresponding parameters for the live game list:     - subTabId = 106     - subTabName = \"Game\" - Corresponding parameters for the live second element list:     - subTabId = 110     - subTabName = \"Second Element\" - Corresponding parameters for the live story list:     - subTabId = 104     - subTabName = \"Story\" - Corresponding parameters for the live group broadcast list:     - subTabId = 113     - subTabName = \"Group Broadcast\" - Corresponding parameters for the live nine-grid list:     - subTabId = 114     - subTabName = \"Nine Grid\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
         * @summary 快手直播榜单/Kuaishou live top list
         * @param {number} [subTabId] 
         * @param {string} [subTabName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet: async (subTabId?: number, subTabName?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kuaishou/app/fetch_live_top_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (subTabId !== undefined) {
                localVarQueryParameter['subTabId'] = subTabId;
            }

            if (subTabName !== undefined) {
                localVarQueryParameter['subTabName'] = subTabName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 快手直播榜单 ### 参数: 获取快手直播榜单，支持多个子榜单，具体参数如下：  - 直播总榜对应参数：     - subTabId = 0     - subTabName = None - 直播音乐榜对应参数：     - subTabId = 102     - subTabName = \"音乐\" - 直播舞蹈榜对应参数：     - subTabId = 107     - subTabName = \"舞蹈\" - 直播颜值榜对应参数：     - subTabId = 101     - subTabName = \"颜值\" - 直播国艺榜对应参数：     - subTabId = 105     - subTabName = \"国艺\" - 直播相亲榜对应参数：     - subTabId = 111     - subTabName = \"相亲\" - 直播游戏榜对应参数：     - subTabId = 106     - subTabName = \"游戏\" - 直播二次元榜对应参数：     - subTabId = 110     - subTabName = \"二次元\" - 直播故事榜对应参数：     - subTabId = 104     - subTabName = \"故事\" - 直播团播榜对应参数：     - subTabId = 113     - subTabName = \"团播\" - 直播九宫格榜对应参数：     - subTabId = 114     - subTabName = \"九宫格\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou live top list ### Parameters: Get the Kuaishou live top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the live total list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the live music list:     - subTabId = 102     - subTabName = \"Music\" - Corresponding parameters for the live dance list:     - subTabId = 107     - subTabName = \"Dance\" - Corresponding parameters for the live beauty list:     - subTabId = 101     - subTabName = \"Beauty\" - Corresponding parameters for the live national art list:     - subTabId = 105     - subTabName = \"National Art\" - Corresponding parameters for the live blind date list:     - subTabId = 111     - subTabName = \"Blind Date\" - Corresponding parameters for the live game list:     - subTabId = 106     - subTabName = \"Game\" - Corresponding parameters for the live second element list:     - subTabId = 110     - subTabName = \"Second Element\" - Corresponding parameters for the live story list:     - subTabId = 104     - subTabName = \"Story\" - Corresponding parameters for the live group broadcast list:     - subTabId = 113     - subTabName = \"Group Broadcast\" - Corresponding parameters for the live nine-grid list:     - subTabId = 114     - subTabName = \"Nine Grid\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
         * @summary 快手直播榜单/Kuaishou live top list
         * @param {number} [subTabId] 
         * @param {string} [subTabName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet_5: async (subTabId?: number, subTabName?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kuaishou/app/fetch_live_top_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (subTabId !== undefined) {
                localVarQueryParameter['subTabId'] = subTabId;
            }

            if (subTabName !== undefined) {
                localVarQueryParameter['subTabName'] = subTabName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个用户数据 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 支持`eid`或`userId`，eid是用户主页链接中的一部分，user_id则可以从不同的接口中获取。 - 两种用户ID都可以使用，下面是两种用户ID的示例，这两个ID都指向同一个用户：     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### 返回: - 用户数据  # [English] ### Purpose: - Fetch single user data V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: Supports `eid` or `userId`, `eid` is part of the user profile link, and `user_id` can be obtained from different interfaces. - Both user IDs can be used, here are examples of the two user IDs, both of which point to the same user:     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### Returns: - User data  # [示例/Example] user_id = \"3xz63mn6fngqtiq\"
         * @summary 获取单个用户数据V2/Get single user data V2
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get.');
            }
            const localVarPath = `/api/v1/kuaishou/app/fetch_one_user_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个用户数据 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 支持`eid`或`userId`，eid是用户主页链接中的一部分，user_id则可以从不同的接口中获取。 - 两种用户ID都可以使用，下面是两种用户ID的示例，这两个ID都指向同一个用户：     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### 返回: - 用户数据  # [English] ### Purpose: - Fetch single user data V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: Supports `eid` or `userId`, `eid` is part of the user profile link, and `user_id` can be obtained from different interfaces. - Both user IDs can be used, here are examples of the two user IDs, both of which point to the same user:     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### Returns: - User data  # [示例/Example] user_id = \"3xz63mn6fngqtiq\"
         * @summary 获取单个用户数据V2/Get single user data V2
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get_6: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get_6.');
            }
            const localVarPath = `/api/v1/kuaishou/app/fetch_one_user_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据链接获取单个作品数据，此接口默认使用价格更便宜的V1接口进行请求。 ### 参数: - share_text: 作品链接或分享文本 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL, this API defaults to using the cheaper V1 API for requests. ### Parameters: - share_text: Photo URL or share text ### Returns: - Video data  # [示例/Example] share_text = \"https://v.kuaishou.com/cNYP0Z\"
         * @summary 根据链接获取单个作品数据/Fetch single video by URL
         * @param {string} shareText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet: async (shareText: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareText' is not null or undefined
            if (shareText === null || shareText === undefined) {
                throw new RequiredError('shareText','Required parameter shareText was null or undefined when calling fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet.');
            }
            const localVarPath = `/api/v1/kuaishou/app/fetch_one_video_by_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareText !== undefined) {
                localVarQueryParameter['share_text'] = shareText;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 根据链接获取单个作品数据，此接口默认使用价格更便宜的V1接口进行请求。 ### 参数: - share_text: 作品链接或分享文本 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL, this API defaults to using the cheaper V1 API for requests. ### Parameters: - share_text: Photo URL or share text ### Returns: - Video data  # [示例/Example] share_text = \"https://v.kuaishou.com/cNYP0Z\"
         * @summary 根据链接获取单个作品数据/Fetch single video by URL
         * @param {string} shareText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet_7: async (shareText: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareText' is not null or undefined
            if (shareText === null || shareText === undefined) {
                throw new RequiredError('shareText','Required parameter shareText was null or undefined when calling fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet_7.');
            }
            const localVarPath = `/api/v1/kuaishou/app/fetch_one_video_by_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareText !== undefined) {
                localVarQueryParameter['share_text'] = shareText;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，如果此接口连续请求失败，可以尝试使用价格更昂贵的V2接口进行冗余请求。 ### 参数: - photo_id: 作品ID，作品ID可以从分享链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, if this API continuously fails, you can try to use the more expensive V2 API for redundant requests. ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the share link ### Returns: - Video data  # [示例/Example] photo_id = \"3xhpk3xcf6e4iac\"
         * @summary 快手单一视频查询接口V1/Kuaishou single video query API V1
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet: async (photoId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'photoId' is not null or undefined
            if (photoId === null || photoId === undefined) {
                throw new RequiredError('photoId','Required parameter photoId was null or undefined when calling fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet.');
            }
            const localVarPath = `/api/v1/kuaishou/app/fetch_one_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (photoId !== undefined) {
                localVarQueryParameter['photo_id'] = photoId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，如果此接口连续请求失败，可以尝试使用价格更昂贵的V2接口进行冗余请求。 ### 参数: - photo_id: 作品ID，作品ID可以从分享链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, if this API continuously fails, you can try to use the more expensive V2 API for redundant requests. ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the share link ### Returns: - Video data  # [示例/Example] photo_id = \"3xhpk3xcf6e4iac\"
         * @summary 快手单一视频查询接口V1/Kuaishou single video query API V1
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet_8: async (photoId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'photoId' is not null or undefined
            if (photoId === null || photoId === undefined) {
                throw new RequiredError('photoId','Required parameter photoId was null or undefined when calling fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet_8.');
            }
            const localVarPath = `/api/v1/kuaishou/app/fetch_one_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (photoId !== undefined) {
                localVarQueryParameter['photo_id'] = photoId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据接口 V2，此接口仅作为备选接口，收费较贵，但稳定性更高。 - 此接口请求价格为 0.01 美元/次，请求不成功不收费。 ### 参数: - photo_id: 作品ID ### 返回: - 视频数据  # [English] ### Purpose: - Single video query API V2, this API is only used as an alternative API, it is more expensive, but more stable. - The request price of this API is 0.01 USD/time, and the request is not successful without charge. ### Parameters: - photo_id: Photo ID ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"
         * @summary 快手单一视频查询接口V2/Kuaishou single video query API V2
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get: async (photoId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'photoId' is not null or undefined
            if (photoId === null || photoId === undefined) {
                throw new RequiredError('photoId','Required parameter photoId was null or undefined when calling fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get.');
            }
            const localVarPath = `/api/v1/kuaishou/app/fetch_one_video_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (photoId !== undefined) {
                localVarQueryParameter['photo_id'] = photoId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据接口 V2，此接口仅作为备选接口，收费较贵，但稳定性更高。 - 此接口请求价格为 0.01 美元/次，请求不成功不收费。 ### 参数: - photo_id: 作品ID ### 返回: - 视频数据  # [English] ### Purpose: - Single video query API V2, this API is only used as an alternative API, it is more expensive, but more stable. - The request price of this API is 0.01 USD/time, and the request is not successful without charge. ### Parameters: - photo_id: Photo ID ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"
         * @summary 快手单一视频查询接口V2/Kuaishou single video query API V2
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get_9: async (photoId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'photoId' is not null or undefined
            if (photoId === null || photoId === undefined) {
                throw new RequiredError('photoId','Required parameter photoId was null or undefined when calling fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get_9.');
            }
            const localVarPath = `/api/v1/kuaishou/app/fetch_one_video_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (photoId !== undefined) {
                localVarQueryParameter['photo_id'] = photoId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 快手购物榜单 ### 参数: 获取快手购物榜单，支持多个子榜单，具体参数如下：  - 购物榜单热门主播榜对应参数：     - subTabId = 0     - subTabName = None - 购物榜单热销商品榜对应参数：     - subTabId = 102     - subTabName = \"热销商品\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou shopping top list ### Parameters: Get the Kuaishou shopping top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the shopping hot anchor list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the shopping hot selling product list:     - subTabId = 102     - subTabName = \"Hot Selling Product\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
         * @summary 快手购物榜单/Kuaishou shopping top list
         * @param {number} [subTabId] 
         * @param {string} [subTabName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet: async (subTabId?: number, subTabName?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kuaishou/app/fetch_shopping_top_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (subTabId !== undefined) {
                localVarQueryParameter['subTabId'] = subTabId;
            }

            if (subTabName !== undefined) {
                localVarQueryParameter['subTabName'] = subTabName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 快手购物榜单 ### 参数: 获取快手购物榜单，支持多个子榜单，具体参数如下：  - 购物榜单热门主播榜对应参数：     - subTabId = 0     - subTabName = None - 购物榜单热销商品榜对应参数：     - subTabId = 102     - subTabName = \"热销商品\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou shopping top list ### Parameters: Get the Kuaishou shopping top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the shopping hot anchor list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the shopping hot selling product list:     - subTabId = 102     - subTabName = \"Hot Selling Product\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
         * @summary 快手购物榜单/Kuaishou shopping top list
         * @param {number} [subTabId] 
         * @param {string} [subTabName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet_10: async (subTabId?: number, subTabName?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/kuaishou/app/fetch_shopping_top_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (subTabId !== undefined) {
                localVarQueryParameter['subTabId'] = subTabId;
            }

            if (subTabName !== undefined) {
                localVarQueryParameter['subTabName'] = subTabName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户热门作品数据 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 作品游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 作品数据  # [English] ### Purpose: - Get user hot post data ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Post cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Post data  # [示例/Example] user_id = \"228905802\" pcursor = None
         * @summary 获取用户热门作品数据/Get user hot post data
         * @param {string} userId 
         * @param {string} [pcursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet: async (userId: string, pcursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet.');
            }
            const localVarPath = `/api/v1/kuaishou/app/fetch_user_hot_post`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (pcursor !== undefined) {
                localVarQueryParameter['pcursor'] = pcursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户热门作品数据 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 作品游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 作品数据  # [English] ### Purpose: - Get user hot post data ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Post cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Post data  # [示例/Example] user_id = \"228905802\" pcursor = None
         * @summary 获取用户热门作品数据/Get user hot post data
         * @param {string} userId 
         * @param {string} [pcursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet_11: async (userId: string, pcursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet_11.');
            }
            const localVarPath = `/api/v1/kuaishou/app/fetch_user_hot_post`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (pcursor !== undefined) {
                localVarQueryParameter['pcursor'] = pcursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户直播信息 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 ### 返回: - 直播信息  # [English] ### Purpose: - Get user live info ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. ### Returns: - Live info  # [示例/Example] user_id = \"1377082950\"
         * @summary 获取用户直播信息/Get user live info
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet.');
            }
            const localVarPath = `/api/v1/kuaishou/app/fetch_user_live_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户直播信息 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 ### 返回: - 直播信息  # [English] ### Purpose: - Get user live info ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. ### Returns: - Live info  # [示例/Example] user_id = \"1377082950\"
         * @summary 获取用户直播信息/Get user live info
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet_12: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet_12.');
            }
            const localVarPath = `/api/v1/kuaishou/app/fetch_user_live_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 用户视频列表 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - User video list V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id = \"228905802\" pcursor = None
         * @summary 用户视频列表V2/User video list V2
         * @param {string} userId 
         * @param {string} [pcursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get: async (userId: string, pcursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get.');
            }
            const localVarPath = `/api/v1/kuaishou/app/fetch_user_post_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (pcursor !== undefined) {
                localVarQueryParameter['pcursor'] = pcursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 用户视频列表 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - User video list V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id = \"228905802\" pcursor = None
         * @summary 用户视频列表V2/User video list V2
         * @param {string} userId 
         * @param {string} [pcursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get_13: async (userId: string, pcursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get_13.');
            }
            const localVarPath = `/api/v1/kuaishou/app/fetch_user_post_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (pcursor !== undefined) {
                localVarQueryParameter['pcursor'] = pcursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id = \"3x7gxp2zhgjv832\" pcursor = None
         * @summary 获取单个作品评论数据/Get single video comment data
         * @param {string} photoId 
         * @param {string} [pcursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet: async (photoId: string, pcursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'photoId' is not null or undefined
            if (photoId === null || photoId === undefined) {
                throw new RequiredError('photoId','Required parameter photoId was null or undefined when calling fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet.');
            }
            const localVarPath = `/api/v1/kuaishou/app/fetch_one_video_comment`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (photoId !== undefined) {
                localVarQueryParameter['photo_id'] = photoId;
            }

            if (pcursor !== undefined) {
                localVarQueryParameter['pcursor'] = pcursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id = \"3x7gxp2zhgjv832\" pcursor = None
         * @summary 获取单个作品评论数据/Get single video comment data
         * @param {string} photoId 
         * @param {string} [pcursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet_14: async (photoId: string, pcursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'photoId' is not null or undefined
            if (photoId === null || photoId === undefined) {
                throw new RequiredError('photoId','Required parameter photoId was null or undefined when calling fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet_14.');
            }
            const localVarPath = `/api/v1/kuaishou/app/fetch_one_video_comment`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (photoId !== undefined) {
                localVarQueryParameter['photo_id'] = photoId;
            }

            if (pcursor !== undefined) {
                localVarQueryParameter['pcursor'] = pcursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成快手分享链接 ### 参数: - shareObjectId: 作品ID ### 返回: - 分享链接  # [English] ### Purpose: - Generate Kuaishou share link ### Parameters: - photo_id: Photo ID ### Returns: - Share link  # [示例/Example] shareObjectId = \"3xg5wjqdtekbb3u\"
         * @summary 生成快手分享链接/Generate Kuaishou share link
         * @param {string} shareObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet: async (shareObjectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareObjectId' is not null or undefined
            if (shareObjectId === null || shareObjectId === undefined) {
                throw new RequiredError('shareObjectId','Required parameter shareObjectId was null or undefined when calling generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet.');
            }
            const localVarPath = `/api/v1/kuaishou/app/generate_kuaishou_share_link`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareObjectId !== undefined) {
                localVarQueryParameter['shareObjectId'] = shareObjectId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 生成快手分享链接 ### 参数: - shareObjectId: 作品ID ### 返回: - 分享链接  # [English] ### Purpose: - Generate Kuaishou share link ### Parameters: - photo_id: Photo ID ### Returns: - Share link  # [示例/Example] shareObjectId = \"3xg5wjqdtekbb3u\"
         * @summary 生成快手分享链接/Generate Kuaishou share link
         * @param {string} shareObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet_15: async (shareObjectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareObjectId' is not null or undefined
            if (shareObjectId === null || shareObjectId === undefined) {
                throw new RequiredError('shareObjectId','Required parameter shareObjectId was null or undefined when calling generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet_15.');
            }
            const localVarPath = `/api/v1/kuaishou/app/generate_kuaishou_share_link`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareObjectId !== undefined) {
                localVarQueryParameter['shareObjectId'] = shareObjectId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索用户 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 用户页数，从1开始 ### 返回: - 用户数据  # [English] ### Purpose: - Search user V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: User page number, starting from 1 ### Returns: - User data  # [示例/Example] keyword = \"人工智能\" page = \"1\"
         * @summary 搜索用户V2/Search user V2
         * @param {string} keyword 
         * @param {string} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUserV2ApiV1KuaishouAppSearchUserV2Get: async (keyword: string, page?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling searchUserV2ApiV1KuaishouAppSearchUserV2Get.');
            }
            const localVarPath = `/api/v1/kuaishou/app/search_user_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索用户 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 用户页数，从1开始 ### 返回: - 用户数据  # [English] ### Purpose: - Search user V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: User page number, starting from 1 ### Returns: - User data  # [示例/Example] keyword = \"人工智能\" page = \"1\"
         * @summary 搜索用户V2/Search user V2
         * @param {string} keyword 
         * @param {string} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUserV2ApiV1KuaishouAppSearchUserV2Get_16: async (keyword: string, page?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling searchUserV2ApiV1KuaishouAppSearchUserV2Get_16.');
            }
            const localVarPath = `/api/v1/kuaishou/app/search_user_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索视频 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 视频页数，从1开始 ### 返回: - 视频数据  # [English] ### Purpose: - Search video V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: Page number, starting from 1 ### Returns: - Videos data  # [示例/Example] keyword = \"人工智能\" page = \"1\"
         * @summary 搜索视频V2/Search video V2
         * @param {string} keyword 
         * @param {string} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVideoV2ApiV1KuaishouAppSearchVideoV2Get: async (keyword: string, page?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling searchVideoV2ApiV1KuaishouAppSearchVideoV2Get.');
            }
            const localVarPath = `/api/v1/kuaishou/app/search_video_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索视频 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 视频页数，从1开始 ### 返回: - 视频数据  # [English] ### Purpose: - Search video V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: Page number, starting from 1 ### Returns: - Videos data  # [示例/Example] keyword = \"人工智能\" page = \"1\"
         * @summary 搜索视频V2/Search video V2
         * @param {string} keyword 
         * @param {string} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVideoV2ApiV1KuaishouAppSearchVideoV2Get_17: async (keyword: string, page?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling searchVideoV2ApiV1KuaishouAppSearchVideoV2Get_17.');
            }
            const localVarPath = `/api/v1/kuaishou/app/search_video_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * KuaishouAppAPIApi - functional programming interface
 * @export
 */
export const KuaishouAppAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 快手品牌榜单 ### 参数: 获取快手品牌榜单，支持多个子榜单，具体参数如下：  - 品牌榜单热门美妆榜对应参数：     - subTabId = 0     - subTabName = None - 品牌榜单热门服饰榜对应参数：     - subTabId = 131     - subTabName = \"服饰\" - 品牌榜单热门汽车榜对应参数：     - subTabId = 1     - subTabName = \"汽车\" - 品牌榜单热门游戏榜对应参数：     - subTabId = 25     - subTabName = \"游戏\" - 品牌榜单热门医疗健康榜对应参数：     - subTabId = 24     - subTabName = \"医疗健康\" - 品牌榜单热门3C数码榜对应参数：     - subTabId = 130     - subTabName = \"3C数码\" - 品牌榜单热门手机榜对应参数：     - subTabId = 128     - subTabName = \"手机\" - 品牌榜单热门家电榜对应参数：     - subTabId = 11     - subTabName = \"家电\" - 品牌榜单热门母婴榜对应参数：     - subTabId = 4     - subTabName = \"母婴\" - 品牌榜单热门食品饮料榜对应参数：     - subTabId = 2     - subTabName = \"食品饮料\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou brand top list ### Parameters: Get the Kuaishou brand top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the brand hot beauty list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the brand hot clothing list:     - subTabId = 131     - subTabName = \"Clothing\" - Corresponding parameters for the brand hot car list:     - subTabId = 1     - subTabName = \"Car\" - Corresponding parameters for the brand hot game list:     - subTabId = 25     - subTabName = \"Game\" - Corresponding parameters for the brand hot medical health list:     - subTabId = 24     - subTabName = \"Medical Health\" - Corresponding parameters for the brand hot 3C digital list:     - subTabId = 130     - subTabName = \"3C Digital\" - Corresponding parameters for the brand hot mobile phone list:     - subTabId = 128     - subTabName = \"Mobile Phone\" - Corresponding parameters for the brand hot home appliance list:     - subTabId = 11     - subTabName = \"Home Appliance\" - Corresponding parameters for the brand hot maternal and child list:     - subTabId = 4     - subTabName = \"Maternal and Child\" - Corresponding parameters for the brand hot food and beverage list:     - subTabId = 2     - subTabName = \"Food and Beverage\"   ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
         * @summary 快手品牌榜单/Kuaishou brand top list
         * @param {number} [subTabId] 
         * @param {string} [subTabName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet(subTabId?: number, subTabName?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet(subTabId, subTabName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 快手品牌榜单 ### 参数: 获取快手品牌榜单，支持多个子榜单，具体参数如下：  - 品牌榜单热门美妆榜对应参数：     - subTabId = 0     - subTabName = None - 品牌榜单热门服饰榜对应参数：     - subTabId = 131     - subTabName = \"服饰\" - 品牌榜单热门汽车榜对应参数：     - subTabId = 1     - subTabName = \"汽车\" - 品牌榜单热门游戏榜对应参数：     - subTabId = 25     - subTabName = \"游戏\" - 品牌榜单热门医疗健康榜对应参数：     - subTabId = 24     - subTabName = \"医疗健康\" - 品牌榜单热门3C数码榜对应参数：     - subTabId = 130     - subTabName = \"3C数码\" - 品牌榜单热门手机榜对应参数：     - subTabId = 128     - subTabName = \"手机\" - 品牌榜单热门家电榜对应参数：     - subTabId = 11     - subTabName = \"家电\" - 品牌榜单热门母婴榜对应参数：     - subTabId = 4     - subTabName = \"母婴\" - 品牌榜单热门食品饮料榜对应参数：     - subTabId = 2     - subTabName = \"食品饮料\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou brand top list ### Parameters: Get the Kuaishou brand top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the brand hot beauty list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the brand hot clothing list:     - subTabId = 131     - subTabName = \"Clothing\" - Corresponding parameters for the brand hot car list:     - subTabId = 1     - subTabName = \"Car\" - Corresponding parameters for the brand hot game list:     - subTabId = 25     - subTabName = \"Game\" - Corresponding parameters for the brand hot medical health list:     - subTabId = 24     - subTabName = \"Medical Health\" - Corresponding parameters for the brand hot 3C digital list:     - subTabId = 130     - subTabName = \"3C Digital\" - Corresponding parameters for the brand hot mobile phone list:     - subTabId = 128     - subTabName = \"Mobile Phone\" - Corresponding parameters for the brand hot home appliance list:     - subTabId = 11     - subTabName = \"Home Appliance\" - Corresponding parameters for the brand hot maternal and child list:     - subTabId = 4     - subTabName = \"Maternal and Child\" - Corresponding parameters for the brand hot food and beverage list:     - subTabId = 2     - subTabName = \"Food and Beverage\"   ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
         * @summary 快手品牌榜单/Kuaishou brand top list
         * @param {number} [subTabId] 
         * @param {string} [subTabName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet_1(subTabId?: number, subTabName?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet_1(subTabId, subTabName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 快手热榜分类 ### 返回: - 分类数据  # [English] ### Purpose: - Kuaishou hot categories ### Returns: - Categories data
         * @summary 快手热榜分类/Kuaishou hot categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 快手热榜分类 ### 返回: - 分类数据  # [English] ### Purpose: - Kuaishou hot categories ### Returns: - Categories data
         * @summary 快手热榜分类/Kuaishou hot categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet_2(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet_2(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 快手热榜详情 ### 参数: - boardType: 榜单类型 - boardId: 榜单ID - boardType 和 boardId 可以从热榜分类接口中获取。 ### 返回: - 详情数据  # [English] ### Purpose: - Kuaishou hot board detail ### Parameters: - boardType: Board type - boardId: Board ID - boardType and boardId can be obtained from the hot board categories interface. ### Returns: - Detail data  # [示例/Example] boardType = 1 boardId = 1
         * @summary 快手热榜详情/Kuaishou hot board detail
         * @param {number} [boardType] 
         * @param {number} [boardId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet(boardType?: number, boardId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet(boardType, boardId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 快手热榜详情 ### 参数: - boardType: 榜单类型 - boardId: 榜单ID - boardType 和 boardId 可以从热榜分类接口中获取。 ### 返回: - 详情数据  # [English] ### Purpose: - Kuaishou hot board detail ### Parameters: - boardType: Board type - boardId: Board ID - boardType and boardId can be obtained from the hot board categories interface. ### Returns: - Detail data  # [示例/Example] boardType = 1 boardId = 1
         * @summary 快手热榜详情/Kuaishou hot board detail
         * @param {number} [boardType] 
         * @param {number} [boardId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet_3(boardType?: number, boardId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet_3(boardType, boardId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 快手热搜人物榜单 ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou hot search person board ### Returns: - Board data
         * @summary 快手热搜人物榜单/Kuaishou hot search person board
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 快手热搜人物榜单 ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou hot search person board ### Returns: - Board data
         * @summary 快手热搜人物榜单/Kuaishou hot search person board
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet_4(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet_4(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 快手直播榜单 ### 参数: 获取快手直播榜单，支持多个子榜单，具体参数如下：  - 直播总榜对应参数：     - subTabId = 0     - subTabName = None - 直播音乐榜对应参数：     - subTabId = 102     - subTabName = \"音乐\" - 直播舞蹈榜对应参数：     - subTabId = 107     - subTabName = \"舞蹈\" - 直播颜值榜对应参数：     - subTabId = 101     - subTabName = \"颜值\" - 直播国艺榜对应参数：     - subTabId = 105     - subTabName = \"国艺\" - 直播相亲榜对应参数：     - subTabId = 111     - subTabName = \"相亲\" - 直播游戏榜对应参数：     - subTabId = 106     - subTabName = \"游戏\" - 直播二次元榜对应参数：     - subTabId = 110     - subTabName = \"二次元\" - 直播故事榜对应参数：     - subTabId = 104     - subTabName = \"故事\" - 直播团播榜对应参数：     - subTabId = 113     - subTabName = \"团播\" - 直播九宫格榜对应参数：     - subTabId = 114     - subTabName = \"九宫格\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou live top list ### Parameters: Get the Kuaishou live top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the live total list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the live music list:     - subTabId = 102     - subTabName = \"Music\" - Corresponding parameters for the live dance list:     - subTabId = 107     - subTabName = \"Dance\" - Corresponding parameters for the live beauty list:     - subTabId = 101     - subTabName = \"Beauty\" - Corresponding parameters for the live national art list:     - subTabId = 105     - subTabName = \"National Art\" - Corresponding parameters for the live blind date list:     - subTabId = 111     - subTabName = \"Blind Date\" - Corresponding parameters for the live game list:     - subTabId = 106     - subTabName = \"Game\" - Corresponding parameters for the live second element list:     - subTabId = 110     - subTabName = \"Second Element\" - Corresponding parameters for the live story list:     - subTabId = 104     - subTabName = \"Story\" - Corresponding parameters for the live group broadcast list:     - subTabId = 113     - subTabName = \"Group Broadcast\" - Corresponding parameters for the live nine-grid list:     - subTabId = 114     - subTabName = \"Nine Grid\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
         * @summary 快手直播榜单/Kuaishou live top list
         * @param {number} [subTabId] 
         * @param {string} [subTabName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet(subTabId?: number, subTabName?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet(subTabId, subTabName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 快手直播榜单 ### 参数: 获取快手直播榜单，支持多个子榜单，具体参数如下：  - 直播总榜对应参数：     - subTabId = 0     - subTabName = None - 直播音乐榜对应参数：     - subTabId = 102     - subTabName = \"音乐\" - 直播舞蹈榜对应参数：     - subTabId = 107     - subTabName = \"舞蹈\" - 直播颜值榜对应参数：     - subTabId = 101     - subTabName = \"颜值\" - 直播国艺榜对应参数：     - subTabId = 105     - subTabName = \"国艺\" - 直播相亲榜对应参数：     - subTabId = 111     - subTabName = \"相亲\" - 直播游戏榜对应参数：     - subTabId = 106     - subTabName = \"游戏\" - 直播二次元榜对应参数：     - subTabId = 110     - subTabName = \"二次元\" - 直播故事榜对应参数：     - subTabId = 104     - subTabName = \"故事\" - 直播团播榜对应参数：     - subTabId = 113     - subTabName = \"团播\" - 直播九宫格榜对应参数：     - subTabId = 114     - subTabName = \"九宫格\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou live top list ### Parameters: Get the Kuaishou live top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the live total list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the live music list:     - subTabId = 102     - subTabName = \"Music\" - Corresponding parameters for the live dance list:     - subTabId = 107     - subTabName = \"Dance\" - Corresponding parameters for the live beauty list:     - subTabId = 101     - subTabName = \"Beauty\" - Corresponding parameters for the live national art list:     - subTabId = 105     - subTabName = \"National Art\" - Corresponding parameters for the live blind date list:     - subTabId = 111     - subTabName = \"Blind Date\" - Corresponding parameters for the live game list:     - subTabId = 106     - subTabName = \"Game\" - Corresponding parameters for the live second element list:     - subTabId = 110     - subTabName = \"Second Element\" - Corresponding parameters for the live story list:     - subTabId = 104     - subTabName = \"Story\" - Corresponding parameters for the live group broadcast list:     - subTabId = 113     - subTabName = \"Group Broadcast\" - Corresponding parameters for the live nine-grid list:     - subTabId = 114     - subTabName = \"Nine Grid\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
         * @summary 快手直播榜单/Kuaishou live top list
         * @param {number} [subTabId] 
         * @param {string} [subTabName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet_5(subTabId?: number, subTabName?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet_5(subTabId, subTabName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个用户数据 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 支持`eid`或`userId`，eid是用户主页链接中的一部分，user_id则可以从不同的接口中获取。 - 两种用户ID都可以使用，下面是两种用户ID的示例，这两个ID都指向同一个用户：     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### 返回: - 用户数据  # [English] ### Purpose: - Fetch single user data V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: Supports `eid` or `userId`, `eid` is part of the user profile link, and `user_id` can be obtained from different interfaces. - Both user IDs can be used, here are examples of the two user IDs, both of which point to the same user:     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### Returns: - User data  # [示例/Example] user_id = \"3xz63mn6fngqtiq\"
         * @summary 获取单个用户数据V2/Get single user data V2
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个用户数据 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 支持`eid`或`userId`，eid是用户主页链接中的一部分，user_id则可以从不同的接口中获取。 - 两种用户ID都可以使用，下面是两种用户ID的示例，这两个ID都指向同一个用户：     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### 返回: - 用户数据  # [English] ### Purpose: - Fetch single user data V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: Supports `eid` or `userId`, `eid` is part of the user profile link, and `user_id` can be obtained from different interfaces. - Both user IDs can be used, here are examples of the two user IDs, both of which point to the same user:     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### Returns: - User data  # [示例/Example] user_id = \"3xz63mn6fngqtiq\"
         * @summary 获取单个用户数据V2/Get single user data V2
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get_6(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get_6(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据链接获取单个作品数据，此接口默认使用价格更便宜的V1接口进行请求。 ### 参数: - share_text: 作品链接或分享文本 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL, this API defaults to using the cheaper V1 API for requests. ### Parameters: - share_text: Photo URL or share text ### Returns: - Video data  # [示例/Example] share_text = \"https://v.kuaishou.com/cNYP0Z\"
         * @summary 根据链接获取单个作品数据/Fetch single video by URL
         * @param {string} shareText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet(shareText: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet(shareText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 根据链接获取单个作品数据，此接口默认使用价格更便宜的V1接口进行请求。 ### 参数: - share_text: 作品链接或分享文本 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL, this API defaults to using the cheaper V1 API for requests. ### Parameters: - share_text: Photo URL or share text ### Returns: - Video data  # [示例/Example] share_text = \"https://v.kuaishou.com/cNYP0Z\"
         * @summary 根据链接获取单个作品数据/Fetch single video by URL
         * @param {string} shareText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet_7(shareText: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet_7(shareText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，如果此接口连续请求失败，可以尝试使用价格更昂贵的V2接口进行冗余请求。 ### 参数: - photo_id: 作品ID，作品ID可以从分享链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, if this API continuously fails, you can try to use the more expensive V2 API for redundant requests. ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the share link ### Returns: - Video data  # [示例/Example] photo_id = \"3xhpk3xcf6e4iac\"
         * @summary 快手单一视频查询接口V1/Kuaishou single video query API V1
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet(photoId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet(photoId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，如果此接口连续请求失败，可以尝试使用价格更昂贵的V2接口进行冗余请求。 ### 参数: - photo_id: 作品ID，作品ID可以从分享链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, if this API continuously fails, you can try to use the more expensive V2 API for redundant requests. ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the share link ### Returns: - Video data  # [示例/Example] photo_id = \"3xhpk3xcf6e4iac\"
         * @summary 快手单一视频查询接口V1/Kuaishou single video query API V1
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet_8(photoId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet_8(photoId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据接口 V2，此接口仅作为备选接口，收费较贵，但稳定性更高。 - 此接口请求价格为 0.01 美元/次，请求不成功不收费。 ### 参数: - photo_id: 作品ID ### 返回: - 视频数据  # [English] ### Purpose: - Single video query API V2, this API is only used as an alternative API, it is more expensive, but more stable. - The request price of this API is 0.01 USD/time, and the request is not successful without charge. ### Parameters: - photo_id: Photo ID ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"
         * @summary 快手单一视频查询接口V2/Kuaishou single video query API V2
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get(photoId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get(photoId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据接口 V2，此接口仅作为备选接口，收费较贵，但稳定性更高。 - 此接口请求价格为 0.01 美元/次，请求不成功不收费。 ### 参数: - photo_id: 作品ID ### 返回: - 视频数据  # [English] ### Purpose: - Single video query API V2, this API is only used as an alternative API, it is more expensive, but more stable. - The request price of this API is 0.01 USD/time, and the request is not successful without charge. ### Parameters: - photo_id: Photo ID ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"
         * @summary 快手单一视频查询接口V2/Kuaishou single video query API V2
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get_9(photoId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get_9(photoId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 快手购物榜单 ### 参数: 获取快手购物榜单，支持多个子榜单，具体参数如下：  - 购物榜单热门主播榜对应参数：     - subTabId = 0     - subTabName = None - 购物榜单热销商品榜对应参数：     - subTabId = 102     - subTabName = \"热销商品\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou shopping top list ### Parameters: Get the Kuaishou shopping top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the shopping hot anchor list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the shopping hot selling product list:     - subTabId = 102     - subTabName = \"Hot Selling Product\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
         * @summary 快手购物榜单/Kuaishou shopping top list
         * @param {number} [subTabId] 
         * @param {string} [subTabName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet(subTabId?: number, subTabName?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet(subTabId, subTabName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 快手购物榜单 ### 参数: 获取快手购物榜单，支持多个子榜单，具体参数如下：  - 购物榜单热门主播榜对应参数：     - subTabId = 0     - subTabName = None - 购物榜单热销商品榜对应参数：     - subTabId = 102     - subTabName = \"热销商品\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou shopping top list ### Parameters: Get the Kuaishou shopping top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the shopping hot anchor list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the shopping hot selling product list:     - subTabId = 102     - subTabName = \"Hot Selling Product\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
         * @summary 快手购物榜单/Kuaishou shopping top list
         * @param {number} [subTabId] 
         * @param {string} [subTabName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet_10(subTabId?: number, subTabName?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet_10(subTabId, subTabName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户热门作品数据 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 作品游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 作品数据  # [English] ### Purpose: - Get user hot post data ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Post cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Post data  # [示例/Example] user_id = \"228905802\" pcursor = None
         * @summary 获取用户热门作品数据/Get user hot post data
         * @param {string} userId 
         * @param {string} [pcursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet(userId: string, pcursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet(userId, pcursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户热门作品数据 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 作品游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 作品数据  # [English] ### Purpose: - Get user hot post data ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Post cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Post data  # [示例/Example] user_id = \"228905802\" pcursor = None
         * @summary 获取用户热门作品数据/Get user hot post data
         * @param {string} userId 
         * @param {string} [pcursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet_11(userId: string, pcursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet_11(userId, pcursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户直播信息 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 ### 返回: - 直播信息  # [English] ### Purpose: - Get user live info ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. ### Returns: - Live info  # [示例/Example] user_id = \"1377082950\"
         * @summary 获取用户直播信息/Get user live info
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户直播信息 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 ### 返回: - 直播信息  # [English] ### Purpose: - Get user live info ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. ### Returns: - Live info  # [示例/Example] user_id = \"1377082950\"
         * @summary 获取用户直播信息/Get user live info
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet_12(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet_12(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 用户视频列表 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - User video list V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id = \"228905802\" pcursor = None
         * @summary 用户视频列表V2/User video list V2
         * @param {string} userId 
         * @param {string} [pcursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get(userId: string, pcursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get(userId, pcursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 用户视频列表 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - User video list V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id = \"228905802\" pcursor = None
         * @summary 用户视频列表V2/User video list V2
         * @param {string} userId 
         * @param {string} [pcursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get_13(userId: string, pcursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get_13(userId, pcursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id = \"3x7gxp2zhgjv832\" pcursor = None
         * @summary 获取单个作品评论数据/Get single video comment data
         * @param {string} photoId 
         * @param {string} [pcursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet(photoId: string, pcursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet(photoId, pcursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id = \"3x7gxp2zhgjv832\" pcursor = None
         * @summary 获取单个作品评论数据/Get single video comment data
         * @param {string} photoId 
         * @param {string} [pcursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet_14(photoId: string, pcursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet_14(photoId, pcursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成快手分享链接 ### 参数: - shareObjectId: 作品ID ### 返回: - 分享链接  # [English] ### Purpose: - Generate Kuaishou share link ### Parameters: - photo_id: Photo ID ### Returns: - Share link  # [示例/Example] shareObjectId = \"3xg5wjqdtekbb3u\"
         * @summary 生成快手分享链接/Generate Kuaishou share link
         * @param {string} shareObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet(shareObjectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet(shareObjectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 生成快手分享链接 ### 参数: - shareObjectId: 作品ID ### 返回: - 分享链接  # [English] ### Purpose: - Generate Kuaishou share link ### Parameters: - photo_id: Photo ID ### Returns: - Share link  # [示例/Example] shareObjectId = \"3xg5wjqdtekbb3u\"
         * @summary 生成快手分享链接/Generate Kuaishou share link
         * @param {string} shareObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet_15(shareObjectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet_15(shareObjectId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索用户 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 用户页数，从1开始 ### 返回: - 用户数据  # [English] ### Purpose: - Search user V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: User page number, starting from 1 ### Returns: - User data  # [示例/Example] keyword = \"人工智能\" page = \"1\"
         * @summary 搜索用户V2/Search user V2
         * @param {string} keyword 
         * @param {string} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchUserV2ApiV1KuaishouAppSearchUserV2Get(keyword: string, page?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).searchUserV2ApiV1KuaishouAppSearchUserV2Get(keyword, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索用户 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 用户页数，从1开始 ### 返回: - 用户数据  # [English] ### Purpose: - Search user V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: User page number, starting from 1 ### Returns: - User data  # [示例/Example] keyword = \"人工智能\" page = \"1\"
         * @summary 搜索用户V2/Search user V2
         * @param {string} keyword 
         * @param {string} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchUserV2ApiV1KuaishouAppSearchUserV2Get_16(keyword: string, page?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).searchUserV2ApiV1KuaishouAppSearchUserV2Get_16(keyword, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索视频 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 视频页数，从1开始 ### 返回: - 视频数据  # [English] ### Purpose: - Search video V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: Page number, starting from 1 ### Returns: - Videos data  # [示例/Example] keyword = \"人工智能\" page = \"1\"
         * @summary 搜索视频V2/Search video V2
         * @param {string} keyword 
         * @param {string} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchVideoV2ApiV1KuaishouAppSearchVideoV2Get(keyword: string, page?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).searchVideoV2ApiV1KuaishouAppSearchVideoV2Get(keyword, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索视频 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 视频页数，从1开始 ### 返回: - 视频数据  # [English] ### Purpose: - Search video V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: Page number, starting from 1 ### Returns: - Videos data  # [示例/Example] keyword = \"人工智能\" page = \"1\"
         * @summary 搜索视频V2/Search video V2
         * @param {string} keyword 
         * @param {string} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchVideoV2ApiV1KuaishouAppSearchVideoV2Get_17(keyword: string, page?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await KuaishouAppAPIApiAxiosParamCreator(configuration).searchVideoV2ApiV1KuaishouAppSearchVideoV2Get_17(keyword, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * KuaishouAppAPIApi - factory interface
 * @export
 */
export const KuaishouAppAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 快手品牌榜单 ### 参数: 获取快手品牌榜单，支持多个子榜单，具体参数如下：  - 品牌榜单热门美妆榜对应参数：     - subTabId = 0     - subTabName = None - 品牌榜单热门服饰榜对应参数：     - subTabId = 131     - subTabName = \"服饰\" - 品牌榜单热门汽车榜对应参数：     - subTabId = 1     - subTabName = \"汽车\" - 品牌榜单热门游戏榜对应参数：     - subTabId = 25     - subTabName = \"游戏\" - 品牌榜单热门医疗健康榜对应参数：     - subTabId = 24     - subTabName = \"医疗健康\" - 品牌榜单热门3C数码榜对应参数：     - subTabId = 130     - subTabName = \"3C数码\" - 品牌榜单热门手机榜对应参数：     - subTabId = 128     - subTabName = \"手机\" - 品牌榜单热门家电榜对应参数：     - subTabId = 11     - subTabName = \"家电\" - 品牌榜单热门母婴榜对应参数：     - subTabId = 4     - subTabName = \"母婴\" - 品牌榜单热门食品饮料榜对应参数：     - subTabId = 2     - subTabName = \"食品饮料\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou brand top list ### Parameters: Get the Kuaishou brand top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the brand hot beauty list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the brand hot clothing list:     - subTabId = 131     - subTabName = \"Clothing\" - Corresponding parameters for the brand hot car list:     - subTabId = 1     - subTabName = \"Car\" - Corresponding parameters for the brand hot game list:     - subTabId = 25     - subTabName = \"Game\" - Corresponding parameters for the brand hot medical health list:     - subTabId = 24     - subTabName = \"Medical Health\" - Corresponding parameters for the brand hot 3C digital list:     - subTabId = 130     - subTabName = \"3C Digital\" - Corresponding parameters for the brand hot mobile phone list:     - subTabId = 128     - subTabName = \"Mobile Phone\" - Corresponding parameters for the brand hot home appliance list:     - subTabId = 11     - subTabName = \"Home Appliance\" - Corresponding parameters for the brand hot maternal and child list:     - subTabId = 4     - subTabName = \"Maternal and Child\" - Corresponding parameters for the brand hot food and beverage list:     - subTabId = 2     - subTabName = \"Food and Beverage\"   ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
         * @summary 快手品牌榜单/Kuaishou brand top list
         * @param {number} [subTabId] 
         * @param {string} [subTabName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet(subTabId?: number, subTabName?: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet(subTabId, subTabName, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 快手品牌榜单 ### 参数: 获取快手品牌榜单，支持多个子榜单，具体参数如下：  - 品牌榜单热门美妆榜对应参数：     - subTabId = 0     - subTabName = None - 品牌榜单热门服饰榜对应参数：     - subTabId = 131     - subTabName = \"服饰\" - 品牌榜单热门汽车榜对应参数：     - subTabId = 1     - subTabName = \"汽车\" - 品牌榜单热门游戏榜对应参数：     - subTabId = 25     - subTabName = \"游戏\" - 品牌榜单热门医疗健康榜对应参数：     - subTabId = 24     - subTabName = \"医疗健康\" - 品牌榜单热门3C数码榜对应参数：     - subTabId = 130     - subTabName = \"3C数码\" - 品牌榜单热门手机榜对应参数：     - subTabId = 128     - subTabName = \"手机\" - 品牌榜单热门家电榜对应参数：     - subTabId = 11     - subTabName = \"家电\" - 品牌榜单热门母婴榜对应参数：     - subTabId = 4     - subTabName = \"母婴\" - 品牌榜单热门食品饮料榜对应参数：     - subTabId = 2     - subTabName = \"食品饮料\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou brand top list ### Parameters: Get the Kuaishou brand top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the brand hot beauty list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the brand hot clothing list:     - subTabId = 131     - subTabName = \"Clothing\" - Corresponding parameters for the brand hot car list:     - subTabId = 1     - subTabName = \"Car\" - Corresponding parameters for the brand hot game list:     - subTabId = 25     - subTabName = \"Game\" - Corresponding parameters for the brand hot medical health list:     - subTabId = 24     - subTabName = \"Medical Health\" - Corresponding parameters for the brand hot 3C digital list:     - subTabId = 130     - subTabName = \"3C Digital\" - Corresponding parameters for the brand hot mobile phone list:     - subTabId = 128     - subTabName = \"Mobile Phone\" - Corresponding parameters for the brand hot home appliance list:     - subTabId = 11     - subTabName = \"Home Appliance\" - Corresponding parameters for the brand hot maternal and child list:     - subTabId = 4     - subTabName = \"Maternal and Child\" - Corresponding parameters for the brand hot food and beverage list:     - subTabId = 2     - subTabName = \"Food and Beverage\"   ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
         * @summary 快手品牌榜单/Kuaishou brand top list
         * @param {number} [subTabId] 
         * @param {string} [subTabName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet_1(subTabId?: number, subTabName?: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet_1(subTabId, subTabName, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 快手热榜分类 ### 返回: - 分类数据  # [English] ### Purpose: - Kuaishou hot categories ### Returns: - Categories data
         * @summary 快手热榜分类/Kuaishou hot categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet(options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 快手热榜分类 ### 返回: - 分类数据  # [English] ### Purpose: - Kuaishou hot categories ### Returns: - Categories data
         * @summary 快手热榜分类/Kuaishou hot categories
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet_2(options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet_2(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 快手热榜详情 ### 参数: - boardType: 榜单类型 - boardId: 榜单ID - boardType 和 boardId 可以从热榜分类接口中获取。 ### 返回: - 详情数据  # [English] ### Purpose: - Kuaishou hot board detail ### Parameters: - boardType: Board type - boardId: Board ID - boardType and boardId can be obtained from the hot board categories interface. ### Returns: - Detail data  # [示例/Example] boardType = 1 boardId = 1
         * @summary 快手热榜详情/Kuaishou hot board detail
         * @param {number} [boardType] 
         * @param {number} [boardId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet(boardType?: number, boardId?: number, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet(boardType, boardId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 快手热榜详情 ### 参数: - boardType: 榜单类型 - boardId: 榜单ID - boardType 和 boardId 可以从热榜分类接口中获取。 ### 返回: - 详情数据  # [English] ### Purpose: - Kuaishou hot board detail ### Parameters: - boardType: Board type - boardId: Board ID - boardType and boardId can be obtained from the hot board categories interface. ### Returns: - Detail data  # [示例/Example] boardType = 1 boardId = 1
         * @summary 快手热榜详情/Kuaishou hot board detail
         * @param {number} [boardType] 
         * @param {number} [boardId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet_3(boardType?: number, boardId?: number, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet_3(boardType, boardId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 快手热搜人物榜单 ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou hot search person board ### Returns: - Board data
         * @summary 快手热搜人物榜单/Kuaishou hot search person board
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet(options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 快手热搜人物榜单 ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou hot search person board ### Returns: - Board data
         * @summary 快手热搜人物榜单/Kuaishou hot search person board
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet_4(options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet_4(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 快手直播榜单 ### 参数: 获取快手直播榜单，支持多个子榜单，具体参数如下：  - 直播总榜对应参数：     - subTabId = 0     - subTabName = None - 直播音乐榜对应参数：     - subTabId = 102     - subTabName = \"音乐\" - 直播舞蹈榜对应参数：     - subTabId = 107     - subTabName = \"舞蹈\" - 直播颜值榜对应参数：     - subTabId = 101     - subTabName = \"颜值\" - 直播国艺榜对应参数：     - subTabId = 105     - subTabName = \"国艺\" - 直播相亲榜对应参数：     - subTabId = 111     - subTabName = \"相亲\" - 直播游戏榜对应参数：     - subTabId = 106     - subTabName = \"游戏\" - 直播二次元榜对应参数：     - subTabId = 110     - subTabName = \"二次元\" - 直播故事榜对应参数：     - subTabId = 104     - subTabName = \"故事\" - 直播团播榜对应参数：     - subTabId = 113     - subTabName = \"团播\" - 直播九宫格榜对应参数：     - subTabId = 114     - subTabName = \"九宫格\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou live top list ### Parameters: Get the Kuaishou live top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the live total list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the live music list:     - subTabId = 102     - subTabName = \"Music\" - Corresponding parameters for the live dance list:     - subTabId = 107     - subTabName = \"Dance\" - Corresponding parameters for the live beauty list:     - subTabId = 101     - subTabName = \"Beauty\" - Corresponding parameters for the live national art list:     - subTabId = 105     - subTabName = \"National Art\" - Corresponding parameters for the live blind date list:     - subTabId = 111     - subTabName = \"Blind Date\" - Corresponding parameters for the live game list:     - subTabId = 106     - subTabName = \"Game\" - Corresponding parameters for the live second element list:     - subTabId = 110     - subTabName = \"Second Element\" - Corresponding parameters for the live story list:     - subTabId = 104     - subTabName = \"Story\" - Corresponding parameters for the live group broadcast list:     - subTabId = 113     - subTabName = \"Group Broadcast\" - Corresponding parameters for the live nine-grid list:     - subTabId = 114     - subTabName = \"Nine Grid\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
         * @summary 快手直播榜单/Kuaishou live top list
         * @param {number} [subTabId] 
         * @param {string} [subTabName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet(subTabId?: number, subTabName?: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet(subTabId, subTabName, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 快手直播榜单 ### 参数: 获取快手直播榜单，支持多个子榜单，具体参数如下：  - 直播总榜对应参数：     - subTabId = 0     - subTabName = None - 直播音乐榜对应参数：     - subTabId = 102     - subTabName = \"音乐\" - 直播舞蹈榜对应参数：     - subTabId = 107     - subTabName = \"舞蹈\" - 直播颜值榜对应参数：     - subTabId = 101     - subTabName = \"颜值\" - 直播国艺榜对应参数：     - subTabId = 105     - subTabName = \"国艺\" - 直播相亲榜对应参数：     - subTabId = 111     - subTabName = \"相亲\" - 直播游戏榜对应参数：     - subTabId = 106     - subTabName = \"游戏\" - 直播二次元榜对应参数：     - subTabId = 110     - subTabName = \"二次元\" - 直播故事榜对应参数：     - subTabId = 104     - subTabName = \"故事\" - 直播团播榜对应参数：     - subTabId = 113     - subTabName = \"团播\" - 直播九宫格榜对应参数：     - subTabId = 114     - subTabName = \"九宫格\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou live top list ### Parameters: Get the Kuaishou live top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the live total list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the live music list:     - subTabId = 102     - subTabName = \"Music\" - Corresponding parameters for the live dance list:     - subTabId = 107     - subTabName = \"Dance\" - Corresponding parameters for the live beauty list:     - subTabId = 101     - subTabName = \"Beauty\" - Corresponding parameters for the live national art list:     - subTabId = 105     - subTabName = \"National Art\" - Corresponding parameters for the live blind date list:     - subTabId = 111     - subTabName = \"Blind Date\" - Corresponding parameters for the live game list:     - subTabId = 106     - subTabName = \"Game\" - Corresponding parameters for the live second element list:     - subTabId = 110     - subTabName = \"Second Element\" - Corresponding parameters for the live story list:     - subTabId = 104     - subTabName = \"Story\" - Corresponding parameters for the live group broadcast list:     - subTabId = 113     - subTabName = \"Group Broadcast\" - Corresponding parameters for the live nine-grid list:     - subTabId = 114     - subTabName = \"Nine Grid\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
         * @summary 快手直播榜单/Kuaishou live top list
         * @param {number} [subTabId] 
         * @param {string} [subTabName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet_5(subTabId?: number, subTabName?: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet_5(subTabId, subTabName, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个用户数据 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 支持`eid`或`userId`，eid是用户主页链接中的一部分，user_id则可以从不同的接口中获取。 - 两种用户ID都可以使用，下面是两种用户ID的示例，这两个ID都指向同一个用户：     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### 返回: - 用户数据  # [English] ### Purpose: - Fetch single user data V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: Supports `eid` or `userId`, `eid` is part of the user profile link, and `user_id` can be obtained from different interfaces. - Both user IDs can be used, here are examples of the two user IDs, both of which point to the same user:     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### Returns: - User data  # [示例/Example] user_id = \"3xz63mn6fngqtiq\"
         * @summary 获取单个用户数据V2/Get single user data V2
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个用户数据 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 支持`eid`或`userId`，eid是用户主页链接中的一部分，user_id则可以从不同的接口中获取。 - 两种用户ID都可以使用，下面是两种用户ID的示例，这两个ID都指向同一个用户：     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### 返回: - 用户数据  # [English] ### Purpose: - Fetch single user data V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: Supports `eid` or `userId`, `eid` is part of the user profile link, and `user_id` can be obtained from different interfaces. - Both user IDs can be used, here are examples of the two user IDs, both of which point to the same user:     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### Returns: - User data  # [示例/Example] user_id = \"3xz63mn6fngqtiq\"
         * @summary 获取单个用户数据V2/Get single user data V2
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get_6(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get_6(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据链接获取单个作品数据，此接口默认使用价格更便宜的V1接口进行请求。 ### 参数: - share_text: 作品链接或分享文本 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL, this API defaults to using the cheaper V1 API for requests. ### Parameters: - share_text: Photo URL or share text ### Returns: - Video data  # [示例/Example] share_text = \"https://v.kuaishou.com/cNYP0Z\"
         * @summary 根据链接获取单个作品数据/Fetch single video by URL
         * @param {string} shareText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet(shareText: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet(shareText, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 根据链接获取单个作品数据，此接口默认使用价格更便宜的V1接口进行请求。 ### 参数: - share_text: 作品链接或分享文本 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL, this API defaults to using the cheaper V1 API for requests. ### Parameters: - share_text: Photo URL or share text ### Returns: - Video data  # [示例/Example] share_text = \"https://v.kuaishou.com/cNYP0Z\"
         * @summary 根据链接获取单个作品数据/Fetch single video by URL
         * @param {string} shareText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet_7(shareText: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet_7(shareText, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，如果此接口连续请求失败，可以尝试使用价格更昂贵的V2接口进行冗余请求。 ### 参数: - photo_id: 作品ID，作品ID可以从分享链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, if this API continuously fails, you can try to use the more expensive V2 API for redundant requests. ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the share link ### Returns: - Video data  # [示例/Example] photo_id = \"3xhpk3xcf6e4iac\"
         * @summary 快手单一视频查询接口V1/Kuaishou single video query API V1
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet(photoId: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet(photoId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据，如果此接口连续请求失败，可以尝试使用价格更昂贵的V2接口进行冗余请求。 ### 参数: - photo_id: 作品ID，作品ID可以从分享链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, if this API continuously fails, you can try to use the more expensive V2 API for redundant requests. ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the share link ### Returns: - Video data  # [示例/Example] photo_id = \"3xhpk3xcf6e4iac\"
         * @summary 快手单一视频查询接口V1/Kuaishou single video query API V1
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet_8(photoId: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet_8(photoId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据接口 V2，此接口仅作为备选接口，收费较贵，但稳定性更高。 - 此接口请求价格为 0.01 美元/次，请求不成功不收费。 ### 参数: - photo_id: 作品ID ### 返回: - 视频数据  # [English] ### Purpose: - Single video query API V2, this API is only used as an alternative API, it is more expensive, but more stable. - The request price of this API is 0.01 USD/time, and the request is not successful without charge. ### Parameters: - photo_id: Photo ID ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"
         * @summary 快手单一视频查询接口V2/Kuaishou single video query API V2
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get(photoId: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get(photoId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据接口 V2，此接口仅作为备选接口，收费较贵，但稳定性更高。 - 此接口请求价格为 0.01 美元/次，请求不成功不收费。 ### 参数: - photo_id: 作品ID ### 返回: - 视频数据  # [English] ### Purpose: - Single video query API V2, this API is only used as an alternative API, it is more expensive, but more stable. - The request price of this API is 0.01 USD/time, and the request is not successful without charge. ### Parameters: - photo_id: Photo ID ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"
         * @summary 快手单一视频查询接口V2/Kuaishou single video query API V2
         * @param {string} photoId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get_9(photoId: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get_9(photoId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 快手购物榜单 ### 参数: 获取快手购物榜单，支持多个子榜单，具体参数如下：  - 购物榜单热门主播榜对应参数：     - subTabId = 0     - subTabName = None - 购物榜单热销商品榜对应参数：     - subTabId = 102     - subTabName = \"热销商品\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou shopping top list ### Parameters: Get the Kuaishou shopping top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the shopping hot anchor list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the shopping hot selling product list:     - subTabId = 102     - subTabName = \"Hot Selling Product\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
         * @summary 快手购物榜单/Kuaishou shopping top list
         * @param {number} [subTabId] 
         * @param {string} [subTabName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet(subTabId?: number, subTabName?: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet(subTabId, subTabName, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 快手购物榜单 ### 参数: 获取快手购物榜单，支持多个子榜单，具体参数如下：  - 购物榜单热门主播榜对应参数：     - subTabId = 0     - subTabName = None - 购物榜单热销商品榜对应参数：     - subTabId = 102     - subTabName = \"热销商品\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou shopping top list ### Parameters: Get the Kuaishou shopping top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the shopping hot anchor list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the shopping hot selling product list:     - subTabId = 102     - subTabName = \"Hot Selling Product\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
         * @summary 快手购物榜单/Kuaishou shopping top list
         * @param {number} [subTabId] 
         * @param {string} [subTabName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet_10(subTabId?: number, subTabName?: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet_10(subTabId, subTabName, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户热门作品数据 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 作品游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 作品数据  # [English] ### Purpose: - Get user hot post data ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Post cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Post data  # [示例/Example] user_id = \"228905802\" pcursor = None
         * @summary 获取用户热门作品数据/Get user hot post data
         * @param {string} userId 
         * @param {string} [pcursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet(userId: string, pcursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet(userId, pcursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户热门作品数据 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 作品游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 作品数据  # [English] ### Purpose: - Get user hot post data ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Post cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Post data  # [示例/Example] user_id = \"228905802\" pcursor = None
         * @summary 获取用户热门作品数据/Get user hot post data
         * @param {string} userId 
         * @param {string} [pcursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet_11(userId: string, pcursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet_11(userId, pcursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户直播信息 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 ### 返回: - 直播信息  # [English] ### Purpose: - Get user live info ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. ### Returns: - Live info  # [示例/Example] user_id = \"1377082950\"
         * @summary 获取用户直播信息/Get user live info
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户直播信息 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 ### 返回: - 直播信息  # [English] ### Purpose: - Get user live info ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. ### Returns: - Live info  # [示例/Example] user_id = \"1377082950\"
         * @summary 获取用户直播信息/Get user live info
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet_12(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet_12(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 用户视频列表 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - User video list V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id = \"228905802\" pcursor = None
         * @summary 用户视频列表V2/User video list V2
         * @param {string} userId 
         * @param {string} [pcursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get(userId: string, pcursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get(userId, pcursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 用户视频列表 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - User video list V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id = \"228905802\" pcursor = None
         * @summary 用户视频列表V2/User video list V2
         * @param {string} userId 
         * @param {string} [pcursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get_13(userId: string, pcursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get_13(userId, pcursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id = \"3x7gxp2zhgjv832\" pcursor = None
         * @summary 获取单个作品评论数据/Get single video comment data
         * @param {string} photoId 
         * @param {string} [pcursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet(photoId: string, pcursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet(photoId, pcursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id = \"3x7gxp2zhgjv832\" pcursor = None
         * @summary 获取单个作品评论数据/Get single video comment data
         * @param {string} photoId 
         * @param {string} [pcursor] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet_14(photoId: string, pcursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet_14(photoId, pcursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成快手分享链接 ### 参数: - shareObjectId: 作品ID ### 返回: - 分享链接  # [English] ### Purpose: - Generate Kuaishou share link ### Parameters: - photo_id: Photo ID ### Returns: - Share link  # [示例/Example] shareObjectId = \"3xg5wjqdtekbb3u\"
         * @summary 生成快手分享链接/Generate Kuaishou share link
         * @param {string} shareObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet(shareObjectId: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet(shareObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 生成快手分享链接 ### 参数: - shareObjectId: 作品ID ### 返回: - 分享链接  # [English] ### Purpose: - Generate Kuaishou share link ### Parameters: - photo_id: Photo ID ### Returns: - Share link  # [示例/Example] shareObjectId = \"3xg5wjqdtekbb3u\"
         * @summary 生成快手分享链接/Generate Kuaishou share link
         * @param {string} shareObjectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet_15(shareObjectId: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet_15(shareObjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索用户 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 用户页数，从1开始 ### 返回: - 用户数据  # [English] ### Purpose: - Search user V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: User page number, starting from 1 ### Returns: - User data  # [示例/Example] keyword = \"人工智能\" page = \"1\"
         * @summary 搜索用户V2/Search user V2
         * @param {string} keyword 
         * @param {string} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUserV2ApiV1KuaishouAppSearchUserV2Get(keyword: string, page?: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).searchUserV2ApiV1KuaishouAppSearchUserV2Get(keyword, page, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索用户 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 用户页数，从1开始 ### 返回: - 用户数据  # [English] ### Purpose: - Search user V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: User page number, starting from 1 ### Returns: - User data  # [示例/Example] keyword = \"人工智能\" page = \"1\"
         * @summary 搜索用户V2/Search user V2
         * @param {string} keyword 
         * @param {string} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUserV2ApiV1KuaishouAppSearchUserV2Get_16(keyword: string, page?: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).searchUserV2ApiV1KuaishouAppSearchUserV2Get_16(keyword, page, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索视频 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 视频页数，从1开始 ### 返回: - 视频数据  # [English] ### Purpose: - Search video V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: Page number, starting from 1 ### Returns: - Videos data  # [示例/Example] keyword = \"人工智能\" page = \"1\"
         * @summary 搜索视频V2/Search video V2
         * @param {string} keyword 
         * @param {string} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVideoV2ApiV1KuaishouAppSearchVideoV2Get(keyword: string, page?: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).searchVideoV2ApiV1KuaishouAppSearchVideoV2Get(keyword, page, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索视频 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 视频页数，从1开始 ### 返回: - 视频数据  # [English] ### Purpose: - Search video V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: Page number, starting from 1 ### Returns: - Videos data  # [示例/Example] keyword = \"人工智能\" page = \"1\"
         * @summary 搜索视频V2/Search video V2
         * @param {string} keyword 
         * @param {string} [page] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVideoV2ApiV1KuaishouAppSearchVideoV2Get_17(keyword: string, page?: string, options?: any): AxiosPromise<ResponseModel> {
            return KuaishouAppAPIApiFp(configuration).searchVideoV2ApiV1KuaishouAppSearchVideoV2Get_17(keyword, page, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * KuaishouAppAPIApi - interface
 * @export
 * @interface KuaishouAppAPIApi
 */
export interface KuaishouAppAPIApiInterface {
    /**
     * # [中文] ### 用途: - 快手品牌榜单 ### 参数: 获取快手品牌榜单，支持多个子榜单，具体参数如下：  - 品牌榜单热门美妆榜对应参数：     - subTabId = 0     - subTabName = None - 品牌榜单热门服饰榜对应参数：     - subTabId = 131     - subTabName = \"服饰\" - 品牌榜单热门汽车榜对应参数：     - subTabId = 1     - subTabName = \"汽车\" - 品牌榜单热门游戏榜对应参数：     - subTabId = 25     - subTabName = \"游戏\" - 品牌榜单热门医疗健康榜对应参数：     - subTabId = 24     - subTabName = \"医疗健康\" - 品牌榜单热门3C数码榜对应参数：     - subTabId = 130     - subTabName = \"3C数码\" - 品牌榜单热门手机榜对应参数：     - subTabId = 128     - subTabName = \"手机\" - 品牌榜单热门家电榜对应参数：     - subTabId = 11     - subTabName = \"家电\" - 品牌榜单热门母婴榜对应参数：     - subTabId = 4     - subTabName = \"母婴\" - 品牌榜单热门食品饮料榜对应参数：     - subTabId = 2     - subTabName = \"食品饮料\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou brand top list ### Parameters: Get the Kuaishou brand top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the brand hot beauty list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the brand hot clothing list:     - subTabId = 131     - subTabName = \"Clothing\" - Corresponding parameters for the brand hot car list:     - subTabId = 1     - subTabName = \"Car\" - Corresponding parameters for the brand hot game list:     - subTabId = 25     - subTabName = \"Game\" - Corresponding parameters for the brand hot medical health list:     - subTabId = 24     - subTabName = \"Medical Health\" - Corresponding parameters for the brand hot 3C digital list:     - subTabId = 130     - subTabName = \"3C Digital\" - Corresponding parameters for the brand hot mobile phone list:     - subTabId = 128     - subTabName = \"Mobile Phone\" - Corresponding parameters for the brand hot home appliance list:     - subTabId = 11     - subTabName = \"Home Appliance\" - Corresponding parameters for the brand hot maternal and child list:     - subTabId = 4     - subTabName = \"Maternal and Child\" - Corresponding parameters for the brand hot food and beverage list:     - subTabId = 2     - subTabName = \"Food and Beverage\"   ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
     * @summary 快手品牌榜单/Kuaishou brand top list
     * @param {number} [subTabId] 
     * @param {string} [subTabName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet(subTabId?: number, subTabName?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 快手品牌榜单 ### 参数: 获取快手品牌榜单，支持多个子榜单，具体参数如下：  - 品牌榜单热门美妆榜对应参数：     - subTabId = 0     - subTabName = None - 品牌榜单热门服饰榜对应参数：     - subTabId = 131     - subTabName = \"服饰\" - 品牌榜单热门汽车榜对应参数：     - subTabId = 1     - subTabName = \"汽车\" - 品牌榜单热门游戏榜对应参数：     - subTabId = 25     - subTabName = \"游戏\" - 品牌榜单热门医疗健康榜对应参数：     - subTabId = 24     - subTabName = \"医疗健康\" - 品牌榜单热门3C数码榜对应参数：     - subTabId = 130     - subTabName = \"3C数码\" - 品牌榜单热门手机榜对应参数：     - subTabId = 128     - subTabName = \"手机\" - 品牌榜单热门家电榜对应参数：     - subTabId = 11     - subTabName = \"家电\" - 品牌榜单热门母婴榜对应参数：     - subTabId = 4     - subTabName = \"母婴\" - 品牌榜单热门食品饮料榜对应参数：     - subTabId = 2     - subTabName = \"食品饮料\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou brand top list ### Parameters: Get the Kuaishou brand top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the brand hot beauty list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the brand hot clothing list:     - subTabId = 131     - subTabName = \"Clothing\" - Corresponding parameters for the brand hot car list:     - subTabId = 1     - subTabName = \"Car\" - Corresponding parameters for the brand hot game list:     - subTabId = 25     - subTabName = \"Game\" - Corresponding parameters for the brand hot medical health list:     - subTabId = 24     - subTabName = \"Medical Health\" - Corresponding parameters for the brand hot 3C digital list:     - subTabId = 130     - subTabName = \"3C Digital\" - Corresponding parameters for the brand hot mobile phone list:     - subTabId = 128     - subTabName = \"Mobile Phone\" - Corresponding parameters for the brand hot home appliance list:     - subTabId = 11     - subTabName = \"Home Appliance\" - Corresponding parameters for the brand hot maternal and child list:     - subTabId = 4     - subTabName = \"Maternal and Child\" - Corresponding parameters for the brand hot food and beverage list:     - subTabId = 2     - subTabName = \"Food and Beverage\"   ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
     * @summary 快手品牌榜单/Kuaishou brand top list
     * @param {number} [subTabId] 
     * @param {string} [subTabName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet_1(subTabId?: number, subTabName?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 快手热榜分类 ### 返回: - 分类数据  # [English] ### Purpose: - Kuaishou hot categories ### Returns: - Categories data
     * @summary 快手热榜分类/Kuaishou hot categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 快手热榜分类 ### 返回: - 分类数据  # [English] ### Purpose: - Kuaishou hot categories ### Returns: - Categories data
     * @summary 快手热榜分类/Kuaishou hot categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet_2(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 快手热榜详情 ### 参数: - boardType: 榜单类型 - boardId: 榜单ID - boardType 和 boardId 可以从热榜分类接口中获取。 ### 返回: - 详情数据  # [English] ### Purpose: - Kuaishou hot board detail ### Parameters: - boardType: Board type - boardId: Board ID - boardType and boardId can be obtained from the hot board categories interface. ### Returns: - Detail data  # [示例/Example] boardType = 1 boardId = 1
     * @summary 快手热榜详情/Kuaishou hot board detail
     * @param {number} [boardType] 
     * @param {number} [boardId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet(boardType?: number, boardId?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 快手热榜详情 ### 参数: - boardType: 榜单类型 - boardId: 榜单ID - boardType 和 boardId 可以从热榜分类接口中获取。 ### 返回: - 详情数据  # [English] ### Purpose: - Kuaishou hot board detail ### Parameters: - boardType: Board type - boardId: Board ID - boardType and boardId can be obtained from the hot board categories interface. ### Returns: - Detail data  # [示例/Example] boardType = 1 boardId = 1
     * @summary 快手热榜详情/Kuaishou hot board detail
     * @param {number} [boardType] 
     * @param {number} [boardId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet_3(boardType?: number, boardId?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 快手热搜人物榜单 ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou hot search person board ### Returns: - Board data
     * @summary 快手热搜人物榜单/Kuaishou hot search person board
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 快手热搜人物榜单 ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou hot search person board ### Returns: - Board data
     * @summary 快手热搜人物榜单/Kuaishou hot search person board
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet_4(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 快手直播榜单 ### 参数: 获取快手直播榜单，支持多个子榜单，具体参数如下：  - 直播总榜对应参数：     - subTabId = 0     - subTabName = None - 直播音乐榜对应参数：     - subTabId = 102     - subTabName = \"音乐\" - 直播舞蹈榜对应参数：     - subTabId = 107     - subTabName = \"舞蹈\" - 直播颜值榜对应参数：     - subTabId = 101     - subTabName = \"颜值\" - 直播国艺榜对应参数：     - subTabId = 105     - subTabName = \"国艺\" - 直播相亲榜对应参数：     - subTabId = 111     - subTabName = \"相亲\" - 直播游戏榜对应参数：     - subTabId = 106     - subTabName = \"游戏\" - 直播二次元榜对应参数：     - subTabId = 110     - subTabName = \"二次元\" - 直播故事榜对应参数：     - subTabId = 104     - subTabName = \"故事\" - 直播团播榜对应参数：     - subTabId = 113     - subTabName = \"团播\" - 直播九宫格榜对应参数：     - subTabId = 114     - subTabName = \"九宫格\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou live top list ### Parameters: Get the Kuaishou live top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the live total list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the live music list:     - subTabId = 102     - subTabName = \"Music\" - Corresponding parameters for the live dance list:     - subTabId = 107     - subTabName = \"Dance\" - Corresponding parameters for the live beauty list:     - subTabId = 101     - subTabName = \"Beauty\" - Corresponding parameters for the live national art list:     - subTabId = 105     - subTabName = \"National Art\" - Corresponding parameters for the live blind date list:     - subTabId = 111     - subTabName = \"Blind Date\" - Corresponding parameters for the live game list:     - subTabId = 106     - subTabName = \"Game\" - Corresponding parameters for the live second element list:     - subTabId = 110     - subTabName = \"Second Element\" - Corresponding parameters for the live story list:     - subTabId = 104     - subTabName = \"Story\" - Corresponding parameters for the live group broadcast list:     - subTabId = 113     - subTabName = \"Group Broadcast\" - Corresponding parameters for the live nine-grid list:     - subTabId = 114     - subTabName = \"Nine Grid\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
     * @summary 快手直播榜单/Kuaishou live top list
     * @param {number} [subTabId] 
     * @param {string} [subTabName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet(subTabId?: number, subTabName?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 快手直播榜单 ### 参数: 获取快手直播榜单，支持多个子榜单，具体参数如下：  - 直播总榜对应参数：     - subTabId = 0     - subTabName = None - 直播音乐榜对应参数：     - subTabId = 102     - subTabName = \"音乐\" - 直播舞蹈榜对应参数：     - subTabId = 107     - subTabName = \"舞蹈\" - 直播颜值榜对应参数：     - subTabId = 101     - subTabName = \"颜值\" - 直播国艺榜对应参数：     - subTabId = 105     - subTabName = \"国艺\" - 直播相亲榜对应参数：     - subTabId = 111     - subTabName = \"相亲\" - 直播游戏榜对应参数：     - subTabId = 106     - subTabName = \"游戏\" - 直播二次元榜对应参数：     - subTabId = 110     - subTabName = \"二次元\" - 直播故事榜对应参数：     - subTabId = 104     - subTabName = \"故事\" - 直播团播榜对应参数：     - subTabId = 113     - subTabName = \"团播\" - 直播九宫格榜对应参数：     - subTabId = 114     - subTabName = \"九宫格\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou live top list ### Parameters: Get the Kuaishou live top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the live total list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the live music list:     - subTabId = 102     - subTabName = \"Music\" - Corresponding parameters for the live dance list:     - subTabId = 107     - subTabName = \"Dance\" - Corresponding parameters for the live beauty list:     - subTabId = 101     - subTabName = \"Beauty\" - Corresponding parameters for the live national art list:     - subTabId = 105     - subTabName = \"National Art\" - Corresponding parameters for the live blind date list:     - subTabId = 111     - subTabName = \"Blind Date\" - Corresponding parameters for the live game list:     - subTabId = 106     - subTabName = \"Game\" - Corresponding parameters for the live second element list:     - subTabId = 110     - subTabName = \"Second Element\" - Corresponding parameters for the live story list:     - subTabId = 104     - subTabName = \"Story\" - Corresponding parameters for the live group broadcast list:     - subTabId = 113     - subTabName = \"Group Broadcast\" - Corresponding parameters for the live nine-grid list:     - subTabId = 114     - subTabName = \"Nine Grid\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
     * @summary 快手直播榜单/Kuaishou live top list
     * @param {number} [subTabId] 
     * @param {string} [subTabName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet_5(subTabId?: number, subTabName?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个用户数据 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 支持`eid`或`userId`，eid是用户主页链接中的一部分，user_id则可以从不同的接口中获取。 - 两种用户ID都可以使用，下面是两种用户ID的示例，这两个ID都指向同一个用户：     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### 返回: - 用户数据  # [English] ### Purpose: - Fetch single user data V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: Supports `eid` or `userId`, `eid` is part of the user profile link, and `user_id` can be obtained from different interfaces. - Both user IDs can be used, here are examples of the two user IDs, both of which point to the same user:     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### Returns: - User data  # [示例/Example] user_id = \"3xz63mn6fngqtiq\"
     * @summary 获取单个用户数据V2/Get single user data V2
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个用户数据 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 支持`eid`或`userId`，eid是用户主页链接中的一部分，user_id则可以从不同的接口中获取。 - 两种用户ID都可以使用，下面是两种用户ID的示例，这两个ID都指向同一个用户：     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### 返回: - 用户数据  # [English] ### Purpose: - Fetch single user data V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: Supports `eid` or `userId`, `eid` is part of the user profile link, and `user_id` can be obtained from different interfaces. - Both user IDs can be used, here are examples of the two user IDs, both of which point to the same user:     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### Returns: - User data  # [示例/Example] user_id = \"3xz63mn6fngqtiq\"
     * @summary 获取单个用户数据V2/Get single user data V2
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get_6(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据链接获取单个作品数据，此接口默认使用价格更便宜的V1接口进行请求。 ### 参数: - share_text: 作品链接或分享文本 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL, this API defaults to using the cheaper V1 API for requests. ### Parameters: - share_text: Photo URL or share text ### Returns: - Video data  # [示例/Example] share_text = \"https://v.kuaishou.com/cNYP0Z\"
     * @summary 根据链接获取单个作品数据/Fetch single video by URL
     * @param {string} shareText 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet(shareText: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 根据链接获取单个作品数据，此接口默认使用价格更便宜的V1接口进行请求。 ### 参数: - share_text: 作品链接或分享文本 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL, this API defaults to using the cheaper V1 API for requests. ### Parameters: - share_text: Photo URL or share text ### Returns: - Video data  # [示例/Example] share_text = \"https://v.kuaishou.com/cNYP0Z\"
     * @summary 根据链接获取单个作品数据/Fetch single video by URL
     * @param {string} shareText 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet_7(shareText: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据，如果此接口连续请求失败，可以尝试使用价格更昂贵的V2接口进行冗余请求。 ### 参数: - photo_id: 作品ID，作品ID可以从分享链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, if this API continuously fails, you can try to use the more expensive V2 API for redundant requests. ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the share link ### Returns: - Video data  # [示例/Example] photo_id = \"3xhpk3xcf6e4iac\"
     * @summary 快手单一视频查询接口V1/Kuaishou single video query API V1
     * @param {string} photoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet(photoId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据，如果此接口连续请求失败，可以尝试使用价格更昂贵的V2接口进行冗余请求。 ### 参数: - photo_id: 作品ID，作品ID可以从分享链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, if this API continuously fails, you can try to use the more expensive V2 API for redundant requests. ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the share link ### Returns: - Video data  # [示例/Example] photo_id = \"3xhpk3xcf6e4iac\"
     * @summary 快手单一视频查询接口V1/Kuaishou single video query API V1
     * @param {string} photoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet_8(photoId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据接口 V2，此接口仅作为备选接口，收费较贵，但稳定性更高。 - 此接口请求价格为 0.01 美元/次，请求不成功不收费。 ### 参数: - photo_id: 作品ID ### 返回: - 视频数据  # [English] ### Purpose: - Single video query API V2, this API is only used as an alternative API, it is more expensive, but more stable. - The request price of this API is 0.01 USD/time, and the request is not successful without charge. ### Parameters: - photo_id: Photo ID ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"
     * @summary 快手单一视频查询接口V2/Kuaishou single video query API V2
     * @param {string} photoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get(photoId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据接口 V2，此接口仅作为备选接口，收费较贵，但稳定性更高。 - 此接口请求价格为 0.01 美元/次，请求不成功不收费。 ### 参数: - photo_id: 作品ID ### 返回: - 视频数据  # [English] ### Purpose: - Single video query API V2, this API is only used as an alternative API, it is more expensive, but more stable. - The request price of this API is 0.01 USD/time, and the request is not successful without charge. ### Parameters: - photo_id: Photo ID ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"
     * @summary 快手单一视频查询接口V2/Kuaishou single video query API V2
     * @param {string} photoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get_9(photoId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 快手购物榜单 ### 参数: 获取快手购物榜单，支持多个子榜单，具体参数如下：  - 购物榜单热门主播榜对应参数：     - subTabId = 0     - subTabName = None - 购物榜单热销商品榜对应参数：     - subTabId = 102     - subTabName = \"热销商品\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou shopping top list ### Parameters: Get the Kuaishou shopping top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the shopping hot anchor list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the shopping hot selling product list:     - subTabId = 102     - subTabName = \"Hot Selling Product\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
     * @summary 快手购物榜单/Kuaishou shopping top list
     * @param {number} [subTabId] 
     * @param {string} [subTabName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet(subTabId?: number, subTabName?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 快手购物榜单 ### 参数: 获取快手购物榜单，支持多个子榜单，具体参数如下：  - 购物榜单热门主播榜对应参数：     - subTabId = 0     - subTabName = None - 购物榜单热销商品榜对应参数：     - subTabId = 102     - subTabName = \"热销商品\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou shopping top list ### Parameters: Get the Kuaishou shopping top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the shopping hot anchor list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the shopping hot selling product list:     - subTabId = 102     - subTabName = \"Hot Selling Product\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
     * @summary 快手购物榜单/Kuaishou shopping top list
     * @param {number} [subTabId] 
     * @param {string} [subTabName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet_10(subTabId?: number, subTabName?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户热门作品数据 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 作品游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 作品数据  # [English] ### Purpose: - Get user hot post data ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Post cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Post data  # [示例/Example] user_id = \"228905802\" pcursor = None
     * @summary 获取用户热门作品数据/Get user hot post data
     * @param {string} userId 
     * @param {string} [pcursor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet(userId: string, pcursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户热门作品数据 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 作品游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 作品数据  # [English] ### Purpose: - Get user hot post data ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Post cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Post data  # [示例/Example] user_id = \"228905802\" pcursor = None
     * @summary 获取用户热门作品数据/Get user hot post data
     * @param {string} userId 
     * @param {string} [pcursor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet_11(userId: string, pcursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户直播信息 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 ### 返回: - 直播信息  # [English] ### Purpose: - Get user live info ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. ### Returns: - Live info  # [示例/Example] user_id = \"1377082950\"
     * @summary 获取用户直播信息/Get user live info
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户直播信息 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 ### 返回: - 直播信息  # [English] ### Purpose: - Get user live info ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. ### Returns: - Live info  # [示例/Example] user_id = \"1377082950\"
     * @summary 获取用户直播信息/Get user live info
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet_12(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 用户视频列表 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - User video list V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id = \"228905802\" pcursor = None
     * @summary 用户视频列表V2/User video list V2
     * @param {string} userId 
     * @param {string} [pcursor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get(userId: string, pcursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 用户视频列表 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - User video list V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id = \"228905802\" pcursor = None
     * @summary 用户视频列表V2/User video list V2
     * @param {string} userId 
     * @param {string} [pcursor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get_13(userId: string, pcursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id = \"3x7gxp2zhgjv832\" pcursor = None
     * @summary 获取单个作品评论数据/Get single video comment data
     * @param {string} photoId 
     * @param {string} [pcursor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet(photoId: string, pcursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id = \"3x7gxp2zhgjv832\" pcursor = None
     * @summary 获取单个作品评论数据/Get single video comment data
     * @param {string} photoId 
     * @param {string} [pcursor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet_14(photoId: string, pcursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成快手分享链接 ### 参数: - shareObjectId: 作品ID ### 返回: - 分享链接  # [English] ### Purpose: - Generate Kuaishou share link ### Parameters: - photo_id: Photo ID ### Returns: - Share link  # [示例/Example] shareObjectId = \"3xg5wjqdtekbb3u\"
     * @summary 生成快手分享链接/Generate Kuaishou share link
     * @param {string} shareObjectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet(shareObjectId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 生成快手分享链接 ### 参数: - shareObjectId: 作品ID ### 返回: - 分享链接  # [English] ### Purpose: - Generate Kuaishou share link ### Parameters: - photo_id: Photo ID ### Returns: - Share link  # [示例/Example] shareObjectId = \"3xg5wjqdtekbb3u\"
     * @summary 生成快手分享链接/Generate Kuaishou share link
     * @param {string} shareObjectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet_15(shareObjectId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索用户 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 用户页数，从1开始 ### 返回: - 用户数据  # [English] ### Purpose: - Search user V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: User page number, starting from 1 ### Returns: - User data  # [示例/Example] keyword = \"人工智能\" page = \"1\"
     * @summary 搜索用户V2/Search user V2
     * @param {string} keyword 
     * @param {string} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    searchUserV2ApiV1KuaishouAppSearchUserV2Get(keyword: string, page?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索用户 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 用户页数，从1开始 ### 返回: - 用户数据  # [English] ### Purpose: - Search user V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: User page number, starting from 1 ### Returns: - User data  # [示例/Example] keyword = \"人工智能\" page = \"1\"
     * @summary 搜索用户V2/Search user V2
     * @param {string} keyword 
     * @param {string} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    searchUserV2ApiV1KuaishouAppSearchUserV2Get_16(keyword: string, page?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索视频 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 视频页数，从1开始 ### 返回: - 视频数据  # [English] ### Purpose: - Search video V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: Page number, starting from 1 ### Returns: - Videos data  # [示例/Example] keyword = \"人工智能\" page = \"1\"
     * @summary 搜索视频V2/Search video V2
     * @param {string} keyword 
     * @param {string} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    searchVideoV2ApiV1KuaishouAppSearchVideoV2Get(keyword: string, page?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索视频 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 视频页数，从1开始 ### 返回: - 视频数据  # [English] ### Purpose: - Search video V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: Page number, starting from 1 ### Returns: - Videos data  # [示例/Example] keyword = \"人工智能\" page = \"1\"
     * @summary 搜索视频V2/Search video V2
     * @param {string} keyword 
     * @param {string} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApiInterface
     */
    searchVideoV2ApiV1KuaishouAppSearchVideoV2Get_17(keyword: string, page?: string, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * KuaishouAppAPIApi - object-oriented interface
 * @export
 * @class KuaishouAppAPIApi
 * @extends {BaseAPI}
 */
export class KuaishouAppAPIApi extends BaseAPI implements KuaishouAppAPIApiInterface {
    /**
     * # [中文] ### 用途: - 快手品牌榜单 ### 参数: 获取快手品牌榜单，支持多个子榜单，具体参数如下：  - 品牌榜单热门美妆榜对应参数：     - subTabId = 0     - subTabName = None - 品牌榜单热门服饰榜对应参数：     - subTabId = 131     - subTabName = \"服饰\" - 品牌榜单热门汽车榜对应参数：     - subTabId = 1     - subTabName = \"汽车\" - 品牌榜单热门游戏榜对应参数：     - subTabId = 25     - subTabName = \"游戏\" - 品牌榜单热门医疗健康榜对应参数：     - subTabId = 24     - subTabName = \"医疗健康\" - 品牌榜单热门3C数码榜对应参数：     - subTabId = 130     - subTabName = \"3C数码\" - 品牌榜单热门手机榜对应参数：     - subTabId = 128     - subTabName = \"手机\" - 品牌榜单热门家电榜对应参数：     - subTabId = 11     - subTabName = \"家电\" - 品牌榜单热门母婴榜对应参数：     - subTabId = 4     - subTabName = \"母婴\" - 品牌榜单热门食品饮料榜对应参数：     - subTabId = 2     - subTabName = \"食品饮料\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou brand top list ### Parameters: Get the Kuaishou brand top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the brand hot beauty list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the brand hot clothing list:     - subTabId = 131     - subTabName = \"Clothing\" - Corresponding parameters for the brand hot car list:     - subTabId = 1     - subTabName = \"Car\" - Corresponding parameters for the brand hot game list:     - subTabId = 25     - subTabName = \"Game\" - Corresponding parameters for the brand hot medical health list:     - subTabId = 24     - subTabName = \"Medical Health\" - Corresponding parameters for the brand hot 3C digital list:     - subTabId = 130     - subTabName = \"3C Digital\" - Corresponding parameters for the brand hot mobile phone list:     - subTabId = 128     - subTabName = \"Mobile Phone\" - Corresponding parameters for the brand hot home appliance list:     - subTabId = 11     - subTabName = \"Home Appliance\" - Corresponding parameters for the brand hot maternal and child list:     - subTabId = 4     - subTabName = \"Maternal and Child\" - Corresponding parameters for the brand hot food and beverage list:     - subTabId = 2     - subTabName = \"Food and Beverage\"   ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
     * @summary 快手品牌榜单/Kuaishou brand top list
     * @param {number} [subTabId] 
     * @param {string} [subTabName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet(subTabId?: number, subTabName?: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet(subTabId, subTabName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 快手品牌榜单 ### 参数: 获取快手品牌榜单，支持多个子榜单，具体参数如下：  - 品牌榜单热门美妆榜对应参数：     - subTabId = 0     - subTabName = None - 品牌榜单热门服饰榜对应参数：     - subTabId = 131     - subTabName = \"服饰\" - 品牌榜单热门汽车榜对应参数：     - subTabId = 1     - subTabName = \"汽车\" - 品牌榜单热门游戏榜对应参数：     - subTabId = 25     - subTabName = \"游戏\" - 品牌榜单热门医疗健康榜对应参数：     - subTabId = 24     - subTabName = \"医疗健康\" - 品牌榜单热门3C数码榜对应参数：     - subTabId = 130     - subTabName = \"3C数码\" - 品牌榜单热门手机榜对应参数：     - subTabId = 128     - subTabName = \"手机\" - 品牌榜单热门家电榜对应参数：     - subTabId = 11     - subTabName = \"家电\" - 品牌榜单热门母婴榜对应参数：     - subTabId = 4     - subTabName = \"母婴\" - 品牌榜单热门食品饮料榜对应参数：     - subTabId = 2     - subTabName = \"食品饮料\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou brand top list ### Parameters: Get the Kuaishou brand top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the brand hot beauty list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the brand hot clothing list:     - subTabId = 131     - subTabName = \"Clothing\" - Corresponding parameters for the brand hot car list:     - subTabId = 1     - subTabName = \"Car\" - Corresponding parameters for the brand hot game list:     - subTabId = 25     - subTabName = \"Game\" - Corresponding parameters for the brand hot medical health list:     - subTabId = 24     - subTabName = \"Medical Health\" - Corresponding parameters for the brand hot 3C digital list:     - subTabId = 130     - subTabName = \"3C Digital\" - Corresponding parameters for the brand hot mobile phone list:     - subTabId = 128     - subTabName = \"Mobile Phone\" - Corresponding parameters for the brand hot home appliance list:     - subTabId = 11     - subTabName = \"Home Appliance\" - Corresponding parameters for the brand hot maternal and child list:     - subTabId = 4     - subTabName = \"Maternal and Child\" - Corresponding parameters for the brand hot food and beverage list:     - subTabId = 2     - subTabName = \"Food and Beverage\"   ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
     * @summary 快手品牌榜单/Kuaishou brand top list
     * @param {number} [subTabId] 
     * @param {string} [subTabName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet_1(subTabId?: number, subTabName?: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchBrandTopListApiV1KuaishouAppFetchBrandTopListGet_1(subTabId, subTabName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 快手热榜分类 ### 返回: - 分类数据  # [English] ### Purpose: - Kuaishou hot categories ### Returns: - Categories data
     * @summary 快手热榜分类/Kuaishou hot categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet(options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 快手热榜分类 ### 返回: - 分类数据  # [English] ### Purpose: - Kuaishou hot categories ### Returns: - Categories data
     * @summary 快手热榜分类/Kuaishou hot categories
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet_2(options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchHotBoardCategoriesApiV1KuaishouAppFetchHotBoardCategoriesGet_2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 快手热榜详情 ### 参数: - boardType: 榜单类型 - boardId: 榜单ID - boardType 和 boardId 可以从热榜分类接口中获取。 ### 返回: - 详情数据  # [English] ### Purpose: - Kuaishou hot board detail ### Parameters: - boardType: Board type - boardId: Board ID - boardType and boardId can be obtained from the hot board categories interface. ### Returns: - Detail data  # [示例/Example] boardType = 1 boardId = 1
     * @summary 快手热榜详情/Kuaishou hot board detail
     * @param {number} [boardType] 
     * @param {number} [boardId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet(boardType?: number, boardId?: number, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet(boardType, boardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 快手热榜详情 ### 参数: - boardType: 榜单类型 - boardId: 榜单ID - boardType 和 boardId 可以从热榜分类接口中获取。 ### 返回: - 详情数据  # [English] ### Purpose: - Kuaishou hot board detail ### Parameters: - boardType: Board type - boardId: Board ID - boardType and boardId can be obtained from the hot board categories interface. ### Returns: - Detail data  # [示例/Example] boardType = 1 boardId = 1
     * @summary 快手热榜详情/Kuaishou hot board detail
     * @param {number} [boardType] 
     * @param {number} [boardId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet_3(boardType?: number, boardId?: number, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchHotBoardDetailApiV1KuaishouAppFetchHotBoardDetailGet_3(boardType, boardId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 快手热搜人物榜单 ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou hot search person board ### Returns: - Board data
     * @summary 快手热搜人物榜单/Kuaishou hot search person board
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet(options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 快手热搜人物榜单 ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou hot search person board ### Returns: - Board data
     * @summary 快手热搜人物榜单/Kuaishou hot search person board
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet_4(options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchHotSearchPersonApiV1KuaishouAppFetchHotSearchPersonGet_4(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 快手直播榜单 ### 参数: 获取快手直播榜单，支持多个子榜单，具体参数如下：  - 直播总榜对应参数：     - subTabId = 0     - subTabName = None - 直播音乐榜对应参数：     - subTabId = 102     - subTabName = \"音乐\" - 直播舞蹈榜对应参数：     - subTabId = 107     - subTabName = \"舞蹈\" - 直播颜值榜对应参数：     - subTabId = 101     - subTabName = \"颜值\" - 直播国艺榜对应参数：     - subTabId = 105     - subTabName = \"国艺\" - 直播相亲榜对应参数：     - subTabId = 111     - subTabName = \"相亲\" - 直播游戏榜对应参数：     - subTabId = 106     - subTabName = \"游戏\" - 直播二次元榜对应参数：     - subTabId = 110     - subTabName = \"二次元\" - 直播故事榜对应参数：     - subTabId = 104     - subTabName = \"故事\" - 直播团播榜对应参数：     - subTabId = 113     - subTabName = \"团播\" - 直播九宫格榜对应参数：     - subTabId = 114     - subTabName = \"九宫格\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou live top list ### Parameters: Get the Kuaishou live top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the live total list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the live music list:     - subTabId = 102     - subTabName = \"Music\" - Corresponding parameters for the live dance list:     - subTabId = 107     - subTabName = \"Dance\" - Corresponding parameters for the live beauty list:     - subTabId = 101     - subTabName = \"Beauty\" - Corresponding parameters for the live national art list:     - subTabId = 105     - subTabName = \"National Art\" - Corresponding parameters for the live blind date list:     - subTabId = 111     - subTabName = \"Blind Date\" - Corresponding parameters for the live game list:     - subTabId = 106     - subTabName = \"Game\" - Corresponding parameters for the live second element list:     - subTabId = 110     - subTabName = \"Second Element\" - Corresponding parameters for the live story list:     - subTabId = 104     - subTabName = \"Story\" - Corresponding parameters for the live group broadcast list:     - subTabId = 113     - subTabName = \"Group Broadcast\" - Corresponding parameters for the live nine-grid list:     - subTabId = 114     - subTabName = \"Nine Grid\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
     * @summary 快手直播榜单/Kuaishou live top list
     * @param {number} [subTabId] 
     * @param {string} [subTabName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet(subTabId?: number, subTabName?: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet(subTabId, subTabName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 快手直播榜单 ### 参数: 获取快手直播榜单，支持多个子榜单，具体参数如下：  - 直播总榜对应参数：     - subTabId = 0     - subTabName = None - 直播音乐榜对应参数：     - subTabId = 102     - subTabName = \"音乐\" - 直播舞蹈榜对应参数：     - subTabId = 107     - subTabName = \"舞蹈\" - 直播颜值榜对应参数：     - subTabId = 101     - subTabName = \"颜值\" - 直播国艺榜对应参数：     - subTabId = 105     - subTabName = \"国艺\" - 直播相亲榜对应参数：     - subTabId = 111     - subTabName = \"相亲\" - 直播游戏榜对应参数：     - subTabId = 106     - subTabName = \"游戏\" - 直播二次元榜对应参数：     - subTabId = 110     - subTabName = \"二次元\" - 直播故事榜对应参数：     - subTabId = 104     - subTabName = \"故事\" - 直播团播榜对应参数：     - subTabId = 113     - subTabName = \"团播\" - 直播九宫格榜对应参数：     - subTabId = 114     - subTabName = \"九宫格\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou live top list ### Parameters: Get the Kuaishou live top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the live total list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the live music list:     - subTabId = 102     - subTabName = \"Music\" - Corresponding parameters for the live dance list:     - subTabId = 107     - subTabName = \"Dance\" - Corresponding parameters for the live beauty list:     - subTabId = 101     - subTabName = \"Beauty\" - Corresponding parameters for the live national art list:     - subTabId = 105     - subTabName = \"National Art\" - Corresponding parameters for the live blind date list:     - subTabId = 111     - subTabName = \"Blind Date\" - Corresponding parameters for the live game list:     - subTabId = 106     - subTabName = \"Game\" - Corresponding parameters for the live second element list:     - subTabId = 110     - subTabName = \"Second Element\" - Corresponding parameters for the live story list:     - subTabId = 104     - subTabName = \"Story\" - Corresponding parameters for the live group broadcast list:     - subTabId = 113     - subTabName = \"Group Broadcast\" - Corresponding parameters for the live nine-grid list:     - subTabId = 114     - subTabName = \"Nine Grid\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
     * @summary 快手直播榜单/Kuaishou live top list
     * @param {number} [subTabId] 
     * @param {string} [subTabName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet_5(subTabId?: number, subTabName?: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchLiveTopListApiV1KuaishouAppFetchLiveTopListGet_5(subTabId, subTabName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个用户数据 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 支持`eid`或`userId`，eid是用户主页链接中的一部分，user_id则可以从不同的接口中获取。 - 两种用户ID都可以使用，下面是两种用户ID的示例，这两个ID都指向同一个用户：     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### 返回: - 用户数据  # [English] ### Purpose: - Fetch single user data V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: Supports `eid` or `userId`, `eid` is part of the user profile link, and `user_id` can be obtained from different interfaces. - Both user IDs can be used, here are examples of the two user IDs, both of which point to the same user:     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### Returns: - User data  # [示例/Example] user_id = \"3xz63mn6fngqtiq\"
     * @summary 获取单个用户数据V2/Get single user data V2
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get(userId: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个用户数据 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 支持`eid`或`userId`，eid是用户主页链接中的一部分，user_id则可以从不同的接口中获取。 - 两种用户ID都可以使用，下面是两种用户ID的示例，这两个ID都指向同一个用户：     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### 返回: - 用户数据  # [English] ### Purpose: - Fetch single user data V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: Supports `eid` or `userId`, `eid` is part of the user profile link, and `user_id` can be obtained from different interfaces. - Both user IDs can be used, here are examples of the two user IDs, both of which point to the same user:     - eid = \"3xz63mn6fngqtiq\"     - userId = \"228905802\" ### Returns: - User data  # [示例/Example] user_id = \"3xz63mn6fngqtiq\"
     * @summary 获取单个用户数据V2/Get single user data V2
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get_6(userId: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchOneUserV2ApiV1KuaishouAppFetchOneUserV2Get_6(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据链接获取单个作品数据，此接口默认使用价格更便宜的V1接口进行请求。 ### 参数: - share_text: 作品链接或分享文本 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL, this API defaults to using the cheaper V1 API for requests. ### Parameters: - share_text: Photo URL or share text ### Returns: - Video data  # [示例/Example] share_text = \"https://v.kuaishou.com/cNYP0Z\"
     * @summary 根据链接获取单个作品数据/Fetch single video by URL
     * @param {string} shareText 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet(shareText: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet(shareText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 根据链接获取单个作品数据，此接口默认使用价格更便宜的V1接口进行请求。 ### 参数: - share_text: 作品链接或分享文本 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video by URL, this API defaults to using the cheaper V1 API for requests. ### Parameters: - share_text: Photo URL or share text ### Returns: - Video data  # [示例/Example] share_text = \"https://v.kuaishou.com/cNYP0Z\"
     * @summary 根据链接获取单个作品数据/Fetch single video by URL
     * @param {string} shareText 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet_7(shareText: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchOneVideoByShareTextApiV1KuaishouAppFetchOneVideoByUrlGet_7(shareText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据，如果此接口连续请求失败，可以尝试使用价格更昂贵的V2接口进行冗余请求。 ### 参数: - photo_id: 作品ID，作品ID可以从分享链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, if this API continuously fails, you can try to use the more expensive V2 API for redundant requests. ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the share link ### Returns: - Video data  # [示例/Example] photo_id = \"3xhpk3xcf6e4iac\"
     * @summary 快手单一视频查询接口V1/Kuaishou single video query API V1
     * @param {string} photoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet(photoId: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet(photoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据，如果此接口连续请求失败，可以尝试使用价格更昂贵的V2接口进行冗余请求。 ### 参数: - photo_id: 作品ID，作品ID可以从分享链接中提取 ### 返回: - 视频数据  # [English] ### Purpose: - Fetch single video data, if this API continuously fails, you can try to use the more expensive V2 API for redundant requests. ### Parameters: - photo_id: Photo ID, the photo ID can be extracted from the share link ### Returns: - Video data  # [示例/Example] photo_id = \"3xhpk3xcf6e4iac\"
     * @summary 快手单一视频查询接口V1/Kuaishou single video query API V1
     * @param {string} photoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet_8(photoId: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchOneVideoV1ApiV1KuaishouAppFetchOneVideoGet_8(photoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据接口 V2，此接口仅作为备选接口，收费较贵，但稳定性更高。 - 此接口请求价格为 0.01 美元/次，请求不成功不收费。 ### 参数: - photo_id: 作品ID ### 返回: - 视频数据  # [English] ### Purpose: - Single video query API V2, this API is only used as an alternative API, it is more expensive, but more stable. - The request price of this API is 0.01 USD/time, and the request is not successful without charge. ### Parameters: - photo_id: Photo ID ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"
     * @summary 快手单一视频查询接口V2/Kuaishou single video query API V2
     * @param {string} photoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get(photoId: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get(photoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据接口 V2，此接口仅作为备选接口，收费较贵，但稳定性更高。 - 此接口请求价格为 0.01 美元/次，请求不成功不收费。 ### 参数: - photo_id: 作品ID ### 返回: - 视频数据  # [English] ### Purpose: - Single video query API V2, this API is only used as an alternative API, it is more expensive, but more stable. - The request price of this API is 0.01 USD/time, and the request is not successful without charge. ### Parameters: - photo_id: Photo ID ### Returns: - Video data  # [示例/Example] photo_id = \"3xtdqvdnqd3psuc\"
     * @summary 快手单一视频查询接口V2/Kuaishou single video query API V2
     * @param {string} photoId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get_9(photoId: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchOneVideoV2ApiV1KuaishouAppFetchOneVideoV2Get_9(photoId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 快手购物榜单 ### 参数: 获取快手购物榜单，支持多个子榜单，具体参数如下：  - 购物榜单热门主播榜对应参数：     - subTabId = 0     - subTabName = None - 购物榜单热销商品榜对应参数：     - subTabId = 102     - subTabName = \"热销商品\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou shopping top list ### Parameters: Get the Kuaishou shopping top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the shopping hot anchor list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the shopping hot selling product list:     - subTabId = 102     - subTabName = \"Hot Selling Product\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
     * @summary 快手购物榜单/Kuaishou shopping top list
     * @param {number} [subTabId] 
     * @param {string} [subTabName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet(subTabId?: number, subTabName?: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet(subTabId, subTabName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 快手购物榜单 ### 参数: 获取快手购物榜单，支持多个子榜单，具体参数如下：  - 购物榜单热门主播榜对应参数：     - subTabId = 0     - subTabName = None - 购物榜单热销商品榜对应参数：     - subTabId = 102     - subTabName = \"热销商品\"  ### 返回: - 榜单数据  # [English] ### Purpose: - Kuaishou shopping top list ### Parameters: Get the Kuaishou shopping top list, support multiple sub-top lists, specific parameters are as follows:  - Corresponding parameters for the shopping hot anchor list:     - subTabId = 0     - subTabName = None - Corresponding parameters for the shopping hot selling product list:     - subTabId = 102     - subTabName = \"Hot Selling Product\"  ### Returns: - List data  # [示例/Example] subTabId = 0 subTabName = None
     * @summary 快手购物榜单/Kuaishou shopping top list
     * @param {number} [subTabId] 
     * @param {string} [subTabName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet_10(subTabId?: number, subTabName?: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchShoppingTopListApiV1KuaishouAppFetchShoppingTopListGet_10(subTabId, subTabName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户热门作品数据 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 作品游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 作品数据  # [English] ### Purpose: - Get user hot post data ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Post cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Post data  # [示例/Example] user_id = \"228905802\" pcursor = None
     * @summary 获取用户热门作品数据/Get user hot post data
     * @param {string} userId 
     * @param {string} [pcursor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet(userId: string, pcursor?: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet(userId, pcursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户热门作品数据 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 作品游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 作品数据  # [English] ### Purpose: - Get user hot post data ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Post cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Post data  # [示例/Example] user_id = \"228905802\" pcursor = None
     * @summary 获取用户热门作品数据/Get user hot post data
     * @param {string} userId 
     * @param {string} [pcursor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet_11(userId: string, pcursor?: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchUserHotPostApiV1KuaishouAppFetchUserHotPostGet_11(userId, pcursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户直播信息 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 ### 返回: - 直播信息  # [English] ### Purpose: - Get user live info ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. ### Returns: - Live info  # [示例/Example] user_id = \"1377082950\"
     * @summary 获取用户直播信息/Get user live info
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet(userId: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户直播信息 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 ### 返回: - 直播信息  # [English] ### Purpose: - Get user live info ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. ### Returns: - Live info  # [示例/Example] user_id = \"1377082950\"
     * @summary 获取用户直播信息/Get user live info
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet_12(userId: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchUserLiveInfoApiV1KuaishouAppFetchUserLiveInfoGet_12(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 用户视频列表 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - User video list V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id = \"228905802\" pcursor = None
     * @summary 用户视频列表V2/User video list V2
     * @param {string} userId 
     * @param {string} [pcursor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get(userId: string, pcursor?: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get(userId, pcursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 用户视频列表 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - user_id: 用户ID，此接口只支持用户ID，不支持用户eid，也就是输入必须要是纯数字ID。 - user_id 可以从获取单个用户数据接口中获取。 - pcursor: 视频游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 视频数据  # [English] ### Purpose: - User video list V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - user_id: User ID, this API only supports user ID, not user eid, that is, the input must be a pure digital ID. - user_id can be obtained from the get single user data interface. - pcursor: Video cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Videos data  # [示例/Example] user_id = \"228905802\" pcursor = None
     * @summary 用户视频列表V2/User video list V2
     * @param {string} userId 
     * @param {string} [pcursor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get_13(userId: string, pcursor?: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchUserPostV2ApiV1KuaishouAppFetchUserPostV2Get_13(userId, pcursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id = \"3x7gxp2zhgjv832\" pcursor = None
     * @summary 获取单个作品评论数据/Get single video comment data
     * @param {string} photoId 
     * @param {string} [pcursor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet(photoId: string, pcursor?: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet(photoId, pcursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品评论数据 ### 参数: - photo_id: 作品ID - pcursor: 评论游标，第一次请求为空，后续请求使用返回响应中的pcursor值进行翻页。 ### 返回: - 评论数据  # [English] ### Purpose: - Fetch single video comment data ### Parameters: - photo_id: Photo ID - pcursor: Comment cursor, empty for the first request, and use the pcursor value in the returned response for subsequent requests. ### Returns: - Comments data  # [示例/Example] photo_id = \"3x7gxp2zhgjv832\" pcursor = None
     * @summary 获取单个作品评论数据/Get single video comment data
     * @param {string} photoId 
     * @param {string} [pcursor] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet_14(photoId: string, pcursor?: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).fetchVideoCommentApiV1KuaishouAppFetchOneVideoCommentGet_14(photoId, pcursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成快手分享链接 ### 参数: - shareObjectId: 作品ID ### 返回: - 分享链接  # [English] ### Purpose: - Generate Kuaishou share link ### Parameters: - photo_id: Photo ID ### Returns: - Share link  # [示例/Example] shareObjectId = \"3xg5wjqdtekbb3u\"
     * @summary 生成快手分享链接/Generate Kuaishou share link
     * @param {string} shareObjectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet(shareObjectId: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet(shareObjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 生成快手分享链接 ### 参数: - shareObjectId: 作品ID ### 返回: - 分享链接  # [English] ### Purpose: - Generate Kuaishou share link ### Parameters: - photo_id: Photo ID ### Returns: - Share link  # [示例/Example] shareObjectId = \"3xg5wjqdtekbb3u\"
     * @summary 生成快手分享链接/Generate Kuaishou share link
     * @param {string} shareObjectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet_15(shareObjectId: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).generateKuaishouShareLinkApiV1KuaishouAppGenerateKuaishouShareLinkGet_15(shareObjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索用户 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 用户页数，从1开始 ### 返回: - 用户数据  # [English] ### Purpose: - Search user V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: User page number, starting from 1 ### Returns: - User data  # [示例/Example] keyword = \"人工智能\" page = \"1\"
     * @summary 搜索用户V2/Search user V2
     * @param {string} keyword 
     * @param {string} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public searchUserV2ApiV1KuaishouAppSearchUserV2Get(keyword: string, page?: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).searchUserV2ApiV1KuaishouAppSearchUserV2Get(keyword, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索用户 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 用户页数，从1开始 ### 返回: - 用户数据  # [English] ### Purpose: - Search user V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: User page number, starting from 1 ### Returns: - User data  # [示例/Example] keyword = \"人工智能\" page = \"1\"
     * @summary 搜索用户V2/Search user V2
     * @param {string} keyword 
     * @param {string} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public searchUserV2ApiV1KuaishouAppSearchUserV2Get_16(keyword: string, page?: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).searchUserV2ApiV1KuaishouAppSearchUserV2Get_16(keyword, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索视频 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 视频页数，从1开始 ### 返回: - 视频数据  # [English] ### Purpose: - Search video V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: Page number, starting from 1 ### Returns: - Videos data  # [示例/Example] keyword = \"人工智能\" page = \"1\"
     * @summary 搜索视频V2/Search video V2
     * @param {string} keyword 
     * @param {string} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public searchVideoV2ApiV1KuaishouAppSearchVideoV2Get(keyword: string, page?: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).searchVideoV2ApiV1KuaishouAppSearchVideoV2Get(keyword, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索视频 V2 - 此接口收费较贵，但稳定性更高，具体价格请在用户后台查看价格表。 ### 参数: - keyword: 搜索关键词 - page: 视频页数，从1开始 ### 返回: - 视频数据  # [English] ### Purpose: - Search video V2 - This API is more expensive, but more stable, please check the price list in the user background for specific prices. ### Parameters: - keyword: Search keyword - page: Page number, starting from 1 ### Returns: - Videos data  # [示例/Example] keyword = \"人工智能\" page = \"1\"
     * @summary 搜索视频V2/Search video V2
     * @param {string} keyword 
     * @param {string} [page] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KuaishouAppAPIApi
     */
    public searchVideoV2ApiV1KuaishouAppSearchVideoV2Get_17(keyword: string, page?: string, options?: any) {
        return KuaishouAppAPIApiFp(this.configuration).searchVideoV2ApiV1KuaishouAppSearchVideoV2Get_17(keyword, page, options).then((request) => request(this.axios, this.basePath));
    }

}
