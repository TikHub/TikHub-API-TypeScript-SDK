// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
/**
 * XiguaAppV2APIApi - axios parameter creator
 * @export
 */
export const XiguaAppV2APIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取单个作品数据（信息较少，不包含标题等信息，但是包含相关视频的信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (less information, does not include title and other information, but includes information about related videos) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1XiguaAppV2FetchOneVideoGet: async (itemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchOneVideoApiV1XiguaAppV2FetchOneVideoGet.');
            }
            const localVarPath = `/api/v1/xigua/app/v2/fetch_one_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据（信息较少，不包含标题等信息，但是包含相关视频的信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (less information, does not include title and other information, but includes information about related videos) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1XiguaAppV2FetchOneVideoGet_1: async (itemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchOneVideoApiV1XiguaAppV2FetchOneVideoGet_1.');
            }
            const localVarPath = `/api/v1/xigua/app/v2/fetch_one_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品的播放链接，此接口返回的是已经解码后的播放链接，可以直接使用。 ### 参数: - item_id: 作品id ### 返回: - 作品的播放链接的明文链接。  # [English] ### Purpose: - Get single video play URL, the interface returns the decoded play URL, which can be used directly. ### Parameters: - item_id: Video id ### Return: - Play URL of the video, plaintext link.  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 获取单个作品的播放链接/Get single video play URL
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoPlayUrlApiV1XiguaAppV2FetchOneVideoPlayUrlGet: async (itemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchOneVideoPlayUrlApiV1XiguaAppV2FetchOneVideoPlayUrlGet.');
            }
            const localVarPath = `/api/v1/xigua/app/v2/fetch_one_video_play_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品的播放链接，此接口返回的是已经解码后的播放链接，可以直接使用。 ### 参数: - item_id: 作品id ### 返回: - 作品的播放链接的明文链接。  # [English] ### Purpose: - Get single video play URL, the interface returns the decoded play URL, which can be used directly. ### Parameters: - item_id: Video id ### Return: - Play URL of the video, plaintext link.  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 获取单个作品的播放链接/Get single video play URL
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoPlayUrlApiV1XiguaAppV2FetchOneVideoPlayUrlGet_2: async (itemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchOneVideoPlayUrlApiV1XiguaAppV2FetchOneVideoPlayUrlGet_2.');
            }
            const localVarPath = `/api/v1/xigua/app/v2/fetch_one_video_play_url`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据（信息全面，包含标题等信息，但是不包含相关视频推荐信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (more comprehensive information, including title and other information, but not including information about related video recommendations) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 获取单个作品数据 V2/Get single video data V2
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV2ApiV1XiguaAppV2FetchOneVideoV2Get: async (itemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchOneVideoV2ApiV1XiguaAppV2FetchOneVideoV2Get.');
            }
            const localVarPath = `/api/v1/xigua/app/v2/fetch_one_video_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据（信息全面，包含标题等信息，但是不包含相关视频推荐信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (more comprehensive information, including title and other information, but not including information about related video recommendations) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 获取单个作品数据 V2/Get single video data V2
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV2ApiV1XiguaAppV2FetchOneVideoV2Get_3: async (itemId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchOneVideoV2ApiV1XiguaAppV2FetchOneVideoV2Get_3.');
            }
            const localVarPath = `/api/v1/xigua/app/v2/fetch_one_video_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 个人信息 ### 参数: - user_id: 用户id ### 返回: - 个人信息  # [English] ### Purpose: - Personal information ### Parameters: - user_id: User id ### Return: - Personal information  # [示例/Example] user_id: \"52712347586\"
         * @summary 个人信息/Personal information
         * @param {string} userId 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1XiguaAppV2FetchUserInfoGet: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserInfoApiV1XiguaAppV2FetchUserInfoGet.');
            }
            const localVarPath = `/api/v1/xigua/app/v2/fetch_user_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 个人信息 ### 参数: - user_id: 用户id ### 返回: - 个人信息  # [English] ### Purpose: - Personal information ### Parameters: - user_id: User id ### Return: - Personal information  # [示例/Example] user_id: \"52712347586\"
         * @summary 个人信息/Personal information
         * @param {string} userId 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1XiguaAppV2FetchUserInfoGet_4: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserInfoApiV1XiguaAppV2FetchUserInfoGet_4.');
            }
            const localVarPath = `/api/v1/xigua/app/v2/fetch_user_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取个人作品列表 ### 参数: - user_id: 用户id - max_behot_time: 最大行为时间，默认空，第一次请求传空，后续请求传上一次请求返回数据中的JSON中的值。 - max_behot_time的值可以是JSON路径为：$.data.data.[-1].behot_time - 也就是data中的最后一个元素的cursor值 ### 返回: - 作品列表  # [English] ### Purpose: - Get user post list ### Parameters: - user_id: User id - max_behot_time: Maximum behavior time, default empty, pass empty for the first request, pass the max_behot_time returned by the previous request for subsequent requests - The value of max_behot_time can be the JSON path: $.data.data.[-1].behot_time - That is, the cursor value of the last element in data ### Return: - Post list  # [示例/Example] user_id = \"1922379661976311\" max_behot_time = \"\"
         * @summary 获取个人作品列表/Get user post list
         * @param {string} userId 用户id/User id
         * @param {string} [maxBehotTime] 最大行为时间/Maximum behavior time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostListApiV1XiguaAppV2FetchUserPostListGet: async (userId: string, maxBehotTime?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserPostListApiV1XiguaAppV2FetchUserPostListGet.');
            }
            const localVarPath = `/api/v1/xigua/app/v2/fetch_user_post_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (maxBehotTime !== undefined) {
                localVarQueryParameter['max_behot_time'] = maxBehotTime;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取个人作品列表 ### 参数: - user_id: 用户id - max_behot_time: 最大行为时间，默认空，第一次请求传空，后续请求传上一次请求返回数据中的JSON中的值。 - max_behot_time的值可以是JSON路径为：$.data.data.[-1].behot_time - 也就是data中的最后一个元素的cursor值 ### 返回: - 作品列表  # [English] ### Purpose: - Get user post list ### Parameters: - user_id: User id - max_behot_time: Maximum behavior time, default empty, pass empty for the first request, pass the max_behot_time returned by the previous request for subsequent requests - The value of max_behot_time can be the JSON path: $.data.data.[-1].behot_time - That is, the cursor value of the last element in data ### Return: - Post list  # [示例/Example] user_id = \"1922379661976311\" max_behot_time = \"\"
         * @summary 获取个人作品列表/Get user post list
         * @param {string} userId 用户id/User id
         * @param {string} [maxBehotTime] 最大行为时间/Maximum behavior time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostListApiV1XiguaAppV2FetchUserPostListGet_5: async (userId: string, maxBehotTime?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserPostListApiV1XiguaAppV2FetchUserPostListGet_5.');
            }
            const localVarPath = `/api/v1/xigua/app/v2/fetch_user_post_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (maxBehotTime !== undefined) {
                localVarQueryParameter['max_behot_time'] = maxBehotTime;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 视频评论列表 ### 参数: - item_id: 作品id - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - count: 数量，默认20，建议保持默认。 ### 返回: - 评论列表  # [English] ### Purpose: - Video comment list ### Parameters: - item_id: Video id - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - count: Quantity, default 20, it is recommended to keep the default. ### Return: - Comment list  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 视频评论列表/Video comment list
         * @param {string} itemId 作品id/Video id
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentListApiV1XiguaAppV2FetchVideoCommentListGet: async (itemId: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchVideoCommentListApiV1XiguaAppV2FetchVideoCommentListGet.');
            }
            const localVarPath = `/api/v1/xigua/app/v2/fetch_video_comment_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 视频评论列表 ### 参数: - item_id: 作品id - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - count: 数量，默认20，建议保持默认。 ### 返回: - 评论列表  # [English] ### Purpose: - Video comment list ### Parameters: - item_id: Video id - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - count: Quantity, default 20, it is recommended to keep the default. ### Return: - Comment list  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 视频评论列表/Video comment list
         * @param {string} itemId 作品id/Video id
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentListApiV1XiguaAppV2FetchVideoCommentListGet_6: async (itemId: string, offset?: number, count?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'itemId' is not null or undefined
            if (itemId === null || itemId === undefined) {
                throw new RequiredError('itemId','Required parameter itemId was null or undefined when calling fetchVideoCommentListApiV1XiguaAppV2FetchVideoCommentListGet_6.');
            }
            const localVarPath = `/api/v1/xigua/app/v2/fetch_video_comment_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (itemId !== undefined) {
                localVarQueryParameter['item_id'] = itemId;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - order_type: 排序方式，为空时按照默认排序，以下为可选排序方式。     - 最新: publish_time     - 最热: play_count - min_duration: 最小时长，默认空，单位秒。 - max_duration: 最大时长，默认空，单位秒。 ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Keyword - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - order_type: Order type, empty for default sorting, the following are optional sorting methods.     - Newest: publish_time     - Hottest: play_count - min_duration: Minimum duration, default empty, in seconds. - max_duration: Maximum duration, default empty, in seconds. ### Return: - Video list  # [示例/Example] > 搜索关键字为“抖音”的视频，按照播放量排序，时长1-180秒(1-3分钟) > Search for videos with the keyword \"抖音\", sorted by play count, duration 1-180 seconds (1-3 minutes) keyword: \"抖音\" order_type: \"play_count\" min_duration: 1 max_duration: 180
         * @summary 搜索视频/Search video
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {string} [orderType] 排序方式/Order type
         * @param {number} [minDuration] 最小时长/Minimum duration
         * @param {number} [maxDuration] 最大时长/Maximum duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVideoApiV1XiguaAppV2SearchVideoGet: async (keyword: string, offset?: number, orderType?: string, minDuration?: number, maxDuration?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling searchVideoApiV1XiguaAppV2SearchVideoGet.');
            }
            const localVarPath = `/api/v1/xigua/app/v2/search_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (orderType !== undefined) {
                localVarQueryParameter['order_type'] = orderType;
            }

            if (minDuration !== undefined) {
                localVarQueryParameter['min_duration'] = minDuration;
            }

            if (maxDuration !== undefined) {
                localVarQueryParameter['max_duration'] = maxDuration;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - order_type: 排序方式，为空时按照默认排序，以下为可选排序方式。     - 最新: publish_time     - 最热: play_count - min_duration: 最小时长，默认空，单位秒。 - max_duration: 最大时长，默认空，单位秒。 ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Keyword - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - order_type: Order type, empty for default sorting, the following are optional sorting methods.     - Newest: publish_time     - Hottest: play_count - min_duration: Minimum duration, default empty, in seconds. - max_duration: Maximum duration, default empty, in seconds. ### Return: - Video list  # [示例/Example] > 搜索关键字为“抖音”的视频，按照播放量排序，时长1-180秒(1-3分钟) > Search for videos with the keyword \"抖音\", sorted by play count, duration 1-180 seconds (1-3 minutes) keyword: \"抖音\" order_type: \"play_count\" min_duration: 1 max_duration: 180
         * @summary 搜索视频/Search video
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {string} [orderType] 排序方式/Order type
         * @param {number} [minDuration] 最小时长/Minimum duration
         * @param {number} [maxDuration] 最大时长/Maximum duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVideoApiV1XiguaAppV2SearchVideoGet_7: async (keyword: string, offset?: number, orderType?: string, minDuration?: number, maxDuration?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling searchVideoApiV1XiguaAppV2SearchVideoGet_7.');
            }
            const localVarPath = `/api/v1/xigua/app/v2/search_video`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (orderType !== undefined) {
                localVarQueryParameter['order_type'] = orderType;
            }

            if (minDuration !== undefined) {
                localVarQueryParameter['min_duration'] = minDuration;
            }

            if (maxDuration !== undefined) {
                localVarQueryParameter['max_duration'] = maxDuration;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * XiguaAppV2APIApi - functional programming interface
 * @export
 */
export const XiguaAppV2APIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取单个作品数据（信息较少，不包含标题等信息，但是包含相关视频的信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (less information, does not include title and other information, but includes information about related videos) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1XiguaAppV2FetchOneVideoGet(itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiguaAppV2APIApiAxiosParamCreator(configuration).fetchOneVideoApiV1XiguaAppV2FetchOneVideoGet(itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据（信息较少，不包含标题等信息，但是包含相关视频的信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (less information, does not include title and other information, but includes information about related videos) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoApiV1XiguaAppV2FetchOneVideoGet_1(itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiguaAppV2APIApiAxiosParamCreator(configuration).fetchOneVideoApiV1XiguaAppV2FetchOneVideoGet_1(itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品的播放链接，此接口返回的是已经解码后的播放链接，可以直接使用。 ### 参数: - item_id: 作品id ### 返回: - 作品的播放链接的明文链接。  # [English] ### Purpose: - Get single video play URL, the interface returns the decoded play URL, which can be used directly. ### Parameters: - item_id: Video id ### Return: - Play URL of the video, plaintext link.  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 获取单个作品的播放链接/Get single video play URL
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoPlayUrlApiV1XiguaAppV2FetchOneVideoPlayUrlGet(itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiguaAppV2APIApiAxiosParamCreator(configuration).fetchOneVideoPlayUrlApiV1XiguaAppV2FetchOneVideoPlayUrlGet(itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品的播放链接，此接口返回的是已经解码后的播放链接，可以直接使用。 ### 参数: - item_id: 作品id ### 返回: - 作品的播放链接的明文链接。  # [English] ### Purpose: - Get single video play URL, the interface returns the decoded play URL, which can be used directly. ### Parameters: - item_id: Video id ### Return: - Play URL of the video, plaintext link.  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 获取单个作品的播放链接/Get single video play URL
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoPlayUrlApiV1XiguaAppV2FetchOneVideoPlayUrlGet_2(itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiguaAppV2APIApiAxiosParamCreator(configuration).fetchOneVideoPlayUrlApiV1XiguaAppV2FetchOneVideoPlayUrlGet_2(itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据（信息全面，包含标题等信息，但是不包含相关视频推荐信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (more comprehensive information, including title and other information, but not including information about related video recommendations) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 获取单个作品数据 V2/Get single video data V2
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoV2ApiV1XiguaAppV2FetchOneVideoV2Get(itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiguaAppV2APIApiAxiosParamCreator(configuration).fetchOneVideoV2ApiV1XiguaAppV2FetchOneVideoV2Get(itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据（信息全面，包含标题等信息，但是不包含相关视频推荐信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (more comprehensive information, including title and other information, but not including information about related video recommendations) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 获取单个作品数据 V2/Get single video data V2
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchOneVideoV2ApiV1XiguaAppV2FetchOneVideoV2Get_3(itemId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiguaAppV2APIApiAxiosParamCreator(configuration).fetchOneVideoV2ApiV1XiguaAppV2FetchOneVideoV2Get_3(itemId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 个人信息 ### 参数: - user_id: 用户id ### 返回: - 个人信息  # [English] ### Purpose: - Personal information ### Parameters: - user_id: User id ### Return: - Personal information  # [示例/Example] user_id: \"52712347586\"
         * @summary 个人信息/Personal information
         * @param {string} userId 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoApiV1XiguaAppV2FetchUserInfoGet(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiguaAppV2APIApiAxiosParamCreator(configuration).fetchUserInfoApiV1XiguaAppV2FetchUserInfoGet(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 个人信息 ### 参数: - user_id: 用户id ### 返回: - 个人信息  # [English] ### Purpose: - Personal information ### Parameters: - user_id: User id ### Return: - Personal information  # [示例/Example] user_id: \"52712347586\"
         * @summary 个人信息/Personal information
         * @param {string} userId 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserInfoApiV1XiguaAppV2FetchUserInfoGet_4(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiguaAppV2APIApiAxiosParamCreator(configuration).fetchUserInfoApiV1XiguaAppV2FetchUserInfoGet_4(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取个人作品列表 ### 参数: - user_id: 用户id - max_behot_time: 最大行为时间，默认空，第一次请求传空，后续请求传上一次请求返回数据中的JSON中的值。 - max_behot_time的值可以是JSON路径为：$.data.data.[-1].behot_time - 也就是data中的最后一个元素的cursor值 ### 返回: - 作品列表  # [English] ### Purpose: - Get user post list ### Parameters: - user_id: User id - max_behot_time: Maximum behavior time, default empty, pass empty for the first request, pass the max_behot_time returned by the previous request for subsequent requests - The value of max_behot_time can be the JSON path: $.data.data.[-1].behot_time - That is, the cursor value of the last element in data ### Return: - Post list  # [示例/Example] user_id = \"1922379661976311\" max_behot_time = \"\"
         * @summary 获取个人作品列表/Get user post list
         * @param {string} userId 用户id/User id
         * @param {string} [maxBehotTime] 最大行为时间/Maximum behavior time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostListApiV1XiguaAppV2FetchUserPostListGet(userId: string, maxBehotTime?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiguaAppV2APIApiAxiosParamCreator(configuration).fetchUserPostListApiV1XiguaAppV2FetchUserPostListGet(userId, maxBehotTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取个人作品列表 ### 参数: - user_id: 用户id - max_behot_time: 最大行为时间，默认空，第一次请求传空，后续请求传上一次请求返回数据中的JSON中的值。 - max_behot_time的值可以是JSON路径为：$.data.data.[-1].behot_time - 也就是data中的最后一个元素的cursor值 ### 返回: - 作品列表  # [English] ### Purpose: - Get user post list ### Parameters: - user_id: User id - max_behot_time: Maximum behavior time, default empty, pass empty for the first request, pass the max_behot_time returned by the previous request for subsequent requests - The value of max_behot_time can be the JSON path: $.data.data.[-1].behot_time - That is, the cursor value of the last element in data ### Return: - Post list  # [示例/Example] user_id = \"1922379661976311\" max_behot_time = \"\"
         * @summary 获取个人作品列表/Get user post list
         * @param {string} userId 用户id/User id
         * @param {string} [maxBehotTime] 最大行为时间/Maximum behavior time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostListApiV1XiguaAppV2FetchUserPostListGet_5(userId: string, maxBehotTime?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiguaAppV2APIApiAxiosParamCreator(configuration).fetchUserPostListApiV1XiguaAppV2FetchUserPostListGet_5(userId, maxBehotTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 视频评论列表 ### 参数: - item_id: 作品id - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - count: 数量，默认20，建议保持默认。 ### 返回: - 评论列表  # [English] ### Purpose: - Video comment list ### Parameters: - item_id: Video id - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - count: Quantity, default 20, it is recommended to keep the default. ### Return: - Comment list  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 视频评论列表/Video comment list
         * @param {string} itemId 作品id/Video id
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentListApiV1XiguaAppV2FetchVideoCommentListGet(itemId: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiguaAppV2APIApiAxiosParamCreator(configuration).fetchVideoCommentListApiV1XiguaAppV2FetchVideoCommentListGet(itemId, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 视频评论列表 ### 参数: - item_id: 作品id - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - count: 数量，默认20，建议保持默认。 ### 返回: - 评论列表  # [English] ### Purpose: - Video comment list ### Parameters: - item_id: Video id - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - count: Quantity, default 20, it is recommended to keep the default. ### Return: - Comment list  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 视频评论列表/Video comment list
         * @param {string} itemId 作品id/Video id
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchVideoCommentListApiV1XiguaAppV2FetchVideoCommentListGet_6(itemId: string, offset?: number, count?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiguaAppV2APIApiAxiosParamCreator(configuration).fetchVideoCommentListApiV1XiguaAppV2FetchVideoCommentListGet_6(itemId, offset, count, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - order_type: 排序方式，为空时按照默认排序，以下为可选排序方式。     - 最新: publish_time     - 最热: play_count - min_duration: 最小时长，默认空，单位秒。 - max_duration: 最大时长，默认空，单位秒。 ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Keyword - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - order_type: Order type, empty for default sorting, the following are optional sorting methods.     - Newest: publish_time     - Hottest: play_count - min_duration: Minimum duration, default empty, in seconds. - max_duration: Maximum duration, default empty, in seconds. ### Return: - Video list  # [示例/Example] > 搜索关键字为“抖音”的视频，按照播放量排序，时长1-180秒(1-3分钟) > Search for videos with the keyword \"抖音\", sorted by play count, duration 1-180 seconds (1-3 minutes) keyword: \"抖音\" order_type: \"play_count\" min_duration: 1 max_duration: 180
         * @summary 搜索视频/Search video
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {string} [orderType] 排序方式/Order type
         * @param {number} [minDuration] 最小时长/Minimum duration
         * @param {number} [maxDuration] 最大时长/Maximum duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchVideoApiV1XiguaAppV2SearchVideoGet(keyword: string, offset?: number, orderType?: string, minDuration?: number, maxDuration?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiguaAppV2APIApiAxiosParamCreator(configuration).searchVideoApiV1XiguaAppV2SearchVideoGet(keyword, offset, orderType, minDuration, maxDuration, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - order_type: 排序方式，为空时按照默认排序，以下为可选排序方式。     - 最新: publish_time     - 最热: play_count - min_duration: 最小时长，默认空，单位秒。 - max_duration: 最大时长，默认空，单位秒。 ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Keyword - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - order_type: Order type, empty for default sorting, the following are optional sorting methods.     - Newest: publish_time     - Hottest: play_count - min_duration: Minimum duration, default empty, in seconds. - max_duration: Maximum duration, default empty, in seconds. ### Return: - Video list  # [示例/Example] > 搜索关键字为“抖音”的视频，按照播放量排序，时长1-180秒(1-3分钟) > Search for videos with the keyword \"抖音\", sorted by play count, duration 1-180 seconds (1-3 minutes) keyword: \"抖音\" order_type: \"play_count\" min_duration: 1 max_duration: 180
         * @summary 搜索视频/Search video
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {string} [orderType] 排序方式/Order type
         * @param {number} [minDuration] 最小时长/Minimum duration
         * @param {number} [maxDuration] 最大时长/Maximum duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchVideoApiV1XiguaAppV2SearchVideoGet_7(keyword: string, offset?: number, orderType?: string, minDuration?: number, maxDuration?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiguaAppV2APIApiAxiosParamCreator(configuration).searchVideoApiV1XiguaAppV2SearchVideoGet_7(keyword, offset, orderType, minDuration, maxDuration, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * XiguaAppV2APIApi - factory interface
 * @export
 */
export const XiguaAppV2APIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 获取单个作品数据（信息较少，不包含标题等信息，但是包含相关视频的信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (less information, does not include title and other information, but includes information about related videos) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1XiguaAppV2FetchOneVideoGet(itemId: string, options?: any): AxiosPromise<ResponseModel> {
            return XiguaAppV2APIApiFp(configuration).fetchOneVideoApiV1XiguaAppV2FetchOneVideoGet(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据（信息较少，不包含标题等信息，但是包含相关视频的信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (less information, does not include title and other information, but includes information about related videos) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 获取单个作品数据/Get single video data
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoApiV1XiguaAppV2FetchOneVideoGet_1(itemId: string, options?: any): AxiosPromise<ResponseModel> {
            return XiguaAppV2APIApiFp(configuration).fetchOneVideoApiV1XiguaAppV2FetchOneVideoGet_1(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品的播放链接，此接口返回的是已经解码后的播放链接，可以直接使用。 ### 参数: - item_id: 作品id ### 返回: - 作品的播放链接的明文链接。  # [English] ### Purpose: - Get single video play URL, the interface returns the decoded play URL, which can be used directly. ### Parameters: - item_id: Video id ### Return: - Play URL of the video, plaintext link.  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 获取单个作品的播放链接/Get single video play URL
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoPlayUrlApiV1XiguaAppV2FetchOneVideoPlayUrlGet(itemId: string, options?: any): AxiosPromise<ResponseModel> {
            return XiguaAppV2APIApiFp(configuration).fetchOneVideoPlayUrlApiV1XiguaAppV2FetchOneVideoPlayUrlGet(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品的播放链接，此接口返回的是已经解码后的播放链接，可以直接使用。 ### 参数: - item_id: 作品id ### 返回: - 作品的播放链接的明文链接。  # [English] ### Purpose: - Get single video play URL, the interface returns the decoded play URL, which can be used directly. ### Parameters: - item_id: Video id ### Return: - Play URL of the video, plaintext link.  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 获取单个作品的播放链接/Get single video play URL
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoPlayUrlApiV1XiguaAppV2FetchOneVideoPlayUrlGet_2(itemId: string, options?: any): AxiosPromise<ResponseModel> {
            return XiguaAppV2APIApiFp(configuration).fetchOneVideoPlayUrlApiV1XiguaAppV2FetchOneVideoPlayUrlGet_2(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据（信息全面，包含标题等信息，但是不包含相关视频推荐信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (more comprehensive information, including title and other information, but not including information about related video recommendations) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 获取单个作品数据 V2/Get single video data V2
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV2ApiV1XiguaAppV2FetchOneVideoV2Get(itemId: string, options?: any): AxiosPromise<ResponseModel> {
            return XiguaAppV2APIApiFp(configuration).fetchOneVideoV2ApiV1XiguaAppV2FetchOneVideoV2Get(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个作品数据（信息全面，包含标题等信息，但是不包含相关视频推荐信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (more comprehensive information, including title and other information, but not including information about related video recommendations) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 获取单个作品数据 V2/Get single video data V2
         * @param {string} itemId 作品id/Video id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchOneVideoV2ApiV1XiguaAppV2FetchOneVideoV2Get_3(itemId: string, options?: any): AxiosPromise<ResponseModel> {
            return XiguaAppV2APIApiFp(configuration).fetchOneVideoV2ApiV1XiguaAppV2FetchOneVideoV2Get_3(itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 个人信息 ### 参数: - user_id: 用户id ### 返回: - 个人信息  # [English] ### Purpose: - Personal information ### Parameters: - user_id: User id ### Return: - Personal information  # [示例/Example] user_id: \"52712347586\"
         * @summary 个人信息/Personal information
         * @param {string} userId 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1XiguaAppV2FetchUserInfoGet(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return XiguaAppV2APIApiFp(configuration).fetchUserInfoApiV1XiguaAppV2FetchUserInfoGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 个人信息 ### 参数: - user_id: 用户id ### 返回: - 个人信息  # [English] ### Purpose: - Personal information ### Parameters: - user_id: User id ### Return: - Personal information  # [示例/Example] user_id: \"52712347586\"
         * @summary 个人信息/Personal information
         * @param {string} userId 用户id/User id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserInfoApiV1XiguaAppV2FetchUserInfoGet_4(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return XiguaAppV2APIApiFp(configuration).fetchUserInfoApiV1XiguaAppV2FetchUserInfoGet_4(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取个人作品列表 ### 参数: - user_id: 用户id - max_behot_time: 最大行为时间，默认空，第一次请求传空，后续请求传上一次请求返回数据中的JSON中的值。 - max_behot_time的值可以是JSON路径为：$.data.data.[-1].behot_time - 也就是data中的最后一个元素的cursor值 ### 返回: - 作品列表  # [English] ### Purpose: - Get user post list ### Parameters: - user_id: User id - max_behot_time: Maximum behavior time, default empty, pass empty for the first request, pass the max_behot_time returned by the previous request for subsequent requests - The value of max_behot_time can be the JSON path: $.data.data.[-1].behot_time - That is, the cursor value of the last element in data ### Return: - Post list  # [示例/Example] user_id = \"1922379661976311\" max_behot_time = \"\"
         * @summary 获取个人作品列表/Get user post list
         * @param {string} userId 用户id/User id
         * @param {string} [maxBehotTime] 最大行为时间/Maximum behavior time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostListApiV1XiguaAppV2FetchUserPostListGet(userId: string, maxBehotTime?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiguaAppV2APIApiFp(configuration).fetchUserPostListApiV1XiguaAppV2FetchUserPostListGet(userId, maxBehotTime, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取个人作品列表 ### 参数: - user_id: 用户id - max_behot_time: 最大行为时间，默认空，第一次请求传空，后续请求传上一次请求返回数据中的JSON中的值。 - max_behot_time的值可以是JSON路径为：$.data.data.[-1].behot_time - 也就是data中的最后一个元素的cursor值 ### 返回: - 作品列表  # [English] ### Purpose: - Get user post list ### Parameters: - user_id: User id - max_behot_time: Maximum behavior time, default empty, pass empty for the first request, pass the max_behot_time returned by the previous request for subsequent requests - The value of max_behot_time can be the JSON path: $.data.data.[-1].behot_time - That is, the cursor value of the last element in data ### Return: - Post list  # [示例/Example] user_id = \"1922379661976311\" max_behot_time = \"\"
         * @summary 获取个人作品列表/Get user post list
         * @param {string} userId 用户id/User id
         * @param {string} [maxBehotTime] 最大行为时间/Maximum behavior time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostListApiV1XiguaAppV2FetchUserPostListGet_5(userId: string, maxBehotTime?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiguaAppV2APIApiFp(configuration).fetchUserPostListApiV1XiguaAppV2FetchUserPostListGet_5(userId, maxBehotTime, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 视频评论列表 ### 参数: - item_id: 作品id - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - count: 数量，默认20，建议保持默认。 ### 返回: - 评论列表  # [English] ### Purpose: - Video comment list ### Parameters: - item_id: Video id - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - count: Quantity, default 20, it is recommended to keep the default. ### Return: - Comment list  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 视频评论列表/Video comment list
         * @param {string} itemId 作品id/Video id
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentListApiV1XiguaAppV2FetchVideoCommentListGet(itemId: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return XiguaAppV2APIApiFp(configuration).fetchVideoCommentListApiV1XiguaAppV2FetchVideoCommentListGet(itemId, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 视频评论列表 ### 参数: - item_id: 作品id - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - count: 数量，默认20，建议保持默认。 ### 返回: - 评论列表  # [English] ### Purpose: - Video comment list ### Parameters: - item_id: Video id - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - count: Quantity, default 20, it is recommended to keep the default. ### Return: - Comment list  # [示例/Example] item_id: \"7354954305222377999\"
         * @summary 视频评论列表/Video comment list
         * @param {string} itemId 作品id/Video id
         * @param {number} [offset] 偏移量/Offset
         * @param {number} [count] 数量/Count
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchVideoCommentListApiV1XiguaAppV2FetchVideoCommentListGet_6(itemId: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel> {
            return XiguaAppV2APIApiFp(configuration).fetchVideoCommentListApiV1XiguaAppV2FetchVideoCommentListGet_6(itemId, offset, count, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - order_type: 排序方式，为空时按照默认排序，以下为可选排序方式。     - 最新: publish_time     - 最热: play_count - min_duration: 最小时长，默认空，单位秒。 - max_duration: 最大时长，默认空，单位秒。 ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Keyword - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - order_type: Order type, empty for default sorting, the following are optional sorting methods.     - Newest: publish_time     - Hottest: play_count - min_duration: Minimum duration, default empty, in seconds. - max_duration: Maximum duration, default empty, in seconds. ### Return: - Video list  # [示例/Example] > 搜索关键字为“抖音”的视频，按照播放量排序，时长1-180秒(1-3分钟) > Search for videos with the keyword \"抖音\", sorted by play count, duration 1-180 seconds (1-3 minutes) keyword: \"抖音\" order_type: \"play_count\" min_duration: 1 max_duration: 180
         * @summary 搜索视频/Search video
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {string} [orderType] 排序方式/Order type
         * @param {number} [minDuration] 最小时长/Minimum duration
         * @param {number} [maxDuration] 最大时长/Maximum duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVideoApiV1XiguaAppV2SearchVideoGet(keyword: string, offset?: number, orderType?: string, minDuration?: number, maxDuration?: number, options?: any): AxiosPromise<ResponseModel> {
            return XiguaAppV2APIApiFp(configuration).searchVideoApiV1XiguaAppV2SearchVideoGet(keyword, offset, orderType, minDuration, maxDuration, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - order_type: 排序方式，为空时按照默认排序，以下为可选排序方式。     - 最新: publish_time     - 最热: play_count - min_duration: 最小时长，默认空，单位秒。 - max_duration: 最大时长，默认空，单位秒。 ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Keyword - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - order_type: Order type, empty for default sorting, the following are optional sorting methods.     - Newest: publish_time     - Hottest: play_count - min_duration: Minimum duration, default empty, in seconds. - max_duration: Maximum duration, default empty, in seconds. ### Return: - Video list  # [示例/Example] > 搜索关键字为“抖音”的视频，按照播放量排序，时长1-180秒(1-3分钟) > Search for videos with the keyword \"抖音\", sorted by play count, duration 1-180 seconds (1-3 minutes) keyword: \"抖音\" order_type: \"play_count\" min_duration: 1 max_duration: 180
         * @summary 搜索视频/Search video
         * @param {string} keyword 关键词/Keyword
         * @param {number} [offset] 偏移量/Offset
         * @param {string} [orderType] 排序方式/Order type
         * @param {number} [minDuration] 最小时长/Minimum duration
         * @param {number} [maxDuration] 最大时长/Maximum duration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchVideoApiV1XiguaAppV2SearchVideoGet_7(keyword: string, offset?: number, orderType?: string, minDuration?: number, maxDuration?: number, options?: any): AxiosPromise<ResponseModel> {
            return XiguaAppV2APIApiFp(configuration).searchVideoApiV1XiguaAppV2SearchVideoGet_7(keyword, offset, orderType, minDuration, maxDuration, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * XiguaAppV2APIApi - interface
 * @export
 * @interface XiguaAppV2APIApi
 */
export interface XiguaAppV2APIApiInterface {
    /**
     * # [中文] ### 用途: - 获取单个作品数据（信息较少，不包含标题等信息，但是包含相关视频的信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (less information, does not include title and other information, but includes information about related videos) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \"7354954305222377999\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} itemId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApiInterface
     */
    fetchOneVideoApiV1XiguaAppV2FetchOneVideoGet(itemId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据（信息较少，不包含标题等信息，但是包含相关视频的信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (less information, does not include title and other information, but includes information about related videos) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \"7354954305222377999\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} itemId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApiInterface
     */
    fetchOneVideoApiV1XiguaAppV2FetchOneVideoGet_1(itemId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品的播放链接，此接口返回的是已经解码后的播放链接，可以直接使用。 ### 参数: - item_id: 作品id ### 返回: - 作品的播放链接的明文链接。  # [English] ### Purpose: - Get single video play URL, the interface returns the decoded play URL, which can be used directly. ### Parameters: - item_id: Video id ### Return: - Play URL of the video, plaintext link.  # [示例/Example] item_id: \"7354954305222377999\"
     * @summary 获取单个作品的播放链接/Get single video play URL
     * @param {string} itemId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApiInterface
     */
    fetchOneVideoPlayUrlApiV1XiguaAppV2FetchOneVideoPlayUrlGet(itemId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品的播放链接，此接口返回的是已经解码后的播放链接，可以直接使用。 ### 参数: - item_id: 作品id ### 返回: - 作品的播放链接的明文链接。  # [English] ### Purpose: - Get single video play URL, the interface returns the decoded play URL, which can be used directly. ### Parameters: - item_id: Video id ### Return: - Play URL of the video, plaintext link.  # [示例/Example] item_id: \"7354954305222377999\"
     * @summary 获取单个作品的播放链接/Get single video play URL
     * @param {string} itemId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApiInterface
     */
    fetchOneVideoPlayUrlApiV1XiguaAppV2FetchOneVideoPlayUrlGet_2(itemId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据（信息全面，包含标题等信息，但是不包含相关视频推荐信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (more comprehensive information, including title and other information, but not including information about related video recommendations) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \"7354954305222377999\"
     * @summary 获取单个作品数据 V2/Get single video data V2
     * @param {string} itemId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApiInterface
     */
    fetchOneVideoV2ApiV1XiguaAppV2FetchOneVideoV2Get(itemId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个作品数据（信息全面，包含标题等信息，但是不包含相关视频推荐信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (more comprehensive information, including title and other information, but not including information about related video recommendations) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \"7354954305222377999\"
     * @summary 获取单个作品数据 V2/Get single video data V2
     * @param {string} itemId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApiInterface
     */
    fetchOneVideoV2ApiV1XiguaAppV2FetchOneVideoV2Get_3(itemId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 个人信息 ### 参数: - user_id: 用户id ### 返回: - 个人信息  # [English] ### Purpose: - Personal information ### Parameters: - user_id: User id ### Return: - Personal information  # [示例/Example] user_id: \"52712347586\"
     * @summary 个人信息/Personal information
     * @param {string} userId 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApiInterface
     */
    fetchUserInfoApiV1XiguaAppV2FetchUserInfoGet(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 个人信息 ### 参数: - user_id: 用户id ### 返回: - 个人信息  # [English] ### Purpose: - Personal information ### Parameters: - user_id: User id ### Return: - Personal information  # [示例/Example] user_id: \"52712347586\"
     * @summary 个人信息/Personal information
     * @param {string} userId 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApiInterface
     */
    fetchUserInfoApiV1XiguaAppV2FetchUserInfoGet_4(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取个人作品列表 ### 参数: - user_id: 用户id - max_behot_time: 最大行为时间，默认空，第一次请求传空，后续请求传上一次请求返回数据中的JSON中的值。 - max_behot_time的值可以是JSON路径为：$.data.data.[-1].behot_time - 也就是data中的最后一个元素的cursor值 ### 返回: - 作品列表  # [English] ### Purpose: - Get user post list ### Parameters: - user_id: User id - max_behot_time: Maximum behavior time, default empty, pass empty for the first request, pass the max_behot_time returned by the previous request for subsequent requests - The value of max_behot_time can be the JSON path: $.data.data.[-1].behot_time - That is, the cursor value of the last element in data ### Return: - Post list  # [示例/Example] user_id = \"1922379661976311\" max_behot_time = \"\"
     * @summary 获取个人作品列表/Get user post list
     * @param {string} userId 用户id/User id
     * @param {string} [maxBehotTime] 最大行为时间/Maximum behavior time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApiInterface
     */
    fetchUserPostListApiV1XiguaAppV2FetchUserPostListGet(userId: string, maxBehotTime?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取个人作品列表 ### 参数: - user_id: 用户id - max_behot_time: 最大行为时间，默认空，第一次请求传空，后续请求传上一次请求返回数据中的JSON中的值。 - max_behot_time的值可以是JSON路径为：$.data.data.[-1].behot_time - 也就是data中的最后一个元素的cursor值 ### 返回: - 作品列表  # [English] ### Purpose: - Get user post list ### Parameters: - user_id: User id - max_behot_time: Maximum behavior time, default empty, pass empty for the first request, pass the max_behot_time returned by the previous request for subsequent requests - The value of max_behot_time can be the JSON path: $.data.data.[-1].behot_time - That is, the cursor value of the last element in data ### Return: - Post list  # [示例/Example] user_id = \"1922379661976311\" max_behot_time = \"\"
     * @summary 获取个人作品列表/Get user post list
     * @param {string} userId 用户id/User id
     * @param {string} [maxBehotTime] 最大行为时间/Maximum behavior time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApiInterface
     */
    fetchUserPostListApiV1XiguaAppV2FetchUserPostListGet_5(userId: string, maxBehotTime?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 视频评论列表 ### 参数: - item_id: 作品id - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - count: 数量，默认20，建议保持默认。 ### 返回: - 评论列表  # [English] ### Purpose: - Video comment list ### Parameters: - item_id: Video id - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - count: Quantity, default 20, it is recommended to keep the default. ### Return: - Comment list  # [示例/Example] item_id: \"7354954305222377999\"
     * @summary 视频评论列表/Video comment list
     * @param {string} itemId 作品id/Video id
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApiInterface
     */
    fetchVideoCommentListApiV1XiguaAppV2FetchVideoCommentListGet(itemId: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 视频评论列表 ### 参数: - item_id: 作品id - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - count: 数量，默认20，建议保持默认。 ### 返回: - 评论列表  # [English] ### Purpose: - Video comment list ### Parameters: - item_id: Video id - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - count: Quantity, default 20, it is recommended to keep the default. ### Return: - Comment list  # [示例/Example] item_id: \"7354954305222377999\"
     * @summary 视频评论列表/Video comment list
     * @param {string} itemId 作品id/Video id
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApiInterface
     */
    fetchVideoCommentListApiV1XiguaAppV2FetchVideoCommentListGet_6(itemId: string, offset?: number, count?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - order_type: 排序方式，为空时按照默认排序，以下为可选排序方式。     - 最新: publish_time     - 最热: play_count - min_duration: 最小时长，默认空，单位秒。 - max_duration: 最大时长，默认空，单位秒。 ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Keyword - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - order_type: Order type, empty for default sorting, the following are optional sorting methods.     - Newest: publish_time     - Hottest: play_count - min_duration: Minimum duration, default empty, in seconds. - max_duration: Maximum duration, default empty, in seconds. ### Return: - Video list  # [示例/Example] > 搜索关键字为“抖音”的视频，按照播放量排序，时长1-180秒(1-3分钟) > Search for videos with the keyword \"抖音\", sorted by play count, duration 1-180 seconds (1-3 minutes) keyword: \"抖音\" order_type: \"play_count\" min_duration: 1 max_duration: 180
     * @summary 搜索视频/Search video
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {string} [orderType] 排序方式/Order type
     * @param {number} [minDuration] 最小时长/Minimum duration
     * @param {number} [maxDuration] 最大时长/Maximum duration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApiInterface
     */
    searchVideoApiV1XiguaAppV2SearchVideoGet(keyword: string, offset?: number, orderType?: string, minDuration?: number, maxDuration?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - order_type: 排序方式，为空时按照默认排序，以下为可选排序方式。     - 最新: publish_time     - 最热: play_count - min_duration: 最小时长，默认空，单位秒。 - max_duration: 最大时长，默认空，单位秒。 ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Keyword - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - order_type: Order type, empty for default sorting, the following are optional sorting methods.     - Newest: publish_time     - Hottest: play_count - min_duration: Minimum duration, default empty, in seconds. - max_duration: Maximum duration, default empty, in seconds. ### Return: - Video list  # [示例/Example] > 搜索关键字为“抖音”的视频，按照播放量排序，时长1-180秒(1-3分钟) > Search for videos with the keyword \"抖音\", sorted by play count, duration 1-180 seconds (1-3 minutes) keyword: \"抖音\" order_type: \"play_count\" min_duration: 1 max_duration: 180
     * @summary 搜索视频/Search video
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {string} [orderType] 排序方式/Order type
     * @param {number} [minDuration] 最小时长/Minimum duration
     * @param {number} [maxDuration] 最大时长/Maximum duration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApiInterface
     */
    searchVideoApiV1XiguaAppV2SearchVideoGet_7(keyword: string, offset?: number, orderType?: string, minDuration?: number, maxDuration?: number, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * XiguaAppV2APIApi - object-oriented interface
 * @export
 * @class XiguaAppV2APIApi
 * @extends {BaseAPI}
 */
export class XiguaAppV2APIApi extends BaseAPI implements XiguaAppV2APIApiInterface {
    /**
     * # [中文] ### 用途: - 获取单个作品数据（信息较少，不包含标题等信息，但是包含相关视频的信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (less information, does not include title and other information, but includes information about related videos) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \"7354954305222377999\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} itemId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApi
     */
    public fetchOneVideoApiV1XiguaAppV2FetchOneVideoGet(itemId: string, options?: any) {
        return XiguaAppV2APIApiFp(this.configuration).fetchOneVideoApiV1XiguaAppV2FetchOneVideoGet(itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据（信息较少，不包含标题等信息，但是包含相关视频的信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (less information, does not include title and other information, but includes information about related videos) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \"7354954305222377999\"
     * @summary 获取单个作品数据/Get single video data
     * @param {string} itemId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApi
     */
    public fetchOneVideoApiV1XiguaAppV2FetchOneVideoGet_1(itemId: string, options?: any) {
        return XiguaAppV2APIApiFp(this.configuration).fetchOneVideoApiV1XiguaAppV2FetchOneVideoGet_1(itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品的播放链接，此接口返回的是已经解码后的播放链接，可以直接使用。 ### 参数: - item_id: 作品id ### 返回: - 作品的播放链接的明文链接。  # [English] ### Purpose: - Get single video play URL, the interface returns the decoded play URL, which can be used directly. ### Parameters: - item_id: Video id ### Return: - Play URL of the video, plaintext link.  # [示例/Example] item_id: \"7354954305222377999\"
     * @summary 获取单个作品的播放链接/Get single video play URL
     * @param {string} itemId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApi
     */
    public fetchOneVideoPlayUrlApiV1XiguaAppV2FetchOneVideoPlayUrlGet(itemId: string, options?: any) {
        return XiguaAppV2APIApiFp(this.configuration).fetchOneVideoPlayUrlApiV1XiguaAppV2FetchOneVideoPlayUrlGet(itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品的播放链接，此接口返回的是已经解码后的播放链接，可以直接使用。 ### 参数: - item_id: 作品id ### 返回: - 作品的播放链接的明文链接。  # [English] ### Purpose: - Get single video play URL, the interface returns the decoded play URL, which can be used directly. ### Parameters: - item_id: Video id ### Return: - Play URL of the video, plaintext link.  # [示例/Example] item_id: \"7354954305222377999\"
     * @summary 获取单个作品的播放链接/Get single video play URL
     * @param {string} itemId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApi
     */
    public fetchOneVideoPlayUrlApiV1XiguaAppV2FetchOneVideoPlayUrlGet_2(itemId: string, options?: any) {
        return XiguaAppV2APIApiFp(this.configuration).fetchOneVideoPlayUrlApiV1XiguaAppV2FetchOneVideoPlayUrlGet_2(itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据（信息全面，包含标题等信息，但是不包含相关视频推荐信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (more comprehensive information, including title and other information, but not including information about related video recommendations) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \"7354954305222377999\"
     * @summary 获取单个作品数据 V2/Get single video data V2
     * @param {string} itemId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApi
     */
    public fetchOneVideoV2ApiV1XiguaAppV2FetchOneVideoV2Get(itemId: string, options?: any) {
        return XiguaAppV2APIApiFp(this.configuration).fetchOneVideoV2ApiV1XiguaAppV2FetchOneVideoV2Get(itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个作品数据（信息全面，包含标题等信息，但是不包含相关视频推荐信息） ### 参数: - item_id: 作品id ### 返回: - 作品数据，其中包含视频链接的Base64编码播放地址，需要前端解码后使用，或者使用 /fetch_one_video_play_url 获取播放链接。  # [English] ### Purpose: - Get single video data (more comprehensive information, including title and other information, but not including information about related video recommendations) ### Parameters: - item_id: Video id ### Return: - Video data, which contains the Base64 encoded playback address of the video link, which needs to be decoded and used by the front end, or use /fetch_one_video_play_url to get the playback link.  # [示例/Example] item_id: \"7354954305222377999\"
     * @summary 获取单个作品数据 V2/Get single video data V2
     * @param {string} itemId 作品id/Video id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApi
     */
    public fetchOneVideoV2ApiV1XiguaAppV2FetchOneVideoV2Get_3(itemId: string, options?: any) {
        return XiguaAppV2APIApiFp(this.configuration).fetchOneVideoV2ApiV1XiguaAppV2FetchOneVideoV2Get_3(itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 个人信息 ### 参数: - user_id: 用户id ### 返回: - 个人信息  # [English] ### Purpose: - Personal information ### Parameters: - user_id: User id ### Return: - Personal information  # [示例/Example] user_id: \"52712347586\"
     * @summary 个人信息/Personal information
     * @param {string} userId 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApi
     */
    public fetchUserInfoApiV1XiguaAppV2FetchUserInfoGet(userId: string, options?: any) {
        return XiguaAppV2APIApiFp(this.configuration).fetchUserInfoApiV1XiguaAppV2FetchUserInfoGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 个人信息 ### 参数: - user_id: 用户id ### 返回: - 个人信息  # [English] ### Purpose: - Personal information ### Parameters: - user_id: User id ### Return: - Personal information  # [示例/Example] user_id: \"52712347586\"
     * @summary 个人信息/Personal information
     * @param {string} userId 用户id/User id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApi
     */
    public fetchUserInfoApiV1XiguaAppV2FetchUserInfoGet_4(userId: string, options?: any) {
        return XiguaAppV2APIApiFp(this.configuration).fetchUserInfoApiV1XiguaAppV2FetchUserInfoGet_4(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取个人作品列表 ### 参数: - user_id: 用户id - max_behot_time: 最大行为时间，默认空，第一次请求传空，后续请求传上一次请求返回数据中的JSON中的值。 - max_behot_time的值可以是JSON路径为：$.data.data.[-1].behot_time - 也就是data中的最后一个元素的cursor值 ### 返回: - 作品列表  # [English] ### Purpose: - Get user post list ### Parameters: - user_id: User id - max_behot_time: Maximum behavior time, default empty, pass empty for the first request, pass the max_behot_time returned by the previous request for subsequent requests - The value of max_behot_time can be the JSON path: $.data.data.[-1].behot_time - That is, the cursor value of the last element in data ### Return: - Post list  # [示例/Example] user_id = \"1922379661976311\" max_behot_time = \"\"
     * @summary 获取个人作品列表/Get user post list
     * @param {string} userId 用户id/User id
     * @param {string} [maxBehotTime] 最大行为时间/Maximum behavior time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApi
     */
    public fetchUserPostListApiV1XiguaAppV2FetchUserPostListGet(userId: string, maxBehotTime?: string, options?: any) {
        return XiguaAppV2APIApiFp(this.configuration).fetchUserPostListApiV1XiguaAppV2FetchUserPostListGet(userId, maxBehotTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取个人作品列表 ### 参数: - user_id: 用户id - max_behot_time: 最大行为时间，默认空，第一次请求传空，后续请求传上一次请求返回数据中的JSON中的值。 - max_behot_time的值可以是JSON路径为：$.data.data.[-1].behot_time - 也就是data中的最后一个元素的cursor值 ### 返回: - 作品列表  # [English] ### Purpose: - Get user post list ### Parameters: - user_id: User id - max_behot_time: Maximum behavior time, default empty, pass empty for the first request, pass the max_behot_time returned by the previous request for subsequent requests - The value of max_behot_time can be the JSON path: $.data.data.[-1].behot_time - That is, the cursor value of the last element in data ### Return: - Post list  # [示例/Example] user_id = \"1922379661976311\" max_behot_time = \"\"
     * @summary 获取个人作品列表/Get user post list
     * @param {string} userId 用户id/User id
     * @param {string} [maxBehotTime] 最大行为时间/Maximum behavior time
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApi
     */
    public fetchUserPostListApiV1XiguaAppV2FetchUserPostListGet_5(userId: string, maxBehotTime?: string, options?: any) {
        return XiguaAppV2APIApiFp(this.configuration).fetchUserPostListApiV1XiguaAppV2FetchUserPostListGet_5(userId, maxBehotTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 视频评论列表 ### 参数: - item_id: 作品id - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - count: 数量，默认20，建议保持默认。 ### 返回: - 评论列表  # [English] ### Purpose: - Video comment list ### Parameters: - item_id: Video id - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - count: Quantity, default 20, it is recommended to keep the default. ### Return: - Comment list  # [示例/Example] item_id: \"7354954305222377999\"
     * @summary 视频评论列表/Video comment list
     * @param {string} itemId 作品id/Video id
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApi
     */
    public fetchVideoCommentListApiV1XiguaAppV2FetchVideoCommentListGet(itemId: string, offset?: number, count?: number, options?: any) {
        return XiguaAppV2APIApiFp(this.configuration).fetchVideoCommentListApiV1XiguaAppV2FetchVideoCommentListGet(itemId, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 视频评论列表 ### 参数: - item_id: 作品id - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - count: 数量，默认20，建议保持默认。 ### 返回: - 评论列表  # [English] ### Purpose: - Video comment list ### Parameters: - item_id: Video id - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - count: Quantity, default 20, it is recommended to keep the default. ### Return: - Comment list  # [示例/Example] item_id: \"7354954305222377999\"
     * @summary 视频评论列表/Video comment list
     * @param {string} itemId 作品id/Video id
     * @param {number} [offset] 偏移量/Offset
     * @param {number} [count] 数量/Count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApi
     */
    public fetchVideoCommentListApiV1XiguaAppV2FetchVideoCommentListGet_6(itemId: string, offset?: number, count?: number, options?: any) {
        return XiguaAppV2APIApiFp(this.configuration).fetchVideoCommentListApiV1XiguaAppV2FetchVideoCommentListGet_6(itemId, offset, count, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - order_type: 排序方式，为空时按照默认排序，以下为可选排序方式。     - 最新: publish_time     - 最热: play_count - min_duration: 最小时长，默认空，单位秒。 - max_duration: 最大时长，默认空，单位秒。 ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Keyword - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - order_type: Order type, empty for default sorting, the following are optional sorting methods.     - Newest: publish_time     - Hottest: play_count - min_duration: Minimum duration, default empty, in seconds. - max_duration: Maximum duration, default empty, in seconds. ### Return: - Video list  # [示例/Example] > 搜索关键字为“抖音”的视频，按照播放量排序，时长1-180秒(1-3分钟) > Search for videos with the keyword \"抖音\", sorted by play count, duration 1-180 seconds (1-3 minutes) keyword: \"抖音\" order_type: \"play_count\" min_duration: 1 max_duration: 180
     * @summary 搜索视频/Search video
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {string} [orderType] 排序方式/Order type
     * @param {number} [minDuration] 最小时长/Minimum duration
     * @param {number} [maxDuration] 最大时长/Maximum duration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApi
     */
    public searchVideoApiV1XiguaAppV2SearchVideoGet(keyword: string, offset?: number, orderType?: string, minDuration?: number, maxDuration?: number, options?: any) {
        return XiguaAppV2APIApiFp(this.configuration).searchVideoApiV1XiguaAppV2SearchVideoGet(keyword, offset, orderType, minDuration, maxDuration, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索视频 ### 参数: - keyword: 关键词 - offset: 偏移量，第一次请求传0，后续请求传上一次请求返回的offset - order_type: 排序方式，为空时按照默认排序，以下为可选排序方式。     - 最新: publish_time     - 最热: play_count - min_duration: 最小时长，默认空，单位秒。 - max_duration: 最大时长，默认空，单位秒。 ### 返回: - 视频列表  # [English] ### Purpose: - Search video ### Parameters: - keyword: Keyword - offset: Offset, pass 0 for the first request, pass the offset returned by the previous request for subsequent requests - order_type: Order type, empty for default sorting, the following are optional sorting methods.     - Newest: publish_time     - Hottest: play_count - min_duration: Minimum duration, default empty, in seconds. - max_duration: Maximum duration, default empty, in seconds. ### Return: - Video list  # [示例/Example] > 搜索关键字为“抖音”的视频，按照播放量排序，时长1-180秒(1-3分钟) > Search for videos with the keyword \"抖音\", sorted by play count, duration 1-180 seconds (1-3 minutes) keyword: \"抖音\" order_type: \"play_count\" min_duration: 1 max_duration: 180
     * @summary 搜索视频/Search video
     * @param {string} keyword 关键词/Keyword
     * @param {number} [offset] 偏移量/Offset
     * @param {string} [orderType] 排序方式/Order type
     * @param {number} [minDuration] 最小时长/Minimum duration
     * @param {number} [maxDuration] 最大时长/Maximum duration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiguaAppV2APIApi
     */
    public searchVideoApiV1XiguaAppV2SearchVideoGet_7(keyword: string, offset?: number, orderType?: string, minDuration?: number, maxDuration?: number, options?: any) {
        return XiguaAppV2APIApiFp(this.configuration).searchVideoApiV1XiguaAppV2SearchVideoGet_7(keyword, offset, orderType, minDuration, maxDuration, options).then((request) => request(this.axios, this.basePath));
    }

}
