// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
/**
 * TwitterWebAPIApi - axios parameter creator
 * @export
 */
export const TwitterWebAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取最新的推文评论 ### 参数: - tweet_id: 推文ID - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 推文评论  # [English] ### Purpose: - Get the latest tweet comments ### Parameters: - tweet_id: Tweet ID - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Tweet comments  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
         * @summary 获取最新的推文评论/Get the latest tweet comments
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLatestPostCommentsApiV1TwitterWebFetchLatestPostCommentsGet: async (tweetId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tweetId' is not null or undefined
            if (tweetId === null || tweetId === undefined) {
                throw new RequiredError('tweetId','Required parameter tweetId was null or undefined when calling fetchLatestPostCommentsApiV1TwitterWebFetchLatestPostCommentsGet.');
            }
            const localVarPath = `/api/v1/twitter/web/fetch_latest_post_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (tweetId !== undefined) {
                localVarQueryParameter['tweet_id'] = tweetId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取最新的推文评论 ### 参数: - tweet_id: 推文ID - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 推文评论  # [English] ### Purpose: - Get the latest tweet comments ### Parameters: - tweet_id: Tweet ID - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Tweet comments  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
         * @summary 获取最新的推文评论/Get the latest tweet comments
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLatestPostCommentsApiV1TwitterWebFetchLatestPostCommentsGet_1: async (tweetId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tweetId' is not null or undefined
            if (tweetId === null || tweetId === undefined) {
                throw new RequiredError('tweetId','Required parameter tweetId was null or undefined when calling fetchLatestPostCommentsApiV1TwitterWebFetchLatestPostCommentsGet_1.');
            }
            const localVarPath = `/api/v1/twitter/web/fetch_latest_post_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (tweetId !== undefined) {
                localVarQueryParameter['tweet_id'] = tweetId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取推文下的评论 ### 参数: - tweet_id: 推文ID - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 评论  # [English] ### Purpose: - Get comments under the tweet ### Parameters: - tweet_id: Tweet ID - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Comments  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
         * @summary 获取评论/Get comments
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet: async (tweetId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tweetId' is not null or undefined
            if (tweetId === null || tweetId === undefined) {
                throw new RequiredError('tweetId','Required parameter tweetId was null or undefined when calling fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet.');
            }
            const localVarPath = `/api/v1/twitter/web/fetch_post_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (tweetId !== undefined) {
                localVarQueryParameter['tweet_id'] = tweetId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取推文下的评论 ### 参数: - tweet_id: 推文ID - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 评论  # [English] ### Purpose: - Get comments under the tweet ### Parameters: - tweet_id: Tweet ID - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Comments  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
         * @summary 获取评论/Get comments
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet_2: async (tweetId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tweetId' is not null or undefined
            if (tweetId === null || tweetId === undefined) {
                throw new RequiredError('tweetId','Required parameter tweetId was null or undefined when calling fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet_2.');
            }
            const localVarPath = `/api/v1/twitter/web/fetch_post_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (tweetId !== undefined) {
                localVarQueryParameter['tweet_id'] = tweetId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取转推用户列表 ### 参数: - tweet_id: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 转推用户列表  # [English] ### Purpose: - Get ReTweet User list ### Parameters: - tweet_id: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - ReTweet User list  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
         * @summary 转推用户列表/ReTweet User list
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRetweetUserListApiV1TwitterWebFetchRetweetUserListGet: async (tweetId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tweetId' is not null or undefined
            if (tweetId === null || tweetId === undefined) {
                throw new RequiredError('tweetId','Required parameter tweetId was null or undefined when calling fetchRetweetUserListApiV1TwitterWebFetchRetweetUserListGet.');
            }
            const localVarPath = `/api/v1/twitter/web/fetch_retweet_user_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (tweetId !== undefined) {
                localVarQueryParameter['tweet_id'] = tweetId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取转推用户列表 ### 参数: - tweet_id: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 转推用户列表  # [English] ### Purpose: - Get ReTweet User list ### Parameters: - tweet_id: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - ReTweet User list  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
         * @summary 转推用户列表/ReTweet User list
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRetweetUserListApiV1TwitterWebFetchRetweetUserListGet_3: async (tweetId: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tweetId' is not null or undefined
            if (tweetId === null || tweetId === undefined) {
                throw new RequiredError('tweetId','Required parameter tweetId was null or undefined when calling fetchRetweetUserListApiV1TwitterWebFetchRetweetUserListGet_3.');
            }
            const localVarPath = `/api/v1/twitter/web/fetch_retweet_user_list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (tweetId !== undefined) {
                localVarQueryParameter['tweet_id'] = tweetId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索 ### 参数: - keyword: 搜索关键字 - search_type: 搜索类型，默认为Top，其他可选值为Latest，Media，People, Lists - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 搜索结果  # [English] ### Purpose: - Search ### Parameters: - keyword: Search keyword - search_type: Search type, default is Top, other optional values are Latest, Media, People, Lists - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Search results  # [示例/Example] keyword = \"Elon Musk\" search_type = \"Top\" cursor = None
         * @summary 搜索/Search
         * @param {string} keyword 搜索关键字/Search Keyword
         * @param {string} [searchType] 搜索类型/Search Type
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet: async (keyword: string, searchType?: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet.');
            }
            const localVarPath = `/api/v1/twitter/web/fetch_search_timeline`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (searchType !== undefined) {
                localVarQueryParameter['search_type'] = searchType;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索 ### 参数: - keyword: 搜索关键字 - search_type: 搜索类型，默认为Top，其他可选值为Latest，Media，People, Lists - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 搜索结果  # [English] ### Purpose: - Search ### Parameters: - keyword: Search keyword - search_type: Search type, default is Top, other optional values are Latest, Media, People, Lists - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Search results  # [示例/Example] keyword = \"Elon Musk\" search_type = \"Top\" cursor = None
         * @summary 搜索/Search
         * @param {string} keyword 搜索关键字/Search Keyword
         * @param {string} [searchType] 搜索类型/Search Type
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet_4: async (keyword: string, searchType?: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet_4.');
            }
            const localVarPath = `/api/v1/twitter/web/fetch_search_timeline`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (searchType !== undefined) {
                localVarQueryParameter['search_type'] = searchType;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取趋势 ### 参数: - country: 国家，默认为UnitedStates，其他可选值见下方     - China     - India     - Japan     - Russia     - Germany     - Indonesia     - Brazil     - France     - UnitedKingdom     - Turkey     - Italy     - Mexico     - SouthKorea     - Canada     - Spain     - SaudiArabia     - Egypt     - Australia     - Poland     - Iran     - Pakistan     - Vietnam     - Nigeria     - Bangladesh     - Netherlands     - Argentina     - Philippines     - Malaysia     - Colombia     - UniteArabEmirates     - Romania     - Belgium     - Switzerland     - Singapore     - Sweden     - Norway     - Austria     - Kazakhstan     - Algeria     - Chile     - Czechia     - Peru     - Iraq     - Israel     - Ukraine     - Denmark     - Portugal     - Hungary     - Greece     - Finland     - NewZealand     - Belarus     - Slovakia     - Serbia     - Lithuania     - Luxembourg     - Estonia  ### 返回: - 趋势  # [English] ### Purpose: - Get Trending ### Parameters: - country: Country, default is UnitedStates, other optional values are as follows     - China     - India     - Japan     - Russia     - Germany     - Indonesia     - Brazil     - France     - UnitedKingdom     - Turkey     - Italy     - Mexico     - SouthKorea     - Canada     - Spain     - SaudiArabia     - Egypt     - Australia     - Poland     - Iran     - Pakistan     - Vietnam     - Nigeria     - Bangladesh     - Netherlands     - Argentina     - Philippines     - Malaysia     - Colombia     - UniteArabEmirates     - Romania     - Belgium     - Switzerland     - Singapore     - Sweden     - Norway     - Austria     - Kazakhstan     - Algeria     - Chile     - Czechia     - Peru  ### Return: - Trending  # [示例/Example] country = \"UnitedStates\"
         * @summary 趋势/Trending
         * @param {string} [country] 国家/Country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTrendingApiV1TwitterWebFetchTrendingGet: async (country?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/twitter/web/fetch_trending`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取趋势 ### 参数: - country: 国家，默认为UnitedStates，其他可选值见下方     - China     - India     - Japan     - Russia     - Germany     - Indonesia     - Brazil     - France     - UnitedKingdom     - Turkey     - Italy     - Mexico     - SouthKorea     - Canada     - Spain     - SaudiArabia     - Egypt     - Australia     - Poland     - Iran     - Pakistan     - Vietnam     - Nigeria     - Bangladesh     - Netherlands     - Argentina     - Philippines     - Malaysia     - Colombia     - UniteArabEmirates     - Romania     - Belgium     - Switzerland     - Singapore     - Sweden     - Norway     - Austria     - Kazakhstan     - Algeria     - Chile     - Czechia     - Peru     - Iraq     - Israel     - Ukraine     - Denmark     - Portugal     - Hungary     - Greece     - Finland     - NewZealand     - Belarus     - Slovakia     - Serbia     - Lithuania     - Luxembourg     - Estonia  ### 返回: - 趋势  # [English] ### Purpose: - Get Trending ### Parameters: - country: Country, default is UnitedStates, other optional values are as follows     - China     - India     - Japan     - Russia     - Germany     - Indonesia     - Brazil     - France     - UnitedKingdom     - Turkey     - Italy     - Mexico     - SouthKorea     - Canada     - Spain     - SaudiArabia     - Egypt     - Australia     - Poland     - Iran     - Pakistan     - Vietnam     - Nigeria     - Bangladesh     - Netherlands     - Argentina     - Philippines     - Malaysia     - Colombia     - UniteArabEmirates     - Romania     - Belgium     - Switzerland     - Singapore     - Sweden     - Norway     - Austria     - Kazakhstan     - Algeria     - Chile     - Czechia     - Peru  ### Return: - Trending  # [示例/Example] country = \"UnitedStates\"
         * @summary 趋势/Trending
         * @param {string} [country] 国家/Country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTrendingApiV1TwitterWebFetchTrendingGet_5: async (country?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/twitter/web/fetch_trending`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个推文数据 ### 参数: - tweet_id: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 ### 返回: - 推文数据  # [English] ### Purpose: - Get single tweet data ### Parameters: - tweet_id: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 ### Return: - Tweet data  # [示例/Example] tweet_id = \"1808168603721650364\"
         * @summary 获取单个推文数据/Get single tweet data
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet: async (tweetId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tweetId' is not null or undefined
            if (tweetId === null || tweetId === undefined) {
                throw new RequiredError('tweetId','Required parameter tweetId was null or undefined when calling fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet.');
            }
            const localVarPath = `/api/v1/twitter/web/fetch_tweet_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (tweetId !== undefined) {
                localVarQueryParameter['tweet_id'] = tweetId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个推文数据 ### 参数: - tweet_id: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 ### 返回: - 推文数据  # [English] ### Purpose: - Get single tweet data ### Parameters: - tweet_id: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 ### Return: - Tweet data  # [示例/Example] tweet_id = \"1808168603721650364\"
         * @summary 获取单个推文数据/Get single tweet data
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet_6: async (tweetId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tweetId' is not null or undefined
            if (tweetId === null || tweetId === undefined) {
                throw new RequiredError('tweetId','Required parameter tweetId was null or undefined when calling fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet_6.');
            }
            const localVarPath = `/api/v1/twitter/web/fetch_tweet_detail`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (tweetId !== undefined) {
                localVarQueryParameter['tweet_id'] = tweetId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户粉丝  # [English] ### Purpose: - Get User Followers ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User Followers  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 用户粉丝/User Followers
         * @param {string} screenName 用户名/Screen Name
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowersApiV1TwitterWebFetchUserFollowersGet: async (screenName: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'screenName' is not null or undefined
            if (screenName === null || screenName === undefined) {
                throw new RequiredError('screenName','Required parameter screenName was null or undefined when calling fetchUserFollowersApiV1TwitterWebFetchUserFollowersGet.');
            }
            const localVarPath = `/api/v1/twitter/web/fetch_user_followers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (screenName !== undefined) {
                localVarQueryParameter['screen_name'] = screenName;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户粉丝  # [English] ### Purpose: - Get User Followers ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User Followers  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 用户粉丝/User Followers
         * @param {string} screenName 用户名/Screen Name
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowersApiV1TwitterWebFetchUserFollowersGet_7: async (screenName: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'screenName' is not null or undefined
            if (screenName === null || screenName === undefined) {
                throw new RequiredError('screenName','Required parameter screenName was null or undefined when calling fetchUserFollowersApiV1TwitterWebFetchUserFollowersGet_7.');
            }
            const localVarPath = `/api/v1/twitter/web/fetch_user_followers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (screenName !== undefined) {
                localVarQueryParameter['screen_name'] = screenName;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户关注 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户关注  # [English] ### Purpose: - Get User Followings ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User Followings  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 用户关注/User Followings
         * @param {string} screenName 用户名/Screen Name
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingsApiV1TwitterWebFetchUserFollowingsGet: async (screenName: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'screenName' is not null or undefined
            if (screenName === null || screenName === undefined) {
                throw new RequiredError('screenName','Required parameter screenName was null or undefined when calling fetchUserFollowingsApiV1TwitterWebFetchUserFollowingsGet.');
            }
            const localVarPath = `/api/v1/twitter/web/fetch_user_followings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (screenName !== undefined) {
                localVarQueryParameter['screen_name'] = screenName;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户关注 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户关注  # [English] ### Purpose: - Get User Followings ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User Followings  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 用户关注/User Followings
         * @param {string} screenName 用户名/Screen Name
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingsApiV1TwitterWebFetchUserFollowingsGet_8: async (screenName: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'screenName' is not null or undefined
            if (screenName === null || screenName === undefined) {
                throw new RequiredError('screenName','Required parameter screenName was null or undefined when calling fetchUserFollowingsApiV1TwitterWebFetchUserFollowingsGet_8.');
            }
            const localVarPath = `/api/v1/twitter/web/fetch_user_followings`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (screenName !== undefined) {
                localVarQueryParameter['screen_name'] = screenName;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户高光推文 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户高光推文  # [English] ### Purpose: - Get user highlights tweets ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User highlights tweets  # [示例/Example] userId = \"44196397\" count = 20 cursor = None
         * @summary 获取用户高光推文/Get user highlights tweets
         * @param {string} userId 用户ID/User ID
         * @param {number} [count] 数量/Count
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet: async (userId: string, count?: number, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet.');
            }
            const localVarPath = `/api/v1/twitter/web/fetch_user_highlights_tweets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户高光推文 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户高光推文  # [English] ### Purpose: - Get user highlights tweets ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User highlights tweets  # [示例/Example] userId = \"44196397\" count = 20 cursor = None
         * @summary 获取用户高光推文/Get user highlights tweets
         * @param {string} userId 用户ID/User ID
         * @param {number} [count] 数量/Count
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet_9: async (userId: string, count?: number, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet_9.');
            }
            const localVarPath = `/api/v1/twitter/web/fetch_user_highlights_tweets`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户媒体 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 ### 返回: - 用户媒体  # [English] ### Purpose: - Get user media ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. ### Return: - User media  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 获取用户媒体/Get user media
         * @param {string} screenName 用户名/Screen Name
         * @param {number} [restId] 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserMediaApiV1TwitterWebFetchUserMediaGet: async (screenName: string, restId?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'screenName' is not null or undefined
            if (screenName === null || screenName === undefined) {
                throw new RequiredError('screenName','Required parameter screenName was null or undefined when calling fetchUserMediaApiV1TwitterWebFetchUserMediaGet.');
            }
            const localVarPath = `/api/v1/twitter/web/fetch_user_media`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (screenName !== undefined) {
                localVarQueryParameter['screen_name'] = screenName;
            }

            if (restId !== undefined) {
                localVarQueryParameter['rest_id'] = restId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户媒体 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 ### 返回: - 用户媒体  # [English] ### Purpose: - Get user media ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. ### Return: - User media  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 获取用户媒体/Get user media
         * @param {string} screenName 用户名/Screen Name
         * @param {number} [restId] 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserMediaApiV1TwitterWebFetchUserMediaGet_10: async (screenName: string, restId?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'screenName' is not null or undefined
            if (screenName === null || screenName === undefined) {
                throw new RequiredError('screenName','Required parameter screenName was null or undefined when calling fetchUserMediaApiV1TwitterWebFetchUserMediaGet_10.');
            }
            const localVarPath = `/api/v1/twitter/web/fetch_user_media`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (screenName !== undefined) {
                localVarQueryParameter['screen_name'] = screenName;
            }

            if (restId !== undefined) {
                localVarQueryParameter['rest_id'] = restId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户发帖 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的JSON中获取。 ### 返回: - 用户发帖  # [English] ### Purpose: - Get user post ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. - cursor: Cursor, default is None, used for paging, obtained from the JSON in the last request.  # [示例/Example] screen_name = \"elonmusk\" rest_id = 44196397 cursor = None
         * @summary 获取用户发帖/Get user post
         * @param {string} [screenName] 用户名/Screen Name
         * @param {number} [restId] 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet: async (screenName?: string, restId?: number, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/twitter/web/fetch_user_post_tweet`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (screenName !== undefined) {
                localVarQueryParameter['screen_name'] = screenName;
            }

            if (restId !== undefined) {
                localVarQueryParameter['rest_id'] = restId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户发帖 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的JSON中获取。 ### 返回: - 用户发帖  # [English] ### Purpose: - Get user post ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. - cursor: Cursor, default is None, used for paging, obtained from the JSON in the last request.  # [示例/Example] screen_name = \"elonmusk\" rest_id = 44196397 cursor = None
         * @summary 获取用户发帖/Get user post
         * @param {string} [screenName] 用户名/Screen Name
         * @param {number} [restId] 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet_11: async (screenName?: string, restId?: number, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/twitter/web/fetch_user_post_tweet`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (screenName !== undefined) {
                localVarQueryParameter['screen_name'] = screenName;
            }

            if (restId !== undefined) {
                localVarQueryParameter['rest_id'] = restId;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户资料 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 ### 返回: - 用户资料  # [English] ### Purpose: - Get user profile ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. ### Return: - User profile  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 获取用户资料/Get user profile
         * @param {string} [screenName] 用户名/Screen Name
         * @param {number} [restId] 用户ID（如果使用用户ID则会忽略用户名）/User ID (If the user ID is used, the user name will be ignored)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserProfileApiV1TwitterWebFetchUserProfileGet: async (screenName?: string, restId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/twitter/web/fetch_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (screenName !== undefined) {
                localVarQueryParameter['screen_name'] = screenName;
            }

            if (restId !== undefined) {
                localVarQueryParameter['rest_id'] = restId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户资料 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 ### 返回: - 用户资料  # [English] ### Purpose: - Get user profile ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. ### Return: - User profile  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 获取用户资料/Get user profile
         * @param {string} [screenName] 用户名/Screen Name
         * @param {number} [restId] 用户ID（如果使用用户ID则会忽略用户名）/User ID (If the user ID is used, the user name will be ignored)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserProfileApiV1TwitterWebFetchUserProfileGet_12: async (screenName?: string, restId?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/twitter/web/fetch_user_profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (screenName !== undefined) {
                localVarQueryParameter['screen_name'] = screenName;
            }

            if (restId !== undefined) {
                localVarQueryParameter['rest_id'] = restId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户推文回复 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户推文回复  # [English] ### Purpose: - Get user tweet replies ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User tweet replies  # [示例/Example] screen_name = \"elonmusk\" cursor = None
         * @summary 获取用户推文回复/Get user tweet replies
         * @param {string} screenName 用户名/Screen Name
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet: async (screenName: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'screenName' is not null or undefined
            if (screenName === null || screenName === undefined) {
                throw new RequiredError('screenName','Required parameter screenName was null or undefined when calling fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet.');
            }
            const localVarPath = `/api/v1/twitter/web/fetch_user_tweet_replies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (screenName !== undefined) {
                localVarQueryParameter['screen_name'] = screenName;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户推文回复 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户推文回复  # [English] ### Purpose: - Get user tweet replies ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User tweet replies  # [示例/Example] screen_name = \"elonmusk\" cursor = None
         * @summary 获取用户推文回复/Get user tweet replies
         * @param {string} screenName 用户名/Screen Name
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet_13: async (screenName: string, cursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'screenName' is not null or undefined
            if (screenName === null || screenName === undefined) {
                throw new RequiredError('screenName','Required parameter screenName was null or undefined when calling fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet_13.');
            }
            const localVarPath = `/api/v1/twitter/web/fetch_user_tweet_replies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (screenName !== undefined) {
                localVarQueryParameter['screen_name'] = screenName;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TwitterWebAPIApi - functional programming interface
 * @export
 */
export const TwitterWebAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取最新的推文评论 ### 参数: - tweet_id: 推文ID - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 推文评论  # [English] ### Purpose: - Get the latest tweet comments ### Parameters: - tweet_id: Tweet ID - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Tweet comments  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
         * @summary 获取最新的推文评论/Get the latest tweet comments
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLatestPostCommentsApiV1TwitterWebFetchLatestPostCommentsGet(tweetId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchLatestPostCommentsApiV1TwitterWebFetchLatestPostCommentsGet(tweetId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取最新的推文评论 ### 参数: - tweet_id: 推文ID - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 推文评论  # [English] ### Purpose: - Get the latest tweet comments ### Parameters: - tweet_id: Tweet ID - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Tweet comments  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
         * @summary 获取最新的推文评论/Get the latest tweet comments
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchLatestPostCommentsApiV1TwitterWebFetchLatestPostCommentsGet_1(tweetId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchLatestPostCommentsApiV1TwitterWebFetchLatestPostCommentsGet_1(tweetId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取推文下的评论 ### 参数: - tweet_id: 推文ID - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 评论  # [English] ### Purpose: - Get comments under the tweet ### Parameters: - tweet_id: Tweet ID - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Comments  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
         * @summary 获取评论/Get comments
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet(tweetId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet(tweetId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取推文下的评论 ### 参数: - tweet_id: 推文ID - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 评论  # [English] ### Purpose: - Get comments under the tweet ### Parameters: - tweet_id: Tweet ID - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Comments  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
         * @summary 获取评论/Get comments
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet_2(tweetId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet_2(tweetId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取转推用户列表 ### 参数: - tweet_id: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 转推用户列表  # [English] ### Purpose: - Get ReTweet User list ### Parameters: - tweet_id: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - ReTweet User list  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
         * @summary 转推用户列表/ReTweet User list
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchRetweetUserListApiV1TwitterWebFetchRetweetUserListGet(tweetId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchRetweetUserListApiV1TwitterWebFetchRetweetUserListGet(tweetId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取转推用户列表 ### 参数: - tweet_id: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 转推用户列表  # [English] ### Purpose: - Get ReTweet User list ### Parameters: - tweet_id: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - ReTweet User list  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
         * @summary 转推用户列表/ReTweet User list
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchRetweetUserListApiV1TwitterWebFetchRetweetUserListGet_3(tweetId: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchRetweetUserListApiV1TwitterWebFetchRetweetUserListGet_3(tweetId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索 ### 参数: - keyword: 搜索关键字 - search_type: 搜索类型，默认为Top，其他可选值为Latest，Media，People, Lists - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 搜索结果  # [English] ### Purpose: - Search ### Parameters: - keyword: Search keyword - search_type: Search type, default is Top, other optional values are Latest, Media, People, Lists - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Search results  # [示例/Example] keyword = \"Elon Musk\" search_type = \"Top\" cursor = None
         * @summary 搜索/Search
         * @param {string} keyword 搜索关键字/Search Keyword
         * @param {string} [searchType] 搜索类型/Search Type
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet(keyword: string, searchType?: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet(keyword, searchType, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索 ### 参数: - keyword: 搜索关键字 - search_type: 搜索类型，默认为Top，其他可选值为Latest，Media，People, Lists - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 搜索结果  # [English] ### Purpose: - Search ### Parameters: - keyword: Search keyword - search_type: Search type, default is Top, other optional values are Latest, Media, People, Lists - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Search results  # [示例/Example] keyword = \"Elon Musk\" search_type = \"Top\" cursor = None
         * @summary 搜索/Search
         * @param {string} keyword 搜索关键字/Search Keyword
         * @param {string} [searchType] 搜索类型/Search Type
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet_4(keyword: string, searchType?: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet_4(keyword, searchType, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取趋势 ### 参数: - country: 国家，默认为UnitedStates，其他可选值见下方     - China     - India     - Japan     - Russia     - Germany     - Indonesia     - Brazil     - France     - UnitedKingdom     - Turkey     - Italy     - Mexico     - SouthKorea     - Canada     - Spain     - SaudiArabia     - Egypt     - Australia     - Poland     - Iran     - Pakistan     - Vietnam     - Nigeria     - Bangladesh     - Netherlands     - Argentina     - Philippines     - Malaysia     - Colombia     - UniteArabEmirates     - Romania     - Belgium     - Switzerland     - Singapore     - Sweden     - Norway     - Austria     - Kazakhstan     - Algeria     - Chile     - Czechia     - Peru     - Iraq     - Israel     - Ukraine     - Denmark     - Portugal     - Hungary     - Greece     - Finland     - NewZealand     - Belarus     - Slovakia     - Serbia     - Lithuania     - Luxembourg     - Estonia  ### 返回: - 趋势  # [English] ### Purpose: - Get Trending ### Parameters: - country: Country, default is UnitedStates, other optional values are as follows     - China     - India     - Japan     - Russia     - Germany     - Indonesia     - Brazil     - France     - UnitedKingdom     - Turkey     - Italy     - Mexico     - SouthKorea     - Canada     - Spain     - SaudiArabia     - Egypt     - Australia     - Poland     - Iran     - Pakistan     - Vietnam     - Nigeria     - Bangladesh     - Netherlands     - Argentina     - Philippines     - Malaysia     - Colombia     - UniteArabEmirates     - Romania     - Belgium     - Switzerland     - Singapore     - Sweden     - Norway     - Austria     - Kazakhstan     - Algeria     - Chile     - Czechia     - Peru  ### Return: - Trending  # [示例/Example] country = \"UnitedStates\"
         * @summary 趋势/Trending
         * @param {string} [country] 国家/Country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTrendingApiV1TwitterWebFetchTrendingGet(country?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchTrendingApiV1TwitterWebFetchTrendingGet(country, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取趋势 ### 参数: - country: 国家，默认为UnitedStates，其他可选值见下方     - China     - India     - Japan     - Russia     - Germany     - Indonesia     - Brazil     - France     - UnitedKingdom     - Turkey     - Italy     - Mexico     - SouthKorea     - Canada     - Spain     - SaudiArabia     - Egypt     - Australia     - Poland     - Iran     - Pakistan     - Vietnam     - Nigeria     - Bangladesh     - Netherlands     - Argentina     - Philippines     - Malaysia     - Colombia     - UniteArabEmirates     - Romania     - Belgium     - Switzerland     - Singapore     - Sweden     - Norway     - Austria     - Kazakhstan     - Algeria     - Chile     - Czechia     - Peru     - Iraq     - Israel     - Ukraine     - Denmark     - Portugal     - Hungary     - Greece     - Finland     - NewZealand     - Belarus     - Slovakia     - Serbia     - Lithuania     - Luxembourg     - Estonia  ### 返回: - 趋势  # [English] ### Purpose: - Get Trending ### Parameters: - country: Country, default is UnitedStates, other optional values are as follows     - China     - India     - Japan     - Russia     - Germany     - Indonesia     - Brazil     - France     - UnitedKingdom     - Turkey     - Italy     - Mexico     - SouthKorea     - Canada     - Spain     - SaudiArabia     - Egypt     - Australia     - Poland     - Iran     - Pakistan     - Vietnam     - Nigeria     - Bangladesh     - Netherlands     - Argentina     - Philippines     - Malaysia     - Colombia     - UniteArabEmirates     - Romania     - Belgium     - Switzerland     - Singapore     - Sweden     - Norway     - Austria     - Kazakhstan     - Algeria     - Chile     - Czechia     - Peru  ### Return: - Trending  # [示例/Example] country = \"UnitedStates\"
         * @summary 趋势/Trending
         * @param {string} [country] 国家/Country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTrendingApiV1TwitterWebFetchTrendingGet_5(country?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchTrendingApiV1TwitterWebFetchTrendingGet_5(country, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个推文数据 ### 参数: - tweet_id: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 ### 返回: - 推文数据  # [English] ### Purpose: - Get single tweet data ### Parameters: - tweet_id: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 ### Return: - Tweet data  # [示例/Example] tweet_id = \"1808168603721650364\"
         * @summary 获取单个推文数据/Get single tweet data
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet(tweetId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet(tweetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取单个推文数据 ### 参数: - tweet_id: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 ### 返回: - 推文数据  # [English] ### Purpose: - Get single tweet data ### Parameters: - tweet_id: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 ### Return: - Tweet data  # [示例/Example] tweet_id = \"1808168603721650364\"
         * @summary 获取单个推文数据/Get single tweet data
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet_6(tweetId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet_6(tweetId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户粉丝  # [English] ### Purpose: - Get User Followers ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User Followers  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 用户粉丝/User Followers
         * @param {string} screenName 用户名/Screen Name
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowersApiV1TwitterWebFetchUserFollowersGet(screenName: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchUserFollowersApiV1TwitterWebFetchUserFollowersGet(screenName, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户粉丝  # [English] ### Purpose: - Get User Followers ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User Followers  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 用户粉丝/User Followers
         * @param {string} screenName 用户名/Screen Name
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowersApiV1TwitterWebFetchUserFollowersGet_7(screenName: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchUserFollowersApiV1TwitterWebFetchUserFollowersGet_7(screenName, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户关注 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户关注  # [English] ### Purpose: - Get User Followings ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User Followings  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 用户关注/User Followings
         * @param {string} screenName 用户名/Screen Name
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowingsApiV1TwitterWebFetchUserFollowingsGet(screenName: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchUserFollowingsApiV1TwitterWebFetchUserFollowingsGet(screenName, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户关注 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户关注  # [English] ### Purpose: - Get User Followings ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User Followings  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 用户关注/User Followings
         * @param {string} screenName 用户名/Screen Name
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserFollowingsApiV1TwitterWebFetchUserFollowingsGet_8(screenName: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchUserFollowingsApiV1TwitterWebFetchUserFollowingsGet_8(screenName, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户高光推文 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户高光推文  # [English] ### Purpose: - Get user highlights tweets ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User highlights tweets  # [示例/Example] userId = \"44196397\" count = 20 cursor = None
         * @summary 获取用户高光推文/Get user highlights tweets
         * @param {string} userId 用户ID/User ID
         * @param {number} [count] 数量/Count
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet(userId: string, count?: number, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet(userId, count, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户高光推文 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户高光推文  # [English] ### Purpose: - Get user highlights tweets ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User highlights tweets  # [示例/Example] userId = \"44196397\" count = 20 cursor = None
         * @summary 获取用户高光推文/Get user highlights tweets
         * @param {string} userId 用户ID/User ID
         * @param {number} [count] 数量/Count
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet_9(userId: string, count?: number, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet_9(userId, count, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户媒体 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 ### 返回: - 用户媒体  # [English] ### Purpose: - Get user media ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. ### Return: - User media  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 获取用户媒体/Get user media
         * @param {string} screenName 用户名/Screen Name
         * @param {number} [restId] 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserMediaApiV1TwitterWebFetchUserMediaGet(screenName: string, restId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchUserMediaApiV1TwitterWebFetchUserMediaGet(screenName, restId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户媒体 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 ### 返回: - 用户媒体  # [English] ### Purpose: - Get user media ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. ### Return: - User media  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 获取用户媒体/Get user media
         * @param {string} screenName 用户名/Screen Name
         * @param {number} [restId] 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserMediaApiV1TwitterWebFetchUserMediaGet_10(screenName: string, restId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchUserMediaApiV1TwitterWebFetchUserMediaGet_10(screenName, restId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户发帖 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的JSON中获取。 ### 返回: - 用户发帖  # [English] ### Purpose: - Get user post ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. - cursor: Cursor, default is None, used for paging, obtained from the JSON in the last request.  # [示例/Example] screen_name = \"elonmusk\" rest_id = 44196397 cursor = None
         * @summary 获取用户发帖/Get user post
         * @param {string} [screenName] 用户名/Screen Name
         * @param {number} [restId] 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet(screenName?: string, restId?: number, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet(screenName, restId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户发帖 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的JSON中获取。 ### 返回: - 用户发帖  # [English] ### Purpose: - Get user post ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. - cursor: Cursor, default is None, used for paging, obtained from the JSON in the last request.  # [示例/Example] screen_name = \"elonmusk\" rest_id = 44196397 cursor = None
         * @summary 获取用户发帖/Get user post
         * @param {string} [screenName] 用户名/Screen Name
         * @param {number} [restId] 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet_11(screenName?: string, restId?: number, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet_11(screenName, restId, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户资料 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 ### 返回: - 用户资料  # [English] ### Purpose: - Get user profile ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. ### Return: - User profile  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 获取用户资料/Get user profile
         * @param {string} [screenName] 用户名/Screen Name
         * @param {number} [restId] 用户ID（如果使用用户ID则会忽略用户名）/User ID (If the user ID is used, the user name will be ignored)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserProfileApiV1TwitterWebFetchUserProfileGet(screenName?: string, restId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchUserProfileApiV1TwitterWebFetchUserProfileGet(screenName, restId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户资料 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 ### 返回: - 用户资料  # [English] ### Purpose: - Get user profile ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. ### Return: - User profile  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 获取用户资料/Get user profile
         * @param {string} [screenName] 用户名/Screen Name
         * @param {number} [restId] 用户ID（如果使用用户ID则会忽略用户名）/User ID (If the user ID is used, the user name will be ignored)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserProfileApiV1TwitterWebFetchUserProfileGet_12(screenName?: string, restId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchUserProfileApiV1TwitterWebFetchUserProfileGet_12(screenName, restId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户推文回复 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户推文回复  # [English] ### Purpose: - Get user tweet replies ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User tweet replies  # [示例/Example] screen_name = \"elonmusk\" cursor = None
         * @summary 获取用户推文回复/Get user tweet replies
         * @param {string} screenName 用户名/Screen Name
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet(screenName: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet(screenName, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户推文回复 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户推文回复  # [English] ### Purpose: - Get user tweet replies ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User tweet replies  # [示例/Example] screen_name = \"elonmusk\" cursor = None
         * @summary 获取用户推文回复/Get user tweet replies
         * @param {string} screenName 用户名/Screen Name
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet_13(screenName: string, cursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await TwitterWebAPIApiAxiosParamCreator(configuration).fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet_13(screenName, cursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TwitterWebAPIApi - factory interface
 * @export
 */
export const TwitterWebAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 获取最新的推文评论 ### 参数: - tweet_id: 推文ID - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 推文评论  # [English] ### Purpose: - Get the latest tweet comments ### Parameters: - tweet_id: Tweet ID - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Tweet comments  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
         * @summary 获取最新的推文评论/Get the latest tweet comments
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLatestPostCommentsApiV1TwitterWebFetchLatestPostCommentsGet(tweetId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchLatestPostCommentsApiV1TwitterWebFetchLatestPostCommentsGet(tweetId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取最新的推文评论 ### 参数: - tweet_id: 推文ID - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 推文评论  # [English] ### Purpose: - Get the latest tweet comments ### Parameters: - tweet_id: Tweet ID - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Tweet comments  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
         * @summary 获取最新的推文评论/Get the latest tweet comments
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchLatestPostCommentsApiV1TwitterWebFetchLatestPostCommentsGet_1(tweetId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchLatestPostCommentsApiV1TwitterWebFetchLatestPostCommentsGet_1(tweetId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取推文下的评论 ### 参数: - tweet_id: 推文ID - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 评论  # [English] ### Purpose: - Get comments under the tweet ### Parameters: - tweet_id: Tweet ID - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Comments  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
         * @summary 获取评论/Get comments
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet(tweetId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet(tweetId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取推文下的评论 ### 参数: - tweet_id: 推文ID - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 评论  # [English] ### Purpose: - Get comments under the tweet ### Parameters: - tweet_id: Tweet ID - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Comments  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
         * @summary 获取评论/Get comments
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet_2(tweetId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet_2(tweetId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取转推用户列表 ### 参数: - tweet_id: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 转推用户列表  # [English] ### Purpose: - Get ReTweet User list ### Parameters: - tweet_id: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - ReTweet User list  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
         * @summary 转推用户列表/ReTweet User list
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRetweetUserListApiV1TwitterWebFetchRetweetUserListGet(tweetId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchRetweetUserListApiV1TwitterWebFetchRetweetUserListGet(tweetId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取转推用户列表 ### 参数: - tweet_id: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 转推用户列表  # [English] ### Purpose: - Get ReTweet User list ### Parameters: - tweet_id: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - ReTweet User list  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
         * @summary 转推用户列表/ReTweet User list
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRetweetUserListApiV1TwitterWebFetchRetweetUserListGet_3(tweetId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchRetweetUserListApiV1TwitterWebFetchRetweetUserListGet_3(tweetId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索 ### 参数: - keyword: 搜索关键字 - search_type: 搜索类型，默认为Top，其他可选值为Latest，Media，People, Lists - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 搜索结果  # [English] ### Purpose: - Search ### Parameters: - keyword: Search keyword - search_type: Search type, default is Top, other optional values are Latest, Media, People, Lists - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Search results  # [示例/Example] keyword = \"Elon Musk\" search_type = \"Top\" cursor = None
         * @summary 搜索/Search
         * @param {string} keyword 搜索关键字/Search Keyword
         * @param {string} [searchType] 搜索类型/Search Type
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet(keyword: string, searchType?: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet(keyword, searchType, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索 ### 参数: - keyword: 搜索关键字 - search_type: 搜索类型，默认为Top，其他可选值为Latest，Media，People, Lists - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 搜索结果  # [English] ### Purpose: - Search ### Parameters: - keyword: Search keyword - search_type: Search type, default is Top, other optional values are Latest, Media, People, Lists - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Search results  # [示例/Example] keyword = \"Elon Musk\" search_type = \"Top\" cursor = None
         * @summary 搜索/Search
         * @param {string} keyword 搜索关键字/Search Keyword
         * @param {string} [searchType] 搜索类型/Search Type
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet_4(keyword: string, searchType?: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet_4(keyword, searchType, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取趋势 ### 参数: - country: 国家，默认为UnitedStates，其他可选值见下方     - China     - India     - Japan     - Russia     - Germany     - Indonesia     - Brazil     - France     - UnitedKingdom     - Turkey     - Italy     - Mexico     - SouthKorea     - Canada     - Spain     - SaudiArabia     - Egypt     - Australia     - Poland     - Iran     - Pakistan     - Vietnam     - Nigeria     - Bangladesh     - Netherlands     - Argentina     - Philippines     - Malaysia     - Colombia     - UniteArabEmirates     - Romania     - Belgium     - Switzerland     - Singapore     - Sweden     - Norway     - Austria     - Kazakhstan     - Algeria     - Chile     - Czechia     - Peru     - Iraq     - Israel     - Ukraine     - Denmark     - Portugal     - Hungary     - Greece     - Finland     - NewZealand     - Belarus     - Slovakia     - Serbia     - Lithuania     - Luxembourg     - Estonia  ### 返回: - 趋势  # [English] ### Purpose: - Get Trending ### Parameters: - country: Country, default is UnitedStates, other optional values are as follows     - China     - India     - Japan     - Russia     - Germany     - Indonesia     - Brazil     - France     - UnitedKingdom     - Turkey     - Italy     - Mexico     - SouthKorea     - Canada     - Spain     - SaudiArabia     - Egypt     - Australia     - Poland     - Iran     - Pakistan     - Vietnam     - Nigeria     - Bangladesh     - Netherlands     - Argentina     - Philippines     - Malaysia     - Colombia     - UniteArabEmirates     - Romania     - Belgium     - Switzerland     - Singapore     - Sweden     - Norway     - Austria     - Kazakhstan     - Algeria     - Chile     - Czechia     - Peru  ### Return: - Trending  # [示例/Example] country = \"UnitedStates\"
         * @summary 趋势/Trending
         * @param {string} [country] 国家/Country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTrendingApiV1TwitterWebFetchTrendingGet(country?: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchTrendingApiV1TwitterWebFetchTrendingGet(country, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取趋势 ### 参数: - country: 国家，默认为UnitedStates，其他可选值见下方     - China     - India     - Japan     - Russia     - Germany     - Indonesia     - Brazil     - France     - UnitedKingdom     - Turkey     - Italy     - Mexico     - SouthKorea     - Canada     - Spain     - SaudiArabia     - Egypt     - Australia     - Poland     - Iran     - Pakistan     - Vietnam     - Nigeria     - Bangladesh     - Netherlands     - Argentina     - Philippines     - Malaysia     - Colombia     - UniteArabEmirates     - Romania     - Belgium     - Switzerland     - Singapore     - Sweden     - Norway     - Austria     - Kazakhstan     - Algeria     - Chile     - Czechia     - Peru     - Iraq     - Israel     - Ukraine     - Denmark     - Portugal     - Hungary     - Greece     - Finland     - NewZealand     - Belarus     - Slovakia     - Serbia     - Lithuania     - Luxembourg     - Estonia  ### 返回: - 趋势  # [English] ### Purpose: - Get Trending ### Parameters: - country: Country, default is UnitedStates, other optional values are as follows     - China     - India     - Japan     - Russia     - Germany     - Indonesia     - Brazil     - France     - UnitedKingdom     - Turkey     - Italy     - Mexico     - SouthKorea     - Canada     - Spain     - SaudiArabia     - Egypt     - Australia     - Poland     - Iran     - Pakistan     - Vietnam     - Nigeria     - Bangladesh     - Netherlands     - Argentina     - Philippines     - Malaysia     - Colombia     - UniteArabEmirates     - Romania     - Belgium     - Switzerland     - Singapore     - Sweden     - Norway     - Austria     - Kazakhstan     - Algeria     - Chile     - Czechia     - Peru  ### Return: - Trending  # [示例/Example] country = \"UnitedStates\"
         * @summary 趋势/Trending
         * @param {string} [country] 国家/Country
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTrendingApiV1TwitterWebFetchTrendingGet_5(country?: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchTrendingApiV1TwitterWebFetchTrendingGet_5(country, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个推文数据 ### 参数: - tweet_id: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 ### 返回: - 推文数据  # [English] ### Purpose: - Get single tweet data ### Parameters: - tweet_id: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 ### Return: - Tweet data  # [示例/Example] tweet_id = \"1808168603721650364\"
         * @summary 获取单个推文数据/Get single tweet data
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet(tweetId: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet(tweetId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取单个推文数据 ### 参数: - tweet_id: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 ### 返回: - 推文数据  # [English] ### Purpose: - Get single tweet data ### Parameters: - tweet_id: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 ### Return: - Tweet data  # [示例/Example] tweet_id = \"1808168603721650364\"
         * @summary 获取单个推文数据/Get single tweet data
         * @param {string} tweetId 推文ID/Tweet ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet_6(tweetId: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet_6(tweetId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户粉丝  # [English] ### Purpose: - Get User Followers ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User Followers  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 用户粉丝/User Followers
         * @param {string} screenName 用户名/Screen Name
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowersApiV1TwitterWebFetchUserFollowersGet(screenName: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchUserFollowersApiV1TwitterWebFetchUserFollowersGet(screenName, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户粉丝 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户粉丝  # [English] ### Purpose: - Get User Followers ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User Followers  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 用户粉丝/User Followers
         * @param {string} screenName 用户名/Screen Name
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowersApiV1TwitterWebFetchUserFollowersGet_7(screenName: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchUserFollowersApiV1TwitterWebFetchUserFollowersGet_7(screenName, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户关注 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户关注  # [English] ### Purpose: - Get User Followings ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User Followings  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 用户关注/User Followings
         * @param {string} screenName 用户名/Screen Name
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingsApiV1TwitterWebFetchUserFollowingsGet(screenName: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchUserFollowingsApiV1TwitterWebFetchUserFollowingsGet(screenName, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户关注 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户关注  # [English] ### Purpose: - Get User Followings ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User Followings  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 用户关注/User Followings
         * @param {string} screenName 用户名/Screen Name
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserFollowingsApiV1TwitterWebFetchUserFollowingsGet_8(screenName: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchUserFollowingsApiV1TwitterWebFetchUserFollowingsGet_8(screenName, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户高光推文 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户高光推文  # [English] ### Purpose: - Get user highlights tweets ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User highlights tweets  # [示例/Example] userId = \"44196397\" count = 20 cursor = None
         * @summary 获取用户高光推文/Get user highlights tweets
         * @param {string} userId 用户ID/User ID
         * @param {number} [count] 数量/Count
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet(userId: string, count?: number, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet(userId, count, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户高光推文 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户高光推文  # [English] ### Purpose: - Get user highlights tweets ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User highlights tweets  # [示例/Example] userId = \"44196397\" count = 20 cursor = None
         * @summary 获取用户高光推文/Get user highlights tweets
         * @param {string} userId 用户ID/User ID
         * @param {number} [count] 数量/Count
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet_9(userId: string, count?: number, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet_9(userId, count, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户媒体 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 ### 返回: - 用户媒体  # [English] ### Purpose: - Get user media ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. ### Return: - User media  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 获取用户媒体/Get user media
         * @param {string} screenName 用户名/Screen Name
         * @param {number} [restId] 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserMediaApiV1TwitterWebFetchUserMediaGet(screenName: string, restId?: number, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchUserMediaApiV1TwitterWebFetchUserMediaGet(screenName, restId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户媒体 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 ### 返回: - 用户媒体  # [English] ### Purpose: - Get user media ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. ### Return: - User media  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 获取用户媒体/Get user media
         * @param {string} screenName 用户名/Screen Name
         * @param {number} [restId] 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserMediaApiV1TwitterWebFetchUserMediaGet_10(screenName: string, restId?: number, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchUserMediaApiV1TwitterWebFetchUserMediaGet_10(screenName, restId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户发帖 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的JSON中获取。 ### 返回: - 用户发帖  # [English] ### Purpose: - Get user post ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. - cursor: Cursor, default is None, used for paging, obtained from the JSON in the last request.  # [示例/Example] screen_name = \"elonmusk\" rest_id = 44196397 cursor = None
         * @summary 获取用户发帖/Get user post
         * @param {string} [screenName] 用户名/Screen Name
         * @param {number} [restId] 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet(screenName?: string, restId?: number, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet(screenName, restId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户发帖 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的JSON中获取。 ### 返回: - 用户发帖  # [English] ### Purpose: - Get user post ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. - cursor: Cursor, default is None, used for paging, obtained from the JSON in the last request.  # [示例/Example] screen_name = \"elonmusk\" rest_id = 44196397 cursor = None
         * @summary 获取用户发帖/Get user post
         * @param {string} [screenName] 用户名/Screen Name
         * @param {number} [restId] 用户ID/User ID
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet_11(screenName?: string, restId?: number, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet_11(screenName, restId, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户资料 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 ### 返回: - 用户资料  # [English] ### Purpose: - Get user profile ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. ### Return: - User profile  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 获取用户资料/Get user profile
         * @param {string} [screenName] 用户名/Screen Name
         * @param {number} [restId] 用户ID（如果使用用户ID则会忽略用户名）/User ID (If the user ID is used, the user name will be ignored)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserProfileApiV1TwitterWebFetchUserProfileGet(screenName?: string, restId?: number, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchUserProfileApiV1TwitterWebFetchUserProfileGet(screenName, restId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户资料 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 ### 返回: - 用户资料  # [English] ### Purpose: - Get user profile ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. ### Return: - User profile  # [示例/Example] screen_name = \"elonmusk\"
         * @summary 获取用户资料/Get user profile
         * @param {string} [screenName] 用户名/Screen Name
         * @param {number} [restId] 用户ID（如果使用用户ID则会忽略用户名）/User ID (If the user ID is used, the user name will be ignored)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserProfileApiV1TwitterWebFetchUserProfileGet_12(screenName?: string, restId?: number, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchUserProfileApiV1TwitterWebFetchUserProfileGet_12(screenName, restId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户推文回复 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户推文回复  # [English] ### Purpose: - Get user tweet replies ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User tweet replies  # [示例/Example] screen_name = \"elonmusk\" cursor = None
         * @summary 获取用户推文回复/Get user tweet replies
         * @param {string} screenName 用户名/Screen Name
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet(screenName: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet(screenName, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户推文回复 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户推文回复  # [English] ### Purpose: - Get user tweet replies ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User tweet replies  # [示例/Example] screen_name = \"elonmusk\" cursor = None
         * @summary 获取用户推文回复/Get user tweet replies
         * @param {string} screenName 用户名/Screen Name
         * @param {string} [cursor] 游标/Cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet_13(screenName: string, cursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return TwitterWebAPIApiFp(configuration).fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet_13(screenName, cursor, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TwitterWebAPIApi - interface
 * @export
 * @interface TwitterWebAPIApi
 */
export interface TwitterWebAPIApiInterface {
    /**
     * # [中文] ### 用途: - 获取最新的推文评论 ### 参数: - tweet_id: 推文ID - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 推文评论  # [English] ### Purpose: - Get the latest tweet comments ### Parameters: - tweet_id: Tweet ID - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Tweet comments  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
     * @summary 获取最新的推文评论/Get the latest tweet comments
     * @param {string} tweetId 推文ID/Tweet ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchLatestPostCommentsApiV1TwitterWebFetchLatestPostCommentsGet(tweetId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取最新的推文评论 ### 参数: - tweet_id: 推文ID - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 推文评论  # [English] ### Purpose: - Get the latest tweet comments ### Parameters: - tweet_id: Tweet ID - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Tweet comments  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
     * @summary 获取最新的推文评论/Get the latest tweet comments
     * @param {string} tweetId 推文ID/Tweet ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchLatestPostCommentsApiV1TwitterWebFetchLatestPostCommentsGet_1(tweetId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取推文下的评论 ### 参数: - tweet_id: 推文ID - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 评论  # [English] ### Purpose: - Get comments under the tweet ### Parameters: - tweet_id: Tweet ID - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Comments  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
     * @summary 获取评论/Get comments
     * @param {string} tweetId 推文ID/Tweet ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet(tweetId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取推文下的评论 ### 参数: - tweet_id: 推文ID - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 评论  # [English] ### Purpose: - Get comments under the tweet ### Parameters: - tweet_id: Tweet ID - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Comments  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
     * @summary 获取评论/Get comments
     * @param {string} tweetId 推文ID/Tweet ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet_2(tweetId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取转推用户列表 ### 参数: - tweet_id: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 转推用户列表  # [English] ### Purpose: - Get ReTweet User list ### Parameters: - tweet_id: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - ReTweet User list  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
     * @summary 转推用户列表/ReTweet User list
     * @param {string} tweetId 推文ID/Tweet ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchRetweetUserListApiV1TwitterWebFetchRetweetUserListGet(tweetId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取转推用户列表 ### 参数: - tweet_id: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 转推用户列表  # [English] ### Purpose: - Get ReTweet User list ### Parameters: - tweet_id: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - ReTweet User list  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
     * @summary 转推用户列表/ReTweet User list
     * @param {string} tweetId 推文ID/Tweet ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchRetweetUserListApiV1TwitterWebFetchRetweetUserListGet_3(tweetId: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索 ### 参数: - keyword: 搜索关键字 - search_type: 搜索类型，默认为Top，其他可选值为Latest，Media，People, Lists - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 搜索结果  # [English] ### Purpose: - Search ### Parameters: - keyword: Search keyword - search_type: Search type, default is Top, other optional values are Latest, Media, People, Lists - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Search results  # [示例/Example] keyword = \"Elon Musk\" search_type = \"Top\" cursor = None
     * @summary 搜索/Search
     * @param {string} keyword 搜索关键字/Search Keyword
     * @param {string} [searchType] 搜索类型/Search Type
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet(keyword: string, searchType?: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索 ### 参数: - keyword: 搜索关键字 - search_type: 搜索类型，默认为Top，其他可选值为Latest，Media，People, Lists - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 搜索结果  # [English] ### Purpose: - Search ### Parameters: - keyword: Search keyword - search_type: Search type, default is Top, other optional values are Latest, Media, People, Lists - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Search results  # [示例/Example] keyword = \"Elon Musk\" search_type = \"Top\" cursor = None
     * @summary 搜索/Search
     * @param {string} keyword 搜索关键字/Search Keyword
     * @param {string} [searchType] 搜索类型/Search Type
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet_4(keyword: string, searchType?: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取趋势 ### 参数: - country: 国家，默认为UnitedStates，其他可选值见下方     - China     - India     - Japan     - Russia     - Germany     - Indonesia     - Brazil     - France     - UnitedKingdom     - Turkey     - Italy     - Mexico     - SouthKorea     - Canada     - Spain     - SaudiArabia     - Egypt     - Australia     - Poland     - Iran     - Pakistan     - Vietnam     - Nigeria     - Bangladesh     - Netherlands     - Argentina     - Philippines     - Malaysia     - Colombia     - UniteArabEmirates     - Romania     - Belgium     - Switzerland     - Singapore     - Sweden     - Norway     - Austria     - Kazakhstan     - Algeria     - Chile     - Czechia     - Peru     - Iraq     - Israel     - Ukraine     - Denmark     - Portugal     - Hungary     - Greece     - Finland     - NewZealand     - Belarus     - Slovakia     - Serbia     - Lithuania     - Luxembourg     - Estonia  ### 返回: - 趋势  # [English] ### Purpose: - Get Trending ### Parameters: - country: Country, default is UnitedStates, other optional values are as follows     - China     - India     - Japan     - Russia     - Germany     - Indonesia     - Brazil     - France     - UnitedKingdom     - Turkey     - Italy     - Mexico     - SouthKorea     - Canada     - Spain     - SaudiArabia     - Egypt     - Australia     - Poland     - Iran     - Pakistan     - Vietnam     - Nigeria     - Bangladesh     - Netherlands     - Argentina     - Philippines     - Malaysia     - Colombia     - UniteArabEmirates     - Romania     - Belgium     - Switzerland     - Singapore     - Sweden     - Norway     - Austria     - Kazakhstan     - Algeria     - Chile     - Czechia     - Peru  ### Return: - Trending  # [示例/Example] country = \"UnitedStates\"
     * @summary 趋势/Trending
     * @param {string} [country] 国家/Country
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchTrendingApiV1TwitterWebFetchTrendingGet(country?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取趋势 ### 参数: - country: 国家，默认为UnitedStates，其他可选值见下方     - China     - India     - Japan     - Russia     - Germany     - Indonesia     - Brazil     - France     - UnitedKingdom     - Turkey     - Italy     - Mexico     - SouthKorea     - Canada     - Spain     - SaudiArabia     - Egypt     - Australia     - Poland     - Iran     - Pakistan     - Vietnam     - Nigeria     - Bangladesh     - Netherlands     - Argentina     - Philippines     - Malaysia     - Colombia     - UniteArabEmirates     - Romania     - Belgium     - Switzerland     - Singapore     - Sweden     - Norway     - Austria     - Kazakhstan     - Algeria     - Chile     - Czechia     - Peru     - Iraq     - Israel     - Ukraine     - Denmark     - Portugal     - Hungary     - Greece     - Finland     - NewZealand     - Belarus     - Slovakia     - Serbia     - Lithuania     - Luxembourg     - Estonia  ### 返回: - 趋势  # [English] ### Purpose: - Get Trending ### Parameters: - country: Country, default is UnitedStates, other optional values are as follows     - China     - India     - Japan     - Russia     - Germany     - Indonesia     - Brazil     - France     - UnitedKingdom     - Turkey     - Italy     - Mexico     - SouthKorea     - Canada     - Spain     - SaudiArabia     - Egypt     - Australia     - Poland     - Iran     - Pakistan     - Vietnam     - Nigeria     - Bangladesh     - Netherlands     - Argentina     - Philippines     - Malaysia     - Colombia     - UniteArabEmirates     - Romania     - Belgium     - Switzerland     - Singapore     - Sweden     - Norway     - Austria     - Kazakhstan     - Algeria     - Chile     - Czechia     - Peru  ### Return: - Trending  # [示例/Example] country = \"UnitedStates\"
     * @summary 趋势/Trending
     * @param {string} [country] 国家/Country
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchTrendingApiV1TwitterWebFetchTrendingGet_5(country?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个推文数据 ### 参数: - tweet_id: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 ### 返回: - 推文数据  # [English] ### Purpose: - Get single tweet data ### Parameters: - tweet_id: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 ### Return: - Tweet data  # [示例/Example] tweet_id = \"1808168603721650364\"
     * @summary 获取单个推文数据/Get single tweet data
     * @param {string} tweetId 推文ID/Tweet ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet(tweetId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取单个推文数据 ### 参数: - tweet_id: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 ### 返回: - 推文数据  # [English] ### Purpose: - Get single tweet data ### Parameters: - tweet_id: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 ### Return: - Tweet data  # [示例/Example] tweet_id = \"1808168603721650364\"
     * @summary 获取单个推文数据/Get single tweet data
     * @param {string} tweetId 推文ID/Tweet ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet_6(tweetId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户粉丝 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户粉丝  # [English] ### Purpose: - Get User Followers ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User Followers  # [示例/Example] screen_name = \"elonmusk\"
     * @summary 用户粉丝/User Followers
     * @param {string} screenName 用户名/Screen Name
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchUserFollowersApiV1TwitterWebFetchUserFollowersGet(screenName: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户粉丝 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户粉丝  # [English] ### Purpose: - Get User Followers ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User Followers  # [示例/Example] screen_name = \"elonmusk\"
     * @summary 用户粉丝/User Followers
     * @param {string} screenName 用户名/Screen Name
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchUserFollowersApiV1TwitterWebFetchUserFollowersGet_7(screenName: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户关注 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户关注  # [English] ### Purpose: - Get User Followings ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User Followings  # [示例/Example] screen_name = \"elonmusk\"
     * @summary 用户关注/User Followings
     * @param {string} screenName 用户名/Screen Name
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchUserFollowingsApiV1TwitterWebFetchUserFollowingsGet(screenName: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户关注 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户关注  # [English] ### Purpose: - Get User Followings ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User Followings  # [示例/Example] screen_name = \"elonmusk\"
     * @summary 用户关注/User Followings
     * @param {string} screenName 用户名/Screen Name
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchUserFollowingsApiV1TwitterWebFetchUserFollowingsGet_8(screenName: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户高光推文 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户高光推文  # [English] ### Purpose: - Get user highlights tweets ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User highlights tweets  # [示例/Example] userId = \"44196397\" count = 20 cursor = None
     * @summary 获取用户高光推文/Get user highlights tweets
     * @param {string} userId 用户ID/User ID
     * @param {number} [count] 数量/Count
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet(userId: string, count?: number, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户高光推文 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户高光推文  # [English] ### Purpose: - Get user highlights tweets ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User highlights tweets  # [示例/Example] userId = \"44196397\" count = 20 cursor = None
     * @summary 获取用户高光推文/Get user highlights tweets
     * @param {string} userId 用户ID/User ID
     * @param {number} [count] 数量/Count
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet_9(userId: string, count?: number, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户媒体 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 ### 返回: - 用户媒体  # [English] ### Purpose: - Get user media ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. ### Return: - User media  # [示例/Example] screen_name = \"elonmusk\"
     * @summary 获取用户媒体/Get user media
     * @param {string} screenName 用户名/Screen Name
     * @param {number} [restId] 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchUserMediaApiV1TwitterWebFetchUserMediaGet(screenName: string, restId?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户媒体 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 ### 返回: - 用户媒体  # [English] ### Purpose: - Get user media ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. ### Return: - User media  # [示例/Example] screen_name = \"elonmusk\"
     * @summary 获取用户媒体/Get user media
     * @param {string} screenName 用户名/Screen Name
     * @param {number} [restId] 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchUserMediaApiV1TwitterWebFetchUserMediaGet_10(screenName: string, restId?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户发帖 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的JSON中获取。 ### 返回: - 用户发帖  # [English] ### Purpose: - Get user post ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. - cursor: Cursor, default is None, used for paging, obtained from the JSON in the last request.  # [示例/Example] screen_name = \"elonmusk\" rest_id = 44196397 cursor = None
     * @summary 获取用户发帖/Get user post
     * @param {string} [screenName] 用户名/Screen Name
     * @param {number} [restId] 用户ID/User ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet(screenName?: string, restId?: number, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户发帖 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的JSON中获取。 ### 返回: - 用户发帖  # [English] ### Purpose: - Get user post ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. - cursor: Cursor, default is None, used for paging, obtained from the JSON in the last request.  # [示例/Example] screen_name = \"elonmusk\" rest_id = 44196397 cursor = None
     * @summary 获取用户发帖/Get user post
     * @param {string} [screenName] 用户名/Screen Name
     * @param {number} [restId] 用户ID/User ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet_11(screenName?: string, restId?: number, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户资料 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 ### 返回: - 用户资料  # [English] ### Purpose: - Get user profile ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. ### Return: - User profile  # [示例/Example] screen_name = \"elonmusk\"
     * @summary 获取用户资料/Get user profile
     * @param {string} [screenName] 用户名/Screen Name
     * @param {number} [restId] 用户ID（如果使用用户ID则会忽略用户名）/User ID (If the user ID is used, the user name will be ignored)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchUserProfileApiV1TwitterWebFetchUserProfileGet(screenName?: string, restId?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户资料 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 ### 返回: - 用户资料  # [English] ### Purpose: - Get user profile ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. ### Return: - User profile  # [示例/Example] screen_name = \"elonmusk\"
     * @summary 获取用户资料/Get user profile
     * @param {string} [screenName] 用户名/Screen Name
     * @param {number} [restId] 用户ID（如果使用用户ID则会忽略用户名）/User ID (If the user ID is used, the user name will be ignored)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchUserProfileApiV1TwitterWebFetchUserProfileGet_12(screenName?: string, restId?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户推文回复 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户推文回复  # [English] ### Purpose: - Get user tweet replies ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User tweet replies  # [示例/Example] screen_name = \"elonmusk\" cursor = None
     * @summary 获取用户推文回复/Get user tweet replies
     * @param {string} screenName 用户名/Screen Name
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet(screenName: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户推文回复 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户推文回复  # [English] ### Purpose: - Get user tweet replies ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User tweet replies  # [示例/Example] screen_name = \"elonmusk\" cursor = None
     * @summary 获取用户推文回复/Get user tweet replies
     * @param {string} screenName 用户名/Screen Name
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApiInterface
     */
    fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet_13(screenName: string, cursor?: string, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * TwitterWebAPIApi - object-oriented interface
 * @export
 * @class TwitterWebAPIApi
 * @extends {BaseAPI}
 */
export class TwitterWebAPIApi extends BaseAPI implements TwitterWebAPIApiInterface {
    /**
     * # [中文] ### 用途: - 获取最新的推文评论 ### 参数: - tweet_id: 推文ID - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 推文评论  # [English] ### Purpose: - Get the latest tweet comments ### Parameters: - tweet_id: Tweet ID - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Tweet comments  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
     * @summary 获取最新的推文评论/Get the latest tweet comments
     * @param {string} tweetId 推文ID/Tweet ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchLatestPostCommentsApiV1TwitterWebFetchLatestPostCommentsGet(tweetId: string, cursor?: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchLatestPostCommentsApiV1TwitterWebFetchLatestPostCommentsGet(tweetId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取最新的推文评论 ### 参数: - tweet_id: 推文ID - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 推文评论  # [English] ### Purpose: - Get the latest tweet comments ### Parameters: - tweet_id: Tweet ID - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Tweet comments  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
     * @summary 获取最新的推文评论/Get the latest tweet comments
     * @param {string} tweetId 推文ID/Tweet ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchLatestPostCommentsApiV1TwitterWebFetchLatestPostCommentsGet_1(tweetId: string, cursor?: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchLatestPostCommentsApiV1TwitterWebFetchLatestPostCommentsGet_1(tweetId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取推文下的评论 ### 参数: - tweet_id: 推文ID - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 评论  # [English] ### Purpose: - Get comments under the tweet ### Parameters: - tweet_id: Tweet ID - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Comments  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
     * @summary 获取评论/Get comments
     * @param {string} tweetId 推文ID/Tweet ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet(tweetId: string, cursor?: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet(tweetId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取推文下的评论 ### 参数: - tweet_id: 推文ID - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 评论  # [English] ### Purpose: - Get comments under the tweet ### Parameters: - tweet_id: Tweet ID - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Comments  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
     * @summary 获取评论/Get comments
     * @param {string} tweetId 推文ID/Tweet ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet_2(tweetId: string, cursor?: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchPostCommentsApiV1TwitterWebFetchPostCommentsGet_2(tweetId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取转推用户列表 ### 参数: - tweet_id: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 转推用户列表  # [English] ### Purpose: - Get ReTweet User list ### Parameters: - tweet_id: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - ReTweet User list  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
     * @summary 转推用户列表/ReTweet User list
     * @param {string} tweetId 推文ID/Tweet ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchRetweetUserListApiV1TwitterWebFetchRetweetUserListGet(tweetId: string, cursor?: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchRetweetUserListApiV1TwitterWebFetchRetweetUserListGet(tweetId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取转推用户列表 ### 参数: - tweet_id: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 转推用户列表  # [English] ### Purpose: - Get ReTweet User list ### Parameters: - tweet_id: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - ReTweet User list  # [示例/Example] tweet_id = \"1808168603721650364\" cursor = None
     * @summary 转推用户列表/ReTweet User list
     * @param {string} tweetId 推文ID/Tweet ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchRetweetUserListApiV1TwitterWebFetchRetweetUserListGet_3(tweetId: string, cursor?: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchRetweetUserListApiV1TwitterWebFetchRetweetUserListGet_3(tweetId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索 ### 参数: - keyword: 搜索关键字 - search_type: 搜索类型，默认为Top，其他可选值为Latest，Media，People, Lists - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 搜索结果  # [English] ### Purpose: - Search ### Parameters: - keyword: Search keyword - search_type: Search type, default is Top, other optional values are Latest, Media, People, Lists - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Search results  # [示例/Example] keyword = \"Elon Musk\" search_type = \"Top\" cursor = None
     * @summary 搜索/Search
     * @param {string} keyword 搜索关键字/Search Keyword
     * @param {string} [searchType] 搜索类型/Search Type
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet(keyword: string, searchType?: string, cursor?: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet(keyword, searchType, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索 ### 参数: - keyword: 搜索关键字 - search_type: 搜索类型，默认为Top，其他可选值为Latest，Media，People, Lists - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 搜索结果  # [English] ### Purpose: - Search ### Parameters: - keyword: Search keyword - search_type: Search type, default is Top, other optional values are Latest, Media, People, Lists - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - Search results  # [示例/Example] keyword = \"Elon Musk\" search_type = \"Top\" cursor = None
     * @summary 搜索/Search
     * @param {string} keyword 搜索关键字/Search Keyword
     * @param {string} [searchType] 搜索类型/Search Type
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet_4(keyword: string, searchType?: string, cursor?: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchSearchTimelineApiV1TwitterWebFetchSearchTimelineGet_4(keyword, searchType, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取趋势 ### 参数: - country: 国家，默认为UnitedStates，其他可选值见下方     - China     - India     - Japan     - Russia     - Germany     - Indonesia     - Brazil     - France     - UnitedKingdom     - Turkey     - Italy     - Mexico     - SouthKorea     - Canada     - Spain     - SaudiArabia     - Egypt     - Australia     - Poland     - Iran     - Pakistan     - Vietnam     - Nigeria     - Bangladesh     - Netherlands     - Argentina     - Philippines     - Malaysia     - Colombia     - UniteArabEmirates     - Romania     - Belgium     - Switzerland     - Singapore     - Sweden     - Norway     - Austria     - Kazakhstan     - Algeria     - Chile     - Czechia     - Peru     - Iraq     - Israel     - Ukraine     - Denmark     - Portugal     - Hungary     - Greece     - Finland     - NewZealand     - Belarus     - Slovakia     - Serbia     - Lithuania     - Luxembourg     - Estonia  ### 返回: - 趋势  # [English] ### Purpose: - Get Trending ### Parameters: - country: Country, default is UnitedStates, other optional values are as follows     - China     - India     - Japan     - Russia     - Germany     - Indonesia     - Brazil     - France     - UnitedKingdom     - Turkey     - Italy     - Mexico     - SouthKorea     - Canada     - Spain     - SaudiArabia     - Egypt     - Australia     - Poland     - Iran     - Pakistan     - Vietnam     - Nigeria     - Bangladesh     - Netherlands     - Argentina     - Philippines     - Malaysia     - Colombia     - UniteArabEmirates     - Romania     - Belgium     - Switzerland     - Singapore     - Sweden     - Norway     - Austria     - Kazakhstan     - Algeria     - Chile     - Czechia     - Peru  ### Return: - Trending  # [示例/Example] country = \"UnitedStates\"
     * @summary 趋势/Trending
     * @param {string} [country] 国家/Country
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchTrendingApiV1TwitterWebFetchTrendingGet(country?: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchTrendingApiV1TwitterWebFetchTrendingGet(country, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取趋势 ### 参数: - country: 国家，默认为UnitedStates，其他可选值见下方     - China     - India     - Japan     - Russia     - Germany     - Indonesia     - Brazil     - France     - UnitedKingdom     - Turkey     - Italy     - Mexico     - SouthKorea     - Canada     - Spain     - SaudiArabia     - Egypt     - Australia     - Poland     - Iran     - Pakistan     - Vietnam     - Nigeria     - Bangladesh     - Netherlands     - Argentina     - Philippines     - Malaysia     - Colombia     - UniteArabEmirates     - Romania     - Belgium     - Switzerland     - Singapore     - Sweden     - Norway     - Austria     - Kazakhstan     - Algeria     - Chile     - Czechia     - Peru     - Iraq     - Israel     - Ukraine     - Denmark     - Portugal     - Hungary     - Greece     - Finland     - NewZealand     - Belarus     - Slovakia     - Serbia     - Lithuania     - Luxembourg     - Estonia  ### 返回: - 趋势  # [English] ### Purpose: - Get Trending ### Parameters: - country: Country, default is UnitedStates, other optional values are as follows     - China     - India     - Japan     - Russia     - Germany     - Indonesia     - Brazil     - France     - UnitedKingdom     - Turkey     - Italy     - Mexico     - SouthKorea     - Canada     - Spain     - SaudiArabia     - Egypt     - Australia     - Poland     - Iran     - Pakistan     - Vietnam     - Nigeria     - Bangladesh     - Netherlands     - Argentina     - Philippines     - Malaysia     - Colombia     - UniteArabEmirates     - Romania     - Belgium     - Switzerland     - Singapore     - Sweden     - Norway     - Austria     - Kazakhstan     - Algeria     - Chile     - Czechia     - Peru  ### Return: - Trending  # [示例/Example] country = \"UnitedStates\"
     * @summary 趋势/Trending
     * @param {string} [country] 国家/Country
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchTrendingApiV1TwitterWebFetchTrendingGet_5(country?: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchTrendingApiV1TwitterWebFetchTrendingGet_5(country, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个推文数据 ### 参数: - tweet_id: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 ### 返回: - 推文数据  # [English] ### Purpose: - Get single tweet data ### Parameters: - tweet_id: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 ### Return: - Tweet data  # [示例/Example] tweet_id = \"1808168603721650364\"
     * @summary 获取单个推文数据/Get single tweet data
     * @param {string} tweetId 推文ID/Tweet ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet(tweetId: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet(tweetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取单个推文数据 ### 参数: - tweet_id: 推文ID，可以从推文链接中获取。例如：https://x.com/elonmusk/status/1808168603721650364 中的 1808168603721650364。 ### 返回: - 推文数据  # [English] ### Purpose: - Get single tweet data ### Parameters: - tweet_id: Tweet ID, can be obtained from the tweet link. For example: 1808168603721650364 in https://x.com/elonmusk/status/1808168603721650364 ### Return: - Tweet data  # [示例/Example] tweet_id = \"1808168603721650364\"
     * @summary 获取单个推文数据/Get single tweet data
     * @param {string} tweetId 推文ID/Tweet ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet_6(tweetId: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchTweetDetailApiV1TwitterWebFetchTweetDetailGet_6(tweetId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户粉丝 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户粉丝  # [English] ### Purpose: - Get User Followers ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User Followers  # [示例/Example] screen_name = \"elonmusk\"
     * @summary 用户粉丝/User Followers
     * @param {string} screenName 用户名/Screen Name
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchUserFollowersApiV1TwitterWebFetchUserFollowersGet(screenName: string, cursor?: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchUserFollowersApiV1TwitterWebFetchUserFollowersGet(screenName, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户粉丝 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户粉丝  # [English] ### Purpose: - Get User Followers ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User Followers  # [示例/Example] screen_name = \"elonmusk\"
     * @summary 用户粉丝/User Followers
     * @param {string} screenName 用户名/Screen Name
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchUserFollowersApiV1TwitterWebFetchUserFollowersGet_7(screenName: string, cursor?: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchUserFollowersApiV1TwitterWebFetchUserFollowersGet_7(screenName, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户关注 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户关注  # [English] ### Purpose: - Get User Followings ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User Followings  # [示例/Example] screen_name = \"elonmusk\"
     * @summary 用户关注/User Followings
     * @param {string} screenName 用户名/Screen Name
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchUserFollowingsApiV1TwitterWebFetchUserFollowingsGet(screenName: string, cursor?: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchUserFollowingsApiV1TwitterWebFetchUserFollowingsGet(screenName, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户关注 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户关注  # [English] ### Purpose: - Get User Followings ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User Followings  # [示例/Example] screen_name = \"elonmusk\"
     * @summary 用户关注/User Followings
     * @param {string} screenName 用户名/Screen Name
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchUserFollowingsApiV1TwitterWebFetchUserFollowingsGet_8(screenName: string, cursor?: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchUserFollowingsApiV1TwitterWebFetchUserFollowingsGet_8(screenName, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户高光推文 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户高光推文  # [English] ### Purpose: - Get user highlights tweets ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User highlights tweets  # [示例/Example] userId = \"44196397\" count = 20 cursor = None
     * @summary 获取用户高光推文/Get user highlights tweets
     * @param {string} userId 用户ID/User ID
     * @param {number} [count] 数量/Count
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet(userId: string, count?: number, cursor?: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet(userId, count, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户高光推文 ### 参数: - userId: 用户ID - count: 数量，默认为20 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### 返回: - 用户高光推文  # [English] ### Purpose: - Get user highlights tweets ### Parameters: - userId: User ID - count: Count, default is 20 - cursor: Cursor, default is None, used for paging, obtained from the last request     - JSONPath: $.data.data.user.result.timeline_v2.timeline.instructions.[1].entries.[-1].content.value ### Return: - User highlights tweets  # [示例/Example] userId = \"44196397\" count = 20 cursor = None
     * @summary 获取用户高光推文/Get user highlights tweets
     * @param {string} userId 用户ID/User ID
     * @param {number} [count] 数量/Count
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet_9(userId: string, count?: number, cursor?: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchUserHighlightsTweetsApiV1TwitterWebFetchUserHighlightsTweetsGet_9(userId, count, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户媒体 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 ### 返回: - 用户媒体  # [English] ### Purpose: - Get user media ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. ### Return: - User media  # [示例/Example] screen_name = \"elonmusk\"
     * @summary 获取用户媒体/Get user media
     * @param {string} screenName 用户名/Screen Name
     * @param {number} [restId] 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchUserMediaApiV1TwitterWebFetchUserMediaGet(screenName: string, restId?: number, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchUserMediaApiV1TwitterWebFetchUserMediaGet(screenName, restId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户媒体 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 ### 返回: - 用户媒体  # [English] ### Purpose: - Get user media ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. ### Return: - User media  # [示例/Example] screen_name = \"elonmusk\"
     * @summary 获取用户媒体/Get user media
     * @param {string} screenName 用户名/Screen Name
     * @param {number} [restId] 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchUserMediaApiV1TwitterWebFetchUserMediaGet_10(screenName: string, restId?: number, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchUserMediaApiV1TwitterWebFetchUserMediaGet_10(screenName, restId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户发帖 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的JSON中获取。 ### 返回: - 用户发帖  # [English] ### Purpose: - Get user post ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. - cursor: Cursor, default is None, used for paging, obtained from the JSON in the last request.  # [示例/Example] screen_name = \"elonmusk\" rest_id = 44196397 cursor = None
     * @summary 获取用户发帖/Get user post
     * @param {string} [screenName] 用户名/Screen Name
     * @param {number} [restId] 用户ID/User ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet(screenName?: string, restId?: number, cursor?: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet(screenName, restId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户发帖 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中的JSON中获取。 ### 返回: - 用户发帖  # [English] ### Purpose: - Get user post ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. - cursor: Cursor, default is None, used for paging, obtained from the JSON in the last request.  # [示例/Example] screen_name = \"elonmusk\" rest_id = 44196397 cursor = None
     * @summary 获取用户发帖/Get user post
     * @param {string} [screenName] 用户名/Screen Name
     * @param {number} [restId] 用户ID/User ID
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet_11(screenName?: string, restId?: number, cursor?: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchUserPostTweetApiV1TwitterWebFetchUserPostTweetGet_11(screenName, restId, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户资料 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 ### 返回: - 用户资料  # [English] ### Purpose: - Get user profile ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. ### Return: - User profile  # [示例/Example] screen_name = \"elonmusk\"
     * @summary 获取用户资料/Get user profile
     * @param {string} [screenName] 用户名/Screen Name
     * @param {number} [restId] 用户ID（如果使用用户ID则会忽略用户名）/User ID (If the user ID is used, the user name will be ignored)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchUserProfileApiV1TwitterWebFetchUserProfileGet(screenName?: string, restId?: number, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchUserProfileApiV1TwitterWebFetchUserProfileGet(screenName, restId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户资料 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - rest_id: 用户ID，例如：44196397，如果使用用户ID则会忽略用户名，两者只能选其一。 ### 返回: - 用户资料  # [English] ### Purpose: - Get user profile ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - rest_id: User ID, for example: 44196397, if the user ID is used, the username will be ignored, only one of them can be selected. ### Return: - User profile  # [示例/Example] screen_name = \"elonmusk\"
     * @summary 获取用户资料/Get user profile
     * @param {string} [screenName] 用户名/Screen Name
     * @param {number} [restId] 用户ID（如果使用用户ID则会忽略用户名）/User ID (If the user ID is used, the user name will be ignored)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchUserProfileApiV1TwitterWebFetchUserProfileGet_12(screenName?: string, restId?: number, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchUserProfileApiV1TwitterWebFetchUserProfileGet_12(screenName, restId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户推文回复 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户推文回复  # [English] ### Purpose: - Get user tweet replies ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User tweet replies  # [示例/Example] screen_name = \"elonmusk\" cursor = None
     * @summary 获取用户推文回复/Get user tweet replies
     * @param {string} screenName 用户名/Screen Name
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet(screenName: string, cursor?: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet(screenName, cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户推文回复 ### 参数: - screen_name: 用户名，例如：elonmusk，可以从用户主页链接中获取，例如：https://twitter.com/elonmusk 中的 elonmusk。 - cursor: 游标，默认为None，用于翻页，后续从上一次请求的返回结果中获取 ### 返回: - 用户推文回复  # [English] ### Purpose: - Get user tweet replies ### Parameters: - screen_name: Screen Name, for example: elonmusk, can be obtained from the user\'s homepage link, for example: elonmusk in https://twitter.com/elonmusk - cursor: Cursor, default is None, used for paging, obtained from the last request ### Return: - User tweet replies  # [示例/Example] screen_name = \"elonmusk\" cursor = None
     * @summary 获取用户推文回复/Get user tweet replies
     * @param {string} screenName 用户名/Screen Name
     * @param {string} [cursor] 游标/Cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterWebAPIApi
     */
    public fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet_13(screenName: string, cursor?: string, options?: any) {
        return TwitterWebAPIApiFp(this.configuration).fetchUserTweetRepliesApiV1TwitterWebFetchUserTweetRepliesGet_13(screenName, cursor, options).then((request) => request(this.axios, this.basePath));
    }

}
