// tslint:disable
/**
 * TikHub Private API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { GetHomeFeedRequest } from '../models';
// @ts-ignore
import { GetNoteInfoV5Request } from '../models';
// @ts-ignore
import { HttpValidationError } from '../models';
// @ts-ignore
import { ResponseModel } from '../models';
// @ts-ignore
import { XhsWebSignRequestModel } from '../models';
/**
 * XiaohongshuWebAPIApi - axios parameter creator
 * @export
 */
export const XiaohongshuWebAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取首页推荐 ### 参数: - feed_type: 推荐类型     - 全部: 0     - 穿搭: 1     - 美食: 2     - 彩妆: 3     - 影视: 4     - 职场: 5     - 情感: 6     - 家居: 7     - 游戏: 8     - 旅行: 9     - 健身: 10 - need_filter_image: 是否只看图文笔记，默认为 False - cookie: 可选参数，用户自行提供的已登录的网页Cookie获取个性化推荐，如果不提供，则使用游客模式 - proxy: 可选参数，网络代理，可降低封号概率，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port ### 返回: - 推荐列表  # [English] ### Purpose: - Get home recommend ### Parameters: - feed_type: Feed type     - Dress: 1     - Food: 2     - Makeup: 3     - Film: 4     - Workplace: 5     - Emotion: 6     - Home: 7     - Game: 8     - Travel: 9     - Fitness: 10 - need_filter_image: Whether to view only image notes, default is False - cookie: Optional parameter, user-provided logged-in web Cookie to get personalized recommendations, if not provided, use visitor mode - proxy: Optional parameter, network proxy, can reduce the probability of account ban, format: http://username:password@IP:port ### Return: - Recommend list  # [示例/Example] feed_type=\"0\" need_filter_image=False
         * @summary 获取首页推荐/Get home recommend
         * @param {GetHomeFeedRequest} [getHomeFeedRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost: async (getHomeFeedRequest?: GetHomeFeedRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/xiaohongshu/web/get_home_recommend`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof getHomeFeedRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(getHomeFeedRequest !== undefined ? getHomeFeedRequest : {}) : (getHomeFeedRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取首页推荐 ### 参数: - feed_type: 推荐类型     - 全部: 0     - 穿搭: 1     - 美食: 2     - 彩妆: 3     - 影视: 4     - 职场: 5     - 情感: 6     - 家居: 7     - 游戏: 8     - 旅行: 9     - 健身: 10 - need_filter_image: 是否只看图文笔记，默认为 False - cookie: 可选参数，用户自行提供的已登录的网页Cookie获取个性化推荐，如果不提供，则使用游客模式 - proxy: 可选参数，网络代理，可降低封号概率，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port ### 返回: - 推荐列表  # [English] ### Purpose: - Get home recommend ### Parameters: - feed_type: Feed type     - Dress: 1     - Food: 2     - Makeup: 3     - Film: 4     - Workplace: 5     - Emotion: 6     - Home: 7     - Game: 8     - Travel: 9     - Fitness: 10 - need_filter_image: Whether to view only image notes, default is False - cookie: Optional parameter, user-provided logged-in web Cookie to get personalized recommendations, if not provided, use visitor mode - proxy: Optional parameter, network proxy, can reduce the probability of account ban, format: http://username:password@IP:port ### Return: - Recommend list  # [示例/Example] feed_type=\"0\" need_filter_image=False
         * @summary 获取首页推荐/Get home recommend
         * @param {GetHomeFeedRequest} [getHomeFeedRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost_1: async (getHomeFeedRequest?: GetHomeFeedRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/xiaohongshu/web/get_home_recommend`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof getHomeFeedRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(getHomeFeedRequest !== undefined ? getHomeFeedRequest : {}) : (getHomeFeedRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论回复 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None
         * @summary 获取笔记评论回复 V1/Get note comment replies V1
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet: async (noteId: string, commentId: string, lastCursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/get_note_comment_replies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (noteId !== undefined) {
                localVarQueryParameter['note_id'] = noteId;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (lastCursor !== undefined) {
                localVarQueryParameter['lastCursor'] = lastCursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论回复 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None
         * @summary 获取笔记评论回复 V1/Get note comment replies V1
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_2: async (noteId: string, commentId: string, lastCursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_2.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_2.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/get_note_comment_replies`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (noteId !== undefined) {
                localVarQueryParameter['note_id'] = noteId;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (lastCursor !== undefined) {
                localVarQueryParameter['lastCursor'] = lastCursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论回复 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None
         * @summary 获取笔记评论回复 V2/Get note comment replies V2
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get: async (noteId: string, commentId: string, lastCursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/get_note_comment_replies_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (noteId !== undefined) {
                localVarQueryParameter['note_id'] = noteId;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (lastCursor !== undefined) {
                localVarQueryParameter['lastCursor'] = lastCursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论回复 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None
         * @summary 获取笔记评论回复 V2/Get note comment replies V2
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_3: async (noteId: string, commentId: string, lastCursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_3.');
            }
            // verify required parameter 'commentId' is not null or undefined
            if (commentId === null || commentId === undefined) {
                throw new RequiredError('commentId','Required parameter commentId was null or undefined when calling getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_3.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/get_note_comment_replies_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (noteId !== undefined) {
                localVarQueryParameter['note_id'] = noteId;
            }

            if (commentId !== undefined) {
                localVarQueryParameter['comment_id'] = commentId;
            }

            if (lastCursor !== undefined) {
                localVarQueryParameter['lastCursor'] = lastCursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None
         * @summary 获取笔记评论 V1/Get note comments V1
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet: async (noteId: string, lastCursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/get_note_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (noteId !== undefined) {
                localVarQueryParameter['note_id'] = noteId;
            }

            if (lastCursor !== undefined) {
                localVarQueryParameter['lastCursor'] = lastCursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None
         * @summary 获取笔记评论 V1/Get note comments V1
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet_4: async (noteId: string, lastCursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet_4.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/get_note_comments`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (noteId !== undefined) {
                localVarQueryParameter['note_id'] = noteId;
            }

            if (lastCursor !== undefined) {
                localVarQueryParameter['lastCursor'] = lastCursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None
         * @summary 获取笔记评论 V2/Get note comments V2
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get: async (noteId: string, lastCursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/get_note_comments_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (noteId !== undefined) {
                localVarQueryParameter['note_id'] = noteId;
            }

            if (lastCursor !== undefined) {
                localVarQueryParameter['lastCursor'] = lastCursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None
         * @summary 获取笔记评论 V2/Get note comments V2
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get_5: async (noteId: string, lastCursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'noteId' is not null or undefined
            if (noteId === null || noteId === undefined) {
                throw new RequiredError('noteId','Required parameter noteId was null or undefined when calling getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get_5.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/get_note_comments_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (noteId !== undefined) {
                localVarQueryParameter['note_id'] = noteId;
            }

            if (lastCursor !== undefined) {
                localVarQueryParameter['lastCursor'] = lastCursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取小红书的Note ID 和 xsec_token ### 参数: - share_text: 小红书分享链接（支持APP和Web端分享链接） ### 返回: - Note ID 和 xsec_token  # [English] ### Purpose: - Get Xiaohongshu Note ID and xsec_token by share link ### Parameters: - share_text: Xiaohongshu sharing link (support APP and Web sharing link) ### Return: - Note ID and xsec_token  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"
         * @summary 通过分享链接获取小红书的Note ID 和 xsec_token/Get Xiaohongshu Note ID and xsec_token by share link
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet: async (shareText: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareText' is not null or undefined
            if (shareText === null || shareText === undefined) {
                throw new RequiredError('shareText','Required parameter shareText was null or undefined when calling getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/get_note_id_and_xsec_token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareText !== undefined) {
                localVarQueryParameter['share_text'] = shareText;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取小红书的Note ID 和 xsec_token ### 参数: - share_text: 小红书分享链接（支持APP和Web端分享链接） ### 返回: - Note ID 和 xsec_token  # [English] ### Purpose: - Get Xiaohongshu Note ID and xsec_token by share link ### Parameters: - share_text: Xiaohongshu sharing link (support APP and Web sharing link) ### Return: - Note ID and xsec_token  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"
         * @summary 通过分享链接获取小红书的Note ID 和 xsec_token/Get Xiaohongshu Note ID and xsec_token by share link
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet_6: async (shareText: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareText' is not null or undefined
            if (shareText === null || shareText === undefined) {
                throw new RequiredError('shareText','Required parameter shareText was null or undefined when calling getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet_6.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/get_note_id_and_xsec_token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareText !== undefined) {
                localVarQueryParameter['share_text'] = shareText;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
         * @summary 获取笔记信息 V1/Get note info V1
         * @param {string} [noteId] 笔记ID/Note ID
         * @param {string} [shareText] 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet: async (noteId?: string, shareText?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/xiaohongshu/web/get_note_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (noteId !== undefined) {
                localVarQueryParameter['note_id'] = noteId;
            }

            if (shareText !== undefined) {
                localVarQueryParameter['share_text'] = shareText;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
         * @summary 获取笔记信息 V1/Get note info V1
         * @param {string} [noteId] 笔记ID/Note ID
         * @param {string} [shareText] 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet_7: async (noteId?: string, shareText?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/xiaohongshu/web/get_note_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (noteId !== undefined) {
                localVarQueryParameter['note_id'] = noteId;
            }

            if (shareText !== undefined) {
                localVarQueryParameter['share_text'] = shareText;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
         * @summary 获取笔记信息 V2/Get note info V2
         * @param {string} [noteId] 笔记ID/Note ID
         * @param {string} [shareText] 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get: async (noteId?: string, shareText?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/xiaohongshu/web/get_note_info_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (noteId !== undefined) {
                localVarQueryParameter['note_id'] = noteId;
            }

            if (shareText !== undefined) {
                localVarQueryParameter['share_text'] = shareText;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
         * @summary 获取笔记信息 V2/Get note info V2
         * @param {string} [noteId] 笔记ID/Note ID
         * @param {string} [shareText] 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get_8: async (noteId?: string, shareText?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/xiaohongshu/web/get_note_info_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (noteId !== undefined) {
                localVarQueryParameter['note_id'] = noteId;
            }

            if (shareText !== undefined) {
                localVarQueryParameter['share_text'] = shareText;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息V3，仅支持完整的小红书分享链接 ### 参数: - share_text: 完整的小红书分享链接（支持APP和Web端分享链接） ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V3, only support complete Xiaohongshu sharing link ### Parameters: - share_text: Complete Xiaohongshu sharing link(support APP and Web sharing link) ### Return: - Note info  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"
         * @summary 获取笔记信息 V3 (游客)/Get note info V3 (Visitor)
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get: async (shareText: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareText' is not null or undefined
            if (shareText === null || shareText === undefined) {
                throw new RequiredError('shareText','Required parameter shareText was null or undefined when calling getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/get_note_info_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareText !== undefined) {
                localVarQueryParameter['share_text'] = shareText;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息V3，仅支持完整的小红书分享链接 ### 参数: - share_text: 完整的小红书分享链接（支持APP和Web端分享链接） ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V3, only support complete Xiaohongshu sharing link ### Parameters: - share_text: Complete Xiaohongshu sharing link(support APP and Web sharing link) ### Return: - Note info  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"
         * @summary 获取笔记信息 V3 (游客)/Get note info V3 (Visitor)
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get_9: async (shareText: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shareText' is not null or undefined
            if (shareText === null || shareText === undefined) {
                throw new RequiredError('shareText','Required parameter shareText was null or undefined when calling getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get_9.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/get_note_info_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (shareText !== undefined) {
                localVarQueryParameter['share_text'] = shareText;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息V4 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V4 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
         * @summary 获取笔记信息 V4/Get note info V4
         * @param {string} [noteId] 笔记ID/Note ID
         * @param {string} [shareText] 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get: async (noteId?: string, shareText?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/xiaohongshu/web/get_note_info_v4`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (noteId !== undefined) {
                localVarQueryParameter['note_id'] = noteId;
            }

            if (shareText !== undefined) {
                localVarQueryParameter['share_text'] = shareText;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息V4 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V4 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
         * @summary 获取笔记信息 V4/Get note info V4
         * @param {string} [noteId] 笔记ID/Note ID
         * @param {string} [shareText] 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get_10: async (noteId?: string, shareText?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/xiaohongshu/web/get_note_info_v4`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (noteId !== undefined) {
                localVarQueryParameter['note_id'] = noteId;
            }

            if (shareText !== undefined) {
                localVarQueryParameter['share_text'] = shareText;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息V5，用户自行提供Cookie来获取笔记信息 - 此接口收费0.001$ ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - xsec_token: X-Sec-Token，可以从搜索接口中获取，分享链接中也有/X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: 用户自行提供的已登录的网页Cookie - proxy: 代理，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port - 最好使用代理，避免被封号或其他未知问题。  ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V5, user provides Cookie to get note info - This interface charges 0.001$ ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - xsec_token: X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: User provided logged-in web Cookie - proxy: Proxy, format: http://username:password@IP:port - It is recommended to use a proxy to avoid being banned or other unknown issues. ### Return: - Note info  # [示例/Example] note_id = \"67855d09000000001703d449\" xsec_token = \"ABfpRSESmZDRbX-EX7lzEztktMngxPVC9kU-dgQmuQoNo=\" cookie = \"Your Cookie\" proxy = \"http://username:password@IP:port\"
         * @summary 获取笔记信息 V5 (自带Cookie)/Get note info V5 (Self-provided Cookie)
         * @param {GetNoteInfoV5Request} [getNoteInfoV5Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post: async (getNoteInfoV5Request?: GetNoteInfoV5Request, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/xiaohongshu/web/get_note_info_v5`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof getNoteInfoV5Request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(getNoteInfoV5Request !== undefined ? getNoteInfoV5Request : {}) : (getNoteInfoV5Request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息V5，用户自行提供Cookie来获取笔记信息 - 此接口收费0.001$ ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - xsec_token: X-Sec-Token，可以从搜索接口中获取，分享链接中也有/X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: 用户自行提供的已登录的网页Cookie - proxy: 代理，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port - 最好使用代理，避免被封号或其他未知问题。  ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V5, user provides Cookie to get note info - This interface charges 0.001$ ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - xsec_token: X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: User provided logged-in web Cookie - proxy: Proxy, format: http://username:password@IP:port - It is recommended to use a proxy to avoid being banned or other unknown issues. ### Return: - Note info  # [示例/Example] note_id = \"67855d09000000001703d449\" xsec_token = \"ABfpRSESmZDRbX-EX7lzEztktMngxPVC9kU-dgQmuQoNo=\" cookie = \"Your Cookie\" proxy = \"http://username:password@IP:port\"
         * @summary 获取笔记信息 V5 (自带Cookie)/Get note info V5 (Self-provided Cookie)
         * @param {GetNoteInfoV5Request} [getNoteInfoV5Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post_11: async (getNoteInfoV5Request?: GetNoteInfoV5Request, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/xiaohongshu/web/get_note_info_v5`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof getNoteInfoV5Request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(getNoteInfoV5Request !== undefined ? getNoteInfoV5Request : {}) : (getNoteInfoV5Request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
         * @summary 获取用户信息 V1/Get user info V1
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoApiV1XiaohongshuWebGetUserInfoGet: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserInfoApiV1XiaohongshuWebGetUserInfoGet.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/get_user_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
         * @summary 获取用户信息 V1/Get user info V1
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoApiV1XiaohongshuWebGetUserInfoGet_12: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserInfoApiV1XiaohongshuWebGetUserInfoGet_12.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/get_user_info`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 V2 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V2 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
         * @summary 获取用户信息 V2/Get user info V2
         * @param {string} [userId] 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get: async (userId?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/xiaohongshu/web/get_user_info_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 V2 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V2 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
         * @summary 获取用户信息 V2/Get user info V2
         * @param {string} [userId] 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get_13: async (userId?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/xiaohongshu/web/get_user_info_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 V3 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V3 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
         * @summary 获取用户信息 V3/Get user info V3
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/get_user_info_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 V3 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V3 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
         * @summary 获取用户信息 V3/Get user info V3
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get_14: async (userId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get_14.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/get_user_info_v3`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的笔记 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None
         * @summary 获取用户的笔记 V1/Get user notes V1
         * @param {string} userId 用户ID/User ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNotesApiV1XiaohongshuWebGetUserNotesGet: async (userId: string, lastCursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserNotesApiV1XiaohongshuWebGetUserNotesGet.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/get_user_notes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (lastCursor !== undefined) {
                localVarQueryParameter['lastCursor'] = lastCursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的笔记 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None
         * @summary 获取用户的笔记 V1/Get user notes V1
         * @param {string} userId 用户ID/User ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNotesApiV1XiaohongshuWebGetUserNotesGet_15: async (userId: string, lastCursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserNotesApiV1XiaohongshuWebGetUserNotesGet_15.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/get_user_notes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (lastCursor !== undefined) {
                localVarQueryParameter['lastCursor'] = lastCursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的笔记 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None
         * @summary 获取用户的笔记 V2/Get user notes V2
         * @param {string} userId 用户ID/User ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get: async (userId: string, lastCursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/get_user_notes_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (lastCursor !== undefined) {
                localVarQueryParameter['lastCursor'] = lastCursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的笔记 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None
         * @summary 获取用户的笔记 V2/Get user notes V2
         * @param {string} userId 用户ID/User ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get_16: async (userId: string, lastCursor?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get_16.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/get_user_notes_v2`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (lastCursor !== undefined) {
                localVarQueryParameter['lastCursor'] = lastCursor;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取小红书网页版的游客Cookie，可以用于爬取小红书的一些数据。 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get Xiaohongshu web visitor cookie, which can be used to crawl some data of Xiaohongshu. ### Return: - Visitor cookie
         * @summary 获取游客Cookie/Get visitor cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/xiaohongshu/web/get_visitor_cookie`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 获取小红书网页版的游客Cookie，可以用于爬取小红书的一些数据。 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get Xiaohongshu web visitor cookie, which can be used to crawl some data of Xiaohongshu. ### Return: - Visitor cookie
         * @summary 获取游客Cookie/Get visitor cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet_17: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/xiaohongshu/web/get_visitor_cookie`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索笔记 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 - sort: 排序方式     - 综合排序（默认参数）: general     - 最热排序: popularity_descending     - 最新排序: time_descending - noteType: 笔记类型     - 综合笔记（默认参数）: _0     - 视频笔记: _1     - 图文笔记: _2 ### 返回: - 笔记列表  # [English] ### Purpose: - Search notes ### Parameters: - keyword: Keyword - page: Page, default is 1 - sort: Sort     - General sort (default): general     - Popularity sort: popularity_descending     - Latest sort: time_descending - noteType: Note type     - General note (default): _0     - Video note: _1     - Image note: _2 ### Return: - Note list  # [示例/Example] keyword=\"美食\" page=1 sort=\"general\" noteType=\"_0\"
         * @summary 搜索笔记/Search notes
         * @param {string} keyword 搜索关键词/Keyword
         * @param {number} [page] 页码/Page
         * @param {string} [sort] 排序方式/Sort
         * @param {string} [noteType] 笔记类型/Note type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchNotesApiV1XiaohongshuWebSearchNotesGet: async (keyword: string, page?: number, sort?: string, noteType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling searchNotesApiV1XiaohongshuWebSearchNotesGet.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/search_notes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (noteType !== undefined) {
                localVarQueryParameter['noteType'] = noteType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索笔记 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 - sort: 排序方式     - 综合排序（默认参数）: general     - 最热排序: popularity_descending     - 最新排序: time_descending - noteType: 笔记类型     - 综合笔记（默认参数）: _0     - 视频笔记: _1     - 图文笔记: _2 ### 返回: - 笔记列表  # [English] ### Purpose: - Search notes ### Parameters: - keyword: Keyword - page: Page, default is 1 - sort: Sort     - General sort (default): general     - Popularity sort: popularity_descending     - Latest sort: time_descending - noteType: Note type     - General note (default): _0     - Video note: _1     - Image note: _2 ### Return: - Note list  # [示例/Example] keyword=\"美食\" page=1 sort=\"general\" noteType=\"_0\"
         * @summary 搜索笔记/Search notes
         * @param {string} keyword 搜索关键词/Keyword
         * @param {number} [page] 页码/Page
         * @param {string} [sort] 排序方式/Sort
         * @param {string} [noteType] 笔记类型/Note type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchNotesApiV1XiaohongshuWebSearchNotesGet_18: async (keyword: string, page?: number, sort?: string, noteType?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling searchNotesApiV1XiaohongshuWebSearchNotesGet_18.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/search_notes`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (noteType !== undefined) {
                localVarQueryParameter['noteType'] = noteType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 ### 返回: - 用户列表  # [English] ### Purpose: - Search users ### Parameters: - keyword: Keyword - page: Page, default is 1 ### Return: - User list  # [示例/Example] keyword=\"美食\" page=1
         * @summary 搜索用户/Search users
         * @param {string} keyword 搜索关键词/Keyword
         * @param {number} [page] 页码/Page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUsersApiV1XiaohongshuWebSearchUsersGet: async (keyword: string, page?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling searchUsersApiV1XiaohongshuWebSearchUsersGet.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/search_users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 ### 返回: - 用户列表  # [English] ### Purpose: - Search users ### Parameters: - keyword: Keyword - page: Page, default is 1 ### Return: - User list  # [示例/Example] keyword=\"美食\" page=1
         * @summary 搜索用户/Search users
         * @param {string} keyword 搜索关键词/Keyword
         * @param {number} [page] 页码/Page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUsersApiV1XiaohongshuWebSearchUsersGet_19: async (keyword: string, page?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword','Required parameter keyword was null or undefined when calling searchUsersApiV1XiaohongshuWebSearchUsersGet_19.');
            }
            const localVarPath = `/api/v1/xiaohongshu/web/search_users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 小红书Web签名，用于获取小红书的一些数据。 - 生成 `X-s`, `X-t`, `X-s-common` 等签名参数。 - 价格：0.001$/次 ### 参数: - sign_request: 签名请求模型     - path: 请求接口的路径，例如: `/api/sns/web/v1/homefeed`     - data: 请求API的荷载数据     - cookie: 请求接口的Cookie ### 返回: - 签名参数(X-s, X-t, X-s-common等)  # [English] ### Purpose: - Xiaohongshu Web sign, used to get some data of Xiaohongshu. - Generate `X-s`, `X-t`, `X-s-common` and other signature parameters. - Price: 0.001$/time ### Parameters: - sign_request: Sign request model     - path: Request API path, e.g. `/api/sns/web/v1/homefeed`     - data: Payload data of request API     - cookie: Request API cookie ### Return: - Signature parameters(X-s, X-t, X-s-common, etc.)  # [示例/Example] {     \"path\": \"/api/sns/web/v1/homefeed\",     \"data\": {         \"cursor_score\": \"\",         \"num\": 35,         \"refresh_type\": 1,         \"note_index\": 35,         \"unread_begin_note_id\": \"\",         \"unread_end_note_id\": \"\",         \"unread_note_count\": 0,         \"category\": \"homefeed_recommend\",         \"search_key\": \"\",         \"need_num\": 10,         \"image_formats\": [             \"jpg\",             \"webp\",             \"avif\"         ],         \"need_filter_image\": False     },     \"cookie\": \"web_session=030037a04eafd37791e6e4bd05204a8cf2af05;acw_tc=0a00d79f17363096679345838efb77751cc087fb039dd1691dc954824410f6;abRequestId=384480ae-5196-5818-a835-42e6278de9f0;webBuild=4.47.1;xsecappid=xhs-pc-web;a1=194441ef694PayUbdUvgp0dSHfIcACsNsLud0Lgru50000354513;webId=6cf10a564b9b07d129729b65e0d1785a;sec_poison_id=32964532-d414-4beb-914f-98811853b75f\" }
         * @summary 小红书Web签名/Xiaohongshu Web sign
         * @param {XhsWebSignRequestModel} [xhsWebSignRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signApiV1XiaohongshuWebSignPost: async (xhsWebSignRequestModel?: XhsWebSignRequestModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/xiaohongshu/web/sign`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof xhsWebSignRequestModel !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(xhsWebSignRequestModel !== undefined ? xhsWebSignRequestModel : {}) : (xhsWebSignRequestModel || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * # [中文] ### 用途: - 小红书Web签名，用于获取小红书的一些数据。 - 生成 `X-s`, `X-t`, `X-s-common` 等签名参数。 - 价格：0.001$/次 ### 参数: - sign_request: 签名请求模型     - path: 请求接口的路径，例如: `/api/sns/web/v1/homefeed`     - data: 请求API的荷载数据     - cookie: 请求接口的Cookie ### 返回: - 签名参数(X-s, X-t, X-s-common等)  # [English] ### Purpose: - Xiaohongshu Web sign, used to get some data of Xiaohongshu. - Generate `X-s`, `X-t`, `X-s-common` and other signature parameters. - Price: 0.001$/time ### Parameters: - sign_request: Sign request model     - path: Request API path, e.g. `/api/sns/web/v1/homefeed`     - data: Payload data of request API     - cookie: Request API cookie ### Return: - Signature parameters(X-s, X-t, X-s-common, etc.)  # [示例/Example] {     \"path\": \"/api/sns/web/v1/homefeed\",     \"data\": {         \"cursor_score\": \"\",         \"num\": 35,         \"refresh_type\": 1,         \"note_index\": 35,         \"unread_begin_note_id\": \"\",         \"unread_end_note_id\": \"\",         \"unread_note_count\": 0,         \"category\": \"homefeed_recommend\",         \"search_key\": \"\",         \"need_num\": 10,         \"image_formats\": [             \"jpg\",             \"webp\",             \"avif\"         ],         \"need_filter_image\": False     },     \"cookie\": \"web_session=030037a04eafd37791e6e4bd05204a8cf2af05;acw_tc=0a00d79f17363096679345838efb77751cc087fb039dd1691dc954824410f6;abRequestId=384480ae-5196-5818-a835-42e6278de9f0;webBuild=4.47.1;xsecappid=xhs-pc-web;a1=194441ef694PayUbdUvgp0dSHfIcACsNsLud0Lgru50000354513;webId=6cf10a564b9b07d129729b65e0d1785a;sec_poison_id=32964532-d414-4beb-914f-98811853b75f\" }
         * @summary 小红书Web签名/Xiaohongshu Web sign
         * @param {XhsWebSignRequestModel} [xhsWebSignRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signApiV1XiaohongshuWebSignPost_20: async (xhsWebSignRequestModel?: XhsWebSignRequestModel, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/xiaohongshu/web/sign`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof xhsWebSignRequestModel !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(xhsWebSignRequestModel !== undefined ? xhsWebSignRequestModel : {}) : (xhsWebSignRequestModel || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * XiaohongshuWebAPIApi - functional programming interface
 * @export
 */
export const XiaohongshuWebAPIApiFp = function(configuration?: Configuration) {
    return {
        /**
         * # [中文] ### 用途: - 获取首页推荐 ### 参数: - feed_type: 推荐类型     - 全部: 0     - 穿搭: 1     - 美食: 2     - 彩妆: 3     - 影视: 4     - 职场: 5     - 情感: 6     - 家居: 7     - 游戏: 8     - 旅行: 9     - 健身: 10 - need_filter_image: 是否只看图文笔记，默认为 False - cookie: 可选参数，用户自行提供的已登录的网页Cookie获取个性化推荐，如果不提供，则使用游客模式 - proxy: 可选参数，网络代理，可降低封号概率，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port ### 返回: - 推荐列表  # [English] ### Purpose: - Get home recommend ### Parameters: - feed_type: Feed type     - Dress: 1     - Food: 2     - Makeup: 3     - Film: 4     - Workplace: 5     - Emotion: 6     - Home: 7     - Game: 8     - Travel: 9     - Fitness: 10 - need_filter_image: Whether to view only image notes, default is False - cookie: Optional parameter, user-provided logged-in web Cookie to get personalized recommendations, if not provided, use visitor mode - proxy: Optional parameter, network proxy, can reduce the probability of account ban, format: http://username:password@IP:port ### Return: - Recommend list  # [示例/Example] feed_type=\"0\" need_filter_image=False
         * @summary 获取首页推荐/Get home recommend
         * @param {GetHomeFeedRequest} [getHomeFeedRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost(getHomeFeedRequest?: GetHomeFeedRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost(getHomeFeedRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取首页推荐 ### 参数: - feed_type: 推荐类型     - 全部: 0     - 穿搭: 1     - 美食: 2     - 彩妆: 3     - 影视: 4     - 职场: 5     - 情感: 6     - 家居: 7     - 游戏: 8     - 旅行: 9     - 健身: 10 - need_filter_image: 是否只看图文笔记，默认为 False - cookie: 可选参数，用户自行提供的已登录的网页Cookie获取个性化推荐，如果不提供，则使用游客模式 - proxy: 可选参数，网络代理，可降低封号概率，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port ### 返回: - 推荐列表  # [English] ### Purpose: - Get home recommend ### Parameters: - feed_type: Feed type     - Dress: 1     - Food: 2     - Makeup: 3     - Film: 4     - Workplace: 5     - Emotion: 6     - Home: 7     - Game: 8     - Travel: 9     - Fitness: 10 - need_filter_image: Whether to view only image notes, default is False - cookie: Optional parameter, user-provided logged-in web Cookie to get personalized recommendations, if not provided, use visitor mode - proxy: Optional parameter, network proxy, can reduce the probability of account ban, format: http://username:password@IP:port ### Return: - Recommend list  # [示例/Example] feed_type=\"0\" need_filter_image=False
         * @summary 获取首页推荐/Get home recommend
         * @param {GetHomeFeedRequest} [getHomeFeedRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost_1(getHomeFeedRequest?: GetHomeFeedRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost_1(getHomeFeedRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论回复 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None
         * @summary 获取笔记评论回复 V1/Get note comment replies V1
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet(noteId: string, commentId: string, lastCursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet(noteId, commentId, lastCursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论回复 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None
         * @summary 获取笔记评论回复 V1/Get note comment replies V1
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_2(noteId: string, commentId: string, lastCursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_2(noteId, commentId, lastCursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论回复 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None
         * @summary 获取笔记评论回复 V2/Get note comment replies V2
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get(noteId: string, commentId: string, lastCursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get(noteId, commentId, lastCursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论回复 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None
         * @summary 获取笔记评论回复 V2/Get note comment replies V2
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_3(noteId: string, commentId: string, lastCursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_3(noteId, commentId, lastCursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None
         * @summary 获取笔记评论 V1/Get note comments V1
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet(noteId: string, lastCursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet(noteId, lastCursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None
         * @summary 获取笔记评论 V1/Get note comments V1
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet_4(noteId: string, lastCursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet_4(noteId, lastCursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None
         * @summary 获取笔记评论 V2/Get note comments V2
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get(noteId: string, lastCursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get(noteId, lastCursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None
         * @summary 获取笔记评论 V2/Get note comments V2
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get_5(noteId: string, lastCursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get_5(noteId, lastCursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取小红书的Note ID 和 xsec_token ### 参数: - share_text: 小红书分享链接（支持APP和Web端分享链接） ### 返回: - Note ID 和 xsec_token  # [English] ### Purpose: - Get Xiaohongshu Note ID and xsec_token by share link ### Parameters: - share_text: Xiaohongshu sharing link (support APP and Web sharing link) ### Return: - Note ID and xsec_token  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"
         * @summary 通过分享链接获取小红书的Note ID 和 xsec_token/Get Xiaohongshu Note ID and xsec_token by share link
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet(shareText: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet(shareText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取小红书的Note ID 和 xsec_token ### 参数: - share_text: 小红书分享链接（支持APP和Web端分享链接） ### 返回: - Note ID 和 xsec_token  # [English] ### Purpose: - Get Xiaohongshu Note ID and xsec_token by share link ### Parameters: - share_text: Xiaohongshu sharing link (support APP and Web sharing link) ### Return: - Note ID and xsec_token  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"
         * @summary 通过分享链接获取小红书的Note ID 和 xsec_token/Get Xiaohongshu Note ID and xsec_token by share link
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet_6(shareText: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet_6(shareText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
         * @summary 获取笔记信息 V1/Get note info V1
         * @param {string} [noteId] 笔记ID/Note ID
         * @param {string} [shareText] 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet(noteId?: string, shareText?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet(noteId, shareText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
         * @summary 获取笔记信息 V1/Get note info V1
         * @param {string} [noteId] 笔记ID/Note ID
         * @param {string} [shareText] 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet_7(noteId?: string, shareText?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet_7(noteId, shareText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
         * @summary 获取笔记信息 V2/Get note info V2
         * @param {string} [noteId] 笔记ID/Note ID
         * @param {string} [shareText] 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get(noteId?: string, shareText?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get(noteId, shareText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
         * @summary 获取笔记信息 V2/Get note info V2
         * @param {string} [noteId] 笔记ID/Note ID
         * @param {string} [shareText] 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get_8(noteId?: string, shareText?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get_8(noteId, shareText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息V3，仅支持完整的小红书分享链接 ### 参数: - share_text: 完整的小红书分享链接（支持APP和Web端分享链接） ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V3, only support complete Xiaohongshu sharing link ### Parameters: - share_text: Complete Xiaohongshu sharing link(support APP and Web sharing link) ### Return: - Note info  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"
         * @summary 获取笔记信息 V3 (游客)/Get note info V3 (Visitor)
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get(shareText: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get(shareText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息V3，仅支持完整的小红书分享链接 ### 参数: - share_text: 完整的小红书分享链接（支持APP和Web端分享链接） ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V3, only support complete Xiaohongshu sharing link ### Parameters: - share_text: Complete Xiaohongshu sharing link(support APP and Web sharing link) ### Return: - Note info  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"
         * @summary 获取笔记信息 V3 (游客)/Get note info V3 (Visitor)
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get_9(shareText: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get_9(shareText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息V4 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V4 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
         * @summary 获取笔记信息 V4/Get note info V4
         * @param {string} [noteId] 笔记ID/Note ID
         * @param {string} [shareText] 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get(noteId?: string, shareText?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get(noteId, shareText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息V4 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V4 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
         * @summary 获取笔记信息 V4/Get note info V4
         * @param {string} [noteId] 笔记ID/Note ID
         * @param {string} [shareText] 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get_10(noteId?: string, shareText?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get_10(noteId, shareText, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息V5，用户自行提供Cookie来获取笔记信息 - 此接口收费0.001$ ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - xsec_token: X-Sec-Token，可以从搜索接口中获取，分享链接中也有/X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: 用户自行提供的已登录的网页Cookie - proxy: 代理，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port - 最好使用代理，避免被封号或其他未知问题。  ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V5, user provides Cookie to get note info - This interface charges 0.001$ ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - xsec_token: X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: User provided logged-in web Cookie - proxy: Proxy, format: http://username:password@IP:port - It is recommended to use a proxy to avoid being banned or other unknown issues. ### Return: - Note info  # [示例/Example] note_id = \"67855d09000000001703d449\" xsec_token = \"ABfpRSESmZDRbX-EX7lzEztktMngxPVC9kU-dgQmuQoNo=\" cookie = \"Your Cookie\" proxy = \"http://username:password@IP:port\"
         * @summary 获取笔记信息 V5 (自带Cookie)/Get note info V5 (Self-provided Cookie)
         * @param {GetNoteInfoV5Request} [getNoteInfoV5Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post(getNoteInfoV5Request?: GetNoteInfoV5Request, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post(getNoteInfoV5Request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息V5，用户自行提供Cookie来获取笔记信息 - 此接口收费0.001$ ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - xsec_token: X-Sec-Token，可以从搜索接口中获取，分享链接中也有/X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: 用户自行提供的已登录的网页Cookie - proxy: 代理，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port - 最好使用代理，避免被封号或其他未知问题。  ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V5, user provides Cookie to get note info - This interface charges 0.001$ ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - xsec_token: X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: User provided logged-in web Cookie - proxy: Proxy, format: http://username:password@IP:port - It is recommended to use a proxy to avoid being banned or other unknown issues. ### Return: - Note info  # [示例/Example] note_id = \"67855d09000000001703d449\" xsec_token = \"ABfpRSESmZDRbX-EX7lzEztktMngxPVC9kU-dgQmuQoNo=\" cookie = \"Your Cookie\" proxy = \"http://username:password@IP:port\"
         * @summary 获取笔记信息 V5 (自带Cookie)/Get note info V5 (Self-provided Cookie)
         * @param {GetNoteInfoV5Request} [getNoteInfoV5Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post_11(getNoteInfoV5Request?: GetNoteInfoV5Request, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post_11(getNoteInfoV5Request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
         * @summary 获取用户信息 V1/Get user info V1
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfoApiV1XiaohongshuWebGetUserInfoGet(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getUserInfoApiV1XiaohongshuWebGetUserInfoGet(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
         * @summary 获取用户信息 V1/Get user info V1
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfoApiV1XiaohongshuWebGetUserInfoGet_12(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getUserInfoApiV1XiaohongshuWebGetUserInfoGet_12(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 V2 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V2 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
         * @summary 获取用户信息 V2/Get user info V2
         * @param {string} [userId] 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get(userId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 V2 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V2 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
         * @summary 获取用户信息 V2/Get user info V2
         * @param {string} [userId] 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get_13(userId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get_13(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 V3 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V3 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
         * @summary 获取用户信息 V3/Get user info V3
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 V3 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V3 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
         * @summary 获取用户信息 V3/Get user info V3
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get_14(userId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get_14(userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的笔记 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None
         * @summary 获取用户的笔记 V1/Get user notes V1
         * @param {string} userId 用户ID/User ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserNotesApiV1XiaohongshuWebGetUserNotesGet(userId: string, lastCursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getUserNotesApiV1XiaohongshuWebGetUserNotesGet(userId, lastCursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的笔记 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None
         * @summary 获取用户的笔记 V1/Get user notes V1
         * @param {string} userId 用户ID/User ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserNotesApiV1XiaohongshuWebGetUserNotesGet_15(userId: string, lastCursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getUserNotesApiV1XiaohongshuWebGetUserNotesGet_15(userId, lastCursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的笔记 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None
         * @summary 获取用户的笔记 V2/Get user notes V2
         * @param {string} userId 用户ID/User ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get(userId: string, lastCursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get(userId, lastCursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取用户的笔记 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None
         * @summary 获取用户的笔记 V2/Get user notes V2
         * @param {string} userId 用户ID/User ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get_16(userId: string, lastCursor?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get_16(userId, lastCursor, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取小红书网页版的游客Cookie，可以用于爬取小红书的一些数据。 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get Xiaohongshu web visitor cookie, which can be used to crawl some data of Xiaohongshu. ### Return: - Visitor cookie
         * @summary 获取游客Cookie/Get visitor cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 获取小红书网页版的游客Cookie，可以用于爬取小红书的一些数据。 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get Xiaohongshu web visitor cookie, which can be used to crawl some data of Xiaohongshu. ### Return: - Visitor cookie
         * @summary 获取游客Cookie/Get visitor cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet_17(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).getVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet_17(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索笔记 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 - sort: 排序方式     - 综合排序（默认参数）: general     - 最热排序: popularity_descending     - 最新排序: time_descending - noteType: 笔记类型     - 综合笔记（默认参数）: _0     - 视频笔记: _1     - 图文笔记: _2 ### 返回: - 笔记列表  # [English] ### Purpose: - Search notes ### Parameters: - keyword: Keyword - page: Page, default is 1 - sort: Sort     - General sort (default): general     - Popularity sort: popularity_descending     - Latest sort: time_descending - noteType: Note type     - General note (default): _0     - Video note: _1     - Image note: _2 ### Return: - Note list  # [示例/Example] keyword=\"美食\" page=1 sort=\"general\" noteType=\"_0\"
         * @summary 搜索笔记/Search notes
         * @param {string} keyword 搜索关键词/Keyword
         * @param {number} [page] 页码/Page
         * @param {string} [sort] 排序方式/Sort
         * @param {string} [noteType] 笔记类型/Note type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchNotesApiV1XiaohongshuWebSearchNotesGet(keyword: string, page?: number, sort?: string, noteType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).searchNotesApiV1XiaohongshuWebSearchNotesGet(keyword, page, sort, noteType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索笔记 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 - sort: 排序方式     - 综合排序（默认参数）: general     - 最热排序: popularity_descending     - 最新排序: time_descending - noteType: 笔记类型     - 综合笔记（默认参数）: _0     - 视频笔记: _1     - 图文笔记: _2 ### 返回: - 笔记列表  # [English] ### Purpose: - Search notes ### Parameters: - keyword: Keyword - page: Page, default is 1 - sort: Sort     - General sort (default): general     - Popularity sort: popularity_descending     - Latest sort: time_descending - noteType: Note type     - General note (default): _0     - Video note: _1     - Image note: _2 ### Return: - Note list  # [示例/Example] keyword=\"美食\" page=1 sort=\"general\" noteType=\"_0\"
         * @summary 搜索笔记/Search notes
         * @param {string} keyword 搜索关键词/Keyword
         * @param {number} [page] 页码/Page
         * @param {string} [sort] 排序方式/Sort
         * @param {string} [noteType] 笔记类型/Note type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchNotesApiV1XiaohongshuWebSearchNotesGet_18(keyword: string, page?: number, sort?: string, noteType?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).searchNotesApiV1XiaohongshuWebSearchNotesGet_18(keyword, page, sort, noteType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 ### 返回: - 用户列表  # [English] ### Purpose: - Search users ### Parameters: - keyword: Keyword - page: Page, default is 1 ### Return: - User list  # [示例/Example] keyword=\"美食\" page=1
         * @summary 搜索用户/Search users
         * @param {string} keyword 搜索关键词/Keyword
         * @param {number} [page] 页码/Page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchUsersApiV1XiaohongshuWebSearchUsersGet(keyword: string, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).searchUsersApiV1XiaohongshuWebSearchUsersGet(keyword, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 ### 返回: - 用户列表  # [English] ### Purpose: - Search users ### Parameters: - keyword: Keyword - page: Page, default is 1 ### Return: - User list  # [示例/Example] keyword=\"美食\" page=1
         * @summary 搜索用户/Search users
         * @param {string} keyword 搜索关键词/Keyword
         * @param {number} [page] 页码/Page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchUsersApiV1XiaohongshuWebSearchUsersGet_19(keyword: string, page?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).searchUsersApiV1XiaohongshuWebSearchUsersGet_19(keyword, page, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 小红书Web签名，用于获取小红书的一些数据。 - 生成 `X-s`, `X-t`, `X-s-common` 等签名参数。 - 价格：0.001$/次 ### 参数: - sign_request: 签名请求模型     - path: 请求接口的路径，例如: `/api/sns/web/v1/homefeed`     - data: 请求API的荷载数据     - cookie: 请求接口的Cookie ### 返回: - 签名参数(X-s, X-t, X-s-common等)  # [English] ### Purpose: - Xiaohongshu Web sign, used to get some data of Xiaohongshu. - Generate `X-s`, `X-t`, `X-s-common` and other signature parameters. - Price: 0.001$/time ### Parameters: - sign_request: Sign request model     - path: Request API path, e.g. `/api/sns/web/v1/homefeed`     - data: Payload data of request API     - cookie: Request API cookie ### Return: - Signature parameters(X-s, X-t, X-s-common, etc.)  # [示例/Example] {     \"path\": \"/api/sns/web/v1/homefeed\",     \"data\": {         \"cursor_score\": \"\",         \"num\": 35,         \"refresh_type\": 1,         \"note_index\": 35,         \"unread_begin_note_id\": \"\",         \"unread_end_note_id\": \"\",         \"unread_note_count\": 0,         \"category\": \"homefeed_recommend\",         \"search_key\": \"\",         \"need_num\": 10,         \"image_formats\": [             \"jpg\",             \"webp\",             \"avif\"         ],         \"need_filter_image\": False     },     \"cookie\": \"web_session=030037a04eafd37791e6e4bd05204a8cf2af05;acw_tc=0a00d79f17363096679345838efb77751cc087fb039dd1691dc954824410f6;abRequestId=384480ae-5196-5818-a835-42e6278de9f0;webBuild=4.47.1;xsecappid=xhs-pc-web;a1=194441ef694PayUbdUvgp0dSHfIcACsNsLud0Lgru50000354513;webId=6cf10a564b9b07d129729b65e0d1785a;sec_poison_id=32964532-d414-4beb-914f-98811853b75f\" }
         * @summary 小红书Web签名/Xiaohongshu Web sign
         * @param {XhsWebSignRequestModel} [xhsWebSignRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signApiV1XiaohongshuWebSignPost(xhsWebSignRequestModel?: XhsWebSignRequestModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).signApiV1XiaohongshuWebSignPost(xhsWebSignRequestModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * # [中文] ### 用途: - 小红书Web签名，用于获取小红书的一些数据。 - 生成 `X-s`, `X-t`, `X-s-common` 等签名参数。 - 价格：0.001$/次 ### 参数: - sign_request: 签名请求模型     - path: 请求接口的路径，例如: `/api/sns/web/v1/homefeed`     - data: 请求API的荷载数据     - cookie: 请求接口的Cookie ### 返回: - 签名参数(X-s, X-t, X-s-common等)  # [English] ### Purpose: - Xiaohongshu Web sign, used to get some data of Xiaohongshu. - Generate `X-s`, `X-t`, `X-s-common` and other signature parameters. - Price: 0.001$/time ### Parameters: - sign_request: Sign request model     - path: Request API path, e.g. `/api/sns/web/v1/homefeed`     - data: Payload data of request API     - cookie: Request API cookie ### Return: - Signature parameters(X-s, X-t, X-s-common, etc.)  # [示例/Example] {     \"path\": \"/api/sns/web/v1/homefeed\",     \"data\": {         \"cursor_score\": \"\",         \"num\": 35,         \"refresh_type\": 1,         \"note_index\": 35,         \"unread_begin_note_id\": \"\",         \"unread_end_note_id\": \"\",         \"unread_note_count\": 0,         \"category\": \"homefeed_recommend\",         \"search_key\": \"\",         \"need_num\": 10,         \"image_formats\": [             \"jpg\",             \"webp\",             \"avif\"         ],         \"need_filter_image\": False     },     \"cookie\": \"web_session=030037a04eafd37791e6e4bd05204a8cf2af05;acw_tc=0a00d79f17363096679345838efb77751cc087fb039dd1691dc954824410f6;abRequestId=384480ae-5196-5818-a835-42e6278de9f0;webBuild=4.47.1;xsecappid=xhs-pc-web;a1=194441ef694PayUbdUvgp0dSHfIcACsNsLud0Lgru50000354513;webId=6cf10a564b9b07d129729b65e0d1785a;sec_poison_id=32964532-d414-4beb-914f-98811853b75f\" }
         * @summary 小红书Web签名/Xiaohongshu Web sign
         * @param {XhsWebSignRequestModel} [xhsWebSignRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signApiV1XiaohongshuWebSignPost_20(xhsWebSignRequestModel?: XhsWebSignRequestModel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseModel>> {
            const localVarAxiosArgs = await XiaohongshuWebAPIApiAxiosParamCreator(configuration).signApiV1XiaohongshuWebSignPost_20(xhsWebSignRequestModel, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * XiaohongshuWebAPIApi - factory interface
 * @export
 */
export const XiaohongshuWebAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * # [中文] ### 用途: - 获取首页推荐 ### 参数: - feed_type: 推荐类型     - 全部: 0     - 穿搭: 1     - 美食: 2     - 彩妆: 3     - 影视: 4     - 职场: 5     - 情感: 6     - 家居: 7     - 游戏: 8     - 旅行: 9     - 健身: 10 - need_filter_image: 是否只看图文笔记，默认为 False - cookie: 可选参数，用户自行提供的已登录的网页Cookie获取个性化推荐，如果不提供，则使用游客模式 - proxy: 可选参数，网络代理，可降低封号概率，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port ### 返回: - 推荐列表  # [English] ### Purpose: - Get home recommend ### Parameters: - feed_type: Feed type     - Dress: 1     - Food: 2     - Makeup: 3     - Film: 4     - Workplace: 5     - Emotion: 6     - Home: 7     - Game: 8     - Travel: 9     - Fitness: 10 - need_filter_image: Whether to view only image notes, default is False - cookie: Optional parameter, user-provided logged-in web Cookie to get personalized recommendations, if not provided, use visitor mode - proxy: Optional parameter, network proxy, can reduce the probability of account ban, format: http://username:password@IP:port ### Return: - Recommend list  # [示例/Example] feed_type=\"0\" need_filter_image=False
         * @summary 获取首页推荐/Get home recommend
         * @param {GetHomeFeedRequest} [getHomeFeedRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost(getHomeFeedRequest?: GetHomeFeedRequest, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost(getHomeFeedRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取首页推荐 ### 参数: - feed_type: 推荐类型     - 全部: 0     - 穿搭: 1     - 美食: 2     - 彩妆: 3     - 影视: 4     - 职场: 5     - 情感: 6     - 家居: 7     - 游戏: 8     - 旅行: 9     - 健身: 10 - need_filter_image: 是否只看图文笔记，默认为 False - cookie: 可选参数，用户自行提供的已登录的网页Cookie获取个性化推荐，如果不提供，则使用游客模式 - proxy: 可选参数，网络代理，可降低封号概率，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port ### 返回: - 推荐列表  # [English] ### Purpose: - Get home recommend ### Parameters: - feed_type: Feed type     - Dress: 1     - Food: 2     - Makeup: 3     - Film: 4     - Workplace: 5     - Emotion: 6     - Home: 7     - Game: 8     - Travel: 9     - Fitness: 10 - need_filter_image: Whether to view only image notes, default is False - cookie: Optional parameter, user-provided logged-in web Cookie to get personalized recommendations, if not provided, use visitor mode - proxy: Optional parameter, network proxy, can reduce the probability of account ban, format: http://username:password@IP:port ### Return: - Recommend list  # [示例/Example] feed_type=\"0\" need_filter_image=False
         * @summary 获取首页推荐/Get home recommend
         * @param {GetHomeFeedRequest} [getHomeFeedRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost_1(getHomeFeedRequest?: GetHomeFeedRequest, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost_1(getHomeFeedRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论回复 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None
         * @summary 获取笔记评论回复 V1/Get note comment replies V1
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet(noteId: string, commentId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet(noteId, commentId, lastCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论回复 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None
         * @summary 获取笔记评论回复 V1/Get note comment replies V1
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_2(noteId: string, commentId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_2(noteId, commentId, lastCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论回复 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None
         * @summary 获取笔记评论回复 V2/Get note comment replies V2
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get(noteId: string, commentId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get(noteId, commentId, lastCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论回复 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None
         * @summary 获取笔记评论回复 V2/Get note comment replies V2
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} commentId 评论ID/Comment ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_3(noteId: string, commentId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_3(noteId, commentId, lastCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None
         * @summary 获取笔记评论 V1/Get note comments V1
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet(noteId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet(noteId, lastCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None
         * @summary 获取笔记评论 V1/Get note comments V1
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet_4(noteId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet_4(noteId, lastCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None
         * @summary 获取笔记评论 V2/Get note comments V2
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get(noteId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get(noteId, lastCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取笔记评论 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None
         * @summary 获取笔记评论 V2/Get note comments V2
         * @param {string} noteId 笔记ID/Note ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get_5(noteId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get_5(noteId, lastCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取小红书的Note ID 和 xsec_token ### 参数: - share_text: 小红书分享链接（支持APP和Web端分享链接） ### 返回: - Note ID 和 xsec_token  # [English] ### Purpose: - Get Xiaohongshu Note ID and xsec_token by share link ### Parameters: - share_text: Xiaohongshu sharing link (support APP and Web sharing link) ### Return: - Note ID and xsec_token  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"
         * @summary 通过分享链接获取小红书的Note ID 和 xsec_token/Get Xiaohongshu Note ID and xsec_token by share link
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet(shareText: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet(shareText, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 通过分享链接获取小红书的Note ID 和 xsec_token ### 参数: - share_text: 小红书分享链接（支持APP和Web端分享链接） ### 返回: - Note ID 和 xsec_token  # [English] ### Purpose: - Get Xiaohongshu Note ID and xsec_token by share link ### Parameters: - share_text: Xiaohongshu sharing link (support APP and Web sharing link) ### Return: - Note ID and xsec_token  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"
         * @summary 通过分享链接获取小红书的Note ID 和 xsec_token/Get Xiaohongshu Note ID and xsec_token by share link
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet_6(shareText: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet_6(shareText, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
         * @summary 获取笔记信息 V1/Get note info V1
         * @param {string} [noteId] 笔记ID/Note ID
         * @param {string} [shareText] 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet(noteId?: string, shareText?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet(noteId, shareText, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
         * @summary 获取笔记信息 V1/Get note info V1
         * @param {string} [noteId] 笔记ID/Note ID
         * @param {string} [shareText] 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet_7(noteId?: string, shareText?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet_7(noteId, shareText, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
         * @summary 获取笔记信息 V2/Get note info V2
         * @param {string} [noteId] 笔记ID/Note ID
         * @param {string} [shareText] 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get(noteId?: string, shareText?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get(noteId, shareText, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
         * @summary 获取笔记信息 V2/Get note info V2
         * @param {string} [noteId] 笔记ID/Note ID
         * @param {string} [shareText] 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get_8(noteId?: string, shareText?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get_8(noteId, shareText, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息V3，仅支持完整的小红书分享链接 ### 参数: - share_text: 完整的小红书分享链接（支持APP和Web端分享链接） ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V3, only support complete Xiaohongshu sharing link ### Parameters: - share_text: Complete Xiaohongshu sharing link(support APP and Web sharing link) ### Return: - Note info  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"
         * @summary 获取笔记信息 V3 (游客)/Get note info V3 (Visitor)
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get(shareText: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get(shareText, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息V3，仅支持完整的小红书分享链接 ### 参数: - share_text: 完整的小红书分享链接（支持APP和Web端分享链接） ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V3, only support complete Xiaohongshu sharing link ### Parameters: - share_text: Complete Xiaohongshu sharing link(support APP and Web sharing link) ### Return: - Note info  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"
         * @summary 获取笔记信息 V3 (游客)/Get note info V3 (Visitor)
         * @param {string} shareText 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get_9(shareText: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get_9(shareText, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息V4 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V4 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
         * @summary 获取笔记信息 V4/Get note info V4
         * @param {string} [noteId] 笔记ID/Note ID
         * @param {string} [shareText] 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get(noteId?: string, shareText?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get(noteId, shareText, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息V4 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V4 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
         * @summary 获取笔记信息 V4/Get note info V4
         * @param {string} [noteId] 笔记ID/Note ID
         * @param {string} [shareText] 分享链接/Share link
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get_10(noteId?: string, shareText?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get_10(noteId, shareText, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息V5，用户自行提供Cookie来获取笔记信息 - 此接口收费0.001$ ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - xsec_token: X-Sec-Token，可以从搜索接口中获取，分享链接中也有/X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: 用户自行提供的已登录的网页Cookie - proxy: 代理，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port - 最好使用代理，避免被封号或其他未知问题。  ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V5, user provides Cookie to get note info - This interface charges 0.001$ ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - xsec_token: X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: User provided logged-in web Cookie - proxy: Proxy, format: http://username:password@IP:port - It is recommended to use a proxy to avoid being banned or other unknown issues. ### Return: - Note info  # [示例/Example] note_id = \"67855d09000000001703d449\" xsec_token = \"ABfpRSESmZDRbX-EX7lzEztktMngxPVC9kU-dgQmuQoNo=\" cookie = \"Your Cookie\" proxy = \"http://username:password@IP:port\"
         * @summary 获取笔记信息 V5 (自带Cookie)/Get note info V5 (Self-provided Cookie)
         * @param {GetNoteInfoV5Request} [getNoteInfoV5Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post(getNoteInfoV5Request?: GetNoteInfoV5Request, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post(getNoteInfoV5Request, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取笔记信息V5，用户自行提供Cookie来获取笔记信息 - 此接口收费0.001$ ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - xsec_token: X-Sec-Token，可以从搜索接口中获取，分享链接中也有/X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: 用户自行提供的已登录的网页Cookie - proxy: 代理，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port - 最好使用代理，避免被封号或其他未知问题。  ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V5, user provides Cookie to get note info - This interface charges 0.001$ ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - xsec_token: X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: User provided logged-in web Cookie - proxy: Proxy, format: http://username:password@IP:port - It is recommended to use a proxy to avoid being banned or other unknown issues. ### Return: - Note info  # [示例/Example] note_id = \"67855d09000000001703d449\" xsec_token = \"ABfpRSESmZDRbX-EX7lzEztktMngxPVC9kU-dgQmuQoNo=\" cookie = \"Your Cookie\" proxy = \"http://username:password@IP:port\"
         * @summary 获取笔记信息 V5 (自带Cookie)/Get note info V5 (Self-provided Cookie)
         * @param {GetNoteInfoV5Request} [getNoteInfoV5Request] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post_11(getNoteInfoV5Request?: GetNoteInfoV5Request, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post_11(getNoteInfoV5Request, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
         * @summary 获取用户信息 V1/Get user info V1
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoApiV1XiaohongshuWebGetUserInfoGet(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getUserInfoApiV1XiaohongshuWebGetUserInfoGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
         * @summary 获取用户信息 V1/Get user info V1
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoApiV1XiaohongshuWebGetUserInfoGet_12(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getUserInfoApiV1XiaohongshuWebGetUserInfoGet_12(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 V2 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V2 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
         * @summary 获取用户信息 V2/Get user info V2
         * @param {string} [userId] 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get(userId?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 V2 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V2 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
         * @summary 获取用户信息 V2/Get user info V2
         * @param {string} [userId] 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get_13(userId?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get_13(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 V3 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V3 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
         * @summary 获取用户信息 V3/Get user info V3
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户信息 V3 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V3 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
         * @summary 获取用户信息 V3/Get user info V3
         * @param {string} userId 用户ID/User ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get_14(userId: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get_14(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的笔记 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None
         * @summary 获取用户的笔记 V1/Get user notes V1
         * @param {string} userId 用户ID/User ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNotesApiV1XiaohongshuWebGetUserNotesGet(userId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getUserNotesApiV1XiaohongshuWebGetUserNotesGet(userId, lastCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的笔记 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None
         * @summary 获取用户的笔记 V1/Get user notes V1
         * @param {string} userId 用户ID/User ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNotesApiV1XiaohongshuWebGetUserNotesGet_15(userId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getUserNotesApiV1XiaohongshuWebGetUserNotesGet_15(userId, lastCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的笔记 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None
         * @summary 获取用户的笔记 V2/Get user notes V2
         * @param {string} userId 用户ID/User ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get(userId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get(userId, lastCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取用户的笔记 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None
         * @summary 获取用户的笔记 V2/Get user notes V2
         * @param {string} userId 用户ID/User ID
         * @param {string} [lastCursor] 上一页的游标/Last cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get_16(userId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get_16(userId, lastCursor, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取小红书网页版的游客Cookie，可以用于爬取小红书的一些数据。 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get Xiaohongshu web visitor cookie, which can be used to crawl some data of Xiaohongshu. ### Return: - Visitor cookie
         * @summary 获取游客Cookie/Get visitor cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet(options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 获取小红书网页版的游客Cookie，可以用于爬取小红书的一些数据。 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get Xiaohongshu web visitor cookie, which can be used to crawl some data of Xiaohongshu. ### Return: - Visitor cookie
         * @summary 获取游客Cookie/Get visitor cookie
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet_17(options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).getVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet_17(options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索笔记 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 - sort: 排序方式     - 综合排序（默认参数）: general     - 最热排序: popularity_descending     - 最新排序: time_descending - noteType: 笔记类型     - 综合笔记（默认参数）: _0     - 视频笔记: _1     - 图文笔记: _2 ### 返回: - 笔记列表  # [English] ### Purpose: - Search notes ### Parameters: - keyword: Keyword - page: Page, default is 1 - sort: Sort     - General sort (default): general     - Popularity sort: popularity_descending     - Latest sort: time_descending - noteType: Note type     - General note (default): _0     - Video note: _1     - Image note: _2 ### Return: - Note list  # [示例/Example] keyword=\"美食\" page=1 sort=\"general\" noteType=\"_0\"
         * @summary 搜索笔记/Search notes
         * @param {string} keyword 搜索关键词/Keyword
         * @param {number} [page] 页码/Page
         * @param {string} [sort] 排序方式/Sort
         * @param {string} [noteType] 笔记类型/Note type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchNotesApiV1XiaohongshuWebSearchNotesGet(keyword: string, page?: number, sort?: string, noteType?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).searchNotesApiV1XiaohongshuWebSearchNotesGet(keyword, page, sort, noteType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索笔记 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 - sort: 排序方式     - 综合排序（默认参数）: general     - 最热排序: popularity_descending     - 最新排序: time_descending - noteType: 笔记类型     - 综合笔记（默认参数）: _0     - 视频笔记: _1     - 图文笔记: _2 ### 返回: - 笔记列表  # [English] ### Purpose: - Search notes ### Parameters: - keyword: Keyword - page: Page, default is 1 - sort: Sort     - General sort (default): general     - Popularity sort: popularity_descending     - Latest sort: time_descending - noteType: Note type     - General note (default): _0     - Video note: _1     - Image note: _2 ### Return: - Note list  # [示例/Example] keyword=\"美食\" page=1 sort=\"general\" noteType=\"_0\"
         * @summary 搜索笔记/Search notes
         * @param {string} keyword 搜索关键词/Keyword
         * @param {number} [page] 页码/Page
         * @param {string} [sort] 排序方式/Sort
         * @param {string} [noteType] 笔记类型/Note type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchNotesApiV1XiaohongshuWebSearchNotesGet_18(keyword: string, page?: number, sort?: string, noteType?: string, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).searchNotesApiV1XiaohongshuWebSearchNotesGet_18(keyword, page, sort, noteType, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 ### 返回: - 用户列表  # [English] ### Purpose: - Search users ### Parameters: - keyword: Keyword - page: Page, default is 1 ### Return: - User list  # [示例/Example] keyword=\"美食\" page=1
         * @summary 搜索用户/Search users
         * @param {string} keyword 搜索关键词/Keyword
         * @param {number} [page] 页码/Page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUsersApiV1XiaohongshuWebSearchUsersGet(keyword: string, page?: number, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).searchUsersApiV1XiaohongshuWebSearchUsersGet(keyword, page, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 ### 返回: - 用户列表  # [English] ### Purpose: - Search users ### Parameters: - keyword: Keyword - page: Page, default is 1 ### Return: - User list  # [示例/Example] keyword=\"美食\" page=1
         * @summary 搜索用户/Search users
         * @param {string} keyword 搜索关键词/Keyword
         * @param {number} [page] 页码/Page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchUsersApiV1XiaohongshuWebSearchUsersGet_19(keyword: string, page?: number, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).searchUsersApiV1XiaohongshuWebSearchUsersGet_19(keyword, page, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 小红书Web签名，用于获取小红书的一些数据。 - 生成 `X-s`, `X-t`, `X-s-common` 等签名参数。 - 价格：0.001$/次 ### 参数: - sign_request: 签名请求模型     - path: 请求接口的路径，例如: `/api/sns/web/v1/homefeed`     - data: 请求API的荷载数据     - cookie: 请求接口的Cookie ### 返回: - 签名参数(X-s, X-t, X-s-common等)  # [English] ### Purpose: - Xiaohongshu Web sign, used to get some data of Xiaohongshu. - Generate `X-s`, `X-t`, `X-s-common` and other signature parameters. - Price: 0.001$/time ### Parameters: - sign_request: Sign request model     - path: Request API path, e.g. `/api/sns/web/v1/homefeed`     - data: Payload data of request API     - cookie: Request API cookie ### Return: - Signature parameters(X-s, X-t, X-s-common, etc.)  # [示例/Example] {     \"path\": \"/api/sns/web/v1/homefeed\",     \"data\": {         \"cursor_score\": \"\",         \"num\": 35,         \"refresh_type\": 1,         \"note_index\": 35,         \"unread_begin_note_id\": \"\",         \"unread_end_note_id\": \"\",         \"unread_note_count\": 0,         \"category\": \"homefeed_recommend\",         \"search_key\": \"\",         \"need_num\": 10,         \"image_formats\": [             \"jpg\",             \"webp\",             \"avif\"         ],         \"need_filter_image\": False     },     \"cookie\": \"web_session=030037a04eafd37791e6e4bd05204a8cf2af05;acw_tc=0a00d79f17363096679345838efb77751cc087fb039dd1691dc954824410f6;abRequestId=384480ae-5196-5818-a835-42e6278de9f0;webBuild=4.47.1;xsecappid=xhs-pc-web;a1=194441ef694PayUbdUvgp0dSHfIcACsNsLud0Lgru50000354513;webId=6cf10a564b9b07d129729b65e0d1785a;sec_poison_id=32964532-d414-4beb-914f-98811853b75f\" }
         * @summary 小红书Web签名/Xiaohongshu Web sign
         * @param {XhsWebSignRequestModel} [xhsWebSignRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signApiV1XiaohongshuWebSignPost(xhsWebSignRequestModel?: XhsWebSignRequestModel, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).signApiV1XiaohongshuWebSignPost(xhsWebSignRequestModel, options).then((request) => request(axios, basePath));
        },
        /**
         * # [中文] ### 用途: - 小红书Web签名，用于获取小红书的一些数据。 - 生成 `X-s`, `X-t`, `X-s-common` 等签名参数。 - 价格：0.001$/次 ### 参数: - sign_request: 签名请求模型     - path: 请求接口的路径，例如: `/api/sns/web/v1/homefeed`     - data: 请求API的荷载数据     - cookie: 请求接口的Cookie ### 返回: - 签名参数(X-s, X-t, X-s-common等)  # [English] ### Purpose: - Xiaohongshu Web sign, used to get some data of Xiaohongshu. - Generate `X-s`, `X-t`, `X-s-common` and other signature parameters. - Price: 0.001$/time ### Parameters: - sign_request: Sign request model     - path: Request API path, e.g. `/api/sns/web/v1/homefeed`     - data: Payload data of request API     - cookie: Request API cookie ### Return: - Signature parameters(X-s, X-t, X-s-common, etc.)  # [示例/Example] {     \"path\": \"/api/sns/web/v1/homefeed\",     \"data\": {         \"cursor_score\": \"\",         \"num\": 35,         \"refresh_type\": 1,         \"note_index\": 35,         \"unread_begin_note_id\": \"\",         \"unread_end_note_id\": \"\",         \"unread_note_count\": 0,         \"category\": \"homefeed_recommend\",         \"search_key\": \"\",         \"need_num\": 10,         \"image_formats\": [             \"jpg\",             \"webp\",             \"avif\"         ],         \"need_filter_image\": False     },     \"cookie\": \"web_session=030037a04eafd37791e6e4bd05204a8cf2af05;acw_tc=0a00d79f17363096679345838efb77751cc087fb039dd1691dc954824410f6;abRequestId=384480ae-5196-5818-a835-42e6278de9f0;webBuild=4.47.1;xsecappid=xhs-pc-web;a1=194441ef694PayUbdUvgp0dSHfIcACsNsLud0Lgru50000354513;webId=6cf10a564b9b07d129729b65e0d1785a;sec_poison_id=32964532-d414-4beb-914f-98811853b75f\" }
         * @summary 小红书Web签名/Xiaohongshu Web sign
         * @param {XhsWebSignRequestModel} [xhsWebSignRequestModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signApiV1XiaohongshuWebSignPost_20(xhsWebSignRequestModel?: XhsWebSignRequestModel, options?: any): AxiosPromise<ResponseModel> {
            return XiaohongshuWebAPIApiFp(configuration).signApiV1XiaohongshuWebSignPost_20(xhsWebSignRequestModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * XiaohongshuWebAPIApi - interface
 * @export
 * @interface XiaohongshuWebAPIApi
 */
export interface XiaohongshuWebAPIApiInterface {
    /**
     * # [中文] ### 用途: - 获取首页推荐 ### 参数: - feed_type: 推荐类型     - 全部: 0     - 穿搭: 1     - 美食: 2     - 彩妆: 3     - 影视: 4     - 职场: 5     - 情感: 6     - 家居: 7     - 游戏: 8     - 旅行: 9     - 健身: 10 - need_filter_image: 是否只看图文笔记，默认为 False - cookie: 可选参数，用户自行提供的已登录的网页Cookie获取个性化推荐，如果不提供，则使用游客模式 - proxy: 可选参数，网络代理，可降低封号概率，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port ### 返回: - 推荐列表  # [English] ### Purpose: - Get home recommend ### Parameters: - feed_type: Feed type     - Dress: 1     - Food: 2     - Makeup: 3     - Film: 4     - Workplace: 5     - Emotion: 6     - Home: 7     - Game: 8     - Travel: 9     - Fitness: 10 - need_filter_image: Whether to view only image notes, default is False - cookie: Optional parameter, user-provided logged-in web Cookie to get personalized recommendations, if not provided, use visitor mode - proxy: Optional parameter, network proxy, can reduce the probability of account ban, format: http://username:password@IP:port ### Return: - Recommend list  # [示例/Example] feed_type=\"0\" need_filter_image=False
     * @summary 获取首页推荐/Get home recommend
     * @param {GetHomeFeedRequest} [getHomeFeedRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost(getHomeFeedRequest?: GetHomeFeedRequest, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取首页推荐 ### 参数: - feed_type: 推荐类型     - 全部: 0     - 穿搭: 1     - 美食: 2     - 彩妆: 3     - 影视: 4     - 职场: 5     - 情感: 6     - 家居: 7     - 游戏: 8     - 旅行: 9     - 健身: 10 - need_filter_image: 是否只看图文笔记，默认为 False - cookie: 可选参数，用户自行提供的已登录的网页Cookie获取个性化推荐，如果不提供，则使用游客模式 - proxy: 可选参数，网络代理，可降低封号概率，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port ### 返回: - 推荐列表  # [English] ### Purpose: - Get home recommend ### Parameters: - feed_type: Feed type     - Dress: 1     - Food: 2     - Makeup: 3     - Film: 4     - Workplace: 5     - Emotion: 6     - Home: 7     - Game: 8     - Travel: 9     - Fitness: 10 - need_filter_image: Whether to view only image notes, default is False - cookie: Optional parameter, user-provided logged-in web Cookie to get personalized recommendations, if not provided, use visitor mode - proxy: Optional parameter, network proxy, can reduce the probability of account ban, format: http://username:password@IP:port ### Return: - Recommend list  # [示例/Example] feed_type=\"0\" need_filter_image=False
     * @summary 获取首页推荐/Get home recommend
     * @param {GetHomeFeedRequest} [getHomeFeedRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost_1(getHomeFeedRequest?: GetHomeFeedRequest, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取笔记评论回复 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None
     * @summary 获取笔记评论回复 V1/Get note comment replies V1
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} commentId 评论ID/Comment ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet(noteId: string, commentId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取笔记评论回复 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None
     * @summary 获取笔记评论回复 V1/Get note comment replies V1
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} commentId 评论ID/Comment ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_2(noteId: string, commentId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取笔记评论回复 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None
     * @summary 获取笔记评论回复 V2/Get note comment replies V2
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} commentId 评论ID/Comment ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get(noteId: string, commentId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取笔记评论回复 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None
     * @summary 获取笔记评论回复 V2/Get note comment replies V2
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} commentId 评论ID/Comment ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_3(noteId: string, commentId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取笔记评论 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None
     * @summary 获取笔记评论 V1/Get note comments V1
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet(noteId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取笔记评论 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None
     * @summary 获取笔记评论 V1/Get note comments V1
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet_4(noteId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取笔记评论 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None
     * @summary 获取笔记评论 V2/Get note comments V2
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get(noteId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取笔记评论 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None
     * @summary 获取笔记评论 V2/Get note comments V2
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get_5(noteId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过分享链接获取小红书的Note ID 和 xsec_token ### 参数: - share_text: 小红书分享链接（支持APP和Web端分享链接） ### 返回: - Note ID 和 xsec_token  # [English] ### Purpose: - Get Xiaohongshu Note ID and xsec_token by share link ### Parameters: - share_text: Xiaohongshu sharing link (support APP and Web sharing link) ### Return: - Note ID and xsec_token  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"
     * @summary 通过分享链接获取小红书的Note ID 和 xsec_token/Get Xiaohongshu Note ID and xsec_token by share link
     * @param {string} shareText 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet(shareText: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 通过分享链接获取小红书的Note ID 和 xsec_token ### 参数: - share_text: 小红书分享链接（支持APP和Web端分享链接） ### 返回: - Note ID 和 xsec_token  # [English] ### Purpose: - Get Xiaohongshu Note ID and xsec_token by share link ### Parameters: - share_text: Xiaohongshu sharing link (support APP and Web sharing link) ### Return: - Note ID and xsec_token  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"
     * @summary 通过分享链接获取小红书的Note ID 和 xsec_token/Get Xiaohongshu Note ID and xsec_token by share link
     * @param {string} shareText 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet_6(shareText: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取笔记信息 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
     * @summary 获取笔记信息 V1/Get note info V1
     * @param {string} [noteId] 笔记ID/Note ID
     * @param {string} [shareText] 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet(noteId?: string, shareText?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取笔记信息 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
     * @summary 获取笔记信息 V1/Get note info V1
     * @param {string} [noteId] 笔记ID/Note ID
     * @param {string} [shareText] 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet_7(noteId?: string, shareText?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取笔记信息 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
     * @summary 获取笔记信息 V2/Get note info V2
     * @param {string} [noteId] 笔记ID/Note ID
     * @param {string} [shareText] 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get(noteId?: string, shareText?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取笔记信息 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
     * @summary 获取笔记信息 V2/Get note info V2
     * @param {string} [noteId] 笔记ID/Note ID
     * @param {string} [shareText] 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get_8(noteId?: string, shareText?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取笔记信息V3，仅支持完整的小红书分享链接 ### 参数: - share_text: 完整的小红书分享链接（支持APP和Web端分享链接） ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V3, only support complete Xiaohongshu sharing link ### Parameters: - share_text: Complete Xiaohongshu sharing link(support APP and Web sharing link) ### Return: - Note info  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"
     * @summary 获取笔记信息 V3 (游客)/Get note info V3 (Visitor)
     * @param {string} shareText 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get(shareText: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取笔记信息V3，仅支持完整的小红书分享链接 ### 参数: - share_text: 完整的小红书分享链接（支持APP和Web端分享链接） ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V3, only support complete Xiaohongshu sharing link ### Parameters: - share_text: Complete Xiaohongshu sharing link(support APP and Web sharing link) ### Return: - Note info  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"
     * @summary 获取笔记信息 V3 (游客)/Get note info V3 (Visitor)
     * @param {string} shareText 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get_9(shareText: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取笔记信息V4 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V4 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
     * @summary 获取笔记信息 V4/Get note info V4
     * @param {string} [noteId] 笔记ID/Note ID
     * @param {string} [shareText] 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get(noteId?: string, shareText?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取笔记信息V4 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V4 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
     * @summary 获取笔记信息 V4/Get note info V4
     * @param {string} [noteId] 笔记ID/Note ID
     * @param {string} [shareText] 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get_10(noteId?: string, shareText?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取笔记信息V5，用户自行提供Cookie来获取笔记信息 - 此接口收费0.001$ ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - xsec_token: X-Sec-Token，可以从搜索接口中获取，分享链接中也有/X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: 用户自行提供的已登录的网页Cookie - proxy: 代理，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port - 最好使用代理，避免被封号或其他未知问题。  ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V5, user provides Cookie to get note info - This interface charges 0.001$ ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - xsec_token: X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: User provided logged-in web Cookie - proxy: Proxy, format: http://username:password@IP:port - It is recommended to use a proxy to avoid being banned or other unknown issues. ### Return: - Note info  # [示例/Example] note_id = \"67855d09000000001703d449\" xsec_token = \"ABfpRSESmZDRbX-EX7lzEztktMngxPVC9kU-dgQmuQoNo=\" cookie = \"Your Cookie\" proxy = \"http://username:password@IP:port\"
     * @summary 获取笔记信息 V5 (自带Cookie)/Get note info V5 (Self-provided Cookie)
     * @param {GetNoteInfoV5Request} [getNoteInfoV5Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post(getNoteInfoV5Request?: GetNoteInfoV5Request, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取笔记信息V5，用户自行提供Cookie来获取笔记信息 - 此接口收费0.001$ ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - xsec_token: X-Sec-Token，可以从搜索接口中获取，分享链接中也有/X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: 用户自行提供的已登录的网页Cookie - proxy: 代理，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port - 最好使用代理，避免被封号或其他未知问题。  ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V5, user provides Cookie to get note info - This interface charges 0.001$ ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - xsec_token: X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: User provided logged-in web Cookie - proxy: Proxy, format: http://username:password@IP:port - It is recommended to use a proxy to avoid being banned or other unknown issues. ### Return: - Note info  # [示例/Example] note_id = \"67855d09000000001703d449\" xsec_token = \"ABfpRSESmZDRbX-EX7lzEztktMngxPVC9kU-dgQmuQoNo=\" cookie = \"Your Cookie\" proxy = \"http://username:password@IP:port\"
     * @summary 获取笔记信息 V5 (自带Cookie)/Get note info V5 (Self-provided Cookie)
     * @param {GetNoteInfoV5Request} [getNoteInfoV5Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post_11(getNoteInfoV5Request?: GetNoteInfoV5Request, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户信息 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
     * @summary 获取用户信息 V1/Get user info V1
     * @param {string} userId 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getUserInfoApiV1XiaohongshuWebGetUserInfoGet(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户信息 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
     * @summary 获取用户信息 V1/Get user info V1
     * @param {string} userId 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getUserInfoApiV1XiaohongshuWebGetUserInfoGet_12(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户信息 V2 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V2 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
     * @summary 获取用户信息 V2/Get user info V2
     * @param {string} [userId] 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get(userId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户信息 V2 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V2 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
     * @summary 获取用户信息 V2/Get user info V2
     * @param {string} [userId] 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get_13(userId?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户信息 V3 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V3 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
     * @summary 获取用户信息 V3/Get user info V3
     * @param {string} userId 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户信息 V3 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V3 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
     * @summary 获取用户信息 V3/Get user info V3
     * @param {string} userId 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get_14(userId: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的笔记 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None
     * @summary 获取用户的笔记 V1/Get user notes V1
     * @param {string} userId 用户ID/User ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getUserNotesApiV1XiaohongshuWebGetUserNotesGet(userId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的笔记 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None
     * @summary 获取用户的笔记 V1/Get user notes V1
     * @param {string} userId 用户ID/User ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getUserNotesApiV1XiaohongshuWebGetUserNotesGet_15(userId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的笔记 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None
     * @summary 获取用户的笔记 V2/Get user notes V2
     * @param {string} userId 用户ID/User ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get(userId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取用户的笔记 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None
     * @summary 获取用户的笔记 V2/Get user notes V2
     * @param {string} userId 用户ID/User ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get_16(userId: string, lastCursor?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取小红书网页版的游客Cookie，可以用于爬取小红书的一些数据。 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get Xiaohongshu web visitor cookie, which can be used to crawl some data of Xiaohongshu. ### Return: - Visitor cookie
     * @summary 获取游客Cookie/Get visitor cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 获取小红书网页版的游客Cookie，可以用于爬取小红书的一些数据。 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get Xiaohongshu web visitor cookie, which can be used to crawl some data of Xiaohongshu. ### Return: - Visitor cookie
     * @summary 获取游客Cookie/Get visitor cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    getVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet_17(options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索笔记 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 - sort: 排序方式     - 综合排序（默认参数）: general     - 最热排序: popularity_descending     - 最新排序: time_descending - noteType: 笔记类型     - 综合笔记（默认参数）: _0     - 视频笔记: _1     - 图文笔记: _2 ### 返回: - 笔记列表  # [English] ### Purpose: - Search notes ### Parameters: - keyword: Keyword - page: Page, default is 1 - sort: Sort     - General sort (default): general     - Popularity sort: popularity_descending     - Latest sort: time_descending - noteType: Note type     - General note (default): _0     - Video note: _1     - Image note: _2 ### Return: - Note list  # [示例/Example] keyword=\"美食\" page=1 sort=\"general\" noteType=\"_0\"
     * @summary 搜索笔记/Search notes
     * @param {string} keyword 搜索关键词/Keyword
     * @param {number} [page] 页码/Page
     * @param {string} [sort] 排序方式/Sort
     * @param {string} [noteType] 笔记类型/Note type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    searchNotesApiV1XiaohongshuWebSearchNotesGet(keyword: string, page?: number, sort?: string, noteType?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索笔记 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 - sort: 排序方式     - 综合排序（默认参数）: general     - 最热排序: popularity_descending     - 最新排序: time_descending - noteType: 笔记类型     - 综合笔记（默认参数）: _0     - 视频笔记: _1     - 图文笔记: _2 ### 返回: - 笔记列表  # [English] ### Purpose: - Search notes ### Parameters: - keyword: Keyword - page: Page, default is 1 - sort: Sort     - General sort (default): general     - Popularity sort: popularity_descending     - Latest sort: time_descending - noteType: Note type     - General note (default): _0     - Video note: _1     - Image note: _2 ### Return: - Note list  # [示例/Example] keyword=\"美食\" page=1 sort=\"general\" noteType=\"_0\"
     * @summary 搜索笔记/Search notes
     * @param {string} keyword 搜索关键词/Keyword
     * @param {number} [page] 页码/Page
     * @param {string} [sort] 排序方式/Sort
     * @param {string} [noteType] 笔记类型/Note type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    searchNotesApiV1XiaohongshuWebSearchNotesGet_18(keyword: string, page?: number, sort?: string, noteType?: string, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 ### 返回: - 用户列表  # [English] ### Purpose: - Search users ### Parameters: - keyword: Keyword - page: Page, default is 1 ### Return: - User list  # [示例/Example] keyword=\"美食\" page=1
     * @summary 搜索用户/Search users
     * @param {string} keyword 搜索关键词/Keyword
     * @param {number} [page] 页码/Page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    searchUsersApiV1XiaohongshuWebSearchUsersGet(keyword: string, page?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 ### 返回: - 用户列表  # [English] ### Purpose: - Search users ### Parameters: - keyword: Keyword - page: Page, default is 1 ### Return: - User list  # [示例/Example] keyword=\"美食\" page=1
     * @summary 搜索用户/Search users
     * @param {string} keyword 搜索关键词/Keyword
     * @param {number} [page] 页码/Page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    searchUsersApiV1XiaohongshuWebSearchUsersGet_19(keyword: string, page?: number, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 小红书Web签名，用于获取小红书的一些数据。 - 生成 `X-s`, `X-t`, `X-s-common` 等签名参数。 - 价格：0.001$/次 ### 参数: - sign_request: 签名请求模型     - path: 请求接口的路径，例如: `/api/sns/web/v1/homefeed`     - data: 请求API的荷载数据     - cookie: 请求接口的Cookie ### 返回: - 签名参数(X-s, X-t, X-s-common等)  # [English] ### Purpose: - Xiaohongshu Web sign, used to get some data of Xiaohongshu. - Generate `X-s`, `X-t`, `X-s-common` and other signature parameters. - Price: 0.001$/time ### Parameters: - sign_request: Sign request model     - path: Request API path, e.g. `/api/sns/web/v1/homefeed`     - data: Payload data of request API     - cookie: Request API cookie ### Return: - Signature parameters(X-s, X-t, X-s-common, etc.)  # [示例/Example] {     \"path\": \"/api/sns/web/v1/homefeed\",     \"data\": {         \"cursor_score\": \"\",         \"num\": 35,         \"refresh_type\": 1,         \"note_index\": 35,         \"unread_begin_note_id\": \"\",         \"unread_end_note_id\": \"\",         \"unread_note_count\": 0,         \"category\": \"homefeed_recommend\",         \"search_key\": \"\",         \"need_num\": 10,         \"image_formats\": [             \"jpg\",             \"webp\",             \"avif\"         ],         \"need_filter_image\": False     },     \"cookie\": \"web_session=030037a04eafd37791e6e4bd05204a8cf2af05;acw_tc=0a00d79f17363096679345838efb77751cc087fb039dd1691dc954824410f6;abRequestId=384480ae-5196-5818-a835-42e6278de9f0;webBuild=4.47.1;xsecappid=xhs-pc-web;a1=194441ef694PayUbdUvgp0dSHfIcACsNsLud0Lgru50000354513;webId=6cf10a564b9b07d129729b65e0d1785a;sec_poison_id=32964532-d414-4beb-914f-98811853b75f\" }
     * @summary 小红书Web签名/Xiaohongshu Web sign
     * @param {XhsWebSignRequestModel} [xhsWebSignRequestModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    signApiV1XiaohongshuWebSignPost(xhsWebSignRequestModel?: XhsWebSignRequestModel, options?: any): AxiosPromise<ResponseModel>;

    /**
     * # [中文] ### 用途: - 小红书Web签名，用于获取小红书的一些数据。 - 生成 `X-s`, `X-t`, `X-s-common` 等签名参数。 - 价格：0.001$/次 ### 参数: - sign_request: 签名请求模型     - path: 请求接口的路径，例如: `/api/sns/web/v1/homefeed`     - data: 请求API的荷载数据     - cookie: 请求接口的Cookie ### 返回: - 签名参数(X-s, X-t, X-s-common等)  # [English] ### Purpose: - Xiaohongshu Web sign, used to get some data of Xiaohongshu. - Generate `X-s`, `X-t`, `X-s-common` and other signature parameters. - Price: 0.001$/time ### Parameters: - sign_request: Sign request model     - path: Request API path, e.g. `/api/sns/web/v1/homefeed`     - data: Payload data of request API     - cookie: Request API cookie ### Return: - Signature parameters(X-s, X-t, X-s-common, etc.)  # [示例/Example] {     \"path\": \"/api/sns/web/v1/homefeed\",     \"data\": {         \"cursor_score\": \"\",         \"num\": 35,         \"refresh_type\": 1,         \"note_index\": 35,         \"unread_begin_note_id\": \"\",         \"unread_end_note_id\": \"\",         \"unread_note_count\": 0,         \"category\": \"homefeed_recommend\",         \"search_key\": \"\",         \"need_num\": 10,         \"image_formats\": [             \"jpg\",             \"webp\",             \"avif\"         ],         \"need_filter_image\": False     },     \"cookie\": \"web_session=030037a04eafd37791e6e4bd05204a8cf2af05;acw_tc=0a00d79f17363096679345838efb77751cc087fb039dd1691dc954824410f6;abRequestId=384480ae-5196-5818-a835-42e6278de9f0;webBuild=4.47.1;xsecappid=xhs-pc-web;a1=194441ef694PayUbdUvgp0dSHfIcACsNsLud0Lgru50000354513;webId=6cf10a564b9b07d129729b65e0d1785a;sec_poison_id=32964532-d414-4beb-914f-98811853b75f\" }
     * @summary 小红书Web签名/Xiaohongshu Web sign
     * @param {XhsWebSignRequestModel} [xhsWebSignRequestModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApiInterface
     */
    signApiV1XiaohongshuWebSignPost_20(xhsWebSignRequestModel?: XhsWebSignRequestModel, options?: any): AxiosPromise<ResponseModel>;

}

/**
 * XiaohongshuWebAPIApi - object-oriented interface
 * @export
 * @class XiaohongshuWebAPIApi
 * @extends {BaseAPI}
 */
export class XiaohongshuWebAPIApi extends BaseAPI implements XiaohongshuWebAPIApiInterface {
    /**
     * # [中文] ### 用途: - 获取首页推荐 ### 参数: - feed_type: 推荐类型     - 全部: 0     - 穿搭: 1     - 美食: 2     - 彩妆: 3     - 影视: 4     - 职场: 5     - 情感: 6     - 家居: 7     - 游戏: 8     - 旅行: 9     - 健身: 10 - need_filter_image: 是否只看图文笔记，默认为 False - cookie: 可选参数，用户自行提供的已登录的网页Cookie获取个性化推荐，如果不提供，则使用游客模式 - proxy: 可选参数，网络代理，可降低封号概率，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port ### 返回: - 推荐列表  # [English] ### Purpose: - Get home recommend ### Parameters: - feed_type: Feed type     - Dress: 1     - Food: 2     - Makeup: 3     - Film: 4     - Workplace: 5     - Emotion: 6     - Home: 7     - Game: 8     - Travel: 9     - Fitness: 10 - need_filter_image: Whether to view only image notes, default is False - cookie: Optional parameter, user-provided logged-in web Cookie to get personalized recommendations, if not provided, use visitor mode - proxy: Optional parameter, network proxy, can reduce the probability of account ban, format: http://username:password@IP:port ### Return: - Recommend list  # [示例/Example] feed_type=\"0\" need_filter_image=False
     * @summary 获取首页推荐/Get home recommend
     * @param {GetHomeFeedRequest} [getHomeFeedRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost(getHomeFeedRequest?: GetHomeFeedRequest, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost(getHomeFeedRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取首页推荐 ### 参数: - feed_type: 推荐类型     - 全部: 0     - 穿搭: 1     - 美食: 2     - 彩妆: 3     - 影视: 4     - 职场: 5     - 情感: 6     - 家居: 7     - 游戏: 8     - 旅行: 9     - 健身: 10 - need_filter_image: 是否只看图文笔记，默认为 False - cookie: 可选参数，用户自行提供的已登录的网页Cookie获取个性化推荐，如果不提供，则使用游客模式 - proxy: 可选参数，网络代理，可降低封号概率，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port ### 返回: - 推荐列表  # [English] ### Purpose: - Get home recommend ### Parameters: - feed_type: Feed type     - Dress: 1     - Food: 2     - Makeup: 3     - Film: 4     - Workplace: 5     - Emotion: 6     - Home: 7     - Game: 8     - Travel: 9     - Fitness: 10 - need_filter_image: Whether to view only image notes, default is False - cookie: Optional parameter, user-provided logged-in web Cookie to get personalized recommendations, if not provided, use visitor mode - proxy: Optional parameter, network proxy, can reduce the probability of account ban, format: http://username:password@IP:port ### Return: - Recommend list  # [示例/Example] feed_type=\"0\" need_filter_image=False
     * @summary 获取首页推荐/Get home recommend
     * @param {GetHomeFeedRequest} [getHomeFeedRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost_1(getHomeFeedRequest?: GetHomeFeedRequest, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getHomeRecommendApiV1XiaohongshuWebGetHomeRecommendPost_1(getHomeFeedRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取笔记评论回复 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None
     * @summary 获取笔记评论回复 V1/Get note comment replies V1
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} commentId 评论ID/Comment ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet(noteId: string, commentId: string, lastCursor?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet(noteId, commentId, lastCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取笔记评论回复 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None
     * @summary 获取笔记评论回复 V1/Get note comment replies V1
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} commentId 评论ID/Comment ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_2(noteId: string, commentId: string, lastCursor?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesGet_2(noteId, commentId, lastCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取笔记评论回复 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None
     * @summary 获取笔记评论回复 V2/Get note comment replies V2
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} commentId 评论ID/Comment ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get(noteId: string, commentId: string, lastCursor?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get(noteId, commentId, lastCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取笔记评论回复 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - comment_id: 评论ID - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论回复列表  # [English] ### Purpose: - Get note comment replies V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - comment_id: Comment ID - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comment replies list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" comment_id=\"6683ec5b000000000303b91a\" lastCursor=None
     * @summary 获取笔记评论回复 V2/Get note comment replies V2
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} commentId 评论ID/Comment ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_3(noteId: string, commentId: string, lastCursor?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getNoteCommentRepliesApiV1XiaohongshuWebGetNoteCommentRepliesV2Get_3(noteId, commentId, lastCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取笔记评论 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None
     * @summary 获取笔记评论 V1/Get note comments V1
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet(noteId: string, lastCursor?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet(noteId, lastCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取笔记评论 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None
     * @summary 获取笔记评论 V1/Get note comments V1
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet_4(noteId: string, lastCursor?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsGet_4(noteId, lastCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取笔记评论 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None
     * @summary 获取笔记评论 V2/Get note comments V2
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get(noteId: string, lastCursor?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get(noteId, lastCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取笔记评论 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的游标 ### 返回: - 笔记评论列表  # [English] ### Purpose: - Get note comments V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the cursor returned in the last response for subsequent requests ### Return: - Note comments list  # [示例/Example] note_id=\"6683b283000000001f0052bf\" lastCursor=None
     * @summary 获取笔记评论 V2/Get note comments V2
     * @param {string} noteId 笔记ID/Note ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get_5(noteId: string, lastCursor?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getNoteCommentsApiV1XiaohongshuWebGetNoteCommentsV2Get_5(noteId, lastCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过分享链接获取小红书的Note ID 和 xsec_token ### 参数: - share_text: 小红书分享链接（支持APP和Web端分享链接） ### 返回: - Note ID 和 xsec_token  # [English] ### Purpose: - Get Xiaohongshu Note ID and xsec_token by share link ### Parameters: - share_text: Xiaohongshu sharing link (support APP and Web sharing link) ### Return: - Note ID and xsec_token  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"
     * @summary 通过分享链接获取小红书的Note ID 和 xsec_token/Get Xiaohongshu Note ID and xsec_token by share link
     * @param {string} shareText 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet(shareText: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet(shareText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 通过分享链接获取小红书的Note ID 和 xsec_token ### 参数: - share_text: 小红书分享链接（支持APP和Web端分享链接） ### 返回: - Note ID 和 xsec_token  # [English] ### Purpose: - Get Xiaohongshu Note ID and xsec_token by share link ### Parameters: - share_text: Xiaohongshu sharing link (support APP and Web sharing link) ### Return: - Note ID and xsec_token  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"
     * @summary 通过分享链接获取小红书的Note ID 和 xsec_token/Get Xiaohongshu Note ID and xsec_token by share link
     * @param {string} shareText 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet_6(shareText: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getNoteIdAndXsecTokenApiV1XiaohongshuWebGetNoteIdAndXsecTokenGet_6(shareText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取笔记信息 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
     * @summary 获取笔记信息 V1/Get note info V1
     * @param {string} [noteId] 笔记ID/Note ID
     * @param {string} [shareText] 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet(noteId?: string, shareText?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet(noteId, shareText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取笔记信息 V1 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V1 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
     * @summary 获取笔记信息 V1/Get note info V1
     * @param {string} [noteId] 笔记ID/Note ID
     * @param {string} [shareText] 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet_7(noteId?: string, shareText?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getNoteInfoV1ApiV1XiaohongshuWebGetNoteInfoGet_7(noteId, shareText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取笔记信息 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
     * @summary 获取笔记信息 V2/Get note info V2
     * @param {string} [noteId] 笔记ID/Note ID
     * @param {string} [shareText] 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get(noteId?: string, shareText?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get(noteId, shareText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取笔记信息 V2 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V2 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
     * @summary 获取笔记信息 V2/Get note info V2
     * @param {string} [noteId] 笔记ID/Note ID
     * @param {string} [shareText] 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get_8(noteId?: string, shareText?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getNoteInfoV2ApiV1XiaohongshuWebGetNoteInfoV2Get_8(noteId, shareText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取笔记信息V3，仅支持完整的小红书分享链接 ### 参数: - share_text: 完整的小红书分享链接（支持APP和Web端分享链接） ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V3, only support complete Xiaohongshu sharing link ### Parameters: - share_text: Complete Xiaohongshu sharing link(support APP and Web sharing link) ### Return: - Note info  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"
     * @summary 获取笔记信息 V3 (游客)/Get note info V3 (Visitor)
     * @param {string} shareText 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get(shareText: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get(shareText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取笔记信息V3，仅支持完整的小红书分享链接 ### 参数: - share_text: 完整的小红书分享链接（支持APP和Web端分享链接） ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V3, only support complete Xiaohongshu sharing link ### Parameters: - share_text: Complete Xiaohongshu sharing link(support APP and Web sharing link) ### Return: - Note info  # [示例/Example] share_text=\"https://xhslink.com/a/EZ4M9TwMA6c3\"
     * @summary 获取笔记信息 V3 (游客)/Get note info V3 (Visitor)
     * @param {string} shareText 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get_9(shareText: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getNoteInfoV3ApiV1XiaohongshuWebGetNoteInfoV3Get_9(shareText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取笔记信息V4 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V4 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
     * @summary 获取笔记信息 V4/Get note info V4
     * @param {string} [noteId] 笔记ID/Note ID
     * @param {string} [shareText] 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get(noteId?: string, shareText?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get(noteId, shareText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取笔记信息V4 ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - share_text: 小红书分享链接（支持APP和Web端分享链接） - 优先使用`note_id`，如果没有则使用`share_text`，两个参数二选一，如都携带则以`note_id`为准。 ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V4 ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - share_text: Xiaohongshu sharing link (support APP and Web sharing link) - Prefer to use `note_id`, if not, use `share_text`, one of the two parameters is required, if both are carried, `note_id` shall prevail. ### Return: - Note info  # [示例/Example] note_id=\"665f95200000000006005624\"
     * @summary 获取笔记信息 V4/Get note info V4
     * @param {string} [noteId] 笔记ID/Note ID
     * @param {string} [shareText] 分享链接/Share link
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get_10(noteId?: string, shareText?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getNoteInfoV4ApiV1XiaohongshuWebGetNoteInfoV4Get_10(noteId, shareText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取笔记信息V5，用户自行提供Cookie来获取笔记信息 - 此接口收费0.001$ ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - xsec_token: X-Sec-Token，可以从搜索接口中获取，分享链接中也有/X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: 用户自行提供的已登录的网页Cookie - proxy: 代理，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port - 最好使用代理，避免被封号或其他未知问题。  ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V5, user provides Cookie to get note info - This interface charges 0.001$ ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - xsec_token: X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: User provided logged-in web Cookie - proxy: Proxy, format: http://username:password@IP:port - It is recommended to use a proxy to avoid being banned or other unknown issues. ### Return: - Note info  # [示例/Example] note_id = \"67855d09000000001703d449\" xsec_token = \"ABfpRSESmZDRbX-EX7lzEztktMngxPVC9kU-dgQmuQoNo=\" cookie = \"Your Cookie\" proxy = \"http://username:password@IP:port\"
     * @summary 获取笔记信息 V5 (自带Cookie)/Get note info V5 (Self-provided Cookie)
     * @param {GetNoteInfoV5Request} [getNoteInfoV5Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post(getNoteInfoV5Request?: GetNoteInfoV5Request, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post(getNoteInfoV5Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取笔记信息V5，用户自行提供Cookie来获取笔记信息 - 此接口收费0.001$ ### 参数: - note_id: 笔记ID，可以从小红书的分享链接中获取 - xsec_token: X-Sec-Token，可以从搜索接口中获取，分享链接中也有/X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: 用户自行提供的已登录的网页Cookie - proxy: 代理，格式：http://用户名:密码@IP:端口/Proxy, format: http://username:password@IP:port - 最好使用代理，避免被封号或其他未知问题。  ### 返回: - 笔记信息  # [English] ### Purpose: - Get note info V5, user provides Cookie to get note info - This interface charges 0.001$ ### Parameters: - note_id: Note ID, can be obtained from the sharing link of Xiaohongshu website. - xsec_token: X-Sec-Token, can be obtained from the search interface, also in the sharing link - cookie: User provided logged-in web Cookie - proxy: Proxy, format: http://username:password@IP:port - It is recommended to use a proxy to avoid being banned or other unknown issues. ### Return: - Note info  # [示例/Example] note_id = \"67855d09000000001703d449\" xsec_token = \"ABfpRSESmZDRbX-EX7lzEztktMngxPVC9kU-dgQmuQoNo=\" cookie = \"Your Cookie\" proxy = \"http://username:password@IP:port\"
     * @summary 获取笔记信息 V5 (自带Cookie)/Get note info V5 (Self-provided Cookie)
     * @param {GetNoteInfoV5Request} [getNoteInfoV5Request] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post_11(getNoteInfoV5Request?: GetNoteInfoV5Request, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getNoteInfoV5ApiV1XiaohongshuWebGetNoteInfoV5Post_11(getNoteInfoV5Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户信息 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
     * @summary 获取用户信息 V1/Get user info V1
     * @param {string} userId 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getUserInfoApiV1XiaohongshuWebGetUserInfoGet(userId: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getUserInfoApiV1XiaohongshuWebGetUserInfoGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户信息 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
     * @summary 获取用户信息 V1/Get user info V1
     * @param {string} userId 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getUserInfoApiV1XiaohongshuWebGetUserInfoGet_12(userId: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getUserInfoApiV1XiaohongshuWebGetUserInfoGet_12(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户信息 V2 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V2 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
     * @summary 获取用户信息 V2/Get user info V2
     * @param {string} [userId] 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get(userId?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户信息 V2 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V2 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
     * @summary 获取用户信息 V2/Get user info V2
     * @param {string} [userId] 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get_13(userId?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getUserInfoV2ApiV1XiaohongshuWebGetUserInfoV2Get_13(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户信息 V3 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V3 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
     * @summary 获取用户信息 V3/Get user info V3
     * @param {string} userId 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get(userId: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户信息 V3 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 ### 返回: - 用户信息  # [English] ### Purpose: - Get user info V3 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. ### Return: - User info  # [示例/Example] user_id=\"5f4a10070000000001006fc7\"
     * @summary 获取用户信息 V3/Get user info V3
     * @param {string} userId 用户ID/User ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get_14(userId: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getUserInfoV3ApiV1XiaohongshuWebGetUserInfoV3Get_14(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的笔记 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None
     * @summary 获取用户的笔记 V1/Get user notes V1
     * @param {string} userId 用户ID/User ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getUserNotesApiV1XiaohongshuWebGetUserNotesGet(userId: string, lastCursor?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getUserNotesApiV1XiaohongshuWebGetUserNotesGet(userId, lastCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的笔记 V1 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes V1 ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None
     * @summary 获取用户的笔记 V1/Get user notes V1
     * @param {string} userId 用户ID/User ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getUserNotesApiV1XiaohongshuWebGetUserNotesGet_15(userId: string, lastCursor?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getUserNotesApiV1XiaohongshuWebGetUserNotesGet_15(userId, lastCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的笔记 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None
     * @summary 获取用户的笔记 V2/Get user notes V2
     * @param {string} userId 用户ID/User ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get(userId: string, lastCursor?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get(userId, lastCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取用户的笔记 ### 参数: - user_id: 用户ID，可以从小红书的分享链接中获取 - lastCursor: 第一次请求时为空，之后请求时使用上一次请求响应中返回的最后一个NoteID     - 例如: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### 返回: - 用户的笔记列表  # [English] ### Purpose: - Get user notes ### Parameters: - user_id: User ID, can be obtained from the sharing link of Xiaohongshu website. - lastCursor: Last cursor, empty for the first request, use the last NoteID returned in the last response for subsequent requests     - Example: \"662908190000000001007366\"     - JSON Path: $.data.data.notes.[-1].id ### Return: - User notes list  # [示例/Example] user_id=\"5f4a10070000000001006fc7\" lastCursor=None
     * @summary 获取用户的笔记 V2/Get user notes V2
     * @param {string} userId 用户ID/User ID
     * @param {string} [lastCursor] 上一页的游标/Last cursor
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get_16(userId: string, lastCursor?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getUserNotesApiV1XiaohongshuWebGetUserNotesV2Get_16(userId, lastCursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取小红书网页版的游客Cookie，可以用于爬取小红书的一些数据。 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get Xiaohongshu web visitor cookie, which can be used to crawl some data of Xiaohongshu. ### Return: - Visitor cookie
     * @summary 获取游客Cookie/Get visitor cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet(options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 获取小红书网页版的游客Cookie，可以用于爬取小红书的一些数据。 ### 返回: - 游客Cookie  # [English] ### Purpose: - Get Xiaohongshu web visitor cookie, which can be used to crawl some data of Xiaohongshu. ### Return: - Visitor cookie
     * @summary 获取游客Cookie/Get visitor cookie
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public getVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet_17(options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).getVisitorCookieApiV1XiaohongshuWebGetVisitorCookieGet_17(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索笔记 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 - sort: 排序方式     - 综合排序（默认参数）: general     - 最热排序: popularity_descending     - 最新排序: time_descending - noteType: 笔记类型     - 综合笔记（默认参数）: _0     - 视频笔记: _1     - 图文笔记: _2 ### 返回: - 笔记列表  # [English] ### Purpose: - Search notes ### Parameters: - keyword: Keyword - page: Page, default is 1 - sort: Sort     - General sort (default): general     - Popularity sort: popularity_descending     - Latest sort: time_descending - noteType: Note type     - General note (default): _0     - Video note: _1     - Image note: _2 ### Return: - Note list  # [示例/Example] keyword=\"美食\" page=1 sort=\"general\" noteType=\"_0\"
     * @summary 搜索笔记/Search notes
     * @param {string} keyword 搜索关键词/Keyword
     * @param {number} [page] 页码/Page
     * @param {string} [sort] 排序方式/Sort
     * @param {string} [noteType] 笔记类型/Note type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public searchNotesApiV1XiaohongshuWebSearchNotesGet(keyword: string, page?: number, sort?: string, noteType?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).searchNotesApiV1XiaohongshuWebSearchNotesGet(keyword, page, sort, noteType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索笔记 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 - sort: 排序方式     - 综合排序（默认参数）: general     - 最热排序: popularity_descending     - 最新排序: time_descending - noteType: 笔记类型     - 综合笔记（默认参数）: _0     - 视频笔记: _1     - 图文笔记: _2 ### 返回: - 笔记列表  # [English] ### Purpose: - Search notes ### Parameters: - keyword: Keyword - page: Page, default is 1 - sort: Sort     - General sort (default): general     - Popularity sort: popularity_descending     - Latest sort: time_descending - noteType: Note type     - General note (default): _0     - Video note: _1     - Image note: _2 ### Return: - Note list  # [示例/Example] keyword=\"美食\" page=1 sort=\"general\" noteType=\"_0\"
     * @summary 搜索笔记/Search notes
     * @param {string} keyword 搜索关键词/Keyword
     * @param {number} [page] 页码/Page
     * @param {string} [sort] 排序方式/Sort
     * @param {string} [noteType] 笔记类型/Note type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public searchNotesApiV1XiaohongshuWebSearchNotesGet_18(keyword: string, page?: number, sort?: string, noteType?: string, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).searchNotesApiV1XiaohongshuWebSearchNotesGet_18(keyword, page, sort, noteType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 ### 返回: - 用户列表  # [English] ### Purpose: - Search users ### Parameters: - keyword: Keyword - page: Page, default is 1 ### Return: - User list  # [示例/Example] keyword=\"美食\" page=1
     * @summary 搜索用户/Search users
     * @param {string} keyword 搜索关键词/Keyword
     * @param {number} [page] 页码/Page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public searchUsersApiV1XiaohongshuWebSearchUsersGet(keyword: string, page?: number, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).searchUsersApiV1XiaohongshuWebSearchUsersGet(keyword, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 搜索用户 ### 参数: - keyword: 搜索关键词 - page: 页码，默认为1 ### 返回: - 用户列表  # [English] ### Purpose: - Search users ### Parameters: - keyword: Keyword - page: Page, default is 1 ### Return: - User list  # [示例/Example] keyword=\"美食\" page=1
     * @summary 搜索用户/Search users
     * @param {string} keyword 搜索关键词/Keyword
     * @param {number} [page] 页码/Page
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public searchUsersApiV1XiaohongshuWebSearchUsersGet_19(keyword: string, page?: number, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).searchUsersApiV1XiaohongshuWebSearchUsersGet_19(keyword, page, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 小红书Web签名，用于获取小红书的一些数据。 - 生成 `X-s`, `X-t`, `X-s-common` 等签名参数。 - 价格：0.001$/次 ### 参数: - sign_request: 签名请求模型     - path: 请求接口的路径，例如: `/api/sns/web/v1/homefeed`     - data: 请求API的荷载数据     - cookie: 请求接口的Cookie ### 返回: - 签名参数(X-s, X-t, X-s-common等)  # [English] ### Purpose: - Xiaohongshu Web sign, used to get some data of Xiaohongshu. - Generate `X-s`, `X-t`, `X-s-common` and other signature parameters. - Price: 0.001$/time ### Parameters: - sign_request: Sign request model     - path: Request API path, e.g. `/api/sns/web/v1/homefeed`     - data: Payload data of request API     - cookie: Request API cookie ### Return: - Signature parameters(X-s, X-t, X-s-common, etc.)  # [示例/Example] {     \"path\": \"/api/sns/web/v1/homefeed\",     \"data\": {         \"cursor_score\": \"\",         \"num\": 35,         \"refresh_type\": 1,         \"note_index\": 35,         \"unread_begin_note_id\": \"\",         \"unread_end_note_id\": \"\",         \"unread_note_count\": 0,         \"category\": \"homefeed_recommend\",         \"search_key\": \"\",         \"need_num\": 10,         \"image_formats\": [             \"jpg\",             \"webp\",             \"avif\"         ],         \"need_filter_image\": False     },     \"cookie\": \"web_session=030037a04eafd37791e6e4bd05204a8cf2af05;acw_tc=0a00d79f17363096679345838efb77751cc087fb039dd1691dc954824410f6;abRequestId=384480ae-5196-5818-a835-42e6278de9f0;webBuild=4.47.1;xsecappid=xhs-pc-web;a1=194441ef694PayUbdUvgp0dSHfIcACsNsLud0Lgru50000354513;webId=6cf10a564b9b07d129729b65e0d1785a;sec_poison_id=32964532-d414-4beb-914f-98811853b75f\" }
     * @summary 小红书Web签名/Xiaohongshu Web sign
     * @param {XhsWebSignRequestModel} [xhsWebSignRequestModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public signApiV1XiaohongshuWebSignPost(xhsWebSignRequestModel?: XhsWebSignRequestModel, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).signApiV1XiaohongshuWebSignPost(xhsWebSignRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * # [中文] ### 用途: - 小红书Web签名，用于获取小红书的一些数据。 - 生成 `X-s`, `X-t`, `X-s-common` 等签名参数。 - 价格：0.001$/次 ### 参数: - sign_request: 签名请求模型     - path: 请求接口的路径，例如: `/api/sns/web/v1/homefeed`     - data: 请求API的荷载数据     - cookie: 请求接口的Cookie ### 返回: - 签名参数(X-s, X-t, X-s-common等)  # [English] ### Purpose: - Xiaohongshu Web sign, used to get some data of Xiaohongshu. - Generate `X-s`, `X-t`, `X-s-common` and other signature parameters. - Price: 0.001$/time ### Parameters: - sign_request: Sign request model     - path: Request API path, e.g. `/api/sns/web/v1/homefeed`     - data: Payload data of request API     - cookie: Request API cookie ### Return: - Signature parameters(X-s, X-t, X-s-common, etc.)  # [示例/Example] {     \"path\": \"/api/sns/web/v1/homefeed\",     \"data\": {         \"cursor_score\": \"\",         \"num\": 35,         \"refresh_type\": 1,         \"note_index\": 35,         \"unread_begin_note_id\": \"\",         \"unread_end_note_id\": \"\",         \"unread_note_count\": 0,         \"category\": \"homefeed_recommend\",         \"search_key\": \"\",         \"need_num\": 10,         \"image_formats\": [             \"jpg\",             \"webp\",             \"avif\"         ],         \"need_filter_image\": False     },     \"cookie\": \"web_session=030037a04eafd37791e6e4bd05204a8cf2af05;acw_tc=0a00d79f17363096679345838efb77751cc087fb039dd1691dc954824410f6;abRequestId=384480ae-5196-5818-a835-42e6278de9f0;webBuild=4.47.1;xsecappid=xhs-pc-web;a1=194441ef694PayUbdUvgp0dSHfIcACsNsLud0Lgru50000354513;webId=6cf10a564b9b07d129729b65e0d1785a;sec_poison_id=32964532-d414-4beb-914f-98811853b75f\" }
     * @summary 小红书Web签名/Xiaohongshu Web sign
     * @param {XhsWebSignRequestModel} [xhsWebSignRequestModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof XiaohongshuWebAPIApi
     */
    public signApiV1XiaohongshuWebSignPost_20(xhsWebSignRequestModel?: XhsWebSignRequestModel, options?: any) {
        return XiaohongshuWebAPIApiFp(this.configuration).signApiV1XiaohongshuWebSignPost_20(xhsWebSignRequestModel, options).then((request) => request(this.axios, this.basePath));
    }

}
